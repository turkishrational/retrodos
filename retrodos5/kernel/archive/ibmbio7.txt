     1                                  ; ****************************************************************************
     2                                  ; IBMBIO7.S (PCDOS 7.1 IBMBIO.COM) - RETRO DOS 5.0 by ERDOGAN TAN - 12/09/2023
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 21/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 26/12/2018 (Retro DOS 4.0), 01/10/2022 (Retro DOS 4.2)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm ibmbio7.s -l ibmbio7.txt -o IBMBIO.COM -Z error.txt))
    11                                  ;					   -o IBMBIO7.BIN
    12                                  ; ****************************************************************************
    13                                  
    14                                  ; 12/09/2023 - Retro DOS v5.0 Kernel -dosbios- ('ibmbio7.s')
    15                                  ; Modified from 'iosys6.s' (11/09/2023, Retro DOS v4.2 Kernel's IO.SYS) file
    16                                  ; as below:
    17                                  ;
    18                                  ;    1) Retro DOS v4.2 IO.SYS is based on disassembled source code
    19                                  ;	of MSDOS 6.21 IO.SYS, derived using MSDOS 6.0 source code.
    20                                  ;
    21                                  ;    2) Labels, names, comments, explanations and structure definitions
    22                                  ;	about procedures and code details are almost entirely taken from
    23                                  ;	the original MSDOS 6.0 source code, except for the details that
    24                                  ;	Erdogan Tan personally experienced. Some of them are incompatible
    25                                  ;	with PCDOS 7.1 code. But they have not been deleted to preserve
    26                                  ;	the originality of the descriptions.)
    27                                  ;
    28                                  ;    3)'ibmbio7.s' contains the BIOSLOADER (MSLOADER) section located in
    29                                  ;	the 1st 4 sectors of the IBMBIO.COM file on disk. This is a method
    30                                  ;	from older DOS versions (3 sectors for MSDOS 6.22).
    31                                  ;	The MSDOS/PCDOS boot sector code only reads these MSLOADER/BIOSLOADER
    32                                  ;	sectors and transfers control to the MSLOADER/BIOSLOADER code.
    33                                  ;	BUT!!! The Retro DOS v3 (& v5) boot sector code loads the entire
    34                                  ;	MSDOS.SYS/PCDOS.SYS -combined- kernel file into memory at once.
    35                                  ;	So, hence the Retro DOS boot sector code, 'retrodos5.s' file
    36                                  ;       contains slightly different IO.SYS/IBMBIO.COM INITialization code
    37                                  ;	than the original PCDOS/MSDOS. It does not include 
    38                                  ;	the MSLOADER/BIOSLOADER section. The 'retrodos5.s' and 'ibmbio7.s'
    39                                  ;	files are almost identical except their INIT codes.)
    40                                  ;
    41                                  ; ('iosys6.s' has been converted to 'ibmbio7.s' and 'retrodos42.s' has been
    42                                  ; converted to 'retrodos5.s'. 'ibmbio7.s' is IBMBIO.COM source code file
    43                                  ; while 'retrodos5.s' is source code of Retro DOS v5 kernel file 'PCDOS.SYS'.
    44                                  ; 'retrodos5.s' includes 'ibmdos7.bin' or IBMDOS.COM as binary file.)
    45                                  
    46                                  ; ----------------------------------------------------------------------------
    47                                  
    48                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    49                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    50                                  
    51                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    52                                  ;     (as included binary, 'IOSYS5.BIN') 
    53                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    54                                  ;						        (except MSLOAD code)
    55                                        
    56                                  ;---- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    57                                  ;     at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    58                                  ;     moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    59                                  ;     Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    60                                  ;     SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    61                                  ;     (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    62                                  
    63                                  ; ----------------------------------------------------------------------------
    64                                  
    65                                  ; ----------------------------------------------------------------------------
    66                                  ;
    67                                  ; +-------------------------------------------------------------------------+
    68                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
    69                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
    70                                  ; |			 Licensed to: Freeware version			    |
    71                                  ; +-------------------------------------------------------------------------+
    72                                  ;
    73                                  ; ----------------------------------------------------------------------------
    74                                  
    75                                  ;		.386
    76                                  ;		.model flat
    77                                  
    78                                  ; ============================================================================
    79                                  
    80                                  ; 12/09/2023 - Erdogan Tan - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
    81                                  
    82                                  ;-----------------------------------------------------------------------------
    83                                  
    84                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
    85                                  
    86                                  ;-----------------------------------------------------------------------------
    87                                  ; Start of (PCDOS 7.1) IBMBIO.COM
    88                                  ;-----------------------------------------------------------------------------
    89                                  
    90                                  		[ORG 0]			; segment 0x0070h
    91                                  
    92                                  ;=============================================================================
    93                                  ; IBMBIO.COM (IO.SYS) LOADER SECTION 
    94                                  ;=============================================================================
    95                                  ; 12/09/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
    96                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
    97                                  ;non-contiguous io.sys loader (msload) ((MSDOS 6.0 source: MSLOAD.ASM, 1991))
    98                                  
    99                                  section .MSLOAD ; vstart=0 ;; .BIOSLOAD 
   100                                  
   101                                  ; ===========================================================================
   102                                  
   103                                  ; 09/12/2022
   104                                  ; Comments are from MSDOS 6.0 MSLOAD.ASM (1991) & HEX-RAYS IDA disasm output
   105                                  
   106                                  ; ===========================================================================
   107                                  ;	NOTE: The boot loader should be verifying that the first
   108                                  ;	  block of io.sys is, in fact, at cluster 2. This would be saving
   109                                  ;	  a whole lot of time during system debugging.
   110                                  ;
   111                                  ;============================================================================
   112                                  ;
   113                                  ;     for dos 4.00, msload program has been changed to allow:
   114                                  ;	  1. 32 bit calculation,
   115                                  ;	  2. reading a fat sector when needed, instead of reading the whole
   116                                  ;	     fat sectors at once. this will make the boot time faster,
   117                                  ;	     and eliminate the memory size limitation problem,
   118                                  ;	  3. solving the limitation of the file size (29 kb) of io.sys0,
   119                                  ;	  4. adding the boot error message. show the same boot error message
   120                                  ;	     and do the same behavior when the read operation of io.sys
   121                                  ;	     fails as the msboot program, since msload program is the
   122                                  ;	     extention of msboot program.
   123                                  ;
   124                                  ; ===========================================================================
   125                                  
   126                                  ;----------------------------------------------------------------------------
   127                                  ;
   128                                  ; M056 : Added RPL support, so that RPL's fake INT 13 code can be safe from
   129                                  ;		SYSINIT & transient portion of COMMAND.COM
   130                                  ;
   131                                  ;----------------------------------------------------------------------------
   132                                  		
   133                                  		[ORG 0]			; segment 0x0070h
   134                                  
   135                                  START$:
   136 00000000 EB45                    		jmp	short SaveInputValues	; 13/09/2023
   137 00000002 90                      		nop	; 13/09/2023
   138                                  %if 0
   139                                  ; 20/12/2022
   140                                  ; 09/12/2022
   141                                  ; ---------------------------------------------------------------------------
   142                                  SysVersion:	dw 5			; expected_version
   143                                  ;MyStacks:	db 256 dup(0)		; local stack
   144                                  ; 22/12/2022
   145                                  ; 20/12/2022
   146                                  ;MyStacks:	dw 102 dup(0)		; local stack
   147                                  NumHeads:	dw 0			; ...
   148                                  ClusterSize:	db 2 dup(0)		; ...
   149                                  StartSecL:	dw 0			; ...
   150                                  StartSecH:	dw 0			; ...
   151                                  TempH:		dw 0			; for 32 bit calculation
   152                                  TempCluster:	db 2 dup(0)		; temporary place for cluster number
   153                                  LastFatSector:	db 2 dup(0FFh)		; fat sec # start from 1st FAT entry
   154                                  SectorCount:	dw 0			; ...
   155                                  SecPerFat:	dw 0			; ...
   156                                  HiddenSectorsL:	dw 0			; ...
   157                                  HiddenSectorsH:	dw 0			; ...
   158                                  BytesPerSec:	dw 0			; ...
   159                                  ReservSectors:	db 2 dup(0)		; ...
   160                                  CurrentCluster:	db 2 dup(0)		; ...
   161                                  NextBioLocation: db 2 dup(0)		; ...
   162                                  FirstSectorL:	dw 0			; ...
   163                                  FirstSectorH:	dw 0			; ...
   164                                  TotalSectorsL:	dw 0			; max. number of sectors
   165                                  TotalSectorsH:	dw 0			; ...
   166                                  SecPerTrack:	db 2 dup(0)		; ...
   167                                  BootDrive:	db 0			; ...
   168                                  Fatsize:	db 0			; ...
   169                                  MediaByte:	db 0			; ...
   170                                  EndOfFile:	db 0			; ...
   171                                  OrgDasdPtr:	db 4 dup(0)		; ...
   172                                  FatSegment:	db 2 dup(0)		; ...
   173                                  SecPerCluster:	db 0			; ...
   174                                  ; ---------------------------------------------------------------------------
   175                                  %endif
   176                                  
   177                                  ; 13/09/2023 (Retro DOS v5)
   178                                  ; 24/12/2022 (Retro DOS v4)
   179                                  ; 23/12/2022
   180                                  ; 20/12/2022
   181                                  ; 09/12/2022
   182                                  ; ---------------------------------------------------------------------------
   183                                  ;SysVersion:	dw 5			; expected_version
   184 00000003 07                      SysVersionMajor: db 7	; Retro DOS v5.0 (IBM PCDOS 7.1)
   185 00000004 0A                      SysVersionMinor: db 10
   186 00000005 0000                    ClusterSize:	dw 0
   187 00000007 0000                    StartSecL:	dw 0
   188 00000009 0000                    StartSecH:	dw 0
   189 0000000B 0000                    TempH:		dw 0			; for 32 bit calculation
   190                                  ;TempCluster:	dw 0
   191 0000000D FFFF                    LastFatSectorL:	dw 0FFFFh		; fat sec # start from 1st FAT entry
   192 0000000F FFFF                    LastFatSectorH:	dw 0FFFFh		; fat sec # start from 1st FAT entry
   193 00000011 0000                    SectorCount:	dw 0
   194                                  CurrentCluster:	
   195                                  		; 06/10/2023
   196                                  CurrentClusterL:
   197 00000013 0000                    		dw 0
   198                                  CurrentClusterH:
   199 00000015 0000                    		dw 0	; 13/09/2023 - HW of FAT32 cluster number
   200                                  		; 27/12/2023
   201                                  FirstCluster:	; 06/10/2023
   202 00000017 0000                    FirstClusterL:	dw 0
   203 00000019 0000                    FirstClusterH:	dw 0
   204                                  		;;
   205 0000001B 0000                    BytesPerSec:	dw 0
   206 0000001D 0000                    SecPerCluster:	dw 0
   207                                  		; 13/09/2023
   208 0000001F 0000                    ReservSectors:	dw 0
   209 00000021 0000                    NumFats:	dw 0
   210 00000023 0000                    RootEntCnt:	dw 0
   211 00000025 0000                    SecPerTrack:	dw 0
   212 00000027 0000                    NumHeads:	dw 0
   213 00000029 0000                    HiddenSectorsL:	dw 0
   214 0000002B 0000                    HiddenSectorsH:	dw 0
   215 0000002D 0000                    TotalSectorsL:	dw 0			; max. number of sectors
   216 0000002F 0000                    TotalSectorsH:	dw 0
   217 00000031 0000                    FATSectorsL:	dw 0
   218 00000033 0000                    FATSectorsH:	dw 0
   219 00000035 0000                    RootClusterL:	dw 0
   220 00000037 0000                    RootClusterH:	dw 0
   221                                  		;;
   222 00000039 0000                    FirstSectorL:	dw 0
   223 0000003B 0000                    FirstSectorH:	dw 0
   224 0000003D 00                      BootDrive:	db 0
   225 0000003E 00                      FatType:	db 0
   226 0000003F 00                      MediaByte:	db 0
   227 00000040 00                      EndOfFile:	db 0
   228 00000041 00000000                OrgDasdPtr:	dd 0
   229                                  		; 06/10/2023
   230                                  ;FatStartSecL:	dw 0
   231                                  ;FatStartSecH:	dw 0
   232 00000045 0000                    FatSegment:	dw 0
   233                                  		; 05/10/2023
   234                                  ;NextBioLocation:
   235                                  	; 05/10/2023 (bp register will be used instead of [NextBioLocation])
   236                                  		;dw 0
   237                                  
   238                                  		; 13/09/2023
   239                                  
   240                                  ; SaveInputValues
   241                                  ; ---------------------------------------------------------------------------
   242                                  ; INPUT:     none
   243                                  ;
   244                                  ;   dl = int 13 drive number we booted from
   245                                  ;   ch = media byte
   246                                  ;   bx = first data sector (low) on disk (0-based)
   247                                  ;   ds:si = original rom bios diskette parameter table.
   248                                  ;
   249                                  ; if an extended boot record, then ax will be the first data sector
   250                                  ; high word. save ax and set FirstSectorH according to ax if it is an
   251                                  ; extended boot record.
   252                                  ;
   253                                  ;   ax = first data sector (high) on disk ;
   254                                  ; OUTPUT:
   255                                  ;
   256                                  ;   bx = first data sector on disk
   257                                  ;
   258                                  ;   MediaByte = input ch
   259                                  ;   BootDrive = input dl
   260                                  ;   FirstSectorL = input bx
   261                                  ;   FirstSectorH = input ax, if an extended boot record.;j.k.
   262                                  ;   TotalSectorsL = maximum sector number in this media ;j.k.
   263                                  ;   TotalSectorsH = high word of the above
   264                                  ;   HiddenSectorsL = hidden secotrs
   265                                  ;   HiddenSectorsH
   266                                  ;   ReservSectors = reserved sectors
   267                                  ;   SecPerTrack = sectors/track
   268                                  ;   NumHeads = heads/cylinder
   269                                  ;
   270                                  ;   ds = 0
   271                                  ;   AX,DX,SI destroyed
   272                                  ;
   273                                  ; calls:     none
   274                                  ; ---------------------------------------------------------------------------
   275                                  ;FUNCTION:
   276                                  ; save input information and bpb informations from the boot record.
   277                                  ; ---------------------------------------------------------------------------
   278                                  
   279                                  Sec9 equ 522h
   280                                  ; 20/12/2022	
   281                                  DskAddr	equ 1Eh*4 ; 78h
   282                                  ; 22/12/2022
   283                                  ;StackPtr equ MyStacks+(NumHeads-MyStacks)
   284                                  
   285                                  ; ---------------------------------------------------------------------------
   286                                  
   287                                  		; 13/09/2023
   288                                  		; (registers from PCDOS 7.1 boot sector)
   289                                  		; ss = 0
   290                                  		; sp = 7BE4h
   291                                  		;	[0:7BE4h] = ss:bx = 0:78h (1Eh vector)
   292                                  		;	[0:7BE8h] = ds:si = DSK_PARMS (INT 1Eh) table address
   293                                  		; bp = 7BECh
   294                                  		; ds = 0
   295                                  		; ax:bx = absolute disk address for cluster 2 (data start)
   296                                  		;	= dword/far ptr [0:7BFCh]
   297                                  		; es = ax	
   298                                  		; dl = [BootDrv] = [7C40h] ; !FAT32 BPB!
   299                                  		; ch = [MediaByte] = [7C15h]
   300                                  		; ds:si = rom bios disk(ette) params table address (INT 1Eh)
   301                                  		;	= [0:7BE8h] = 0:7BECh
   302                                  		;	(ds:si is also in stack, at [0:7BE8h])
   303                                  		; 0:500h = root dir buffer (1st sector of the root dir)
   304                                  		; [0:7Eh] = disk(ette) params table address = 0:7BECh
   305                                  		;	   (head settle time = 15ms) 
   306                                  
   307                                  SaveInputValues:
   308                                  		; 13/09/2023 (Retro DOS v5 MSLOADER/BIOSLOADER)
   309 00000047 8CDF                    		mov	di, ds ; DSK_PARMS (INT 1Eh) table segment
   310                                  
   311                                  		; 24/12/2022 (Retro DOS v4 MSLOADER)
   312 00000049 0E                      		push	cs
   313 0000004A 1F                      		pop	ds 
   314                                  		;mov	[cs:FirstSectorL], bx ; first data sector (low word)
   315                                  		;mov	[cs:MediaByte], ch
   316                                  		;mov	[cs:BootDrive], dl
   317                                  		; 13/09/2023
   318 0000004B 891E[3900]              		mov	[FirstSectorL], bx
   319 0000004F A3[3B00]                		mov	[FirstSectorH], ax
   320 00000052 891E[0700]              		mov	[StartSecL], bx ; **!**
   321 00000056 A3[0900]                		mov	[StartSecH], ax ; **!!**
   322 00000059 882E[3F00]              		mov	[MediaByte], ch
   323 0000005D 8816[3D00]              		mov	[BootDrive], dl
   324                                  
   325                                  		; 13/09/2023
   326                                  		; (PCDOS 7.1 MSLOAD:0058h)
   327                                  		;pop	si	
   328                                  		;pop	ds
   329                                  		;	; from BS code..
   330                                  		;	; ss:sp = 0:7BE4h, bp = 7BECh
   331                                  		;	; Clear stack and load disk parameters table in ds:si
   332                                  		;	;
   333                                  		;	; pop.. Original INT 1Eh vector address
   334                                  		;pop	si
   335                                  		;pop	ds
   336                                  		;	; pop.. Original INT 1Eh disk table address
   337                                  
   338                                  		; 13/09/2023
   339                                  		; Note: DS:SI -from BS- points to DSK_PARMS (INT 1Eh) tbl addr
   340                                  		; (no need to pop/take address from stack)
   341                                  
   342                                  		;mov	sp, bp ; sp = 7BECh
   343                                  
   344                                  		; sp = 7BE4h
   345                                  
   346                                  		; 13/09/2023
   347                                  		; Save original (ROMBIOS) DSK_PARMS table address 
   348 00000061 8936[4100]              		mov	[OrgDasdPtr], si   ; DSK_PARMS (INT 1Eh) tbl offset
   349 00000065 893E[4300]              		mov	[OrgDasdPtr+2], di ; DSK_PARMS (INT 1Eh) tbl segment
   350                                  
   351 00000069 31C9                    		xor	cx, cx		; segment 0 (obviously)
   352 0000006B 8ED9                    		mov	ds, cx		; ZERO
   353                                  		; 13/09/2023
   354 0000006D 8EC1                    		mov	es, cx
   355 0000006F 57                      		push	di
   356 00000070 BF2205                  		mov	di, Sec9
   357 00000073 893E7800                		mov	[DskAddr], di	; mov [78h], di ; 522h
   358 00000077 890E7A00                		mov	[DskAddr+2], cx ; mov [7Ah], cx ; 0
   359 0000007B 1F                      		pop	ds
   360 0000007C B10E                    		mov	cl, 14		; (11+3 bytes for IBM rombios)
   361 0000007E FC                      		cld
   362 0000007F F3A4                    		rep movsb		; copy table
   363                                  		; 20/12/2022
   364 00000081 8ED9                    		mov	ds, cx ; 0
   365                                  		; 23/12/2022
   366                                  		; es = 0
   367                                  		; ds = 0
   368                                  		; ss = 0
   369                                  
   370                                  		; 13/09/2023
   371                                  		;mov	cx, [051Ah]	; LW of IBMBIO.COM (IO.SYS) first cluster
   372                                  		;mov	[cs:CurrentCluster], cx
   373                                  		;mov	cx, [0514h]	; HW of IBMBIO.COM (IO.SYS) first cluster
   374                                  		;mov	[cs:CurrentCluster+2], cx
   375                                  ; 24/12/2022
   376                                  %if 0
   377                                  		mov	cx, [7C0Bh] 	; BootSector.ext_boot_bpb.BPB_bytespersector
   378                                  		mov	[cs:BytesPerSec], cx
   379                                  		mov	cl, [7C0Dh]	; BootSector.ext_boot_bpb.BPB_sectorspercluster
   380                                  		mov	[cs:SecPerCluster], cl
   381                                  		mov	cx, [7C18h]	; BootSector.ext_boot_bpb.BPB_sectorspertrack
   382                                  		mov	[cs:SecPerTrack], cx
   383                                  		mov	cx, [7C1Ah]	; BootSector.ext_boot_bpb.BPB_heads
   384                                  		mov	[cs:NumHeads], cx
   385                                  		;mov	cx, [7C16h]	; BootSector.ext_boot_bpb.BPB_sectorsperfat
   386                                  		;mov	[cs:SecPerFat], cx
   387                                  		; 13/09/2023
   388                                  		mov	dx, [7C16h]	; BootSector.ext_boot_bpb.BPB_sectorsperfat
   389                                  		;mov	[cs:FATSectorsL], dx
   390                                  		mov	bl, [7C26h]	; BS_BootSig ; (FAT12 and FAT16)
   391                                  		or	dx, dx ; **
   392                                  		jnz	short not_fat32
   393                                  		mov	bl, [7C42h]	; BS_BootSig ; (FAT32) 
   394                                  not_fat32:
   395                                  		mov	cl, [7C10h]	; BPB_NumFATs
   396                                  		mov	[cs:NumFats], cl
   397                                  		mov	cx, [7C11h]	; BPB_RootEntCnt
   398                                  		mov	[cs:RootEntCnt], cx
   399                                  		;
   400                                  		mov	cx, [7C0Eh]	; BootSector.ext_boot_bpb.BPB_reservedsectors
   401                                  		mov	[cs:ReservSectors], cx
   402                                  		mov	cx, [7C1Ch]	; BootSector.ext_boot_bpb.BPB_hiddensectors
   403                                  		mov	[cs:HiddenSectorsL], cx
   404                                  		mov	cx, [7C13h]	; BootSector.ext_boot_bpb.BPB_totalsectors
   405                                  		mov	[cs:TotalSectorsL], cx
   406                                  
   407                                  		; First of all, check if it the boot record is an extended one.
   408                                  		; This is just a safe guard in case some user just "copy" the
   409                                  		; 4.00 iosys.com to a media with a conventional boot record.
   410                                  
   411                                  		; 22/12/2022
   412                                  		;cmp	byte [7C26h], 29h ; ext_boot_signature
   413                                  		; 13/09/2023
   414                                  		cmp	bl, 29h
   415                                  		jne	short Relocate	; old boot sector
   416                                  					; no need to copy high words
   417                                  		mov	[cs:FirstSectorH], ax ; Start sector # of data, high word
   418                                  		mov	ax, [7C1Eh]	; BPB_HiddSec+2
   419                                  		mov	[cs:HiddenSectorsH], ax
   420                                  		; 10/12/2022
   421                                  		or	cx, cx
   422                                  		;cmp	cx, 0		; cx set already before (=totalsectors)
   423                                  		; 22/12/2022
   424                                  		;jnz	short Relocate
   425                                  		; 13/09/2023
   426                                  		jnz	short not_big
   427                                  		mov	ax, [7C20h]	; BootSector.ext_boot_bpb.BPB_bigtotalsectors
   428                                  		mov	[cs:TotalSectorsL], ax
   429                                  		mov	ax, [7C22h]	; BootSector.ext_boot_bpb.BPB_bigtotalsectors+2
   430                                  		mov	[cs:TotalSectorsH], ax
   431                                  		; 13/09/2023
   432                                  not_big:	
   433                                  		;cmp	word [cs:FATsectorsL], 0
   434                                  		and	dx, dx ; **
   435                                  		jnz	short Relocate	; FAT12 or FAT16 fs
   436                                  
   437                                    		mov     cx, [7C24h]	; BPB_FATSz32 ; FAT32 fs
   438                                  		mov     [cs:FATSectorsL], cx
   439                                  		mov     cx, [7C26h]	; BPB_FATSz32+2
   440                                  		mov     [cs:FATSectorsH], cx
   441                                  		mov     cx, [7C2Ch]	; BPB_RootClus
   442                                  		mov     [cs:RootClusterL], cx
   443                                  		mov     cx, [7C2Eh]    ; BPB_RootClus+2
   444                                  		mov     [cs:RootClusterH], cx
   445                                  %endif
   446                                  		; 13/09/2023 - Erdogan Tan - Istanbul
   447                                  		;
   448                                  		; Note: Boot signature check has been removed because
   449                                  		;	it is not possible to start/run IBMBIO.COM
   450                                  		;	if it would not be a valid FAT32 (or compatible) boot sector
   451                                  		;	(input parameters and register contents would be wrong)
   452                                  
   453 00000083 0E                      		push	cs
   454 00000084 07                      		pop	es
   455                                  
   456                                  		; 13/09/2023
   457 00000085 BF[1700]                		mov	di, FirstCluster
   458 00000088 A11A05                  		mov	ax, [051Ah]	; LW of IBMBIO.COM (IO.SYS) first cluster
   459 0000008B AB                      		stosw			;  Initialize to this cluster
   460 0000008C A11405                  		mov	ax, [0514h]	; HW of IBMBIO.COM (IO.SYS) first cluster
   461 0000008F AB                      		stosw
   462                                  
   463 00000090 BE0B7C                  		mov	si, 7C0Bh	; boot sector's bpb, BytesPerSector
   464                                  		;mov	di, BytesPerSec
   465 00000093 A5                      		movsw	; BytesPerSec
   466 00000094 A4                      		movsb	; SecPerCluster
   467 00000095 47                      		inc	di ; skip high byte of SecPerCluster word (it is 0)
   468 00000096 A5                      		movsw	; ReservSectors
   469                                  		; 13/09/2023
   470 00000097 A4                      		movsb	; NumFats
   471 00000098 47                      		inc	di ; skip high byte of NumFats word (it is 0)
   472 00000099 A5                      		movsw	; RootEntCnt
   473 0000009A AD                      		lodsw	; TotalSectorsL
   474 0000009B 50                      		push	ax	; save TotalSectorsL
   475 0000009C AC                      		lodsb	; skip MediaByte
   476                                  		; 13/09/2023
   477 0000009D AD                      		lodsw	; FATSectorsL (Retro DOS 5) - SecPerFat (Retro DOS 4)
   478 0000009E 89C2                    		mov	dx, ax ; save BPB_FATSz16 into dx (it is 0 for FAT32 fs)
   479 000000A0 A5                      		movsw 	; SecPerTrack
   480 000000A1 A5                      		movsw	; NumHeads
   481 000000A2 A5                      		movsw	; HiddenSectorsL
   482 000000A3 A5                      		movsw	; HiddenSectorsH
   483 000000A4 58                      		pop	ax	; restore TotalSectorsL
   484                                  		; si = 7C20h 
   485                                  		; di = offset TotalSectorsL
   486 000000A5 09C0                    		or	ax, ax	; 16 bit total sectors value
   487 000000A7 7403                    		jz	short big_total_sectors
   488 000000A9 AB                      		stosw	; TotalSectorsL
   489                                  			; TotalsectorsH = 0
   490 000000AA EB02                    		jmp	short chk_fatsz_16
   491                                  
   492                                  big_total_sectors:
   493                                  		; BigTotalSecs - 32 bit total sectors value
   494 000000AC A5                      		movsw 	; BPB_TotSec32 (lw) -> TotalSectorsL
   495 000000AD A5                      		movsw	; BPB_TotSec32 (hw) -> TotalSectorsH
   496                                  chk_fatsz_16:
   497                                  		; 13/09/2023
   498                                  		; si = 7C24h
   499 000000AE 09D2                    		or	dx, dx ; **
   500 000000B0 7405                    		jz	short fat32_bs	; FAT32 boot sector
   501                                  		; FAT (FAT12 or FAT16) boot sector
   502 000000B2 47                      		inc	di  ; skip TotalsectorsH
   503 000000B3 47                      		inc	di
   504 000000B4 92                      		xchg	ax, dx	; mov ax, dx
   505                                  		;stosw
   506 000000B5 EB06                    		jmp	short fat_bs
   507                                  
   508                                  fat32_bs:
   509                                  		; FAT32 boot sector
   510 000000B7 A5                      		movsw	; BPB_FATSz32 (lw) -> FATSectorsL
   511 000000B8 A5                      		movsw	; BPB_FATSz32 (hw) -> FATSectorsH
   512 000000B9 AD                      		lodsw	; skip BPB_ExtFlags
   513 000000BA AD                      		lodsw	; skip BPB_FSVer
   514 000000BB A5                      		movsw	; RootClusterL
   515 000000BC AD                      		lodsw	; RootClusterH
   516                                  fat_bs:
   517 000000BD AB                      		stosw	; 13/09/2023
   518                                  
   519                                  		; 13/09/2023
   520 000000BE 0E                      		push	cs
   521 000000BF 1F                      		pop	ds
   522                                  
   523                                  		; 13/09/2023
   524                                  		; (PCDOS 7.1 - IBMBIO.COM - MSLOAD:0151h)
   525                                  
   526                                  ; Relocate
   527                                  ; -------------------------------------------------------------------------
   528                                  ;
   529                                  ; NOTES:
   530                                  ;
   531                                  ;   Relocates the loader code to top-of-memory.
   532                                  ;
   533                                  ; INPUT:     none
   534                                  ;
   535                                  ; OUTPUT:    code and data relocated.
   536                                  ;	     AX,CX,SI,DI destroyed
   537                                  ;
   538                                  ; calls:     none
   539                                  ; -------------------------------------------------------------------------
   540                                  ;
   541                                  ; Determine the number of paragraphs (16 byte blocks) of memory.
   542                                  ; this involves invoking the memory size determination interrupt,
   543                                  ; which returns the number of 1k blocks of memory, and then
   544                                  ; converting this to the number of paragraphs.
   545                                  ; Find out whether RPL code is present at top of memory and modify the
   546                                  ; available amount of memory in AX
   547                                  ; leave the number of paragraphs of memory in ax.
   548                                  ;
   549                                  ; -------------------------------------------------------------------------
   550                                  ; copy code from start to top of memory.
   551                                  ;
   552                                  ; the length to copy is EndOfLoader
   553                                  ;
   554                                  ; jump to relocated code
   555                                  ; -------------------------------------------------------------------------
   556                                  
   557                                  		; 14/09/2023 - Retro DOS v5.0 BIOSLOADER/MSLOADER
   558                                  		;			      PCDOS 7.1
   559                                  Relocate:
   560                                  		; 24/12/2022 - Retro DOS v4 (4.0 & 4.1 & 4.2) MSLOADER
   561                                  		;			     MSDOS 5.0 & 5.0+ & 6.22 (6.21)
   562                                  		
   563                                  		;cld
   564                                  
   565 000000C0 31F6                    		xor	si, si
   566 000000C2 89F7                    		mov	di, si
   567 000000C4 CD12                    		int	12h		; MEMORY SIZE -
   568                                  					; Return: AX = number of contiguous 1K blocks of memory
   569 000000C6 B106                    		mov	cl, 6
   570 000000C8 D3E0                    		shl	ax, cl		; Memory size in paragraphs
   571                                  
   572                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
   573                                  
   574                                  		; 10/12/2022
   575                                  		; ds = 0
   576                                  		; 24/12/2022
   577                                  		; ds = cs
   578                                  		;xor	bx, bx
   579                                  		;mov	ds, bx		; ZERO
   580                                  		; 14/09/2023
   581 000000CA 8EDE                    		mov	ds, si ; 0		
   582                                  
   583                                  		; 10/12/2022
   584 000000CC 8B1EBC00                		mov	bx, [2Fh*4]	; (Int 2Fh)
   585 000000D0 8E1EBE00                		mov	ds, [2Fh*4+2]		
   586                                  
   587                                  		;cmp	word ptr [bx+3], 'PR'
   588                                  		; 09/12/2022
   589 000000D4 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
   590 000000D9 750F                    		jnz	short Skip_RPL
   591 000000DB 807F054C                		cmp	byte [bx+5], 'L'
   592 000000DF 7509                    		jnz	short Skip_RPL
   593 000000E1 89C2                    		mov	dx, ax		; get TOM into DX
   594 000000E3 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
   595 000000E6 CD2F                    		int	2Fh		; Get new TOM from any RPL
   596 000000E8 89D0                    		mov	ax, dx
   597                                  Skip_RPL:
   598                                  		; 24/12/2022
   599 000000EA 0E                      		push	cs
   600 000000EB 1F                      		pop	ds	; 25/12/2022
   601                                  
   602 000000EC B104                    		mov	cl, 4
   603 000000EE 8B16[1B00]              		mov	dx, [BytesPerSec] ; 24/12/2022
   604                                  		;mov	dx, [cs:BytesPerSec]
   605 000000F2 D3EA                    		shr	dx, cl
   606 000000F4 42                      		inc	dx
   607 000000F5 29D0                    		sub	ax, dx
   608 000000F7 A3[4500]                		mov	[FatSegment], ax ; 24/12/2022
   609                                  		;mov	[cs:FatSegment], ax ; This will be used for fat sector
   610                                  		; 14/09/2023
   611                                  		;mov	dx, 5F0h ; 1520 (for PCDOS 7.1 IBMBIO.COM)
   612 000000FA BA[8004]                		mov	dx, EndOfLoader ; loader size = 1520 
   613 000000FD D3EA                    		shr	dx, cl
   614 000000FF 42                      		inc	dx
   615 00000100 29D0                    		sub	ax, dx
   616 00000102 8EC0                    		mov	es, ax	; ES:DI -> place be relocated.
   617                                  		; 14/09/2023
   618                                  		; 22/12/2022
   619                                  		;dec	dx
   620                                  		;shl	dx, cl	; convert paragraphs to bytes (*)
   621                                  				; (stack pointer will be set to this offset)
   622                                  		; 24/12/2022
   623                                  		;push	cs
   624                                  		;pop	ds		; DS:SI -> source
   625                                  		
   626                                  		; 14/09/2023
   627 00000104 B9[8004]                		mov	cx, EndOfLoader ; 1520 (for PCDOS 7.1 IBMBIO.COM)
   628 00000107 F3A4                    		rep movsb
   629                                  
   630 00000109 06                      		push	es		; Far jump to relocated MSLOAD code
   631                                  					; (via retf, far return)
   632 0000010A B8[0F01]                		mov	ax, SetupStack
   633 0000010D 50                      		push	ax		; Massage stack for destin of CS:IP
   634 0000010E CB                      		retf
   635                                  
   636                                  ; ---------------------------------------------------------------------------
   637                                  
   638                                  ; Start of relocated code
   639                                  ;----------------------------------------------------------------------------
   640                                  ;
   641                                  ; Move the stack to just under the boot record and relocation area (0:7c00h)
   642                                  ;
   643                                  
   644                                  SetupStack:
   645                                  		; 22/12/2022
   646                                  		;mov	ax, cs		; Start	of relocated code
   647                                  		;mov	ss, ax
   648                                  		;;mov	sp, NumHeads	; StackPtr offset
   649                                  		; 20/12/2022
   650                                  		;mov	sp, StackPtr	; StackPtr offset
   651                                  		
   652                                  ; 22/12/2022
   653                                  ; (set a temporary stack just above the relocated loader code)
   654                                  ; ((instead of using/reserving 256 bytes of stack space in 'IO.SYS' file))
   655                                  
   656                                  		; 22/12/2022
   657                                  		; cs = loader segment (relocated)
   658                                  		; dx = loader size + stack space (*) -paragraph aligned-
   659                                  
   660                                  		; 14/09/2023
   661                                  		;;cli
   662                                  		;mov	ax, cs
   663                                  		;mov	ds, ax	; 24/12/2022
   664                                  		;cli 
   665                                  		;mov	ss, ax
   666                                  		;;mov	sp, dx	; (*) 
   667                                  		;sti
   668                                  		
   669                                  		; 14/09/2023
   670                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:01A5h)
   671 0000010F 8CC8                    		mov	ax, cs
   672                                  		; 27/12/2023
   673 00000111 8ED8                    		mov	ds, ax
   674                                  		;
   675 00000113 83E840                  		sub	ax, 40h	; move ss to 400h backward for stack space
   676                                  				; then set sp to the end of this stack space
   677 00000116 8ED0                    		mov	ss, ax
   678 00000118 BC0004                  		mov	sp, 400h
   679                                  		;add	ax, 40h	; ax = cs
   680                                  		;mov	ds, ax
   681                                  
   682                                  ; FindClusterSize
   683                                  ; ---------------------------------------------------------------------------
   684                                  ;
   685                                  ; INPUT:     bpb information in loaded boot record at 0:7c00h
   686                                  ;
   687                                  ; OUTPUT:
   688                                  ;
   689                                  ;	ds = 0
   690                                  ;	ax = bytes/cluster
   691                                  ;	bx = sectors/cluster
   692                                  ;	si destroyed
   693                                  ; calls:     none
   694                                  ;----------------------------------------------------------------------------
   695                                  ;
   696                                  ; get bytes/sector from bpb
   697                                  ;
   698                                  ; get sectors/cluster from bpb
   699                                  ;
   700                                  ; bytes/cluster = bytes/sector * sector/cluster
   701                                  ; ---------------------------------------------------------------------------
   702                                  
   703                                  FindClusterSize:
   704                                  
   705                                  ;for the time being just ASSUME the boot record is valid and the bpb is there.
   706                                  
   707                                  		; 14/09/2023
   708                                  		; 24/12/2022
   709                                  		; ds = cs
   710 0000011B A1[1B00]                		mov	ax, [BytesPerSec]
   711                                  		;xor	bx, bx
   712                                  		;mov	bl, [SecPerCluster]	; get sectors/cluster
   713                                  		;mul	bx
   714 0000011E F726[1D00]              		mul	word [SecPerCluster]
   715                                  		; 14/09/2023
   716 00000122 09D2                    		or	dx, dx
   717 00000124 7403                    		jz	short CalcFatSize
   718 00000126 E98E01                  		jmp	ErrorOut
   719                                  
   720                                  ; CalcFatSize
   721                                  ; ---------------------------------------------------------------------------
   722                                  ;
   723                                  ; NOTES:
   724                                  ;
   725                                  ;   Determine if fat is 12 or 16 bit fat. 12 bit fat if floppy, read mbr
   726                                  ;   to find out what system id byte is.
   727                                  ;
   728                                  ; INPUT:
   729                                  ;
   730                                  ; OUTPUT:
   731                                  ;
   732                                  ;   CS:FatSize = FAT_12_BIT or FAT_16_BIT
   733                                  ;   all other registers destroyed
   734                                  ;
   735                                  ; ---------------------------------------------------------------------------
   736                                  
   737                                  CalcFatSize:
   738                                  		; 14/09/2023 (Retro DOS v5, PCDOS 7.1 IBMBIO.COM LOADER)
   739                                  		; 24/12/2022 (Retro DOS v4, MSDOS 5.0-6.22 IO.SYS LOADER)
   740                                  
   741 00000129 A3[0500]                		mov	[ClusterSize], ax ; cluster size in bytes
   742                                  
   743                                  		; 24/12/2022
   744                                  		; ds = cs
   745                                  		;mov	byte [Fatsize], 1; FAT_12_BIT (assume)
   746                                  		; 14/09/2023
   747 0000012C C606[3E00]01            		mov	byte [FatType],1 ; FAT12
   748                                  		
   749                                  		;mov	dx, [TotalSectorsH]
   750                                  		;mov	ax, [TotalSectorsL] ; DX:AX = total disk sectors
   751                                  		; 14/09/2023
   752 00000131 A1[2F00]                		mov	ax, [TotalSectorsH]
   753 00000134 8B1E[2D00]              		mov	bx, [TotalSectorsL] ; AX:BX = total disk sectors
   754                                  ; 14/09/2023
   755                                  %if 0
   756                                  		sub	ax, [ReservSectors]
   757                                  
   758                                  		sbb	dx, 0		; DX:AX	= Total	available sectors
   759                                  		
   760                                  		push	ax
   761                                  		push	dx
   762                                  
   763                                  		mov	bx, [FATSectorsL]
   764                                  		
   765                                  		;mov	cx, [FATSectorsH]
   766                                  		;push	ax
   767                                  		;push	dx
   768                                  		;;mov	al, [NumFats]
   769                                  		;;xor	ah, ah
   770                                  		;mov	ax, [NumFats]
   771                                  		;xchg	ax, cx
   772                                  		;mul	cx
   773                                  
   774                                  		mov	ax, [FATSectorsH]
   775                                  		mov	cx, [NumFats]	; calculate total FAT sectors
   776                                  		mul	cx
   777                                  		xchg	ax, cx
   778                                  		mul	bx
   779                                  		add	cx, dx
   780                                  		mov	bx, ax
   781                                  
   782                                  		pop	dx
   783                                  		pop	ax
   784                                  
   785                                  		sub	ax, bx
   786                                  		sbb	dx, cx		; DX:AX = Total sectors - FAT sectors
   787                                  		
   788                                  		mov	bx, [RootEntCnt] ; Root directory entry count
   789                                  		mov	cl, 4
   790                                  		shr	bx, cl		; BX = Total directory sectors
   791                                  		sub	ax, bx
   792                                  		sbb	dx, 0		; DX:AX	= Sectors in data area
   793                                  %endif
   794                                  		; 14/09/2023
   795 00000138 8B16[3900]              		mov	dx, [FirstSectorL]
   796 0000013C 8B0E[3B00]              		mov	cx, [FirstSectorH]
   797                                  		; 04/10/2023
   798 00000140 8916[0700]              		mov	[StartSecL], dx
   799 00000144 890E[0900]              		mov	[StartSecH], cx
   800                                  		;
   801                                  		; ! here, cx:dx includes hidden sectors (partition start address) !
   802 00000148 2B16[2900]              		sub	dx, [HiddenSectorsL]
   803 0000014C 1B0E[2B00]              		sbb	cx, [HiddenSectorsH] ; cx:dx = start of data from boot sector
   804                                  
   805                                  		; 14/09/2023
   806 00000150 29D3                    		sub	bx, dx	; total secs - start of data
   807 00000152 19C8                    		sbb	ax, cx
   808                                  				; AX:BX	= Sectors in data area
   809                                  		; 24/12/2022
   810 00000154 8B0E[1D00]              		mov	cx, [SecPerCluster] ; *#*
   811                                  		; 14/09/2023
   812                                  		; bx = lw of data sector count
   813                                  		; ax = hw of data sector count
   814 00000158 31D2                    		xor	dx, dx
   815 0000015A F7F1                    		div	cx  ; *#*
   816                                  		; 24/12/2022
   817                                  		;;mov	[cs:TempH], ax	; AX = Total number of clusters (hw)
   818                                  		;mov	[TempH], ax
   819                                  		; 14/09/2023
   820 0000015C 93                      		xchg	ax, bx	; ax = lw of data sector count ; 06/10/2023
   821                                  				; bx = hw of cluster count
   822 0000015D F7F1                    		div	cx  ; *#*
   823                                  		; 14/09/2023
   824                                  		;mov	dx, [FirstCluster+2]
   825 0000015F C606[3E00]0B            		mov	byte [FatType], 0Bh ; set FAT type to FAT32 (CHS type disk R/W)
   826                                  		;cmp	word [TempH], 0
   827                                  		;jne	short ReadInFirstCluster
   828 00000164 09DB                    		or	bx, bx	; is cluster count > 65535 ?
   829 00000166 7518                    		jnz	short ReadInFirstCluster ; yes, it is (it must be) FAT32 fs
   830                                  		; 06/10/2023
   831 00000168 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 limit (65536-10)
   832 0000016B 7313                    		jnb	short ReadInFirstCluster ; FAT32
   833                                  		;
   834 0000016D 891E[1900]              		mov	[FirstCluster+2], bx ; 0 ; (clear HW of FirstCluster)
   835                                  		;xor	dx, dx
   836 00000171 C606[3E00]01            		mov	byte [FatType], 1 ; set FAT type to FAT12
   837                                  		; 06/10/2023
   838 00000176 3DF60F                  		cmp	ax, 0FF6h
   839                                  		;cmp	ax, 4086	; 4096-10
   840 00000179 7205                    		jb	short ReadInFirstCluster ; 12 bit FAT
   841 0000017B C606[3E00]04            		mov	byte [FatType], 4 ; set FAT type to FAT16
   842                                  
   843                                  ; ReadInFirstCluster
   844                                  ; ---------------------------------------------------------------------------
   845                                  ;
   846                                  ; NOTES: read the start of the clusters that covers at least IbmLoadSize
   847                                  ;	 fully.  for example, if sector/cluster = 2, and IbmLoadSize=3
   848                                  ;	 then we are going to re-read the second cluster to fully cover
   849                                  ;	 msload program in the cluster boundary.
   850                                  ;
   851                                  ; INPUT:
   852                                  ;   IbmLoadSize - make sure this value is the same as the one in
   853                                  ;		  msboot program when you build the new version!!!!!
   854                                  ;
   855                                  ;   SecPerCluster
   856                                  ;   ClusterSize
   857                                  ;   FirstSectorL
   858                                  ;   FirstSectorH
   859                                  ;
   860                                  ; OUTPUT: msload program is fully covered in a cluster boundary.
   861                                  ;	  ax = # of clusters we read in so far.
   862                                  ;
   863                                  ; calls:     ReadSectors
   864                                  ; logic:
   865                                  ;	ax; dx = IbmLoadSize / # of sector in a cluster.
   866                                  ;	if dx = 0 then ok. (msload is in a cluster boundary.)
   867                                  ;      else		   (has to read (ax+1)th cluster to cover msload)
   868                                  ;	read (ax+1)th cluster into the address after the clusters we
   869                                  ;	read in so far.
   870                                  ; ---------------------------------------------------------------------------
   871                                  
   872                                  ; 09/12/2022
   873                                  ; BiosStart equ 51Ah ; AX = IO.SYS starting cluster
   874                                  ; IbmLoadSize equ 3  ; AX = Number sectors in MSLOAD
   875                                  ; BiosOffset equ 700h ; Address where loader was read in
   876                                  	
   877                                  ReadInFirstCluster:
   878                                  		; 14/09/2023
   879 00000180 8B16[1900]              		mov	dx, [FirstCluster+2]
   880 00000184 A1[1700]                		mov	ax, [FirstCluster]
   881                                  					; IBMBIO.COM First Cluster
   882                                  					; Root dir buffer at 500h (segment=0)
   883                                  					; IBMBIO.COM first cluster ptr at 51Ah
   884                                  					; high word of cluster is at 514h
   885                                  		; 14/10/2023 (!*!)
   886                                  		;; a cluster number start from 2
   887                                  		;; convert it to (correct) cluster index number
   888                                  		;sub	ax, 2
   889                                  		;sbb	dx, 0
   890                                  		;	; DX:AX = zero based cluster number (cluster index)
   891                                  
   892 00000187 8916[1500]              		mov	[CurrentClusterH], dx
   893 0000018B A3[1300]                		mov	[CurrentClusterL], ax ; Initialize to this cluster
   894                                  
   895                                  		; 24/12/2022
   896                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:0255h) ; 04/10/2023 ('mov ax,3')
   897                                  		;;mov	ax, IbmLoadSize
   898                                  		;mov	ax, 3		; Load the 3rd and other IO.SYS	sectors
   899                                  		; 04/10/2023  ; **	 	
   900                                  		; (Windows ME IO.SYS - MSLOAD:01E4h)
   901 0000018E B80400                  		mov	ax, 4 ; **	; Load the 4rd and other IO.SYS	sectors	
   902                                  
   903                                  		; 14/09/2023
   904                                  		;div	byte [SecPerCluster]
   905 00000191 F6F1                    		div	cl ; *#*
   906                                  					; AL = total cluster read in
   907                                  					; AH = remaining sectors in last cluster
   908                                  		
   909                                  		; (Note: PCDOS 7.1 bs loads 1st 4 sectors of IBMBIO.COM)
   910                                  		; If cluster size > 3, al = 0, ah <> 0
   911                                  		; If cluster size = 2, al = 1, ah = 1
   912                                  		; If cluster size = 1, al = 3, ah = 0
   913                                  		; If ah = 0, nothing remaining in last cluster
   914                                  
   915                                  		; 14/10/2023
   916 00000193 BE7000                  		mov	si, 70h ; ++*
   917 00000196 8EC6                    		mov	es, si	; ++	; ES = BIOSDATA (IO.SYS DATA) segment
   918                                  
   919                                  		; 14/09/2023
   920                                  		;cmp	ah, 0
   921                                  		; 10/12/2022
   922 00000198 20E4                    		and	ah, ah
   923                                  		;cmp	ah, 0
   924 0000019A 742F                    		jz	short SetNextClusterNum	; next cluster
   925                                  			; 04/10/2023 ; **
   926                                  			; If AH=0
   927                                  			;    and if CL=1, AL=4
   928                                  			;    and if CL=2, AL=2 (?)
   929                                  			;    and if CL=4, AL=1
   930                                  			; If AH>0
   931                                  			;    AL=0 and AH=4
   932                                  
   933                                  		; 04/10/2023	; **
   934                                  		; al = 0
   935                                  		;xor	ah, ah ; 0
   936                                  		;push	ax	; (*)	; AX = total clusters in the loader
   937                                  					; already read in
   938                                  ; 14/09/2023
   939                                  ; 24/12/2022
   940                                  %if 0		
   941                                  		mov	cx, [FirstSectorL]	; Put starting sector of disk data
   942                                  		mov	[StartSecL], cx	; area in StartSecH:StartSecL
   943                                  		mov	cx, [FirstSectorH]
   944                                  		mov	[StartSecH], cx
   945                                  		mul	byte [cs:SecPerCluster]
   946                                  		add	[StartSecL], ax	; Add number of sectors already loaded
   947                                  		adc	word [StartSecH], 0	; to start sector
   948                                  		;mov	dx, [FirstCluster+2]
   949                                  		;mov	ax, [FirstCluster]
   950                                  		;sub	ax, 2
   951                                  		;sbb	dx, 0
   952                                  		mov	dx, [CurrentClusterH]	; IBMBIO.COM 1st cluster (index)
   953                                  		mov	ax, [CurrentClusterL]	; (zero based cluster number)
   954                                  
   955                                  		xor	bx, bx
   956                                  		mov	bl, [SecPerCluster]
   957                                  		mul	bx		; DX:AX = logical start sector
   958                                  		add	[StartSecL], ax
   959                                  		adc	[StartSecH], dx
   960                                  					; abs start sector for next read of
   961                                  					; the rest of the last loader cluster
   962                                  		pop	ax	; (*) number of clusters already loaded
   963                                  				; (0 or 1)
   964                                  				; (Note: if al=0, the 1st 4 sectors of the 1st cluster
   965                                  				; will be loaded again! -PCDOS 7.1-)
   966                                  		push	ax
   967                                  		mul	word [ClusterSize]
   968                                  		;mov	di, BiosOffset
   969                                  		mov	di, 700h	; IBMBIO.COM (IO.SYS) loading addr (segment = 0)
   970                                  		add	di, ax
   971                                  		xor	ax, ax
   972                                  		mov	es, ax		; ES = segment 0
   973                                  		mov	al, [SecPerCluster] 
   974                                  					; Read in the entire last cluster
   975                                  		mov	[SectorCount], ax
   976                                  		call	ReadSectors
   977                                  		pop	ax		; AX = total clust read	by boot	loader
   978                                  		inc	ax		; AX = total clust read	in now
   979                                  SetNextClusterNum:			; ...
   980                                  		inc	ax		; AX = total clusters read in based 2
   981                                  		add	[CurrentClusterL], ax
   982                                  		adc	[CurrentClusterH], 0
   983                                  		dec	ax		; CurrentCluster = Last	cluster	read
   984                                  					; AX = number of clusters loaded
   985                                  %endif
   986                                  		; 04/10/2023 ; **
   987                                  		; ah=4 & al=0
   988 0000019C 88C8                    		mov	al, cl ; ** (SecPerCluster)
   989 0000019E 28E0                    		sub	al, ah ; ** (remain sectors to read in the cluster)
   990 000001A0 A2[1100]                		mov	[SectorCount], al ; ** (spc-4)
   991                                  
   992                                  		; 24/12/2022
   993                                  		; ds = cs
   994                                  		;mov	cx, [FirstSectorL] ; Put starting sector of disk data
   995                                  		;mov	[StartSecL], cx    ; area in StartSecH:StartSecL
   996                                  		;mov	cx, [cs:FirstSectorH]
   997                                  		;mov	[StartSecH], cx
   998                                  		; [StartSecL] = [FirstSectorL] ; **!**
   999                                  		; [StartSecH] = [FirstSectorH] ; **!**
  1000                                  		
  1001                                  		; 24/12/2022
  1002                                  		; cx = [SecPerCluster]  ; *#*
  1003                                  	
  1004                                  		; 04/10/2023
  1005                                  		;; ax = 0 (cluster size > 3) or ax = 1 (cluster size = 2)
  1006                                  		; al = 0 (cluster size > 4) and ah > 0  ; (as Win ME IO.SYS)
  1007                                  		; cx = sectors per cluster (ch = 0)
  1008                                  
  1009                                  		; 04/10/2023 ; **
  1010                                  		; cx = sectors per cluster (ch = 0)
  1011                                  
  1012                                  ;		;or	al, al ; *
  1013                                  ;		;jz	short rfc_1 ; al = 0 ; *
  1014                                  		; al = 1
  1015                                  
  1016                                  		;;mul	byte [SecPerCluster]
  1017                                  		;mul	cl ; *#*
  1018                                  		;add	[StartSecL], ax ; Add number of sectors already loaded
  1019                                  		;adc	word [StartSecH], 0 ; to start sector
  1020                                  		; 04/10/2023
  1021                                  		;add	[StartSecL], cx ; * (AL=1, CL*AL=CL, CH=0)
  1022                                  		;adc	word [StartSecH], 0 ; *
  1023                                  
  1024                                  ;rfc_1: ; *	; 04/10/2023
  1025                                  		;mov	ax, [51Ah] ; AX = [51Ah] = IO.SYS 1st clust
  1026                                  		;dec	ax
  1027                                  		;dec	ax
  1028                                  		; 14/10/2023
  1029                                  		;mov	ax, [CurrentClusterL] ; *##*
  1030                                  		;; ax = word [51Ah] - 2
  1031                                  		; 04/10/2023
  1032                                  		;mov	dx, [CurrentClusterH]
  1033 000001A3 A1[1500]                		mov	ax, [CurrentClusterH] ; *###*		
  1034                                  
  1035                                  		;;xor	bx, bx
  1036                                  		;;mov	bl, [SecPerCluster]
  1037                                  		;mov	bx, [SecPerCluster]
  1038                                  		;mul	bx		; DX:AX = logical start sector
  1039                                  		; 04/10/2023
  1040                                  		;mul	cx  ; [SecPerCluster]  ; *#*
  1041                                  		; 32 bit multiplication (HHLL*SPC)
  1042                                  		; 14/10/2023
  1043                                  		;push	ax ; Current Cluster LW
  1044                                  		;mov	ax, dx ; Current Cluster HW (HH) ; *###*
  1045                                  		
  1046 000001A6 F7E1                    		mul	cx ; (HH*SPC) ; (result: dx is -must be- zero)
  1047 000001A8 91                      		xchg	ax, cx
  1048                                  		; 14/10/2023
  1049                                  		;pop	dx ; Current Cluster LW	(LL)
  1050                                  		;mul	dx  ; LL*SPC	
  1051 000001A9 F726[1300]              		mul	word [CurrentClusterL] ; *##*
  1052 000001AD 01CA                    		add	dx, cx ; (add lw of HH*SPC)
  1053                                  
  1054                                  		; 04/10/2023 ; **
  1055 000001AF 83C004                  		add	ax, 4 ; ** ; IbmLoadSize (Win ME BS's IO.SYS read count)
  1056 000001B2 83D200                  		adc	dx, 0 ; **
  1057                                  
  1058 000001B5 0106[0700]              		add	[StartSecL], ax
  1059 000001B9 1116[0900]              		adc	[StartSecH], dx
  1060                                  					; abs start sector for next read of
  1061                                  					; the rest of the last loader cluster
  1062                                  		; 04/10/2023 ; **
  1063                                  		; (number of clusters already -complete- loaded = 0)
  1064                                  		;pop	ax	; (*) number of clusters already loaded
  1065                                  		;push	ax
  1066                                  
  1067                                  		; 04/10/2023 ; **
  1068                                  		;;mul	word [ClusterSize]
  1069                                  		; 14/10/2023
  1070                                  		;mov	ax, [BytesPerSec]
  1071                                  		;shl	ax, 2 ; * 4 (4 sectors already loaded)
  1072                                  		
  1073                                  		;;mov	di, BiosOffset
  1074                                  		;mov	di, 700h	; IO.SYS offset	(segment = 0)
  1075                                  		;add	di, ax
  1076                                  		; 14/10/2023
  1077 000001BD 8B3E[1B00]              		mov	di, [BytesPerSec]
  1078 000001C1 C1E702                  		shl	di, 2 ; * 4 (4 sectors already loaded)
  1079                                  		;add	di, 700h ; ++
  1080                                  		; di = buffer offset
  1081                                  
  1082                                  		; 04/10/2023 ; **
  1083                                  		;xor	ax, ax
  1084                                  		;mov	es, ax		; ES = segment 0
  1085                                  		;; dx = 0 ; **
  1086                                  		;mov	es, dx ; 0
  1087                                  		; 14/10/2023
  1088                                  		; cx = 0
  1089                                  		;mov	es, cx ; 0 ; ++
  1090                                  		; es = buffer segment = 0 
  1091                                  
  1092                                  		; 14/10/2023
  1093                                  		; es = si = 70h ; ++*
  1094                                  		;mov	si, 70h ; ++
  1095                                  		;mov	es, si	; ++
  1096                                  		; es:di = 70h:800h
  1097                                  
  1098                                  		; 24/12/2022
  1099                                  		;mov	al, [SecPerCluster]
  1100                                  		;			; Read in the entire last cluster
  1101                                  		;mov	[SectorCount], ax
  1102                                  		; 14/10/2023 ; **
  1103                                  		;mov	[SectorCount], cx ; [SecPerCluster]  ; *#*
  1104                                  		
  1105 000001C4 E87F00                  		call	ReadSectors
  1106                                  
  1107                                  		; 04/10/2023 ; *
  1108                                  		;;pop	ax		; AX = total clust read	by boot	loader
  1109                                  		;;inc	ax		; AX = total clust read	in now
  1110                                  		; 04/10/2023
  1111                                  		;mov	ax, 1	; 1 cluster loaded
  1112                                  ;SetNextClusterNum:
  1113                                  		; 14/10/2023
  1114 000001C7 89F8                    		mov	ax, di  
  1115                                  		; ax = loaded (IBMBIO.COM or IO.SYS) byte count
  1116 000001C9 EB0F                    		jmp	short SaveLoadedBios2
  1117                                  SetNextClusterNum:
  1118                                  		; 14/10/2023 (!*!)
  1119                                  		;inc	ax
  1120 000001CB 48                      		dec	ax ; (4 clusters -> +3, 1 cluster -> +0)
  1121 000001CC 0106[1300]              		add	[CurrentClusterL], ax  ; ah = 0
  1122 000001D0 8316[1500]00            		adc	word [CurrentClusterH], 0
  1123                                  				; CurrentCluster = Last	cluster	(loaded)
  1124 000001D5 40                      		inc	ax
  1125                                  		;dec	ax
  1126                                  				; AX = number of clusters loaded
  1127                                  		
  1128                                  ; SaveLoadedBios
  1129                                  ; ---------------------------------------------------------------------------
  1130                                  ;
  1131                                  ; NOTES:
  1132                                  ;
  1133                                  ;   Determine how much of iosys was loaded in when the loader was loaded
  1134                                  ;   by the boot record (only the portion that is guaranteed to be contiguous)
  1135                                  ;
  1136                                  ; INPUT:
  1137                                  ;   AX:Total cluster already read in (loader & bios)
  1138                                  ;   CS:CurrentCluster = number of clusters used for loader+2
  1139                                  ;
  1140                                  ; OUTPUT:
  1141                                  ;	ES = 70h
  1142                                  ;	DI = next offset to load iosys code
  1143                                  ;	AX,BX,CX,DX,SI destroyed
  1144                                  ;
  1145                                  ;	CS:NextBioLocation = di on output
  1146                                  ;	CS:last_cluster = last cluster loaded
  1147                                  ;
  1148                                  ; calls:     none
  1149                                  ;
  1150                                  ; ---------------------------------------------------------------------------
  1151                                  ;
  1152                                  ; Multiply cluster * cluster size in bytes to get total loaded for msload
  1153                                  ;
  1154                                  ; Subtract total_loaded - (EndOfLoader) to get loaded io.sys in last cluster
  1155                                  ;
  1156                                  ; Relocate this piece of iosys down to 70:0
  1157                                  ;
  1158                                  ; ---------------------------------------------------------------------------
  1159                                  
  1160                                  SaveLoadedBios:
  1161                                  		; 14/10/2023
  1162                                  		;push	ds
  1163                                  		
  1164                                  		; 24/12/2022
  1165                                  		; ds = cs
  1166                                  		; ax = number of loaded clusters
  1167 000001D6 F726[0500]              		mul	word [ClusterSize]
  1168                                  		;mul	word [cs:ClusterSize]
  1169                                  					; Get total bytes loaded by
  1170                                  					; this is always < 64k, so
  1171                                  					; lower 16 bits ok
  1172                                  		; 14/10/2023
  1173                                  		; ax = [clusterSize] * (loaded cluster count)
  1174                                  SaveLoadedBios2:
  1175                                  		; 14/10/2023
  1176 000001DA 1E                      		push	ds
  1177                                  		
  1178                                  		; 14/10/2023
  1179                                  		;sub	ax, EndOfLoader ; (OFFSET EndOfLoader)-(OFFSET Start)
  1180 000001DB BE[8004]                		mov	si, EndOfLoader
  1181 000001DE 29F0                    		sub	ax, si
  1182 000001E0 89C1                    		mov	cx, ax
  1183                                  		
  1184                                  		; 14/10/2023
  1185                                  		;mov	ax, 70h		; Segment at 70h
  1186                                  		;mov	ds, ax
  1187                                  		;mov	es, ax
  1188                                  		; es = 70h
  1189 000001E2 06                      		push	es
  1190 000001E3 1F                      		pop	ds
  1191                                  		
  1192                                  		;mov	si, EndOfLoader
  1193 000001E4 31FF                    		xor	di, di
  1194 000001E6 F3A4                    		rep movsb		; Relocate this code to 0070h:0000h
  1195                                  		
  1196                                  		;mov	[NextBioLocation], di
  1197                                  		;;mov	[cs:NextBioLocation], di
  1198                                  		; 05/10/2023
  1199                                  		;mov	[NextBioLocation], di
  1200 000001E8 89FD                    		mov	bp, di
  1201                                  
  1202                                  		; es:di = (the next) buffer address for next read
  1203                                  
  1204 000001EA 1F                      		pop	ds		; Save where location for next read
  1205                                  
  1206                                  ; GetContigClusters
  1207                                  ; ---------------------------------------------------------------------------
  1208                                  ;
  1209                                  ; NOTES: go find clusters as long as they are contiguous
  1210                                  ;
  1211                                  ;
  1212                                  ; INPUT:
  1213                                  ;   CS:NextBioLocation
  1214                                  ;   CS:
  1215                                  ;
  1216                                  ; OUTPUT:
  1217                                  ;
  1218                                  ; calls: GetNextFatEntry
  1219                                  ; ---------------------------------------------------------------------------
  1220                                  ;
  1221                                  ;Set CS:SectorCount to sectors per cluster
  1222                                  ;
  1223                                  ;Call GetNextFatEntry to get next cluster in file
  1224                                  ;
  1225                                  ;Call check_for_eof
  1226                                  ;
  1227                                  ;if (nc returned)
  1228                                  ;
  1229                                  ;   {call GetNextFatEntry
  1230                                  ;
  1231                                  ;    if (new cluster is contig to old cluster)
  1232                                  ;	{add sectors per cluster to CS:SectorCount
  1233                                  ;
  1234                                  ;	 call check_for_eof
  1235                                  ;
  1236                                  ;	 if (nc returned)
  1237                                  ;
  1238                                  ; ---------------------------------------------------------------------------
  1239                                  
  1240                                  ; 09/12/2022
  1241                                  ; END_OF_FILE equ 0FFh
  1242                                  ; DosLoadSeg equ 70h
  1243                                  
  1244                                  GetContigClusters:
  1245                                  
  1246                                  ; 24/12/2022
  1247                                  %if 0	
  1248                                  		xor	ah, ah
  1249                                  		mov	al, [cs:SecPerCluster]	; Assume we will get one cluster
  1250                                  		mov	[cs:SectorCount], ax	; Sector count = sectors in 1 cluster
  1251                                  		push	word [cs:SectorCount]
  1252                                  		call	GetNextFatEntry		; Returns next cluster to read in AX
  1253                                  		pop	word [cs:SectorCount]
  1254                                  		mov	word [cs:CurrentCluster], ax ; Update the last one found
  1255                                  		cmp	byte [cs:EndOfFile], 0FFh ; END_OF_FILE
  1256                                  		jz	short GoToBioInit
  1257                                  		xor	dx, dx
  1258                                  		;sub	ax, 2			; Zero base the cluster
  1259                                  		; 10/12/2022
  1260                                  		dec	ax
  1261                                  		dec	ax
  1262                                  		xor	ch, ch
  1263                                  		mov	cl, [cs:SecPerCluster]
  1264                                  		mul	cx			; How many sectors (before next cluster) 
  1265                                  		add	ax, [cs:FirstSectorL]	; See where the data sector starts
  1266                                  		adc	dx, [cs:FirstSectorH]
  1267                                  		mov	[cs:StartSecL], ax	; Save it (used by ReadSectors)
  1268                                  		mov	[cs:StartSecH], dx
  1269                                  		mov	di, [cs:NextBioLocation] ; Get where to put code
  1270                                  		push	word [cs:SectorCount]	; Save how many sectors
  1271                                  		;mov	ax, DosLoadSeg
  1272                                  		mov	ax, 70h
  1273                                  		mov	es, ax
  1274                                  		call	ReadSectors
  1275                                  		pop	ax			; Get back total sectors read in
  1276                                  		mul	word [cs:BytesPerSec]	; Get number of bytes we loaded
  1277                                  		add	[cs:NextBioLocation], ax ; Point to where to load next	
  1278                                  		jmp	short GetContigClusters
  1279                                  
  1280                                  %endif
  1281                                  		; 24/12/2022
  1282                                  		; ds = cs
  1283                                  
  1284 000001EB A1[1D00]                		mov	ax, [SecPerCluster]	; Assume we will get one cluster
  1285 000001EE A3[1100]                		mov	[SectorCount], ax	; Sector count = sectors in 1 cluster
  1286                                  		;push	word [SectorCount]
  1287 000001F1 50                      		push	ax
  1288                                  		
  1289 000001F2 E85401                  		call	GetNextFatEntry		; Returns next cluster to read in AX
  1290                                  		
  1291                                  		;pop	word [SectorCount]
  1292                                  		; 05/10/2023
  1293 000001F5 59                      		pop	cx ; sc = spc
  1294                                  		
  1295 000001F6 A3[1300]                		mov	[CurrentClusterL], ax	; Update the last one found, lw
  1296 000001F9 893E[1500]              		mov	[CurrentClusterH], di	; hw
  1297                                  
  1298 000001FD 803E[4000]FF            		cmp	byte [EndOfFile], 0FFh	; END_OF_FILE
  1299 00000202 742A                    		je	short GoToBioInit ; 23/12/2022
  1300                                  
  1301                                  		; 22/12/2022
  1302                                  		;xor	dx, dx ; * (not required)
  1303                                  		; 10/12/2022
  1304                                  		;;sub	ax, 2			; Zero base the cluster
  1305                                  		;dec	ax
  1306                                  		;dec	ax
  1307                                  		; 14/10/2023
  1308                                  		;xor	dx, dx
  1309 00000204 83E802                  		sub	ax, 2			; Zero base the cluster (32 bit as di:ax)
  1310 00000207 83DF00                  		sbb	di, 0
  1311                                  
  1312                                  		;; 24/12/2022
  1313                                  		;; ax = cluster index
  1314                                  		;;mov	cx, [SecPerCluster]
  1315                                  		;;mul	cx ; *			; How many sectors (before next cluster) 
  1316                                  		; 04/10/2023 
  1317                                  		;;mul	word [SecPerCluster]
  1318                                  		;mul	cx
  1319                                  		; 04/10/2023
  1320 0000020A 97                      		xchg	di, ax			; 32 bit multiplication
  1321 0000020B F7E1                    		mul	cx			; (dx:ax)*cx
  1322 0000020D 97                      		xchg	ax, di
  1323 0000020E F7E1                    		mul	cx
  1324 00000210 01FA                    		add	dx, di
  1325                                  		
  1326 00000212 0306[3900]              		add	ax, [FirstSectorL]	; See where the data sector starts
  1327 00000216 1316[3B00]              		adc	dx, [FirstSectorH]
  1328 0000021A A3[0700]                		mov	[StartSecL], ax		; Save it (used by ReadSectors)
  1329 0000021D 8916[0900]              		mov	[StartSecH], dx
  1330                                  		
  1331                                  		; 05/10/2023
  1332                                  		;mov	di, [NextBioLocation]
  1333 00000221 89EF                    		mov	di, bp
  1334 00000223 890E[1100]              		mov	[SectorCount], cx
  1335                                  		; es = 70h
  1336                                  
  1337                                  		; es:di = (current) buffer address for (current) read
  1338                                  	
  1339 00000227 E81C00                  		call	ReadSectors
  1340                                  				; ES:DI = (the next) buffer address for next read
  1341                                  		; 05/10/2023
  1342                                  		;mov	[NextBioLocation], di
  1343 0000022A 89FD                    		mov	bp, di
  1344                                  
  1345 0000022C EBBD                    		jmp	short GetContigClusters
  1346                                  
  1347                                  ; ---------------------------------------------------------------------------
  1348                                  
  1349                                  ; GoToBiosInit
  1350                                  ; ---------------------------------------------------------------------------
  1351                                  ;
  1352                                  ; NOTES:
  1353                                  ;
  1354                                  ;  Set up required registers for iosys, then jump to it (70:0)
  1355                                  ;
  1356                                  ; INPUT:     none
  1357                                  ;
  1358                                  ;   CS:MediaByte = media byte
  1359                                  ;   CS:BootDrive = int 13 drive number we booted from
  1360                                  ;   CS:FirstSectorL = first data sector on disk (low) (0-based)
  1361                                  ;   CS:FirstSectorH = first data sector on disk (high)
  1362                                  ;
  1363                                  ; OUTPUT:
  1364                                  ;
  1365                                  ;   required by msinit
  1366                                  ;   DL = int 13 drive number we booted from
  1367                                  ;   CH = media byte
  1368                                  ;   BX = first data sector on disk (0-based)
  1369                                  ;   AX = first data sector on disk (high)
  1370                                  ;   DI = sectors/fat for the boot media.
  1371                                  ;
  1372                                  ; calls:     none
  1373                                  ; ---------------------------------------------------------------------------
  1374                                  ;
  1375                                  ; set up registers for msinit then do far jmp
  1376                                  ;
  1377                                  ; ---------------------------------------------------------------------------
  1378                                  
  1379                                  GoToBioInit:
  1380                                  
  1381                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  1382                                  %if 0
  1383                                  		; 24/12/2022
  1384                                  		; ds = cs	
  1385                                  		;mov	ch, [cs:MediaByte]
  1386                                  		;mov	dl, [cs:BootDrive]
  1387                                  		;mov	bx, [cs:FirstSectorL]
  1388                                  		;mov	ax, [cs:FirstSectorH]
  1389                                  
  1390                                  		mov	ch, [MediaByte] ; Restore regs required for msint
  1391                                  		mov	dl, [BootDrive] ; Physical drv number we booted from.
  1392                                  		mov	bx, [FirstSectorL] ; AX:BX = first data sector of disk
  1393                                  		mov	ax, [FirstSectorH]
  1394                                  %endif
  1395                                  
  1396                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  1397                                  %if 1	
  1398                                  		; 05/10/2023
  1399                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:034Ah)
  1400 0000022E 8A2E[3F00]              		mov	ch, [MediaByte]	; Set up required registers for iosys,
  1401                                  					;  then jump to it (70:0)
  1402                                  					;
  1403                                  					; Restore regs required for msint
  1404 00000232 8A16[3D00]              		mov	dl, [BootDrive]	; Physical drv number we booted from
  1405 00000236 8B1E[3900]              		mov	bx, [FirstSectorL]
  1406 0000023A A1[3B00]                		mov     ax, [FirstSectorH]
  1407                                  					; bx:ax = first data sector of disk
  1408 0000023D C536[4100]              		lds	si, [OrgDasdPtr]
  1409                                  					; Set ds:si to Original INT 1Eh disk(ette)
  1410                                  					; table address and then push disk table 
  1411                                  					; address and INT 1Eh vector to stack
  1412                                  					; (set stack content just as at the start
  1413                                  					;  of MSLOAD)
  1414                                  		; 05/10/2023
  1415                                  		; following pushes are not necessary..
  1416                                  		; PCDOS 7.1 BIOSDATA init procedure does not pop the pushed
  1417                                  		; registers here and also it doesn't use the di value here
  1418                                  		; (but ds:si is used)
  1419                                  		;
  1420                                  		;push	ds              ; INT 1Eh original table segment
  1421                                  		;push	si              ; INT 1Eh original table offset
  1422                                  		;xor	di, di          ; 0
  1423                                  		;push	di		; INT 1Eh vector segment
  1424                                  		;mov	di, 78h         ; 1Eh*4 = 78h
  1425                                  		;push	di              ; INT 1Eh vector offset
  1426                                  %endif
  1427                                  		; 05/10/2023
  1428                                  		;mov	bp, sp	; not necessary
  1429                                  				; (BIOSDATA init doesn't use the bp value here)
  1430                                  
  1431 00000241 EA00007000              		jmp	70h:0	; Far jump to IoSysAddr	(DOSBIOS)
  1432                                  
  1433                                  ; =============== S U B	R O U T	I N E =======================================
  1434                                  
  1435                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1436                                  ; (PCDOS 7.1 IBMBIO.COM - MSLOAD:036Bh)
  1437                                  
  1438                                  %if 0
  1439                                  check_int13h_extensions:
  1440                                  		push	ax
  1441                                  		push	dx
  1442                                  		xor	ax, ax
  1443                                  		push	ax		; zero (buffer offset 24)
  1444                                  					; (bytes per sector)
  1445                                  		mov	bx, sp
  1446                                  		sub	sp, 20
  1447                                  		push	ax		; info flags
  1448                                  		mov	ax, 26		; Result buffer size
  1449                                  		push	ax
  1450                                  		mov	si, sp
  1451                                  		mov	dl, [BootDrive]
  1452                                  		mov	ah, 48h
  1453                                  		push	ds
  1454                                  		push	ss
  1455                                  		pop	ds
  1456                                  		cmp	dl, 0
  1457                                  		jge	short not_hard_disk
  1458                                  		int	13h	; DISK - IBM/MS Extension - GET DRIVE PARAMETERS
  1459                                  				; (DL - drive, DS:SI - buffer)
  1460                                  not_hard_disk:
  1461                                  		pop	ds
  1462                                  		mov	sp, bx
  1463                                  		pop	ax		; bytes per sector, buffer offset 24
  1464                                  		jc 	short int13h_ext_err
  1465                                  		cmp	ax, 512
  1466                                  		je	short int13_ext_ok
  1467                                  		stc
  1468                                  int13h_ext_err:
  1469                                  int13_ext_ok:
  1470                                  		pop	dx
  1471                                  		pop	ax
  1472                                  		retn
  1473                                  %endif
  1474                                  
  1475                                  ; =============== S U B	R O U T	I N E =======================================
  1476                                  
  1477                                  ; ReadSectors
  1478                                  ; ---------------------------------------------------------------------------
  1479                                  ; notES:
  1480                                  ;
  1481                                  ;  read in the CS:SectorCount number of sectors at ES:di
  1482                                  ;
  1483                                  ;
  1484                                  ; INPUT:
  1485                                  ;
  1486                                  ;   DI = OFFSET of start of read
  1487                                  ;   ES = segment of read
  1488                                  ;   CS:SectorCount = number of sectors to read
  1489                                  ;   CS:StartSecL = starting sector (low)
  1490                                  ;   CS:StartSecH = starting sector (high)
  1491                                  ;   following is bpb info that must be setup prior to call
  1492                                  ;   CS:NumHeads
  1493                                  ;   CS:number_of_sectors
  1494                                  ;   CS:BootDrive
  1495                                  ;   CS:SecPerTrack
  1496                                  ;
  1497                                  ; OUTPUT:
  1498                                  ;
  1499                                  ;   AX,BX,CX,DX,SI,DI destroyed
  1500                                  ; ---------------------------------------------------------------------------
  1501                                  ; divide start sector by sectors per track
  1502                                  ; the remainder is the actual sector number, 0 based
  1503                                  ;
  1504                                  ; increment actual sector number to get 1 based
  1505                                  ;
  1506                                  ; the quotient is the number of tracks - divide by heads to get the cyl
  1507                                  ;
  1508                                  ; the remainder is actual head, the quotient is cylinder
  1509                                  ;
  1510                                  ; figure the number of sectors in that track, set al to this
  1511                                  ;
  1512                                  ; do the read
  1513                                  ;
  1514                                  ; if error, do reset, then redo the int 13h
  1515                                  ;
  1516                                  ; if successful read, subtract # sectors read from SectorCount, add to logical
  1517                                  ; sector, add #sectors read * BytesPerSec to bx;
  1518                                  ;
  1519                                  ; if SectorCount <> 0 do next read
  1520                                  ; ---------------------------------------------------------------------------
  1521                                  
  1522                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1523                                  
  1524                                  		; 24/12/2022
  1525                                  		; 22/12/2022
  1526                                  ReadSectors:
  1527 00000246 B90500                  		mov	cx, 5			; 5 retries
  1528                                  
  1529                                  		; Convert a logical sector into track/sector/head. AX has the
  1530                                  		; logical sector number
  1531                                  TryRead:
  1532                                  		; 24/12/2022
  1533                                  		; ds = cs
  1534 00000249 51                      		push	cx		; (*)
  1535                                  		;mov	ax, [cs:StartSecL]	; Get starting sector
  1536                                  		;mov	dx, [cs:StartSecH]
  1537 0000024A A1[0700]                		mov	ax, [StartSecL]		; Get starting sector
  1538 0000024D 8B16[0900]              		mov	dx, [StartSecH]
  1539 00000251 50                      		push	ax		; (**)
  1540                                  		;;;
  1541                                  	
  1542                                  		; 05/10/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  1543                                  		;call	check_int13h_extensions
  1544                                  		;jc	short chs_read
  1545                                  		; ----------------------
  1546                                  		; 06/10/2023
  1547                                  check_int13h_extensions:
  1548 00000252 8A1E[3D00]              		mov	bl, [BootDrive]
  1549 00000256 08DB                    		or	bl, bl
  1550 00000258 7953                    		jns	short chs_read  ; not hard disk
  1551                                  		; bl >= 80h
  1552 0000025A 52                      		push	dx ; ***
  1553                                  		;mov	dl, [BootDrive]
  1554 0000025B 88DA                    		mov	dl, bl
  1555 0000025D 50                      		push	ax ; ****
  1556 0000025E 31C0                    		xor	ax, ax
  1557 00000260 50                      		push	ax		; zero (buffer offset 24)
  1558                                  					; (bytes per sector)
  1559 00000261 89E3                    		mov	bx, sp
  1560 00000263 83EC14                  		sub	sp, 20
  1561 00000266 50                      		push	ax		; info flags
  1562 00000267 B81A00                  		mov	ax, 26		; Result buffer size
  1563 0000026A 50                      		push	ax
  1564 0000026B 89E6                    		mov	si, sp
  1565 0000026D B448                    		mov	ah, 48h
  1566 0000026F 1E                      		push	ds
  1567 00000270 16                      		push	ss
  1568 00000271 1F                      		pop	ds
  1569 00000272 CD13                    		int	13h	; DISK - IBM/MS Extension - GET DRIVE PARAMETERS
  1570                                  				; (DL - drive, DS:SI - buffer)
  1571 00000274 1F                      		pop	ds
  1572 00000275 89DC                    		mov	sp, bx
  1573 00000277 58                      		pop	ax		; bytes per sector, buffer offset 24
  1574 00000278 7203                    		jc 	short int13h_ext_err
  1575 0000027A 3D0002                  		cmp	ax, 512
  1576                                  int13h_ext_err:
  1577 0000027D 58                      		pop	ax ; ****
  1578 0000027E 5A                      		pop	dx ; ***
  1579 0000027F 752C                    		jne	short chs_read
  1580                                  		; ----------------------
  1581                                  lba_read:		
  1582                                  		;xor	si, si		; LBA read
  1583                                  		;push	si		; 0
  1584                                  		;push	si		; 0
  1585 00000281 31DB                    		xor	bx, bx		; LBA read
  1586 00000283 53                      		push	bx		; 0
  1587 00000284 53                      		push	bx		; 0
  1588 00000285 52                      		push	dx
  1589 00000286 50                      		push	ax		; 0:0:dx:ax = start sector (8 bytes)
  1590 00000287 06                      		push	es
  1591 00000288 57                      		push	di 		; memory buffer address (seg:off)
  1592 00000289 FF36[1100]              		push	word [SectorCount]
  1593                                  					; number of sectors to read
  1594                                  		;mov	bx, 16		; size of DAP
  1595 0000028D B310                    		mov	bl, 16
  1596 0000028F 53                      		push	bx
  1597 00000290 89E6                    		mov	si, sp
  1598 00000292 B442                    		mov	ah, 42h
  1599 00000294 52                      		push	dx
  1600 00000295 8A16[3D00]              		mov	dl, [BootDrive]
  1601 00000299 1E                      		push	ds
  1602 0000029A 16                      		push	ss
  1603 0000029B 1F                      		pop	ds
  1604                                  		
  1605 0000029C CD13                    		int	13h	; DISK - IBM/MS Extension - EXTENDED READ
  1606                                  				; (DL - drive, DS:SI - disk address packet)
  1607 0000029E 1F                      		pop	ds
  1608 0000029F 5A                      		pop	dx		; sector number, hw
  1609 000002A0 7209                    		jc	short lba_read_err
  1610 000002A2 58                      		pop	ax		; size of DAP (disk address packet) = 16
  1611 000002A3 58                      		pop	ax		; number of sectors to read
  1612 000002A4 50                      		push	ax		; (**) discard ax on stack (StartSecL)
  1613 000002A5 01DC                    		add	sp, bx		; sp points to cx (*)
  1614 000002A7 59                      		pop	cx	; (*)	; remaining retry count value
  1615 000002A8 E98400                  		jmp	ReadOk
  1616                                  lba_read_err:
  1617 000002AB 01DC                    		add	sp, bx
  1618                                  		;;;
  1619                                  chs_read:
  1620 000002AD 89D0                    		mov	ax, dx		; start sector, hw
  1621 000002AF 31D2                    		xor	dx, dx ; 0
  1622                                  		;;;
  1623                                  		; 05/10/2023 - Retro DOS v5.0
  1624                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:03E3h
  1625 000002B1 3906[2500]              		cmp	[SecPerTrack], ax ; hw of disk (LBA) address
  1626 000002B5 7326                    		jnb	short DoDivide	; (must not be > sectors per track)
  1627                                  ErrorOut:
  1628                                  ReadError:		
  1629                                  		;push	cs
  1630                                  		;pop	ds
  1631                                  		; ds = cs
  1632 000002B7 BE[2904]                		mov	si, NonSystemDiskMsg ; "Non-System disk or disk error" ...
  1633                                  WriteTTY:
  1634 000002BA AC                      		lodsb
  1635 000002BB 08C0                    		or	al, al
  1636 000002BD 7408                    		jz	short wait_key_reboot
  1637 000002BF B40E                    		mov	ah, 0Eh
  1638 000002C1 B307                    		mov	bl, 7
  1639 000002C3 CD10                    		int	10h
  1640 000002C5 EBF3                    		jmp	short WriteTTY
  1641                                  wait_key_reboot:
  1642 000002C7 30E4                    		xor	ah, ah
  1643 000002C9 CD16                    		int	16h
  1644                                  		;xor	bx, bx
  1645                                  		;mov	ds, bx ; 0
  1646                                  		;les	bx, [cs:OrgDasdPtr]
  1647 000002CB C41E[4100]              		les	bx, [OrgDasdPtr] ; Restore ROMBIOS's INT 1Eh vector
  1648                                  		; 06/10/2023
  1649 000002CF 31F6                    		xor	si, si ; 0
  1650 000002D1 8EDE                    		mov	ds, si
  1651                                  
  1652 000002D3 BE7800                  		mov	si, 78h ; 1Eh*4 
  1653 000002D6 891C                    		mov	[si], bx
  1654 000002D8 8C4402                  		mov	[si+2], es
  1655 000002DB CD19                    		int	19h		; DISK BOOT
  1656                                  					; causes reboot of disk system
  1657                                  		;;;
  1658                                  DoDivide:
  1659                                  		;;div	word [cs:SecPerTrack]
  1660                                  		;div	word [SecPerTrack]
  1661                                  		; 24/12/2022
  1662 000002DD 8B1E[2500]              		mov	bx, [SecPerTrack]
  1663 000002E1 F7F3                    		div	bx
  1664 000002E3 A3[0B00]                		mov	[TempH], ax
  1665                                  		;mov	[cs:TempH], ax
  1666 000002E6 58                      		pop	ax ; (**) ; 05/10/2023	; start sector, lw
  1667 000002E7 F7F3                    		div	bx
  1668                                  		;div	word [SecPerTrack]
  1669                                  		;;div	word [cs:SecPerTrack]	; [TempH]:ax = track,
  1670                                  						; dx = sector number
  1671                                  
  1672                                  		;mov	bx, [cs:SecPerTrack]	; Get number of sectors we can
  1673                                  						; read in this track
  1674 000002E9 29D3                    		sub	bx, dx		; dx = start sector on (same) track
  1675                                  		;mov	si, bx
  1676 000002EB 8B36[1100]              		mov	si, [SectorCount] ; sectors to read on (same) track (remain sectors)
  1677                                  
  1678 000002EF 39DE                    		cmp	si, bx
  1679 000002F1 7602                    		jna	short GotLength
  1680                                  		;cmp	[SectorCount], si
  1681                                  		;;cmp	[cs:SectorCount], si	; Is possible sectors in track more
  1682                                  		;jnb	short GotLength		; than what we need to read?
  1683 000002F3 89DE                    		mov	si, bx
  1684                                  		;mov	si, [SectorCount]
  1685                                  		;;mov	si, [cs:SectorCount]	; Yes, only read what we need to
  1686                                  ;GotLength:
  1687                                  
  1688                                  		; 24/12/2022
  1689                                  		; IO.SYS < 40KB (segment override is not possible)
  1690                                  		; 700h+0F8FFh < 64KB address 
  1691                                  		;	(there is not an override risk up to 63743 bytes)
  1692                                  ; 24/12/2022
  1693                                  %if 0
  1694                                  		; 24/12/2022
  1695                                  		; dma boundary check for >64KB reads
  1696                                  		; Also, Segment Override risk !
  1697                                  		or	di, di
  1698                                  		jz	short dma_boundary_ok ; no problem for the 1st read
  1699                                  		;cmp	byte [BootDrive], 80h
  1700                                  		;;cmp	byte [cs:BootDrive], 80h
  1701                                  		;jnb	short dma_boundary_ok ; no problem for hard disks
  1702                                  dma_boundary_chk:
  1703                                  		cmp	si, 1
  1704                                  		jna	short dma_boundary_ok 
  1705                                  				; 1 sector read will not cause a boundary error
  1706                                  		push	dx
  1707                                  		push	ax
  1708                                  		mov	ax, si
  1709                                  		sub	dx, dx
  1710                                  		mul	word [BytesPerSec]
  1711                                  		mov	bx, es
  1712                                  		mov	cl, 4
  1713                                  		shl	bx, cl	; convert paragraphs to bytes
  1714                                  		; bx = segment start position (for 64K memory sections)
  1715                                  		add	bx, ax	; byte count to read
  1716                                  		pop	ax
  1717                                  		pop	dx
  1718                                  		add	bx, di	; add current buffer offset to byte count
  1719                                  		jnc	short dma_boundary_ok
  1720                                  		
  1721                                  		; Sector count must be decreased to prevent
  1722                                  		; DMA boundary error or segment override risk!
  1723                                  		dec	si
  1724                                  		jmp	short dma_boundary_chk
  1725                                  dma_boundary_ok:
  1726                                  %endif
  1727                                  		; 24/12/2022
  1728                                  GotLength:
  1729                                  		;inc	dl			; Sector numbers are 1-based
  1730                                  		; 18/12/2022
  1731 000002F5 42                      		inc	dx
  1732 000002F6 88D3                    		mov	bl, dl			; Start sector in BL
  1733                                  		; 24/12/2022
  1734 000002F8 8B16[0B00]              		mov	dx, [TempH]		; DX:AX = Track
  1735                                  		;mov	dx, [cs:TempH]		; DX:AX = Track
  1736 000002FC 50                      		push	ax
  1737 000002FD 89D0                    		mov	ax, dx
  1738 000002FF 31D2                    		xor	dx, dx
  1739                                  		; 24/12/2022
  1740 00000301 F736[2700]              		div	word [NumHeads]
  1741                                  		;div	word [cs:NumHeads]	; Start cyl in AX, head in dl
  1742                                  		;mov	[TempH], ax
  1743                                  		;;mov	[cs:TempH], ax
  1744 00000305 58                      		pop	ax
  1745 00000306 F736[2700]              		div	word [NumHeads]
  1746                                  		;div	word [cs:NumHeads]	; [TempH]:AX = Cylinder, DX = Head
  1747                                  
  1748                                  			; At this moment, we assume that TempH = 0,
  1749                                  			; ax <= 1024, dx <= 255
  1750                                  
  1751 0000030A 88D6                    		mov	dh, dl
  1752                                  		
  1753 0000030C B106                    		mov	cl, 6
  1754 0000030E D2E4                    		shl	ah, cl			; Shift cyl high bits up
  1755 00000310 08DC                    		or	ah, bl			; Mix in with sector bits
  1756 00000312 88C5                    		mov	ch, al			; Setup cyl low
  1757 00000314 88E1                    		mov	cl, ah			; Setup cyl/high - sector
  1758 00000316 89FB                    		mov	bx, di			; Get back OFFSET
  1759                                  		; 24/12/2022
  1760 00000318 8A16[3D00]              		mov	dl, [BootDrive]		; Get drive
  1761                                  		;mov	dl, [cs:BootDrive]	; Get drive
  1762 0000031C 89F0                    		mov	ax, si			; Get number of sectors to read (al)
  1763 0000031E B402                    		mov	ah, 2			; Read sectors
  1764                                  		; 23/12/2022
  1765                                  		;push	ax
  1766                                  		;push	di
  1767                                  
  1768                                  			; Issue one read request. ES:BX have the transfer address,
  1769                                  			; AL is the number of sectors.	
  1770                                  
  1771 00000320 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  1772                                  					; AL = number of sectors to read, CH = track, CL = sector
  1773                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  1774                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  1775                                  		; 23/12/2022
  1776                                  		;pop	di
  1777                                  		;pop	ax
  1778                                  
  1779                                  		; 09/12/2023
  1780                                  		; 23/12/2022
  1781                                  		;mov	ah, 0
  1782                                  		
  1783 00000322 59                      		pop	cx ; (*)	; Get retry count back
  1784 00000323 730A                    		jnc	short ReadOk	; 23/12/2022
  1785                                  		
  1786                                  		; 23/12/2022
  1787                                  		;mov	bx, di		; Get offset
  1788                                  		; 12/12/2023
  1789 00000325 30E4                    		xor	ah, ah
  1790                                  		; ah = 0
  1791                                  		; 23/12/2022
  1792                                  		;push	cx
  1793                                  		; 24/12/2022
  1794                                  		;mov	dl, [BootDrive]
  1795                                  		;;mov	dl, [cs:BootDrive]
  1796                                  		; 23/12/2022
  1797                                  		;push	di
  1798 00000327 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
  1799                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
  1800                                  		; 23/12/2022
  1801                                  		;pop	di
  1802                                  		;pop	cx
  1803 00000329 49                      		dec	cx
  1804 0000032A 748B                    		jz	short ReadError
  1805 0000032C E91AFF                  		jmp	TryRead
  1806                                  ; ---------------------------------------------------------------------------
  1807                                  ; 05/10/2023
  1808                                  ;ReadError:
  1809                                  ;		jmp	ErrorOut
  1810                                  ; ---------------------------------------------------------------------------
  1811                                  
  1812                                  ReadOk:
  1813                                  		; 09/12/2023
  1814                                  		; al = sectors per cluster or sectors per track
  1815                                  		; (al <= 64, sectors per cluster <= 64) ; (!!!)
  1816                                  		; ((128*512 = 65536 -> ax=0, dx=1 is unexpected result here!))
  1817                                  
  1818                                  		; 23/12/2022
  1819                                  		; ah = 0
  1820                                  		; 22/12/2022
  1821                                  		;xor	ah, ah		; Mask out read command, just get # read
  1822                                  		; ch = 0
  1823 0000032F 88C1                    		mov	cl, al
  1824                                  		
  1825                                  		; 09/12/2023
  1826                                  		;; 22/12/2022
  1827                                  		;; cx = ax = read (sector) count
  1828                                  		;;mov	bx, [cs:BytesPerSec]	; Bytes per sector
  1829                                  		;;mul	bx			; Get total bytes read
  1830                                  		;; 24/12/2022
  1831                                  		;; ds = cs
  1832                                  		;mul	word [BytesPerSec]
  1833                                  		;;mul	word [cs:BytesPerSec]
  1834                                  		; 09/12/2023
  1835 00000331 A1[1B00]                		mov	ax, [BytesPerSec]
  1836 00000334 F7E1                    		mul	cx	; (!!!)	
  1837 00000336 01C7                    		add	di, ax		; Add it to OFFSET
  1838                                  		; 09/12/2023
  1839                                  		; dx = 0 (CL must be <= 64) ; (!!!) 
  1840                                  
  1841                                  		; 24/12/2022
  1842                                  		; IO.SYS < 40KB (segment override is not possible)
  1843                                  		; 700h+0F8FFh < 64KB address 
  1844                                  		;	(there is not an override risk up to 63743 bytes)
  1845                                  		;add	di, ax
  1846                                  		;jnc	short read_next_sector
  1847                                  		;mov	bx, es
  1848                                  		;;add	bx, 1000h
  1849                                  		;add	bh, 10h
  1850                                  		;mov	es, bx
  1851                                  ;read_next_sector:
  1852                                  
  1853                                  		; 24/12/2022
  1854                                  		; ds = cs
  1855                                  		; 22/12/2022
  1856 00000338 290E[1100]              		sub	[SectorCount], cx
  1857                                  		;sub	[cs:SectorCount], cx
  1858                                  		;;sub	[cs:SectorCount], ax	; Bump number down
  1859 0000033C 7464                    		jz	short EndRead
  1860 0000033E 010E[0700]              		add	[StartSecL], cx
  1861                                  		;add	[cs:StartSecL], cx
  1862                                  		;;add	[cs:StartSecL], ax	; Where to start next time
  1863                                  		;adc	word [StartSecH], 0
  1864                                  		; 09/12/2023
  1865 00000342 1116[0900]              		adc	[StartSecH], dx ; 0
  1866                                  		;;adc	word [cs:StartSecH], 0
  1867 00000346 E9FDFE                  		jmp	ReadSectors
  1868                                  ; ---------------------------------------------------------------------------
  1869                                  		
  1870                                  		; 09/12/2023
  1871                                  		; 06/10/2023
  1872                                  		; 24/12/2022
  1873                                  ;EndRead:
  1874                                  ;		retn
  1875                                  
  1876                                  ; =============== S U B	R O U T	I N E =======================================
  1877                                  
  1878                                  ; GetNextFatEntry
  1879                                  ; ---------------------------------------------------------------------------
  1880                                  ;
  1881                                  ; NOTES:
  1882                                  ;
  1883                                  ;   given the last cluster found, this will return the next cluster of
  1884                                  ;   iosys. if the last cluster is (f)ff8 - (f)fff, then the final cluster
  1885                                  ;   of iosys has been loaded, and control is passed to goto_iosys
  1886                                  ;   msload can handle maximum fat area size of 128 kb.
  1887                                  ;
  1888                                  ; INPUT:
  1889                                  ;
  1890                                  ;    CS:CurrentCluster
  1891                                  ;    CS:FatSize
  1892                                  ;
  1893                                  ; OUTPUT:
  1894                                  ;
  1895                                  ;   CS:CurrentCluster (updated)
  1896                                  ;
  1897                                  ; calls:  GetFatSector
  1898                                  ; ---------------------------------------------------------------------------
  1899                                  ; get CurrentCluster
  1900                                  ;
  1901                                  ; if (16 bit fat)
  1902                                  ;    {if (CurrentCluster = fff8 - ffff)
  1903                                  ;	 {jmp goto_iosys}
  1904                                  ;     else
  1905                                  ;	{get OFFSET by multiply cluster by 2}
  1906                                  ;
  1907                                  ; else
  1908                                  ;    {if (CurrentCluster = ff8 - fff)
  1909                                  ;	 {jmp goto_iosys}
  1910                                  ;     else
  1911                                  ;	{get OFFSET by multiply cluster by 3
  1912                                  ;
  1913                                  ;	 rotate right to divide by 2
  1914                                  ;
  1915                                  ;	 if (cy set - means odd number)
  1916                                  ;	    {shr 4 times to keep high twelve bits}
  1917                                  ;
  1918                                  ;	 else
  1919                                  ;	    {and with 0fffh to keep low 12 bits}
  1920                                  ;	}
  1921                                  ;    }
  1922                                  ;
  1923                                  ; ---------------------------------------------------------------------------
  1924                                  
  1925                                  ; 09/12/2022
  1926                                  ; FAT_12_BIT equ 1
  1927                                  ; NOT_END_OF_FILE equ 0  ; ~END_OF_FILE ; END_OF_FILE equ 0FFh
  1928                                  
  1929                                  GetNextFatEntry:
  1930                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1931                                  
  1932 00000349 06                      		push	es
  1933                                  		; 24/12/2022
  1934                                  		; ds = cs
  1935                                  		;mov	ax, [cs:FatSegment]
  1936 0000034A A1[4500]                		mov	ax, [FatSegment]
  1937 0000034D 8EC0                    		mov	es, ax		; ES-> FAT area segment
  1938                                  		; 09/12/2022
  1939                                  		;;mov	byte [cs:EndOfFile], END_OF_FILE
  1940                                  		;mov	byte [cs:EndOfFile], 0FFh ; Assume last cluster
  1941                                  		;mov	ax, [cs:CurrentCluster] ; Get last cluster
  1942                                  		; 24/12/2022
  1943                                  		; ds = cs
  1944 0000034F C606[4000]FF            		mov	byte [EndOfFile], 0FFh ; Assume last cluster
  1945                                  		;;;
  1946                                  		;mov	ax, [CurrentCluster] ; Get last cluster
  1947                                  		; 05/10/2023 - Retro DOS v5.0 (PCDOS 7.1)
  1948 00000354 A1[1300]                		mov	ax, [CurrentClusterL] ; Get last cluster
  1949                                  		; 06/10/2023
  1950                                  		;mov	di, [CurrentClusterH]
  1951                                  chk_fat32_type:
  1952                                  		; 05/10/2023
  1953 00000357 803E[3E00]0B            		cmp	byte [FatType], 0Bh  ; FAT32 (CHS) fs ?
  1954 0000035C 7520                    		jne	short chk_fat_type   ; no
  1955                                  Got32bit:
  1956 0000035E 8B3E[1500]              		mov	di, [CurrentClusterH]
  1957 00000362 01C0                    		add	ax, ax
  1958 00000364 11FF                    		adc	di, di
  1959 00000366 01C0                    		add	ax, ax
  1960 00000368 11FF                    		adc	di, di          ; Get the FAT offset (di:si)
  1961 0000036A 89C6                    		mov	si, ax
  1962 0000036C E86700                  		call	GetFatSector
  1963 0000036F 268B07                  		mov	ax, [es:bx]
  1964 00000372 268B7F02                		mov	di, [es:bx+2]
  1965                                  		; 06/10/2023
  1966                                  		;and	di, 0FFFh ; 28 bit cluster number
  1967 00000376 81FFFF0F                		cmp	di, 0FFFh       ; FAT32 cluster numbers are 28 bit numbers
  1968                                  					; (higher 4 bits are -must be- zero)
  1969                                  		;jne	short GotFAT32ClusterDone
  1970 0000037A 751E                    		jne	short GotClusterDoneJ
  1971                                  		; 06/10/2023
  1972                                  		;cmp	ax, 0FFF8h
  1973                                  ;GotFAT32ClusterDone:
  1974                                  		;jmp	short GotClusterDoneJ
  1975                                  		; 09/12/2023
  1976                                  		;mov	dx, 0FFF8h
  1977                                  		;jmp	short isitlastcluster
  1978 0000037C EB17                    		jmp	short isitlastcluster_16_32
  1979                                  		;;;
  1980                                  chk_fat_type:
  1981                                  		; 06/10/2023
  1982 0000037E 29FF                    		sub	di, di ; 0 ; hw of the cluster number must be 0
  1983                                  				   ; (if it is not FAT32 cluster) 
  1984                                  		; 05/10/2023
  1985 00000380 803E[3E00]01            		cmp	byte [FatType], 1
  1986                                  		;cmp	byte [Fatsize], 1
  1987                                  		;;;cmp	byte [cs:FatSize], FAT_12_BIT
  1988                                  		;;cmp	byte [cs:Fatsize], 1
  1989                                  		;jne	short Got16Bit	; 23/12/2022
  1990                                  		; 09/12/2023
  1991 00000385 741C                    		je	short Got12Bit
  1992                                  
  1993                                  ; ---------------------------------------------------------------------------
  1994                                  		
  1995                                  		; 09/12/2023
  1996                                  Got16Bit:
  1997                                  		; 23/12/2022
  1998                                  		;push	dx
  1999                                  		;xor	dx, dx
  2000                                  		; 05/10/2023
  2001                                  		;sub	dx, dx ; 23/12/2022
  2002                                  
  2003                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (MSLOAD)
  2004                                  		;shl	ax, 1			; Multiply cluster by 2
  2005                                  		;adc	dx, 0
  2006 00000387 D1E0                    		shl	ax, 1
  2007 00000389 11FF                    		adc	di, di	; di = 0 ; 06/10/2023	
  2008                                  
  2009 0000038B 89C6                    		mov	si, ax			; Get the final buffer OFFSET
  2010 0000038D E84600                  		call	GetFatSector
  2011                                  		; 23/12/2022
  2012                                  		;pop	dx
  2013                                  
  2014                                  		; 05/10/2023
  2015 00000390 31FF                    		xor	di, di		 ; HW of cluster number is 0
  2016                                  
  2017 00000392 268B07                  		mov	ax, [es:bx]
  2018                                  
  2019                                  		; 09/12/2023
  2020                                  isitlastcluster_16_32:
  2021                                  		; 06/10/2023
  2022 00000395 BAF8FF                  		mov	dx, 0FFF8h
  2023                                  		;jmp	short isitlastcluster
  2024                                  ; 09/12/2023
  2025                                  ; 06/10/2023
  2026                                  %if 1
  2027                                  isitlastcluster:
  2028 00000398 39D0                    		cmp	ax, dx
  2029                                  		;cmp	ax, 0FFF8h
  2030                                  GotClusterDoneJ:	; 05/10/2023
  2031 0000039A 7305                    		jnb	short GotClusterDone
  2032                                  NotLastCluster:	
  2033                                  		; 24/12/2022
  2034                                  		; ds = cs
  2035                                  		;;mov	byte [cs:EndOfFile], NOT_END_OF_FILE ; ~END_OF_FILE
  2036                                  		;mov	byte [cs:EndOfFile], 0	; Assume not last cluster
  2037 0000039C C606[4000]00            		mov	byte [EndOfFile], 0	; Assume not last cluster
  2038                                  GotClusterDone:
  2039 000003A1 07                      		pop	es
  2040                                  		; 24/12/2022
  2041                                  EndRead:
  2042 000003A2 C3                      		retn
  2043                                  %endif
  2044                                  
  2045                                  ; ---------------------------------------------------------------------------
  2046                                  
  2047                                  		; 09/12/2023
  2048                                  Got12Bit:
  2049 000003A3 89C6                    		mov	si, ax
  2050                                  		;shr	ax, 1
  2051                                  		;add	si, ax		; SI = AX * 1.5 = AX + AX/2
  2052                                  		; 05/10/2023
  2053                                  		;mov	dx, di
  2054                                  		;shr	dx, 1
  2055                                  		;rcr	ax, 1
  2056                                  		;add	si, ax
  2057                                  		;adc	di, dx		; di:si = dx:ax * 1.5 = dx:ax + dx:ax/2
  2058                                  		; 06/10/2023
  2059 000003A5 D1E8                    		shr	ax, 1
  2060 000003A7 01C6                    		add	si, ax
  2061                                  		;sub	di, di ; 0 ; (di must be 0 for FAT12)
  2062                                  
  2063                                  		; 23/12/2022
  2064                                  		;push	dx
  2065                                  		;xor	dx, dx
  2066                                  		; 05/10/2023
  2067                                  		;sub	dx, dx ; 23/12/2022
  2068 000003A9 E82A00                  		call	GetFatSector
  2069                                  		; 23/12/2022
  2070                                  		;pop	dx
  2071 000003AC 7510                    		jnz	short ClusterOk
  2072 000003AE 268A07                  		mov	al, [es:bx]
  2073                                  		; 22/12/2022
  2074                                  		;mov	[cs:TempCluster], al
  2075                                  		; 06/10/2023
  2076 000003B1 50                      		push	ax ; (*)
  2077                                  		;inc	si
  2078                                  		;add	si, 1
  2079                                  		;adc	di, 0
  2080                                  		; 05/10/2023
  2081 000003B2 46                      		inc	si
  2082                                  		; 06/10/2023
  2083                                  		;jnz	short Got12Bit_rnfs
  2084                                  		;inc	di
  2085                                  ;Got12Bit_rnfs:
  2086                                  		; 23/12/2022
  2087                                  		;push	dx
  2088                                  		; 05/10/2023
  2089                                  		;xor	dx, dx
  2090 000003B3 E82000                  		call	GetFatSector	; Read next fat sector
  2091                                  		; 23/12/2022
  2092                                  		;pop	dx
  2093                                  		; 22/12/2022
  2094                                  		;mov	al, [es:0]
  2095                                  		;mov	[cs:TempCluster+1], al
  2096                                  		;mov	ax, [cs:TempCluster]
  2097                                  		; 06/10/2023
  2098                                  		; 22/12/2022
  2099 000003B6 58                      		pop	ax ; (*) 
  2100 000003B7 268A260000              		mov	ah, [es:0]
  2101 000003BC EB03                    		jmp	short EvenOdd
  2102                                  ; ---------------------------------------------------------------------------
  2103                                  
  2104                                  ClusterOk:
  2105 000003BE 268B07                  		mov	ax, [es:bx]
  2106                                  EvenOdd:
  2107                                  		; 24/12/2022
  2108                                  		; ds = cs
  2109                                  		;test	byte [CurrentCluster], 1
  2110                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (MSLOAD)
  2111 000003C1 F606[1300]01            		test	byte [CurrentClusterL], 1
  2112                                  		; 10/12/2022		
  2113                                  		;test	byte [cs:CurrentCluster], 1 ; 09/12/2022
  2114                                  		;;test	word [cs:CurrentCluster], 1 ; Was last cluster odd?
  2115 000003C6 7505                    		jnz	short OddResult		; If not zero it was odd
  2116 000003C8 25FF0F                  		and	ax, 0FFFh		; Keep low 12 bits
  2117 000003CB EB04                    		jmp	short TestEOF
  2118                                  ; ---------------------------------------------------------------------------
  2119                                  
  2120                                  OddResult:
  2121 000003CD B104                    		mov	cl, 4			; Keep high 12 bits for odd
  2122 000003CF D3E8                    		shr	ax, cl
  2123                                  TestEOF:
  2124                                  		; 06/10/2023
  2125                                  		; di = 0
  2126                                  		;xor	di, di		 ; HW of cluster number is 0
  2127                                  		
  2128                                  		; 06/10/2023	
  2129                                  		;cmp	ax, 0FF8h		; Is it last cluster?
  2130                                  		;jnb	short GotClusterDone	; Yep, all done here
  2131                                  		;jmp	short NotLastCluster
  2132 000003D1 BAF80F                  		mov	dx, 0FF8h
  2133                                  		; 09/12/2023
  2134 000003D4 EBC2                    		jmp	short isitlastcluster
  2135                                  ; 09/12/2023
  2136                                  ; 06/10/2023
  2137                                  %if 0
  2138                                  isitlastcluster:
  2139                                  		; 06/10/2023
  2140                                  		cmp	ax, dx
  2141                                  GotClusterDoneJ:
  2142                                  		jnb	short GotClusterDone
  2143                                  NotLastCluster:	
  2144                                  		; 24/12/2022
  2145                                  		; ds = cs
  2146                                  		;;mov	byte [cs:EndOfFile], NOT_END_OF_FILE ; ~END_OF_FILE
  2147                                  		;mov	byte [cs:EndOfFile], 0	; Assume not last cluster
  2148                                  		mov	byte [EndOfFile], 0	; Assume not last cluster
  2149                                  GotClusterDone:
  2150                                  		pop	es
  2151                                  		; 06/10/2023
  2152                                  		; 24/12/2022
  2153                                  ;EndRead:
  2154                                  		retn
  2155                                  %endif
  2156                                  
  2157                                  ; GetFatSector
  2158                                  ; ---------------------------------------------------------------------------
  2159                                  ;function: find and read the corresponding fat sector into ES:0
  2160                                  ;
  2161                                  ;in). SI = offset value (starting from fat entry 0) of fat entry to find.
  2162                                  ;     ES = fat sector segment
  2163                                  ;     CS:BytesPerSec
  2164                                  ;
  2165                                  ;out). corresponding fat sector read in.
  2166                                  ;      BX = offset value of the corresponding fat entry in the fat sector.
  2167                                  ;      CX destroyed.
  2168                                  ;      zero flag set if the fat entry is splitted, i.e. when 12 bit fat entry
  2169                                  ;      starts at the last byte of the fat sector. in this case, the caller
  2170                                  ;      should save this byte, and read the next fat sector to get the rest
  2171                                  ;      of the fat entry value. (this will only happen with the 12 bit fat).
  2172                                  ;
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; 09/12/2023
  2176                                  ; 06/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2177                                  ; (PCDOS 7.1 IBMBIO.COM - MSLOAD:054Ch)
  2178                                  
  2179                                  		; 24/12/2022
  2180                                  		; 22/12/2022
  2181                                  GetFatSector:
  2182                                  		;push	ax	; 06/10/2023
  2183 000003D6 56                      		push	si
  2184 000003D7 57                      		push	di		; di:si = byte offset in (entire) FAT
  2185                                  		;;;
  2186                                  		; 06/10/2023
  2187 000003D8 89F8                    		mov	ax, di		; 32 bit division (dx:ax/512)
  2188 000003DA 8B0E[1B00]              		mov     cx, [BytesPerSec]
  2189 000003DE 31D2                    		xor	dx, dx
  2190 000003E0 F7F1                    		div	cx
  2191 000003E2 89C3                    		mov	bx, ax
  2192                                  		;;;
  2193 000003E4 89F0                    		mov	ax, si
  2194                                  		; 24/12/2022
  2195                                  		; ds = cs
  2196                                  		;mov	cx, [cs:BytesPerSec]
  2197                                  		; 06/10/2023
  2198 000003E6 F7F1                    		div	cx			; AX = Sector number, DX = Offset
  2199                                  		;div	word [BytesPerSec]
  2200                                  			; dx = byte offset in the FAT sector
  2201                                  			; ax = low word of the FAT sector number
  2202                                  			; bx = high word of the FAT sector number  
  2203                                  		; 06/10/2023
  2204 000003E8 3B1E[0F00]              		cmp	bx, [LastFatSectorH]  ; FAT32 (32 bit cluster numbers)
  2205 000003EC 7506                    		jne	short not_same_fat_sector
  2206 000003EE 3B06[0D00]              		cmp	ax, [LastFatSectorL]
  2207                                  		;cmp	ax, [LastFatSector]
  2208                                  		;;cmp	ax, [cs:LastFatSector]	; The same fat sector?
  2209 000003F2 742D                    		je	short SplitChk		; Don't need to read it again.
  2210                                  not_same_fat_sector:
  2211                                  		; 06/10/2023
  2212 000003F4 A3[0D00]                		mov	[LastFatSectorL], ax
  2213 000003F7 891E[0F00]              		mov	[LastFatSectorH], bx
  2214                                  		;
  2215                                  		;mov	[LastFatSector], ax
  2216                                  		;;mov	[cs:LastFatSector], ax
  2217                                  		; 06/10/2023
  2218 000003FB 51                      		push	cx ; ** ; bytes per sector
  2219                                  		;
  2220 000003FC 52                      		push	dx ; *
  2221                                  		; 24/12/2022
  2222                                  		;xor	dx, dx
  2223                                  		; 06/10/2023
  2224 000003FD 89DA                    		mov	dx, bx
  2225                                  		;
  2226                                  		;add	ax, [cs:HiddenSectorsL]
  2227                                  		;adc	dx, [cs:HiddenSectorsH]
  2228                                  		;add	ax, [cs:ReservSectors]
  2229                                  		;adc	dx, 0
  2230                                  		; 24/12/2022
  2231                                  		; ds = cs
  2232                                  		; 06/10/2023 - Retro DOS v5.0 (PCDOS 7.1 IBVBIO.COM)
  2233                                  		;add	ax, [FatStartSecL]
  2234                                  		;adc	dx, [FatStartSecH]
  2235                                  		; 09/12/2023
  2236 000003FF 31FF                    		xor	di, di ; 0
  2237 00000401 0306[2900]              		add     ax, [HiddenSectorsL]
  2238 00000405 1316[2B00]              		adc	dx, [HiddenSectorsH]
  2239 00000409 0306[1F00]              		add	ax, [ReservSectors]
  2240                                  		;adc	dx, 0
  2241                                  		; 09/12/2023
  2242 0000040D 11FA                    		adc	dx, di ; 0
  2243                                  
  2244 0000040F A3[0700]                		mov	[StartSecL], ax
  2245 00000412 8916[0900]              		mov	[StartSecH], dx		; Set up for ReadSectors
  2246                                  		;mov	[cs:StartSecL], ax
  2247                                  		;mov	[cs:StartSecH], dx	; Set up for ReadSectors
  2248                                  		
  2249 00000416 C706[1100]0100          		mov	word [SectorCount], 1 ; 1 sector
  2250                                  		;mov	word [cs:SectorCount], 1 ; 1 sector
  2251                                  		; 06/10/2023
  2252                                  		; di = 0
  2253                                  		;xor	di, di ; 0
  2254                                  		; es:di = FATSEGMENT:0000h
  2255 0000041C E827FE                  		call	ReadSectors
  2256 0000041F 5A                      		pop	dx ; *
  2257                                  		; 06/10/2023
  2258                                  		;mov	cx, [BytesPerSec]
  2259 00000420 59                      		pop	cx ; **
  2260                                  		; 24/12/2022
  2261                                  		;mov	cx, [cs:BytesPerSec]
  2262                                  SplitChk:
  2263                                  		; 06/10/2023
  2264                                  		; cx = bytes per sector
  2265                                  		; 24/12/2022
  2266                                  		;mov	cx, [BytesPerSec]
  2267 00000421 49                      		dec	cx			; CX = SECTOR SIZE - 1
  2268 00000422 39CA                    		cmp	dx, cx			; If last byte of sector, splitted entry.
  2269 00000424 89D3                    		mov	bx, dx			; set bx to dx
  2270 00000426 5F                      		pop	di
  2271 00000427 5E                      		pop	si
  2272                                  		;pop	ax	; 06/10/2023
  2273                                  EndWrite:		; 10/12/2022
  2274 00000428 C3                      		retn
  2275                                  
  2276                                  ; ---------------------------------------------------------------------------
  2277                                  
  2278                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2279                                  %if 0
  2280                                  
  2281                                  ErrorOut:
  2282                                  		; 24/12/2022
  2283                                  		; ds = cs
  2284                                  		;push	cs
  2285                                  		;pop	ds
  2286                                  		
  2287                                  		mov	si, NonSystemDiskMsg ; "\r\nNon-System disk or disk error\r\nRe"...
  2288                                  		call	WriteTTY
  2289                                  
  2290                                  		; Wait for a keypress on the keyboard.
  2291                                  		; Use the bios keyboard interrupt.
  2292                                  
  2293                                  		xor	ah, ah
  2294                                  		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  2295                                  					; Return: AH = scan code, AL = character
  2296                                  
  2297                                  		; We have to restore the address of the original rom disk
  2298                                  		; parameter table to the location at [0:DskAddr]. The address
  2299                                  		; of this original table has been saved previously in
  2300                                  		; 0:OrgDasdPtr and 0:OrgDasdPtr+2. After this table address
  2301                                  		; has been restored we can reboot by invoking the bootstrap
  2302                                  		; loader bios interrupt.
  2303                                  
  2304                                  		; 23/12/2022
  2305                                  		;xor	bx, bx
  2306                                  		;mov	ds, bx
  2307                                  		;les	bx, [OrgDasdPtr] ; Wrong DS segment !
  2308                                  					 ; (Erdogan Tan, 23/12/2022)
  2309                                  		les	bx, [OrgDasdPtr] ; Correct DS segment = CS
  2310                                  		
  2311                                  		; 23/12/2022
  2312                                  		push	ss ; 0
  2313                                  		pop	ds
  2314                                  		; ds = 0
  2315                                  
  2316                                  		mov	si, DskAddr	; (Int 1Eh)
  2317                                  		mov	[si], bx	; restore offset
  2318                                  		mov	[si+2], es	; restore segment
  2319                                  		int	19h		; reboot
  2320                                  
  2321                                  ; =============== S U B	R O U T	I N E =======================================
  2322                                  
  2323                                  ; WriteTTY
  2324                                  ; ---------------------------------------------------------------------------
  2325                                  ; in) DS:si -> asciiz string.
  2326                                  ;
  2327                                  ; WriteTTY the character in al to the screen.
  2328                                  ; use video service 'write teletype to active page' (ROM_TTY)
  2329                                  ; use normal character attribute
  2330                                  ; ---------------------------------------------------------------------------
  2331                                  
  2332                                  WriteTTY:
  2333                                  		lodsb
  2334                                  		or	al, al
  2335                                  		jz	short EndWrite
  2336                                  		;mov	AH, ROM_TTY	; 09/12/2022
  2337                                  		mov	ah, 0Eh
  2338                                  		mov	bl, 7	; "normal" attribute
  2339                                  		int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  2340                                  				; AL = character, BH = display page (alpha modes)
  2341                                  				; BL = foreground color	(graphics modes)
  2342                                  		jmp	short WriteTTY
  2343                                  ; ---------------------------------------------------------------------------
  2344                                  
  2345                                  ; 10/12/2022
  2346                                  ;EndWrite:
  2347                                  ;		retn
  2348                                  
  2349                                  %endif	; 05/10/2023
  2350                                  
  2351                                  ; ---------------------------------------------------------------------------
  2352                                  
  2353                                  ; 06/10/2023 - Retro DOS v5.0 IBMBIO.COM (IO.SYS) ((Modified PCDOS 7.1))
  2354                                  ; (PCDOS 7.1 IBMBIO.COM - MSLOAD:054Ch)
  2355                                  
  2356                                  ; 09/12/2022
  2357                                  ;include msbio.cl1
  2358                                  
  2359                                  		; 22/12/2022
  2360                                  		; 20/12/2022
  2361                                  		; 18/12/2022
  2362                                  		;db 0	; (word alignment)
  2363                                  NonSystemDiskMsg:
  2364 00000429 0D0A                    		db 0Dh,0Ah		; ...
  2365 0000042B 4E6F6E2D5379737465-     		db 'Non-System disk or disk error',0Dh,0Ah
  2365 00000434 6D206469736B206F72-
  2365 0000043D 206469736B20657272-
  2365 00000446 6F720D0A           
  2366 0000044A 5265706C6163652061-     		db 'Replace and press any key when ready',0Dh,0Ah,0
  2366 00000453 6E6420707265737320-
  2366 0000045C 616E79206B65792077-
  2366 00000465 68656E207265616479-
  2366 0000046E 0D0A00             
  2367                                  ; 25/12/2022
  2368 00000471 90<rep Fh>              align 16
  2369                                  
  2370                                  EndOfLoader:	; (PCDOS 7.1 IBMBIO.COM - MSLOAD:05F0h) ; 06/10/2023
  2371                                  		;dw 01A1h	; 10/12/2022
  2372                                  
  2373                                  ; ---------------------------------------------------------------------------
  2374                                  
  2375                                  ;=============================================================================
  2376                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
  2377                                  ;=============================================================================
  2378                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2379                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
  2380                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  2381                                  
  2382                                  section .BIOSDATA vstart=0
  2383                                  
  2384                                  ;--- DOSBIOS data segment ----------------------------------------------------
  2385                                  ;-----------------------------------------------------------------------------
  2386                                  
  2387                                  ;Bios_Data segment
  2388                                  
  2389                                  BData_start:
  2390 00000000 E9931B                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
  2391                                  ; ----------------------------------------------------------------------------
  2392                                  
  2393 00000003 0000                    DosDataSg:	dw 0
  2394                                  
  2395                                  ; DOS's int 2f handler will exit via a jump through here.
  2396                                  ; This is how the BIOS hooks int2f
  2397                                  
  2398                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
  2399                                  			
  2400 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
  2401                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2402                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
  2403                                  		;dw int_2f
  2404                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
  2405 00000006 [2B16]                  		dw i2f_handler
  2406                                  bios_i2f_seg:	; 10/08/2023
  2407 00000008 2D03                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
  2408                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
  2409                                  
  2410 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
  2411                                  					; This is to maintain binary compatibility
  2412                                  					; with DISK based DOS 5.0
  2413                                  
  2414                                  ; This is a byte used for special key handling in the resident
  2415                                  ; console device driver. It must be here so that it can be included
  2416                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
  2417                                  
  2418 0000000C 00                      altah:		db 0			; special key handling
  2419                                  			
  2420 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
  2421 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
  2422                                  
  2423                                  ; PTRSAV - pointer save
  2424                                  ;
  2425                                  ; This variable holds the pointer to the Request Header passed by a program
  2426                                  ; wishing to use a device driver. When the strategy routine is called it 
  2427                                  ; puts the address of the Request header in this variable and returns.
  2428                                  		
  2429 00000012 00000000                ptrsav:		dd 0			
  2430                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
  2431 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
  2432 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero
  2433 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through
  2434 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).
  2435 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
  2436 00000021 0000                    auxnum:		dw 0			; which aux device was requested
  2437                                  
  2438                                  ;-----------------------------------------------------------------------------
  2439                                  
  2440                                  res_dev_list:
  2441                                  
  2442                                  ; Device Header for the CON Device Driver
  2443                                  
  2444                                  CONHeader:				; HEADER FOR DEVICE "CON"
  2445 00000023 [3500]                  		dw auxdev2
  2446 00000025 7000                    		dw 70h	
  2447 00000027 1380                    word_727:	dw 8013h
  2448 00000029 [1506]                  		dw strategy
  2449 0000002B [2006]                  		dw con_entry
  2450 0000002D 434F4E2020202020        aCon:		db 'CON     '
  2451 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"
  2452 00000037 7000                    		dw 70h
  2453 00000039 0080                    		dw 8000h
  2454 0000003B [1506]                  		dw strategy
  2455 0000003D [4106]                  		dw aux0_entry
  2456 0000003F 4155582020202020        aAux:		db 'AUX     '
  2457 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
  2458 00000049 7000                    		dw 70h
  2459 0000004B C0A0                    word_74B:	dw 0A0C0h
  2460 0000004D [1506]                  		dw strategy
  2461 0000004F [2506]                  		dw prn0_entry
  2462 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
  2463 00000059 [6B00]                  timdev:		dw dskdev
  2464 0000005B 7000                    		dw 70h
  2465 0000005D 0880                    		dw 8008h
  2466 0000005F [1506]                  		dw strategy
  2467 00000061 [5906]                  		dw tim_entry
  2468 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
  2469 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
  2470 0000006D 7000                    		dw 70h
  2471                                  		;dw 8C2h
  2472                                  		; 02/10/2023 - Retro DOS v5.0
  2473 0000006F C248                    		dw 48C2h		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:006Fh
  2474                                  		;dw offset strategy
  2475                                  		;dw offset dsk_entry
  2476                                  		; 19/10/2022
  2477 00000071 [1506]                  		dw strategy
  2478 00000073 [5E06]                  		dw dsk_entry
  2479                                  
  2480                                  ; maximum number of drives
  2481                                  
  2482 00000075 04                      drvmax:		db 4
  2483 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed
  2484 00000077 00                      fhave96:	db 0			; flag to indicate presence of
  2485                                  					; 96tpi support		
  2486 00000078 00                      single:		db 0			; used to detect single drive systems
  2487 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
  2488                                  					; used by console driver.
  2489 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
  2490                                  					; drive. (examined by checksingle).
  2491                                  		
  2492 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"
  2493 0000007D 7000                    		dw 70h
  2494 0000007F 0080                    		dw 8000h
  2495 00000081 [1506]                  		dw strategy
  2496 00000083 [4106]                  		dw aux0_entry
  2497 00000085 434F4D3120202020        aCom1:		db 'COM1    '
  2498 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1
  2499 0000008F 7000                    		dw 70h
  2500 00000091 C0A0                    		dw 0A0C0h
  2501 00000093 [1506]                  		dw strategy
  2502 00000095 [2C06]                  		dw prn1_entry
  2503 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  2504 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2
  2505 000000A1 7000                    		dw 70h
  2506 000000A3 C0A0                    		dw 0A0C0h
  2507 000000A5 [1506]                  		dw strategy
  2508 000000A7 [3306]                  		dw prn2_entry
  2509 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  2509 000000B2 0000               
  2510                                  
  2511                                  ;M058; Start of changes
  2512                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  2513                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  2514                                  ;cannot change for them to work. Even ProComm does this.
  2515                                  
  2516 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h
  2517                                  
  2518 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  2519 000000BA 7000                    		dw 70h
  2520 000000BC C0A0                    		dw 0A0C0h
  2521 000000BE [1506]                  		dw strategy
  2522 000000C0 [3A06]                  		dw prn3_entry
  2523 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  2524 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  2525 000000CC 7000                    		dw 70h
  2526 000000CE 0080                    		dw 8000h
  2527 000000D0 [1506]                  		dw strategy
  2528 000000D2 [4706]                  		dw aux1_entry
  2529                                  		; 19/10/2022
  2530 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  2531                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  2532 000000DC [EE00]                  		dw com4dev
  2533 000000DE 7000                    		dw 70h
  2534 000000E0 0080                    		dw 8000h
  2535                                  		;dw offset strategy
  2536                                  		;dw offset aux2_entry
  2537 000000E2 [1506]                  		dw strategy
  2538 000000E4 [4D06]                  		dw aux2_entry	
  2539 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  2540 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"
  2541 000000F0 7000                    		dw 70h
  2542 000000F2 0080                    		dw 8000h
  2543 000000F4 [1506]                  		dw strategy
  2544 000000F6 [5306]                  		dw aux3_entry
  2545 000000F8 434F4D3420202020        		db 'COM4    '
  2546                                  
  2547                                  ;-----------------------------------------------------------------------------
  2548                                  
  2549 00000100 10                      RomVectors:	db 10h			
  2550 00000101 00000000                Old10:		dd 0
  2551 00000105 13                      		db 13h
  2552 00000106 00000000                Old13:		dd 0			
  2553 0000010A 15                      		db 15h
  2554 0000010B 00000000                Old15:		dd 0			
  2555 0000010F 19                      		db 19h
  2556 00000110 00000000                Old19:		dd 0
  2557 00000114 1B                      		db 1Bh
  2558 00000115 00000000                Old1B:		dd 0
  2559                                  
  2560                                  ;EndRomVectors	equ $
  2561                                  
  2562                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  2563                                  
  2564                                  ;-----------------------------------------------------------------------------
  2565                                  
  2566 00000119 [5203]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  2567 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  2568                                  
  2569                                  ; (MSDOS 3.3) NOTE:
  2570                                  ; Some floppy drives do not have changeline support. The result is a
  2571                                  ; large amount of inefficiency in the code. A media-check always returns
  2572                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  2573                                  ; always discard any cached data.
  2574                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  2575                                  ; The following three items are used to do this. The logical door latch is
  2576                                  ; based on the premise that it is not physically possible to change floppy
  2577                                  ; disks in a drive in under two seconds (most people take about 10). The
  2578                                  ; logical door latch is implemented by saving the time of the last successful
  2579                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  2580                                  ; current time is compared to the saved time. If less than two seconds have
  2581                                  ; passed then the value "No Change" is returned. If more than two seconds
  2582                                  ; have passed the value "Don't Know" is returned.
  2583                                  ;    There is one complecation to this algorithm. Some programs change the
  2584                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  2585                                  ; This possibility is detected by counting the number of disk operations
  2586                                  ; which occur without any time passing. If this count exceeds the value of
  2587                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  2588                                  ; Know". The variable "AccessCount" is used to keep track of the number
  2589                                  ; of disk operation which occur without the time changing.
  2590                                  
  2591 0000011D 00                      accesscount:	db 0			
  2592 0000011E FF                      tim_drv:	db 0FFh			
  2593 0000011F 00                      medbyt:		db 0
  2594                                  wrtverify:	; 15/10/2022			
  2595 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  2596 00000121 00                      verify:		db 0			; 1 if verify after write
  2597 00000122 0000                    seccnt:		dw 0			
  2598 00000124 00                      		db 0			; -- pad where hardnum was
  2599 00000125 01                      dsktnum:	db 1			; number of diskette drives
  2600                                  
  2601                                  ; (MSDOS 3.3) NOTE:
  2602                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  2603                                  ; have to be made to read the diskette. Consequently a large head settle
  2604                                  ; time was always used in the I/O operations. To get around this problem
  2605                                  ; we need to continually adjust the head settle time. The following
  2606                                  ; algorithm is used:
  2607                                  ;
  2608                                  ;   Get the current head settle value.
  2609                                  ;   If it is 1, then
  2610                                  ;	set slow = 15
  2611                                  ;   else
  2612                                  ;	set slow = value
  2613                                  ;   ...
  2614                                  ;   if we are seeking and writing then
  2615                                  ;	use slow
  2616                                  ;   else
  2617                                  ;	use fast
  2618                                  ;   ...
  2619                                  ;   restore current head settle value
  2620                                  
  2621 00000126 00                      motorstartup:	db 0			; value from table
  2622 00000127 00                      settlecurrent:	db 0			; value from table
  2623 00000128 00                      settleslow:	db 0			; slow settle value
  2624 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  2625 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  2626 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  2627 0000012C 09                      eot:		db 9			
  2628 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  2629 00000131 00                      cursec:		db 0			; current sector
  2630 00000132 00                      curhd:		db 0			; current head
  2631 00000133 0000                    curtrk:		dw 0			; current track
  2632 00000135 0000                    spsav:		dw 0			; save the stack pointer
  2633 00000137 08                      formt_eot:	db 8			; eot used for format
  2634 00000138 00                      hdnum:		db 0			; head number
  2635 00000139 0000                    trknum:		dw 0			; track	being manipulated
  2636 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  2637                                  
  2638                                  ;-----------------------------------------------------------------------------
  2639                                  
  2640                                  ; disk errors returned from the IBM rom
  2641                                  
  2642 0000013C CC                      errin:		db 0CCh			; write fault (hard disk)
  2643 0000013D 80                      		db 80h			; write fault (hard disk)
  2644 0000013E 40                      		db 40h			; seek failed
  2645 0000013F 10                      		db 10h			; uncorrectable CRC or ECC error on read
  2646 00000140 08                      		db 8			; dma overrun
  2647 00000141 06                      		db 6			; disk changed (floppy)
  2648 00000142 04                      		db 4			; sector not found/read error
  2649 00000143 03                      		db 3			; disk write-protected
  2650                                  		; 02/10/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
  2651 00000144 01                      		db 1			; invalid function in AH or invalid parameter
  2652 00000145 B2                      		db 0B2h			; volume not removable	
  2653                                  		;
  2654 00000146 00                      lsterr:		db 0			; all other errors
  2655                                  
  2656                                  ; returned error codes corresponding to above
  2657                                  
  2658 00000147 0A                      errout:		db 10			; write	fault error
  2659 00000148 02                      		db 2			; no response (timeout)
  2660 00000149 06                      		db 6			; seek failure
  2661 0000014A 04                      		db 4			; bad crc
  2662 0000014B 04                      		db 4			; dma overrun
  2663 0000014C 0F                      		db 15			; invalid media	change
  2664 0000014D 08                      		db 8			; sector not found
  2665 0000014E 00                      		db 0			; write	attempt	to write-protect disk
  2666                                  		; 02/10/2023
  2667 0000014F 03                      		db 3			; unknown command error
  2668 00000150 03                      		db 3			; unknown command error
  2669                                  		;
  2670 00000151 0C                      		db 12			; general error
  2671                                  
  2672                                  ;-----------------------------------------------------------------------------
  2673                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0152h
  2674                                  
  2675                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  2676                                  %if 1
  2677                                  disksector:	;times 174 db 0
  2678                                  NUM174 equ 512-$
  2679 00000152 00<rep AEh>             		times NUM174 db 0
  2680                                  JB_sign	:	;dw 424Ah		; 'BJ' (nasm) ; 'JB' (masm)
  2681 00000200 4A                      		dec	dx
  2682 00000201 42                      		inc	dx	
  2683 00000202 E9FBFD                  		jmp	BData_start	; db 0E9h, 0FBh, 0FDh
  2684                                  
  2685 00000205 402349424D3A31322E-     IBMBIOCOM$:	db '@#IBM:12.01.2003.build_1.32#@ IBMBIO.COM(USA)',0
  2685 0000020E 30312E323030332E62-
  2685 00000217 75696C645F312E3332-
  2685 00000220 23402049424D42494F-
  2685 00000229 2E434F4D2855534129-
  2685 00000232 00                 
  2686                                  		
  2687                                  		;times 287 db 0
  2688 00000233 00<rep 11Fh>            		times (disksector+512-$) db 0  ; 287
  2689                                  %endif
  2690                                  
  2691                                  ;-----------------------------------------------------------------------------
  2692                                  
  2693                                  ; 30/12/2018 - Retro DOS v4.0
  2694                                  
  2695                                  ; read in boot sector here, read done in readboot.
  2696                                  ; also read sector for dma check for hard disk.
  2697                                  ;
  2698                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  2699                                  ; in them which causes the byte after the buffer to be trashed
  2700                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  2701                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  2702                                  ; makes that system more-or-less work.
  2703                                  
  2704                                  ; 02/10/2023
  2705                                  %if 0
  2706                                  
  2707                                  disksector:	;db 512 dup(0)		; read in boot sector here
  2708                                  		; 19/10/2022
  2709                                  		times 512 db 0
  2710                                  %endif
  2711                                  
  2712                                  ;-----------------------------------------------------------------------------
  2713                                  
  2714                                  ; 02/10/2023 - Retro DOS v5.0
  2715                                  ; 30/12/2018 - Retro DOS v4.0
  2716                                  ;-----------------------------------------------------------------------------
  2717                                  ; 25/05/2018 (04/04/2018)
  2718                                  ;*****************************************************************************
  2719                                  ;	"bds" contains information for each drive in the system.
  2720                                  ;	various values are patched whenever actions are performed.
  2721                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  2722                                  ;	the bpb has not been filled. link also set to -1 to signify end
  2723                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  2724                                  ;	that the parameters have not been set.
  2725                                  
  2726                                  bds1:		;dw offset bds2
  2727 00000352 [E803]                  		dw bds2	; 19/10/2022
  2728 00000354 7000                    		dw 70h			; dword	link to	next structure
  2729 00000356 00                      		db 0			; int 13h drive	number
  2730 00000357 00                      		db 0			; logical drive	letter
  2731 00000358 0002                    fdrive1:	dw 512			
  2732                                  					; physical sector size in bytes
  2733 0000035A FF                      		db 0FFh			; sectors/allocation unit
  2734 0000035B 0100                    		dw 1			; reserved sectors for dos
  2735 0000035D 02                      		db 2			; no of	file allocation	tables
  2736 0000035E 4000                    		dw 64			; number of root directory entries
  2737 00000360 6801                    		dw 360			; number sectors (at 512 bytes each)
  2738 00000362 00                      		db 0			; media	descriptor, initially 0
  2739 00000363 0200                    		dw 2			; number of fat	sectors
  2740 00000365 0900                    		dw 9			; sector limit (sectors	per track)
  2741 00000367 0100                    		dw 1			; head limit (number of	heads -	1)
  2742                                  		;
  2743                                  		; 02/10/2023
  2744                                  		; MSDOS 5.0-6.22 (& PCDOS 7.0)
  2745                                  		;dw 0			; hidden sector	count (low word)
  2746                                  		;dw 0			; hidden sector	(high)
  2747                                  		;dw 0			; number sectors (low)
  2748                                  		;dw 0			; number sectors (high)
  2749                                  		;db 0			; true => large	fats
  2750                                  		; 02/10/2023
  2751                                  		; PCDOS 7.1 (FAT32 support)
  2752 00000369 00000000                		dd 0			; hidden sector count
  2753 0000036D 00000000                		dd 0			; number of sectors (32 bit)
  2754 00000371 00000000                		dd 0			; BPB_FATSz32 ; FAT32 FAT size in sectors ; 4 bytes
  2755                                  					;   BS_DrvNum ; FAT INT 13h drive number ; 1 byte
  2756                                  					;   BS_Reserved1 ; FAT reserved byte = 0 ; 1 byte
  2757                                  					;   BS_BootSig ; FAT Extended boot signature = 29h ; 1 byte
  2758                                  					;   BS_VolID ; FAT Volume serial number ; 4 bytes
  2759 00000375 0000                    		dw 0			; BPB_ExtFlags ; FAT32 Extended Flags
  2760 00000377 0000                    		dw 0			; BPB_FSVer ; FAT32 fs/volume version
  2761 00000379 00000000                		dd 0			; BPB_RootClus ; FAT32 root directory's first cluster number
  2762 0000037D FFFF                    		dw 0FFFFh		; BPB_FSInfo ; FAT32 FSINFO sector number = -1 (initial)
  2763 0000037F FFFF                    		dw 0FFFFh		; BPB_BkBootSec ; FAT32 backup boot sector number = -1 (initial)
  2764 00000381 00<rep Ch>              		times 12 db 0		; BPB_Reserved  ; FAT32 reserved field = 0, 12 bytes
  2765 0000038D 00                      		db 0			; true => large	fats
  2766                                  		;
  2767 0000038E 0000                    		dw 0			; open ref. count
  2768 00000390 03                      		db 3			; form factor
  2769 00000391 2000                    		dw 20h			; various flags
  2770 00000393 2800                    		dw 40			; number of cylinders
  2771 00000395 0002                    recommended_bps: dw 512			; recommended bps for this drive
  2772 00000397 01                      		db 1
  2773 00000398 0100                    		dw 1
  2774 0000039A 02                      		db 2
  2775 0000039B E000                    		dw 224			; number of root directory entries
  2776 0000039D 6801                    		dw 360
  2777 0000039F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  2778 000003A0 0200                    		dw 2
  2779 000003A2 0900                    		dw 9
  2780 000003A4 0200                    		dw 2
  2781                                  		;
  2782                                  		; 02/10/2023
  2783                                  		;dw 0
  2784                                  		;dw 0
  2785                                  		;dw 0
  2786                                  		;dw 0
  2787                                  		;;db 6 dup(0)
  2788                                  		;times 6 db 0		; 19/10/2022
  2789 000003A6 00000000                		dd 0
  2790 000003AA 00000000                		dd 0
  2791 000003AE 00000000                		dd 0
  2792 000003B2 0000                    		dw 0
  2793 000003B4 0000                    		dw 0
  2794 000003B6 00000000                		dd 0
  2795 000003BA FFFF                    		dw 0FFFFh
  2796 000003BC FFFF                    		dw 0FFFFh	
  2797                                  		;db 12 dup(0)
  2798 000003BE 00<rep Ch>              		times 12 db 0		; 02/10/2023
  2799                                  		;
  2800 000003CA FF                      		db 0FFh			; last track accessed on this drive
  2801 000003CB FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  2802 000003CD FFFF                    		dw 0FFFFh
  2803 000003CF 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  2803 000003D8 202000             
  2804 000003DB 00000000                		dd 0			; current volume serial	from boot record
  2805 000003DF 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  2806                                  ; ----
  2807                                  
  2808                                  ; 02/10/2023
  2809                                  ; PCDOS 7.1
  2810                                  %if 1
  2811                                  
  2812                                  bds2:		; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  2813 000003E8 FFFF                    		dw 0FFFFh ; -1
  2814 000003EA 7000                    		dw 70h
  2815 000003EC 00                      		db 0
  2816 000003ED 00                      		db 0
  2817 000003EE 0002                    fdrive2:	dw 512
  2818 000003F0 FF                      		db 0FFh
  2819 000003F1 0100                    		dw 1
  2820 000003F3 02                      		db 2
  2821 000003F4 4000                    		dw 64
  2822 000003F6 6801                    		dw 360
  2823 000003F8 00                      		db 0
  2824 000003F9 0200                    		dw 2
  2825 000003FB 0900                    		dw 9
  2826 000003FD 0100                    		dw 1
  2827 000003FF 00000000<rep 5h>        		times 5 dd 0
  2828 00000413 FFFFFFFF                		dd 0FFFFFFFFh
  2829 00000417 00000000<rep 3h>        		times 3 dd 0
  2830 00000423 00                      		db 0
  2831 00000424 0000                    		dw 0
  2832 00000426 03                      		db 3
  2833 00000427 2000                    		dw 20h
  2834 00000429 2800                    		dw 40
  2835                                  recbpb2:
  2836 0000042B 0002                    		dw 512
  2837 0000042D 01                                      db 1
  2838 0000042E 0100                                    dw 1
  2839 00000430 02                                      db 2
  2840 00000431 E000                                    dw 224
  2841 00000433 6801                                    dw 360
  2842 00000435 F0                                      db 0F0h
  2843 00000436 0200                                    dw 2
  2844 00000438 0900                                    dw 9
  2845 0000043A 0200                                    dw 2
  2846 0000043C 00000000<rep 5h>        		times 5 dd 0
  2847 00000450 FFFFFFFF                		dd 0FFFFFFFFh
  2848 00000454 00000000<rep 3h>                        times 3 dd 0
  2849 00000460 FF                                      db 0FFh
  2850 00000461 FFFFFFFF                                dd 0FFFFFFFFh
  2851 00000465 4E4F204E414D452020-                     db 'NO NAME    ',0
  2851 0000046E 202000             
  2852 00000471 00000000                                dd 0
  2853 00000475 464154313220202000                      db 'FAT12   ',0
  2854                                  %endif
  2855                                  
  2856                                  ; ----
  2857                                  
  2858                                  ; 02/10/2023
  2859                                  ; MSDOS 5.0 - 6.22 (& PCDOS 7.0)
  2860                                  %if 0
  2861                                  
  2862                                  bds2:		dw bds3
  2863                                  		dw 70h
  2864                                  		db 0
  2865                                  		db 0
  2866                                  fdrive2:	dw 512			
  2867                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2868                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2869                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2870                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2871                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2872                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2873                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2874                                  
  2875                                  bds3:		dw bds4
  2876                                  		dw 70h
  2877                                  		db 0
  2878                                  		db 0
  2879                                  fdrive3:	dw 512			
  2880                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2881                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2882                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2883                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2884                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2885                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2886                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2887                                  ; ----
  2888                                  
  2889                                  bds4:		dw 0FFFFh
  2890                                  		dw 70h
  2891                                  		db 0
  2892                                  		db 0
  2893                                  fdrive4:	dw 512			
  2894                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2895                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2896                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2897                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2898                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2899                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2900                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2901                                  
  2902                                  ;-----------------------------------------------------------------------------
  2903                                  
  2904                                  sm92:		db 3			; .spf
  2905                                  		db 9			; .spt
  2906                                  		db 112	; 70h		; .cdire
  2907                                  		dw 1440	; 2*9*80	; .csec
  2908                                  		db 2			; .spau
  2909                                  		db 2			; .chead
  2910                                  
  2911                                  %endif
  2912                                  
  2913 0000047E 00                      keyrd_func:	db 0			
  2914 0000047F 01                      keysts_func:	db 1			
  2915 00000480 00                      printdev:	db 0			; printer device index
  2916                                  
  2917                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  2918 00000481 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  2919                                  
  2920 00000489 0000                    daycnt:		dw 0			
  2921 0000048B 00                      t_switch:	db 0			; flag for updating daycnt
  2922 0000048C 00                      havecmosclock:	db 0			
  2923 0000048D 13                      base_century:	db 19			
  2924 0000048E 50                      base_year:	db 80			
  2925                                  
  2926 0000048F 1F                      month_tab:	db 31
  2927 00000490 1C                      february:	db 28 ; 08/08/2023
  2928 00000491 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  2928 0000049A 1F                 
  2929                                  
  2930                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2931                                  %if 0  
  2932                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  2933                                  		dw 70h ; 17/10/2022	
  2934                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  2935                                  		dw 70h ; 17/10/2022
  2936                                  %endif
  2937                                  
  2938 0000049B 00                      set_id_flag:	db 0			; flag for getbp routine
  2939                                  
  2940                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2941                                  ;fat_12_id:	db 'FAT12   ',0         
  2942                                  ;fat_16_id:	db 'FAT16   ',0         
  2943                                  ;vol_no_name:	db 'NO NAME    ',0      
  2944                                  ;temp_h:	dw 0			; temporary for	32 bit calculation
  2945                                  
  2946 0000049C 0000                    start_sec_h:	dw 0			; starting sector number high word
  2947 0000049E 0000                    saved_word:	dw 0			; tempory saving place for a word
  2948 000004A0 0000                    multrk_flag:	dw 0			
  2949 000004A2 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  2950 000004A3 0000                    vretry_cnt:	dw 0			
  2951 000004A5 0000                    soft_ecc_cnt:	dw 0			
  2952 000004A7 00                      multitrk_format_flag: db 0		; multi	track format request flag
  2953 000004A8 0000                    xfer_seg:	dw 0			; temp for transfer segment
  2954                                  
  2955                                  ; variables for msdioctl.asm module
  2956                                  
  2957                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  2958                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  2959                                  ;	n	bytes per sector
  2960                                  ;      ---	----------------
  2961                                  ;	0	      128
  2962                                  ;	1	      256
  2963                                  ;	2	      512
  2964                                  ;	3	     1024
  2965                                  
  2966                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  2967                                  ;					; we support (was 40 in dos 3.2)
  2968                                  
  2969 000004AA 2400                    sectorspertrack: dw 36
  2970 000004AC 00000102                tracktable:	db 0, 0, 1, 2
  2971 000004B0 00000202                		db 0, 0, 2, 2
  2972 000004B4 00000302                		db 0, 0, 3, 2
  2973 000004B8 00000402                		db 0, 0, 4, 2
  2974 000004BC 00000502                		db 0, 0, 5, 2
  2975 000004C0 00000602                		db 0, 0, 6, 2
  2976 000004C4 00000702                		db 0, 0, 7, 2
  2977 000004C8 00000802                		db 0, 0, 8, 2
  2978 000004CC 00000902                		db 0, 0, 9, 2
  2979 000004D0 00000A02                		db 0, 0, 10, 2
  2980 000004D4 00000B02                		db 0, 0, 11, 2
  2981 000004D8 00000C02                		db 0, 0, 12, 2
  2982 000004DC 00000D02                		db 0, 0, 13, 2
  2983 000004E0 00000E02                		db 0, 0, 14, 2
  2984 000004E4 00000F02                		db 0, 0, 15, 2
  2985 000004E8 00001002                		db 0, 0, 16, 2
  2986 000004EC 00001102                		db 0, 0, 17, 2
  2987 000004F0 00001202                		db 0, 0, 18, 2
  2988 000004F4 00001302                		db 0, 0, 19, 2
  2989 000004F8 00001402                		db 0, 0, 20, 2
  2990 000004FC 00001502                		db 0, 0, 21, 2
  2991 00000500 00001602                		db 0, 0, 22, 2
  2992 00000504 00001702                		db 0, 0, 23, 2
  2993 00000508 00001802                		db 0, 0, 24, 2
  2994 0000050C 00001902                		db 0, 0, 25, 2
  2995 00000510 00001A02                		db 0, 0, 26, 2
  2996 00000514 00001B02                		db 0, 0, 27, 2
  2997 00000518 00001C02                		db 0, 0, 28, 2
  2998 0000051C 00001D02                		db 0, 0, 29, 2
  2999 00000520 00001E02                		db 0, 0, 30, 2
  3000 00000524 00001F02                		db 0, 0, 31, 2
  3001 00000528 00002002                		db 0, 0, 32, 2
  3002 0000052C 00002102                		db 0, 0, 33, 2
  3003 00000530 00002202                		db 0, 0, 34, 2
  3004 00000534 00002302                		db 0, 0, 35, 2
  3005 00000538 00002402                		db 0, 0, 36, 2
  3006                                  
  3007                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3008                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:053Ch
  3009                                  
  3010                                  		;times 108 db 0		; 19/10/2022
  3011                                  		;;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  3012                                  					; times	((4*63)	- 144) db 0
  3013                                  dskdrvs:	
  3014 0000053C [5803]                  		dw fdrive1
  3015 0000053E [EE03]                  		dw fdrive2 
  3016                                  	
  3017                                  		;dw 52 dup(0)
  3018 00000540 00<rep 68h>             		times 104 db 0		; times (((4*63)-144)-4) db 0
  3019                                  					; 4*max_sectors_curr_sup-($-tracktable)-4 dup (0)			
  3020                                  
  3021                                  ;-----------------------------------------------------------------------------
  3022                                  
  3023                                  ; this is a real ugly place to put this
  3024                                  ; it should really go in the bds
  3025                                  
  3026 000005A8 00                      mediatype:	db 0
  3027 000005A9 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  3028                                  					; type for format call
  3029 000005AA 00                      had_format_error: db 0			; 1 if the previous format operation
  3030                                  					; failed.
  3031                                  
  3032                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  3033                                  ; the one passed by "new roms" before we perform a format operation. the old
  3034                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  3035                                  ; this table does not contain the previously saved dpt.
  3036                                  		
  3037 000005AB FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  3038 000005AF FF                      model_byte:	db 0FFh			; model	byte set at init time
  3039 000005B0 00                      secondary_model_byte: db 0
  3040                                  		
  3041 000005B1 00                      int19sem:	db 0			; indicate that all int 19h
  3042                                  					; initialization is complete
  3043                                  		
  3044                                  ;; we assume the following remain contiguous and their order doesn't change
  3045                                  ;i19_lst:
  3046                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  3047                                  ;	public	int19old&aa
  3048                                  ;		db	aa&h	; store the number as a byte
  3049                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  3050                                  ;	endm
  3051                                  
  3052                                  ; 21/10/2022
  3053                                  
  3054 000005B2 02                      i19_lst:	db 2
  3055                                  					; Int19old&aa
  3056 000005B3 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  3057 000005B7 08                      		db 8
  3058 000005B8 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  3059 000005BC 09                      		db 9
  3060 000005BD FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  3061 000005C1 0A                      		db 0Ah
  3062 000005C2 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  3063 000005C6 0B                      		db 0Bh
  3064 000005C7 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  3065 000005CB 0C                      		db 0Ch
  3066 000005CC FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  3067 000005D0 0D                      		db 0Dh
  3068 000005D1 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  3069 000005D5 0E                      		db 0Eh
  3070 000005D6 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  3071 000005DA 70                      		db 70h
  3072 000005DB FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  3073 000005DF 72                      		db 72h
  3074 000005E0 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  3075 000005E4 73                      		db 73h
  3076 000005E5 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  3077 000005E9 74                      		db 74h
  3078 000005EA FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  3079 000005EE 76                      		db 76h
  3080 000005EF FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  3081 000005F3 77                      		db 77h
  3082 000005F4 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  3083                                  
  3084                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  3085                                  
  3086                                  ;-----------------------------------------------------------------------------
  3087                                  
  3088                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3089                                  ; 
  3090                                  ;dskdrvs:	dw fdrive1
  3091                                  ;		dw fdrive2
  3092                                  ;		dw fdrive3
  3093                                  ;		dw fdrive4
  3094                                  ;
  3095                                  ;;M011 -- made all hard drive stuff variable
  3096                                  ;		;dw 22 dup(0)		; up to	26 drives for mini disks
  3097                                  ;		times 22 dw 0	; 19/10/2022
  3098                                  
  3099                                  ;-----------------------------------------------------------------------------
  3100                                  
  3101                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  3102                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  3103                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  3104                                  
  3105                                  ;variables for dynamic relocatable modules
  3106                                  ;these should be stay resident.
  3107                                  
  3108 000005F8 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  3109                                  					; for p12 machine
  3110                                  
  3111                                  ; data structures for real-time date and time
  3112                                  			
  3113 000005FC 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  3114                                  
  3115                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3116                                  %if 0
  3117                                  month_table:	dw 0			; january
  3118                                  		dw 31			; february
  3119                                  		dw 59
  3120                                  		dw 90
  3121                                  		dw 120
  3122                                  		dw 151
  3123                                  		dw 181
  3124                                  		dw 212
  3125                                  		dw 243
  3126                                  		dw 273
  3127                                  		dw 304
  3128                                  		dw 334			; december
  3129                                  %endif
  3130                                  
  3131 00000600 0000                    daycnt2:	dw 0
  3132                                  ; 08/08/2023
  3133                                  ;feb29:		db 0			; february 29 in a leap	year flag
  3134                                  
  3135                                  ;-----------------------------------------------------------------------------
  3136                                  ;
  3137                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  3138                                  ; by Erdogan Tan (Istanbul) ! free source code !
  3139                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  3140                                  
  3141                                  ; ----------------------------------------------------------------------------
  3142                                  
  3143                                  ;************************************************************************
  3144                                  ;*									*
  3145                                  ;*	Entry points into Bios_Code routines. The segment values	*
  3146                                  ;*	  are plugged in by seg_reinit.					*
  3147                                  ;*									*
  3148                                  ;************************************************************************
  3149                                  
  3150                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  3151                                  ; BIOSCODE_SEGMENT equ 2C7h
  3152                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  3153                                  
  3154                                  ; 01/10/2022 - Erdogan Tan
  3155                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  3156                                  ;  addresses, they will be changed to table labels later)
  3157                                  
  3158                                  ; 09/12/2022
  3159                                  %if 0
  3160                                  cdev:		dw 43h,	2C7h		; chardev_entry
  3161                                  					; at 2C7h:43h =	70h:25B3h
  3162                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  3163                                  					; at 2C7h:396h = 70h:2906h
  3164                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  3165                                  					; at 2C7h:1302h	= 70h:3872h
  3166                                  i13x:		dw 154Bh, 2C7h		; i13z
  3167                                  					; at 2C7h:154Bh	= 70h:3ABBh
  3168                                  %endif
  3169                                  
  3170                                  ; 30/12/2022
  3171                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  3172                                  
  3173                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3174                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0602h
  3175                                  ; (IOSYSCODESEG is 364h for PCDOS 7.1 IBMBIO.COM)
  3176                                  
  3177                                  ; 09/12/2022
  3178 00000602 [4700]2D03              cdev:		dw chardev_entry, IOSYSCODESEG
  3179 00000606 [A003]2D03              ttticks:	dw time_to_ticks, IOSYSCODESEG
  3180                                  ; 07/08/2023
  3181                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  3182 0000060A [5718]2D03              i13x:		dw i13z, IOSYSCODESEG
  3183                                  
  3184                                  end_BC_entries:	; 15/10/2022
  3185                                  
  3186                                  ;************************************************************************
  3187                                  ;*									*
  3188                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  3189                                  ;*									*
  3190                                  ;************************************************************************
  3191                                  
  3192                                  cbreak:					
  3193 0000060E 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  3194                                  					; indicate break key set
  3195                                  intret:					
  3196 00000614 CF                      		iret
  3197                                  
  3198                                  ; =============== S U B	R O U T	I N E ========================================
  3199                                  
  3200                                  
  3201                                  ;************************************************************************
  3202                                  ;*									*
  3203                                  ;*	strategy - store es:bx (device driver request packet)		*
  3204                                  ;*		     away at [ptrsav] for next driver function call	*
  3205                                  ;*									*
  3206                                  ;************************************************************************
  3207                                  
  3208                                  strategy:	; proc far		
  3209 00000615 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  3210                                  					; away at [ptrsav] for next driver function call
  3211 0000061A 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  3212 0000061F CB                      		retf
  3213                                  
  3214                                  ; ----------------------------------------------------------------------------
  3215                                  
  3216                                  ;************************************************************************
  3217                                  ;*									*
  3218                                  ;*	device driver entry points. these are the initial		*
  3219                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  3220                                  ;*	  in the case of our resident drivers, they'll just		*
  3221                                  ;*	  stick a fake return address on the stack which		*
  3222                                  ;*	  points to dispatch tables and possibly some unit		*
  3223                                  ;*	  numbers, and then call through a common entry point		*
  3224                                  ;*	  which can take care of a20 switching				*
  3225                                  ;*									*
  3226                                  ;************************************************************************
  3227                                  
  3228                                  ; 01/10/2022 - Erdogan Tan
  3229                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  3230                                  ;  addresses, they will be changed to table labels later)
  3231                                  
  3232                                  ; 09/12/2022
  3233                                  
  3234                                  ; 02/10/2023 - Retro DOS v5.0
  3235                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:0620h, BIOSCODE = 0364h)
  3236                                  
  3237                                  con_entry:				
  3238 00000620 E84000                  		call	cdev_entry
  3239                                  ; ----------------------------------------------------------------------------
  3240                                  		;dw 0E4h		; con_table
  3241 00000623 [E400]                  		dw con_table		; 364h:0E4h (PCDOS 7.1)
  3242                                  					; 2C7h:0E4h = 70h:2654h
  3243                                  ; ----------------------------------------------------------------------------
  3244                                  
  3245                                  prn0_entry:				
  3246 00000625 E83B00                  		call	cdev_entry
  3247                                  ; ----------------------------------------------------------------------------
  3248                                  		;dw 0FBh		; prn_table
  3249 00000628 [FB00]                  		dw prn_table
  3250                                  					; 2C7h:0FBh = 70h:266Bh
  3251 0000062A 0000                    		db 0, 0
  3252                                  ; ----------------------------------------------------------------------------
  3253                                  
  3254                                  prn1_entry:				
  3255 0000062C E83400                  		call	cdev_entry
  3256                                  ; ----------------------------------------------------------------------------
  3257                                  		;dw 0FBh		; prn_table
  3258 0000062F [FB00]                  		dw prn_table
  3259                                  					; 2C7h:0FBh = 70h:266Bh
  3260 00000631 0001                    		db 0, 1
  3261                                  ; ----------------------------------------------------------------------------
  3262                                  
  3263                                  prn2_entry:				
  3264 00000633 E82D00                  		call	cdev_entry
  3265                                  ; ----------------------------------------------------------------------------
  3266                                  		;dw 0FBh		; prn_table
  3267 00000636 [FB00]                  		dw prn_table
  3268                                  					; 2C7h:0FBh = 70h:266Bh
  3269 00000638 0102                    		db 1, 2
  3270                                  ; ----------------------------------------------------------------------------
  3271                                  
  3272                                  prn3_entry:				
  3273 0000063A E82600                  		call	cdev_entry
  3274                                  ; ----------------------------------------------------------------------------
  3275                                  		;dw 0FBh		; prn_table
  3276 0000063D [FB00]                  		dw prn_table
  3277                                  					; 2C7h:0FBh = 70h:266Bh
  3278 0000063F 0203                    		db 2, 3
  3279                                  ; ----------------------------------------------------------------------------
  3280                                  
  3281                                  aux0_entry:				
  3282 00000641 E81F00                  		call	cdev_entry
  3283                                  ; ----------------------------------------------------------------------------
  3284                                  		;dw 130h		; aux_table
  3285 00000644 [3001]                  		dw aux_table
  3286                                  					; 2C7h:130h = 70h:26A0h
  3287 00000646 00                      		db 0
  3288                                  ; ----------------------------------------------------------------------------
  3289                                  
  3290                                  aux1_entry:				
  3291 00000647 E81900                  		call	cdev_entry
  3292                                  ; ----------------------------------------------------------------------------
  3293                                  		;dw 130h		; aux_table
  3294 0000064A [3001]                  		dw aux_table		; 364h:130h = 70h:3070h (PCDOS 7.1)
  3295                                  					; 2C7h:130h = 70h:26A0h
  3296 0000064C 01                      		db 1
  3297                                  ; ----------------------------------------------------------------------------
  3298                                  
  3299                                  aux2_entry:				
  3300 0000064D E81300                  		call	cdev_entry
  3301                                  ; ----------------------------------------------------------------------------
  3302                                  		;dw 130h		; aux_table
  3303 00000650 [3001]                  		dw aux_table
  3304                                  					; 2C7h:130h = 70h:26A0h
  3305 00000652 02                      		db 2
  3306                                  ; ----------------------------------------------------------------------------
  3307                                  
  3308                                  aux3_entry:				
  3309 00000653 E80D00                  		call	cdev_entry
  3310                                  ; ----------------------------------------------------------------------------
  3311                                  		;dw 130h		; aux_table
  3312 00000656 [3001]                  		dw aux_table
  3313                                  					; 2C7h:130h = 70h:26A0h
  3314 00000658 03                      		db 3
  3315                                  ; ----------------------------------------------------------------------------
  3316                                  
  3317                                  tim_entry:				
  3318 00000659 E80700                  		call	cdev_entry
  3319                                  ; ----------------------------------------------------------------------------
  3320                                  		;dw 147h		; tim_table
  3321 0000065C [4701]                  		dw tim_table		; 364h:147h = 70h:3087h (PCDOS 7.1)
  3322                                  					; 2C7h:147h = 70h:26B7h
  3323                                  ; ----------------------------------------------------------------------------
  3324                                  
  3325                                  ; 15/10/2022
  3326                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  3327                                  ; 09/12/2022
  3328                                  DSKTBL equ dsktbl
  3329                                  
  3330                                  dsk_entry:				
  3331 0000065E E80200                  		call	cdev_entry
  3332                                  ; ----------------------------------------------------------------------------
  3333                                  		;dw 4A2h		; dsktbl
  3334 00000661 [6F05]                  		dw DSKTBL		; 09/12/2022
  3335                                  					; 2C7h:4A2h = 70h:2A12h
  3336                                  					; 02/10/2023 (PCDOS 7.1 IBMBIO.COM)
  3337                                  					; 364h:579h = 70h:34B9h
  3338                                  
  3339                                  ; =============== S U B	R O U T	I N E ========================================
  3340                                  
  3341                                  ;************************************************************************
  3342                                  ;*									*
  3343                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  3344                                  ;*	This code assumes that if Segment of Device request packet is	*
  3345                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  3346                                  ;*	A20 is already on.						*
  3347                                  ;*									*
  3348                                  ;************************************************************************
  3349                                  
  3350                                  cdev_entry:	; proc near		
  3351 00000663 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  3352 00000669 740D                    		jz	short ce_enter_codeseg
  3353                                  				; optimized for DOS in HMA
  3354 0000066B 50                      		push	ax
  3355 0000066C 2EA1[0300]              		mov	ax,[cs:DosDataSg]
  3356 00000670 2E3906[1400]            		cmp	[cs:ptrsav+2],ax
  3357 00000675 58                      		pop	ax
  3358 00000676 7505                    		jnz	short not_from_dos
  3359                                  				; jump is coded this way to fall thru
  3360                                  				; in 99.99% of the cases
  3361                                  ce_enter_codeseg:
  3362 00000678 2EFF2E[0206]            		jmp	far [cs:cdev]			
  3363                                  		;jmp	dword ptr cs:cdev
  3364                                  ;-----------------------------------------------------------------------------
  3365                                  
  3366                                  not_from_dos:				
  3367 0000067D E8AA00                  		call	EnsureA20On
  3368 00000680 EBF6                    		jmp	short ce_enter_codeseg
  3369                                  
  3370                                  ;************************************************************************
  3371                                  ;*									*
  3372                                  ;*	outchr - this is our int 29h handler. it writes the		*
  3373                                  ;*	   character in al on the display using int 10h ttywrite	*
  3374                                  ;*									*
  3375                                  ;************************************************************************
  3376                                  
  3377                                  	; 02/10/2023
  3378                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0682h
  3379                                  outchr:					
  3380 00000682 50                      		push	ax		; int 29h handler
  3381 00000683 56                      		push	si
  3382 00000684 57                      		push	di
  3383 00000685 55                      		push	bp
  3384 00000686 53                      		push	bx
  3385                                  		;;;
  3386                                  		; 02/10/2023 - Retro DOS v5.0 (Modified POCDOS 7.1) 
  3387                                  		;mov	ah,0Eh
  3388                                  		;mov	bx,7
  3389                                  		;int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  3390                                  		;		; AL = character, BH = display page (alpha modes)
  3391                                  		;		; BL = foreground color	(graphics modes)
  3392                                  		; 02/10/2023
  3393                                  		;push	ds ; *
  3394 00000687 31DB                    		xor	bx,bx ; 0
  3395 00000689 2E381E[1208]            		cmp	[cs:IsWin386], bl ; (are we in) Windows ?
  3396 0000068E 7510                    		jnz	short win_outchr ; *
  3397 00000690 1E                      		push	ds ; *
  3398 00000691 8EDB                    		mov	ds,bx ; 0
  3399 00000693 B40E                    		mov	ah,0Eh
  3400 00000695 B307                    		mov	bl,7
  3401                                  		;jnz	short win_outchr ; Running on Windows
  3402 00000697 9C                      		pushf			; far call (simulate INT)	
  3403 00000698 FA                      		cli	; disable interrupts
  3404 00000699 FF1E4000                		call	far [40h]	; far call to INT 10h vector
  3405 0000069D 1F                      		pop	ds ; *
  3406 0000069E EB02                    		jmp	short outchr_ok
  3407                                  win_outchr:
  3408 000006A0 CD10                    		int	10h
  3409                                  outchr_ok:
  3410                                  		;pop	ds ; *
  3411                                  		;;;
  3412 000006A2 5B                      		pop	bx
  3413 000006A3 5D                      		pop	bp
  3414 000006A4 5F                      		pop	di
  3415 000006A5 5E                      		pop	si
  3416 000006A6 58                      		pop	ax
  3417 000006A7 CF                      		iret
  3418                                  
  3419                                  ;-----------------------------------------------------------------------------
  3420                                  
  3421                                  	; 02/10/2023 - Retro DOS v5.0
  3422                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06A8h
  3423                                  
  3424 000006A8 50                      		db 50h ; P		; 'PCI' signature
  3425 000006A9 43                      		db 43h ; C
  3426 000006AA 49                      		db 49h ; I
  3427                                  
  3428 000006AB 00000000                Orig1A:		dd 0
  3429                                  
  3430                                  ; =============== S U B R O U T I N E =======================================
  3431                                  
  3432                                  	; 02/10/2023 - Retro DOS v5.0
  3433                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06AFh
  3434                                  
  3435                                  Int1A:
  3436 000006AF 80FC04                  		cmp	ah,4		; (Y2K-fix)
  3437 000006B2 7405                    		je	short int1a_1	; Read the date from the computer's real-time clock
  3438 000006B4 2EFF2E[AB06]            		jmp	far [cs:Orig1A]
  3439                                  int1a_1:
  3440 000006B9 55                      		push	bp
  3441                                  int1a_2:
  3442 000006BA 89E5                    		mov	bp,sp
  3443 000006BC 55                      		push	bp
  3444 000006BD 9C                      		pushf
  3445 000006BE 2EFF1E[AB06]            		call	far [cs:Orig1A]
  3446 000006C3 7220                    		jc	short int1a_4
  3447                                  
  3448                                  		;cmp	cl,0		; Year (BCD)
  3449                                  		; 02/10/2023
  3450 000006C5 08C9                    		or	cl,cl
  3451 000006C7 7515                    		jnz	short int1a_3
  3452 000006C9 80FD19                  		cmp	ch,19h		; Century (BCD)
  3453 000006CC 7510                    		jne	short int1a_3
  3454 000006CE B520                    		mov	ch,20h
  3455 000006D0 B405                    		mov	ah,5		; Set the date on the computer's real-time clock
  3456 000006D2 51                        		push	cx
  3457 000006D3 52                      		push	dx		; dh = Month (BCD), dl = Day (BCD)
  3458 000006D4 9C                      		pushf
  3459 000006D5 2EFF1E[AB06]            		call	far [cs:Orig1A]
  3460 000006DA 5A                      		pop	dx
  3461 000006DB 59                      		pop	cx
  3462 000006DC 7207                    		jc	short int1a_4
  3463                                  int1a_3:
  3464 000006DE 5D                      		pop	bp
  3465 000006DF 806606FE                		and	byte [bp+6],0FEh ; clear carry flag
  3466 000006E3 EB05                                    jmp	short int1a_5
  3467                                  int1a_4:
  3468 000006E5 5D                      		pop	bp
  3469 000006E6 804E0601                		or	byte [bp+6],1	; set carry flag
  3470                                  int1a_5:
  3471 000006EA 5D                      		pop	bp
  3472 000006EB CF                      		iret
  3473                                  
  3474                                  		; 02/10/2023
  3475 000006EC 90                      		nop	; (not necessary, i have used this 'nop' to locate 'block13:'
  3476                                  			; at BIOSDATA:06EDh, just as in the original PCDOS 7.1 IBMBIO.COM)
  3477                                  	
  3478                                  ;-----------------------------------------------------------------------------
  3479                                  
  3480                                  ;************************************************************************
  3481                                  ;*									*
  3482                                  ;*	block13 - our int13 hooker					*
  3483                                  ;*									*
  3484                                  ;************************************************************************
  3485                                  
  3486                                  	; 02/10/2023 - Retro DOS v5.0
  3487                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06EDh
  3488                                  
  3489                                  block13:				
  3490 000006ED 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  3491 000006F3 7403                    		jz	short skipa20
  3492                                  		
  3493                                  		;call	IsA20Off	; A20 Off?
  3494                                  		;jnz	short skipa20
  3495                                  		;call	EnableA20	; assure a20 enabled
  3496                                  		; 02/10/2023 -  Retro DOS v5.0 (Modified PCDOS 7.1)
  3497 000006F5 E83200                  		call	EnsureA20On	; assure a20 enabled
  3498                                  skipa20:				
  3499 000006F8 2E8C1E[1C00]            		mov	[cs:i13_ds],ds	; save caller's ds for call-through
  3500 000006FD 9C                      		pushf			; fake interrupt
  3501 000006FE 2EFF1E[0A06]            		call	far [cs:i13x]
  3502                                  		;call	dword ptr cs:i13x
  3503                                  					; call through Bios_Code entry table
  3504 00000703 2E8E1E[1C00]            		mov	ds,[cs:i13_ds]
  3505 00000708 CA0200                  		retf	2
  3506                                  
  3507                                  ; =============== S U B	R O U T	I N E =======================================
  3508                                  
  3509                                  ; the int13 hook calls back here to call-through to the ROM
  3510                                  ; this is necessary because some people have extended their
  3511                                  ; ROM BIOSs to use ds as a parameter/result register and
  3512                                  ; our int13 hook relies heavily on ds to access Bios_Data
  3513                                  
  3514                                  call_orig13:	; proc far		
  3515 0000070B 8E1E[1C00]              		mov	ds,[i13_ds]	; get caller's ds register
  3516 0000070F 9C                      		pushf			; simulate an int13
  3517 00000710 2EFF1E[B400]            		call	far [cs:Orig13]
  3518                                  		;call	cs:Orig13
  3519 00000715 2E8C1E[1C00]            		mov	[cs:i13_ds],ds
  3520 0000071A 0E                      		push	cs
  3521 0000071B 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  3522                                  
  3523 0000071C 9C                      		pushf
  3524                                  		; 10/12/2022
  3525                                  		; ds = cs
  3526 0000071D 803E[0D00]00            		cmp	byte [inHMA],0	; 16/10/2022
  3527                                  		;cmp	byte [cs:inHMA],0
  3528 00000722 7403                    		jz	short corig13_popf_retf
  3529                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3530                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  3531                                  		;call	IsA20Off
  3532                                  		;jnz	short corig13_popf_retf
  3533                                  		;call	EnableA20
  3534 00000724 E80300                  		call	EnsureA20On ; 07/08/2023
  3535                                  corig13_popf_retf:	
  3536 00000727 9D                      		popf
  3537                                  		; 20/09/2023
  3538                                  re_init:	; 07/08/2023
  3539 00000728 CB                      		retf
  3540                                  
  3541                                  		; 02/10/2023
  3542 00000729 90                      		nop	; (not necessary, i have used this 'nop' to locate 'EnsureA20On:'
  3543                                  			; at BIOSDATA:072Ah, just as in the original PCDOS 7.1 IBMBIO.COM)
  3544                                  
  3545                                  ;-----------------------------------------------------------------------------
  3546                                  
  3547                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  3548                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  3549                                  
  3550                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3551                                  ;HiMem:		dd 0FFFF0090h		
  3552                                  ;LoMem:		dd 80h
  3553                                  
  3554                                  ; ----------------------------------------------------------------------------			
  3555                                  
  3556                                  ; =============== S U B	R O U T	I N E ========================================
  3557                                  
  3558                                  
  3559                                  ;************************************************************************
  3560                                  ;*									*
  3561                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  3562                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  3563                                  ;*									*
  3564                                  ;************************************************************************
  3565                                  
  3566                                  EnsureA20On:	; proc near
  3567 0000072A E80E00                  		call	IsA20Off
  3568                                  		;jz	short EnableA20
  3569                                  		;retn
  3570                                  		; 18/12/2022
  3571 0000072D 750B                    		jnz	short A20On_retn
  3572                                  
  3573                                  ; =============== S U B	R O U T	I N E ========================================
  3574                                  
  3575                                  
  3576                                  EnableA20:	; proc near
  3577 0000072F 50                      		push	ax
  3578 00000730 53                      		push	bx
  3579 00000731 B405                    		mov	ah,5	 ; local enable a20
  3580                                  		;call	cs:xms
  3581 00000733 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  3582 00000738 5B                      		pop	bx
  3583 00000739 58                      		pop	ax
  3584                                  A20On_retn:	; 18/12/2022
  3585 0000073A C3                      		retn
  3586                                  
  3587                                  ; =============== S U B	R O U T	I N E ========================================
  3588                                  
  3589                                  
  3590                                  IsA20Off:	; proc near
  3591 0000073B 1E                      		push	ds
  3592 0000073C 06                      		push	es
  3593 0000073D 51                      		push	cx
  3594 0000073E 56                      		push	si
  3595 0000073F 57                      		push	di
  3596                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3597                                  		;lds	si,[cs:HiMem]
  3598                                  		;les	di,[cs:LoMem]
  3599                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  3600 00000740 31FF                    		xor	di,di
  3601 00000742 8EC7                    		mov	es,di
  3602 00000744 4F                      		dec	di
  3603 00000745 BE9000                  		mov	si,90h	; 0FFFFh:0090h ; HiMem
  3604 00000748 8EDF                    		mov	ds,di
  3605 0000074A BF8000                  		mov	di,80h	; 0000h:0080h ; LoMem
  3606                                  		; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  3607                                  		; (following cpu instructions will be modified by 'SYSIN'
  3608                                  		; if the cpu is a 386/32bit, for checking A20 line faster) 
  3609                                  cpu386_cmpsd:
  3610 0000074D 90                      		nop
  3611 0000074E B90800                  		mov	cx,8
  3612 00000751 F3A7                    		repe cmpsw
  3613                                  				; zf = 0 -> A20 line is ON
  3614                                  				; zf = 1 -> A20 line is OFF
  3615 00000753 5F                      		pop	di
  3616 00000754 5E                      		pop	si
  3617 00000755 59                      		pop	cx
  3618 00000756 07                      		pop	es
  3619 00000757 1F                      		pop	ds
  3620 00000758 C3                      		retn
  3621                                  
  3622                                  ; ----------------------------------------------------------------------------
  3623                                  
  3624                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3625                                  %if 0
  3626                                  DisableA20:
  3627                                  		push	ax
  3628                                  		push	bx
  3629                                  		mov	ah,6		; local disable A20
  3630                                  		call	far [cs:xms]
  3631                                  		;call	cs:xms
  3632                                  		pop	bx
  3633                                  		pop	ax
  3634                                  		retn
  3635                                  %endif
  3636                                  
  3637                                  ; ----------------------------------------------------------------------------
  3638                                  
  3639                                  ;************************************************************************
  3640                                  ;*									*
  3641                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  3642                                  ;*	  interrupt vectors before resuming the original int19 code	*
  3643                                  ;*									*
  3644                                  ;************************************************************************
  3645                                  
  3646                                  		; 02/10/2023 - Retro DOS v5.0
  3647                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0759h
  3648                                  int19:
  3649 00000759 0E                      		push	cs
  3650 0000075A 1F                      		pop	ds
  3651                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3652                                  		;mov	es,[zeroseg]	; 16/10/2022
  3653                                  		;mov	cx,5		; NUMROMVECTORS
  3654 0000075B 31C9                    		xor	cx,cx
  3655 0000075D 8EC1                    		mov	es,cx
  3656 0000075F B105                    		mov	cl,5
  3657                                  		;mov	si,offset RomVectors
  3658 00000761 BE[0001]                		mov	si,RomVectors	; 19/10/2022
  3659                                  next_int:
  3660 00000764 AC                      		lodsb			; get int number
  3661 00000765 98                      		cbw			; assume < 128
  3662 00000766 D1E0                    		shl	ax,1
  3663 00000768 D1E0                    		shl	ax,1		; int *	4
  3664                                  		; 07/08/2023
  3665                                  		;mov	di,ax
  3666                                  		;lodsw
  3667                                  		;stosw
  3668                                  		;lodsw
  3669                                  		;stosw			; install the saved vector
  3670                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  3671 0000076A 97                      		xchg	ax,di
  3672 0000076B A5                      		movsw
  3673 0000076C A5                      		movsw
  3674 0000076D E2F5                    		loop	next_int
  3675                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  3676 0000076F 380E[B105]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  3677 00000773 7419                    		jz	short doint19
  3678 00000775 BE[B205]                		mov	si,i19_lst	; stacks code has changed these hardware interrupt vectors
  3679                                  					; stkinit in sysinit1 will initialize int19oldxx values
  3680                                  		;mov	cx,14		; num_i19
  3681                                  		; 07/08/2023
  3682 00000778 B10E                    		mov	cl,14
  3683                                  i19_restore_loop:
  3684 0000077A AC                      		lodsb			; get interrupt	number
  3685 0000077B 98                      		cbw			; assume < 128
  3686                                  		;mov	di,ax
  3687                                  		;lodsw			; get original vector offset
  3688                                  		;mov	bx,ax		; save it
  3689                                  		;lodsw
  3690                                  		; 07/08/2023
  3691 0000077C 97                      		xchg	ax,di
  3692 0000077D AD                      		lodsw
  3693 0000077E 93                      		xchg	ax,bx
  3694 0000077F AD                      		lodsw
  3695                                  		;cmp	bx,0FFFFh	; check	for 0ffffh (unlikely segment)
  3696 00000780 43                      		inc	bx ; 07/08/2023
  3697 00000781 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  3698                                  		;cmp	ax,0FFFFh	; opt 0ffffh is	unlikely offset
  3699                                  		;jz	short i19_restor_1
  3700 00000783 4B                      		dec	bx ; 07/08/2023
  3701 00000784 01FF                    		add	di,di
  3702 00000786 01FF                    		add	di,di
  3703 00000788 93                      		xchg	ax,bx
  3704 00000789 AB                      		stosw
  3705 0000078A 93                      		xchg	ax,bx
  3706 0000078B AB                      		stosw			; put the vector back
  3707                                  i19_restor_1:
  3708 0000078C E2EC                    		loop	i19_restore_loop
  3709                                  doint19:
  3710                                  		;cmp	byte [inHMA],0	; ; Is dos running from	HMA
  3711 0000078E 380E[0D00]              		cmp	[inHMA],cl ; 0	; 07/08/2023
  3712 00000792 7403                    		jz	short SkipVDisk
  3713 00000794 E82A00                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  3714                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  3715                                  					; the memory above 1MB during a	warm boot.
  3716                                  SkipVDisk:
  3717 00000797 CD19                    		int	19h		; DISK BOOT
  3718                                  					; causes reboot	of disk	system
  3719                                  
  3720                                  ; =============== S U B	R O U T	I N E ========================================
  3721                                  
  3722                                  ;-----------------------------------------------------------------------------
  3723                                  ;
  3724                                  ; procedure : int15
  3725                                  ;
  3726                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  3727                                  ;		If it recognizes ctrl-alt-del and if DOS was
  3728                                  ;		is running high, it Erases the VDISK header
  3729                                  ;		present at 1MB boundary
  3730                                  ;
  3731                                  ;-----------------------------------------------------------------------------
  3732                                  
  3733                                  ; 16/10/2022
  3734                                  ;DELKEY		equ	53h
  3735                                  ;ROMDATASEG	equ	40h
  3736                                  KBFLAG		equ	17h
  3737                                  ;CTRLSTATE	equ	04h
  3738                                  ;ALTSTATE	equ	08h
  3739                                  
  3740                                  		; 02/10/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  3741                                  Int15:
  3742                                  		;cmp	ax,4F00h+DELKEY
  3743 00000799 3D534F                  		cmp	ax,4F53h	; del keystroke ?
  3744                                  		; 02/10/2023 - Retro DOS v5.0
  3745                                  		; 07/08/2023
  3746 0000079C 7405                    		jz	short int15_1
  3747                                  		;jnz	short Old15_j	; 07/08/2023 
  3748                                  Old15_j:
  3749 0000079E 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  3750                                  
  3751                                  ; ----------------------------------------------------------------------------
  3752                                  int15_1:
  3753 000007A3 1E                      		push	ds
  3754 000007A4 50                      		push	ax
  3755                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3756                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  3757                                  		;mov	ax,40h		; ROMDATASEG
  3758                                  		;mov	ds,ax
  3759                                  		;;mov	al,ds:17h	; [KBFLAG]
  3760                                  		;; 16/10/2022
  3761                                  		;mov	al,[KBFLAG]
  3762 000007A5 31C0                    		xor	ax,ax
  3763 000007A7 8ED8                    		mov	ds,ax
  3764 000007A9 A01704                  		mov	al,[0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  3765 000007AC 240C                    		and	al,0Ch		; (CTRLSTATE | ALTSTATE)
  3766 000007AE 3C0C                    		cmp	al,0Ch		; (CTRLSTATE | ALTSTATE)
  3767 000007B0 750A                    		jnz	short int15_2
  3768                                  		; 07/08/2023
  3769                                  		;push	cs
  3770                                  		;pop	ds
  3771                                  		;cmp	byte [inHMA],0	; is DOS running from HMA
  3772 000007B2 2E3826[0D00]            		cmp	byte [cs:inHMA],ah ; 0
  3773 000007B7 7403                    		jz	short int15_2
  3774 000007B9 E80500                  		call	EraseVDiskHead
  3775                                  int15_2:
  3776 000007BC 58                      		pop	ax
  3777 000007BD 1F                      		pop	ds
  3778 000007BE F9                      		stc
  3779                                  		; 02/10/2023 - Retro DOS v5.0
  3780 000007BF EBDD                    		jmp	short Old15_j
  3781                                  
  3782                                  		; 02/10/2023
  3783                                  ;Old15_j:	; 07/08/2023
  3784                                  ;		jmp	far [cs:Old15]	; 16/10/2022
  3785                                  ;		;jmp	cs:Old15
  3786                                  	
  3787                                  ; =============== S U B	R O U T	I N E ========================================
  3788                                  
  3789                                  ;-----------------------------------------------------------------------------
  3790                                  ;
  3791                                  ; procedure : EraseVDiskHead
  3792                                  ;
  3793                                  ;		Erases the VDisk Header present in the 1MB boundary
  3794                                  ;
  3795                                  ;-----------------------------------------------------------------------------
  3796                                  
  3797                                  EraseVDiskHead:	; proc near
  3798                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3799                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  3800                                  		;push	ax
  3801 000007C1 51                      		push	cx
  3802 000007C2 57                      		push	di
  3803 000007C3 06                      		push	es
  3804 000007C4 E863FF                  		call	EnsureA20On
  3805                                  		;mov	ax,0FFFFh	; HMA seg
  3806                                  		;mov	es,ax
  3807                                  		; 03/10/2023 - Retro DOS v5.0
  3808 000007C7 6AFF                    		push	0FFFFh
  3809 000007C9 07                      		pop	es
  3810 000007CA BF1000                  		mov	di,10h		; point	to VDISK header
  3811                                  		; 07/08/2023
  3812                                  		;mov	cx,10h		; size of vdisk	header
  3813 000007CD 89F9                    		mov	cx,di ; 16
  3814                                  		; 03/10/2023
  3815 000007CF 31C0                    		xor	ax,ax
  3816                                  		;inc	ax ; ax = 0
  3817 000007D1 F3AB                    		rep stosw		; clear	it
  3818 000007D3 07                      		pop	es
  3819 000007D4 5F                      		pop	di
  3820 000007D5 59                      		pop	cx
  3821                                  		;pop	ax ; 07/08/2023
  3822 000007D6 C3                      		retn
  3823                                  
  3824                                  ; ----------------------------------------------------------------------------
  3825                                  
  3826                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  3827                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  3828                                  
  3829                                  ; 09/12/2022
  3830                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  3831                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  3832                                  ; (followings are in sysinit segment)
  3833                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  3834                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  3835                                  ;DEVICELIST	equ 273h
  3836                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  3837                                  ;MEMORYSIZE	equ 292h	
  3838                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  3839                                  ;DEFAULTDRIVE	equ 296h
  3840                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  3841                                  ;;currentdoslocation equ 271h
  3842                                  ;CURRENTDOSLOCATION equ 271h
  3843                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  3844                                  ;SYSINITSTART	equ 267h
  3845                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  3846                                  ; 18/10/2022
  3847                                  ;toomanydrivesflag equ 3FFh 
  3848                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  3849                                  
  3850                                  ; ----------------------------------------------------------------------------
  3851                                  
  3852                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3853                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07D7h
  3854                                  
  3855                                  %if 1
  3856                                  
  3857 000007D7 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  3858                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  3859                                  					; (procedure in	SYSINIT	segment)
  3860                                  ; 17/10/2022
  3861 000007D9 [E20B]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  3862 000007DB 0405                    		dw SYSINITSEG		; 08/08/2023
  3863                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  3864                                  					; 0473h for MSDOS 6.21 IO.SYS
  3865                                  ;SR;
  3866                                  ; A communication block has been setup between the DOS and the BIOS. All
  3867                                  ;the data starting from SysinitPresent will be part of the data block. 
  3868                                  ;Right now, this is the only data being communicated. It can be expanded 
  3869                                  ;later to add more stuff
  3870                                  
  3871 000007DD 00                      SysinitPresent:	db 0
  3872                                  
  3873                                  %endif
  3874                                  
  3875                                  ; ----------------------------------------------------------------------------
  3876                                  
  3877                                  ;************************************************************************
  3878                                  ;*									*
  3879                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  3880                                  ;*	  it returns through one of the three functions that follow.	*
  3881                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  3882                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  3883                                  ;*									*
  3884                                  ;************************************************************************
  3885                                  
  3886                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3887                                  %if 0	; 20/09/2023
  3888                                  int_2f:		
  3889                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  3890                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  3891                                  
  3892                                  ; ----------------------------------------------------------------------------
  3893                                  
  3894                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  3895                                  ; note:  is it really necessary to transiton out and then back in?
  3896                                  ;	 It's not as if this is a really speed critical function.
  3897                                  ;	 might as well do whatever's most compact.
  3898                                  
  3899                                  i2f_dskentry:
  3900                                  		jmp	dsk_entry
  3901                                  
  3902                                  ; ----------------------------------------------------------------------------
  3903                                  
  3904                                  ;************************************************************************
  3905                                  ;*									*
  3906                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  3907                                  ;*		is done. presently does nothing. affects no		*
  3908                                  ;*		registers!						*
  3909                                  ;*									*
  3910                                  ;************************************************************************
  3911                                  
  3912                                  ; 09/12/2022
  3913                                  ; re_init_:
  3914                                  re_init:				; called back by sysinit after
  3915                                  		retf			; a bunch of stuff is done.
  3916                                  					; presently does nothing
  3917                                  %endif
  3918                                  
  3919                                  ; ----------------------------------------------------------------------------
  3920                                  
  3921                                  ;SR; WIN386 support
  3922                                  
  3923                                  ; WIN386 instance data structure
  3924                                  ;
  3925                                  ; Here is a Win386 startup info structure which we set up and to which
  3926                                  ; we return a pointer when Win386 initializes.
  3927                                  
  3928 000007DE 0300                    Win386_SI:	db 3,0			; SI_Version
  3929                                  					; Startup Info for Win386
  3930 000007E0 00000000                SI_Next:	dd 0			; pointer to next info structure
  3931 000007E4 00000000                		dd 0			; a field we don't need
  3932 000007E8 00000000                		dd 0			; another field	we don't need
  3933 000007EC [F007]                  SI_Instance:	dw Instance_Table
  3934 000007EE 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  3935                                  
  3936                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  3937                                  ; areas. Note that the address and size of the hardware stacks must
  3938                                  ; be calculated and inserted at boot time.
  3939                                  
  3940 000007F0 00005000                Instance_Table:	dw 0,50h		; print	screen status...
  3941 000007F4 0200                    		dw 2			; ... 2	bytes
  3942 000007F6 0E005000                		dw 0Eh,50h		; ROM Basic data...
  3943 000007FA 1400                    		dw 14h			; ... 14H bytes
  3944 000007FC [0C00]                  		dw altah		; a con	device buffer...
  3945 000007FE 7000                    		dw 70h			; Bios_Data segment
  3946 00000800 0100                    		dw 1			; ... 1 byte
  3947                                  
  3948                                  NextStack:
  3949                                  
  3950                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  3951                                  ;	instance items WILL NOT be filled in by SYSINIT.
  3952                                  ;	That's just fine as long as these are the last items
  3953                                  ;	in the instance list since the first item is initialized
  3954                                  ;	to 0000 at load time.
  3955                                  
  3956 00000802 00000000                		dw 0,0			; pointer to next stack	to be used...
  3957 00000806 0200                    		dw 2			; ... 2 bytes
  3958 00000808 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  3959 0000080C 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  3960 0000080E 00000000                		dd 0			; terminate the	instance table
  3961                                  
  3962                                  					;SR;
  3963 00000812 00                      IsWin386:	db 0			; Flag to indicate whether
  3964                                  					; Win386 is running or not
  3965                                  ;-----------------------------------------------------------------------------
  3966                                  
  3967                                  ; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3968                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0813h
  3969                                  
  3970                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  3971                                  ;when we call it including checking of A20. The code being only about 
  3972                                  ;30 bytes, we might as well put it in BIOS_DATA
  3973                                  
  3974                                  V86_Crit_SetFocus:			
  3975 00000813 57                      		push	di
  3976 00000814 06                      		push	es
  3977 00000815 53                      		push	bx
  3978 00000816 50                      		push	ax
  3979 00000817 31FF                    		xor	di,di
  3980 00000819 8EC7                    		mov	es,di
  3981 0000081B BB1500                  		mov	bx,15h		; Device ID of DOSMGR device
  3982 0000081E B88416                  		mov	ax,1684h	; Get API entry	point
  3983 00000821 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  3984                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  3985                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  3986 00000823 8CC0                    		mov	ax, es
  3987 00000825 09F8                    		or	ax, di
  3988 00000827 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  3989                                  					; Set up stack frame to	simulate a call.
  3990 00000829 0E                      		push	cs
  3991                                  		;;mov	ax,offset Skip
  3992                                  		;mov	ax,Skip
  3993                                  		;push	ax
  3994                                  		; 03/10/2023 - Retro DOS v5.0
  3995 0000082A 68[3308]                		push	Skip
  3996 0000082D 06                      		push	es
  3997 0000082E 57                      		push	di		; API far call address
  3998 0000082F B80100                  		mov	ax,1		; SetFocus function number
  3999 00000832 CB                      		retf			; do the call
  4000                                  ;-----------------------------------------------------------------------------
  4001                                  
  4002                                  Skip:					
  4003 00000833 58                      		pop	ax
  4004 00000834 5B                      		pop	bx
  4005 00000835 07                      		pop	es
  4006 00000836 5F                      		pop	di
  4007 00000837 CB                      		retf
  4008                                  
  4009                                  ;End WIN386 support
  4010                                  
  4011                                  ; ----------------------------------------------------------------------------
  4012                                  
  4013                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  4014                                  %if 0
  4015                                  
  4016                                  FreeHMAPtr:	dw 0FFFFh		
  4017                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  4018                                  					; (procedure in	SYSINIT	segment)
  4019                                  ; 17/10/2022
  4020                                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  4021                                  		dw SYSINITSEG		; 08/08/2023
  4022                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  4023                                  					; 0473h for MSDOS 6.21 IO.SYS
  4024                                  ;SR;
  4025                                  ; A communication block has been setup between the DOS and the BIOS. All
  4026                                  ;the data starting from SysinitPresent will be part of the data block. 
  4027                                  ;Right now, this is the only data being communicated. It can be expanded 
  4028                                  ;later to add more stuff
  4029                                  
  4030                                  SysinitPresent:	db 0
  4031                                  		
  4032                                  endfloppy:	db 0, 0
  4033                                  
  4034                                  %endif
  4035                                  	
  4036                                  	; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  4037                                  
  4038                                  	endfloppy:
  4039 00000838 00                      		db 0
  4040                                  
  4041                                  	; 03/10/2023
  4042                                  
  4043                                  numxdiv	equ ($-BData_start)
  4044                                  numxmod	equ (numxdiv % 16)
  4045                                  
  4046                                  %if (numxmod>0) & (numxmod<16)
  4047 00000839 00<rep 7h>              		times (16-numxmod) db 0
  4048                                  %endif
  4049                                  
  4050                                  ; ----------------------------------------------------------------------------			
  4051                                  
  4052                                  ; Bios_Data ends
  4053                                  	
  4054                                  ; Possibly disposable BIOS data
  4055                                  ; This data follows the	regular	BIOS data,
  4056                                  ; and is part of the same group.
  4057                                  
  4058                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  4059                                  ;nul_vid:	db 'NO NAME    ',0 	; null volume id
  4060                                  ;tmp_vid:	db 'NO NAME    ',0	; vid scratch buffer
  4061                                  
  4062                                  ; 03/10/2023
  4063 00000840 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    '
  4063 00000849 2020               
  4064                                  
  4065 0000084B 80                      harddrv:	db 80h			
  4066                                  
  4067                                  end96tpi:
  4068                                  
  4069                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  4070                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:084Ch ('bdss:' address)
  4071                                  
  4072                                  ;;*********************************************************************
  4073                                  ;;memory allocation for bdss
  4074                                  ;;*********************************************************************
  4075                                  ;
  4076                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  4077                                  ;
  4078                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  4079                                  ;
  4080                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  4081                                  
  4082                                  
  4083                                  ; 09/12/2023
  4084                                  %if 1
  4085                                  ; Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM BDS structure (FAT32 adaptation)
  4086                                  
  4087 0000084C FFFF                    bdss:		dw 0FFFFh		; ...
  4088                                  					; max_mini_dsk_num equ 23
  4089                                  					; BDS_STRUC (2+max_mini_dsk_num) dup (<>)
  4090                                  					; currently max. 25
  4091                                  					; (MSDOS 6 BDS structure size = 100 bytes)
  4092                                  					; (PCDOS 7.1 BDS structure size = 150 bytes)
  4093                                  					; BDS.link
  4094 0000084E 0000                    		dw 0
  4095 00000850 50                      		db 80			; BDS.drivenum
  4096 00000851 03                      		db 3			; BDS.drivelet
  4097 00000852 0002                    		dw 512			; BDS.BPB (BDS offset 6)
  4098                                  					; 53 bytes BPB for FAT32 fs
  4099                                  					; 25 bytes BPB for FAT16 and FAT12 fs
  4100                                  					; .bytespersec
  4101 00000854 01                      		db 1			; .secperclus
  4102 00000855 0100                    		dw 1			; .resectors
  4103 00000857 02                      		db 2			; .fats
  4104 00000858 1000                    		dw 16			; .direntries
  4105 0000085A 0000                    		dw 0			; .totalsec16
  4106 0000085C F8                      		db 0F8h			; .media
  4107 0000085D 0100                    		dw 1			; .fatsecs16
  4108 0000085F 0000                    		dw 0			; .secpertrack
  4109 00000861 0000                    		dw 0			; .heads
  4110 00000863 00000000                		dd 0			; .hiddensectors
  4111 00000867 00000000                		dd 0			; .totalsecs32
  4112                                  					; (End of FAT12/FAT16 BPB)
  4113                                  					;
  4114                                  					; FAT32 extensions to BDS
  4115 0000086B 00000000                		dd 0			; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
  4116 0000086F 0000                    		dw 0			; .extflags ; BPB_ExtFlags
  4117 00000871 0000                    		dw 0			; .fsver ; BPB_FSVer
  4118 00000873 00000000                		dd 0			; .rootdirclust ; BPB_RootClus (BDS offset 39)
  4119 00000877 FFFF                    		dw 0FFFFh		; .fsinfo ; BPB_FSInfo ; initialized to -1
  4120 00000879 FFFF                    		dw 0FFFFh		; .bkbootsec ; BPB_BkBootSec ; initialized to -1
  4121 0000087B 00<rep Ch>              		times 12 db 0		; .reserved ; BPB_Reserved (12 zero bytes)
  4122 00000887 00                      		db 0			; BDS.fatsiz (BDS offset 59)
  4123 00000888 0000                    		dw 0			; BDS.opcnt
  4124 0000088A 03                      		db 3
  4125 0000088B 2000                    		dw 20h			; BDS.flags (BDS offset 63)
  4126 0000088D 2800                    		dw 40
  4127 0000088F 00<rep 25h>             		times 37 db 0
  4128 000008B4 FFFFFFFF                		dd 0FFFFFFFFh
  4129 000008B8 00<rep Ch>              		times 12 db 0
  4130 000008C4 FF                      		db -1			; BDS.track (BDS offset 120)
  4131 000008C5 0100                    		dw 1			; BDS.tim_lo ; BDS.bdsm_ismini
  4132 000008C7 0000                    		dw 0			; BDS.tim_hi
  4133 000008C9 4E4F204E414D452020-     		db 'NO NAME    ',0	; BDS.volid
  4133 000008D2 202000             
  4134 000008D5 00000000                		dd 0			; BDS.vol_serial (BDS offset 137)
  4135 000008D9 464154313220202000      		db 'FAT12   ',0		; BDS.filesys_id
  4136 000008E2 FFFF                    bds_1:		dw 0FFFFh
  4137 000008E4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4137 000008ED 0210000000F8       
  4138 000008F3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4138 000008FC 000000000000000000 
  4139 00000905 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4139 0000090E FFFFFF0000         
  4140 00000913 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4140 0000091C 0000000003200028   
  4141 00000924 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4141 0000092D 000000000000000000 
  4142 00000936 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4142 0000093F 000000000000000000 
  4143 00000948 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4143 00000951 0000000000         
  4144 00000956 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4144 0000095F 4E4F204E41         
  4145 00000964 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4145 0000096D 00004641           
  4146 00000971 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4147 00000978 FFFF                    bds_2:		dw 0FFFFh
  4148 0000097A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4148 00000983 0210000000F8       
  4149 00000989 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4149 00000992 000000000000000000 
  4150 0000099B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4150 000009A4 FFFFFF0000         
  4151 000009A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4151 000009B2 0000000003200028   
  4152 000009BA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4152 000009C3 000000000000000000 
  4153 000009CC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4153 000009D5 000000000000000000 
  4154 000009DE 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4154 000009E7 0000000000         
  4155 000009EC 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4155 000009F5 4E4F204E41         
  4156 000009FA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4156 00000A03 00004641           
  4157 00000A07 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4158 00000A0E FFFF                    bds_3:		dw 0FFFFh
  4159 00000A10 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4159 00000A19 0210000000F8       
  4160 00000A1F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4160 00000A28 000000000000000000 
  4161 00000A31 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4161 00000A3A FFFFFF0000         
  4162 00000A3F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4162 00000A48 0000000003200028   
  4163 00000A50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4163 00000A59 000000000000000000 
  4164 00000A62 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4164 00000A6B 000000000000000000 
  4165 00000A74 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4165 00000A7D 0000000000         
  4166 00000A82 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4166 00000A8B 4E4F204E41         
  4167 00000A90 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4167 00000A99 00004641           
  4168 00000A9D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4169 00000AA4 FFFF                    bds_4:		dw 0FFFFh
  4170 00000AA6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4170 00000AAF 0210000000F8       
  4171 00000AB5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4171 00000ABE 000000000000000000 
  4172 00000AC7 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4172 00000AD0 FFFFFF0000         
  4173 00000AD5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4173 00000ADE 0000000003200028   
  4174 00000AE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4174 00000AEF 000000000000000000 
  4175 00000AF8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4175 00000B01 000000000000000000 
  4176 00000B0A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4176 00000B13 0000000000         
  4177 00000B18 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4177 00000B21 4E4F204E41         
  4178 00000B26 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4178 00000B2F 00004641           
  4179 00000B33 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4180 00000B3A FFFF                    		dw 0FFFFh
  4181 00000B3C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4181 00000B45 0210000000F8       
  4182 00000B4B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4182 00000B54 000000000000000000 
  4183 00000B5D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4183 00000B66 FFFFFF0000         
  4184 00000B6B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4184 00000B74 0000000003200028   
  4185 00000B7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4185 00000B85 000000000000000000 
  4186 00000B8E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4186 00000B97 000000000000000000 
  4187 00000BA0 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4187 00000BA9 0000000000         
  4188 00000BAE 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4188 00000BB7 4E4F204E41         
  4189 00000BBC 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4189 00000BC5 00004641           
  4190 00000BC9 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4191 00000BD0 FFFF                    		dw 0FFFFh
  4192 00000BD2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4192 00000BDB 0210000000F8       
  4193 00000BE1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4193 00000BEA 000000000000000000 
  4194 00000BF3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4194 00000BFC FFFFFF0000         
  4195 00000C01 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4195 00000C0A 0000000003200028   
  4196 00000C12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4196 00000C1B 000000000000000000 
  4197 00000C24 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4197 00000C2D 000000000000000000 
  4198 00000C36 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4198 00000C3F 0000000000         
  4199 00000C44 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4199 00000C4D 4E4F204E41         
  4200 00000C52 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4200 00000C5B 00004641           
  4201 00000C5F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4202 00000C66 FFFF                    		dw 0FFFFh
  4203 00000C68 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4203 00000C71 0210000000F8       
  4204 00000C77 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4204 00000C80 000000000000000000 
  4205 00000C89 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4205 00000C92 FFFFFF0000         
  4206 00000C97 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4206 00000CA0 0000000003200028   
  4207 00000CA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4207 00000CB1 000000000000000000 
  4208 00000CBA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4208 00000CC3 000000000000000000 
  4209 00000CCC 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4209 00000CD5 0000000000         
  4210 00000CDA 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4210 00000CE3 4E4F204E41         
  4211 00000CE8 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4211 00000CF1 00004641           
  4212 00000CF5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4213 00000CFC FFFF                    		dw 0FFFFh
  4214 00000CFE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4214 00000D07 0210000000F8       
  4215 00000D0D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4215 00000D16 000000000000000000 
  4216 00000D1F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4216 00000D28 FFFFFF0000         
  4217 00000D2D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4217 00000D36 0000000003200028   
  4218 00000D3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4218 00000D47 000000000000000000 
  4219 00000D50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4219 00000D59 000000000000000000 
  4220 00000D62 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4220 00000D6B 0000000000         
  4221 00000D70 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4221 00000D79 4E4F204E41         
  4222 00000D7E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4222 00000D87 00004641           
  4223 00000D8B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4224 00000D92 FFFF                    		dw 0FFFFh
  4225 00000D94 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4225 00000D9D 0210000000F8       
  4226 00000DA3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4226 00000DAC 000000000000000000 
  4227 00000DB5 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4227 00000DBE FFFFFF0000         
  4228 00000DC3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4228 00000DCC 0000000003200028   
  4229 00000DD4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4229 00000DDD 000000000000000000 
  4230 00000DE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4230 00000DEF 000000000000000000 
  4231 00000DF8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4231 00000E01 0000000000         
  4232 00000E06 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4232 00000E0F 4E4F204E41         
  4233 00000E14 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4233 00000E1D 00004641           
  4234 00000E21 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4235 00000E28 FFFF                    		dw 0FFFFh
  4236 00000E2A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4236 00000E33 0210000000F8       
  4237 00000E39 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4237 00000E42 000000000000000000 
  4238 00000E4B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4238 00000E54 FFFFFF0000         
  4239 00000E59 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4239 00000E62 0000000003200028   
  4240 00000E6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4240 00000E73 000000000000000000 
  4241 00000E7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4241 00000E85 000000000000000000 
  4242 00000E8E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4242 00000E97 0000000000         
  4243 00000E9C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4243 00000EA5 4E4F204E41         
  4244 00000EAA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4244 00000EB3 00004641           
  4245 00000EB7 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4246 00000EBE FFFF                    		dw 0FFFFh
  4247 00000EC0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4247 00000EC9 0210000000F8       
  4248 00000ECF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4248 00000ED8 000000000000000000 
  4249 00000EE1 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4249 00000EEA FFFFFF0000         
  4250 00000EEF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4250 00000EF8 0000000003200028   
  4251 00000F00 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4251 00000F09 000000000000000000 
  4252 00000F12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4252 00000F1B 000000000000000000 
  4253 00000F24 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4253 00000F2D 0000000000         
  4254 00000F32 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4254 00000F3B 4E4F204E41         
  4255 00000F40 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4255 00000F49 00004641           
  4256 00000F4D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4257 00000F54 FFFF                    		dw 0FFFFh
  4258 00000F56 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4258 00000F5F 0210000000F8       
  4259 00000F65 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4259 00000F6E 000000000000000000 
  4260 00000F77 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4260 00000F80 FFFFFF0000         
  4261 00000F85 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4261 00000F8E 0000000003200028   
  4262 00000F96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4262 00000F9F 000000000000000000 
  4263 00000FA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4263 00000FB1 000000000000000000 
  4264 00000FBA 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4264 00000FC3 0000000000         
  4265 00000FC8 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4265 00000FD1 4E4F204E41         
  4266 00000FD6 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4266 00000FDF 00004641           
  4267 00000FE3 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4268 00000FEA FFFF                    		dw 0FFFFh
  4269 00000FEC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4269 00000FF5 0210000000F8       
  4270 00000FFB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4270 00001004 000000000000000000 
  4271 0000100D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4271 00001016 FFFFFF0000         
  4272 0000101B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4272 00001024 0000000003200028   
  4273 0000102C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4273 00001035 000000000000000000 
  4274 0000103E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4274 00001047 000000000000000000 
  4275 00001050 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4275 00001059 0000000000         
  4276 0000105E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4276 00001067 4E4F204E41         
  4277 0000106C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4277 00001075 00004641           
  4278 00001079 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4279 00001080 FFFF                    		dw 0FFFFh
  4280 00001082 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4280 0000108B 0210000000F8       
  4281 00001091 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4281 0000109A 000000000000000000 
  4282 000010A3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4282 000010AC FFFFFF0000         
  4283 000010B1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4283 000010BA 0000000003200028   
  4284 000010C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4284 000010CB 000000000000000000 
  4285 000010D4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4285 000010DD 000000000000000000 
  4286 000010E6 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4286 000010EF 0000000000         
  4287 000010F4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4287 000010FD 4E4F204E41         
  4288 00001102 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4288 0000110B 00004641           
  4289 0000110F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4290 00001116 FFFF                    		dw 0FFFFh
  4291 00001118 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4291 00001121 0210000000F8       
  4292 00001127 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4292 00001130 000000000000000000 
  4293 00001139 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4293 00001142 FFFFFF0000         
  4294 00001147 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4294 00001150 0000000003200028   
  4295 00001158 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4295 00001161 000000000000000000 
  4296 0000116A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4296 00001173 000000000000000000 
  4297 0000117C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4297 00001185 0000000000         
  4298 0000118A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4298 00001193 4E4F204E41         
  4299 00001198 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4299 000011A1 00004641           
  4300 000011A5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4301 000011AC FFFF                    		dw 0FFFFh
  4302 000011AE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4302 000011B7 0210000000F8       
  4303 000011BD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4303 000011C6 000000000000000000 
  4304 000011CF 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4304 000011D8 FFFFFF0000         
  4305 000011DD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4305 000011E6 0000000003200028   
  4306 000011EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4306 000011F7 000000000000000000 
  4307 00001200 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4307 00001209 000000000000000000 
  4308 00001212 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4308 0000121B 0000000000         
  4309 00001220 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4309 00001229 4E4F204E41         
  4310 0000122E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4310 00001237 00004641           
  4311 0000123B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4312 00001242 FFFF                    		dw 0FFFFh
  4313 00001244 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4313 0000124D 0210000000F8       
  4314 00001253 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4314 0000125C 000000000000000000 
  4315 00001265 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4315 0000126E FFFFFF0000         
  4316 00001273 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4316 0000127C 0000000003200028   
  4317 00001284 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4317 0000128D 000000000000000000 
  4318 00001296 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4318 0000129F 000000000000000000 
  4319 000012A8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4319 000012B1 0000000000         
  4320 000012B6 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4320 000012BF 4E4F204E41         
  4321 000012C4 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4321 000012CD 00004641           
  4322 000012D1 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4323 000012D8 FFFF                    		dw 0FFFFh
  4324 000012DA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4324 000012E3 0210000000F8       
  4325 000012E9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4325 000012F2 000000000000000000 
  4326 000012FB 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4326 00001304 FFFFFF0000         
  4327 00001309 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4327 00001312 0000000003200028   
  4328 0000131A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4328 00001323 000000000000000000 
  4329 0000132C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4329 00001335 000000000000000000 
  4330 0000133E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4330 00001347 0000000000         
  4331 0000134C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4331 00001355 4E4F204E41         
  4332 0000135A 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4332 00001363 00004641           
  4333 00001367 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4334 0000136E FFFF                    		dw 0FFFFh
  4335 00001370 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4335 00001379 0210000000F8       
  4336 0000137F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4336 00001388 000000000000000000 
  4337 00001391 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4337 0000139A FFFFFF0000         
  4338 0000139F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4338 000013A8 0000000003200028   
  4339 000013B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4339 000013B9 000000000000000000 
  4340 000013C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4340 000013CB 000000000000000000 
  4341 000013D4 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4341 000013DD 0000000000         
  4342 000013E2 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4342 000013EB 4E4F204E41         
  4343 000013F0 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4343 000013F9 00004641           
  4344 000013FD 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4345 00001404 FFFF                    		dw 0FFFFh
  4346 00001406 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4346 0000140F 0210000000F8       
  4347 00001415 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4347 0000141E 000000000000000000 
  4348 00001427 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4348 00001430 FFFFFF0000         
  4349 00001435 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4349 0000143E 0000000003200028   
  4350 00001446 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4350 0000144F 000000000000000000 
  4351 00001458 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4351 00001461 000000000000000000 
  4352 0000146A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4352 00001473 0000000000         
  4353 00001478 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4353 00001481 4E4F204E41         
  4354 00001486 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4354 0000148F 00004641           
  4355 00001493 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4356 0000149A FFFF                    		dw 0FFFFh
  4357 0000149C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4357 000014A5 0210000000F8       
  4358 000014AB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4358 000014B4 000000000000000000 
  4359 000014BD 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4359 000014C6 FFFFFF0000         
  4360 000014CB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4360 000014D4 0000000003200028   
  4361 000014DC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4361 000014E5 000000000000000000 
  4362 000014EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4362 000014F7 000000000000000000 
  4363 00001500 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4363 00001509 0000000000         
  4364 0000150E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4364 00001517 4E4F204E41         
  4365 0000151C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4365 00001525 00004641           
  4366 00001529 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4367 00001530 FFFF                    		dw 0FFFFh
  4368 00001532 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4368 0000153B 0210000000F8       
  4369 00001541 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4369 0000154A 000000000000000000 
  4370 00001553 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4370 0000155C FFFFFF0000         
  4371 00001561 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4371 0000156A 0000000003200028   
  4372 00001572 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4372 0000157B 000000000000000000 
  4373 00001584 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4373 0000158D 000000000000000000 
  4374 00001596 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4374 0000159F 0000000000         
  4375 000015A4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4375 000015AD 4E4F204E41         
  4376 000015B2 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4376 000015BB 00004641           
  4377 000015BF 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4378 000015C6 FFFF                    		dw 0FFFFh
  4379 000015C8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4379 000015D1 0210000000F8       
  4380 000015D7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4380 000015E0 000000000000000000 
  4381 000015E9 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4381 000015F2 FFFFFF0000         
  4382 000015F7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4382 00001600 0000000003200028   
  4383 00001608 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4383 00001611 000000000000000000 
  4384 0000161A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4384 00001623 000000000000000000 
  4385 0000162C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4385 00001635 0000000000         
  4386 0000163A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4386 00001643 4E4F204E41         
  4387 00001648 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4387 00001651 00004641           
  4388 00001655 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4389 0000165C FFFF                    bds_24:		dw 0FFFFh
  4390 0000165E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4390 00001667 0210000000F8       
  4391 0000166D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4391 00001676 000000000000000000 
  4392 0000167F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4392 00001688 FFFFFF0000         
  4393 0000168D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4393 00001696 0000000003200028   
  4394 0000169E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4394 000016A7 000000000000000000 
  4395 000016B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4395 000016B9 000000000000000000 
  4396 000016C2 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4396 000016CB 0000000000         
  4397 000016D0 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4397 000016D9 4E4F204E41         
  4398 000016DE 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4398 000016E7 00004641           
  4399 000016EB 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4400                                  
  4401                                  %endif
  4402                                  
  4403                                  ; 09/12/2023
  4404                                  %if 0
  4405                                  ; Retro DOS v4.2 (MSDOS 6.22) IO.SYS BDS structure
  4406                                  
  4407                                  bdss:		dw 0FFFFh		
  4408                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4409                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4410                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4411                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4412                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4413                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4414                                  		db 32h,	20h, 20h, 20h, 0
  4415                                  		dw 0FFFFh
  4416                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4417                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4418                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4419                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4420                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4421                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4422                                  		db 32h,	20h, 20h, 20h, 0
  4423                                  		dw 0FFFFh
  4424                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4425                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4426                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4427                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4428                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4429                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4430                                  		db 32h,	20h, 20h, 20h, 0
  4431                                  		dw 0FFFFh
  4432                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4433                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4434                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4435                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4436                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4437                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4438                                  		db 32h,	20h, 20h, 20h, 0
  4439                                  		dw 0FFFFh
  4440                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4441                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4442                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4443                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4444                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4445                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4446                                  		db 32h,	20h, 20h, 20h, 0
  4447                                  		dw 0FFFFh
  4448                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4449                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4450                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4451                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4452                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4453                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4454                                  		db 32h,	20h, 20h, 20h, 0
  4455                                  		dw 0FFFFh
  4456                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4457                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4458                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4459                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4460                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4461                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4462                                  		db 32h,	20h, 20h, 20h, 0
  4463                                  		dw 0FFFFh
  4464                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4465                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4466                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4467                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4468                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4469                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4470                                  		db 32h,	20h, 20h, 20h, 0
  4471                                  		dw 0FFFFh
  4472                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4473                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4474                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4475                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4476                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4477                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4478                                  		db 32h,	20h, 20h, 20h, 0
  4479                                  		dw 0FFFFh
  4480                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4481                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4482                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4483                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4484                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4485                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4486                                  		db 32h,	20h, 20h, 20h, 0
  4487                                  		dw 0FFFFh
  4488                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4489                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4490                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4491                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4492                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4493                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4494                                  		db 32h,	20h, 20h, 20h, 0
  4495                                  		dw 0FFFFh
  4496                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4497                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4498                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4499                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4500                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4501                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4502                                  		db 32h,	20h, 20h, 20h, 0
  4503                                  		dw 0FFFFh
  4504                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4505                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4506                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4507                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4508                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4509                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4510                                  		db 32h,	20h, 20h, 20h, 0
  4511                                  		dw 0FFFFh
  4512                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4513                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4514                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4515                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4516                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4517                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4518                                  		db 32h,	20h, 20h, 20h, 0
  4519                                  		dw 0FFFFh
  4520                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4521                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4522                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4523                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4524                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4525                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4526                                  		db 32h,	20h, 20h, 20h, 0
  4527                                  		dw 0FFFFh
  4528                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4529                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4530                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4531                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4532                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4533                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4534                                  		db 32h,	20h, 20h, 20h, 0
  4535                                  		dw 0FFFFh
  4536                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4537                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4538                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4539                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4540                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4541                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4542                                  		db 32h,	20h, 20h, 20h, 0
  4543                                  		dw 0FFFFh
  4544                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4545                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4546                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4547                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4548                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4549                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4550                                  		db 32h,	20h, 20h, 20h, 0
  4551                                  		dw 0FFFFh
  4552                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4553                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4554                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4555                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4556                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4557                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4558                                  		db 32h,	20h, 20h, 20h, 0
  4559                                  		dw 0FFFFh
  4560                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4561                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4562                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4563                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4564                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4565                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4566                                  		db 32h,	20h, 20h, 20h, 0
  4567                                  		dw 0FFFFh
  4568                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4569                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4570                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4571                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4572                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4573                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4574                                  		db 32h,	20h, 20h, 20h, 0
  4575                                  		dw 0FFFFh
  4576                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4577                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4578                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4579                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4580                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4581                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4582                                  		db 32h,	20h, 20h, 20h, 0
  4583                                  		dw 0FFFFh
  4584                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4585                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4586                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4587                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4588                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4589                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4590                                  		db 32h,	20h, 20h, 20h, 0
  4591                                  		dw 0FFFFh
  4592                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4593                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4594                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4595                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4596                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4597                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4598                                  		db 32h,	20h, 20h, 20h, 0
  4599                                  		dw 0FFFFh
  4600                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4601                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4602                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4603                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4604                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4605                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4606                                  		db 32h,	20h, 20h, 20h, 0
  4607                                  		db 0
  4608                                  %endif
  4609                                  
  4610                                  ;---------------------------------------------------------------------------
  4611                                  ; Possibly disposable data, goes at end of data group
  4612                                  ;***************************************************************************
  4613                                  
  4614                                  ; Possibly disposable data, goes at end of data group
  4615                                  
  4616                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  4617                                  ;
  4618                                  ;	entry:	(ah) = function, 02 or 0a for read.
  4619                                  ;		(dl) = drive number (80h or 81h).
  4620                                  ;		(dh) = head number.
  4621                                  ;		(ch) = cylinder number.
  4622                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  4623                                  ;		(al) = number of sectors.
  4624                                  ;		(es:bx) = address of read buffer.
  4625                                  ;		for more on register contents see rom bios listing.
  4626                                  ;		stack set up for return by an iret.
  4627                                  ;
  4628                                  ;	exit:	(ah) = status of current operation.
  4629                                  ;		(cy) = 1 if failed, 0 if successful.
  4630                                  ;		for other register contents see rom bios listing.
  4631                                  ;
  4632                                  ;	uses:	
  4633                                  ;
  4634                                  ;
  4635                                  ;	warning: uses old13 vector for non-read calls.
  4636                                  ;		does direct calls to the at rom.
  4637                                  ;		does segment arithmatic.
  4638                                  ;
  4639                                  ;	effects: performs disk i/o operation.
  4640                                  
  4641                                  ; 16/10/2022
  4642                                  ; 28/05/2019
  4643                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  4644                                  
  4645                                  ;* offsets into cmd_block for registers
  4646                                  
  4647                                  pre_comp equ 0	;write pre-compensation
  4648                                  sec_cnt	 equ 1	;sector count
  4649                                  sec_num	 equ 2	;sector number
  4650                                  cyl_low	 equ 3	;cylinder number, low part
  4651                                  cyl_high equ 4	;cylinder number, high part
  4652                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  4653                                  		;            bit 4 = drive number, bits 3-0 have head number)
  4654                                  cmd_reg  equ 6	;command register
  4655                                  
  4656                                  ; 01/10/2022
  4657                                  disk_status1	equ 74h
  4658                                  hf_num		equ 75h
  4659                                  control_byte	equ 76h
  4660                                  
  4661                                  ibm_disk_io:				
  4662 000016F2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  4663 000016F5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  4664 000016F7 80FC02                  		cmp	ah, 2
  4665 000016FA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  4666 000016FC 80FC0A                  		cmp	ah, 0Ah
  4667 000016FF 7405                    		jz	short atd2	; and call 0Ah (read long).
  4668                                  atd1:
  4669 00001701 2EFF2E[0601]            		jmp	far [cs:Old13]					
  4670                                  		;jmp	cs:Old13	; use rom int 13h handler
  4671                                  ;-----------------------------------------------------------------------------
  4672                                  
  4673                                  atd2:					
  4674 00001706 53                      		push	bx
  4675 00001707 51                      		push	cx
  4676 00001708 52                      		push	dx
  4677 00001709 57                      		push	di
  4678 0000170A 1E                      		push	ds
  4679 0000170B 06                      		push	es
  4680 0000170C 50                      		push	ax
  4681 0000170D B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  4682                                  					; establish bios segment addressing
  4683 00001710 8ED8                    		mov	ds, ax
  4684                                  		; 16/10/2022
  4685 00001712 C606740000              		mov	byte [disk_status1], 0
  4686                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  4687                                  					; initially no error code.
  4688 00001717 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  4689 0000171A 3A167500                		cmp	dl, [hf_num]
  4690                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  4691 0000171E 7207                    		jb	short atd3	; disk number in range
  4692                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  4693 00001720 C606740001              		mov	byte [disk_status1], 1
  4694 00001725 EB20                    		jmp	short atd4	; disk number out of range error,
  4695                                  					; return
  4696                                  ; ----------------------------------------------------------------------------
  4697                                  
  4698                                  atd3:					
  4699 00001727 53                      		push	bx
  4700 00001728 8CC0                    		mov	ax, es
  4701 0000172A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  4702 0000172D 01D8                    		add	ax, bx
  4703 0000172F 8EC0                    		mov	es, ax
  4704 00001731 5B                      		pop	bx
  4705 00001732 83E30F                  		and	bx, 0Fh
  4706 00001735 0E                      		push	cs
  4707 00001736 E8DF00                  		call	check_dma
  4708 00001739 720C                    		jb	short atd4	; abort if dma across segment boundary
  4709 0000173B 58                      		pop	ax
  4710 0000173C 50                      		push	ax
  4711 0000173D E81A00                  		call	setcmd		; set up command block for disk op
  4712 00001740 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  4713 00001743 EE                      		out	dx, al		; write out command modifier
  4714 00001744 E86B00                  		call	docmd		; carry out command
  4715                                  ; ----------------------------------------------------------------------------
  4716                                  
  4717                                  atd4:	
  4718                                  
  4719                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  4720                                  ;	      and save a couple bytes while were at it.
  4721                                  				
  4722 00001747 58                      		pop	ax
  4723                                  		;mov	ah, ds:74h	; [disk_status1]
  4724 00001748 8A267400                		mov	ah, [disk_status1]
  4725 0000174C 08E4                    		or	ah, ah
  4726 0000174E 7401                    		jz	short atd5
  4727 00001750 F9                      		stc
  4728                                  atd5:					
  4729 00001751 07                      		pop	es
  4730 00001752 1F                      		pop	ds
  4731 00001753 5F                      		pop	di
  4732 00001754 5A                      		pop	dx
  4733 00001755 59                      		pop	cx
  4734 00001756 5B                      		pop	bx
  4735 00001757 CA0200                  		retf	2		; far return, dropping flags
  4736                                  
  4737                                  ; =============== S U B	R O U T	I N E ========================================
  4738                                  
  4739                                  ;***	setcmd - set up cmd_block for the disk operation
  4740                                  ;
  4741                                  ;	entry:	(ds) = bios data segment.
  4742                                  ;		(es:bx) in seg:000x form.
  4743                                  ;		other registers as in int 13h call
  4744                                  ;	
  4745                                  ;	exit:	cmd_block set up for disk read call.
  4746                                  ;		control_byte set up for disk operation.
  4747                                  ;		(al) = control byte modifier
  4748                                  ;
  4749                                  ;	sets the fields of cmd_block using the register contents
  4750                                  ;	and the contents of the disk parameter block for the given drive.
  4751                                  ;
  4752                                  ;	warning: (ax) destroyed.
  4753                                  ;		does direct calls to the at rom.
  4754                                  
  4755                                  setcmd:		; proc near		
  4756                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  4757                                  		; 16/10/2022
  4758 0000175A A24300                  		mov	[cmd_block+sec_cnt], al
  4759                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  4760 0000175D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  4761 00001762 80FC02                  		cmp	ah, 2
  4762 00001765 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  4763 00001767 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  4764                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  4765                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  4766                                  setc1:					
  4767 0000176C 88C8                    		mov	al, cl
  4768 0000176E 243F                    		and	al, 3Fh		; mask sector number
  4769                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  4770                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  4771 00001770 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  4772 00001773 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  4773 00001777 88C8                    		mov	al, cl
  4774 00001779 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  4775                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  4776 0000177C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  4777 0000177F 89D0                    		mov	ax, dx
  4778 00001781 C0E004                  		shl	al, 4		; drive	number
  4779 00001784 80E40F                  		and	ah, 0Fh
  4780 00001787 08E0                    		or	al, ah		; head number
  4781 00001789 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  4782                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  4783 0000178B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  4784 0000178E 06                      		push	es
  4785 0000178F 53                      		push	bx
  4786 00001790 0E                      		push	cs
  4787 00001791 E85C00                  		call	get_vec
  4788 00001794 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  4789                                  			 		; write pre-comp from disk parameters
  4790 00001798 C1E802                  		shr	ax, 2
  4791                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  4792 0000179B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  4793                                  					; only use low part
  4794 0000179E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  4795                                  					; control byte modifier
  4796 000017A2 5B                      		pop	bx
  4797 000017A3 07                      		pop	es
  4798                                  		;mov	ah, ds:76h	; [control_byte]
  4799 000017A4 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  4800 000017A8 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  4801 000017AB 08C4                    		or	ah, al
  4802                                  		;mov	ds:76h,	ah
  4803 000017AD 88267600                		mov	[control_byte], ah ; mov [76h],al
  4804 000017B1 C3                      		retn
  4805                                  
  4806                                  ; =============== S U B	R O U T	I N E ========================================
  4807                                  
  4808                                  ;***	docmd - carry out read operation to at hard disk
  4809                                  ;
  4810                                  ;	entry:	(es:bx) = address for read in data.
  4811                                  ;		cmd_block set up for disk read.
  4812                                  ;
  4813                                  ;	exit:	buffer at (es:bx) contains data read.
  4814                                  ;		disk_status1 set to error code (0 if success).
  4815                                  ;
  4816                                  ;	
  4817                                  ;
  4818                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  4819                                  ;		no check is made for dma boundary overrun.
  4820                                  ;
  4821                                  ;	effects: programs disk controller.
  4822                                  ;		performs disk input.
  4823                                  
  4824                                  docmd:		; proc near		
  4825 000017B2 89DF                    		mov	di, bx
  4826 000017B4 0E                      		push	cs
  4827 000017B5 E84000                  		call	command
  4828 000017B8 7535                    		jnz	short doc3
  4829                                  doc1:					
  4830 000017BA 0E                      		push	cs
  4831 000017BB E84200                  		call	waitt		; wait for controller to complete read
  4832 000017BE 752F                    		jnz	short doc3
  4833 000017C0 B90001                  		mov	cx, 256		; 256 words per sector
  4834 000017C3 BAF001                  		mov	dx, 1F0h	; hf_port
  4835 000017C6 FC                      		cld			; string op goes up
  4836 000017C7 FA                      		cli			; disable interrupts
  4837                                  					; (bug was forgetting this)
  4838                                  
  4839                                  ;	M062 -- some of these old machines have intermittent failures
  4840                                  ;		when the read is done at full speed. Instead of using
  4841                                  ;		a string rep instruction, we'll use a loop. There is
  4842                                  ;		a slight performance hit, but it only affects these
  4843                                  ;		very old machines with an exact date code match, and
  4844                                  ;		it makes said machines more reliable
  4845                                  ;
  4846                                  ;M062	repz	insw		;read in sector
  4847                                  
  4848                                  rsct_loop:				
  4849 000017C8 6D                      		insw
  4850 000017C9 E2FD                    		loop	rsct_loop
  4851 000017CB FB                      		sti
  4852                                  		; 16/10/2022
  4853 000017CC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  4854                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  4855                                  					; (ds =	40h)
  4856 000017D1 7410                    		jz	short doc2	; no ecc bytes to read.
  4857 000017D3 0E                      		push	cs
  4858 000017D4 E83100                  		call	wait_drq	; wait for controller to complete read
  4859 000017D7 7216                    		jb	short doc3
  4860 000017D9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  4861 000017DC BAF001                  		mov	dx, 1F0h	; hf_port
  4862 000017DF FA                      		cli
  4863 000017E0 F36C                    		rep insb		; read in ecc
  4864 000017E2 FB                      		sti
  4865                                  doc2:					
  4866 000017E3 0E                      		push	cs
  4867 000017E4 E82900                  		call	check_status
  4868 000017E7 7506                    		jnz	short doc3	; operation failed
  4869                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  4870 000017E9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  4871 000017ED 75CB                    		jnz	short doc1	; loop while more sectors to read
  4872                                  doc3:					
  4873 000017EF C3                      		retn
  4874                                  
  4875                                  ; =============== S U B	R O U T	I N E ========================================
  4876                                  
  4877                                  ;***	define where the rom routines are actually located
  4878                                  ;	   in the buggy old AT BIOS that we might need to
  4879                                  ;	   install a special level of int13 handler for
  4880                                  
  4881                                  ; 16/10/2022
  4882                                  
  4883                                  romsegment 	equ 0F000h  ; segment
  4884                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  4885                                  romwait		equ 2E7Fh   ; offset in romsegment
  4886                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  4887                                  romcheck_status equ 2EF8h   ; offset in romsegment
  4888                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  4889                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  4890                                  romfret		equ 0FF65h  ; far return in rom	
  4891                                  
  4892                                  ;***	get_vec - get pointer to hard disk parameters.
  4893                                  ;
  4894                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  4895                                  ;
  4896                                  ;	exit:	(es:bx) = address of disk parameters table.
  4897                                  ;
  4898                                  ;	uses:	ax for segment computation.
  4899                                  ;
  4900                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  4901                                  ;	or 70h (disk 1).
  4902                                  ;	
  4903                                  ;	warning: (ax) destroyed.
  4904                                  ;		this does a direct call to the at rom.
  4905                                  
  4906                                  get_vec:	; proc near		
  4907                                  		;push	0FF65h		; romfret ; far	return in rom
  4908                                  		;jmp	far ptr	0F000h:2F8Eh
  4909                                  		; 16/10/2022
  4910 000017F0 6865FF                  		push	romfret		; far return in rom
  4911 000017F3 EA8E2F00F0              		jmp	romsegment:romget_vec
  4912                                  
  4913                                  ; =============== S U B	R O U T	I N E ========================================
  4914                                  
  4915                                  ;***	command - send contents of cmd_block to disk controller.
  4916                                  ;
  4917                                  ;	entry:	control_byte 
  4918                                  ;		cmd_block - set up with values for hard disk controller.
  4919                                  ;
  4920                                  ;	exit:	disk_status1 = error code.
  4921                                  ;		nz if error, zr for no error.
  4922                                  ;
  4923                                  ;
  4924                                  ;	warning: (ax), (cx), (dx) destroyed.
  4925                                  ;		does a direct call to the at rom.
  4926                                  ;
  4927                                  ;	effects: programs disk controller.
  4928                                  
  4929                                  command:	; proc near		
  4930                                  		;push	0FF65h		; romfret ; far	return in rom
  4931                                  		;jmp	far ptr	0F000h:2E1Eh
  4932                                  		; 16/10/2022
  4933 000017F8 6865FF                  		push	romfret		; far return in rom
  4934 000017FB EA1E2E00F0              		jmp	romsegment:romcommand
  4935                                  
  4936                                  ; =============== S U B	R O U T	I N E ========================================
  4937                                  
  4938                                  ;***	waitt - wait for disk interrupt
  4939                                  ;
  4940                                  ;	entry:	nothing.
  4941                                  ;
  4942                                  ;	exit:	disk_status1 = error code.
  4943                                  ;		nz if error, zr if no error.
  4944                                  ;
  4945                                  ;
  4946                                  ;	warning: (ax), (bl), (cx) destroyed.
  4947                                  ;		does a direct call to the at rom.
  4948                                  ;		
  4949                                  ;	effects: calls int 15h, function 9000h.
  4950                                  
  4951                                  waitt:		; proc near		
  4952                                  		;push	0FF65h		; romfret ; far	return in rom
  4953                                  		;jmp	far ptr	0F000h:2E7Fh
  4954                                  		; 16/10/2022
  4955 00001800 6865FF                  		push	romfret		; far return in rom
  4956 00001803 EA7F2E00F0              		jmp	romsegment:romwait
  4957                                  
  4958                                  ; =============== S U B	R O U T	I N E ========================================
  4959                                  
  4960                                  ;***	wait_drq - wait for data request.
  4961                                  ;
  4962                                  ;	entry:	nothing.
  4963                                  ;
  4964                                  ;	exit:	disk_status1 = error code.
  4965                                  ;		cy if error, nc if no error.
  4966                                  ;
  4967                                  ;	warning: (al), (cx), (dx) destroyed.
  4968                                  ;		does a direct call to the at rom.
  4969                                  
  4970                                  wait_drq:	; proc near		
  4971                                  		;push	0FF65h		; romfret ; far	return in rom
  4972                                  		;jmp	far ptr	0F000h:2EE2h
  4973                                  		; 16/10/2022
  4974 00001808 6865FF                  		push	romfret		; far return in rom
  4975 0000180B EAE22E00F0              		jmp	romsegment:romwait_drq
  4976                                  
  4977                                  ; =============== S U B	R O U T	I N E ========================================
  4978                                  
  4979                                  ;***	check_status - check hard disk status.
  4980                                  ;
  4981                                  ;	entry:	nothing.
  4982                                  ;
  4983                                  ;	exit:	disk_status1 = error code.
  4984                                  ;		nz if error, zr if no error.
  4985                                  ;
  4986                                  ;	warning: (ax), (cx), (dx) destroyed.
  4987                                  ;		does a direct call to the at rom.
  4988                                  
  4989                                  check_status:	; proc near		
  4990                                  		;push	0FF65h		; romfret ; far	return in rom
  4991                                  		;jmp	far ptr	0F000h:2EF8h
  4992                                  		; 16/10/2022
  4993 00001810 6865FF                  		push	romfret		; far return in rom
  4994 00001813 EAF82E00F0              		jmp	romsegment:romcheck_status
  4995                                  
  4996                                  ; =============== S U B	R O U T	I N E ========================================
  4997                                  
  4998                                  ;***	check_dma - check for dma overrun 64k segment.
  4999                                  ;
  5000                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  5001                                  ;		cmd_block set up for operation.
  5002                                  ;
  5003                                  ;	exit:	disk_status1 - error code.
  5004                                  ;		cy if error, nc if no error.
  5005                                  ;
  5006                                  ;	warning: does a direct call to the at rom.
  5007                                  
  5008                                  check_dma:	; proc near		
  5009                                  		;push	0FF65h		; romfret ; far	return in rom
  5010                                  		;jmp	far ptr	0F000h:2F69h
  5011                                  		; 16/10/2022
  5012 00001818 6865FF                  		push	romfret		; far return in rom
  5013 0000181B EA692F00F0              		jmp	romsegment:romcheck_dma
  5014                                  
  5015                                  ;-----------------------------------------------------------------------------
  5016                                  
  5017                                  endatrom:
  5018                                  
  5019                                  ; ----------------------------------------------------------------------------
  5020                                  
  5021                                  ;; M015 -- begin changes
  5022                                  ;;
  5023                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  5024                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  5025                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  5026                                  ;; If our init code detects this error, it will install this
  5027                                  ;; special Int13 hook through the same mechanism that was set
  5028                                  ;; up for the IBM patch above. This code is also dynamically
  5029                                  ;; relocated by MSINIT.
  5030                                  
  5031                                  compaq_disk_io:
  5032 00001820 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  5033                                  					;
  5034                                  					; the following	label defines the end of the at	rom patch.
  5035                                  					; this is used at configuration	time.
  5036                                  					;
  5037                                  					; warning!!!
  5038                                  					; this code will be dynamically	relocated by msinit
  5039 00001823 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  5040                                  no_hookit:				
  5041                                  		;jmp	cs:Old13
  5042                                  		; 16/10/2022
  5043 00001825 2EFF2E[0601]            		jmp	far [cs:Old13]
  5044                                  
  5045                                  ; ----------------------------------------------------------------------------
  5046                                  
  5047                                  mebbe_hookit:
  5048 0000182A 80FA80                  		cmp	dl, 80h
  5049 0000182D 72F6                    		jb	short no_hookit
  5050 0000182F 1E                      		push	ds
  5051                                  		
  5052                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5053                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  5054                                  		;push	ax
  5055                                  		;mov	ax, 40h
  5056                                  		;mov	ds, ax
  5057                                  		;pop	ax
  5058 00001830 6A40                    		push	40h
  5059 00001832 1F                      		pop	ds
  5060                                  
  5061 00001833 9C                      		pushf
  5062                                  		;call	cs:Old13
  5063                                  		; 16/10/2022
  5064 00001834 2EFF1E[0601]            		call	far [cs:Old13]
  5065 00001839 1F                      		pop	ds
  5066 0000183A CA0200                  		retf	2
  5067                                  
  5068                                  ; ----------------------------------------------------------------------------
  5069                                  
  5070 0000183D 00                      end_compaq_i13hook: db 0			
  5071                                  
  5072                                  ; =============== S U B	R O U T	I N E ========================================
  5073                                  
  5074                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5075                                  %if 0  
  5076                                  
  5077                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  5078                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  5079                                  
  5080                                  daycnt_to_day:	; proc far
  5081                                  
  5082                                  ; entry: [daycnt] = number of days since 1-1-80
  5083                                  ;
  5084                                  ; return: ch - century in bcd
  5085                                  ;	  cl - year in bcd
  5086                                  ;	  dh - month in bcd
  5087                                  ;	  dl - day in bcd
  5088                                  
  5089                                  		; 16/10/2022		
  5090                                  		push	word [cs:daycnt] ; save daycnt
  5091                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  5092                                  					; # days from 1-1-1980 to 1-1-2000
  5093                                  		jnb	short century20
  5094                                  		mov	byte [cs:base_century], 19
  5095                                  		mov	byte [cs:base_year], 80
  5096                                  		jmp	short years
  5097                                  ; ----------------------------------------------------------------------------
  5098                                  		
  5099                                  century20:				
  5100                                  		mov	byte [cs:base_century], 20
  5101                                  		mov	byte [cs:base_year], 0
  5102                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  5103                                  					; adjust daycnt
  5104                                  years:					
  5105                                  		xor	dx, dx
  5106                                  		mov	ax, [cs:daycnt]
  5107                                  		mov	bx, 1461	; (366+365*3)
  5108                                  					; # of days in a Leap year block
  5109                                  		div	bx		; AX = # of leap block,	DX = daycnt
  5110                                  		mov	[cs:daycnt], dx	; save daycnt left
  5111                                  		mov	bl, 4
  5112                                  		mul	bl		; AX = # of years. Less	than 100
  5113                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  5114                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  5115                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  5116                                  		jbe	short leapyear	; within 366+355+355+355 days.
  5117                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  5118                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  5119                                  		mov	cx, 3		; And next three years are normal
  5120                                  regularyear:				
  5121                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  5122                                  		jbe	short yeardone	; {if (daycnt >	365)
  5123                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  5124                                  		sub	word [cs:daycnt], 365	;   }
  5125                                  		loop	regularyear	; }
  5126                                  					;
  5127                                  					; should never fall through loop
  5128                                  leapyear:				
  5129                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  5130                                  					; change month table.
  5131                                  yeardone:				
  5132                                  		xor	bx, bx
  5133                                  		xor	dx, dx
  5134                                  		mov	ax, [cs:daycnt]
  5135                                  		;mov	si, offset month_tab
  5136                                  		mov	si, month_tab	; 19/10/2022
  5137                                  		mov	cx, 12
  5138                                  months:					
  5139                                  		inc	bl
  5140                                  
  5141                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  5142                                  		;mov	dl, [cs:si]
  5143                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  5144                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  5145                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  5146                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  5147                                  		
  5148                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  5149                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  5150                                  					; dh=0
  5151                                  		jbe	short month_done
  5152                                  		inc	si		; next month
  5153                                  		sub	ax, dx		; adjust daycnt
  5154                                  		loop	months		;
  5155                                  					; should never fall through loop
  5156                                  month_done:				
  5157                                  		mov	byte [cs:month_tab+1], 28
  5158                                  					; restore month table value
  5159                                  		mov	dl, bl
  5160                                  		mov	dh, [cs:base_year]
  5161                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  5162                                  		call	far [cs:bintobcd]
  5163                                  		;call	cs:bintobcd	; convert "day"	to bcd
  5164                                  					; dl = bcd day,	al = month
  5165                                  		xchg	dl, al
  5166                                  		call	far [cs:bintobcd]
  5167                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  5168                                  		xchg	dh, al
  5169                                  		call	far [cs:bintobcd]
  5170                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  5171                                  		xchg	cl, al
  5172                                  		call	far [cs:bintobcd]
  5173                                  		;call	cs:bintobcd	; ch = bcd century
  5174                                  		mov	ch, al
  5175                                  		pop	word [cs:daycnt] ; restore original value
  5176                                  		retf
  5177                                  
  5178                                  enddaycnttoday:	
  5179                                  
  5180                                  %endif
  5181                                  
  5182                                  ; =============== S U B	R O U T	I N E ========================================
  5183                                  
  5184                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5185                                  %if 0  
  5186                                  
  5187                                  bin_to_bcd:	; proc far		; real time clock support
  5188                                  
  5189                                  ;convert a binary input in al (less than 63h or 99 decimal)
  5190                                  ;into a bcd value in al. ah destroyed.	
  5191                                  		
  5192                                  		push	cx		
  5193                                  		aam			; al=high digit	bcd, ah=low digit bcd
  5194                                  		mov	cl, 4
  5195                                  		shl	ah, cl		; mov the high digit to	high nibble
  5196                                  		or	al, ah
  5197                                  		pop	cx
  5198                                  		retf
  5199                                  %endif
  5200                                  
  5201                                  ; ----------------------------------------------------------------------------
  5202                                  
  5203                                  ; the k09 requires the routines for reading the clock because of the suspend/
  5204                                  ; resume facility. the system clock needs to be reset after resume.
  5205                                  
  5206                                  ; the following routine is executed at resume time when the system
  5207                                  ; powered on after suspension. it reads the real time clock and
  5208                                  ; resets the system time and date, and then irets.
  5209                                  
  5210                                  ; warning!!! this code will be dynamically relocated by msinit.
  5211                                  
  5212                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5213                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  5214                                  int_6Ch:
  5215 0000183E 0E                      		push	cs
  5216 0000183F 1F                      		pop	ds
  5217                                  		;cmp	byte [cs:inHMA], 0  
  5218 00001840 803E[0D00]00            		cmp	byte [inHMA], 0
  5219 00001845 7405                    		jz      short int6c
  5220 00001847 BB[2A07]                		mov     bx, EnsureA20On
  5221 0000184A FFD3                    		call    bx
  5222                                  int6c:					
  5223                                  		;push	cs
  5224                                  		;pop	ds
  5225 0000184C 8F06[F805]              		pop	word [int6c_ret_addr]	; pop off return address
  5226 00001850 8F06[FA05]              		pop	word [int6c_ret_addr+2]
  5227 00001854 9D                      		popf
  5228 00001855 E81300                  		call	read_real_date	; get the date from the clock
  5229 00001858 FA                      		cli
  5230 00001859 8936[8904]              		mov	[daycnt], si	; update dos copy of date
  5231 0000185D FB                      		sti
  5232 0000185E E8B900                  		call	read_real_time	; get the time from the	rtc
  5233 00001861 FA                      		cli
  5234 00001862 B401                    		mov	ah, 1
  5235 00001864 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  5236                                  					; CX:DX	= clock	count
  5237                                  					; Return: time of day set
  5238 00001866 FB                      		sti
  5239                                  		;jmp	int6c_ret_addr	; long jump
  5240                                  		; 16/10/2022
  5241 00001867 FF2E[F805]              		jmp	far [int6c_ret_addr] ; long jump
  5242                                  
  5243                                  ; =============== S U B	R O U T	I N E ========================================
  5244                                  
  5245                                  ;   read_real_date reads real-time clock for date and returns the number
  5246                                  ;   of days elapsed since 1-1-80 in si
  5247                                  
  5248                                  read_real_date:	; proc near		
  5249 0000186B 50                      		push	ax
  5250 0000186C 51                      		push	cx
  5251 0000186D 52                      		push	dx
  5252 0000186E 30E4                    		xor	ah, ah		; throw	away clock roll	over
  5253 00001870 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  5254                                  					; Return: CX:DX	= clock	count
  5255                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  5256                                  					; midnight
  5257                                  					; Otherwise, AL	> 0
  5258 00001872 5A                      		pop	dx
  5259 00001873 59                      		pop	cx
  5260 00001874 58                      		pop	ax
  5261 00001875 50                      		push	ax
  5262 00001876 53                      		push	bx
  5263 00001877 51                      		push	cx
  5264 00001878 52                      		push	dx
  5265                                  		;mov	word [cs:daycnt2], 1
  5266                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5267                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  5268 00001879 C706[0006]0100          		mov	word [daycnt2], 1
  5269                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  5270 0000187F B404                    		mov	ah, 4
  5271 00001881 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  5272                                  					; Return: DL = day in BCD
  5273                                  					; DH = month in	BCD
  5274                                  					; CL = year in BCD
  5275                                  					; CH = century (19h or 20h)
  5276 00001883 7303                    		jnb	short read_ok
  5277 00001885 E98300                  		jmp	r_d_ret
  5278                                  ;-----------------------------------------------------------------------------
  5279                                  
  5280                                  read_ok:
  5281 00001888 882E[FC05]              		mov	[bin_date_time], ch
  5282 0000188C 880E[FD05]              		mov	[bin_date_time+1], cl
  5283 00001890 8836[FE05]              		mov	[bin_date_time+2], dh
  5284 00001894 8816[FF05]              		mov	[bin_date_time+3], dl
  5285                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  5286                                  		; 08/08/2023
  5287                                  		;mov	byte [daycnt2], 2
  5288 00001898 FE06[0006]              		inc	byte [daycnt2] ; 2
  5289 0000189C E83401                  		call	bcd_verify	; verify bcd values in range
  5290 0000189F 726A                    		jb	short r_d_ret	; some value out of range
  5291                                  		;mov	word [cs:daycnt2], 3
  5292                                  		; 08/08/2023
  5293                                  		;mov	byte [daycnt2], 3
  5294 000018A1 FE06[0006]              		inc	byte [daycnt2] ; 3
  5295 000018A5 E8DB00                  		call	date_verify
  5296 000018A8 7261                    		jb	short r_d_ret
  5297                                  		;mov	word [cs:daycnt2], 0
  5298                                  		; 08/08/2023
  5299 000018AA C606[0006]00            		mov	byte [daycnt2], 0
  5300 000018AF E8A100                  		call	in_bin
  5301 000018B2 A0[FD05]                		mov	al, [bin_date_time+1]
  5302 000018B5 98                      		cbw
  5303 000018B6 803E[FC05]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  5304 000018BB 7503                    		jnz	short century_19 ; no
  5305 000018BD 83C064                  		add	ax, 100		; add in a century
  5306                                  century_19:				
  5307 000018C0 83E850                  		sub	ax, 80		; subtract off 1-1-80
  5308 000018C3 B104                    		mov	cl, 4		; leap year every 4
  5309 000018C5 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  5310 000018C7 88E3                    		mov	bl, ah		; save odd years
  5311 000018C9 98                      		cbw			; zero ah
  5312 000018CA B9B505                  		mov	cx, 1461	; 366+(3*365)
  5313                                  					; # of days in leap year blocks
  5314 000018CD F7E1                    		mul	cx
  5315                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  5316                                  		; 08/08/2023
  5317 000018CF A3[0006]                		mov	[daycnt2], ax
  5318 000018D2 88D8                    		mov	al, bl		; get odd years	count
  5319 000018D4 98                      		cbw
  5320 000018D5 09C0                    		or	ax, ax
  5321 000018D7 740B                    		jz	short leap_year
  5322 000018D9 B96D01                  		mov	cx, 365		; days in year
  5323 000018DC F7E1                    		mul	cx
  5324                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  5325                                  		; 08/08/2023
  5326 000018DE 0106[0006]              		add	[daycnt2], ax
  5327 000018E2 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  5328                                  					; possibly account for a leap day
  5329                                  ;-----------------------------------------------------------------------------
  5330                                  
  5331                                  leap_year:
  5332 000018E4 803E[FE05]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  5333 000018E9 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  5334                                  leap_adjustment:
  5335                                  		;inc	word [cs:daycnt2] ; account for leap day
  5336                                  		; 08/08/2023
  5337 000018EB FF06[0006]              		inc	word [daycnt2]
  5338                                  no_leap_adjustment:			
  5339 000018EF 8A0E[FF05]              		mov	cl, [bin_date_time+3] ; get days of month
  5340 000018F3 30ED                    		xor	ch, ch
  5341 000018F5 49                      		dec	cx		; because of offset from day 1,	not day	0
  5342                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  5343                                  		; 08/08/2023
  5344 000018F6 010E[0006]              		add	[daycnt2], cx
  5345 000018FA 8A0E[FE05]              		mov	cl, [bin_date_time+2] ; get month
  5346                                  		; 08/08/2023
  5347                                  		;xor	ch, ch
  5348 000018FE 49                      		dec	cx		; january starts at offset 0
  5349                                  		
  5350                                  		; 08/08/2023
  5351                                  		;shl	cx, 1		; word offset
  5352                                  		;;mov	si, month_table
  5353                                  		;add	si, cx
  5354                                  		;; 16/10/2022
  5355                                  		;; ds must be same with cs here, if so..
  5356                                  		;; what for cs: prefixes are used !?)
  5357                                  		;; mov	ax, [cs:si]
  5358                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  5359                                  		;mov	ax, [si]	; mov ax, [cs:si]
  5360                                  		;			; get #	days in	previous months
  5361                                  		;add	[cs:daycnt2], ax
  5362                                  
  5363                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5364                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  5365 000018FF B400                    		mov	ah, 0
  5366 00001901 BE[8F04]                		mov	si, month_tab
  5367                                  r_d_sum_loop:
  5368 00001904 AC                      		lodsb
  5369 00001905 0106[0006]              		add	[daycnt2], ax
  5370 00001909 E2F9                    		loop	r_d_sum_loop
  5371                                  r_d_ret:
  5372                                  		;mov	si, [cs:daycnt2]
  5373                                  		; 08/08/2023
  5374 0000190B 8B36[0006]              		mov	si, [daycnt2]
  5375 0000190F 5A                      		pop	dx
  5376 00001910 59                      		pop	cx
  5377 00001911 5B                      		pop	bx
  5378 00001912 58                      		pop	ax
  5379 00001913 C3                      		retn
  5380                                  
  5381                                  ;-----------------------------------------------------------------------------
  5382                                  
  5383                                  r_t_retj:				
  5384 00001914 31C9                    		xor	cx, cx
  5385 00001916 31D2                    		xor	dx, dx
  5386 00001918 EB38                    		jmp	short r_t_ret
  5387                                  
  5388                                  ; =============== S U B	R O U T	I N E ========================================
  5389                                  
  5390                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  5391                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  5392                                  
  5393                                  read_real_time:	; proc near		
  5394 0000191A B402                    		mov	ah, 2
  5395 0000191C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  5396                                  					; Return: CH = hours in	BCD
  5397                                  					; CL = minutes in BCD
  5398                                  					; DH = seconds in BCD
  5399 0000191E 72F4                    		jb	short r_t_retj
  5400 00001920 882E[FC05]              		mov	[bin_date_time], ch ; hours
  5401 00001924 880E[FD05]              		mov	[bin_date_time+1], cl ; minutes
  5402 00001928 8836[FE05]              		mov	[bin_date_time+2], dh ; seconds
  5403 0000192C C606[FF05]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  5404 00001931 E89F00                  		call	bcd_verify
  5405 00001934 72DE                    		jb	short r_t_retj
  5406 00001936 E88500                  		call	time_verify
  5407 00001939 72D9                    		jb	short r_t_retj
  5408 0000193B E81500                  		call	in_bin		; from bcd to bin
  5409 0000193E 8A2E[FC05]              		mov	ch, [bin_date_time]
  5410 00001942 8A0E[FD05]              		mov	cl, [bin_date_time+1]
  5411 00001946 8A36[FE05]              		mov	dh, [bin_date_time+2]
  5412 0000194A 8A16[FF05]              		mov	dl, [bin_date_time+3]
  5413                                  		; 16/10/2022
  5414                                  		; 17/09/2022
  5415                                  		; 31/05/2019
  5416 0000194E FF1E[0606]              		call	far [ttticks] 
  5417                                  		;call	dword ptr ttticks ; note: indirect far call
  5418                                  					; cx:dx	= number of ticks
  5419                                  					; (at 18.2 ticks per sec.)
  5420                                  r_t_ret:				
  5421 00001952 C3                      		retn
  5422                                  
  5423                                  ; =============== S U B	R O U T	I N E =======================================
  5424                                  
  5425                                  ;   in_bin converts bin_date_time values from bcd to bin
  5426                                  
  5427                                  in_bin:		; proc near
  5428 00001953 A0[FC05]                		mov	al, [bin_date_time] ; century or hours
  5429 00001956 E81F00                  		call	bcd_to_bin
  5430 00001959 A2[FC05]                		mov	[bin_date_time], al
  5431 0000195C A0[FD05]                		mov	al, [bin_date_time+1] ; years or minutes
  5432 0000195F E81600                  		call	bcd_to_bin
  5433 00001962 A2[FD05]                		mov	[bin_date_time+1], al
  5434 00001965 A0[FE05]                		mov	al, [bin_date_time+2] ; months or seconds
  5435 00001968 E80D00                  		call	bcd_to_bin
  5436 0000196B A2[FE05]                		mov	[bin_date_time+2], al
  5437 0000196E A0[FF05]                		mov	al, [bin_date_time+3] ; days (not used for time)
  5438 00001971 E80400                  		call	bcd_to_bin
  5439 00001974 A2[FF05]                		mov	[bin_date_time+3], al
  5440 00001977 C3                      		retn
  5441                                  
  5442                                  ; =============== S U B	R O U T	I N E =======================================
  5443                                  
  5444                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  5445                                  ;   a binary representation in al
  5446                                  ;   ah is destroyed
  5447                                  
  5448                                  bcd_to_bin:	; proc near
  5449 00001978 88C4                    		mov	ah, al
  5450 0000197A 240F                    		and	al, 0Fh
  5451 0000197C B104                    		mov	cl, 4
  5452 0000197E D2EC                    		shr	ah, cl
  5453 00001980 D50A                    		aad
  5454 00001982 C3                      		retn
  5455                                  
  5456                                  ; =============== S U B	R O U T	I N E ========================================
  5457                                  
  5458                                  ;   date_verify loosely checks bcd date values to be in range
  5459                                  ;   in bin_date_time
  5460                                  
  5461                                  date_verify:	; proc near
  5462 00001983 803E[FC05]20            		cmp	byte [bin_date_time], 20h ; century check
  5463 00001988 7732                    		ja	short date_error
  5464 0000198A 740E                    		jz	short century_20 ; jmp in 21th century
  5465 0000198C 803E[FC05]19            		cmp	byte [bin_date_time], 19h ; century check
  5466                                  		;jb	short date_error
  5467                                  		; 12/12/2022
  5468 00001991 722A                    		jb	short date_err2
  5469 00001993 803E[FD05]80            		cmp	byte [bin_date_time+1], 80h ; year check
  5470                                  		;jb	short date_error
  5471                                  		; 12/12/2022
  5472 00001998 7223                    		jb	short date_err2
  5473                                  century_20:
  5474 0000199A 803E[FD05]99            		cmp	byte [bin_date_time+1], 99h ; year check
  5475 0000199F 771B                    		ja	short date_error
  5476 000019A1 803E[FE05]12            		cmp	byte [bin_date_time+2], 12h ; month check
  5477 000019A6 7714                    		ja	short date_error
  5478 000019A8 803E[FE05]00            		cmp	byte [bin_date_time+2], 0
  5479                                  		;jbe	short date_error
  5480 000019AD 760D                    		jna	short date_error
  5481 000019AF 803E[FF05]31            		cmp	byte [bin_date_time+3], 31h ; day check
  5482 000019B4 7706                    		ja	short date_error
  5483                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  5484                                  		;;jbe	short date_error
  5485                                  		;jna	short date_error
  5486                                  		; 12/12/2022
  5487                                  		; cf=0
  5488                                  		;clc
  5489                                  		; 12/12/2022
  5490 000019B6 803E[FF05]01            		cmp	byte [bin_date_time+3], 1 ; day check
  5491 000019BB C3                      		retn
  5492                                  ;-----------------------------------------------------------------------------
  5493                                  
  5494                                  date_error:
  5495 000019BC F9                      		stc
  5496                                  date_err2:
  5497 000019BD C3                      		retn
  5498                                  
  5499                                  ; =============== S U B	R O U T	I N E ========================================
  5500                                  
  5501                                  ; time_verify very loosely checks bcd date values to be in range
  5502                                  ; in bin_date_time
  5503                                  
  5504                                  time_verify:	; proc near
  5505 000019BE 803E[FC05]24            		cmp	byte [bin_date_time], 24h ; hour check
  5506 000019C3 770C                    		ja	short time_error
  5507 000019C5 803E[FD05]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  5508 000019CA 7705                    		ja	short time_error
  5509                                  		; 12/12/2022h
  5510                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  5511                                  		;ja	short time_error
  5512                                  		;clc
  5513                                  		;retn
  5514                                  		; 12/12/2022
  5515 000019CC 803E[FE05]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  5516                                  time_error:
  5517                                  bv_error:
  5518 000019D1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  5519 000019D2 C3                      		retn
  5520                                  
  5521                                  ; ----------------------------------------------------------------------------
  5522                                  
  5523                                  ;time_error:				
  5524                                  		;stc
  5525                                  		;retn
  5526                                  
  5527                                  ; =============== S U B	R O U T	I N E ========================================
  5528                                  
  5529                                  ;   bcd_verify checks values in bin_date_time to be valid
  5530                                  ;   bcd numerals.  carry set if any nibble out of range
  5531                                  
  5532                                  bcd_verify:	; proc near
  5533 000019D3 B90400                  		mov	cx, 4		; 4 bytes to check
  5534 000019D6 BB[FC05]                		mov	bx, bin_date_time
  5535                                  bv_loop:
  5536 000019D9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  5537 000019DB 88C4                    		mov	ah, al
  5538 000019DD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  5539                                  					; is 1's place in range?
  5540 000019E0 3C0A                    		cmp	al, 10
  5541 000019E2 77ED                    		ja	short bv_error	; jmp out of range
  5542 000019E4 D0EC                    		shr	ah, 1
  5543 000019E6 D0EC                    		shr	ah, 1
  5544 000019E8 D0EC                    		shr	ah, 1
  5545 000019EA D0EC                    		shr	ah, 1
  5546 000019EC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  5547 000019EF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  5548 000019F2 77DD                    		ja	short bv_error	; jmp out of range
  5549 000019F4 43                      		inc	bx		; next byte
  5550 000019F5 49                      		dec	cx
  5551 000019F6 75E1                    		jnz	short bv_loop
  5552 000019F8 F8                      		clc			; set success flag
  5553 000019F9 C3                      		retn
  5554                                  ; ----------------------------------------------------------------------------
  5555                                  
  5556                                  		; 12/12/2022
  5557                                  ;bv_error:
  5558                                  		;stc			; set error flag
  5559                                  		;retn
  5560                                  
  5561                                  ; ----------------------------------------------------------------------------
  5562                                  
  5563                                  endk09:
  5564                                  
  5565                                  ; ----------------------------------------------------------------------------
  5566                                  
  5567                                  ;------------------------------------------------------------------------
  5568                                  ;									:
  5569                                  ;	System initialization						:
  5570                                  ;									:
  5571                                  ;	The entry conditions are established by the bootstrap		:
  5572                                  ;	loader and are considered unknown. The following jobs		:
  5573                                  ;	will be performed by this module:				:
  5574                                  ;									:
  5575                                  ;	1.	All device initialization is performed			:
  5576                                  ;	2.	A local stack is set up and DS:SI are set		:
  5577                                  ;		to point to an initialization table. Then		:
  5578                                  ;		an inter-segment call is made to the first		:
  5579                                  ;		byte of the dos 					:
  5580                                  ;	3.	Once the dos returns from this call the ds		:
  5581                                  ;		register has been set up to point to the start		:
  5582                                  ;		of free memory. The initialization will then		:
  5583                                  ;		load the command program into this area 		:
  5584                                  ;		beginning at 100 hex and transfer control to		:
  5585                                  ;		this program.						:
  5586                                  ;									:
  5587                                  ;------------------------------------------------------------------------
  5588                                  
  5589                                  ; 01/10/2022
  5590                                  ; 08/01/2018 - Retro DOS v4.0
  5591                                  
  5592                                  ; drvfat must be the first location of freeable space!
  5593                                  
  5594                                  align 2
  5595                                  		;db 90h
  5596                                  
  5597                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  5598                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A0Ch)
  5599                                  
  5600                                  ; 30/12/2022
  5601                                  ; (MSDOS 6.21 IO.SYS, BIOSDATA:16D6h)
  5602                                  	
  5603 000019FA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  5604                                  ; 09/12/2023
  5605                                  ;bios_l:	dw 0			; first	sector of data (low word)
  5606                                  ;bios_h:	dw 0			; first	sector of data (high word)
  5607                                  First_Data_Sector:
  5608 000019FC 0000                    		dw 0
  5609 000019FE 0000                    		dw 0
  5610 00001A00 0000                    doscnt:		dw 0			; how many sectors to read
  5611                                  ;fbigfat:	db 0			; flags	for drive
  5612 00001A02 0000                    fatloc:		dw 0			; seg addr of fat sector
  5613 00001A04 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  5614                                  ; 09/12/2023
  5615 00001A06 00                      fbigfat:	db 0			; flags	for drive
  5616 00001A07 80                      rom_drv_num:	db 80h			; rom drive number
  5617 00001A08 0002                    md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  5618                                  ; 12/12/2023
  5619                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  5620 00001A0A FFFF                    last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  5621                                  
  5622                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  5623                                  ; call to determine drive parameters.
  5624                                  
  5625 00001A0C 02                      num_heads:	db 2	; dw 2		; number of heads returned by rom
  5626 00001A0D 00                      		db 0	; 09/12/2023
  5627                                  ;sec_trk:	db 9			; sec/trk returned by rom
  5628 00001A0E 28                      num_cyln:	db 40	; dw 40		; number of cylinders returned by rom
  5629 00001A0F 00                      		db 0	; 09/12/2023
  5630                                  ; 09/12/2023
  5631 00001A10 09                      sec_trk:	db 9			; sec/trk returned by rom
  5632 00001A11 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  5633                                  
  5634                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  5635                                  Orig_Int1Eh_Table:
  5636 00001A12 0000                    		dw 0
  5637 00001A14 0000                    		dw 0
  5638                                  
  5639                                  ; ----------------------------------------------------------------------------
  5640                                  
  5641                                  ; 09/12/2023
  5642                                  %if 0
  5643                                  
  5644                                  disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  5645                                  		dw 2048, 0201h, 112, 0
  5646                                  		dw 8192, 0402h, 256, 0
  5647                                  		dw 32680, 0803h, 512, 0	; warning !!! old values
  5648                                  		dw 65535, 1004h, 1024, 0
  5649                                  					; default disktable under
  5650                                  					; the assumption of total fat size <= 128 kb,
  5651                                  					; and the maximum size of fat entry = 16 bit.
  5652                                  %endif
  5653                                  
  5654                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  5655                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A2Ah)
  5656                                  
  5657                                  		; 09/12/2023
  5658                                  		; 08/08/2023
  5659                                  		; disktable.totalsectors: resw 1 ; high word
  5660                                  		;			  resw 1 ; low word
  5661                                  		; disktable.shiftcount:   resb 1
  5662                                  		; disktable.secperclus:   resb 1
  5663                                  		; disktable.rdirentries:  resw 1
  5664                                  		; disktable.bigflag:      resw 1
  5665 00001A16 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  5665 00001A1F 00                 
  5666                                  					   ; (32680 sectors, 16340 KB)
  5667 00001A20 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  5667 00001A29 00                 
  5668                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  5669 00001A2A 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  5669 00001A33 00                 
  5670 00001A34 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  5670 00001A3D 00                 
  5671 00001A3E 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  5671 00001A47 00                 
  5672 00001A48 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  5672 00001A51 00                 
  5673                                  		; 09/12/2023
  5674                                  		;dw 128, 0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  5675 00001A52 FFFFFFFF0308000060-     		dw 0FFFFh, 0FFFFh, 0803h, 0, 60h ; FAT32 (> 2144MB)
  5675 00001A5B 00                 
  5676                                  					   ; (fbig and fbigbig flags are set)			
  5677                                  			
  5678                                  ; ----------------------------------------------------------------------------
  5679                                  
  5680                                  ;******************************************************
  5681                                  ;variables for mini disk initialization
  5682                                  ;******************************************************
  5683                                  
  5684                                  ; 01/10/2022
  5685                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  5686                                  
  5687 00001A5C 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  5688 00001A5D 00                      hnum:		db 0			; real number of hardfiles
  5689 00001A5E [3C05]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  5690 00001A60 [4C08]                  end_of_bdss:	dw bdss			; offset value of the ending address
  5691                                  					; of bds table. needed to figure out
  5692                                  					; the dosdatasg address.
  5693 00001A62 0000                    mini_hdlim:	dw 0			
  5694 00001A64 0000                    mini_seclim:	dw 0
  5695                                  
  5696                                  ; 19/12/2023
  5697                                  ; 09/12/2023
  5698                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A7Ah)
  5699                                  ;ld_p_number:	dw 2BADh		; (for 'find_mini_partition' proc)
  5700                                  
  5701                                  ;end of mini disk init variables **********************
  5702                                  
  5703                                  ; ----------------------------------------------------------------------------
  5704                                  			
  5705 00001A66 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  5706                                  
  5707                                  ; 13/12/2022
  5708                                  %if 0
  5709                                  
  5710                                  ;align 2
  5711                                  		db  90h	
  5712                                  
  5713                                  ; the following are the recommended bpbs for the media that we know of so far.
  5714                                  
  5715                                  ;struc bpbx
  5716                                  ;   resw 1 ; 512
  5717                                  ;   resb 1
  5718                                  ;   resw 1 ; 1
  5719                                  ;   resb 1 ; 2
  5720                                  ;   resw 1
  5721                                  ;   resw 1
  5722                                  ;   resb 1
  5723                                  ;   resw 1
  5724                                  ;   resw 1
  5725                                  ;   resw 1 ; 2
  5726                                  ;   resw 1
  5727                                  ;   resw 1 ; hidden sector high
  5728                                  ;   resd 1 ; extended total sectors
  5729                                  ;.size:
  5730                                  ;endstruc
  5731                                  
  5732                                  ; 08/01/2019 - Retro DOS v4.0
  5733                                  
  5734                                  ; 20/04/2019
  5735                                  
  5736                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  5737                                  
  5738                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  5739                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A86h)
  5740                                  
  5741                                  ; 09/12/2022
  5742                                  BPB48T:
  5743                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  5744                                  		; 48 tpi diskettes	;
  5745                                  		dw	512		; physical sector size in bytes
  5746                                  		db	2		; sectors/allocation unit
  5747                                  		dw	1		; reserved sectors for dos
  5748                                  		db	2		; number of allocation tables
  5749                                  		dw	112		; number of directory entries
  5750                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  5751                                  		db	0FDh		; media descriptor
  5752                                  		dw	2		; number of fat sectors
  5753                                  		dw	9		; sectors per track
  5754                                  		dw	2		; heads
  5755                                  		dw	0		; hidden sector count (low word)
  5756                                  		dw	0		; hidden sector (high)
  5757                                  		dw	0		; number of sectors (low)
  5758                                  		dw	0		; number of sectors (high)
  5759                                  		; 09/12/2023
  5760                                  		; FAT32 extensions (to BDS)
  5761                                  		times	28 db 0
  5762                                  		;
  5763                                  		db 90h
  5764                                  ;align 2
  5765                                  BPB96T:
  5766                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  5767                                  		; 96 tpi diskettes	;
  5768                                  		dw	512		; physical sector size in bytes
  5769                                  		db	1		; sectors/allocation unit
  5770                                  		dw	1		; reserved sectors for dos
  5771                                  		db	2		; number of allocation tables
  5772                                  		dw	224		; number of directory entries
  5773                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  5774                                  		db	0F9h		; media descriptor
  5775                                  		dw	7		; number of fat sectors
  5776                                  		dw	15		; sectors per track
  5777                                  		dw	2		; heads
  5778                                  		dw	0		; hidden sector count (low word)
  5779                                  		dw	0		; hidden sector (high)
  5780                                  		dw	0		; number of sectors (low)
  5781                                  		dw	0		; number of sectors (high)
  5782                                  		; 09/12/2023
  5783                                  		; FAT32 extensions (to BDS)
  5784                                  		times	28 db 0
  5785                                  		;
  5786                                  		db 90h
  5787                                  ;align 2
  5788                                  BPB35:
  5789                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  5790                                  		; 3.5" diskettes - 720 KB ;		
  5791                                  		dw	512		; physical sector size in bytes
  5792                                  		db	2		; sectors/allocation unit
  5793                                  		dw	1		; reserved sectors for dos
  5794                                  		db	2		; number of allocation tables
  5795                                  		dw	112		; number of directory entries
  5796                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  5797                                  		db	0F9h		; media descriptor
  5798                                  		dw	3		; number of fat sectors
  5799                                  		dw	9		; sectors per track
  5800                                  		dw	2		; heads
  5801                                  		dw	0		; hidden sector count (low word)
  5802                                  		dw	0		; hidden sector (high)
  5803                                  		dw	0		; number of sectors (low)
  5804                                  		dw	0		; number of sectors (high)
  5805                                  		; 09/12/2023
  5806                                  		; FAT32 extensions (to BDS)
  5807                                  		times	28 db 0
  5808                                  		;
  5809                                  		db 90h
  5810                                  ;align 2
  5811                                  
  5812                                  ;align 2
  5813                                  ;BPB144:
  5814                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  5815                                  ;
  5816                                  ;		dw	512		; physical sector size in bytes
  5817                                  ;		db	1		; sectors/allocation unit
  5818                                  ;		dw	1		; reserved sectors for dos
  5819                                  ;		db	2		; number of allocation tables
  5820                                  ;		dw	224		; number of directory entries
  5821                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  5822                                  ;		db	0F0h		; media descriptor
  5823                                  ;		dw	9		; number of fat sectors
  5824                                  ;		dw	18		; sectors per track
  5825                                  ;		dw	2		; heads
  5826                                  ;		dw	0		; hidden sector count (low word)
  5827                                  ;		dw	0		; hidden sector (high)
  5828                                  ;		dw	0		; number of sectors (low)
  5829                                  ;		dw	0		; number of sectors (high)
  5830                                  ;
  5831                                  ;		db 90h
  5832                                  ;align 2
  5833                                  
  5834                                  BPB288:
  5835                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  5836                                  		; 3.5" diskettes - 2.88 MB ;	 
  5837                                  		dw	512		; physical sector size in bytes
  5838                                  		db	2		; sectors/allocation unit
  5839                                  		dw	1		; reserved sectors for dos
  5840                                  		db	2		; number of allocation tables
  5841                                  		dw	240		; number of directory entries
  5842                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  5843                                  		db	0F0h		; media descriptor
  5844                                  		dw	3		; number of fat sectors
  5845                                  		dw	9		; sectors per track
  5846                                  		dw	2		; heads
  5847                                  		dw	0		; hidden sector count (low word)
  5848                                  		dw	0		; hidden sector (high)
  5849                                  		dw	0		; number of sectors (low)
  5850                                  		dw	0		; number of sectors (high)
  5851                                  		; 09/12/2023
  5852                                  		; FAT32 extensions (to BDS)
  5853                                  		times	28 db 0
  5854                                  		;
  5855                                  		db 90h
  5856                                  ;align 2
  5857                                  
  5858                                  %endif
  5859                                  
  5860                                  ; ----------------------------------------------------------------------------
  5861                                  					; align	2
  5862                                  ; 09/12/2022
  5863                                  %if 0
  5864                                  bpbtable:	dw bpb48t		; 48tpi	drives
  5865                                  		dw bpb96t		; 96tpi	drives
  5866                                  		dw bpb35		; 3.5" drives
  5867                                  		dw bpb35		; unused 8" diskette
  5868                                  		dw bpb35		; unused 8" diskette
  5869                                  		dw bpb35		; used for hard	disk
  5870                                  		dw bpb35		; used for tape	drive
  5871                                  		dw bpb35		; FFOTHER
  5872                                  		dw bpb35		; ERIMO
  5873                                  		dw bpb288		; 2.88MB drive
  5874                                  		;
  5875                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  5876                                  %endif
  5877                                  
  5878                                  ; 13/12/2022
  5879                                  %if 0
  5880                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  5881                                  		dw BPB96T		; 96tpi	drives
  5882                                  		dw BPB35		; 3.5" drives
  5883                                  		dw BPB35		; unused 8" diskette
  5884                                  		dw BPB35		; unused 8" diskette
  5885                                  		dw BPB35		; used for hard	disk
  5886                                  		dw BPB35		; used for tape	drive
  5887                                  		dw BPB35		; FFOTHER
  5888                                  		dw BPB35		; ERIMO
  5889                                  		dw BPB288		; 2.88MB drive
  5890                                  		;
  5891                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  5892                                  
  5893                                  %endif
  5894                                  
  5895                                  ; ----------------------------------------------------------------------------
  5896                                  
  5897                                  ;	entry point to call utility functions in Bios_Code. At this time,
  5898                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  5899                                  ;	  will not yet be moved to its final resting place, so we know
  5900                                  ;	  it'll be low.
  5901                                  ;
  5902                                  ;	to use this function, do a "push cs" and load bp with the offset of
  5903                                  ;	  the function you want to call in Bios_Code. This routine will
  5904                                  ;	  push the address of a retf in Bios_Code onto the stack which
  5905                                  ;	  will get executed when the utility function finishes. It will
  5906                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  5907                                  ;	  and a retf
  5908                                  
  5909                                  ; 16/10/2022
  5910                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  5911                                  ; 09/12/2022
  5912                                  BC_RETF equ bc_retf
  5913                                  
  5914                                  ; 09/12/2023
  5915                                  ;PCDOS 7.1 IBMBIO.COM bc_retf offset = 0CAh (in BIOSCODE segment = 364h)
  5916                                  
  5917                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  5918                                  					; 2C7h:0C8h = 70h:2638h
  5919                                  					; 09/12/2023
  5920                                  					; 364h:0CAh = 70h:300Ah ; PCDOS 7.1
  5921 00001A6F [CA00]                  		dw BC_RETF		; dw 0CAh
  5922                                  
  5923                                  ; ----------------------------------------------------------------------------
  5924                                  
  5925                                  call_bios_code:	; proc far			
  5926 00001A71 2EFF36[6F1A]            		push	word [cs:addr_of_bcretf] 
  5927                                  					; set up near return to far return
  5928 00001A76 2EFF36[0406]            		push	word [cs:cdev+2] ; push Bios_Code segment
  5929 00001A7B 55                      		push	bp		; save offset of utility function
  5930 00001A7C CB                      		retf			; far jump to (DOS)BIOS code
  5931                                  
  5932                                  ; ----------------------------------------------------------------------------
  5933                                  
  5934                                  		; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  5935                                  		; 20/12/2022
  5936 00001A7D 00                      flp_drvs:	db 0
  5937                                  		; 11/12/2023
  5938                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1B81h)
  5939                                  firstcluster_hw: 
  5940 00001A7E 0000                    		dw 0	; 06/04/2024
  5941 00001A80 00                      Boot_Drv:	db 0
  5942                                  
  5943                                  ; ----------------------------------------------------------------------------
  5944                                  
  5945                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  5946                                  ;-----------------------------------------------------------------------------
  5947                                  ; PCDOS 7.1 CD BOOT option code 
  5948                                  ;-----------------------------------------------------------------------------
  5949                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1B84h)
  5950                                  
  5951                                  cd_boot_option:
  5952 00001A81 50                      		push	ax
  5953 00001A82 1E                      		push	ds
  5954 00001A83 06                      		push	es
  5955 00001A84 52                      		push	dx
  5956                                  cdbo_1:
  5957 00001A85 B401                    		mov	ah, 1
  5958 00001A87 CD16                    		int	16h			; KEYBOARD - status
  5959 00001A89 7406                    		jz	short cdbo_2
  5960 00001A8B 30E4                    		xor	ah, ah
  5961 00001A8D CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  5962                                  						; Return: AH = scan code, AL = character
  5963 00001A8F EBF4                    		jmp	short cdbo_1
  5964                                  cdbo_2:
  5965 00001A91 0E                      		push	cs
  5966 00001A92 1F                      		pop	ds
  5967 00001A93 BE[6B1B]                		mov	si, cd_boot_msg		; "Press the ENTER key to boot from CD"...
  5968 00001A96 AC                      		lodsb
  5969                                  cdbo_3:
  5970 00001A97 BB0700                  		mov	bx, 7
  5971 00001A9A B40E                    		mov	ah, 0Eh
  5972 00001A9C CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5973                                  						; AL = character, BH = display page (alpha modes)
  5974                                  						; BL = foreground color (graphics modes)
  5975 00001A9E AC                      		lodsb
  5976 00001A9F 08C0                    		or	al, al
  5977 00001AA1 75F4                    		jnz	short cdbo_3
  5978 00001AA3 B84000                  		mov	ax, 40h
  5979 00001AA6 8ED8                    		mov	ds, ax
  5980                                  		;mov	bx, [6Ch]		; 0:46Ch = Daily timer counter (4 bytes)
  5981                                  		; 09/12/2023
  5982 00001AA8 8B166C00                		mov	dx, [6Ch]
  5983 00001AAC 8B366E00                		mov	si, [6Eh]
  5984                                  wait_for_key:
  5985                                  		;push	bx
  5986                                  		;mov	bx, 7
  5987                                  		; bx = 7
  5988 00001AB0 B8080E                  		mov	ax, 0E08h
  5989 00001AB3 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5990                                  						; AL = character, BH = display page (alpha modes)
  5991                                  						; BL = foreground color (graphics modes)
  5992 00001AB5 B8200E                  		mov	ax, 0E20h
  5993 00001AB8 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5994                                  						; AL = character, BH = display page (alpha modes)
  5995                                  						; BL = foreground color (graphics modes)
  5996 00001ABA B8080E                  		mov	ax, 0E08h
  5997 00001ABD CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5998                                  						; AL = character, BH = display page (alpha modes)
  5999                                  						; BL = foreground color (graphics modes)
  6000                                  		;pop	bx
  6001                                  		;add	bx, 18			; 18.2 ticks per second
  6002                                  		; 09/12/2023
  6003 00001ABF 83C212                  		add	dx, 18
  6004 00001AC2 83D600                  		adc	si, 0			; next second (if carry flag is 1)
  6005                                  continue_to_wait:
  6006 00001AC5 B401                    		mov	ah, 1
  6007 00001AC7 CD16                    		int	16h			; KEYBOARD - status
  6008 00001AC9 741B                    		jz	short cdbo_5
  6009 00001ACB B400                    		mov	ah, 0
  6010 00001ACD CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  6011                                  						; Return: AH = scan code, AL = character
  6012                                  
  6013                                  		; 09/12/2023
  6014                                  		;cmp	ax, 11Bh ; ESC key
  6015                                  		;jz	short cdb0_7
  6016                                  ;cdbo_4:
  6017                                  		;push	ax ; *
  6018 00001ACF 89C2                    		mov	dx, ax ; *
  6019                                  
  6020                                  		; CRLF (next line)
  6021                                  		;mov	bx, 7
  6022                                  		; bx = 7
  6023 00001AD1 B80D0E                  		mov	ax, 0E0Dh
  6024 00001AD4 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6025                                  						; AL = character, BH = display page (alpha modes)
  6026                                  						; BL = foreground color (graphics modes)
  6027 00001AD6 B80A0E                  		mov	ax, 0E0Ah
  6028 00001AD9 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6029                                  						; AL = character, BH = display page (alpha modes)
  6030                                  						; BL = foreground color (graphics modes)
  6031                                  		; 09/12/2023
  6032                                  		;pop	ax ; *
  6033                                  			
  6034 00001ADB 81FA1B01                		cmp	dx, 11Bh
  6035                                  		;cmp	ax, 11Bh ; ESC key (to cancel CD/DVD boot)
  6036 00001ADF 7418                    		je	short cdbo_7
  6037                                  
  6038                                  cdbo_4:		; 10/12/2023
  6039 00001AE1 5A                      		pop	dx
  6040 00001AE2 07                      		pop	es
  6041 00001AE3 1F                      		pop	ds
  6042 00001AE4 58                      		pop	ax
  6043 00001AE5 C3                      		retn
  6044                                  cdbo_5:
  6045 00001AE6 3B366E00                		cmp	si, [6Eh]
  6046 00001AEA 7504                    		jnz	short cdbo_6
  6047                                  		; 09/12/2023
  6048 00001AEC 3B166C00                		cmp	dx, [6Ch]
  6049                                  		;cmp	bx, [6Ch]
  6050                                  cdbo_6:
  6051 00001AF0 73D3                    		jnb	short continue_to_wait
  6052 00001AF2 2EFE0E[6A1B]            		dec	byte [cs:time_counter]
  6053 00001AF7 75B7                    		jnz	short wait_for_key
  6054                                  cdbo_7:
  6055                                  		; 09/12/2023
  6056                                  		; CRLF (next line)
  6057                                  		;
  6058                                  		;mov	bx, 7
  6059                                  		;mov	ax, 0E0Dh
  6060                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6061                                  		;				; AL = character, BH = display page (alpha modes)
  6062                                  		;				; BL = foreground color (graphics modes)
  6063                                  		;mov	ax, 0E0Ah
  6064                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6065                                  		;				; AL = character, BH = display page (alpha modes)
  6066                                  		;				; BL = foreground color (graphics modes)
  6067                                  		
  6068 00001AF9 0E                      		push	cs
  6069 00001AFA 1F                      		pop	ds
  6070                                  		; 09/12/2023
  6071 00001AFB 1E                      		push	ds
  6072 00001AFC 07                      		pop	es
  6073                                  		; es = ds = cs
  6074                                  
  6075 00001AFD B8004B                  		mov	ax, 4B00h
  6076                                  		;xor	dl, dl
  6077                                  		; 09/12/2023
  6078 00001B00 31D2                    		xor	dx, dx
  6079                                  		; dl = disk drive = 0  ; fd
  6080                                  		;mov	si, 1C93h
  6081 00001B02 BE[571B]                		mov	si, empty_dap_buff
  6082 00001B05 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  6083                                  		; DS:SI = Specification packet filled		
  6084                                  
  6085                                  		;mov	dx, 80h
  6086                                  		;xor	ax, ax
  6087                                  		; 09/12/2023
  6088 00001B07 B81300                  		mov	ax, 19
  6089 00001B0A 89F7                    		mov	di, si	
  6090                                  		;mov	byte [si], 13h
  6091                                  		;mov	[si+1], al
  6092 00001B0C AB                      		stosw	
  6093                                  		;mov	[si+2], dx
  6094 00001B0D B080                    		mov	al, 80h
  6095 00001B0F AB                      		stosw
  6096 00001B10 89C2                    		mov	dx, ax
  6097                                  		;mov	[si+4], ax
  6098                                  		;mov	[si+6], ax
  6099                                  		;mov	[si+8], ax
  6100                                  		;mov	[si+0Ah], ax
  6101                                  		;mov	[si+0Ch], ax
  6102                                  		;mov	[si+0Eh], ax
  6103                                  		;mov	[si+10h], al
  6104                                  		;mov	[si+11h], al
  6105                                  		;mov	[si+12h], al
  6106 00001B12 B90F00                  		mov	cx, 15
  6107 00001B15 F3AA                    		rep	stosb
  6108                                  		; dl = disk drive = 80h ; hd
  6109 00001B17 B8004B                  		mov	ax, 4B00h
  6110 00001B1A CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  6111 00001B1C 31C0                    		xor	ax, ax
  6112                                  		; 09/12/2023
  6113                                  		;mov	dx, 80h
  6114                                  		; dx = 80h
  6115 00001B1E CD13                    		int	13h			; DISK - RESET DISK SYSTEM
  6116                                  						; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
  6117                                  		; 09/12/2023
  6118                                  		;push	cs
  6119                                  		;pop	es
  6120                                  		; es = ds = cs		
  6121                                  
  6122 00001B20 B80102                  		mov	ax, 201h
  6123                                  		;mov	bx, 152h
  6124 00001B23 BB[5201]                		mov	bx, disksector
  6125                                  		;mov	cx, 1
  6126                                  		; 09/12/2023
  6127 00001B26 41                      		inc	cx ; cx = 1
  6128                                  		;mov	dx, 80h
  6129                                  		; dx = 80h
  6130 00001B27 CD13                    		int	13h			; DISK - READ SECTORS INTO MEMORY
  6131                                  						; AL = number of sectors to read, CH = track, CL = sector
  6132                                  						; DH = head, DL = drive, ES:BX -> buffer to fill
  6133                                  						; Return: CF set on error, AH = status, AL = number of sectors read
  6134                                  		;jc	short cdbo_8
  6135                                  		; 10/12/2023
  6136 00001B29 72B6                    		jc	short cdbo_4
  6137                                  
  6138 00001B2B 2681BFFE0155AA          		cmp	word [es:bx+1FEh], 0AA55h
  6139                                  		;jz 	short cdbo_9
  6140                                  		; 10/12/2023
  6141 00001B32 75AD                    		jnz	short cdbo_4
  6142                                  ;cdbo_8:
  6143                                  		;jmp	short cdbo_4
  6144                                  ;cdbo_9:
  6145                                  		; 10/12/2023
  6146                                  		; (stack clearing -pop- is not necessary here, 
  6147                                  		;  PCDOS 7.1 boot sector will set stack pointer again)
  6148                                  		;pop	ax ; near call return address
  6149                                  		;pop	cx ; +++ ; ch = [MediaByte]
  6150                                  
  6151                                  		; 09/12/2023
  6152                                  		;push	cs
  6153                                  		;pop	ds
  6154                                  		; ds = cs
  6155 00001B34 31C0                    		xor	ax, ax	; 0
  6156 00001B36 BF007C                  		mov	di, 7C00h
  6157 00001B39 8EC0                    		mov	es, ax
  6158 00001B3B 89DE                    		mov	si, bx
  6159 00001B3D 06                      		push	es
  6160 00001B3E 57                      		push	di
  6161 00001B3F B90001                  		mov	cx, 100h ; 256
  6162                                  		; 10/12/2023
  6163                                  		;cld	; not necessary (direction flag is already cleared) 
  6164 00001B42 F3A5                    		rep movsw
  6165 00001B44 8ED8                    		mov	ds, ax
  6166 00001B46 BE7800                  		mov	si, 78h
  6167 00001B49 2EA1[121A]              		mov	ax, [cs:Orig_Int1Eh_Table]
  6168 00001B4D 8904                    		mov	[si], ax
  6169 00001B4F 2EA1[141A]              		mov	ax, [cs:Orig_Int1Eh_Table+2]
  6170 00001B53 894402                  		mov	[si+2], ax
  6171 00001B56 CB                      		retf
  6172                                  
  6173                                  ; ---------------------------------------------------------------------------
  6174                                  dap_buffer: ; 16/12/2023
  6175                                  
  6176 00001B57 13                      empty_dap_buff:	db 19
  6177                                  		;db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  ; db 18 dup(0)
  6178 00001B58 00<rep 12h>             		times 18 db 0
  6179 00001B6A 05                      time_counter:	db 5	; 5 seconds
  6180 00001B6B 0D0A                    cd_boot_msg:	db 0Dh,0Ah
  6181                                  		;db 'Press the ENTER key to boot from CD or DVD......',0
  6182                                  		; 09/12/2023
  6183 00001B6D 507265737320616E79-     		db 'Press any key to boot from CD or DVD ...',0
  6183 00001B76 206B657920746F2062-
  6183 00001B7F 6F6F742066726F6D20-
  6183 00001B88 4344206F7220445644-
  6183 00001B91 202E2E2E00         
  6184                                  
  6185                                  ; ----------------------------------------------------------------------------
  6186                                  
  6187                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0)
  6188                                  
  6189                                  ; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1)
  6190                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1CDAh)
  6191                                  
  6192                                  ;-----------------------------------------------------------------------------
  6193                                  ; entry point from boot sector
  6194                                  ;-----------------------------------------------------------------------------
  6195                                  
  6196                                  init:		; 27/12/2018
  6197                                  		; MSDOS 6.0 (MSINIT.ASM)
  6198                                  		;=============================================================
  6199                                  		;
  6200                                  		; entry from boot sector. the register contents are:
  6201                                  		;
  6202                                  		;   dl = int 13 drive number we booted from
  6203                                  		;   ch = media byte
  6204                                  		;   bx = first data sector on disk.
  6205                                  		;   ax = first data sector (high)
  6206                                  		;   di = sectors/fat for the boot media.
  6207                                  
  6208                                  		; 07/04/2018
  6209                                  		;=============================================================
  6210                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  6211                                                  ; DL = [bsDriveNumber]
  6212                                  		; DH = [bsMedia]
  6213                                  		; AX = [bsSectors] ; Total sectors
  6214                                  		; DS = 0, SS = 0
  6215                                  		; BP = 7C00h
  6216                                  
  6217                                  		; 10/12/2023
  6218                                  		; Retro DOS v5.0 (IBMBIO.COM)
  6219                                  		;=============================================================
  6220                                  		; PCDOS 7.1 IBMBIO.COM - registers from MSLOAD section
  6221                                                  ; DL = [BootDrive]
  6222                                  		; CH = [MediaByte]
  6223                                  		; AX:BX = First data Sector
  6224                                  		; DS:SI = Original INT 1Eh table address
  6225                                  		;
  6226                                  		; Stack: INT 1Eh vector (0:78h) !not used! (dword [sp])
  6227                                  		;	 INT 1Eh table address !not used! (dword [sp+4])
  6228                                  		; DI = 78h !not used!
  6229                                   
  6230                                  		; 11/12/2023
  6231                                  		;cli	; not necessary at this stage
  6232                                  
  6233                                  		; 10/12/2023
  6234                                  		;mov	[cs:Orig_Int1Eh_Table+2], ds
  6235                                  		;mov	[cs:Orig_Int1Eh_Table], si
  6236 00001B96 1E                      		push	ds
  6237 00001B97 07                      		pop	es
  6238 00001B98 0E                      		push	cs
  6239 00001B99 1F                      		pop	ds
  6240 00001B9A 8C06[141A]              		mov	[Orig_Int1Eh_Table+2], es
  6241 00001B9E 8936[121A]              		mov	[Orig_Int1Eh_Table], si
  6242                                  
  6243                                  		; 21/12/2022
  6244                                  		; ds = 0 (?)
  6245                                  		;push	ax
  6246                                  		;xor	ax, ax
  6247                                  		;mov	ds, ax
  6248                                  		;pop	ax
  6249                                  
  6250                                  ; 02/10/2022
  6251                                  ; ------------------------------------------------------------------------------
  6252                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  6253                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  6254                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  6255                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  6256                                  ;	moves kernel to segment 070h at first, then sets diskette parameters
  6257                                  ;	at segment 50h (while MSDOS 5.0 boot sector sets this).
  6258                                  ; ------------------------------------------------------------------------------
  6259                                  
  6260                                  ; msload will check the extended boot record and set ax, bx accordingly.
  6261                                  
  6262                                  ;	msload passes a 32 bit sector number hi word in ax and low in bx
  6263                                  ;	save this in cs:bios_h and cs:bios_l. this is for the start of
  6264                                  ;	data sector of the bios.
  6265                                  
  6266                                  		;mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  6267                                  		;mov	[cs:bios_l], bx
  6268                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6269                                  		;mov	[cs:First_Data_Sector+2], ax
  6270                                  		;mov	[cs:First_Data_Sector], bx
  6271                                  		;mov	[cs:Boot_Drv], dl
  6272                                  		; ds = cs
  6273 00001BA2 A3[FE19]                		mov	[First_Data_Sector+2], ax
  6274 00001BA5 891E[FC19]              		mov	[First_Data_Sector], bx
  6275 00001BA9 8816[801A]              		mov	[Boot_Drv], dl
  6276                                  	
  6277                                  ; with the following information from msload, we don't need the
  6278                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  6279                                  ;     limitation of msbio.com file.
  6280                                  
  6281 00001BAD 0E                      		push	cs		; Save a peck of interrupt vectors...
  6282 00001BAE 07                      		pop	es
  6283                                  		
  6284 00001BAF 51                      		push	cx ; +++ ; ch = [MediaByte]
  6285                                  		;push	di ; *! (not necessary) ; 10/12/2023
  6286                                  
  6287                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6288 00001BB0 FC                      		cld	; (may not be necessary)
  6289                                  		
  6290 00001BB1 31C0                    		xor	ax, ax
  6291 00001BB3 8ED8                    		mov	ds, ax	; ds = 0
  6292                                  
  6293                                  		; 06/04/2024
  6294 00001BB5 50                      		push	ax ; push ds ; 0
  6295                                  
  6296                                  		;mov	ax, 544h	; SYSINIT segment
  6297 00001BB6 B80405                  		mov	ax, SYSINITSEG
  6298                                  
  6299                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1D06h)
  6300                                  
  6301                                  		; check (1st sector) of the root directory -of BOOT CD-
  6302                                  		; for special names (as boot option signature)
  6303                                  
  6304 00001BB9 BE4005                  		mov	si, 540h  ; ROOT DIRECTORY BUFFER offset 40h 
  6305                                  				  ; (BOOT DRV's root directory the 3rd entry)
  6306                                  chk_boot_hdnoz:
  6307 00001BBC 803C00                  		cmp	byte [si], 0
  6308 00001BBF 7436                    		jz	short chk_no_logo_noz
  6309 00001BC1 813C5F42                		cmp	word [si], 425Fh ; '_BOOT_HDNOZ'
  6310 00001BC5 7527                    		jnz	short chk_next_1
  6311 00001BC7 817C024F4F              		cmp	word [si+2], 4F4Fh ; 'OO'
  6312 00001BCC 7520                    		jnz	short chk_next_1
  6313 00001BCE 817C04545F              		cmp	word [si+4], 5F54h
  6314 00001BD3 7519                    		jnz	short chk_next_1
  6315 00001BD5 817C064844              		cmp	word [si+6], 4448h ; 'HD'
  6316 00001BDA 7512                    		jnz	short chk_next_1
  6317 00001BDC 817C084E4F              		cmp	word [si+8], 4F4Eh
  6318 00001BE1 750B                    		jnz	short chk_next_1
  6319 00001BE3 807C0A5A                		cmp	byte [si+0Ah], 5Ah ; 'Z'
  6320 00001BE7 7505                    		jnz	short chk_next_1
  6321 00001BE9 E895FE                  		call	cd_boot_option
  6322 00001BEC EB09                    		jmp	short chk_no_logo_noz
  6323                                  chk_next_1:
  6324 00001BEE 83C620                  		add	si, 32	; (next entry)
  6325 00001BF1 81FE0007                		cmp	si, 700h
  6326 00001BF5 72C5                    		jb	short chk_boot_hdnoz
  6327                                  chk_no_logo_noz:
  6328 00001BF7 BE4005                  		mov	si, 540h  ; (BOOT DRV's root directory the 3rd entry)
  6329                                  chk_no_logo_noz2_nxt:
  6330 00001BFA 803C00                  		cmp	byte [si], 0
  6331 00001BFD 7431                    		jz	short write_start_msg
  6332 00001BFF 813C4E4F                		cmp	word [si], 4F4Eh ; 'NO_LOGO NOZ'
  6333 00001C03 7522                    		jnz	short chk_next_2
  6334 00001C05 817C025F4C              		cmp	word [si+2], 4C5Fh
  6335 00001C0A 751B                    		jnz	short chk_next_2
  6336 00001C0C 817C044F47              		cmp	word [si+4], 474Fh
  6337 00001C11 7514                    		jnz	short chk_next_2
  6338 00001C13 817C064F20              		cmp	word [si+6], 204Fh
  6339 00001C18 750D                    		jnz	short chk_next_2
  6340 00001C1A 817C084E4F              		cmp	word [si+8], 4F4Eh
  6341 00001C1F 7506                    		jnz	short chk_next_2
  6342 00001C21 807C0A5A                		cmp	byte [si+0Ah], 5Ah
  6343 00001C25 741C                    		jz      short startmsg_ok
  6344                                  chk_next_2:
  6345 00001C27 83C620                  		add	si, 32	; (next entry)
  6346 00001C2A 81FE0007                		cmp	si, 700h
  6347 00001C2E 72CA                    		jb	short chk_no_logo_noz2_nxt
  6348                                  write_start_msg:
  6349 00001C30 8ED8                    		mov	ds, ax	; SYSINIT segment
  6350 00001C32 BE[C751]                		mov	si, StartMsg	; "Starting PC DOS...\r\n\n"
  6351                                  startmsg_nxt_chr:
  6352 00001C35 AC                      		lodsb
  6353 00001C36 08C0                    		or	al, al
  6354 00001C38 7409                    		jz	short startmsg_ok
  6355 00001C3A B40E                    		mov     ah, 0Eh
  6356 00001C3C BB0700                  		mov	bx, 7
  6357 00001C3F CD10                    		int	10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6358                                  					; AL = character, BH = display page (alpha modes)
  6359                                  					; BL = foreground color (graphics modes)
  6360 00001C41 EBF2                    		jmp	short startmsg_nxt_chr
  6361                                  startmsg_ok:
  6362                                  		; 06/04/2024
  6363 00001C43 1F                      		pop	ds ; 0
  6364                                  
  6365                                  		; 10/12/2023
  6366                                  		; ds = 0
  6367                                  
  6368                                  		; 21/12/2022
  6369                                  		; ds = 0 (?)
  6370                                  		; 24/12/2022
  6371                                  		; ds = cs
  6372                                  		;xor	cx, cx
  6373                                  		;mov	ds, cx
  6374                                  		; ds = 0
  6375                                  
  6376                                  		;mov	cl, 5
  6377                                  		; 10/12/2023
  6378 00001C44 B90500                  		mov	cx, 5		; NUMROMVECTORS
  6379                                  					; no. of rom vectors to	be saved
  6380                                  		;mov	si, offset RomVectors ; point to list of int vectors
  6381 00001C47 BE[0001]                		mov	si, RomVectors
  6382                                  
  6383                                  		; 10/12/2023
  6384 00001C4A FA                      		cli
  6385                                  next_int_:		
  6386 00001C4B 2E                      		cs	; 16/10/2022
  6387 00001C4C AC                      		lodsb		
  6388                                  		;lods	byte ptr cs:[si] ; cs lodsb
  6389 00001C4D 98                      		cbw			; ax = interrupt number
  6390 00001C4E D1E0                    		shl	ax, 1
  6391 00001C50 D1E0                    		shl	ax, 1		; int no * 4
  6392 00001C52 89C7                    		mov	di, ax		; interrupt vector address
  6393 00001C54 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  6394                                  					; saving address in di
  6395                                  		;lodsw			; movsw
  6396                                  		;stosw
  6397                                  		;lodsw			; movsw
  6398                                  		;stosw			; save the vector
  6399                                  		; 21/04/2024
  6400 00001C56 A5                      		movsw
  6401 00001C57 A5                      		movsw
  6402                                  
  6403 00001C58 87F7                    		xchg	si, di
  6404 00001C5A E2EF                    		loop	next_int_
  6405                                  		
  6406                                  		; 10/12/2023
  6407                                  		;pop	di  ; *!
  6408                                  		;pop	cx ; +++ ; ch = [MediaByte]
  6409                                  
  6410                                  ; we need to save int13 in two places in case we are running on an at.
  6411                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  6412                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  6413                                  ; rom int13 routine, we must have that rom address also stored away.
  6414                                  
  6415                                  		; 21/12/2022
  6416                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  6417                                  		;mov	[cs:Orig13], ax
  6418                                  		;mov	ax, [cs:Old13+2]
  6419                                  		;mov	[cs:Orig13+2], ax
  6420                                  
  6421                                  		; 16/10/2022
  6422 00001C5C C7064C00[ED06]          		mov	word [13h*4], block13
  6423                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  6424                                  					; set up int 13	for new	action
  6425 00001C62 8C0E4E00                		mov	[13h*4+2], cs
  6426                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  6427 00001C66 C7065400[9907]          		mov	word [15h*4], Int15
  6428                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  6429                                  					; set up int 15	for new	action
  6430 00001C6C 8C0E5600                		mov	[15h*4+2], cs
  6431                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  6432 00001C70 C7066400[5907]          		mov	word [19h*4], int19
  6433                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  6434                                  					; set up int 19	for new	action
  6435 00001C76 8C0E6600                		mov	[19h*4+2], cs
  6436                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  6437                                  
  6438                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6439 00001C7A A16800                  		mov	ax, [68h]	; 1Ah*4
  6440 00001C7D 8B3E6A00                		mov	di, [6Ah]	; 1Ah*4+2
  6441 00001C81 C7066800[AF06]          		mov	word [68h], Int1A
  6442 00001C87 8C0E6A00                		mov	[6Ah], cs
  6443                                  
  6444                                  		; 21/12/2022
  6445 00001C8B 0E                      		push	cs
  6446 00001C8C 1F                      		pop	ds
  6447                                  
  6448                                  		; 10/12/2023
  6449 00001C8D A3[AB06]                		mov	[Orig1A], ax
  6450 00001C90 893E[AD06]              		mov	[Orig1A+2], di
  6451                                  
  6452 00001C94 A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  6453 00001C97 A3[B400]                		mov	[Orig13], ax
  6454 00001C9A A1[0801]                		mov	ax, [Old13+2]
  6455 00001C9D A3[B600]                		mov	[Orig13+2], ax
  6456                                  					;
  6457 00001CA0 FB                      		sti
  6458 00001CA1 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  6459                                  					; Return: AX = equipment flag bits
  6460                                  		; 10/12/2023
  6461                                  		;jmp	short chk_fd_count
  6462                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1DF7h) ; *!!*
  6463                                  		; ((signature))
  6464                                  		;push	dx		; 52h ; 'R'
  6465                                  		;push	ax		; 50h ; 'P'
  6466                                  		;push	bx		; 53h ; 'S'
  6467                                  
  6468                                  ; we have to support a system that does not have any diskette
  6469                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  6470                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  6471                                  ; otherwise, the system has only hardfiles.
  6472                                  ;
  6473                                  ; important thing is that still, for compatibility reason, the drive letter
  6474                                  ; for the hardfiles start from "c". so, we still need to allocate dummy bds
  6475                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  6476                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  6477                                  ; drives will get "invalid drive letter ..." message. we are going to
  6478                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  6479                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  6480                                  
  6481                                  ; check the register returned by the equipment determination interrupt
  6482                                  ; we have to handle the case of no diskettes in the system by faking
  6483                                  ; two dummy drives.
  6484                                  ;
  6485                                  ; if the register indicates that we do have floppy drives we don't need
  6486                                  ; to do anything special.
  6487                                  ;
  6488                                  ; if the register indicates that we don't have any floppy drives then
  6489                                  ; what we need to do is set the fakefloppydrv variable, change the
  6490                                  ; register to say that we do have floppy drives and then go to execute
  6491                                  ; the code which starts at notsingle. this is because we can skip the
  6492                                  ; code given below which tries to find if there are one or two drives
  6493                                  ; since we already know about this.
  6494                                  
  6495                                  chk_fd_count:	; 10/12/2023
  6496                                  		;or	ax, 1	; *!!*
  6497                                  		
  6498                                  		; 12/12/2022
  6499 00001CA3 A801                    		test	al, 1
  6500                                  		;test	ax, 1		; floppy drives	present	?
  6501 00001CA5 7525                    		jnz	short normalfloppydrv ;	yes.
  6502                                  
  6503                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  6504                                  ; whether it is an old ROM BIOS or a new one
  6505                                  ;
  6506                                  ; WARNING !!!
  6507                                  ;
  6508                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  6509                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  6510                                  
  6511                                  		; 10/12/2023
  6512                                  		; ((cx is already on top of the stack))
  6513                                  		;push	cx	; +++ ; ch = [MediaByte]
  6514                                  		;push	bx	; not necessary
  6515 00001CA7 50                      		push	ax
  6516 00001CA8 52                      		push	dx
  6517                                  		;push	di	; not necessary
  6518 00001CA9 06                      		push	es
  6519                                  
  6520 00001CAA B408                    		mov	ah, 8
  6521 00001CAC B200                    		mov	dl, 0
  6522 00001CAE CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6523                                  					; DL = drive number
  6524                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6525                                  					; DL = number of consecutive drives
  6526                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6527 00001CB0 7204                    		jc	short _gdskp_error
  6528                                  		;mov	[cs:flp_drvs], dl
  6529                                  		; 21/12/2022
  6530                                  		; ds = cs
  6531 00001CB2 8816[7D1A]              		mov	[flp_drvs], dl
  6532                                  _gdskp_error:	
  6533                                  		; 10/12/2023
  6534 00001CB6 07                      		pop	es
  6535                                  		;pop	di
  6536 00001CB7 5A                      		pop	dx
  6537 00001CB8 58                      		pop	ax
  6538                                  		;pop	bx
  6539 00001CB9 59                      		pop	cx	; +++ ; ch = [MediaByte]
  6540 00001CBA 7210                    		jc	short normalfloppydrv
  6541                                  					; if error it is an old ROM BIOS
  6542                                  					; so, lets assume that ROM BIOS lied
  6543                                  		; 21/12/2022
  6544                                  		;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  6545                                  		;jz	short _set_fake_flpdrv
  6546                                  		;mov	al, [cs:flp_drvs]
  6547 00001CBC A0[7D1A]                		mov	al, [flp_drvs]
  6548 00001CBF 08C0                    		or	al, al		; number of drvs == 0?
  6549 00001CC1 7403                    		jz	short _set_fake_flpdrv
  6550                                  
  6551                                  		;dec	al		; make it zero based
  6552                                  		; 18/12/2022
  6553 00001CC3 48                      		dec	ax
  6554 00001CC4 EB0A                    		jmp	short got_num_flp_drvs
  6555                                  ; ----------------------------------------------------------------------------
  6556                                  
  6557                                  _set_fake_flpdrv:
  6558                                  		; 21/12/2022
  6559                                  		;mov	ax, 1
  6560                                  		; 10/12/2023
  6561 00001CC6 40                      		inc	ax ; al = 1
  6562 00001CC7 A2[111A]                		mov	[fakefloppydrv], al ; 1
  6563                                  		;mov	byte [cs:fakefloppydrv], 1
  6564                                  		;			; we don't have any floppy drives.
  6565                                  		;mov	ax, 1
  6566 00001CCA EB09                    		jmp	short settwodrive ; well then set it for two drives!
  6567                                  ; ----------------------------------------------------------------------------
  6568                                  
  6569                                  normalfloppydrv:			; yes, bit 0 is 1.			
  6570 00001CCC D0C0                    		rol	al, 1		; there	exist floppy drives.
  6571 00001CCE D0C0                    		rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  6572                                  got_num_flp_drvs:			
  6573                                  		;and	ax, 3		; only look at bits 0 &	1
  6574                                  		; 18/12/2022
  6575 00001CD0 2403                    		and	al, 3
  6576 00001CD2 7505                    		jnz	short notsingle	; zero means single drive system
  6577 00001CD4 40                      		inc	ax		; pretend it's a two drive system
  6578                                  settwodrive:				; set this to two fakedrives
  6579                                  		; 21/12/2022
  6580                                  		; ds = cs
  6581 00001CD5 FE06[7800]              		inc	byte [single]
  6582                                  		;inc	byte [cs:single] ; remember this
  6583                                  notsingle:				
  6584 00001CD9 40                      		inc	ax		; ax has number	of drives, 2-4
  6585                                  					; is also 0 indexed boot drive if we
  6586                                  					; booted off hard file
  6587 00001CDA 88C1                    		mov	cl, al		; ch is	fat id,	cl # floppies
  6588                                  
  6589                                  ; 16/10/2022
  6590                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  6591                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  6592                                  BRKADR	EQU	1BH * 4	; 6CH, 1BH break vector address
  6593                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  6594                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  6595                                  SEC9	EQU	522h	; address of disk parameters
  6596                                  CHROUT	EQU	29h
  6597                                  LSTDRV	EQU     504h
  6598                                  
  6599                                  ; determine whether we booted from floppy or hard disk...
  6600                                  
  6601 00001CDC F6C280                  		test	dl, 80h		; boot from floppy ?
  6602 00001CDF 7505                    		jnz	short gothrd	; no.
  6603 00001CE1 31C0                    		xor	ax, ax		; indicate boot	from drive a
  6604                                  		; 10/12/2023
  6605 00001CE3 A2[801A]                		mov     [Boot_Drv], al
  6606                                  gothrd:					
  6607 00001CE6 31D2                    		xor	dx, dx ; 0	; ax = 0-based drive we	booted from
  6608                                  					; bios_l, bios_h set.
  6609                                  					; cl = number of floppies including fake one
  6610                                  					; ch = media byte
  6611 00001CE8 FA                      		cli
  6612 00001CE9 8ED2                    		mov	ss, dx		; set stack segment and stack pointer
  6613 00001CEB BC0007                  		mov	sp, 700h
  6614 00001CEE FB                      		sti
  6615                                  
  6616 00001CEF 51                      		push	cx ; *		; save number of floppies and media byte
  6617 00001CF0 88EC                    		mov	ah, ch		; FAT ID to AH
  6618 00001CF2 50                      		push	ax ; **		; save boot drive number and media byte
  6619                                  		
  6620                                  ; let model_byte, secondary_model_byte be set here!!!
  6621                                  
  6622 00001CF3 B4C0                    		mov	ah, 0C0h
  6623 00001CF5 CD15                    		int	15h		; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  6624 00001CF7 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  6625 00001CF9 80FC00                  		cmp	ah, 0
  6626 00001CFC 7510                    		jnz	short no_rom_system_conf
  6627                                  
  6628                                  		; 21/12/2022
  6629                                  		; ds = cs
  6630 00001CFE 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  6631 00001D02 A2[AF05]                		mov	[model_byte], al
  6632                                  		;mov	[cs:model_byte], al
  6633                                  					; get/save model byte
  6634 00001D05 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  6635 00001D09 A2[B005]                		mov	[secondary_model_byte], al
  6636                                  		;mov	[cs:secondary_model_byte], al
  6637                                  					; get/save secondary model byte
  6638 00001D0C EB0C                    		jmp	short turn_timer_on
  6639                                  ;-----------------------------------------------------------------------------
  6640                                  
  6641                                  no_rom_system_conf:			
  6642 00001D0E BEFFFF                  		mov	si, 0FFFFh
  6643 00001D11 8EC6                    		mov	es, si
  6644                                  		; 21/12/2022
  6645 00001D13 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  6646 00001D17 A2[AF05]                		mov	[model_byte], al
  6647                                  		;mov	[cs:model_byte], al ; save model byte
  6648                                  turn_timer_on:				
  6649 00001D1A B020                    		mov	al, 20h	; ' '   ; turn on the timer
  6650 00001D1C E620                    		out	20h, al		; Interrupt controller,	8259A.
  6651                                  					; AKPORT
  6652                                  
  6653                                  ; some olivetti m24 machines have an 8530 serial communications
  6654                                  ; chip installed at io address 50h and 52h. if we're running
  6655                                  ; on one of those, we must inhibit the normal aux port initialization
  6656                                  
  6657                                  		; 21/12/2022
  6658                                  		; ds = cs
  6659 00001D1E 803E[AF05]00            		cmp	byte [model_byte], 0
  6660                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  6661 00001D23 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  6662                                  					; (except olivetti m24)
  6663 00001D25 E466                    		in	al, 66h		; is 8530 installed?
  6664 00001D27 A820                    		test	al, 20h
  6665 00001D29 740A                    		jz	short not_olivetti_m24 ; we're done if not
  6666 00001D2B B00F                    		mov	al, 0Fh		; double check
  6667 00001D2D E650                    		out	50h, al
  6668 00001D2F E450                    		in	al, 50h
  6669 00001D31 A801                    		test	al, 1		; this test was	copied from olivetti
  6670 00001D33 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  6671                                  
  6672                                  not_olivetti_m24:			
  6673 00001D35 B003                    		mov	al, 3		; init com4
  6674 00001D37 E8F00A                  		call	aux_init
  6675 00001D3A B002                    		mov	al, 2		; init com3
  6676 00001D3C E8EB0A                  		call	aux_init
  6677 00001D3F B001                    		mov	al, 1		; init com2
  6678 00001D41 E8E60A                  		call	aux_init
  6679 00001D44 30C0                    		xor	al, al		; init com1
  6680 00001D46 E8E10A                  		call	aux_init
  6681                                  
  6682                                  skip_aux_port_init:			
  6683 00001D49 B002                    		mov	al, 2		; init lpt3
  6684 00001D4B E8D40A                  		call	print_init
  6685 00001D4E B001                    		mov	al, 1		; init lpt2
  6686 00001D50 E8CF0A                  		call	print_init
  6687 00001D53 30C0                    		xor	al, al		; init lpt1
  6688 00001D55 E8CA0A                  		call	print_init
  6689                                  		
  6690 00001D58 31D2                    		xor	dx, dx ; 0
  6691 00001D5A 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  6692 00001D5C 8EC2                    		mov	es, dx
  6693                                  
  6694                                  		; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6695 00001D5E BF3405                  		mov	di, 534h	; offset INITSPOT
  6696                                  		;mov	di, INITSPOT	; 0534h
  6697                                  					; IBMDOS.COM's first cluster - high word
  6698                                  					; 520h (the 2nd entry of root dir) + 14h
  6699 00001D61 8B05                    		mov	ax, [di]
  6700                                  		;mov	[firstcluster_hw], ax
  6701                                  		; 06/04/2024
  6702 00001D63 2EA3[7E1A]              		mov	[cs:firstcluster_hw], ax
  6703                                  
  6704 00001D67 31C0                    		xor	ax, ax
  6705                                  		; 11/12/2023
  6706                                  		; 16/10/2022
  6707                                  		;mov	di, INITSPOT	; 0534h
  6708                                  		;;mov	di, 534h	; INITSPOT (0000h:0534h)
  6709                                  					; IBM wants 4 zeros here
  6710 00001D69 AB                      		stosw
  6711 00001D6A AB                      		stosw
  6712 00001D6B 8CC8                    		mov	ax, cs		; fetch	segment
  6713 00001D6D C7066C00[0E06]          		mov	word [BRKADR], cbreak
  6714                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  6715                                  					; break	entry point
  6716 00001D73 A36E00                  		mov	[BRKADR+2], ax		
  6717                                  		;mov	ds:6Eh,	ax	; vector for break
  6718 00001D76 C706A400[8206]          		mov	word [CHROUT*4], outchr
  6719                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  6720 00001D7C A3A600                  		mov	[CHROUT*4+2], ax
  6721                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  6722 00001D7F BF0400                  		mov	di, 4
  6723 00001D82 BB[1406]                		mov	bx, intret ; 19/10/2022
  6724                                  		;mov	bx, offset intret ; intret (cs:intret)
  6725                                  					; will initialize rest of interrupts
  6726 00001D85 93                      		xchg	ax, bx
  6727 00001D86 AB                      		stosw			; location 4
  6728 00001D87 93                      		xchg	ax, bx		; cs:
  6729 00001D88 AB                      		stosw			; int 1	; location 6
  6730 00001D89 83C704                  		add	di, 4		; skip int 2
  6731 00001D8C 93                      		xchg	ax, bx
  6732 00001D8D AB                      		stosw			; location 12
  6733 00001D8E 93                      		xchg	ax, bx		; cs:
  6734 00001D8F AB                      		stosw			; int 3	; location 14
  6735 00001D90 93                      		xchg	ax, bx
  6736 00001D91 AB                      		stosw			; location 16
  6737 00001D92 93                      		xchg	ax, bx		; cs:
  6738 00001D93 AB                      		stosw			; int 4	; location 18
  6739 00001D94 89160005                		mov	[0500h], dx
  6740                                  		;mov	ds:500h, dx	; set print screen & break = 0
  6741 00001D98 89160405                		mov	[LSTDRV], dx	; [0504h]
  6742                                  		;mov	ds:504h, dx	; clean	out last drive spec
  6743                                  
  6744                                  ; we need to initalize the cs:motorstartup variable from the disk
  6745                                  ; parameter table at sec9. the offsets in this table are defined in
  6746                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  6747                                  
  6748 00001D9C A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  6749                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  6750                                  					; [522h+0Ah]
  6751                                  		; 21/12/2022
  6752                                  		; ds = 0
  6753                                  
  6754 00001D9F 2EA2[2601]              		mov	[cs:motorstartup], al
  6755 00001DA3 2E803E[AF05]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  6756 00001DA9 720B                    		jb	short no_diddle	; no
  6757 00001DAB C7062B050F02            		mov	word [SEC9+09h], 20Fh
  6758                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  6759                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  6760 00001DB1 C6062205DF              		mov	byte [SEC9+0], 0DFh
  6761                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  6762                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  6763                                  no_diddle:				
  6764 00001DB6 CD12                    		int	12h		; MEMORY SIZE -
  6765                                  					; Return: AX = number of contiguous 1K blocks of memory
  6766 00001DB8 B106                    		mov	cl, 6
  6767 00001DBA D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  6768                                  		
  6769                                  		; 21/12/2022
  6770                                  		;pop	cx
  6771                                  		;mov	[cs:drvfat], cx ; save drive to load dos, and fat id
  6772                                  		
  6773 00001DBC 50                      		push	ax ; ***	; save real top	of memory
  6774                                  
  6775                                  ;M068 - BEGIN
  6776                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  6777                                  
  6778                                  		; 21/12/2022
  6779                                  		; ds = 0
  6780                                  		;push	ds
  6781                                  		;push	bx		; pushes not required but since this
  6782                                  		;			; happens to be a last minute change
  6783                                  		;			; & since it is only init code.
  6784                                  		;xor	bx, bx
  6785                                  		;mov	ds, bx
  6786                                  
  6787                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  6788 00001DBD 8B1EBC00                		mov	bx, [2Fh*4]
  6789                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  6790 00001DC1 8E1EBE00                		mov	ds, [2Fh*4+2]
  6791 00001DC5 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  6792                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  6793 00001DCA 750F                    		jnz	short SkipRPL
  6794 00001DCC 807F054C                		cmp	byte [bx+5], 'L'
  6795                                  		;cmp	byte ptr [bx+5], 'L'
  6796 00001DD0 7509                    		jnz	short SkipRPL
  6797 00001DD2 89C2                    		mov	dx, ax		; get TOM into DX
  6798 00001DD4 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  6799 00001DD7 CD2F                    		int	2Fh		; Get new TOM from any RPL
  6800 00001DD9 89D0                    		mov	ax, dx
  6801                                  SkipRPL:
  6802                                  		; 21/12/2022				
  6803                                  		;pop	bx
  6804                                  		;pop	ds
  6805                                  ;M068 - END
  6806                                  		; 21/12/2022
  6807 00001DDB 0E                      		push	cs
  6808 00001DDC 1F                      		pop	ds
  6809                                  
  6810 00001DDD 83E840                  		sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  6811                                  		; 21/12/2022
  6812 00001DE0 A3[021A]                		mov	[fatloc], ax
  6813                                  		;mov	[cs:fatloc], ax	; location to read fat
  6814                                  		
  6815 00001DE3 83E840                  		sub	ax, 64
  6816 00001DE6 A3[041A]                		mov	[init_bootseg], ax ; 21/12/2022
  6817                                  		;mov	[cs:init_bootseg], ax
  6818 00001DE9 58                      		pop	ax ; ***	; get back real top of memory for
  6819                                  
  6820                                  		; 21/12/2022
  6821 00001DEA 59                      		pop	cx ; **
  6822 00001DEB 890E[FA19]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  6823                                  
  6824                                  		;;mov	dx, 46Dh	; SYSINIT segment
  6825                                  		;mov	dx, 544h	; 10/12/2023 (PCDOS 7.1 IBMBIO.COM)	
  6826 00001DEF BA0405                  		mov	dx, SYSINITSEG	; 17/10/2022
  6827 00001DF2 8EDA                    		mov	ds, dx
  6828                                  
  6829                                  ; set pointer to resident device driver chain
  6830                                  
  6831                                  		; 17/10/2022
  6832 00001DF4 C706[7502][2300]        		mov	word [DEVICELIST], res_dev_list
  6833                                  		;mov	word [273h], res_dev_list
  6834                                  		;;mov	word ptr ds:273h, offset res_dev_list
  6835                                  					; [SYSINIT+DEVICE_LIST]
  6836 00001DFA 8C0E[7702]              		mov	[DEVICELIST+2], cs		
  6837                                  		;mov	[275h], cs
  6838                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  6839                                  
  6840 00001DFE A3[9402]                		mov	[MEMORYSIZE], ax
  6841                                  		;mov	[292h], ax
  6842                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  6843                                  
  6844 00001E01 FEC1                    		inc	cl
  6845 00001E03 880E[9802]              		mov	[DEFAULTDRIVE], cl
  6846                                  		;mov	[296h], cl
  6847                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  6848                                  
  6849                                  		;mov	word [CURRENTDOSLOCATION], 0AF8h ; 10/12/2023
  6850 00001E07 C706[7302]450A          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  6851                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  6852                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  6853                                  					; dos_load_seg
  6854                                  
  6855                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  6856                                  ; printer cards. we initialize this value to point to an iret only if
  6857                                  ;
  6858                                  ; 1) the original segment points to storage inside valid ram.
  6859                                  ;
  6860                                  ; 2) the original segment is 0F000:xxxx
  6861                                  
  6862                                  		;;;mov	ax, 46Dh	; SYSINIT segment
  6863                                  		;;mov	ax, 544h	; 10/12/2023
  6864                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  6865                                  		;mov	es, ax
  6866                                  		; 21/12/2022
  6867 00001E0D 8EC2                    		mov	es, dx ; SYSINITSEG
  6868 00001E0F 31C9                    		xor	cx, cx ; 0
  6869 00001E11 8ED9                    		mov	ds, cx		; segment 0
  6870                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  6871 00001E13 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  6872                                  		; 18/10/2022
  6873 00001E16 263B06[9402]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  6874                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  6875 00001E1B 7605                    		jbe	short resetintf
  6876 00001E1D 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  6877 00001E20 750A                    		jnz	short keepintf
  6878                                  resetintf:	
  6879 00001E22 C7063C00[1406]          		mov	word [0Fh*4], intret			
  6880                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  6881 00001E28 8C0E3E00                		mov	word [0Fh*4+2], cs
  6882                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  6883                                  keepintf:				
  6884                                  ; end important
  6885                                  
  6886                                  ; 17/10/2022
  6887                                  ; 28/12/2018 - Retro DOS v4.0
  6888                                  
  6889                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  6890                                  ;
  6891                                  ; we will check if the system has ibm extended keyboard by
  6892                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  6893                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  6894                                  ; for the extended keyboard function. use cx as the temporary register.
  6895                                  
  6896                                  		; 21/12/2022
  6897                                  		; ds = 0, cx = 0
  6898                                  		;xor	cx, cx
  6899                                  		;mov	ds, cx
  6900                                  		
  6901 00001E2C 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  6902                                  
  6903                                  		; 21/12/2022
  6904 00001E30 0E                      		push	cs
  6905 00001E31 1F                      		pop	ds
  6906                                  
  6907 00001E32 F6C110                  		test	cl, 10h		; extended keyboard ?
  6908 00001E35 740A                    		jz	short org_key	; no, original keyboard
  6909                                  
  6910                                  		; 21/12/2022
  6911                                  		; ds = cs
  6912 00001E37 C606[7E04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  6913 00001E3C C606[7F04]11            		mov	byte [keysts_func], 11h
  6914                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  6915                                  		;mov	byte [cs:keysts_func], 11h
  6916                                  					; change for extended keyboard functions
  6917                                  org_key:
  6918                                  
  6919                                  ; 02/06/2018 - Retro DOS v3.0
  6920                                  
  6921                                  ;**************************************************************
  6922                                  ;	will initialize the number of drives
  6923                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  6924                                  ;	the indications are as follows:
  6925                                  ;
  6926                                  ;	bits	7	6	drives
  6927                                  ;		0	0	1
  6928                                  ;		0	1	2
  6929                                  ;		1	0	3
  6930                                  ;		1	1	4
  6931                                  ;**************************************************************
  6932                                  				
  6933                                  		; 21/12/2022
  6934                                  		; ds = cs
  6935                                  		;push	cs
  6936                                  		;pop	ds
  6937                                  		;push	cs
  6938                                  		;pop	es
  6939                                  		
  6940 00001E41 E8C70B                  		call	cmos_clock_read	; If cmos clock	exists,
  6941                                  					; then set the system time according to	that.
  6942                                  					; also,	reset the cmos clock rate.
  6943                                  		; 18/10/2022
  6944                                  		;mov	word ptr BData_start, offset harddrv ;
  6945                                  					; set up pointer to hdrive
  6946                                  		; 02/10/2022
  6947 00001E44 C706[0000][4B08]        		mov	word [hdrv_pat], harddrv 
  6948                                  					
  6949 00001E4A 58                      		pop	ax ; *		; number of floppies and FAT ID
  6950 00001E4B 30E4                    		xor	ah, ah		; chuck	fat id byte
  6951 00001E4D A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  6952 00001E50 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  6953 00001E53 D1E0                    		shl	ax, 1
  6954 00001E55 0106[5E1A]              		add	[last_dskdrv_table], ax
  6955                                  
  6956                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  6957                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  6958                                  		; ........
  6959 00001E59 1E                      		push    ds
  6960 00001E5A B800F0                  		mov     ax, 0F000h
  6961 00001E5D 8ED8                    		mov     ds, ax
  6962                                  
  6963 00001E5F 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  6964 00001E65 751F                    		jne	short skip_mode2
  6965 00001E67 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  6966 00001E6D 7517                    		jne	short skip_mode2
  6967 00001E6F 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  6968 00001E75 750F                    		jne	short skip_mode2
  6969                                  
  6970 00001E77 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  6971 00001E7A CD15                    		int	15h
  6972 00001E7C 7208                    		jc	short skip_mode2
  6973                                  		; 10/12/2023
  6974                                  		; PCDOS 7.1 IBMBIO.COM
  6975                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  6976                                  					; (MSDOS 6.0)
  6977                                  		; MSDOS 6.22 IO.SYS
  6978 00001E7E 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  6979 00001E81 B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  6980 00001E84 CD15                    		int	15h
  6981                                  skip_mode2:
  6982 00001E86 1F                      		pop	ds
  6983                                  		; ........
  6984                                  
  6985 00001E87 B280                    		mov	dl, 80h
  6986 00001E89 B408                    		mov	ah, 8
  6987 00001E8B CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6988                                  					; DL = drive number
  6989                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6990                                  					; DL = number of consecutive drives
  6991                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6992 00001E8D 7204                    		jc	short enddrv
  6993 00001E8F 8816[5D1A]              		mov	[hnum], dl
  6994                                  enddrv:
  6995                                  		; 21/12/2022
  6996 00001E93 0E                      		push	cs
  6997 00001E94 07                      		pop	es
  6998                                  
  6999                                  ; scan the list of drives to determine their type. we have three flavors of
  7000                                  ; diskette drives:
  7001                                  ;
  7002                                  ;   48tpi drives    we do nothing special for them
  7003                                  ;   96tpi drives    mark the fact that they have changeline support.
  7004                                  ;   3.5"  drives    mark changeline support and small.
  7005                                  ;
  7006                                  ; the following code uses registers for certain values:
  7007                                  ;
  7008                                  ;   dl - physical drive
  7009                                  ;   ds:di - points to current bds
  7010                                  ;   cx - flag bits for bds
  7011                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  7012                                  					
  7013 00001E95 30D2                    		xor	dl, dl
  7014                                  
  7015                                  		; 21/12/2022
  7016                                  		; ds = cs
  7017                                  		;push	cs
  7018                                  		;pop	ds
  7019                                  
  7020 00001E97 C606[2C01]09            		mov	byte [eot], 9
  7021 00001E9C BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  7022                                  					; to set aside two bdss	for the	two fake floppy	drives
  7023                                  
  7024                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  7025                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  7026                                  
  7027                                  ; check to see if we are faking floppy drives. if not we don't
  7028                                  ; do anything special. if we are faking floppy drives we need
  7029                                  ; to set aside two bdss for the two fake floppy drives. we
  7030                                  ; don't need to initalise any fields though. so starting at start_bds
  7031                                  ; use the link field in the bds structure to go to the second bds
  7032                                  ; in the list and initalise it's link field to -1 to set the end of
  7033                                  ; the list. then jump to the routine at dohard to allocate/initialise
  7034                                  ; the bds for harddrives.
  7035                                  
  7036 00001E9F 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  7037 00001EA4 750B                    		jnz	short loop_drive
  7038 00001EA6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7039                                  					; di <-	first bds link
  7040 00001EA8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7041                                  					; di <-	second bds link
  7042 00001EAA C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  7043 00001EAE E98801                  		jmp	dohard		; allocate/initialise bds for harddrives
  7044                                  ;-----------------------------------------------------------------------------
  7045                                  
  7046                                  loop_drive:				
  7047 00001EB1 3A16[7500]              		cmp	dl, [drvmax]
  7048 00001EB5 7203                    		jb	short got_more
  7049 00001EB7 E97B01                  		jmp	done_drives
  7050                                  ;-----------------------------------------------------------------------------
  7051                                  
  7052                                  got_more:	
  7053                                  		; 10/12/2023			
  7054                                  		;xor	cx, cx		; zero all flags
  7055 00001EBA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7056                                  					; get next bds
  7057                                  		; ........
  7058                                  		; 10/12/2023 - Retro DOS v5.0
  7059                                  		; (PCDOS 7.1 IBMBIO.COM BIOSDATA:2046h) 
  7060 00001EBC 83FFFF                  		cmp	di, 0FFFFh      ; end of link ?
  7061 00001EBF 7516                    		jne	short not_last_bds
  7062 00001EC1 88D0                    		mov	al, dl          ; drive number (0 based)
  7063 00001EC3 98                      		cbw
  7064 00001EC4 01C0                    		add	ax, ax
  7065 00001EC6 05[3C05]                		add	ax, dskdrvs
  7066 00001EC9 A3[5E1A]                		mov	[last_dskdrv_table], ax
  7067 00001ECC 8B3E[601A]              		mov	di, [end_of_bdss]
  7068 00001ED0 E8020B                  		call	xinstall_bds
  7069 00001ED3 FE0E[7500]              		dec	byte [drvmax]
  7070                                  not_last_bds:
  7071                                  		; ........
  7072                                  
  7073 00001ED7 B600                    		mov	dh, 0		; ff48tpi
  7074                                  					; set form factor to 48	tpi
  7075 00001ED9 C606[0E1A]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  7076                                  		
  7077                                  		; 21/12/2022
  7078                                  		;push	ds
  7079 00001EDE 57                      		push	di
  7080 00001EDF 52                      		push	dx
  7081                                  		;push	cx ; not necessary (10/12/2023)
  7082 00001EE0 06                      		push	es ; es=cs=ds ; 21/12/2022
  7083                                  
  7084                                  		; ...........
  7085                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7086                                  		;xor	bx, bx
  7087                                  		;xor	cx, cx
  7088 00001EE1 52                      		push	dx  ; dl = drive number
  7089                                  
  7090 00001EE2 B408                    		mov	ah, 8
  7091 00001EE4 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7092                                  					; DL = drive number
  7093                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7094                                  					; DL = number of consecutive drives
  7095                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7096                                  		;jc	short noparmsfromrom
  7097                                  		; 10/12/2023
  7098 00001EE6 58                      		pop	ax  ; al = drive number
  7099 00001EE7 7303                    		jnc	short chk_drv_type
  7100 00001EE9 E9E600                  		jmp	noparmsfromrom
  7101                                  
  7102                                  chk_drv_type:
  7103                                  		; 10/12/2023
  7104                                  		; ch = low eight bits of maximum cylinder number
  7105                                  		; cl = maximum sector number (bits 5-0)
  7106                                  		;      high two bits of maximum cylinder number (bits 7-6)
  7107                                  		;
  7108 00001EEC 80FB10                  		cmp	bl, 10h		; ATAPI Removable Media Device
  7109 00001EEF 7554                    		jne	short not_atapi_removable
  7110                                  		
  7111                                  		; save ds:si
  7112 00001EF1 1E                      		push	ds
  7113                                  		;push	si	; not necessary (10/12/2023)
  7114                                  		
  7115 00001EF2 88C2                    		mov	dl, al
  7116 00001EF4 83EC1A                  		sub	sp, 26
  7117 00001EF7 31C0                    		xor	ax, ax ; 0
  7118 00001EF9 50                      		push	ax
  7119 00001EFA B81E00                  		mov	ax, 30
  7120 00001EFD 50                      		push	ax
  7121 00001EFE 89E6                    		mov	si, sp		; DS:SI = segment:offset pointer to Result Buffer
  7122 00001F00 16                      		push	ss
  7123 00001F01 1F                      		pop	ds
  7124 00001F02 B448                    		mov	ah, 48h
  7125 00001F04 CD13                    		int	13h		; DISK - IBM/MS Extension
  7126                                  					; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
  7127 00001F06 7239                    		jc	short ext_gdp_err
  7128 00001F08 8B4408                  		mov	ax, [si+8]	; physical number of heads
  7129 00001F0B A3[0C1A]                		mov	[num_heads], ax
  7130 00001F0E 8B4404                  		mov	ax, [si+4]	; physical number of cylinders
  7131 00001F11 A3[0E1A]                		mov	[num_cyln], ax
  7132 00001F14 8A440C                  		mov	al, [si+0Ch]	; physical number of sectors per track
  7133 00001F17 A2[101A]                		mov	[sec_trk], al
  7134 00001F1A 3A06[2C01]              		cmp	al, [eot]
  7135 00001F1E 7603                    		jbe	short _eotok
  7136 00001F20 A2[2C01]                		mov	[eot], al
  7137                                  
  7138                                  _eotok:		; 10/12/2023
  7139                                  		;xor	al, al
  7140 00001F23 31C9                    		xor	cx, cx ; 0
  7141 00001F25 F6440210                		test	byte [si+2], 10h ; information flags
  7142                                  					; bit 4 = Device has change line support
  7143 00001F29 7403                    		jz	short not_chgline_sup
  7144                                  		;or	al, 2		; change line support
  7145 00001F2B 80C902                  		or	cl, 2
  7146                                  not_chgline_sup:
  7147 00001F2E 83C41E                  		add	sp, 30
  7148                                  		;pop	si	; (10/12/2023)
  7149 00001F31 1F                      		pop	ds
  7150                                  		;
  7151 00001F32 07                      		pop	es	; es=cs=ds (21/12/2022)
  7152                                  		;pop	cx	; (10/12/2023)
  7153 00001F33 5A                      		pop	dx
  7154 00001F34 5F                      		pop	di
  7155                                  		;pop	ds	; (21/12/2022)
  7156                                  
  7157                                  		; 10/12/2023
  7158 00001F35 F6C102                  		test	cl, 2
  7159                                  		;test	al, 2
  7160                                  		;jz	short gotother_j
  7161 00001F38 7450                    		jz	short gotother
  7162                                  		;or	cl, al
  7163 00001F3A C606[7700]01            		mov	byte [fhave96], 1 ; Device has change line support
  7164                                  gotother_j:
  7165 00001F3F EB49                    		jmp	short gotother
  7166                                  ext_gdp_err:
  7167 00001F41 83C41E                  		add	sp, 30
  7168                                  		;pop	si	; (10/12/2023)
  7169 00001F44 1F                      		pop	ds
  7170                                  
  7171                                  		; 10/12/2023
  7172                                  not_atapi_removable:
  7173                                  		; ...........
  7174                                  
  7175                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  7176                                  ; in this case, we are going to put bogus informations to bds table.
  7177                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  7178                                  ; they are calculated at the later time. this is just for the diagnostic
  7179                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  7180                                  ; this should only happen with drive b.
  7181                                  
  7182 00001F45 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  7183 00001F48 7505                    		jnz	short pfr_ok
  7184                                  		
  7185                                  		;mov	ch, 39		; rom gave wrong info.
  7186                                  		;mov	cl, 9		; let's default to 360k.
  7187                                  		; 21/12/2022
  7188 00001F4A B90927                  		mov	cx, 2709h
  7189 00001F4D B601                    		mov	dh, 1
  7190                                  pfr_ok:					
  7191                                  		;inc	dh		; make number of heads 1-based
  7192                                  		;mov	[num_heads], dh	; save parms returned by rom
  7193                                  		; 10/12/2023
  7194 00001F4F 86D6                    		xchg	dl, dh
  7195 00001F51 30F6                    		xor	dh, dh
  7196 00001F53 42                      		inc	dx		; make number of heads 1-based
  7197 00001F54 8916[0C1A]              		mov	[num_heads], dx
  7198                                  
  7199                                  		;inc	ch		; make number of cylinders 1-based
  7200                                  		;and	cl, 3Fh
  7201                                  		;mov	[sec_trk], cl
  7202                                  		;mov	[num_cyln], ch	; assume less than 256 cylinders!!
  7203                                  		; 10/12/2023
  7204 00001F58 88CA                    		mov	dl, cl
  7205 00001F5A 80E23F                  		and	dl, 3Fh
  7206 00001F5D 8816[101A]              		mov	[sec_trk], dl
  7207 00001F61 86CD                    		xchg	cl, ch
  7208 00001F63 D0C5                    		rol	ch, 1
  7209 00001F65 D0C5                    		rol	ch, 1
  7210 00001F67 80E503                  		and	ch, 3
  7211 00001F6A 41                      		inc	cx		; make number of cylinders 1-based
  7212 00001F6B 890E[0E1A]              		mov	[num_cyln], cx
  7213                                  		
  7214                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  7215                                  
  7216                                  		;mov	cl, [sec_trk] ; 10/12/2023
  7217                                  		;cmp	cl, [eot]	; may set carry
  7218                                  		;;jbe	short eot_ok
  7219                                  		;; 09/12/2022
  7220                                  		;;jne	short eotok  ; wrong ! 14/08/2023
  7221                                  		;; 14/08/2023
  7222                                  		;jbe	short eotok
  7223                                  		;mov	[eot], cl
  7224                                  		; 10/12/2023
  7225 00001F6F 3A16[2C01]              		cmp	dl, [eot] ; dl = [sec_trk]
  7226 00001F73 7604                    		jbe	short eotok
  7227 00001F75 8816[2C01]              		mov	[eot], dl
  7228                                  ;eot_ok:
  7229                                  eotok:
  7230                                  		; 10/12/2023
  7231                                  		; !!!
  7232                                  		; (following pops are moved to 'chk_changeline' procedure)
  7233                                  		;pop	es ; es=cs=ds ; 21/12/2022
  7234                                  		;;pop	cx	; (10/12/2023)
  7235                                  		;pop	dx
  7236                                  		;pop	di
  7237                                  
  7238                                  		; 21/12/2022
  7239                                  		;pop	ds
  7240                                  
  7241                                  ; Check	for presence of	changeline
  7242                                  
  7243                                  ; 10/12/2023
  7244                                  %if 0
  7245                                  		; 10/12/2023
  7246                                  		;xor	cx, cx	; 0
  7247                                  		;push	cx
  7248                                  		push	dx
  7249                                  
  7250                                  		mov	ah, 15h
  7251                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7252                                  					; DL = drive ID
  7253                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7254                                  					; CX:DX	= number of sectors on the media
  7255                                  		; 10/12/2023
  7256                                  		pop	dx
  7257                                  		;pop	cx
  7258                                  		mov	cx, 0 ; 12/12/2023
  7259                                  		jc	short changeline_done
  7260                                  		cmp	ah, 2		; check	for presence of	changeline
  7261                                  		jnz	short changeline_done
  7262                                  
  7263                                  ; we have a drive with change line support.
  7264                                  
  7265                                  		or	cl, 2		; fchangeline
  7266                                  					; signal type
  7267                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  7268                                  %endif
  7269                                  		; 10/12/2023
  7270 00001F79 E83800                  		call	chk_changeline
  7271                                  		;jc	short changeline_done
  7272                                  		
  7273                                  ; we now try to set up the form factor for the types of media that we know
  7274                                  ; and can recognise. for the rest, we set the form factor as "other".
  7275                                  
  7276                                  changeline_done:
  7277 00001F7C 803E[0E1A]28            		cmp	byte [num_cyln], 40
  7278 00001F81 750B                    		jnz	short try_80
  7279 00001F83 803E[101A]09            		cmp	byte [sec_trk], 9
  7280 00001F88 765F                    		jbe	short nextdrive
  7281                                  gotother:	
  7282                                  		; 10/12/2023
  7283                                  		; ch = 0, cl = 2 or 0		
  7284                                  		
  7285 00001F8A B607                    		mov	dh, 7		; ffOther
  7286                                  					; we have a "strange" medium
  7287 00001F8C EB5B                    		jmp	short nextdrive
  7288                                  ;-----------------------------------------------------------------------------
  7289                                  
  7290                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  7291                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  7292                                  
  7293                                  try_80:					
  7294 00001F8E 803E[0E1A]50            		cmp	byte [num_cyln], 80
  7295 00001F93 75F5                    		jnz	short gotother
  7296 00001F95 B609                    		mov	dh, 9		; ff288
  7297                                  					; assume 2.88 MB drive
  7298 00001F97 803E[101A]24            		cmp	byte [sec_trk], 36 ; is it	?
  7299 00001F9C 744B                    		jz	short nextdrive	; yeah,	go update
  7300                                  
  7301                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  7302                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  7303                                  		;mov	dh, ff144
  7304                                  		;cmp	byte [sec_trk], 18
  7305                                  		;je	short nextdrive
  7306                                  
  7307 00001F9E 803E[101A]0F            		cmp	byte [sec_trk], 15
  7308 00001FA3 740B                    		jz	short got96
  7309                                  		
  7310 00001FA5 803E[101A]09            		cmp	byte [sec_trk], 9
  7311 00001FAA 75DE                    		jnz	short gotother
  7312                                  		
  7313 00001FAC B602                    		mov	dh, 2		; ffSmall
  7314 00001FAE EB39                    		jmp	short nextdrive
  7315                                  ; ----------------------------------------------------------------------------
  7316                                  
  7317                                  got96:					
  7318 00001FB0 B601                    		mov	dh, 1		; ff96tpi
  7319 00001FB2 EB35                    		jmp	short nextdrive
  7320                                  
  7321                                  ; ----------------------------------------------------------------------------
  7322                                  		
  7323                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  7324                                  		; check change line feature (and set fhave96 if there is)
  7325                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  7326                                  chk_changeline:
  7327 00001FB4 59                      		pop	cx ; near call return address
  7328                                  
  7329                                  		; (pop es, dx, di for 'eotok' and 'noparmsfromrom' procs)
  7330 00001FB5 07                      		pop	es ; es=cs=ds ; 21/12/2022
  7331                                  		;pop	cx	; (10/12/2023)
  7332 00001FB6 5A                      		pop	dx
  7333 00001FB7 5F                      		pop	di ; BDS address/offset
  7334                                  		
  7335 00001FB8 51                      		push	cx ; near call return address
  7336                                  
  7337                                  		;xor	cx, cx ; 0
  7338                                  		;push	cx
  7339 00001FB9 52                      		push	dx
  7340                                  
  7341 00001FBA B415                    		mov	ah, 15h
  7342 00001FBC CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7343                                  					; DL = drive ID
  7344                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7345                                  					; CX:DX	= number of sectors on the media
  7346 00001FBE 5A                      		pop	dx
  7347                                  		;pop	cx
  7348 00001FBF B90000                  		mov	cx, 0
  7349 00001FC2 720D                    		jc	short chk_chgl_1
  7350                                  
  7351 00001FC4 80FC02                  		cmp	ah, 2		; is there changeline?
  7352 00001FC7 7508                    		jne	short chk_chgl_2 ; *
  7353                                  
  7354 00001FC9 80C902                  		or	cl, 2
  7355                                  		;or	cl, ah ; 2
  7356 00001FCC C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  7357                                  		; cf = 0
  7358                                  chk_chgl_1:
  7359                                  chk_chgl_2:
  7360 00001FD1 C3                      		retn
  7361                                  
  7362                                  ;chk_chgl_2:	; *
  7363                                  ;		; 10/12/2023
  7364                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  7365                                  ;		;stc
  7366                                  ;		; cf = 1
  7367                                  ;		retn
  7368                                  
  7369                                  ; ----------------------------------------------------------------------------
  7370                                  
  7371                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  7372                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  7373                                  
  7374                                  noparmsfromrom:
  7375                                  		; 10/12/2023
  7376                                  		; !!!
  7377                                  		; (following pops are moved to 'chk_changeline' procedure)
  7378                                  		;pop	es ; es=cs=ds ; 21/12/2022
  7379                                  		;;pop	cx	; (10/12/2023)
  7380                                  		;pop	dx
  7381                                  		;pop	di	
  7382                                  
  7383                                  		; 21/12/2022
  7384                                  		;pop	ds
  7385                                  ; 10/12/2023
  7386                                  %if 0
  7387                                  		; 10/12/2023
  7388                                  		;xor	cx, cx ; 0
  7389                                  		;push	cx
  7390                                  		push	dx
  7391                                  
  7392                                  
  7393                                  		mov	ah, 15h
  7394                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7395                                  					; DL = drive ID
  7396                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7397                                  					; CX:DX	= number of sectors on the media
  7398                                  		; 10/12/2023
  7399                                  		pop	dx
  7400                                  		;pop	cx
  7401                                  		mov	cx, 0 ; 12/12/2023
  7402                                  		jc	short nextdrive
  7403                                  
  7404                                  		cmp	ah, 2		; is there changeline?
  7405                                  		jnz	short nextdrive
  7406                                  
  7407                                  		or	cl, 2
  7408                                  		mov	byte [fhave96], 1 ; fchangeline
  7409                                  %endif
  7410                                  		; 10/12/2023
  7411 00001FD2 E8DFFF                  		call	chk_changeline
  7412 00001FD5 7212                    		jc	short nextdrive
  7413                                  		
  7414                                  		; change line support, [fhave96] = 1
  7415                                  		
  7416 00001FD7 C606[0E1A]50            		mov	byte [num_cyln], 80
  7417 00001FDC B601                    		mov	dh, 1		; ff96tpi
  7418 00001FDE B00F                    		mov	al, 15
  7419 00001FE0 3A06[2C01]              		cmp	al, [eot]
  7420 00001FE4 7603                    		jbe	short nextdrive
  7421 00001FE6 A2[2C01]                		mov	[eot], al
  7422                                  ; ----------------------------------------------------------------------------
  7423                                  
  7424                                  nextdrive:
  7425                                  		; 10/12/2023
  7426                                  		; ch = 0, cl = 2 or 0
  7427                                  		
  7428 00001FE9 80C920                  		or	cl, 20h		; fi_own_physical
  7429                                  					; set this true	for all	drives
  7430 00001FEC 88D7                    		mov	bh, dl		; save int13 drive number
  7431                                  
  7432                                  ; we need to do special things if we have a single drive system and are setting
  7433                                  ; up a logical drive. it needs to have the same int13 drive number as its
  7434                                  ; counterpart, but the next drive letter. also reset ownership flag.
  7435                                  ; we detect the presence of this situation by examining the flag single for the
  7436                                  ; value 2.
  7437 00001FEE 803E[7800]02            		cmp	byte [single], 2
  7438 00001FF3 7505                    		jnz	short not_special
  7439 00001FF5 FECF                    		dec	bh		; int13	drive number same for logical drive
  7440 00001FF7 80F120                  		xor	cl, 20h		; reset	ownership flag for logical drive
  7441                                  not_special:
  7442                                  
  7443                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  7444                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  7445                                  ; form factor is of type "ffother".
  7446                                  				
  7447                                  		;xor	ax, ax		; fill BDS for drive
  7448                                  		;mov	al, [num_heads]
  7449                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM) ; *
  7450 00001FFA A1[0C1A]                		mov	ax, [num_heads]
  7451                                  		;mov	[di+36h], ax	; [di+BDS.rheads]
  7452 00001FFD 894552                  		mov	[di+52h], ax	; [di+BDS.rheads] ; *
  7453 00002000 31C0                    		xor	ax, ax		; *
  7454 00002002 A0[101A]                		mov	al, [sec_trk]
  7455                                  		;mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  7456 00002005 894550                  		mov	[di+50h], ax	; [di+BDS.rsecpertrack] ; *
  7457                                  		;mov	[di+23h], cx	; [di+BDS.flags]
  7458 00002008 894D3F                  		mov	[di+3Fh], cx	; [di+BDS.flags] ; *
  7459                                  		;mov	[di+22h], dh	; [di+BDS.formfactor]
  7460 0000200B 88753E                  		mov	[di+3Eh], dh	; [di+BDS.formfactor] ; *
  7461 0000200E 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  7462 00002011 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  7463                                  		;mov	bl, [num_cyln]
  7464                                  		;mov	[di+25h], bl	; [di+BDS.cylinders]
  7465                                  		; 10/12/2023
  7466 00002014 A1[0E1A]                		mov	ax, [num_cyln]
  7467 00002017 894541                  		mov	[di+41h], ax	; [di+BDS.cylinders] ; *
  7468                                  
  7469 0000201A 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  7470 0000201F 7510                    		jnz	short no_single
  7471                                  		;mov	byte [single], 2 ; Don't forget we have
  7472                                  					; single drive system
  7473                                  		; 10/12/2023
  7474 00002021 FE06[7800]              		inc	byte [single]	; [single] = 2
  7475                                  		; 18/12/2022
  7476 00002025 80C910                  		or	cl, 10h
  7477                                  		;or	cx, 10h		; fi_am_mult
  7478                                  					; set that this	is one of several drives
  7479                                  		;or	[di+23h], cx	; [di+BDS.flags]
  7480 00002028 094D3F                  		or	[di+3Fh], cx	; [di+BDS.flags] ; *
  7481                                  					; save flags
  7482 0000202B 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7483                                  					; move to next BDS in list
  7484 0000202D FEC2                    		inc	dl		; add a	number
  7485 0000202F EBB8                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  7486                                  ; ----------------------------------------------------------------------------
  7487                                  
  7488                                  no_single:				
  7489                                  		;inc	dl
  7490                                  		; 18/12/2022
  7491 00002031 42                      		inc	dx
  7492 00002032 E97CFE                  		jmp	loop_drive
  7493                                  ; ----------------------------------------------------------------------------
  7494                                  
  7495                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  7496                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:21E8h)
  7497                                  done_drives:	
  7498                                  		;mov	word [di+BDS.link], -1			
  7499 00002035 C705FFFF                		mov	word [di], -1	; set link to null
  7500                                  
  7501                                  ; set up all the hard drives in	the system
  7502                                  
  7503                                  dohard:	
  7504 00002039 8A36[5D1A]              		mov	dh, [hnum]
  7505 0000203D 08F6                    		or	dh, dh		; done if no hardfiles
  7506 0000203F 7459                    		jz	short static_configure
  7507 00002041 B280                    		mov	dl, 80h
  7508                                  dohard1:				
  7509 00002043 52                      		push	dx
  7510 00002044 8B3E[601A]              		mov	di, [end_of_bdss]
  7511 00002048 8A1E[7500]              		mov	bl, [drvmax]
  7512 0000204C B700                    		mov	bh, 0		; first	primary	partition (or active)
  7513 0000204E E89902                  		call	sethard
  7514 00002051 7208                    		jc	short hardfile_err
  7515 00002053 E86A09                  		call	dmax_check	; error	if already 26 drives
  7516 00002056 7303                    		jnb	short hardfile_err
  7517 00002058 E87A09                  		call	xinstall_bds	; insert new bds into linked list
  7518                                  hardfile_err:				
  7519 0000205B 5A                      		pop	dx
  7520                                  		;inc	dl		; next hard drive
  7521                                  		; 12/12/2023
  7522 0000205C 42                      		inc	dx
  7523 0000205D FECE                    		dec	dh
  7524 0000205F 75E2                    		jnz	short dohard1
  7525                                  
  7526                                  ; end of physical drive	initialization
  7527                                  
  7528                                  ; *** do not change the position of the following statement.
  7529                                  ; *** domini routine will use [drvmax] value for the start of the logical
  7530                                  ; *** drive number of mini disk(s).
  7531                                  					
  7532 00002061 E8CF07                  		call	domini		; for setting up mini disks, if found
  7533                                  
  7534                                  ; -- begin added section
  7535                                  
  7536 00002064 8A36[5D1A]              		mov	dh, [hnum]	; we already know this is >0
  7537 00002068 B280                    		mov	dl, 80h
  7538                                  dohardx1:				
  7539 0000206A B701                    		mov	bh, 1		; do all subsequent primary partitions
  7540                                  dohardx2:				
  7541 0000206C 52                      		push	dx
  7542 0000206D 53                      		push	bx
  7543 0000206E 8B3E[601A]              		mov	di, [end_of_bdss]
  7544 00002072 8A1E[7500]              		mov	bl, [drvmax]
  7545 00002076 E87102                  		call	sethard
  7546 00002079 720E                    		jc	short dohardx4	; move to next hardfile	if error
  7547 0000207B E84209                  		call	dmax_check	; make sure <=26 drives
  7548 0000207E 7309                    		jnb	short dohardx4	; skip if error
  7549 00002080 E85209                  		call	xinstall_bds	; insert new bds into linked list
  7550 00002083 5B                      		pop	bx		; get partition	number
  7551 00002084 5A                      		pop	dx		; restore physical drive counts
  7552 00002085 FEC7                    		inc	bh
  7553 00002087 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  7554                                  ; ----------------------------------------------------------------------------
  7555                                  
  7556                                  dohardx4:				
  7557 00002089 5B                      		pop	bx		; unjunk partition number from stack
  7558 0000208A 5A                      		pop	dx		; restore physical drive counts
  7559                                  		;inc	dl		; next hard drive
  7560                                  		; 12/12/2023
  7561 0000208B 42                      		inc	dx
  7562 0000208C FECE                    		dec	dh
  7563 0000208E 75DA                    		jnz	short dohardx1
  7564                                  
  7565                                  ; -- end changed section
  7566                                  
  7567                                  ;******************************************************************************
  7568                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  7569                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  7570                                  ; than two diskette drives
  7571                                  ;
  7572                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  7573                                  ;		as usual and then rescan the bds chain to adjust the  drive
  7574                                  ;		letters. to do this, scan for disk drives and assign logical
  7575                                  ;		drive number starting from 2 and then rescan diskette drives
  7576                                  ;		and assign next to the last logical drive number of last disk
  7577                                  ;		drive to the 3rd and 4th diskette drives.
  7578                                  ;******************************************************************************
  7579                                  
  7580 00002090 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  7581                                  		;jbe	short static_configure ; no - no need for remapping
  7582 00002095 7603                    		jbe	short no_remap
  7583 00002097 E8D401                  		call	remap		; remap	bds chain to adjust driver letters
  7584                                  no_remap:
  7585                                  
  7586                                  ; End of drive initialization.
  7587                                  
  7588                                  ; ----------------------------------------------------------------------------
  7589                                  
  7590                                  ;we now decide, based on the configurations available so far, what
  7591                                  ;code or data we need to keep as a stay resident code. the following table
  7592                                  ;shows the configurations under consideration. they are listed in the order
  7593                                  ;of their current position memory.
  7594                                  ;
  7595                                  ;configuration will be done in two ways:
  7596                                  ;
  7597                                  ;first, we are going to set "static configuration". static configuration will
  7598                                  ;consider from basic configuration to endof96tpi configuration. the result
  7599                                  ;of static configuration will be the address the dynamic configuration will
  7600                                  ;use to start with.
  7601                                  ;
  7602                                  ;secondly, "dynamic cofiguration" will be performed. dynamic configuration
  7603                                  ;involves possible relocation of code or data. dynamic configuration routine
  7604                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  7605                                  ;code individually. after these operation, [dosdatasg] will be set.
  7606                                  ;this will be the place sysinit routine will relocate msdos module for good.
  7607                                  
  7608                                  ; -- begin changed section
  7609                                  ;
  7610                                  ;   1.	 basic configuration for msbio (endfloppy)
  7611                                  ;   2.   end96tpi	; a system that supports "change line error"
  7612                                  ;   3.	 end of bdss	; end of bdss for hard disks
  7613                                  ;   4.	 endatrom	;some of at rom fix module.
  7614                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  7615                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  7616                                  ;
  7617                                  
  7618                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  7619                                  
  7620                                  static_configure:			
  7621 0000209A 8B3E[601A]              		mov	di, [end_of_bdss]
  7622 0000209E 81FF[4C08]              		cmp	di, bdss	; 19/10/2022
  7623                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  7624 000020A2 750D                    		jnz	short dynamic_configure	; that's the end, then
  7625                                  		; 18/10/2022
  7626 000020A4 BF[4C08]                		mov	di, end96tpi
  7627                                  		;mov	di, offset harddrv ; end96tpi
  7628                                  					; keep everything up to	end96tpi
  7629 000020A7 803E[7700]00            		cmp	byte [fhave96], 0
  7630 000020AC 7503                    		jnz	short dynamic_configure
  7631                                  		
  7632 000020AE BF[3808]                		mov	di, endfloppy
  7633                                  dynamic_configure:			
  7634                                  		; 20/12/2022
  7635                                  		;push	cs
  7636                                  		;pop	es
  7637                                  		
  7638                                  		; 10/12/2023
  7639                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2268h)
  7640                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C34h)
  7641 000020B1 FC                      		cld	; clear direction flag is not necessary here !?
  7642                                  			; because there will not be a running program
  7643                                  			; which will set direction flag as backward (std)
  7644                                  
  7645                                  ; -- end changed section
  7646                                  
  7647                                  		; 21/12/2022
  7648                                  		; ds = cs <> es
  7649                                  		; ss = 0
  7650                                  		; sp = 700h
  7651                                  
  7652                                  		; 13/12/2023
  7653 000020B2 BE00F0                  		mov	si, 0F000h
  7654 000020B5 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  7655                                  
  7656 000020B7 803E[AF05]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  7657                                  		;jnz	short checkcmosclock
  7658                                  		; 10/12/2023
  7659 000020BC 751E                    		jnz	short checkcompaqbug ; no
  7660 000020BE 803E[5D1A]00            		cmp	byte [hnum], 0	; No hard file?
  7661                                  		;jz	short checkcmosclock
  7662 000020C3 7417                    		jz	short checkcompaqbug
  7663 000020C5 97                      		xchg	ax, di		; save allocation pointer in ax
  7664                                  		; 13/12/2023
  7665                                  		;mov	si, 0F000h
  7666                                  		;mov	es, si		; ES ->	ROM BIOS segment
  7667 000020C6 BE[661A]                		mov	si, bios_date	; "01/10/84"
  7668 000020C9 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  7669 000020CC B90900                  		mov	cx, 9		; bdate_l
  7670                                  					; Only patch ROM for bios 01/10/84
  7671 000020CF F3A6                    		repe cmpsb		; check	for date + zero	on end
  7672 000020D1 97                      		xchg	ax, di		; restore allocation pointer
  7673                                  
  7674                                  ; M015 -- begin changes
  7675                                  
  7676                                  		;jnz	short checkcmosclock
  7677                                  		; 02/10/2022
  7678 000020D2 7508                    		jnz	short checkcompaqbug
  7679                                  
  7680                                  ; install at rom fix
  7681                                  
  7682                                  		; 19/10/2022
  7683                                  		;mov	cx, offset endatrom
  7684 000020D4 B9[2018]                		mov	cx, endatrom
  7685                                  		;mov	si, offset ibm_disk_io
  7686 000020D7 BE[F216]                		mov	si, ibm_disk_io
  7687 000020DA EB46                    		jmp	short install_int13_patch
  7688                                  ; ----------------------------------------------------------------------------
  7689                                  
  7690                                  ; M065 -- begin changes
  7691                                  ;
  7692                                  ; On certain systems with Western Digital disk controllers, the
  7693                                  ; following detection scheme caused an unpredictable and serious
  7694                                  ; failure. In particular, they've implemented a nonstandard
  7695                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  7696                                  ; what happens to be at es:[bx] and other memory locations indexed
  7697                                  ; off of it.
  7698                                  ;
  7699                                  ; Compaq was unable to tell us exactly which kind of systems have
  7700                                  ; the bug, except that they guarantee that the bug was fixed in
  7701                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  7702                                  ; string, and then look for date codes before 08/04/86 to decide
  7703                                  ; when to install the hook.
  7704                                  
  7705                                  ;checkcmosclock:
  7706                                  ; 02/10/2022				
  7707                                  checkcompaqbug:
  7708                                  		; 21/12/2022
  7709                                  		; es = 0F000h
  7710                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  7711                                  		;mov	es, ax
  7712                                  
  7713                                  		; 19/10/2022
  7714 000020DC 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  7715                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  7716 000020E3 754B                    		jnz	short not_compaq_patch
  7717 000020E5 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  7718                                  		;cmp	word ptr es:0FFECh, 'PM'
  7719 000020EC 7542                    		jnz	short not_compaq_patch
  7720 000020EE 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  7721                                  		;cmp	word ptr es:0FFEEh, 'QA'
  7722 000020F5 7539                    		jnz	short not_compaq_patch
  7723                                  
  7724                                  ; We're running on a COMPAQ. Now look at the date code.
  7725                                  
  7726 000020F7 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  7727 000020FB 86E0                    		xchg	ah, al
  7728                                  
  7729                                  ; 11/12/2023
  7730                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:22B9h)
  7731                                  %if 0
  7732                                  		cmp	ax, 3836h       ; '68' (NASM syntax) (('86' in MASM syntax))
  7733                                  		ja	short checkk09
  7734                                  		jz	short chkcompaqbug1
  7735                                  		cmp	ax, 3739h       ; '97'
  7736                                  		jbe	short not_compaq_patch
  7737                                  		stc
  7738                                  chkcompaqbug1:
  7739                                  		jb	short do_compaq_patch
  7740                                  		mov	ax, [es:0FFF5h]
  7741                                  		xchg	ah, al
  7742                                  		cmp	ax, 3038h       ; '80'
  7743                                  		ja	short not_compaq_patch
  7744                                  		jb	short do_compaq_patch
  7745                                  		mov	ax, [es:0FFF8h]
  7746                                  		xchg	ah, al
  7747                                  		cmp	ax, 3034h       ; '40'
  7748                                  		jnb	short not_compaq_patch
  7749                                  do_compaq_patch:
  7750                                  %endif
  7751                                  		; 11/12/2023
  7752                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C85h)
  7753                                  
  7754 000020FD 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  7755                                  		;cmp	ax, '86'        ; 3836h
  7756                                  					; is it	86?
  7757 00002100 772E                    		ja	short not_compaq_patch
  7758 00002102 7218                    		jb	short do_compaq_patch
  7759 00002104 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  7760 00002108 86E0                    		xchg	ah, al
  7761 0000210A 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  7762                                  		;cmp	ax, '08'        ; 3038h
  7763                                  					; is it	08?
  7764 0000210D 7721                    		ja	short not_compaq_patch
  7765 0000210F 720B                    		jb	short do_compaq_patch
  7766 00002111 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  7767 00002115 86E0                    		xchg	ah, al
  7768 00002117 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  7769                                  		;cmp	ax, '04'        ; 3034h
  7770                                  					; is it	04?
  7771 0000211A 7314                    		jnb	short not_compaq_patch
  7772                                  
  7773                                  do_compaq_patch:			
  7774 0000211C B9[3D18]                		mov	cx, end_compaq_i13hook
  7775                                  		;mov	si, endatrom
  7776                                  		; 11/12/2023
  7777 0000211F BE[2018]                		mov	si, compaq_disk_io ; endatrom
  7778                                  
  7779                                  install_int13_patch:			
  7780 00002122 0E                      		push	cs
  7781 00002123 07                      		pop	es
  7782                                  		; 18/10/2022
  7783 00002124 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  7784 00002128 8C0E[B600]              		mov	[Orig13+2], cs
  7785 0000212C 29F1                    		sub	cx, si		; size of rom fix module
  7786 0000212E F3A4                    		rep movsb		; relocate it
  7787                                  
  7788                                  ; M065 -- end changes
  7789                                  
  7790                                  ; ----------------------------------------------------------------------------
  7791                                  not_compaq_patch:			; M065
  7792                                  		; 17/10/2022
  7793                                  checkcmosclock:	
  7794                                  		; 18/10/2022		
  7795 00002130 0E                      		push	cs
  7796 00002131 07                      		pop	es
  7797                                  
  7798                                  		; 21/12/2022
  7799                                  		; ds = cs = es
  7800                                  		; ss = 0
  7801                                  		; sp = 700h
  7802                                  
  7803                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7804                                  %if 0
  7805                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  7806                                  		jnz	short checkk09	; no
  7807                                  
  7808                                  		mov	word [daycnttoday], di
  7809                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  7810                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  7811                                  		mov	si, daycnt_to_day
  7812                                  		rep movsb
  7813                                  		mov	word [bintobcd], di
  7814                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  7815                                  					; let original segment stay
  7816                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  7817                                  		; 08/08/2023
  7818                                  		mov	cl, 11
  7819                                  		mov	si, bin_to_bcd
  7820                                  		rep movsb
  7821                                  %endif
  7822                                  
  7823                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7824                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  7825                                  		;push	cs
  7826                                  		;pop	es
  7827                                  checkk09:				
  7828 00002132 57                      		push	di ; ? ; save ? ; 21/12/2022
  7829                                  
  7830                                  ; 13/12/2023 - Retro DOS v4.2 IO.SYS
  7831                                  ; (MSDOS 6.22 IO.SYS - BIOSDATA:1CDAh)
  7832                                  %if 0		
  7833                                  
  7834                                  		mov	ax, 4101h	; wait for bh=es:[di]
  7835                                  		mov	bl, 1		; wait for 1 clock tick
  7836                                  		mov	bh, [es:di]
  7837                                  		stc			; Assume we will fail
  7838                                  		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7839                                  					; AL = condition type, BH = condition compare or mask value
  7840                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7841                                  					; DX = I/O port	address	if AL bit 4 set
  7842                                  					; 11/12/2023
  7843                                  					; ES:DI = user byte if AL bit 4 clear
  7844                                  %endif
  7845                                  		; 13/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7846                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1CDAh)
  7847                                  	
  7848                                  		; ........
  7849                                  
  7850 00002133 B80041                  		mov	ax, 4100h	; wait for any external event (al=0)
  7851 00002136 B304                    		mov	bl, 4		; wait for 4 clock ticks
  7852 00002138 F9                      		stc			; Assume we will fail
  7853 00002139 CD15                    		int	15h		; SYSTEM - WAIT ON EXTERNAL EVENT (CONVERTIBLE)
  7854                                  					; AL = condition type, BH = condition compare or mask value
  7855                                  					; BL = timeout value times 55 milliseconds, 00h means no timeout
  7856                                  					; DX = I/O port address if AL bit 4 set
  7857                                  		; ........
  7858                                  
  7859 0000213B 5F                      		pop	di ; ?
  7860 0000213C 721B                    		jc	short configdone ; 21/12/2022
  7861                                  
  7862 0000213E C606[7900]01            		mov	byte [fhavek09], 1
  7863                                  					; remember we have a k09 type
  7864 00002143 1E                      		push	ds
  7865 00002144 31C0                    		xor	ax, ax
  7866 00002146 8ED8                    		mov	ds, ax
  7867                                  		
  7868 00002148 893EB001                		mov	[6Ch*4], di
  7869                                  		;mov	ds:1B0h, di	; [6Ch*4]
  7870                                  					; new int 6Ch handler
  7871                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  7872 0000214C 8C0EB201                		mov	word [6Ch*4+2], cs
  7873 00002150 1F                      		pop	ds
  7874                                  		; 20/12/2022
  7875                                  		; ds = cs = es
  7876                                  		;mov	si, int6c
  7877                                  		;mov	cx, endk09-int6c ; 459
  7878                                  		;;mov	cx, 459		; endk09 - int6c
  7879                                  					; size of k09 routine
  7880                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7881                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  7882 00002151 BE[3E18]                		mov	si, int_6Ch
  7883 00002154 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  7884 00002157 F3A4                    		rep movsb		;
  7885                                  					; set up config	stuff for sysinit
  7886                                  ; ----------------------------------------------------------------------------
  7887                                  ; Set up config stuff for SYSINIT
  7888                                  
  7889                                  ; 17/10/2022
  7890                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  7891                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  7892                                  ; 09/12/2022
  7893                                  SETDRIVE equ SetDrive
  7894                                  GETBP equ GetBp
  7895                                  		
  7896                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7897                                  configdone:				
  7898                                  		; 19/04/2024
  7899                                  		;push	cs		; di is	final ending address of	msbio.
  7900                                  		;pop	ds
  7901                                  
  7902 00002159 83C70F                  		add	di, 15		; round	(up) to	paragraph
  7903                                  		; 10/12/2022
  7904                                  		;shr	di, 1
  7905                                  		;shr	di, 1
  7906                                  		;shr	di, 1
  7907                                  		;shr	di, 1
  7908 0000215C B104                    		mov	cl, 4
  7909 0000215E D3EF                    		shr	di, cl		
  7910                                  		; 10/12/2022
  7911 00002160 83C770                  		add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  7912                                  		; 19/10/2022 - Temporary !
  7913                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  7914 00002163 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  7915                                  
  7916                                  ; 11/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7917                                  ; ----------------------------------------------------------------------------
  7918                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2332h)
  7919                                  ; ---------------------------------------
  7920                                  ; ("IBMDOS.COM" kernel file reading code here, below...)	
  7921                                  
  7922 00002167 A1[FA19]                		mov	ax, [drvfat]	; get drive and	fat id
  7923                                  		; 22/12/2022
  7924                                  		; Note: SETDRIVES uses AL (drive number) only
  7925 0000216A BD[A405]                		mov	bp, SETDRIVE
  7926                                  		;mov	bp, 5AEh ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  7927                                  		;;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  7928                                  					; at 2C7h:4D7h = 70h:2A47h
  7929 0000216D 0E                      		push	cs		; simulate far call
  7930 0000216E E800F9                  		call	call_bios_code	; get bds for drive
  7931                                  			; 06/04/2024
  7932                                  			; es:di = BDS address
  7933 00002171 BD[D606]                		mov	bp, GETBP	; ensure valid bpb is present
  7934                                  		;mov	bp, 6E4h ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  7935                                  		;;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h)
  7936 00002174 0E                      		push	cs
  7937 00002175 E8F9F8                  		call	call_bios_code
  7938                                  
  7939                                  	; resort to funky old segment definitions for now
  7940                                  
  7941                                  		; 22/12/2022
  7942                                  		;push	es		; copy bds to ds:di
  7943                                  		;pop	ds
  7944                                  
  7945                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  7946                                  	;
  7947                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  7948                                  	;	  back. Apparently it was what actually setup es: for the following
  7949                                  	; cas----
  7950                                  
  7951                                  		; 22/12/2022
  7952                                  		;xor	di, di
  7953                                  		;mov	al, [es:di]	; get fat id byte
  7954                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  7955                                  		;mov	[es:drvfat+1], al
  7956                                  		;mov	ax, [es:drvfat]
  7957                                  
  7958                                  		; 22/12/2022
  7959                                  		; ds = cs
  7960                                  	;;;	mov	al, [drvfat]
  7961                                  
  7962                                  	; cas -- why do a SECOND setdrive here???
  7963                                  
  7964                                  		; 22/12/2022
  7965                                  		;push	es		; save whatever's in es
  7966                                  		;push	ds		; copy bds to es:di
  7967                                  		;pop	es
  7968                                  		;push	cs		; copy Bios_Data to ds
  7969                                  		;pop	ds
  7970                                  	
  7971                                  	; 22/12/2022
  7972                                  	;;;	mov	bp, SETDRIVE
  7973                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  7974                                  	;;;	push	cs		; simulate far call
  7975                                  	;;;	call	call_bios_code	; get correct bds for this drive
  7976                                  	
  7977                                  		; 22/12/2022
  7978                                  		;push	es		; copy bds back to ds:di
  7979                                  		;pop	ds
  7980                                  		;pop	es		; pop whatever was in es
  7981                                  
  7982                                  	; Now we load in the MSDOS.SYS file
  7983                                  
  7984                                  	; 22/12/2022
  7985                                  	; -----
  7986                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  7987                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  7988                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  7989                                  	;				; get size of fat on media
  7990                                  	;	;mov	es:16DEh, bl
  7991                                  	;	mov	[es:fbigfat], bl
  7992                                  	;	mov	cl, [di+8]
  7993                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  7994                                  	;	;sub	es:16D8h, ax
  7995                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  7996                                  	;				; need a logical sector number that will
  7997                                  	;				; be used by getclus(diskrd procedure)
  7998                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  7999                                  	;	;sbb	es:16DAh, ax
  8000                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  8001                                  	; -----
  8002                                  		
  8003                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  8004                                  	; -----	; 22/12/2022
  8005 00002178 268B5D06                		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  8006 0000217C 891E[081A]              		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  8007                                  		; 11/12/2023 ; *
  8008 00002180 268A5D3B                		mov	bl, [es:di+3Bh]	; [di+BDS.fatsiz] ; *
  8009                                  		;mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  8010                                  					; get size of fat on media
  8011 00002184 881E[061A]              		mov	[fbigfat], bl
  8012 00002188 268A4D08                		mov	cl, [es:di+8]
  8013 0000218C 268B4517                		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  8014 00002190 2906[FC19]              		sub	[First_Data_Sector], ax ; *
  8015                                  		;sub	[bios_l], ax	; subtract hidden sectors since we
  8016                                  					; need a logical sector number that will
  8017                                  					; be used by getclus(diskrd procedure)
  8018 00002194 268B4519                		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  8019 00002198 1906[FE19]              		sbb	[First_Data_Sector+2], ax ; *
  8020                                  		;sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  8021                                  	; ------
  8022                                  
  8023 0000219C 30ED                    		xor	ch, ch	 ; cx = sectors/cluster
  8024                                  
  8025                                  	; the boot program has left the directory at 0:500h
  8026                                  
  8027                                  		; 11/12/2023 - - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  8028                                  		;push	di
  8029 0000219E 1E                      		push	ds
  8030                                  		;xor	di, di
  8031                                  		;mov	ds, di
  8032 0000219F 31DB                    		xor	bx, bx ; 0
  8033 000021A1 8EDB                    		mov	ds, bx
  8034 000021A3 8B1E3A05                		mov	bx, [53Ah]
  8035                                  		;mov	bx, ds:53Ah    	; (First cluster of the 2nd dir entry
  8036                                  				   	; of root directory in the buffer at 500h)
  8037 000021A7 1F                      		pop	ds
  8038 000021A8 8B36[7E1A]              		mov     si, [firstcluster_hw] ; 11/12/2023 
  8039                                  				   	; (32 bit cluster number for FAT32 fs)
  8040                                  		;pop	ds
  8041                                  		;pop	di
  8042                                  
  8043                                  		; 12/12/2023
  8044                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2397h)
  8045                                  		; ...........
  8046                                  		; ds = cs
  8047 000021AC A0[061A]                		mov	al, [fbigfat]
  8048 000021AF 50                      		push	ax              ; (*) save fbigfat flags
  8049 000021B0 A0[FA19]                		mov	al, [drvfat]
  8050 000021B3 0A06[801A]              		or	al, [Boot_Drv]
  8051 000021B7 757B                    		jnz	short boot_drv_fixed ; hard disk
  8052                                  boot_drv_removable:			; calculate cluster count and set fbig or fbigbig flag
  8053 000021B9 53                      		push	bx              ; for removable drives
  8054 000021BA 51                      		push	cx
  8055                                  		; 28/12/2023
  8056                                  		;push	dx ; (not necessary)
  8057                                  	
  8058                                  		; 12/12/2023
  8059 000021BB 06                      		push	es
  8060 000021BC 1F                      		pop	ds
  8061                                  
  8062 000021BD 8B450E                  		mov	ax, [di+0Eh]    ; [di+BDS.totalsecs16]
  8063 000021C0 31D2                    		xor	dx, dx
  8064 000021C2 09C0                    		or	ax, ax
  8065 000021C4 7506                    		jnz	short prep_totalsecs_ok
  8066 000021C6 8B451B                  		mov	ax, [di+1Bh]    ; [di+BDS.totalsecs32]
  8067 000021C9 8B551D                  		mov	dx, [di+1Dh]
  8068                                  prep_totalsecs_ok:
  8069 000021CC 2B4509                  		sub	ax, [di+9]      ; [di+BDS.resectors]
  8070 000021CF 83DA00                  		sbb	dx, 0
  8071 000021D2 50                      		push	ax
  8072 000021D3 52                      		push	dx
  8073 000021D4 8B5D11                  		mov	bx, [di+11h]    ; [di+BDS.fatsecs16]
  8074 000021D7 31C0                    		xor	ax, ax
  8075 000021D9 09DB                    		or	bx, bx
  8076 000021DB 7506                    		jnz	short prep_fatsecs_ok
  8077 000021DD 8B5D1F                  		mov	bx, [di+1Fh]    ; [di+BDS.fatsecs32]
  8078 000021E0 8B4521                  		mov	ax, [di+21h]
  8079                                  prep_fatsecs_ok:
  8080 000021E3 8A4D0B                  		mov	cl, [di+0Bh]    ; ax:bx = 32 bit count of FAT sectors
  8081                                  				        ; [di+BDS.fats]
  8082 000021E6 30ED                    		xor	ch, ch
  8083 000021E8 F7E1                    		mul	cx
  8084 000021EA 91                      		xchg	ax, cx
  8085 000021EB F7E3                    		mul	bx
  8086 000021ED 01D1                    		add	cx, dx
  8087 000021EF 89C3                    		mov	bx, ax          ; cx:bx = total (2*) fat sectors
  8088 000021F1 5A                      		pop	dx
  8089 000021F2 58                      		pop	ax              ; dx:ax = totals sectors - reserved sectors
  8090 000021F3 29D8                    		sub	ax, bx
  8091 000021F5 19CA                    		sbb	dx, cx          ; dx:ax = data sectors (includes root dir sectors)
  8092 000021F7 8B5D0C                  		mov	bx, [di+0Ch]    ; [di+BDS.direntries]
  8093 000021FA 83C30F                  		add	bx, 15          ; 16 directory entries per sector
  8094                                  				        ; (round up sector count by adding 15)
  8095 000021FD B104                    		mov	cl, 4           ; (rounded) dir entries / 16
  8096 000021FF D3EB                    		shr	bx, cl
  8097 00002201 31C9                    		xor	cx, cx
  8098 00002203 29D8                    		sub	ax, bx
  8099 00002205 19CA                    		sbb	dx, cx          ; dx:ax = data sectors (except root directory sectors)
  8100                                  					; (will be used for cluster count calculation)
  8101 00002207 8A4D08                  		mov	cl, [di+8]      ; [di+BDS.secperclus]
  8102                                  
  8103                                  		; 12/12/2023
  8104 0000220A 0E                      		push	cs
  8105 0000220B 1F                      		pop	ds
  8106                                  
  8107 0000220C 50                      		push	ax              ; 32 bit division (data sectors / sector per cluster)
  8108 0000220D 89D0                    		mov	ax, dx
  8109 0000220F 31D2                    		xor	dx, dx
  8110 00002211 F7F1                    		div	cx
  8111 00002213 89C3                    		mov	bx, ax
  8112 00002215 58                      		pop	ax
  8113 00002216 F7F1                    		div	cx
  8114 00002218 09DB                    		or	bx, bx          ; 32 bit cluster count if bx > 0
  8115 0000221A 7505                    		jnz	short set_fbigbig_flag ; too big cluster number
  8116 0000221C 83F8F6                  		cmp	ax, 0FFF6h
  8117 0000221F 7207                    		jb	short set_fbig_flag
  8118                                  set_fbigbig_flag:
  8119 00002221 800E[061A]20            		or	byte [fbigfat], 20h ; FAT32 ; fbigbig
  8120 00002226 EB0A                    		jmp	short set_fbig_flag_ok
  8121                                  ; ---------------------------------------------------------------------------
  8122                                  
  8123                                  set_fbig_flag:
  8124 00002228 3DF60F                  		cmp	ax, 0FF6h       ; 4096-10
  8125                                  				        ; is this 16-bit fat?
  8126 0000222B 7205                    		jb	short set_fbig_flag_ok ; no, small fat
  8127 0000222D 800E[061A]40            		or	byte [fbigfat], 40h ; FAT16 ; fbig
  8128                                  set_fbig_flag_ok:
  8129                                  		; 28/12/2023
  8130                                  		;pop	dx
  8131 00002232 59                      		pop	cx
  8132 00002233 5B                      		pop	bx
  8133                                  boot_drv_fixed:
  8134 00002234 31FF                    		xor	di, di
  8135                                  
  8136                                  		; cx = sectors/cluster
  8137                                  		; si:bx = first cluster
  8138                                  		; di = 0
  8139                                  
  8140                                  		; ...........
  8141                                  loadit:
  8142 00002236 B80405                  		mov	ax, SYSINITSEG	; 46Dh
  8143                                  		;mov	ax, 544h	; 11/12/2023 - PCDOS 7.1 IBMBIO.COM
  8144                                  		;;mov	ax, 46Dh	; sysinit segment
  8145 00002239 8EC0                    		mov	es, ax
  8146 0000223B 268E06[7302]            		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  8147                                  		;mov	es, [es:271h]
  8148                                  
  8149 00002240 E86008                  		call	getclus		; read cluster at ES:DI (DI is updated)
  8150                                  
  8151                                  ; ----------------------------------------------------------------------------
  8152                                  
  8153                                  		; 13/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8154                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2431h)
  8155                                  
  8156                                  		;test	byte [cs:fbigfat], 20h ; fbigbig ; FAT32 fs flag
  8157 00002243 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig ; FAT32 fs flag
  8158                                  		;jz	short iseof
  8159                                  		; 06/04/2024
  8160 00002248 750D                    		jnz	short eofbigbig
  8161                                  
  8162                                  ; ----------------------------------------------------------------------------
  8163                                  ; 06/04/2024
  8164                                  %if 1
  8165                                  		; 13/12/2023
  8166                                  iseof:
  8167                                  		;;test	byte [cs:fbigfat], fbig
  8168                                  		;test	byte [cs:fbigfat], 40h ; fbig
  8169                                  		; 12/12/2023
  8170                                  		; ds = cs
  8171 0000224A F606[061A]40            		test	byte [fbigfat], 40h ; fbig
  8172 0000224F 750C                    		jnz	short eofbig
  8173 00002251 81FBF70F                		cmp	bx, 0FF7h
  8174 00002255 EB09                    		jmp	short iseofx
  8175                                  %endif
  8176                                  ; ----------------------------------------------------------------------------
  8177                                  
  8178                                  eofbigbig:	; si:bx = 32 bit cluster number
  8179 00002257 81FEFF0F                		cmp	si, 0FFFh
  8180 0000225B 7503                    		jnz	short iseofx
  8181                                  		;cmp	bx, 0FFF7h
  8182                                  		;jmp	short iseofx
  8183                                  		; 06/04/2024
  8184                                  		;jmp	short eofbig
  8185                                  
  8186                                  ; ----------------------------------------------------------------------------
  8187                                  ; 06/04/2024
  8188                                  %if 0
  8189                                  		; 13/12/2023
  8190                                  iseof:
  8191                                  		;;test	byte [cs:fbigfat], fbig
  8192                                  		;test	byte [cs:fbigfat], 40h ; fbig
  8193                                  		; 12/12/2023
  8194                                  		; ds = cs
  8195                                  		test	byte [fbigfat], 40h ; fbig
  8196                                  		jnz	short eofbig
  8197                                  		cmp	bx, 0FF7h
  8198                                  		jmp	short iseofx
  8199                                  %endif
  8200                                  ; ----------------------------------------------------------------------------
  8201                                  
  8202                                  eofbig:
  8203 0000225D 83FBF7                  		cmp	bx, 0FFF7h
  8204                                  iseofx:
  8205 00002260 72D4                    		jb	short loadit	; keep loading until cluster = eof
  8206                                  ; ----------------------------------------------------------------------------
  8207                                  
  8208                                  		; 06/04/2024
  8209                                  		;call	setdrvparms	;
  8210                                  
  8211                                  		; 28/12/2023
  8212 00002262 58                      		pop	ax		; (*) restore fbigfat flags
  8213                                  					; (after loading DOS kernel)
  8214                                  		; 06/04/2024
  8215                                  		;mov	[cs:fbigfat], al
  8216 00002263 A2[061A]                		mov	[fbigfat], al
  8217                                  
  8218 00002266 E80405                  		call	setdrvparms	; 06/04/2024
  8219                                  
  8220                                  		;;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  8221                                  		;;jmp	far 46Dh:267h
  8222                                  		; 12/12/2023
  8223                                  		;jmp	far 544h:269h	; (PCDOS 7.1 IBMBIO.COM)
  8224                                  
  8225 00002269 EA[6902]0405            		jmp	SYSINITSEG:SYSINITSTART
  8226                                  
  8227                                  ; =============== S U B	R O U T	I N E ========================================
  8228                                  
  8229                                  ; Following are subroutines to support resident device driver initialization
  8230                                  ;
  8231                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  8232                                  
  8233                                  ;	M035 -- begin changed section
  8234                                  
  8235                                  ;******************************************************************************
  8236                                  ; module name: remap
  8237                                  ;
  8238                                  ; descriptive name: all the code for himem that could be separated from msbio
  8239                                  ;
  8240                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  8241                                  ;	     letters) if more than two diskette drives on the system.
  8242                                  ;
  8243                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  8244                                  ;	       as usual and then rescan the bds chain to adjust the drive
  8245                                  ;	       letters. to do this, scan for disk drives and assign logical
  8246                                  ;	       drive number starting from 2 and then rescan diskette drives
  8247                                  ;	       and assign next to the last logical drive number of last disk
  8248                                  ;	       drive to the 3rd and 4th diskette drives.
  8249                                  
  8250                                  ; input:       none
  8251                                  ; exit:	drive letters have been remapped in bds chain
  8252                                  ; exit error:  none
  8253                                  ; called from: msinit
  8254                                  ;
  8255                                  ; notes:  this function  will be called only if more than 2 diskettes are
  8256                                  ;	  found in the system
  8257                                  ;	  this function assumes that there are no more than 26 drives assigned
  8258                                  ;	    this is guaranteed by the code that creates bdss for partitions
  8259                                  ;	  this function assumes that the first entries in the chain are
  8260                                  ;	   floppy drives, and all the rest are hard drives
  8261                                  ;	  will alter the boot drive if necessary to reflect remapping
  8262                                  ;
  8263                                  ;******************************************************************************
  8264                                  
  8265                                  ; 17/10/2022
  8266                                  ; 02/10/2022
  8267                                  		; 15/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8268                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2464h)
  8269                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1D9Eh)
  8270                                  
  8271                                  remap:		; proc near
  8272                                  
  8273                                  		; 15/12/2023
  8274                                  		; ds = cs
  8275                                  		;mov	di, [cs:start_bds] ; get first bds
  8276 0000226E 8B3E[1901]              		mov	di, [start_bds]
  8277                                  
  8278                                  ; search for 1st fixed disk physical drive num
  8279                                  
  8280                                  drive_loop:
  8281 00002272 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  8282                                  					; first	hard disk??
  8283 00002276 7409                    		jz	short fdrv_found ; yes,	continue
  8284 00002278 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8285                                  					; get next bds,	assume segment
  8286 0000227A 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  8287 0000227D 75F3                    		jnz	short drive_loop ; loop	if not
  8288 0000227F EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  8289                                  
  8290                                  ;------------------------------------------------------------------------------
  8291                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  8292                                  ;logical drive nums to 3, 4, 5 etc.
  8293                                  ;------------------------------------------------------------------------------
  8294                                  
  8295                                  fdrv_found:
  8296 00002281 B002                    		mov	al, 2		; start	with logical drv num=2
  8297                                  fdrv_loop:
  8298 00002283 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  8299 00002286 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8300                                  					; ds:di--> next	bds
  8301                                  		;inc	al		; set num for next drive
  8302                                  		; 18/12/2022
  8303 00002288 40                      		inc	ax
  8304 00002289 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  8305 0000228C 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  8306                                  
  8307                                  ;------------------------------------------------------------------------------
  8308                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  8309                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  8310                                  ; any more.
  8311                                  ;------------------------------------------------------------------------------
  8312                                  
  8313                                  		;mov	di, [cs:start_bds] ; [start_bds]
  8314                                  		; 15/12/2023
  8315 0000228E 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  8316 00002292 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8317                                  					; ds:di-->bds2
  8318                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  8319 00002294 8A26[2501]              		mov	ah, [dsktnum]
  8320 00002298 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  8321                                  remap_loop1:
  8322 0000229B 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8323                                  					; set new num to next floppy
  8324 0000229D 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  8325 000022A0 FEC0                    		inc	al		; new number for next floppy
  8326 000022A2 FECC                    		dec	ah		; count down extra floppies
  8327 000022A4 75F5                    		jnz	short remap_loop1
  8328                                  
  8329                                  ; now we've got to adjust the boot drive if we reassigned it
  8330                                  
  8331                                  		; 15/12/2023
  8332                                  		;mov	al, [cs:drvfat]
  8333 000022A6 A0[FA19]                		mov	al, [drvfat]
  8334 000022A9 3C02                    		cmp	al, 2		; is it	a: or b: ?
  8335 000022AB 721D                    		jb	short rmap_exit
  8336                                  		;sub	al, [cs:dsktnum]
  8337 000022AD 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  8338 000022B1 7204                    		jb	short remap_boot_flop ;	brif so
  8339                                  
  8340                                  ; we've got to remap the boot hard drive
  8341                                  ; subtract the number of EXTRA floppies from it
  8342                                  
  8343 000022B3 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  8344 000022B5 EB04                    		jmp	short remap_change_boot_drv
  8345                                  ; ---------------------------------------------------------------------------
  8346                                  
  8347                                  ; we've got to remap the boot floppy.
  8348                                  ; add the number of hard drive partitions to it
  8349                                  
  8350                                  remap_boot_flop:
  8351                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  8352                                  		; 15/12/2023
  8353 000022B7 0206[7500]              		add	al, [drvmax]
  8354                                  remap_change_boot_drv:			
  8355                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  8356 000022BB A2[FA19]                		mov	[drvfat], al
  8357 000022BE FEC0                    		inc	al
  8358 000022C0 1E                      		push	ds
  8359 000022C1 BF0405                  		mov	di, SYSINITSEG	; 46Dh
  8360                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  8361                                  		;;mov	di, 46Dh	; SYSINIT segment
  8362 000022C4 8EDF                    		mov	ds, di
  8363 000022C6 A2[9802]                		mov	[DEFAULTDRIVE], al
  8364                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  8365                                  					; pass it to sysinit as	well
  8366 000022C9 1F                      		pop	ds ; ds = cs
  8367                                  rmap_exit:
  8368 000022CA C3                      		retn
  8369                                  
  8370                                  ; =============== S U B	R O U T	I N E =======================================
  8371                                  
  8372                                  ; 17/10/2022
  8373                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  8374                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  8375                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  8376                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  8377                                  ;**************************************************
  8378                                  ; getboot - get the boot sector for a hard disk
  8379                                  ;
  8380                                  ; Reads the boot sector from a specified drive into
  8381                                  ; a buffer at the top of memory.
  8382                                  ;
  8383                                  ; dl = int13 drive number to read boot sector for
  8384                                  ;**************************************************
  8385                                  
  8386                                  ; 17/10/2022
  8387                                  bootbias equ 200h
  8388                                  
  8389                                  getboot:	; proc near
  8390                                  
  8391                                  		; 15/12/2023 - Retro DOS v5.0 
  8392                                  		;	 (Modified PCDOS 7.1) IBMBIO.COM/IO.SYS
  8393                                  		; ds = cs
  8394                                  		
  8395                                  		; 08/04/2018
  8396                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  8397                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  8398                                  		; 02/10/2022 - Retro DOS v4.0
  8399                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  8400                                  
  8401                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  8402                                  		; 15/12/2023
  8403 000022CB A1[041A]                		mov	ax, [init_bootseg]
  8404 000022CE 8EC0                    		mov	es, ax
  8405                                  
  8406                                  		; 17/10/2022
  8407 000022D0 BB0002                  		mov	bx, bootbias ; 200h
  8408                                  		;mov	bx, 200h	; bootbias
  8409                                  					; load BX, ES:BX is where sector goes
  8410 000022D3 B80102                  		mov	ax, 201h
  8411 000022D6 30F6                    		xor	dh, dh
  8412 000022D8 B90100                  		mov	cx, 1
  8413 000022DB CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  8414                                  					; AL = number of sectors to read, CH = track, CL = sector
  8415                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  8416                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  8417 000022DD 7209                    		jc	short erret
  8418                                  		; 17/10/2022
  8419 000022DF 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  8420                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  8421                                  					; Dave Litton magic word?
  8422 000022E6 7401                    		jz	short norm_ret	; yes
  8423                                  erret:
  8424 000022E8 F9                      		stc
  8425                                  norm_ret:
  8426 000022E9 C3                      		retn
  8427                                  
  8428                                  ; =============== S U B	R O U T	I N E =======================================
  8429                                  
  8430                                  ; 28/12/2018 - Retro DOS v4.0 
  8431                                  
  8432                                  ;***************************************************************************
  8433                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  8434                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  8435                                  ;   our own logical sectors start. we also read in our boot sector to
  8436                                  ;   determine version number
  8437                                  ;
  8438                                  ;   inputs:	dl is rom drive number (80...)
  8439                                  ;		bh is partition number (0....) 
  8440                                  ;		ds:di points to bds
  8441                                  ;   outputs:	carry clear -> bpb is filled in
  8442                                  ;		carry set   -> bpb is left uninitialized due to error
  8443                                  ;	trashes (at least) si, cx
  8444                                  ;	MUST PRESERVE ES:!!!!
  8445                                  ;***************************************************************************
  8446                                  
  8447                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8448                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:24E9h)
  8449                                  
  8450                                  sethard:	; proc near
  8451                                  		; 12/08/2023
  8452                                  		; ds = cs = BIOSDATA
  8453 000022EA 57                      		push	di
  8454 000022EB 53                      		push	bx
  8455                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  8456 000022EC 06                      		push	es
  8457 000022ED 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  8458 000022F0 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  8459                                  		; 16/12/2023
  8460 000022F3 804D3F01                		or	byte [di+3Fh], 1 ; PCDOS 7.1
  8461                                  		;or	byte [di+23h], 1 ; [di+BDS.flags]
  8462                                  					; fnon_removable
  8463 000022F7 C6453E05                		mov	byte [di+3Eh], 5 ; PCDOS 7.1
  8464                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  8465                                  					; ffHardFile
  8466 000022FB C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  8467 00002300 88FE                    		mov	dh, bh		; partition number
  8468 00002302 52                      		push	dx
  8469 00002303 B408                    		mov	ah, 8
  8470 00002305 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  8471                                  					; DL = drive number
  8472                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  8473                                  					; DL = number of consecutive drives
  8474                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  8475                                  		;inc	dh
  8476                                  		; 16/12/2023 - Retro DOS v5.0
  8477 00002307 88F2                    		mov	dl, dh
  8478 00002309 B600                    		mov	dh, 0
  8479 0000230B 42                      		inc	dx
  8480                                  		;mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  8481 0000230C 895515                  		mov	[di+15h], dx
  8482 0000230F 5A                      		pop	dx
  8483 00002310 7253                    		jc	short setret	; error	if no hard disk
  8484                                  		; 16/12/2023
  8485                                  		;jc	short setret_j
  8486                                  		
  8487                                  		; 17/04/2024
  8488                                  		;and	cx, 3Fh
  8489                                  		;mov	[di+13h],cx
  8490 00002312 80E13F                  		and	cl, 3Fh
  8491 00002315 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  8492                                  
  8493 00002318 52                      		push	dx		; save partition number
  8494 00002319 E8AFFF                  		call	getboot
  8495 0000231C 5A                      		pop	dx		; restore partition number
  8496 0000231D 7246                    		jc	short setret
  8497                                  		; 16/12/2023
  8498                                  		;jnc	short chk_act_part
  8499                                  ;setret_j:
  8500                                  		;jmp	setret
  8501                                  
  8502                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8503                                  chk_act_part:
  8504 0000231F 31DB                    		xor	bx, bx ; 0
  8505                                  		;;mov	[cs:ep_start_sector], bx
  8506                                  		;;mov	[cs:ep_start_sector+2], bx
  8507                                  		;mov	[cs:ep_hidden_secs], bx
  8508                                  		;mov	[cs:ep_hidden_secs+2], bx
  8509                                  		; 16/12/2023
  8510                                  		; ds = cs
  8511                                  		; 20/12/2023
  8512                                  		;mov	[ep_start_sector], bx
  8513                                  		;mov	[ep_start_sector+2], bx
  8514 00002321 891E[8723]              		mov	[ep_hidden_secs], bx
  8515 00002325 891E[8923]              		mov	[ep_hidden_secs+2], bx
  8516                                  		
  8517 00002329 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  8518                                  
  8519                                  ; The first 'active' partition is 00, the second is 01....
  8520                                  ;   then the remainder of the 'primary' but non-active partitions
  8521                                  
  8522                                  act_part:
  8523 0000232C 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  8524 00002331 740B                    		jz	short no_act	; no
  8525                                  ; 16/12/2023
  8526                                  %if 0		
  8527                                  		; 16/12/2023
  8528                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  8529                                  		cmp	byte [es:bx], 1 ; FAT12
  8530                                  		jz	short got_good_act
  8531                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  8532                                  		jz	short got_good_act
  8533                                  		
  8534                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8535                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  8536                                  		jz	short got_good_act
  8537                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  8538                                  		jz	short got_good_act
  8539                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  8540                                  		jz	short got_good_act
  8541                                  
  8542                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  8543                                  		jnz	short no_act
  8544                                  ;%else
  8545                                  		; 16/12/2023
  8546                                  		mov	al, [es:bx]	 ; partition type
  8547                                  
  8548                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  8549                                  		cmp	al, 1		; FAT12
  8550                                  		je	short got_good_act
  8551                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8552                                  		je	short got_good_act
  8553                                  		
  8554                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8555                                  		cmp	al, 0Bh		; FAT32 CHS
  8556                                  		je	short got_good_act
  8557                                  		cmp	al, 0Ch		; FAT32 LBA
  8558                                  		je	short got_good_act
  8559                                  		cmp	al, 0Eh		; FAT16 LBA
  8560                                  		je	short got_good_act
  8561                                  
  8562                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8563                                  		jne	short no_act
  8564                                  %endif		
  8565                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8566                                  		; check if it is a primary dos partition
  8567                                  
  8568 00002333 E83300                  		call	chk_partition_type
  8569 00002336 7506                    		jne	short no_act
  8570                                  
  8571                                  got_good_act:				; 11/08/2023
  8572 00002338 08F6                    		or	dh, dh		; is this our target partition #?
  8573                                  					; (0 = first primary dos or active partition)
  8574 0000233A 744F                    		jz	short set2	; WE GOT THE ONE WANTED!!
  8575 0000233C FECE                    		dec	dh		; count	down
  8576                                  no_act:					
  8577 0000233E 83C310                  		add	bx, 16
  8578 00002341 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  8579                                  					; last entry done?
  8580 00002345 75E5                    		jnz	short act_part	; no, process next entry
  8581                                  
  8582 00002347 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  8583                                  					; restore original value of bx
  8584                                  
  8585                                  ; Now scan the non-active partitions
  8586                                  
  8587                                  get_primary:
  8588 0000234A 26F647FC80              		test	byte [es:bx-4], 80h
  8589 0000234F 750B                    		jnz	short not_prim	; we've already scanned
  8590                                  					; the ACTIVE ones
  8591                                  ; 16/12/2023
  8592                                  %if 0
  8593                                  		; 16/12/2023
  8594                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8595                                  		cmp	byte [es:bx], 1	; FAT12
  8596                                  		jz	short got_prim
  8597                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  8598                                  		jz	short got_prim
  8599                                  
  8600                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8601                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  8602                                  		jz	short got_prim
  8603                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  8604                                  		jz	short got_prim
  8605                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  8606                                  		jz	short got_prim
  8607                                  
  8608                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  8609                                  		jnz	short not_prim
  8610                                  ;%else
  8611                                  		; 16/12/2023
  8612                                  		mov	al, [es:bx]	 ; partition type
  8613                                  
  8614                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8615                                  		cmp	al, 1		; FAT12
  8616                                  		je	short got_prim
  8617                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8618                                  		je	short got_prim
  8619                                  		
  8620                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8621                                  		cmp	al, 0Bh		; FAT32 CHS
  8622                                  		je	short got_prim
  8623                                  		cmp	al, 0Ch		; FAT32 LBA
  8624                                  		je	short got_prim
  8625                                  		cmp	al, 0Eh		; FAT16 LBA
  8626                                  		je	short got_prim
  8627                                  
  8628                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8629                                  		jne	short not_prim
  8630                                  %endif
  8631                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8632                                  		; check if it is a primary dos partition
  8633                                  
  8634 00002351 E81500                  		call	chk_partition_type
  8635 00002354 7506                    		jne	short not_prim
  8636                                  
  8637                                  got_prim:
  8638 00002356 08F6                    		or	dh, dh		; is this our target partition?
  8639 00002358 7431                    		jz	short set2
  8640 0000235A FECE                    		dec	dh
  8641                                  not_prim:
  8642 0000235C 83C310                  		add	bx, 16
  8643 0000235F 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  8644 00002363 75E5                    		jne	short get_primary ; loop till we've gone through table
  8645                                  setret:					
  8646 00002365 F9                      		stc			; error	return
  8647 00002366 E9C703                  		jmp	ret_hard_err
  8648                                  
  8649                                  ; ---------------------------------------------------------------------------
  8650                                  		
  8651                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8652                                  
  8653                                  chk_partition_type:
  8654                                  		; 16/12/2023
  8655 00002369 268A07                  		mov	al, [es:bx]	 ; partition type
  8656                                  
  8657                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8658 0000236C 3C01                    		cmp	al, 1		; FAT12
  8659 0000236E 7412                    		je	short chk_ptype_retn
  8660 00002370 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8661 00002372 740E                    		je	short chk_ptype_retn
  8662                                  		
  8663                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8664 00002374 3C0B                    		cmp	al, 0Bh		; FAT32 CHS
  8665 00002376 740A                    		je	short chk_ptype_retn
  8666 00002378 3C0C                    		cmp	al, 0Ch		; FAT32 LBA
  8667 0000237A 7406                    		je	short chk_ptype_retn
  8668 0000237C 3C0E                    		cmp	al, 0Eh		; FAT16 LBA
  8669 0000237E 7402                    		je	short chk_ptype_retn
  8670                                  
  8671 00002380 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8672                                  chk_ptype_retn:
  8673                                  		; zf = 1 -> primary DOS partition
  8674                                  		; zf = 0 -> not a primary DOS partition
  8675 00002382 C3                      		retn
  8676                                  
  8677                                  ; ---------------------------------------------------------------------------
  8678                                  
  8679                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8680                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:25B6h)
  8681                                  ep_start_sector:
  8682 00002383 00000000                		dd 0
  8683 00002387 00000000                ep_hidden_secs:	dd 0
  8684                                  
  8685                                  ; ---------------------------------------------------------------------------
  8686                                  
  8687                                  ;  until we get the real logical boot record and get the bpb,
  8688                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  8689                                  ;  for the convenience of the computation.
  8690                                  ;
  8691                                  ;  at the end of this procedure, if a bpb information is gotten from
  8692                                  ;  the valid boot record, then we are going to use those bpb information
  8693                                  ;  without change.
  8694                                  ;
  8695                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  8696                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  8697                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  8698                                  
  8699                                  set2:		
  8700                                  		; 12/08/2023
  8701                                  		; ds = cs = BIOSDATA segment (0070h)
  8702 0000238B 8816[071A]              		mov	[rom_drv_num], dl
  8703                                  		;mov	[cs:rom_drv_num], dl
  8704                                  			; save the rom bios drive number we are handling now.
  8705 0000238F 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  8706 00002393 268B5706                		mov	dx, [es:bx+6]
  8707                                  
  8708                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  8709                                  ; sectors should be allowed	
  8710                                  
  8711 00002397 83E801                  		sub	ax, 1
  8712 0000239A 83DA00                  		sbb	dx, 0
  8713 0000239D 26034708                		add	ax, [es:bx+8]	; sectors in partition
  8714 000023A1 2613570A                		adc	dx, [es:bx+10]
  8715 000023A5 7305                    		jnc	short okdrive
  8716 000023A7 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8717                                  
  8718                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8719                                  		;;;
  8720                                  okdrive:
  8721                                  		;add	ax, [cs:ep_hidden_secs]
  8722                                  		;adc	dx, [cs:ep_hidden_secs+2]
  8723                                  		; ds = cs
  8724 000023AC 0306[8723]              		add	ax, [ep_hidden_secs]
  8725 000023B0 1316[8923]              		adc	dx, [ep_hidden_secs+2]
  8726 000023B4 7305                    		jnc	short okdrive_1
  8727 000023B6 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8728                                  okdrive_1:
  8729 000023BB 26803F0C                		cmp	byte [es:bx], 0Ch ; FAT32 LBA partition ID
  8730 000023BF 7418                    		je	short set_lba_flag
  8731 000023C1 26803F0E                		cmp	byte [es:bx], 0Eh ; FAT16 LBA partition ID
  8732 000023C5 7412                    		je	short set_lba_flag
  8733 000023C7 3B5513                  		cmp	dx, [di+13h]	; if dx > [di+BDS.secpertrack] then
  8734 000023CA 730D                    		jnb	short set_lba_flag ; set LBA r/w flag
  8735 000023CC F77513                  		div	word [di+13h]
  8736 000023CF 31D2                    		xor	dx, dx
  8737 000023D1 F77515                  		div	word [di+15h]
  8738 000023D4 3D0004                  		cmp	ax, 400h	; if ax (cylinder number) >= 1024
  8739                                  					;  set LBA r/w flag
  8740 000023D7 7204                     		jb	short set3
  8741                                  set_lba_flag:
  8742 000023D9 804D4004                                or	byte [di+40h], 4 ; fLBArw ; LBA r/w flag
  8743                                  		;;;
  8744                                  ;okdrive:
  8745                                  		; 16/12/2023
  8746                                  set3:		
  8747                                  		;mov	ax, [es:bx+4]
  8748                                  		;mov	[di+17h], ax	; [di+BDS.hiddensecs]
  8749                                  		;			; BPB_HIDDENSECTORS = p->partitionbegin
  8750                                  		;mov	ax, [es:bx+6]
  8751                                  		;mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  8752                                  
  8753                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8754                                  		;;;
  8755 000023DD 268B4704                		mov	ax, [es:bx+4]	; start sector (LBA) of the partition
  8756 000023E1 268B5706                		mov	dx, [es:bx+6]
  8757                                  		;add	ax, [cs:ep_hidden_secs]
  8758                                  		;adc	dx, [cs:ep_hidden_secs+2]
  8759                                  		; ds = cs
  8760 000023E5 0306[8723]              		add	ax, [ep_hidden_secs]
  8761                                  					; + hidden secs of the extd dos partion
  8762 000023E9 1316[8923]              		adc	dx, [ep_hidden_secs+2]
  8763 000023ED 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  8764 000023F0 895519                  		mov	[di+19h], dx	; [di+BDS.hiddensecs+2]
  8765 000023F3 31C0                    		xor	ax, ax ; 0
  8766 000023F5 89457B                  		mov	[di+7Bh], ax	; [di+BDS.bdsm_hidden_trks]
  8767 000023F8 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsec16]	
  8768                                  		;;;
  8769                                  
  8770 000023FB 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  8771 000023FF 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  8772 00002403 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  8773 00002406 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  8774                                  					; bpb->maxsec =	p->partitionlength
  8775                                  		;cmp	dx, 0
  8776                                  		;ja	short okdrive_1
  8777                                  		; 16/12/2023
  8778 00002409 09D2                    		or	dx, dx
  8779 0000240B 7505                    		jnz	short set3_read
  8780 0000240D 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  8781                                  		;jb	short setret	; return -1;
  8782 00002410 7264                    		jb	short set3_err
  8783                                  ;okdrive_1:
  8784                                  		; 16/12/2023
  8785                                  set3_read:
  8786 00002412 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  8787 00002415 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  8788 00002418 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  8789                                  					; usually equal	to the # of sec/trk.
  8790 0000241A 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  8791 0000241D 50                      		push	ax
  8792 0000241E 89D0                    		mov	ax, dx
  8793 00002420 31D2                    		xor	dx, dx
  8794 00002422 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  8795                                  					; (track)temp_h:ax + (sector)dx
  8796                                  ; 16/12/2023
  8797                                  %if 0
  8798                                  		; 17/10/2022
  8799                                  		;mov	[cs:temp_h], ax
  8800                                  		; 12/08/2023 (ds=cs)
  8801                                  		mov	[temp_h], ax
  8802                                  		pop	ax
  8803                                  		div	bx
  8804                                  		mov	cl, dl
  8805                                  		inc	cl
  8806                                  		xor	bx, bx
  8807                                  		mov	bl, [di+15h]	; [di+BDS.heads]
  8808                                  		push	ax
  8809                                  		xor	dx, dx
  8810                                  		;mov	ax, [cs:temp_h]
  8811                                  		mov	ax, [temp_h] ; 12/08/2023
  8812                                  		div	bx
  8813                                  		;mov	[cs:temp_h], ax
  8814                                  		mov	[temp_h], ax ; 12/08/2023
  8815                                  		pop	ax
  8816                                  		div	bx		; dl is head, ax is cylinder
  8817                                  		; 12/08/2023 (ds=cs)
  8818                                  		cmp	word [temp_h], 0
  8819                                  		;cmp	word [cs:temp_h], 0
  8820                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  8821                                  		cmp	ax, 1024
  8822                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  8823                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  8824                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  8825                                  			; ('ja' must be 'jnb')
  8826                                  okdrive_2:
  8827                                   		; 28/07/2019
  8828                                  ; dl is head.
  8829                                  ; ax is cylinder
  8830                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  8831                                  
  8832                                  ;*** for mini disks ***
  8833                                  
  8834                                  		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  8835                                  					; check for mini disk
  8836                                  		jnz	short oknotmini	; not mini disk.
  8837                                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  8838                                  					; set the physical track number
  8839                                  oknotmini:
  8840                                  %endif
  8841                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8842                                  		;;;
  8843                                  		;mov	[cs:saved_word], ax
  8844 00002424 A3[9E04]                		mov	[saved_word], ax
  8845 00002427 58                      		pop	ax
  8846 00002428 F7F3                    		div	bx
  8847 0000242A 88D1                    		mov	cl, dl
  8848 0000242C FEC1                    		inc	cl
  8849 0000242E 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
  8850 00002431 50                      		push	ax
  8851 00002432 31D2                    		xor	dx, dx
  8852                                  		;mov	ax, [cs:saved_word]
  8853 00002434 A1[9E04]                		mov	ax, [saved_word]
  8854 00002437 F7F3                    		div	bx
  8855                                  		;mov	[cs:saved_word], ax
  8856 00002439 A3[9E04]                		mov	[saved_word], ax ; not necessary !? (ax must be 0)
  8857 0000243C 58                      		pop	ax
  8858 0000243D F7F3                    		div	bx		; dl is head, ax is cylinder
  8859                                  		; 16/12/2023
  8860 0000243F 0E                      		push	cs
  8861 00002440 07                      		pop	es ; (*)
  8862 00002441 BB[5201]                		mov	bx, disksector ; (**)
  8863                                  		;
  8864 00002444 F6454004                		test	byte [di+40h], 4 ; fLBArw ; LBA read/write flag
  8865 00002448 742F                    		jz	short set3_chs_read
  8866                                  set3_lba_read:
  8867                                  
  8868                                  ; 16/12/2023
  8869                                  %if 0
  8870                                  		;push	cs
  8871                                  		;pop	es ; (*)
  8872                                  		;mov	bx, disksector ; (**)
  8873                                  
  8874                                  		;push	ds
  8875                                  		;push	si
  8876                                  		xor	ax, ax	; 0
  8877                                  		push	ax
  8878                                  		push	ax
  8879                                  		mov	ax, [di+19h]	; [di+BDS.hiddensectors+2]
  8880                                  		push	ax
  8881                                  		mov	ax, [di+17h]	; [di+BDS.hiddensectors]
  8882                                  		push	ax
  8883                                  		push	es		; buffer address
  8884                                  		push	bx
  8885                                  		mov	ax, 1		; sector (read) count
  8886                                  		push	ax
  8887                                  		;mov	ax, 16		; DAP size
  8888                                  		mov	al, 16
  8889                                  		push	ax
  8890                                  		mov	dl, [rom_drv_num] ; ds = cs
  8891                                  		mov	ax, ss
  8892                                  		mov	ds, ax ; ds = ss
  8893                                  		mov	si, sp
  8894                                  		;mov	dl, [cs:rom_drv_num]
  8895                                  		mov	ah, 42h
  8896                                  		int	13h		; DISK - IBM/MS Extension
  8897                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  8898                                  		;pop	si
  8899                                  		;pop	ds
  8900                                  		jnc	short set3_lba_read_ok
  8901                                  		add	sp, 16
  8902                                  		;pop	si
  8903                                  		;pop	ds
  8904                                  set3_err:
  8905                                  		;jmp	setret
  8906                                  		jmp	ret_hard_err
  8907                                  
  8908                                  set3_lba_read_ok
  8909                                  		add	sp, 16
  8910                                  		;pop	si
  8911                                  		;pop	ds
  8912                                  		jmp	short set3_read_ok
  8913                                  %else
  8914                                  		; 16/12/2023
  8915                                  		;push	si ; * ; (not necessary)
  8916                                  		;mov	si, empty_dap_buff ; dap_buffer
  8917 0000244A BE[571B]                		mov	si, dap_buffer ; empty_dap_buff 
  8918 0000244D 56                      		push	si
  8919 0000244E 87F7                    		xchg	si, di
  8920                                  		; si = BDS
  8921                                  		; di = DAP buffer
  8922 00002450 B81000                  		mov	ax, 16
  8923 00002453 AB                      		stosw		; DAP size
  8924 00002454 B001                    		mov	al, 1
  8925 00002456 AB                      		stosw		; sector (read) count
  8926                                  		; buffer address
  8927 00002457 89D8                    		mov	ax, bx	; offset disksector
  8928 00002459 AB                      		stosw
  8929 0000245A 8CC0                    		mov	ax, es	; es=ds=cs = BIOSDATA segment
  8930 0000245C AB                      		stosw
  8931                                  		; sector address (bits 0 to 31)	
  8932 0000245D 8B4417                  		mov	ax, [si+17h] ; [di+BDS.hiddensectors]
  8933 00002460 AB                      		stosw
  8934 00002461 8B4419                  		mov	ax, [si+19h] ; [di+BDS.hiddensectors+2]
  8935 00002464 AB                      		stosw
  8936                                  		; sector address bits 32 to 63 (0)
  8937 00002465 31C0                    		xor	ax, ax ; 0
  8938 00002467 AB                      		stosw
  8939 00002468 AB                      		stosw
  8940                                  		;xchg	di, si
  8941 00002469 89F7                    		mov	di, si
  8942                                  		; di = BDS
  8943 0000246B 5E                      		pop	si ; DAP buffer address	
  8944                                  		
  8945 0000246C 8A16[071A]              		mov	dl, [rom_drv_num] ; ds = cs
  8946 00002470 B442                    		mov	ah, 42h
  8947 00002472 CD13                    		int	13h		; DISK - IBM/MS Extension
  8948                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  8949                                  		;pop	si ; *
  8950 00002474 7324                    		jnc	short set3_read_ok
  8951                                  set3_err:
  8952                                  		;jmp	setret
  8953 00002476 E9B702                  		jmp	ret_hard_err
  8954                                  %endif
  8955                                  
  8956                                  set3_chs_read:
  8957 00002479 837D7901                		cmp	word [di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
  8958 0000247D 7503                    		jnz	short oknotmini
  8959 0000247F 03457B                  		add	ax, [di+7Bh]	; [di+BDS.bdsm_hidden_trks]
  8960                                  		;;;
  8961                                  
  8962                                  oknotmini:
  8963                                  ;*** end of added logic for mini disk
  8964                                  				
  8965 00002482 D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  8966 00002484 D0CC                    		ror	ah, 1		; two bits of upper byte
  8967 00002486 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  8968 00002489 08E1                    		or	cl, ah		; move two bits to correct spot
  8969 0000248B 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  8970                                  					; cl is sector + 2 high bits of cylinder
  8971 0000248D 88D6                    		mov	dh, dl		; dh is	head
  8972                                  		
  8973                                  		; 12/08/2023 (ds=cs)
  8974 0000248F 8A16[071A]              		mov	dl, [rom_drv_num]
  8975                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  8976                                  
  8977                                  ; cl is sector + 2 high bits of cylinder
  8978                                  ; ch is low 8 bits of cylinder
  8979                                  ; dh is head
  8980                                  ; dl is drive
  8981                                  
  8982                                  ; for convenience, we are going to read the logical boot sector
  8983                                  ; into cs:disksector area.
  8984                                  
  8985                                  ; read in boot sector using bios disk interrupt. the buffer where it
  8986                                  ; is to be read in is cs:disksector.
  8987                                  
  8988                                  		; 16/12/2023
  8989                                  		; es=ds=cs = BIOSDATA segment
  8990                                  		; bx = disksector ; (**)
  8991                                  
  8992                                  		;push	cs
  8993                                  		;pop	es ; (*)
  8994                                  		
  8995                                  		;mov	bx, disksector	; for convenience,
  8996                                  					; we are going to read the logical boot sector
  8997                                  					; into cs:disksector area.
  8998 00002493 B80102                  		mov	ax, 201h
  8999 00002496 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9000                                  					; AL = number of sectors to read, CH = track, CL = sector
  9001                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9002                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9003                                  		; 16/12/2023
  9004 00002498 72DC                    		jc	short set3_err
  9005                                  
  9006                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  9007                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  9008                                  ; media if we recognize the version number.
  9009                                  
  9010                                  set3_read_ok:
  9011                                  		; 11/08/2023
  9012                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  9013                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  9014                                  		; 18/12/2023
  9015                                  		;push	bx ; +
  9016                                  		;push	ax ; (not necessary)
  9017                                  
  9018                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9019                                  		;;;
  9020 0000249A 81BFFE0155AA            		cmp	word [bx+1FEh], 0AA55h
  9021 000024A0 7541                    		jne	short invalid_boot_record
  9022                                  		; 16/12/2023
  9023                                  		; 12/08/2023
  9024                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  9025 000024A2 803FE9                  		cmp	byte [bx], 0E9h	; is it a near jump?
  9026 000024A5 740B                    		je	short check_1_ok ; yes
  9027 000024A7 803FEB                  		cmp	byte [bx], 0EBh	; is it a short jump?
  9028 000024AA 7537                    		jne	short invalid_boot_record ; no
  9029 000024AC 807F0290                		cmp	byte [bx+2], 90h ; yes, is the next one a nop?
  9030 000024B0 7531                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  9031                                  check_1_ok:
  9032 000024B2 837F1600                		cmp     word [bx+16h], 0 ; [bx+BPB_FATSz16]
  9033                                  		;jz	short check_1	; 16 bit FAT size is 0 if it is FAT32 bs
  9034                                  		; 16/12/2023
  9035 000024B6 740E                    		jz	short check_2	; FAT32 bs
  9036                                  
  9037                                  		; FAT16 or FAT12 bs
  9038                                  
  9039                                  		;push	ds
  9040                                  		;push	si  ; (not necessary)
  9041 000024B8 57                      		push	di
  9042                                  		; es=ds=cs = BIOSDATA segment
  9043                                  		;push	es
  9044                                  		;pop	ds
  9045                                  
  9046                                  		;mov	cx, 28
  9047 000024B9 B90E00                  		mov	cx, 14 ; *
  9048 000024BC 8D7724                  		lea	si, [bx+24h]	; move offset 36 to 63
  9049                                  					;      to offset 64 (28 bytes)
  9050 000024BF 8D7F40                  		lea	di, [bx+40h]	; boot sector offset 64
  9051 000024C2 FC                      		cld	; (not necessary, 'std' is not used before here)
  9052                                  		;rep movsb
  9053 000024C3 F3A5                    		rep movsw ; *
  9054 000024C5 5F                      		pop	di
  9055                                  		;pop	si
  9056                                  		;pop	ds
  9057                                  		;;;
  9058                                  ; 16/12/2023
  9059                                  %if 0
  9060                                  ;check_1:
  9061                                  		; 12/08/2023
  9062                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  9063                                  		cmp	byte [bx], 0E9h
  9064                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  9065                                  		je	short check_1_ok ; yes
  9066                                  		cmp	byte [bx], 0EBh
  9067                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  9068                                  		jne	short invalid_boot_record ; no
  9069                                  		cmp	byte [bx+2], 90h
  9070                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  9071                                  		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  9072                                  check_1_ok:
  9073                                  %endif
  9074                                  
  9075                                  ; 18/12/2023
  9076                                  %if 0
  9077                                  		; 14/08/2023
  9078                                  check_2:
  9079                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  9080                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  9081                                  					; point to the bpb in the boot record
  9082                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  9083                                  		mov	al, [bx+10] ; 12/08/2023 
  9084                                  					; get the mediadescriptor byte
  9085                                  		and	al, 0F0h	; mask off low nibble
  9086                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  9087                                  		jne	short invalid_boot_record ; no, invalid boot record
  9088                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  9089                                  		cmp	word [bx], 512 ; 12/08/2023
  9090                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  9091                                  
  9092                                  check2_ok:				; yes, mediadescriptor ok.
  9093                                  		mov	al, [bx+2] ; 12/08/2023
  9094                                  		;mov	al, [cs:bx+2]	; now make sure that
  9095                                  					; the sectorspercluster is
  9096                                  					; a power of 2
  9097                                  					;
  9098                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  9099                                  					; get the sectorspercluster
  9100                                  %endif
  9101                                  		;;;
  9102                                  check_2:
  9103                                  		; 18/12/2023
  9104                                  		; bx = disksector
  9105 000024C6 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9106                                  					; get the mediadescriptor byte
  9107 000024C9 24F0                    		and	al, 0F0h	; mask off low nibble
  9108 000024CB 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  9109 000024CD 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  9110 000024CF 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  9111 000024D4 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  9112                                  
  9113                                  check2_ok:	; yes, mediadescriptor ok.
  9114 000024D6 8A470D                  		mov	al, [bx+13]	; now make sure that
  9115                                  					; the sectorspercluster is
  9116                                  					; a power of 2
  9117                                  					;
  9118                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9119                                  					; get the sectorspercluster
  9120                                  		;;;
  9121                                  
  9122 000024D9 08C0                    		or	al, al		; is it zero?
  9123 000024DB 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  9124                                  
  9125                                  ck_power_of_two:
  9126 000024DD D0E8                    		shr	al, 1		; shift until first bit emerges
  9127 000024DF 73FC                    		jnc	short ck_power_of_two
  9128 000024E1 7406                    		jz	short valid_boot_record
  9129                                  
  9130                                  invalid_boot_record:
  9131                                  		; 18/12/2023
  9132                                  		;pop	ax
  9133                                  		;pop	bx ; +
  9134 000024E3 E96001                  		jmp	unknown		; jump to invalid boot record
  9135                                  					; unformatted or illegal media.
  9136                                  ; 16/12/2023
  9137                                  ; ---------------------------------------------------------------------------
  9138                                  ;	; 12/08/2023
  9139                                  ;setret_brdg:
  9140                                  ;		jmp	setret
  9141                                  ; ---------------------------------------------------------------------------
  9142                                  
  9143                                  unknown3_0_j:
  9144 000024E6 E96101                  		jmp	unknown3_0	; legally formatted media,
  9145                                  					; although, content might be bad.
  9146                                  ; ---------------------------------------------------------------------------
  9147                                  
  9148                                  valid_boot_record:
  9149                                  		; 18/12/2023
  9150                                  		;pop	ax
  9151                                  		;pop	bx ; +
  9152                                  		
  9153                                  		; 18/12/2023
  9154                                  		; bx = offset disksector ; +
  9155                                  
  9156                                  ; Signature found. Now check version.
  9157                                  
  9158                                  		; 14/08/2023
  9159 000024E9 817F08322E              		cmp	word [bx+8], '2.'
  9160                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  9161                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  9162 000024EE 7506                    		jne	short try5
  9163 000024F0 807F0A30                		cmp	byte [bx+10], '0'
  9164                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  9165                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  9166                                  		; 12/08/2023
  9167                                  		;jnz	short try5
  9168                                  		;jmp	short copybpb
  9169 000024F4 7425                    		je	short copybpb
  9170                                  
  9171                                  ;; --------------------------------------------------------------------------
  9172                                  ;;	; 12/08/2023
  9173                                  ;;setret_brdg:
  9174                                  ;;		jmp	setret
  9175                                  ;; --------------------------------------------------------------------------
  9176                                  ;
  9177                                  ;unknown3_0_j:
  9178                                  ;		jmp	unknown3_0	; legally formatted media,
  9179                                  ;					; although, content might be bad.
  9180                                  ; ---------------------------------------------------------------------------
  9181                                  
  9182                                  try5:
  9183 000024F6 E83B02                  		call	cover_fdisk_bug
  9184                                  
  9185                                  ; see if it is an os2 signature
  9186                                  
  9187                                  		; 12/08/2023
  9188                                  		; ds = cs = BIOSDATA segment
  9189 000024F9 817F08302E              		cmp	word [bx+8], '0.'
  9190                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  9191                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  9192 000024FE 750C                    		jne	short no_os2
  9193 00002500 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  9194                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  9195 00002503 2C31                    		sub	al, '1'
  9196                                  		;sub	al, 31h		; '1'
  9197 00002505 24FE                    		and	al, 0FEh
  9198 00002507 7412                    		jz	short copybpb	; accept either	'1' or '2'
  9199 00002509 E93A01                  		jmp	unknown
  9200                                  ; ---------------------------------------------------------------------------
  9201                                  
  9202                                  ; no os2 signature, this is to check for real dos versions
  9203                                  
  9204                                  no_os2:
  9205                                  		; 12/08/2023
  9206                                  		; ds = cs = BIOSDATA
  9207 0000250C 817F08332E              		cmp	word [bx+8], '3.'			
  9208                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  9209                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  9210 00002511 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  9211                                  					; do not trust it, but still legal.
  9212 00002513 7506                    		jnz	short copybpb	; honor	os2 boot record
  9213                                  					; or dos 4.0 version
  9214 00002515 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  9215                                  		;cmp	byte [cs:bx+10], '1'
  9216                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  9217 00002519 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  9218                                  copybpb:
  9219                                  
  9220                                  ; 03/10/2022
  9221                                  
  9222                                  ; we have a valid boot sector. use the bpb in it to build the
  9223                                  ; bpb in bios. it is assumed that only
  9224                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  9225                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  9226                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  9227                                  ; need to be set (all other values in already). fbigfat is also set.
  9228                                  
  9229                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  9230                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  9231                                  ; and system id according to the boot record.
  9232                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  9233                                  
  9234                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  9235                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2787h)
  9236                                  		;;;
  9237                                  		; 17/12/2023
  9238 0000251B BE[5D01]                		mov	si, disksector+11
  9239                                  		;sub	ch, ch ; ; (ch may be > 0)
  9240 0000251E 29C9                    		sub	cx, cx ; 0 
  9241                                  		;mov	cl, [disksector+16] ; BPB_NumFATs
  9242 00002520 8A4C05                  		mov	cl, [si+5] ; number of FATs
  9243                                  
  9244                                  		; NOTE: This check is not proper for FAT32 boot sector (standard spec)
  9245                                  		; (after PCDOS 7.1). So, it is not existing in Windows ME IO.SYS
  9246                                  		; Erdogan Tan - 01/09/2023 ((IBMBIO.COM 7.1 disassembly note))
  9247                                  
  9248                                  		;;cmp	word ptr cs:disksector+4Dh, 0 ; ???
  9249                                  		;cmp	word [disksector+4Dh], 0
  9250                                  		;jnz	short check_3
  9251                                  
  9252                                  		; 17/12/2023
  9253                                  		; check extended boot signature (0x29)
  9254                                  		;
  9255                                  		; (***) NOTE: 28 bytes of FAT16/FAT12 boot sector from offset 36
  9256                                  		; have been moved to offset 64 (see label 'check_1_ok:' above) 
  9257                                  		; ((now, BS_BootSig is at offset 66 even if it was at offset 38))
  9258                                  		
  9259                                  		;cmp	cs:disksector+42h, 29h	; BS_BootSig (FAT32)
  9260 00002523 803E[9401]29            		cmp	byte [disksector+42h], 29h ; BS_BootSig (***)
  9261                                  		;jmp	short check_4
  9262                                  check_3:
  9263                                  		;;cmp	cs:disksector+26h, 29h	; BS_BootSig (FAT16/FAT12)
  9264                                  		;cmp	byte [disksector+26h], 29h ; (***)
  9265                                  check_4:
  9266 00002528 7538                    		jnz	short copybpb_fat	; conventional fat system
  9267                                  
  9268                                  ; 17/12/2023
  9269                                  %if 0
  9270                                  		; 10/12/2022
  9271                                  		; (number of FATs optimization)
  9272                                  		mov	si, disksector+11 ; disksector+0Bh
  9273                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  9274                                  		;mov	cl, [cs:si+05h]
  9275                                  		; 12/08/2023
  9276                                  		; ds = cs = BIOSDATA segment (0070h)
  9277                                  		mov	cl, [si+05h] ; number of FATs
  9278                                  
  9279                                  		cmp	byte [si+1Bh], 29h ; 12/08/2023
  9280                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  9281                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  9282                                  					; [disksector+EXT_BOOT.SIG]
  9283                                  					; EXT_BOOT_SIGNATURE
  9284                                  		jnz	short copybpb_fat ; conventional fat system
  9285                                  
  9286                                  		; 03/10/2022
  9287                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  9288                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  9289                                  		;	     number of FATs must be 2 ; =*?=
  9290                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  9291                                  		;
  9292                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  9293                                  
  9294                                  		; 10/12/2022
  9295                                  		;cmp	byte [cs:disksector+10h], 0
  9296                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  9297                                  		;jnz	short copybpb_fat ; a fat system.
  9298                                  		or	cl, cl	 ; [cs:disksector+10h]
  9299                                  		jnz	short copybpb_fat ; a fat system.
  9300                                  %endif
  9301                                  
  9302                                  		; 17/12/2023 - Retro DOS v5.0
  9303                                  		;;cmp	byte [cs:disksector+10h], 0 ; BPB.fats
  9304                                  		;cmp	byte [disksector+10h], 0 ; BPB_NUmFATs
  9305                                  		;jnz	short copybpb_fat ; a fat system
  9306                                  		; 17/12/2023
  9307                                  		; cl = [disksector+10h]
  9308 0000252A 20C9                    		and	cl, cl ; 0 ?
  9309 0000252C 7534                    		jnz	short copybpb_fat ; a fat system
  9310                                  
  9311                                  ; non fat based	media.
  9312                                  
  9313 0000252E 57                      		push	di  ; BDS
  9314                                  		; 12/08/2023
  9315                                  		;push	ds  ; ds = cs = BIOSDATA segment
  9316                                  		
  9317                                  		; 17/12/2023
  9318                                  		; es = ds = cs
  9319                                  		;push	ds
  9320                                  		;pop	es
  9321                                  
  9322                                  		; 12/08/2023
  9323                                  		; ds = cs
  9324                                  		;push	cs
  9325                                  		;pop	ds
  9326                                  
  9327                                  		; 10/12/2022
  9328                                  		; (number of FATs optimization)
  9329                                  		; SI = disksector+11
  9330                                  		; 17/10/2022
  9331                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9332                                  		;mov	si, disksector+11
  9333 0000252F 83C706                  		add	di, 6		; add di,BDS.BPB
  9334                                  
  9335                                  ; just for completeness, we'll make sure that total_sectors and
  9336                                  ; big_total_sectors aren't both zero. I've seen examples of
  9337                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  9338                                  ; got that way. If it occurs, then use the values from the
  9339                                  ; partition table.
  9340                                  
  9341                                  		; 17/12/2023
  9342                                  		; cx = 0
  9343                                  		; 18/12/2022
  9344                                  		;sub	cx, cx
  9345                                  
  9346                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  9347                                  		;jnz	short already_nonz 
  9348                                  		;			; how about big_total?
  9349                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  9350                                  		;jnz	short already_nonz ; we're okay if any are != 0
  9351                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9352                                  		;jnz	short already_nonz
  9353                                  
  9354                                  		; 12/08/2023
  9355                                  		; ds = cs = BIOSDATA segment (0070h)
  9356                                  
  9357                                  		; 17/12/2023
  9358                                  		; 12/08/2023
  9359 00002532 394C08                  		cmp	[si+8], cx ; 0		; [si+EBPB.TOTALSECTORS]
  9360 00002535 751C                    		jnz	short already_nonz
  9361                                  				    	; how about big_total?
  9362 00002537 394C15                  		cmp	[si+15h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS]
  9363 0000253A 7517                    		jnz	short already_nonz ; we're okay if any are != 0
  9364 0000253C 394C17                  		cmp	[si+17h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS+2]
  9365 0000253F 7512                    		jnz	short already_nonz
  9366                                  
  9367                                  ; now let's copy the values from the partition table (now in the BDS)
  9368                                  ; into the BPB in the boot sector buffer, before they get copied back.
  9369                                  
  9370 00002541 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  9371                                  		; 12/08/2023
  9372                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  9373 00002544 894408                  		mov	[si+8], ax
  9374 00002547 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  9375                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  9376 0000254A 894415                  		mov	[si+15h], ax
  9377 0000254D 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  9378                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9379 00002550 894417                  		mov	[si+17h], ax
  9380                                  
  9381                                  already_nonz:
  9382                                  		; 18/12/2022
  9383                                  		; cx = 0
  9384                                  		;mov	cl, 25
  9385                                  		;;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  9386                                  		; 17/12/2023 - Retro DOS v5.0
  9387 00002553 B135                    		mov	cl, 53	; PCDOS 7.1 IBMBIO.COM
  9388                                  				; BDS.BPB size (25 + 28 for FAT32 parms)
  9389 00002555 F3A4                    		rep movsb
  9390                                  		;pop	ds
  9391                                  		; 12/08/2023
  9392                                  		; ds = cs
  9393                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  9394 00002557 5F                      		pop	di  ; BDS
  9395                                  		;push	es
  9396                                  		;push	ds
  9397                                  		;pop	es
  9398                                  		;push	cs
  9399                                  		;pop	ds
  9400                                  		; 12/08/2023
  9401                                  		;mov	es, bp
  9402                                  		; ds = cs = es
  9403                                  		
  9404                                  		; 14/08/2023
  9405 00002558 BD[4F08]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  9406                                  		; 18/12/2022
  9407                                  		;mov	bp, mov_media_ids
  9408                                  		;;mov	bp, 751h	; mov_media_ids
  9409                                  					; at 2C7h:751h = 70h:2CC1h
  9410                                  					; set volume id, systemid, serial.
  9411 0000255B 0E                      		push	cs		; simulate far call
  9412 0000255C E812F5                  		call	call_bios_code
  9413                                  		; 12/08/2023
  9414                                  		; ds = cs = es
  9415                                  		;push	es
  9416                                  		;pop	ds
  9417                                  		;pop	es
  9418 0000255F E9C701                  		jmp	goodret
  9419                                  
  9420                                  ; ---------------------------------------------------------------------------
  9421                                  
  9422                                  ; ****** cas ---
  9423                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  9424                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  9425                                  ; happens with some frequency -- perhaps through some OS/2 setup
  9426                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  9427                                  ; from the boot sector into the DPB anyway, we've just been using
  9428                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  9429                                  ; we'll go ahead and copy it into the DPB, except in the case
  9430                                  ; that it equals zero, in which case we just use the values in
  9431                                  ; the DPB from the partition table.
  9432                                  
  9433                                  ; 17/10/2022
  9434                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  9435                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  9436                                  ; 09/12/2022
  9437                                  MOVMEDIAIDS equ mov_media_ids
  9438                                  CLEARIDS equ clear_ids
  9439                                  ; 11/09/2023
  9440                                  CLEARIDS_X equ clear_ids_x
  9441                                  
  9442                                  copybpb_fat:
  9443                                  		; 17/12/2023
  9444                                  		; ch = 0, cl = number of FATs
  9445                                  		; 10/12/2022
  9446                                  		; (number of FATs optimization)
  9447                                  		; SI = disksector+11
  9448                                  		; 17/10/2022
  9449                                  		;mov	si, disksector+11
  9450                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9451                                  					; cs:si	-> bpb in boot
  9452                                  		; 17/12/2023
  9453                                  		; dx = 0
  9454                                  		; 18/04/2024 (BugFix)
  9455 00002562 31D2                    		xor	dx, dx
  9456                                  
  9457                                  		; 12/08/2023
  9458                                  		; ds = cs = BIOSDATA segment (0070h)
  9459 00002564 8B4408                  		mov	ax, [si+8]
  9460                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  9461                                  					; get totsec from boot sec
  9462 00002567 09C0                    		or	ax, ax
  9463 00002569 7514                    		jnz	short copy_totsec ; if non zero, use that
  9464 0000256B 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  9465                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  9466                                  					; get the big version
  9467                                  					; (32 bit total	sectors)
  9468 0000256E 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  9469                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9470                                  		; 10/12/2022
  9471                                  		; (number of FATs optimization)
  9472                                  		; CL = number of FATs (2 or 1) 
  9473 00002571 89D3                    		mov	bx, dx		; see if it is a big zero
  9474 00002573 09C3                    		or	bx, ax
  9475 00002575 7508                    		jnz	short copy_totsec
  9476                                  			; screw it. it was bogus.
  9477 00002577 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9478 0000257A 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9479 0000257D EB06                    		jmp	short fat_big_small
  9480                                  
  9481                                  		;mov	cx, dx
  9482                                  		;or	cx, ax		; see if it is a big zero
  9483                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  9484                                  copy_totsec:				
  9485 0000257F 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  9486                                  					; make DPB match boot sec
  9487 00002582 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  9488                                  
  9489                                  		; 10/12/2022
  9490                                  ;totsec_already_set:			
  9491                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9492                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9493                                  
  9494                                  ; determine fat entry size.
  9495                                  
  9496                                  fat_big_small:
  9497                                  
  9498                                  ;at this moment dx;ax = total sector number
  9499                                  
  9500                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  9501                                  ;from the BPB on the disk
  9502                                  		
  9503                                  		; 12/08/2023
  9504                                  		; ds = cs = BIOSDATA segment (0070h)
  9505                                  				
  9506 00002585 8B5C03                  		mov	bx, [si+3]
  9507                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  9508                                  					; get #reserved_sectors	from BPB
  9509 00002588 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  9510                                  					; update BDS field
  9511 0000258B 29D8                    		sub	ax, bx
  9512 0000258D 83DA00                  		sbb	dx, 0		; update the count
  9513                                  		; 12/08/2023
  9514 00002590 8B5C0B                  		mov	bx, [si+0Bh]
  9515                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  9516                                  					; bx = sectors/fat
  9517 00002593 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  9518                                  					; set in bds bpb
  9519                                  		; 17/12/2023 - Retro DOS v5.0
  9520                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  9521 00002596 53                      		push	bx ; FAT sectors
  9522 00002597 09DB                    		or	bx, bx
  9523 00002599 753A                    		jnz	short fat_16bit	
  9524                                  
  9525                                  ; 17/12/2023
  9526                                  %if 0		
  9527                                  		sub	ax, [si+19h]	; FAT32 file system (PCDOS 7.1 BUG!)
  9528                                  					; BPB.FATSz32
  9529                                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2 (PCDOS 7.1 BUG!)
  9530                                  		; dx:ax = partition size - (one FAT sectors + reserved sects)
  9531                                  		mov	bx, [si+19h]	; BPB.FATSz32
  9532                                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  9533                                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  9534                                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  9535                                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  9536                                  		mov	[di+23h], bx	; [di+BDS.extflags]
  9537                                  		mov	bx, [si+1Fh]	; BPB.FSVer
  9538                                  		mov	[di+25h], bx	; [di+BDS.fsver]
  9539                                  		mov	bx, [si+21h]	; BPB.RootClus
  9540                                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  9541                                  		mov	bx, [si+23h]	; BPB.RootClus+2
  9542                                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  9543                                  		mov	bx, [si+25h]	; BPB.FSInfo
  9544                                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  9545                                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  9546                                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  9547                                  		jmp	short fat_32bit	; PCDOS 7.1 BUG! Erdogan Tan - 8/8/2023
  9548                                  					; correct code (would be):
  9549                                  					;   mov cl, [cs:si+05h] ; BPB_NumFATs
  9550                                  					; sub_fat32_size:
  9551                                  					;   sub ax, [cs:si+19h] ; BPB_FATSz32
  9552                                  					;   sbb dx, [cs:si+1Bh] ; BPB_FATSz32+2
  9553                                  					;   dec cl
  9554                                  					;   jg short sub_fat32_size
  9555                                  					;   jmp short fat_32bit
  9556                                  %endif
  9557                                  		; 17/12/2023
  9558                                  		; cl = BPB_NumFATs (2 or 1)
  9559                                  		; ch = 0
  9560 0000259B 8B5C19                  		mov	bx, [si+19h]	; BPB.FATSz32
  9561                                  sub_fat32_size:
  9562 0000259E 29D8                    		sub	ax, bx
  9563 000025A0 1B541B                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2
  9564                                  		;dec	cl
  9565 000025A3 49                      		dec	cx
  9566 000025A4 7FF8                    		jg	short sub_fat32_size
  9567                                  
  9568 000025A6 895D1F                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  9569 000025A9 8B5C1B                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  9570 000025AC 895D21                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  9571                                  
  9572 000025AF 8B5C1D                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  9573 000025B2 895D23                  		mov	[di+23h], bx	; [di+BDS.extflags]
  9574 000025B5 8B5C1F                  		mov	bx, [si+1Fh]	; BPB.FSVer
  9575 000025B8 895D25                  		mov	[di+25h], bx	; [di+BDS.fsver]
  9576 000025BB 8B5C21                  		mov	bx, [si+21h]	; BPB.RootClus
  9577 000025BE 895D27                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  9578 000025C1 8B5C23                  		mov	bx, [si+23h]	; BPB.RootClus+2
  9579 000025C4 895D29                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  9580 000025C7 8B5C25                  		mov	bx, [si+25h]	; BPB.FSInfo
  9581 000025CA 895D2B                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  9582 000025CD 8B5C27                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  9583 000025D0 895D2D                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  9584 000025D3 EB08                    		jmp	short fat_32bit
  9585                                  		
  9586                                  fat_16bit:
  9587                                  		; 17/12/2023 - Retro DOS v5.0
  9588                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  9589                                  		; 10/12/2022
  9590                                  		; (number of FATs optimization)
  9591                                  		; CL = number of FATs (2 or 1)
  9592                                  		; CH = 0 ; 17/12/2023 
  9593                                  		;dec	cl ; *
  9594                                  		; 18/12/2022
  9595 000025D5 49                      		dec	cx ; *
  9596 000025D6 D3E3                    		shl	bx, cl
  9597                                  		;shl	bx, 1	; =*?=	; always 2 fats
  9598                                  		
  9599 000025D8 29D8                    		sub	ax, bx		; sub #	fat sectors
  9600 000025DA 83DA00                  		sbb	dx, 0
  9601                                  fat_32bit:	
  9602                                  		; 17/12/2023
  9603 000025DD 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  9604                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  9605                                  					; # root entries
  9606 000025E0 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  9607                                  					; set in bds bpb
  9608 000025E3 B104                    		mov	cl, 4
  9609 000025E5 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  9610 000025E7 29D8                    		sub	ax, bx		; sub #	dir sectors
  9611 000025E9 83DA00                  		sbb	dx, 0		;
  9612                                  					; dx:ax	now contains the
  9613                                  					; # of data sectors
  9614                                  		; 17/12/2023
  9615                                  		; ch = 0
  9616                                  		;xor	cx, cx ; *
  9617 000025EC 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  9618                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  9619                                  					; sectors per cluster
  9620 000025EF 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  9621                                  					; set in bios bpb
  9622 000025F2 50                      		push	ax
  9623 000025F3 89D0                    		mov	ax, dx
  9624 000025F5 31D2                    		xor	dx, dx
  9625 000025F7 F7F1                    		div	cx		; cx = sectors per cluster
  9626                                  		; 12/08/2023 (ds=cs)
  9627                                  		;mov	[temp_h], ax
  9628                                  		;;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  9629                                  					; # clusters.
  9630                                  		; 17/12/2023
  9631 000025F9 A3[9E04]                		mov	[saved_word], ax ; hw of cluster number
  9632 000025FC 58                      		pop	ax
  9633 000025FD F7F1                    		div	cx
  9634                                  		; 17/12/2023
  9635                                  		;;cmp	word [cs:temp_h], 0
  9636                                  		;cmp	word [temp_h], 0  ; 12/08/2023
  9637                                  		;cmp	word [saved_word], 0 ; (*)
  9638                                  		;ja	short toobig_ret ; too big cluster number
  9639                                  
  9640                                  		; 17/12/2023
  9641                                  		;;;
  9642 000025FF 5B                      		pop	bx ; FAT sectors (16 bit)
  9643                                  		;and	bx, bx ; 0 ?
  9644 00002600 09DB                    		or	bx, bx ; 0 ?
  9645 00002602 751F                    		jnz	short chk_clnum_hw
  9646                                  				 ; 16 bit fat sectors > 0 ; FAT12 or FAT16 fs
  9647                                  
  9648 00002604 813E[9E04]FF0F          		cmp	word [saved_word], 0FFFh 
  9649 0000260A 7503                    		jne	short fat32_clust_limit
  9650 0000260C 83F8F6                  		cmp	ax, 0FFF6h	; FAT32 cluster number limit: 0FFFFFF6h
  9651                                  fat32_clust_limit:
  9652 0000260F 772D                    		ja	short short toobig_ret ; too big cluster number
  9653 00002611 391E[9E04]              		cmp	[saved_word], bx ; 0 ?
  9654                                  	 	;jnz	short fat16_clust_limit
  9655 00002615 7505                    		jnz	short set_bigbig_flag ; 17/12/2023
  9656                                  fat16_clust_limit:	; 17/12/2023
  9657 00002617 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 cluster number limit: 0FFF6h
  9658                                  ;fat16_clust_limit:
  9659 0000261A 760E                    		jna     short fat12_clust_limit ; jbe
  9660                                  set_bigbig_flag:	; 17/12/2023
  9661 0000261C 800E[061A]20            		or	byte [fbigfat], 20h ; fbigbig ; FAT32 fs
  9662 00002621 EB11                    		jmp	short copymediaid
  9663                                  chk_clnum_hw:
  9664 00002623 833E[9E04]00            		cmp	word [saved_word], 0 ; (*)
  9665 00002628 7714                    		ja	short toobig_ret ; too big cluster number
  9666                                  		;;;
  9667                                  fat12_clust_limit:
  9668 0000262A 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  9669                                  					; is this 16-bit fat?
  9670 0000262D 7205                    		jb	short copymediaid ; no,	small fat
  9671                                  		; 17/10/2022
  9672 0000262F 800E[061A]40            		or	byte [fbigfat], 40h ; fbig ; FAT16 fs
  9673                                  		;or	ds:fbigfat, 40h	; fbig
  9674                                  					; 16 bit fat
  9675                                  copymediaid:
  9676                                  		; 17/12/2023
  9677                                  		; es = ds = cs
  9678                                  		
  9679                                  		;push	es
  9680                                  		;push	ds
  9681                                  		;pop	es
  9682                                  		
  9683                                  		; 12/08/2023
  9684                                  		; ds = cs = BIOSDATA
  9685                                  		;push	cs
  9686                                  		;pop	ds
  9687                                  		; 17/10/2022
  9688 00002634 BD[4F08]                		mov	bp, MOVMEDIAIDS
  9689                                  		;mov	bp, 865h	; (PCDOS 7.1 IBMBIO.COM)
  9690                                  		;;mov	bp, 751h	; mov_media_ids
  9691                                  					; at 2C7h:751h = 70h:2CC1h
  9692                                  					; copy filesys_id, volume label
  9693 00002637 0E                      		push	cs		; simulate far call
  9694 00002638 E836F4                  		call	call_bios_code
  9695                                  
  9696                                  		; 12/08/2023
  9697                                  		;push	es
  9698                                  		;pop	ds
  9699                                  		; 17/12/2023
  9700                                  		;pop	es
  9701                                  
  9702 0000263B E9CD00                  		jmp	massage_bpb	; now final check for bpb info
  9703                                  					; and return.
  9704                                  ; ---------------------------------------------------------------------------
  9705                                  
  9706                                  toobig_ret:
  9707                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  9708 0000263E 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  9709                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  9710                                  					; too big (32 bit clust #) for FAT16
  9711 00002643 E9E300                  		jmp	goodret		; still	drive letter is	assigned
  9712                                  					; but useless. to big for
  9713                                  					; current pc dos fat file system
  9714                                  ; ---------------------------------------------------------------------------
  9715                                  
  9716                                  unknown:
  9717                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9718 00002646 804D4002                		or	byte [di+40h], 2 ; [di+BDS.flags+1]
  9719                                  					 ; unformatted_media
  9720                                  		; 12/12/2022
  9721                                  		;or	byte [di+24h], 02h
  9722                                  		;;or	word [di+23h], 200h ; [di+BDS.flags]
  9723                                  					; unformatted_media
  9724                                  					; Set unformatted media	flag.
  9725                                  
  9726                                  ; the boot signature may not be	recognizable,
  9727                                  ; but we should	try and	read it	anyway.
  9728                                  
  9729                                  unknown3_0:
  9730 0000264A 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  9731                                  					; [di+BDS.totalsecs32+2]
  9732 0000264D 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9733 00002650 BE[161A]                		mov	si, disktable2
  9734                                  scan:					; 08/08/2023
  9735                                  		;cmp	dx, [cs:si]	; total sectors hw
  9736                                  		; 12/08/2023 (ds=cs)
  9737 00002653 3B14                    		cmp	dx, [si] 
  9738 00002655 720C                     		jb	short gotparm
  9739 00002657 7705                    		ja	short scan_next
  9740                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  9741 00002659 3B4402                  		cmp	ax, [si+2]
  9742 0000265C 7605                    		jbe	short gotparm
  9743                                  scan_next:				
  9744 0000265E 83C60A                  		add	si, 10		; 5*2
  9745 00002661 EBF0                    		jmp	short scan	; covers upto 512 mb media
  9746                                  ; ---------------------------------------------------------------------------
  9747                                  
  9748                                  gotparm:
  9749 00002663 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  9750                                  		;or	ds:fbigfat, cl
  9751                                  		; 17/10/2022
  9752 00002666 080E[061A]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  9753                                  		; 12/08/2023
  9754                                  		; ds = cs = BIOSDATA
  9755 0000266A 8B4C04                  		mov	cx, [si+4]
  9756                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  9757                                  					; cl = log base 2 of ch
  9758 0000266D 8B5406                  		mov	dx, [si+6]
  9759                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  9760                                  
  9761                                  ; now calculate size of fat table
  9762                                  
  9763 00002670 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9764                                  					; save number of (root)	dir entries
  9765 00002673 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9766 00002676 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9767 00002679 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  9768                                  					; save sectors per cluster
  9769                                  		
  9770                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9771 0000267C F606[061A]60            		test	byte [fbigfat], 60h ; fbig+fbigbig ; FAT16 or FAT32
  9772                                  		; 11/09/2023
  9773                                  		; 17/10/2022
  9774                                  		;test	byte [fbigfat], 40h
  9775                                  		;;test	ds:fbigfat, 40h	; fbig
  9776                                  					; if (fbigfat)
  9777 00002681 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  9778                                  
  9779                                  ; we don't need to change "small fat" logic since it is guaranteed
  9780                                  ; that double word total sector will not use 12 bit fat (unless
  9781                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  9782                                  ; so in this case we assume dx = 0 !!
  9783                                  
  9784 00002683 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  9785 00002685 88EB                    		mov	bl, ch
  9786 00002687 4B                      		dec	bx
  9787 00002688 01C3                    		add	bx, ax		; dx=0
  9788 0000268A D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  9789 0000268C 43                      		inc	bx		; BDS.secperclus
  9790 0000268D 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  9791 00002690 89DE                    		mov	si, bx
  9792 00002692 D1EB                    		shr	bx, 1
  9793 00002694 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  9794 00002696 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  9795 0000269A D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  9796 0000269C 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  9797                                  					; save number of fat sectors
  9798 0000269F EB6A                    		jmp	short massage_bpb
  9799                                  ; ---------------------------------------------------------------------------
  9800                                  
  9801                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  9802                                  
  9803                                  dobig:					
  9804 000026A1 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  9805 000026A3 52                      		push	dx		; save total sectors (high)
  9806 000026A4 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  9807 000026A7 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  9808 000026A9 29D0                    		sub	ax, dx
  9809 000026AB 5A                      		pop	dx
  9810 000026AC 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  9811 000026AF 83E801                  		sub	ax, 1
  9812 000026B2 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  9813                                  					; total	secs - reserved	secs - root dir	secs
  9814 000026B5 B302                    		mov	bl, 2
  9815 000026B7 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  9816                                  					; bx = 256 * BDS.secperclus + 2
  9817                                  
  9818                                  ; I don't understand why to add bx here!!!
  9819                                  
  9820                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  9821                                  		; 27/09/2022
  9822                                  		; (Microsoft FAT32 File	System Specification,
  9823                                  		; December 2000, Page 21)
  9824                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  9825                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  9826                                  		; 8/8/2023 (Retro DOS v5.0)
  9827                                  		; If(FATType == FAT32)
  9828                                  		;   TmpVal2 = TmpVal2 / 2;
  9829                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  9830                                  		; 8/8/2023 (Retro DOS v5.0)
  9831                                  		; If(FATType == FAT32) {
  9832                                  		;   BPB_FATSz16 = 0;
  9833                                  		;   BPB_FATSz32 = FATSz;
  9834                                  		;} else {
  9835                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  9836                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  9837                                  		;}
  9838                                  					; dx:ax = TmpVal1, bx = TmpVal2
  9839 000026BA 01D8                    		add	ax, bx		; 
  9840 000026BC 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  9841 000026BF 83E801                  		sub	ax, 1		
  9842 000026C2 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  9843                                  
  9844                                  		;;;
  9845                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9846 000026C5 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig (FAT32) flag
  9847 000026CA 740D                    		jz      short dobig1
  9848                                  
  9849 000026CC D1EB                    		shr	bx, 1           ; TmpVal2 = TmpVal2 / 2
  9850                                  					; dx:ax = TmpVal1+(2*TmpVal2)-1
  9851 000026CE 83E81F                  		sub	ax, 31          ; reserved sectors = 32 (for FAT32 fs) /// 1+31 = 32
  9852 000026D1 83DA00                  		sbb	dx, 0
  9853 000026D4 29D8                    		sub	ax, bx
  9854 000026D6 83DA00                  		sbb	dx, 0           ; dx:ax = TmpVal1+(2*TmpVal2)-TmpVal2-1
  9855                                  					;       = TmpVal1+(TmpVal2-1)
  9856                                  dobig1:
  9857 000026D9 50                      		push	ax		; save lw of dividend
  9858 000026DA 89D0                    		mov	ax, dx		; divide hw of dx:ax at first (as 1st stage)
  9859 000026DC 31D2                    		xor	dx, dx
  9860 000026DE F7F3                    		div	bx		; 32 bit division, dx:ax/bx
  9861                                  					; remainder in dx is hw of 2nd stage dividend
  9862 000026E0 89C5                    		mov	bp, ax		; hw of quotient
  9863 000026E2 58                      		pop	ax		; restore lw of dividend (of 1st stage)
  9864                                  		;;;
  9865                                  
  9866                                  ; assuming dx in the table will never be bigger than bx.
  9867                                  
  9868 000026E3 F7F3                    		div	bx		; BDS.fatsecs =
  9869                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  9870 000026E5 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  9871                                  					; number of fat	sectors
  9872                                  		;;;
  9873                                  		
  9874                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9875 000026E8 8A1E[061A]              		mov	bl, [fbigfat]
  9876 000026EC 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz] ; fat size flag
  9877                                  		
  9878 000026EF F6C320                  		test	bl, 20h		; fbigbig (FAT32) flag
  9879 000026F2 7410                    		jz	short dobig2	; not FAT32
  9880                                  
  9881 000026F4 89451F                  		mov	[di+1Fh], ax	; [di+BDS.fatsecs32]
  9882 000026F7 896D21                  		mov	[di+21h], bp	; [di+BDS.fatsecs32+2]
  9883 000026FA C745110000              		mov	word [di+11h], 0 ; [di+BDS.fatsecs] = 0
  9884                                  					; clear 16 bit FAT size field
  9885 000026FF C745092000              		mov	word [di+9], 32	; [di+BDS.resectors]
  9886                                  					; set reserved sectors to 32 (FAT32 de facto)
  9887                                  dobig2:
  9888                                  		;;;
  9889                                  
  9890                                  ; now, set the default filesys_id, volume label, serial number
  9891                                  
  9892                                  		; 05/08/2023
  9893                                  		; [di+1Fh] = [fbigfat]
  9894                                  		;
  9895                                  		;;mov	bl, ds:fbigfat
  9896                                  		;; 17/10/2022
  9897                                  		;mov	bl, [fbigfat]
  9898                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  9899                                  
  9900                                  		; 12/08/2023
  9901                                  		;push	ds ; ds = cs = BIOSDATA
  9902                                  		
  9903                                  		; 17/12/2023
  9904                                  		; es = ds = cs
  9905                                  		;push	ds
  9906                                  		;pop	es
  9907                                  
  9908                                  		; 12/08/2023 
  9909                                  		; ds = cs = BIOSDATA
  9910                                  		;push	cs
  9911                                  		;pop	ds
  9912                                  
  9913                                  		; 18/12/2023 - Retro DOS v5.0
  9914                                  		; bl = [fbigfat] (clear_ids_x uses bl value here)
  9915                                  		; 11/09/2023
  9916                                  		;mov	al, [fbigfat]
  9917 00002704 BD[A106]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  9918                                  		; 17/10/2022
  9919                                  		;mov	bp, CLEARIDS
  9920                                  		;;mov	bp, 5D9h	; clear_ids
  9921                                  					; at 2C7h:5D9h = 70h:2B49h
  9922                                  					; at BIOSCODE:06ABh
  9923                                  					;	in PCDOS 7.1 IBMBIO.COM
  9924 00002707 0E                      		push	cs
  9925 00002708 E866F3                  		call	call_bios_code
  9926                                  
  9927                                  		; 12/08/2023
  9928                                  		;pop	ds ; ds = cs = BIOSDATA
  9929                                  
  9930                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  9931                                  ; set according to the partition information. we are going to
  9932                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  9933                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  9934                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  9935                                  ; we don't do this for the bpb information from the boot record. we
  9936                                  ; are not going to change the bpb information from the boot record.
  9937                                  
  9938                                  massage_bpb:
  9939                                  		; 05/08/2023
  9940                                  		; [di+1Fh] = [fbigfat]
  9941                                  		;
  9942                                  		;; 12/12/2022
  9943                                  		;mov	bl, [fbigfat]
  9944                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  9945                                  		;			; set size of fat on media
  9946                                  		;
  9947 0000270B 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9948 0000270E 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9949                                  		; 11/09/2023
  9950 00002711 09D2                    		or	dx, dx
  9951 00002713 7514                    		jnz	short goodret	
  9952                                  		;cmp	dx, 0		; double word total sectors?
  9953                                  		;;ja	short goodret	; don't have to change it.
  9954                                  		;; 12/12/2022
  9955                                  		;ja	short short goodret2
  9956                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  9957                                  		;ja	short goodret	; don't have to change it.
  9958                                  		; 12/12/2022
  9959 00002715 395519                  		cmp	[di+19h], dx ; 0
  9960                                  		;ja	short goodret2
  9961 00002718 770F                    		ja	short goodret	; 11/09/2023
  9962 0000271A 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  9963                                  		;jb	short goodret
  9964                                  		; 12/12/2022
  9965                                  		;jc	short goodret
  9966 0000271D 7209                    		jc	short goodret_clc ; 11/09/2023
  9967 0000271F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9968 00002722 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  9969                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  9970                                  		; 12/12/2022
  9971 00002725 89551B                  		mov	[di+1Bh], dx ; 0
  9972                                  goodret_clc:
  9973                                  		; 11/09/2023
  9974 00002728 F8                      		clc 
  9975                                  goodret:
  9976                                  		;mov	bl, ds:fbigfat
  9977                                  		; 11/09/2023
  9978                                  		; 12/12/2022
  9979                                  		; 17/10/2022
  9980 00002729 8A1E[061A]              		mov	bl, [fbigfat]
  9981                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9982 0000272D 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz]
  9983                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  9984                                  					; set size of fat on media
  9985                                  		; 11/09/2023
  9986                                  		;clc
  9987                                  ret_hard_err:
  9988                                  		; 12/12/2022
  9989                                  goodret2:
  9990 00002730 07                      		pop	es
  9991                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  9992 00002731 5B                      		pop	bx
  9993 00002732 5F                      		pop	di
  9994 00002733 C3                      		retn
  9995                                  
  9996                                  ; =============== S U B	R O U T	I N E =======================================
  9997                                  
  9998                                  ; 15/10/2022
  9999                                  
 10000                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
 10001                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
 10002                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
 10003                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
 10004                                  ;then subtract 1 from BPB_TOTALSECTORS.
 10005                                  
 10006                                  		; 17/10/2022
 10007                                  cover_fdisk_bug:
 10008                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10009                                  		; ds = cs
 10010                                  
 10011                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10012                                  		; (optimization)
 10013                                  		;push	ax
 10014                                  		;push	dx
 10015                                  		;push	si
 10016                                  
 10017                                  		; 18/12/2023
 10018                                  		; bx = offset disksector
 10019                                  
 10020                                  		; 18/04/2024 - Retrodos v5.0 (PCDOS 7.1 IBMBIO.COM)
 10021                                  		;;cmp	word [cs:disksector+16h],0
 10022                                  		;cmp	word [disksector+16h],0 ; BPB_FATSz16
 10023 00002734 837F1600                		cmp	word [bx+16h],0
 10024 00002738 742C                    		jz	short cfb_retit ; FAT32 boot sector
 10025                                  
 10026                                  		; 18/12/2023
 10027 0000273A 807F2629                		cmp	byte [bx+26h], 29h
 10028                                  		; 12/08/2023
 10029                                  		;cmp	byte [disksector+26h], 29h
 10030                                  		;;cmp	byte [cs:disksector+26h], 29h
 10031                                  					; [disksector+EXT_BOOT.SIG],
 10032                                  					; EXT_BOOT_SIGNATURE
 10033 0000273E 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
 10034                                  
 10035 00002740 817F073130              		cmp	word [bx+7], 3031h
 10036                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
 10037 00002745 7506                    		jne	short cfb_chk_totalsecs ; 11/08/2023
 10038 00002747 807F0A30                		cmp	byte [bx+10], '0'
 10039                                  		;cmp	byte [cs:bx+10], '0'
 10040 0000274B 7519                    		jne	short cfb_retit
 10041                                  
 10042                                  cfb_chk_totalsecs:
 10043                                  		; 11/08/2023
 10044                                  ; 18/12/2023
 10045                                  %if 0
 10046                                  		; 17/10/2022
 10047                                  		mov	si, disksector+11 ; 14Eh+0Bh
 10048                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
 10049                                  		; 12/08/2023
 10050                                  		cmp	word [si+8], 0
 10051                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
 10052                                  					; just to make sure.
 10053                                  		jz	short cfb_retit
 10054                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
 10055                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
 10056                                  		; 12/08/2023
 10057                                  		mov	ax, [si+8]
 10058                                  		add	ax, [si+11h]
 10059                                  
 10060                                  		jnb	short cfb_retit
 10061                                  		jnz	short cfb_retit
 10062                                  					; if carry set and ax=0
 10063                                  		dec	word [si+8]
 10064                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
 10065                                  					; then decrease	BPB_TOTALSECTORS by 1
 10066                                  %endif
 10067                                  		; 18/12/2023
 10068                                  		;cmp	word [bx+19], 0
 10069 0000274D 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
 10070 00002750 21C0                    		and	ax, ax ; 0 ?
 10071 00002752 7412                    		jz	short cfb_retit
 10072                                  
 10073                                  		;mov	ax, [bx+19]
 10074 00002754 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
 10075 00002757 730D                    		jnc	short cfb_retit
 10076 00002759 750B                    		jnz	short cfb_retit
 10077                                  		; ax = 0		; 0 -> 0FFFFh
 10078 0000275B FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
 10079                                  
 10080 0000275E 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
 10081 00002762 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
 10082                                  cfb_retit:	
 10083                                  		; 18/12/2023
 10084                                  		;pop	si
 10085                                  		;pop	dx
 10086                                  		;pop	ax
 10087                                  		
 10088 00002766 C3                      		retn
 10089                                  
 10090                                  ; ---------------------------------------------------------------------------
 10091                                  		
 10092                                  		; 18/12/2023 - Retro DOS v5.0 
 10093                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A3Dh)
 10094                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:21DCh))
 10095                                  
 10096 00002767 0200                    word2:		dw 2
 10097 00002769 0300                    word3:		dw 3
 10098 0000276B 0002                    word512:	dw 512
 10099                                  
 10100                                  ; =============== S U B	R O U T	I N E =======================================
 10101                                  
 10102                                  ; 15/10/2022
 10103                                  
 10104                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
 10105                                  ; the form factor. it is assumed that the bpbs for the various form factors
 10106                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
 10107                                  ; as the bpb on the drive.
 10108                                  ;
 10109                                  ; no attempt is made to preserve registers since we are going to jump to
 10110                                  ; sysinit straight after this routine.
 10111                                  
 10112                                  		; 18/12/2023 - Retro DOS v5.0 
 10113                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A43h)
 10114                                  setdrvparms:
 10115                                  		; 12/12/2023
 10116                                  		; ds = cs
 10117 0000276D 31DB                    		xor	bx, bx
 10118                                  		; 18/10/2022
 10119 0000276F C43E[1901]              		les	di, [start_bds] ; get first bds in list
 10120                                  _next_bds:
 10121 00002773 06                      		push	es
 10122 00002774 57                      		push	di
 10123                                  
 10124                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10125 00002775 268A5D3E                		mov	bl, [es:di+3Eh]	; [es:di+BDS.formfactor]
 10126                                  		;mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
 10127                                  
 10128 00002779 80FB05                  		cmp	bl, 5		; ffHardFile
 10129 0000277C 753A                    		jnz	short nothardff
 10130 0000277E 31D2                    		xor	dx, dx
 10131 00002780 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10132 00002784 09C0                    		or	ax, ax
 10133 00002786 7508                    		jnz	short get_ccyl
 10134 00002788 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10135 0000278C 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10136                                  get_ccyl:
 10137 00002790 52                      		push	dx
 10138 00002791 50                      		push	ax
 10139 00002792 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
 10140 00002796 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10141                                  					; assume sectors per cyl. < 64k.
 10142 0000279A 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
 10143 0000279C 58                      		pop	ax
 10144 0000279D 5A                      		pop	dx		; dx:ax	= total	sectors
 10145 0000279E 50                      		push	ax
 10146 0000279F 89D0                    		mov	ax, dx
 10147 000027A1 31D2                    		xor	dx, dx
 10148 000027A3 F7F1                    		div	cx
 10149                                  		; 12/12/2023  ; !*!
 10150                                  		; (data segment may not be same with code segment here)
 10151                                  		;mov	[cs:temp_h], ax	; ax be	0 here.
 10152                                  		; 18/12/2023 - Retro DOS v5.0
 10153                                  		;mov	[cs:saved_word], ax
 10154 000027A5 58                      		pop	ax
 10155 000027A6 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
 10156 000027A8 09D2                    		or	dx, dx
 10157 000027AA 7401                    		jz	short no_cyl_rnd ; came out even
 10158 000027AC 40                      		inc	ax		; round	up
 10159                                  no_cyl_rnd:
 10160                                  		; 18/12/2023 - Retro DOS v5.0
 10161 000027AD 26894541                		mov	[es:di+41h], ax	; [es:di+BDS.cylinders]
 10162                                  		;mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
 10163                                  		
 10164 000027B1 06                      		push	es
 10165 000027B2 1F                      		pop	ds  ; !*! ; 12/12/2023
 10166                                  
 10167 000027B3 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
 10168                                  					; ds:si	-> bpb for hard	file
 10169 000027B6 EB55                    		jmp	short set_recbpb
 10170                                  ; ---------------------------------------------------------------------------
 10171                                  
 10172                                  nothardff:				
 10173 000027B8 0E                      		push	cs
 10174 000027B9 1F                      		pop	ds
 10175                                  
 10176                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
 10177                                  ; we can just go and deal with the next bds at label go_to_next_bds.
 10178                                  
 10179                                  		; 10/12/2022
 10180                                  		; ds = cs
 10181                                  		; 17/10/2022 (ds=cs)
 10182 000027BA 803E[111A]01            		cmp	byte [fakefloppydrv], 1
 10183                                  		;cmp	byte [cs:fakefloppydrv], 1
 10184 000027BF 7454                    		jz	short go_to_next_bds
 10185 000027C1 80FB07                  		cmp	bl, 7		; ffother
 10186                                  					; special case "other" type of medium
 10187 000027C4 753D                    		jnz	short not_process_other
 10188                                  process_other:
 10189 000027C6 31D2                    		xor	dx, dx
 10190                                  
 10191                                  		;mov	ax, [di+25h]	; [di+BDS.cylinders]
 10192                                  		;mul	word [di+36h]	; [di+BDS.rheads]
 10193                                  		;mul	word [di+34h]	; [di+BDS.rsecpertrack]
 10194                                  		;mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
 10195                                  		;			; have the total number of sectors
 10196                                  		; 18/12/2023 - Retro DOS v5.0
 10197 000027C8 8B4541                  		mov	ax, [di+41h]	; [di+BDS.cylinders]
 10198 000027CB F76552                  		mul	word [di+52h]	; [di+BDS.rheads]
 10199 000027CE F76550                  		mul	word [di+50h]	; [di+BDS.rsecpertrack]
 10200 000027D1 89454B                  		mov	[di+4Bh], ax	; [di+BDS.rtotalsecs16]
 10201                                  					; have the total number of sectors
 10202 000027D4 48                      		dec	ax
 10203 000027D5 B201                    		mov	dl, 1
 10204                                  _again:					
 10205 000027D7 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
 10206 000027DA 7206                    		jb	short _@@
 10207 000027DC D1E8                    		shr	ax, 1
 10208 000027DE D0E2                    		shl	dl, 1
 10209 000027E0 EBF5                    		jmp	short _again
 10210                                  ; ---------------------------------------------------------------------------
 10211                                  
 10212                                  _@@:
 10213 000027E2 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
 10214 000027E5 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
 10215                                  
 10216                                  		; 18/12/2023 - Retro DOS v5.0
 10217 000027E7 C74549F000              		mov	word [di+49h], 240 ; [di+BDS.rdirentries]
 10218                                  		;mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
 10219                                  __@@:
 10220                                  		; 18/12/2023 - Retro DOS v5.0
 10221 000027EC 885545                  		mov	[di+45h], dl	; [di+BDS.rsecperclus]
 10222                                  		;mov	[di+29h], dl	; [di+BDS.rsecperclus]
 10223                                  
 10224                                  ; logic to get the sectors/fat area.
 10225                                  ; fat entry is assumed to be 1.5 bytes!!!
 10226                                  
 10227                                  		; 10/12/2022
 10228                                  		; ds = cs
 10229                                  		; 17/10/2022 (ds=cs)
 10230 000027EF F726[6927]              		mul	word [word3]	; * 3
 10231 000027F3 F736[6727]              		div	word [word2]	; / 2
 10232 000027F7 31D2                    		xor	dx, dx
 10233 000027F9 F736[6B27]              		div	word [word512]	; / 512
 10234                                  		;
 10235                                  		; 10/12/2022
 10236                                  		;mul	word [cs:word3]	; * 3
 10237                                  		;div	word [cs:word2]	; / 2
 10238                                  		;xor	dx, dx
 10239                                  		;div	word [cs:word512] ; / 512
 10240                                  		;
 10241 000027FD 40                      		inc	ax		; + 1
 10242                                  no_round_up:
 10243                                  		; 18/12/2023 - Retro DOS v5.0
 10244 000027FE 89454E                  		mov	[di+4Eh], ax	; [di+BDS.rfatsecs]
 10245                                  		;mov	[di+32h], ax	; [di+BDS.rfatsecs]
 10246                                  
 10247 00002801 EB12                    		jmp	short go_to_next_bds
 10248                                  ; ---------------------------------------------------------------------------
 10249                                  
 10250                                  not_process_other:
 10251 00002803 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
 10252                                  		
 10253                                  		;mov	si, bpbtable
 10254                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
 10255                                  		; 09/12/2022
 10256                                  		;mov	si, BPBTABLE
 10257                                  		;mov	si, [bx+si]	; get address of bpb
 10258                                  		; 10/12/2022
 10259                                  		;mov	si, [BPBTABLE+bx]
 10260                                  		; 13/12/2022
 10261                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
 10262                                  		
 10263                                  		; 14/08/2023
 10264                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
 10265                                  							; correct offset
 10266 00002805 8BB7[6E99]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
 10267                                  		
 10268                                  		; 18/12/2023 
 10269                                  		; si = address of the requested disk(ette) parameter block
 10270                                  		;	! as offset from SYSINIT segment !
 10271                                  
 10272                                  		; 28/08/2023
 10273 00002809 81C64049                		add	si, SYSINIT_OFFSET
 10274                                  			; + displacement from BIOSDATA segment ; 18/12/2023
 10275                                  set_recbpb:
 10276                                  		; 18/12/2023
 10277                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB]
 10278                                  		;			; es:di	-> recbpb
 10279                                  		;mov	cx, 25		; bpbx.size
 10280                                  		;rep movsb		; move (size bpbx) bytes
 10281                                  		
 10282                                  		; 18/12/2023 - Retro DOS v5.0
 10283 0000280D 8D7D43                  		lea	di, [di+43h]	; [di+BDS.R_BPB]
 10284                                  					; es:di	-> recbpb
 10285 00002810 B93500                  		mov	cx, 53		; bpbx.size
 10286 00002813 F3A4                    		rep movsb		; move (size bpbx) byte
 10287                                  go_to_next_bds:
 10288 00002815 5F                      		pop	di
 10289 00002816 07                      		pop	es		; restore pointer to bds
 10290 00002817 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 10291 0000281A 83FFFF                  		cmp	di, 0FFFFh	; -1
 10292 0000281D 740A                    		jz	short got_end_of_bds_chain
 10293 0000281F E951FF                  		jmp	_next_bds
 10294                                  
 10295                                  ; ---------------------------------------------------------------------------
 10296                                  
 10297                                  		; 18/12/2022
 10298                                  ;got_end_of_bds_chain:
 10299                                  		;retn
 10300                                  
 10301                                  ; =============== S U B	R O U T	I N E =======================================
 10302                                  
 10303                                  ; 15/10/2022
 10304                                  ; 30/12/2018 - Retro DOS v4.0
 10305                                  
 10306                                  ; al = device number
 10307                                  
 10308                                  print_init:	
 10309 00002822 98                      		cbw
 10310 00002823 89C2                    		mov	dx, ax
 10311 00002825 B401                    		mov	ah, 1
 10312 00002827 CD17                    		int	17h		; PRINTER - INITIALIZE
 10313                                  					; DX = printer port (0-3)
 10314                                  					; Return: AH = status
 10315                                  got_end_of_bds_chain:	; 18/12/2022
 10316 00002829 C3                      		retn
 10317                                  
 10318                                  ; =============== S U B	R O U T	I N E =======================================
 10319                                  
 10320                                  ; al = device number
 10321                                  
 10322                                  aux_init:
 10323 0000282A 98                      		cbw
 10324 0000282B 89C2                    		mov	dx, ax
 10325                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
 10326                                  					; 2400,n,1,8 (msequ.inc)
 10327                                  		;mov	ah, 0
 10328                                  		; 10/12/2022
 10329 0000282D B8A300                  		mov	ax, 00A3h
 10330 00002830 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
 10331                                  					; 	AL = initializing parameters,
 10332                                  					;	DX = port number (0-3)
 10333                                  					; Return: AH = RS-232 status code bits,
 10334                                  					;	  AL = modem status bits
 10335 00002832 C3                      		retn
 10336                                  
 10337                                  ; =============== S U B	R O U T	I N E =======================================
 10338                                  
 10339                                  ; 18/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10340                                  ; 08/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 IO.SYS)
 10341                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS) -Retro DOS v4 2022- (MSDOS 5.0-6.21)
 10342                                  ; 30/12/2018 - Retro DOS v4.0
 10343                                  ; 03/06/2018 - Retro DOS v3.0
 10344                                  ; (19/03/2018 - Retro DOS v2.0)
 10345                                  
 10346                                  ; domini **********************************************************************
 10347                                  ;
 10348                                  ;mini disk initialization routine. called right after dohard
 10349                                  ;modified for >2 hardfile support
 10350                                  ;
 10351                                  ; **cs=ds=es=datagrp
 10352                                  ;
 10353                                  ; **domini will search for every extended partition in the system, and
 10354                                  ;   initialize it.
 10355                                  ;
 10356                                  ; **bdsm stands for bds table for mini disk and located right after the label
 10357                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
 10358                                  ;   address of bdsm table.
 10359                                  ;
 10360                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
 10361                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
 10362                                  ;   right now, they are called as ismini, hidden_trks respectively.
 10363                                  ;
 10364                                  ; **domini will use the same routine in sethard routine after label set2 to
 10365                                  ;   save coding.
 10366                                  ;
 10367                                  ; **drvmax determined in dohard routine will be used for the next
 10368                                  ;   available logical mini disk drive number.
 10369                                  ;
 10370                                  ; input: drvmax, dskdrvs
 10371                                  ;
 10372                                  ; output: minidisk installed. bdsm table established and installed to bds.
 10373                                  ;	  end_of_bdsm - ending offset address of bdsm.
 10374                                  ;
 10375                                  ; called modules:
 10376                                  ;		  getboot
 10377                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
 10378                                  ;
 10379                                  ;		  setmini (new, it will use set2 routine)
 10380                                  ;
 10381                                  ; variables used: end_of_bdsm
 10382                                  ;		  rom_minidisk_num
 10383                                  ;		  mini_hdlim, mini_seclim
 10384                                  ;		  BDS_STRUC, start_bds
 10385                                  ;
 10386                                  ;******************************************************************************
 10387                                  
 10388                                  		; 18/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
 10389                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B10h)
 10390                                  
 10391                                  		; 19/10/2022
 10392                                  domini:
 10393 00002833 8A36[5D1A]              		mov	dh, [hnum]	; get number of hardfiles
 10394                                  		; 10/12/2022
 10395 00002837 20F6                    		and	dh, dh
 10396                                  		;cmp	dh, 0
 10397 00002839 743C                    		jz	short dominiret	; no hard file?	then exit.
 10398 0000283B B280                    		mov	dl, 80h		; start	with hardfile 80h
 10399                                  domini_loop:
 10400                                  		; 18/12/2023 - Retro DOS v5.0
 10401 0000283D 31C0                    		xor	ax, ax ; 0
 10402                                  		; ds = cs
 10403                                  		;mov	[cs:ep_start_sector], ax
 10404                                  		;mov	[cs:ep_start_sector+2], ax
 10405                                  		;mov	[cs:ep_hidden_secs], ax
 10406                                  		;mov	[cs:ep_hidden_secs+2], ax
 10407 0000283F A3[8323]                		mov	[ep_start_sector], ax
 10408 00002842 A3[8523]                		mov	[ep_start_sector+2], ax
 10409 00002845 A3[8723]                		mov	[ep_hidden_secs], ax
 10410 00002848 A3[8923]                		mov	[ep_hidden_secs+2], ax
 10411                                  		;
 10412 0000284B 52                      		push	dx
 10413 0000284C 8816[5C1A]              		mov	[rom_minidisk_num], dl
 10414 00002850 B408                    		mov	ah, 8
 10415 00002852 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
 10416                                  					; DL = drive number
 10417                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
 10418                                  					; DL = number of consecutive drives
 10419                                  					; DH = maximum value for head number, ES:DI -> drive parameter
 10420                                  		
 10421                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10422                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
 10423                                  		;inc	dh
 10424                                  		;xor	ax, ax
 10425                                  		;mov	al, dh
 10426 00002854 31C0                    		xor	ax, ax
 10427 00002856 88F0                    		mov	al, dh	; <= 255
 10428 00002858 40                      		inc	ax	; (0FFh -> 100h)
 10429 00002859 A3[621A]                		mov	[mini_hdlim], ax ; # of heads
 10430                                  		;and	cl, 3Fh
 10431                                  		;mov	al, cl
 10432                                  		; 08/08/2023
 10433 0000285C 88C8                    		mov	al, cl
 10434 0000285E 83E03F                  		and	ax, 3Fh
 10435 00002861 A3[641A]                		mov	[mini_seclim], ax ; # of sectors/track
 10436                                  		
 10437                                  		; 18/12/2023
 10438                                  		;push	es ; * ; not necessary
 10439 00002864 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10440 00002868 E860FA                  		call	getboot		; read master boot record into
 10441                                  					; initbootsegment:bootbias
 10442 0000286B 7203                    		jc	short domininext
 10443 0000286D E80800                  		call	find_mini_partition
 10444                                  domininext:
 10445                                  		;pop	es ; *
 10446 00002870 5A                      		pop	dx
 10447 00002871 FEC2                    		inc	dl		; next hard file
 10448 00002873 FECE                    		dec	dh
 10449 00002875 75C6                    		jnz	short domini_loop
 10450                                  dominiret:
 10451 00002877 C3                      		retn
 10452                                  
 10453                                  ; =============== S U B	R O U T	I N E =======================================
 10454                                  
 10455                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
 10456                                  ; 30/12/2018 - Retro DOS v4.0
 10457                                  
 10458                                  ;find_mini_partition tries to find every extended partition on a disk.
 10459                                  ;at entry:	di -> bdsm entry
 10460                                  ;		es:bx -> 07c0:bootbias - master boot record
 10461                                  ;		rom_minidisk_num - rom drive number
 10462                                  ;		drvmax - logical drive number
 10463                                  ;		mini_hdlim, mini_seclim
 10464                                  ;
 10465                                  ;called routine: setmini which uses set2 (in sethard routine)
 10466                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
 10467                                  
 10468                                  		; 19/12/2023 - Retro DOS v5.0 
 10469                                  		;	(Modified PCDOS 7.1 IBMBIO.COM)
 10470                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSADATA:2BFCh)
 10471                                  
 10472                                  find_mini_partition:	
 10473 00002878 81C3C201                		add	bx, 1C2h	; bx ->	file system id
 10474                                  
 10475                                  		; 19/12/2023
 10476                                  		; PCDOS 7.1 IBMBIO.COM
 10477                                  		;mov	word [ld_p_number], 26
 10478                                  fmpnext:
 10479                                  		;add	word [ld_p_number], 16
 10480                                  		;cmp	word [ld_p_number], 4122
 10481                                  		;		; 64 logical disk partitions (64 EBRs)
 10482                                  		;		; (64*4 = 256 pte's, 256*16 = 4096, + 26 = 4122)
 10483                                  		;jg	short fmpnextfound
 10484                                  				
 10485 0000287C 26803F05                		cmp	byte [es:bx], 5 ; 05h = extended partition id.
 10486 00002880 7410                    		je	short fmpgot ; Extended DOS CHS
 10487                                  		
 10488                                  		; 19/12/2023 - Retro DOS v5.0
 10489 00002882 26803F0F                		cmp     byte [es:bx], 0Fh ; Extended DOS LBA
 10490 00002886 740A                    		je	short fmpgot
 10491                                  
 10492 00002888 83C310                  		add	bx, 16
 10493 0000288B 81FB0204                		cmp	bx, 402h	; 202h+bootbias
 10494 0000288F 75EB                    		jne	short fmpnext
 10495                                  		;jmp	short fmpnextfound ; extended partition	not found
 10496                                  		; 18/12/2022
 10497                                  fmpnextfound:
 10498 00002891 C3                      		retn
 10499                                  
 10500                                  ;		; 30/07/2019 - Retro DOS v3.2
 10501                                  ;		jb	short fmpnext
 10502                                  ;fmpret:
 10503                                  ;		retn	; 29/05/2019
 10504                                  
 10505                                  ; ---------------------------------------------------------------------------
 10506                                  
 10507                                  		; 19/10/2022
 10508                                  fmpgot:					; found my partition.
 10509 00002892 E82B01                  		call	dmax_check	; check	for drvmax already 26
 10510 00002895 73FA                    		jnb	short fmpnextfound ; done if too many
 10511                                  
 10512 00002897 8B3E[601A]              		mov	di, [end_of_bdss] ; get next free bds
 10513                                  
 10514                                  		; 19/12/2023
 10515                                  		;mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
 10516                                  		;; 10/12/2022
 10517                                  		;or	byte [di+23h], 1
 10518                                  		;;or	word [di+23h], 1 ; [di+BDS.flags]
 10519                                  		;			; fNon_Removable
 10520                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
 10521                                  		;			; ffHardFile
 10522                                  		; 19/12/2023 - Retro DOS v5.0
 10523 0000289B C745790100              		mov	word [di+79h], 1 ; [di+BDS.bdsm_ismini]
 10524 000028A0 804D3F01                		or	byte [di+3Fh], 1 ; [di+BDS.flags], fNon_Removable
 10525 000028A4 C6453E05                		mov	byte [di+3Eh], 5 ; [di+BDS.formfactor], ffHardFile 
 10526                                  
 10527 000028A8 C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
 10528 000028AD A1[621A]                		mov	ax, [mini_hdlim]
 10529 000028B0 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
 10530 000028B3 A1[641A]                		mov	ax, [mini_seclim]
 10531 000028B6 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
 10532 000028B9 A0[5C1A]                		mov	al, [rom_minidisk_num]
 10533 000028BC 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
 10534                                  					; set physical number
 10535 000028BF A0[7500]                		mov	al, [drvmax]
 10536 000028C2 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
 10537                                  					; set logical number
 10538 000028C5 26837F0A00              		cmp	word [es:bx+10], 0
 10539                                  		;ja	short fmpgot_cont
 10540 000028CA 7707                    		ja	short fmpgot1	; 19/12/2023
 10541 000028CC 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
 10542                                  					; only lower word is meaningful.
 10543 000028D1 72BE                    		jb	short fmpnextfound
 10544                                  					; should be bigger than 64 sectors at least
 10545                                  fmpgot1:	; 19/12/2023
 10546                                  ;fmpgot_cont:				
 10547 000028D3 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
 10548 000028D6 268A7702                		mov	dh, [es:bx+2]	; cylinder
 10549 000028DA 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
 10550 000028DD D0C6                    		rol	dh, 1
 10551 000028DF D0C6                    		rol	dh, 1
 10552 000028E1 268A5703                		mov	dl, [es:bx+3]	; cyl byte
 10553                                  		; 19/12/2023 - Retro DOS v5.0
 10554 000028E5 89557B                  		mov	[di+7Bh], dx	; [di+BDS.bdsm_hidden_trks]
 10555                                  		;mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
 10556                                  					; set hidden trks
 10557                                  		; 19/12/2023
 10558                                  		;push	bx ; * ; PCDOS 7.1	
 10559                                  		;;;
 10560 000028E8 268B4F08                		mov	cx, [es:bx+8]	; partition size, lw
 10561 000028EC 268B470A                		mov	ax, [es:bx+10]	; partition size, hw
 10562 000028F0 030E[8323]              		add	cx, [ep_start_sector]
 10563 000028F4 1306[8523]              		adc	ax, [ep_start_sector+2]
 10564 000028F8 31D2                    		xor	dx, dx ; 19/12/2023
 10565 000028FA 3916[8323]              		cmp	[ep_start_sector], dx ; 0
 10566                                  		;cmp	word [ep_start_sector], 0
 10567 000028FE 750D                    		jnz	short fmpgot2
 10568 00002900 3916[8523]              		cmp	[ep_start_sector+2], dx ; 0
 10569                                  		;cmp	word [ep_start_sector+2], 0
 10570 00002904 7507                    		jnz	short fmpgot2
 10571 00002906 890E[8323]              		mov	[ep_start_sector], cx
 10572 0000290A A3[8523]                		mov	[ep_start_sector+2], ax
 10573                                  fmpgot2:
 10574 0000290D 890E[8723]              		mov	[ep_hidden_secs], cx
 10575 00002911 A3[8923]                		mov	[ep_hidden_secs+2], ax
 10576                                  		
 10577                                  		; convert start sector address to CHS
 10578                                  	
 10579                                  		; 19/12/2023
 10580                                  		; dx = 0
 10581                                  		;push	bx ; * ; not necessary
 10582                                  
 10583                                  		;mov	bx, [di+13h]	; [di+BDS.secpertrack]
 10584 00002914 8B7513                  		mov	si, [di+13h]	; [di+BDS.secpertrack]
 10585                                  		;xor	dx, dx  ; dx = 0
 10586                                  		;div	bx
 10587 00002917 F7F6                    		div	si
 10588 00002919 91                      		xchg	ax, cx
 10589                                  		;div	bx
 10590 0000291A F7F6                    		div	si
 10591                                  		;mov	bx, [di+15h]	; [di+BDS.heads]
 10592                                  		; 17/04/2024 (BugFix)
 10593 0000291C 8B7515                  		mov	si, [di+15h]	; [di+BDS.heads]
 10594 0000291F 91                      		xchg	ax, cx
 10595 00002920 31D2                    		xor	dx, dx
 10596                                  		;div	bx
 10597 00002922 F7F6                    		div	si
 10598 00002924 91                      		xchg	ax, cx
 10599                                  		;div	bx
 10600 00002925 F7F6                    		div	si
 10601                                  
 10602                                  		;pop	bx ; *
 10603                                  
 10604 00002927 09C9                    		or	cx, cx
 10605 00002929 7505                    		jnz	short fmpgot_lba_rd
 10606 0000292B 3D0004                  		cmp	ax, 1024	; cylinder number < 1024, CHS read is proper
 10607 0000292E 7235                    		jb	short fmpgot_chs_rd
 10608                                  fmpgot_lba_rd:
 10609 00002930 804D4004                		or	byte [di+40h], 4 ; set fLBArw flag ; LBA read/write ok/ready
 10610 00002934 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10611 00002938 1E                      		push	ds
 10612                                  		; 19/12/2023
 10613                                  		;push	si ; ** ; not necessary 
 10614 00002939 31C0                    		xor	ax, ax		; push bp
 10615                                  				        ; mov bp, sp ; (*)
 10616 0000293B 50                      		push	ax ; 0
 10617 0000293C 50                      		push	ax ; 0
 10618 0000293D FF36[8923]              		push	word [ep_hidden_secs+2]
 10619 00002941 FF36[8723]              		push	word [ep_hidden_secs]
 10620 00002945 B80002                  		mov	ax, bootbias ; 200h	
 10621                                  		;mov	ax, 200h	; bootbias (buffer offset)
 10622 00002948 06                      		push	es		; buffer segment
 10623 00002949 50                      		push	ax
 10624 0000294A B80100                  		mov	ax, 1
 10625 0000294D 50                      		push	ax		; read count
 10626 0000294E B81000                  		mov	ax, 10h		; DAP size = 16
 10627 00002951 50                      		push	ax
 10628 00002952 8CD0                    		mov	ax, ss
 10629 00002954 8ED8                    		mov	ds, ax
 10630 00002956 89E6                    		mov	si, sp		; ds:si = Disk Address Packet
 10631                                  		
 10632 00002958 B442                    		mov	ah, 42h		; LBA read
 10633 0000295A CD13                    		int	13h		; DISK - IBM/MS Extension
 10634                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
 10635                                  		; 19/12/2023	
 10636                                  		;pushf		; PCDOS 7.1 IBMBIO.COM BUG! Erdogan Tan - 08/08/2023
 10637                                  		;add	sp, 16
 10638                                  		;popf		; BUG!
 10639                                  					; mov sp, bp ; (*)
 10640                                  					; pop bp
 10641                                  		; 19/12/2023
 10642 0000295C 9F                      		lahf		; load status flags into AH
 10643 0000295D 83C410                  		add	sp, 16
 10644 00002960 9E                      		sahf		; store AH into flags
 10645                                  		
 10646                                  		;pop	si ; ** ; 19/12/2023
 10647 00002961 1F                      		pop	ds
 10648 00002962 7317                    		jnc	short fmpgot3
 10649                                  fmpnotfound:	; 19/12/2023
 10650 00002964 C3                      		retn
 10651                                  		;jmp	short fmpgot3 
 10652                                  		;;;
 10653                                  
 10654                                  		; 19/12/2023
 10655                                  fmpgot_chs_rd:
 10656 00002965 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
 10657 00002969 268A7701                		mov	dh, [es:bx+1]	; head
 10658 0000296D 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10659 00002971 BB0002                  		mov	bx, 200h	; bootbias
 10660 00002974 B80102                  		mov	ax, 201h
 10661 00002977 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10662                                  					; AL = number of sectors to read, CH = track, CL = sector
 10663                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10664                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10665                                  ;fmpgot3:	; 19/12/2023
 10666                                  		;jc	short fmpnextfound
 10667 00002979 72E9                    		jc	short fmpnotfound
 10668                                  fmpgot3:	
 10669 0000297B BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
 10670                                  
 10671                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10672                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
 10673 0000297E 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
 10674                                  		;jne	short fmpnextfound ; not a valid boot sector !
 10675                                  		; 19/12/2023
 10676 00002984 75DE                    		jne	short fmpnotfound ; not a valid boot sector !
 10677                                  
 10678                                  		; 13/08/2023
 10679                                  		;push	es
 10680 00002986 E80800                  		call	setmini		; install a mini disk.
 10681                                  					; bx value saved.
 10682                                  		;pop	es  ; 13/08/2023
 10683 00002989 7203                    		jc	short fmpnextchain
 10684 0000298B E84700                  		call	xinstall_bds	; -- install the bdsm into table
 10685                                  fmpnextchain:
 10686 0000298E E9EBFE                  		jmp	fmpnext		; let's find out
 10687                                  					; if we	have any chained partition
 10688                                  ; ---------------------------------------------------------------------------
 10689                                  
 10690                                  		; 18/12/2022
 10691                                  ;fmpnextfound:
 10692                                  		;retn
 10693                                  
 10694                                  ; =============== S U B	R O U T	I N E =======================================
 10695                                  
 10696                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10697                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
 10698                                  
 10699                                  ; 19/12/2022 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10700                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C92h)
 10701                                  
 10702                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
 10703                                  	
 10704 00002991 57                      		push	di
 10705 00002992 53                      		push	bx
 10706                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10707                                  		; ds = cs = BIOSDATA segment
 10708                                  		;push	ds
 10709 00002993 06                      		push	es
 10710                                  setmini_1:
 10711                                  		;cmp	byte [es:bx], 1 ; FAT12 partition
 10712                                  		;je	short setmini_2
 10713                                  		;cmp	byte [es:bx], 4 ; FAT16 (CHS) partition
 10714                                  		;je	short setmini_2
 10715                                  		;cmp	byte [es:bx], 6 ; FAT16 BIG (CHS) partition
 10716                                  		;je	short setmini_2
 10717                                  		;
 10718                                  		; 19/12/2023 - Retro DOS v5.0
 10719                                  		;cmp	byte [es:bx], 0Bh ; FAT32 (CHS) partition
 10720                                  		;je	short setmini_2
 10721                                  		;cmp	byte [es:bx], 0Ch ; FAT32 (LBA) partition
 10722                                  		;je	short setmini_2
 10723                                  		;cmp	byte [es:bx], 0Eh ; FAT16 (LBA) partition
 10724                                  		;je	short setmini_2
 10725                                  
 10726                                  		; 19/12/2023
 10727 00002994 268A07                  		mov 	al, [es:bx]
 10728 00002997 3C01                    		cmp	al, 1 		; FAT12 partition
 10729 00002999 7422                    		je	short setmini_2
 10730 0000299B 3C04                    		cmp	al, 4 		; FAT16 (CHS) partition
 10731 0000299D 741E                    		je	short setmini_2
 10732 0000299F 3C06                    		cmp	al, 6 		; FAT16 BIG (CHS) partition
 10733 000029A1 741A                    		je	short setmini_2
 10734 000029A3 3C0B                    		cmp	al, 0Bh 	; FAT32 (CHS) partition
 10735 000029A5 7416                    		je	short setmini_2
 10736 000029A7 3C0C                    		cmp	al, 0Ch 	; FAT32 (LBA) partition
 10737 000029A9 7412                    		je	short setmini_2
 10738 000029AB 3C0E                    		cmp	al, 0Eh 	; FAT16 (LBA) partition
 10739 000029AD 740E                    		je	short setmini_2
 10740                                  
 10741 000029AF 83C310                  		add	bx, 16
 10742 000029B2 81FB0204                		cmp	bx, 402h	; 202h+bootbias
 10743                                  		;jne	short setmini_1
 10744 000029B6 72DC                    		jb	short setmini_1 ; 19/12/2023
 10745 000029B8 F9                      		stc
 10746 000029B9 07                      		pop	es
 10747                                  		; 12/08/2023
 10748                                  		;pop	ds
 10749 000029BA 5B                      		pop	bx
 10750 000029BB 5F                      		pop	di
 10751 000029BC C3                      		retn
 10752                                  
 10753                                  ; ---------------------------------------------------------------------------
 10754                                  setmini_2:
 10755 000029BD E9CBF9                  		jmp	set2		; branch into middle of sethard
 10756                                  
 10757                                  ; =============== S U B	R O U T	I N E =======================================
 10758                                  
 10759                                  ; 30/12/2022 - Retro DOS v4.2
 10760                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
 10761                                  
 10762                                  ; 15/10/2022
 10763                                  ; 28/12/2018 - Retro DOS v4.0
 10764                                  ;
 10765                                  ; dmax_check -- call this when we want to install a new drive.
 10766                                  ;		it checks for drvmax < 26 to see if there is
 10767                                  ;		a drive letter left.
 10768                                  ;
 10769                                  ;	drvmax < 26 : carry SET!
 10770                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
 10771                                  ;			trash ax
 10772                                  
 10773                                  		; 19/12/2023 - Retro DOS v5.0
 10774                                  dmax_check:
 10775 000029C0 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
 10776 000029C5 720D                    		jb	short dmax_ok	; return with carry if okay
 10777 000029C7 06                      		push	es
 10778                                  		;;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
 10779                                  		;mov	ax, 544h	; 19/12/2023 (PCDOS 7.1)
 10780 000029C8 B80405                  		mov	ax, SYSINITSEG	; 17/10/2022	
 10781 000029CB 8EC0                    		mov	es, ax
 10782                                  		; 18/10/2022
 10783 000029CD 26C606[8803]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
 10784                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
 10785                                  					; set message flag
 10786                                  					; [SYSINIT+toomanydrivesflag]
 10787 000029D3 07                      		pop	es
 10788                                  
 10789                                  		;;push	es
 10790                                  		;;mov	ax,SYSINIT_SEG
 10791                                  		;;mov	es,ax
 10792                                  		;;mov	byte [es:toomanydrivesflag],1
 10793                                  					; set message flag
 10794                                  		;;pop	es
 10795                                  		;
 10796                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
 10797                                  dmax_ok:
 10798 000029D4 C3                      		retn
 10799                                  
 10800                                  ; =============== S U B	R O U T	I N E =======================================
 10801                                  
 10802                                  ; 18/10/2022
 10803                                  ; 15/10/2022
 10804                                  ; 28/12/2018 - Retro DOS v4.0
 10805                                  ;
 10806                                  ;	link next bds (at ds:di) into the chain. assume that the
 10807                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
 10808                                  ;	  dskdrv_table, and end_of_bdss.	
 10809                                  
 10810                                  		; 19/12/2023 - Retro DOS v5.0
 10811                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2CE1h)
 10812                                  xinstall_bds:
 10813 000029D5 56                      		push	si
 10814 000029D6 53                      		push	bx
 10815 000029D7 8B36[1901]              		mov	si, [start_bds]	; get first bds
 10816                                  xinstall_bds_1:
 10817 000029DB 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
 10818 000029DE 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
 10819                                  		;mov	si, [si+BDS.link]
 10820 000029E0 8B34                    		mov	si, [si]	; chain	through	list
 10821 000029E2 EBF7                    		jmp	short xinstall_bds_1
 10822                                  
 10823                                  xinstall_bds_2:
 10824                                  		;mov	[si+BDS.link], di
 10825 000029E4 893C                    		mov	[si], di
 10826                                  		;mov	[si+BDS.link+2], ds
 10827 000029E6 8C5C02                  		mov	[si+2], ds
 10828                                  		;mov	word [di+BDS.link], -1
 10829 000029E9 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
 10830                                  		;mov	[di+BDS.link+2], ds
 10831 000029ED 8C5D02                  		mov	[di+2], ds ; might as well plug segment
 10832                                  		; 20/03/2019 - Retro DOS v4.0
 10833                                  		;lea	bx, [di+BDS.BPB]
 10834 000029F0 8D5D06                  		lea	bx, [di+6]
 10835 000029F3 8B36[5E1A]              		mov	si, [last_dskdrv_table]
 10836 000029F7 891C                    		mov	[si], bx
 10837 000029F9 8306[5E1A]02            		add	word [last_dskdrv_table], 2
 10838 000029FE FE06[7500]              		inc	byte [drvmax]
 10839                                  		;add	word [end_of_bdss], 100 ; BDS.size = 100
 10840                                  		; 19/12/2023 - Retro DOS v5.0
 10841 00002A02 8106[601A]9600          		add	word [end_of_bdss], 150 ; BDS.size = 150
 10842 00002A08 5B                      		pop	bx
 10843 00002A09 5E                      		pop	si
 10844 00002A0A C3                      		retn
 10845                                  
 10846                                  ; =============== S U B	R O U T	I N E =======================================
 10847                                  
 10848                                  ; 17/10/2022
 10849                                  ; 15/10/2022
 10850                                  ; 28/12/2018 - Retro DOS v4.0
 10851                                  ; 03/06/2018 - Retro DOS v3.0
 10852                                  
 10853                                  		; 19/12/2023 - Retro DOS v5.0
 10854                                  cmos_clock_read:
 10855 00002A0B 50                      		push	ax
 10856 00002A0C 51                      		push	cx
 10857 00002A0D 52                      		push	dx
 10858 00002A0E 55                      		push	bp
 10859 00002A0F 31ED                    		xor	bp, bp
 10860                                  loop_clock:
 10861 00002A11 31C9                    		xor	cx, cx
 10862 00002A13 31D2                    		xor	dx, dx
 10863 00002A15 B402                    		mov	ah, 2
 10864 00002A17 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
 10865                                  					; Return: CH = hours in	BCD
 10866                                  					; CL = minutes in BCD
 10867                                  					; DH = seconds in BCD
 10868                                  		; 19/12/2023
 10869                                  		;cmp	cx, 0
 10870 00002A19 21C9                    		and	cx, cx
 10871 00002A1B 750F                    		jnz	short clock_present
 10872                                  		;cmp	dx, 0
 10873 00002A1D 09D2                    		or	dx, dx
 10874 00002A1F 750B                    		jnz	short clock_present
 10875                                  		;cmp	bp, 1		; read again after a slight delay, in case clock
 10876                                  		;je	short no_readdate ; was	at zero	setting.
 10877 00002A21 21ED                    		and	bp, bp
 10878 00002A23 751A                    		jnz	short no_readdate
 10879 00002A25 45                      		inc	bp		; only perform delay once.
 10880                                  		;mov	cx, 4000h	; 16384
 10881                                  		; 19/12/2023
 10882 00002A26 B540                    		mov	ch, 40h ; cx = 4000h ; 16384
 10883                                  delay:					
 10884 00002A28 E2FE                    		loop	delay
 10885 00002A2A EBE5                    		jmp	short loop_clock
 10886                                  ; ---------------------------------------------------------------------------
 10887                                  
 10888                                  clock_present:
 10889                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
 10890                                  		; 19/12/2023
 10891                                  		; ds = cs
 10892 00002A2C C606[8C04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
 10893                                  		
 10894 00002A31 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
 10895                                  					; possibly destroyed by	cp dos and
 10896                                  					; post routine did not restore that.
 10897 00002A34 56                      		push	si
 10898 00002A35 E833EE                  		call	read_real_date	; read real-time clock for date
 10899 00002A38 FA                      		cli
 10900                                  		;mov	ds:daycnt, si	; set system date
 10901 00002A39 8936[8904]              		mov	[daycnt], si
 10902 00002A3D FB                      		sti
 10903 00002A3E 5E                      		pop	si
 10904                                  no_readdate:
 10905 00002A3F 5D                      		pop	bp
 10906 00002A40 5A                      		pop	dx
 10907 00002A41 59                      		pop	cx
 10908 00002A42 58                      		pop	ax
 10909                                  cmosck9:	; 19/12/2023
 10910 00002A43 C3                      		retn
 10911                                  
 10912                                  ; ---------------------------------------------------------------------------
 10913                                  
 10914                                  ; the following code is written by jack gulley in engineering group.
 10915                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
 10916                                  ; and if the use cold boot the system to use pc dos while running cp dos,
 10917                                  ; the cmos clock rate are still slow which slow down disk operations
 10918                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
 10919                                  ; to fix this problem at the request of cp dos.
 10920                                  ;
 10921                                  ; the program is modified to be run on msinit. equates are defined
 10922                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
 10923                                  ;
 10924                                  ;  the following code cmosck is used to insure that the cmos has not
 10925                                  ;	had its rate controls left in an invalid state on older at's.
 10926                                  ;
 10927                                  ;	it checks for an at model byte "fc" with a submodel type of
 10928                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
 10929                                  ;	bits in case post has not done it. this initialization routine
 10930                                  ;	is only needed once when dos loads. it should be run as soon
 10931                                  ;	as possible to prevent slow diskette access.
 10932                                  ;
 10933                                  ;	this code exposes one to dos clearing cmos setup done by a
 10934                                  ;	resident program that hides and re-boots the system.
 10935                                  
 10936                                  cmosck:					; check and reset rtc rate bits
 10937                                  
 10938                                  ;model byte and submodel byte were already determined in msinit.
 10939                                  
 10940                                  	; 16/06/2018 - Retro DOS v3.0
 10941                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
 10942                                  
 10943                                  	; 19/12/2023 - Retro DOS v5.0
 10944                                  	
 10945                                  		; 19/12/2023
 10946                                  		; ds = cs
 10947                                  		;push	ax ; not necessary ; 19/12/2023
 10948                                  		;
 10949 00002A44 803E[AF05]FC            		cmp	byte [model_byte], 0FCh
 10950                                  		;cmp	byte [cs:model_byte], 0FCh
 10951 00002A49 75F8                    		jnz	short cmosck9	; Exit if not an AT model
 10952 00002A4B 803E[B005]06            		cmp	byte [secondary_model_byte], 6  ; 21/04/2024
 10953                                  		;cmp	byte [cs:secondary_model_byte], 6
 10954                                  					; Is it 06 for the industral AT ?
 10955 00002A50 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
 10956 00002A52 803E[B005]04            		cmp	byte [secondary_model_byte], 4
 10957                                  		;cmp	byte [cs:secondary_model_byte], 4
 10958                                  					; Is it 00, 01, 02, or 03 ?
 10959 00002A57 73EA                    		jnb	short cmosck9	; EXIT if problem fixed by POST
 10960                                  					; Also,Secondary_model_byte = 0
 10961                                  					;   when AH=0C0h, int 15h failed.
 10962                                  					;	RESET THE CMOS PERIODIC RATE
 10963                                  					;  Model=FC submodel=00,01,02,03 or 06
 10964                                  cmosck4:
 10965 00002A59 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
 10966                                  					; NMI disabled on return
 10967 00002A5B B426                    		mov	ah, 26h		; 00100110b
 10968                                  					; Set divider & rate selection
 10969 00002A5D E80B00                  		call	cmos_write
 10970 00002A60 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
 10971                                  					; NMI disabled on return
 10972 00002A62 E82000                  		call	cmos_read
 10973 00002A65 2407                    		and	al, 7		; 00000111b
 10974                                  					; clear SET,PIE,AIE,UIE,SQWE
 10975 00002A67 88C4                    		mov	ah, al
 10976 00002A69 B00B                    		mov	al, 0Bh		; cmos_reg_b
 10977                                  					; NMI enabled on return
 10978                                  		; 19/12/2023
 10979                                  		;call	cmos_write
 10980                                  ;cmosck9:
 10981                                  		;pop	ax ; 19/12/2023
 10982                                  		;retn
 10983                                  
 10984                                  		; 19/12/2023
 10985                                  		;jmp	short cmos_write
 10986                                  
 10987                                  ; =============== S U B	R O U T	I N E =======================================
 10988                                  
 10989                                  ;--- cmos_write ----------------------------------------------------------------
 10990                                  ;		write byte to cmos system clock configuration table	       :
 10991                                  ;									       :
 10992                                  ; input: (al)=	cmos table address to be written to			       :
 10993                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
 10994                                  ;		bits 6-0 = address of table location to write		       :
 10995                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
 10996                                  ;									       :
 10997                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
 10998                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
 10999                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 11000                                  ;		the cmos address register is pointed to a default value and    :
 11001                                  ;		the interrupt flag restored to the entry state on return.      :
 11002                                  ;		only the cmos location and the nmi state is changed.	       :
 11003                                  ;-------------------------------------------------------------------------------
 11004                                  
 11005                                  cmos_write:				; write (ah) to location (al)
 11006 00002A6B 9C                      		pushf			;
 11007 00002A6C 50                      		push	ax		; save work register values
 11008 00002A6D FA                      		cli
 11009 00002A6E 50                      		push	ax		; save user nmi	state
 11010 00002A6F 0C80                    		or	al, 80h		; disable nmi for us
 11011 00002A71 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 11012                                  					; RTC Seconds
 11013 00002A73 90                      		nop
 11014 00002A74 88E0                    		mov	al, ah
 11015 00002A76 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
 11016 00002A78 58                      		pop	ax		; get user nmi
 11017 00002A79 2480                    		and	al, 80h
 11018 00002A7B 0C0F                    		or	al, 0Fh
 11019 00002A7D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 11020                                  					; RTC Seconds
 11021 00002A7F 90                      		nop
 11022 00002A80 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 11023 00002A82 58                      		pop	ax		; restore work registers
 11024                                  
 11025                                  		; 19/12/2023
 11026                                  		;push	cs		; *place code segment in stack and
 11027                                  		;call	cmos_popf	; *handle popf for b- level 80286
 11028                                  		;retn
 11029 00002A83 EB18                    		jmp	short cmos_rw_popf
 11030                                  
 11031                                  ; =============== S U B	R O U T	I N E =======================================
 11032                                  
 11033                                  ;--- CMOS_READ -----------------------------------------------------------------
 11034                                  ;		read byte from cmos system clock configuration table	       :
 11035                                  ;									       :
 11036                                  ; input: (al)=	cmos table address to be read				       :
 11037                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
 11038                                  ;		bits 6-0 = address of table location to read		       :
 11039                                  ;									       :
 11040                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
 11041                                  ;		on then nmi left disabled. during the cmos read both nmi and   :
 11042                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 11043                                  ;		the cmos address register is pointed to a default value and    :
 11044                                  ;		the interrupt flag restored to the entry state on return.      :
 11045                                  ;		only the (al) register and the nmi state is changed.	       :
 11046                                  ;-------------------------------------------------------------------------------
 11047                                  
 11048                                  cmos_read:				; read location (al) into (al)
 11049 00002A85 9C                      		pushf
 11050 00002A86 FA                      		cli
 11051 00002A87 53                      		push	bx
 11052                                  		;push	ax ; *		; AL = cmos table address to be read
 11053                                  		; 19/12/2023
 11054 00002A88 89C3                    		mov	bx, ax ; * ; input
 11055 00002A8A 0C80                    		or	al, 80h
 11056 00002A8C E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 11057                                  					; RTC Seconds
 11058 00002A8E 90                      		nop			; (undocumented delay needed)
 11059 00002A8F E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 11060                                  		
 11061                                  		;mov	bx, ax ; output
 11062                                  		;pop	ax ; * ; input
 11063                                  
 11064                                  		; 19/12/2023
 11065                                  		; al = output, bl = input
 11066 00002A91 93                      		xchg	ax, bx ; *
 11067                                  		; bl = output, al = input
 11068                                  	
 11069 00002A92 2480                    		and	al, 80h
 11070 00002A94 0C0F                    		or	al, 0Fh
 11071 00002A96 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 11072                                  					; RTC Seconds
 11073 00002A98 90                      		nop
 11074 00002A99 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 11075                                  		;mov	ax, bx ; * ; output
 11076                                  		; 19/12/2023
 11077 00002A9B 93                      		xchg	ax, bx
 11078 00002A9C 5B                      		pop	bx
 11079                                  
 11080                                  		; 19/12/2023
 11081                                  cmos_rw_popf:
 11082 00002A9D 0E                      		push	cs		; *place code segment in stack and
 11083 00002A9E E80100                  		call	cmos_popf	; *handle popf for b- level 80286
 11084 00002AA1 C3                      		retn			; return with flags restored
 11085                                  
 11086                                  ; ---------------------------------------------------------------------------
 11087                                  
 11088                                  cmos_popf:				
 11089 00002AA2 CF                      		iret			; popf for level b- parts
 11090                                  					; return far and restore flags
 11091                                  
 11092                                  ; ---------------------------------------------------------------------------
 11093                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
 11094                                  ; ---------------------------------------------------------------------------
 11095                                  ; The following routines provide support for reading in the file MSDOS.SYS.
 11096                                  ; ---------------------------------------------------------------------------
 11097                                  
 11098                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11099                                  ;
 11100                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
 11101                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
 11102                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
 11103                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.)
 11104                                  
 11105                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 11106                                  ; --------------------------------------------------------------------------- 
 11107                                  
 11108                                  ;ClusterH:	dw 0  ; 20/12/2023
 11109                                  
 11110                                  ; =============== S U B	R O U T	I N E =======================================
 11111                                  
 11112                                  ; GetClus, read in a cluster at a specified address
 11113                                  ;
 11114                                  ;  bx = cluster to read
 11115                                  ;  cx = sectors per cluster
 11116                                  ;  es:di = load location
 11117                                  
 11118                                  ; 17/10/2022
 11119                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
 11120                                  ; 09/12/2022
 11121                                  DISKRD equ diskrd
 11122                                  
 11123                                  		; 29/12/2023
 11124                                  		; 20/12/2023 - Retro DOS v5.0
 11125                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2DC4h)
 11126                                  
 11127                                  		; si:bx = (32 bit) cluster to read
 11128                                  		; cx = sectors per cluster
 11129                                  		; es:di = load location
 11130                                  
 11131                                  ; 06/04/2024
 11132                                  %if 1
 11133                                  		; 17/10/2022
 11134                                  getclus:
 11135                                  		; 12/12/2023
 11136                                  		; ds = cs
 11137                                  		
 11138 00002AA3 51                      		push	cx ; 1*
 11139 00002AA4 57                      		push	di ; 2*
 11140                                  		;mov	[cs:doscnt], cx
 11141 00002AA5 890E[001A]              		mov	[doscnt], cx ; 12/12/2023
 11142                                  
 11143                                  		; 20/12/2023
 11144                                  		;;mov	[cs:ClusterH], si ; high word of cluster number
 11145                                  		;mov	[ClusterH], si ; high word of cluster number
 11146 00002AA9 89F5                    		mov	bp, si
 11147                                  
 11148 00002AAB 89D8                    		mov	ax, bx
 11149                                  
 11150                                  		;dec	ax
 11151                                  		;dec	ax
 11152                                  		; 20/12/2023
 11153 00002AAD 83E802                  		sub	ax, 2
 11154                                  
 11155                                  		;;sbb	[cs:ClusterH], 0
 11156                                  		;sbb	[ClusterH], 0
 11157 00002AB0 83DD00                  		sbb	bp, 0		
 11158                                  
 11159                                  		; 20/12/2023
 11160                                  		;;xchg	ax, [cs:ClusterH]
 11161                                  		;xchg	ax, [ClusterH]
 11162 00002AB3 95                      		xchg	ax, bp
 11163                                  
 11164 00002AB4 F7E1                    		mul	cx
 11165                                  
 11166                                  		;;xchg	ax, [cs:ClusterH]
 11167                                  		;xchg	ax, [ClusterH]
 11168 00002AB6 95                      		xchg	ax, bp ; (+)
 11169                                  		;
 11170 00002AB7 F7E1                    		mul	cx		;; convert to logical sector
 11171                                  					;; dx:ax = matching logical sector number
 11172                                  					;;	  starting from the data sector
 11173                                  		;;add	ax, [cs:bios_l]
 11174                                  		;;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
 11175                                  		; 12/12/2023
 11176                                  		;add	ax, [bios_l]
 11177                                  		;adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
 11178                                  
 11179                                  		; 20/12/2023
 11180                                  		;;add	dx, [cs:ClusterH]
 11181                                  		;add	ax, [cs:First_Data_Sector]
 11182                                  		;adc	dx, [cs:First_Data_Sector+2]
 11183 00002AB9 01EA                    		add	dx, bp ; (+)
 11184                                  		;add	dx, [ClusterH]	; convert to logical sector
 11185                                  					; dx:ax	= matching logical sector number
 11186                                  					;	  starting from the data sector
 11187 00002ABB 0306[FC19]              		add	ax, [First_Data_Sector]
 11188 00002ABF 1316[FE19]              		adc	dx, [First_Data_Sector+2]
 11189                                  					; dx:ax = first logical sector to read
 11190                                  unpack:
 11191                                  		; 20/12/2023
 11192 00002AC3 1E                      		push	ds ; 3* ; ds = cs ; 12/12/2023
 11193 00002AC4 52                      		push	dx ; 4* ; * ; 12/12/2023
 11194 00002AC5 50                      		push	ax ; 5*
 11195                                  		; 29/12/2023
 11196 00002AC6 56                      		push	si ; 6* 
 11197 00002AC7 53                      		push	bx ; 7*
 11198                                  
 11199                                  		;;mov	si, [cs:fatloc]
 11200                                  		;mov	si, [fatloc] ; 12/12/2023
 11201                                  		;mov	ds, si
 11202                                  		; 20/12/2023
 11203                                  		;mov	ax, [fatloc]
 11204                                  		;mov	ds, ax
 11205 00002AC8 53                      		push	bx ; 8*
 11206 00002AC9 FF36[021A]              		push	word [fatloc] ; 9*
 11207                                  
 11208                                  		;test	byte [cs:fbigfat], 20h
 11209 00002ACD F606[061A]20            		test	byte [fbigfat], 20h	; fbigbig FAT32 ?
 11210 00002AD2 1F                      		pop	ds ; 9* ; ds = [fatloc]
 11211 00002AD3 7415                    		jz      short not_32bit_cluster ; no
 11212                                  unpack32:
 11213                                  		;push	dx
 11214 00002AD5 89F2                    		mov	dx, si
 11215                                  		;mov	si, bx
 11216 00002AD7 5E                      		pop	si ; 8* ; si = bx
 11217 00002AD8 01F6                    		add	si, si
 11218 00002ADA 11D2                    		adc	dx, dx
 11219 00002ADC 01F6                    		add	si, si
 11220 00002ADE 11D2                    		adc	dx, dx 
 11221                                  			; dx:si = 4*(si:bx) ; clust num offset from FAT entry 0
 11222 00002AE0 E89600                  		call	get_fat_sector
 11223 00002AE3 8B7702                  		mov	si, [bx+2]	; high word of the FAT32 cluster number
 11224 00002AE6 8B1F                    		mov	bx, [bx]	; low word of the FAT32 cluster number
 11225                                  		;pop	dx
 11226 00002AE8 EB45                    		jmp	short getcl1
 11227                                  
 11228                                  not_32bit_cluster:
 11229                                  		;mov	si, bx		; next cluster
 11230 00002AEA 5E                      		pop	si ; 8* ; si = bx
 11231 00002AEB 2EF606[061A]40          		test	byte [cs:fbigfat], 40h	; fbig
 11232                                  					; 16 bit fat?
 11233 00002AF1 752F                    		jnz	short unpack16	; yes
 11234                                  unpack12:
 11235 00002AF3 D1EE                    		shr	si, 1		; 12 bit fat. si = si/2
 11236                                  					; si = clus + clus/2
 11237 00002AF5 01DE                    		add	si, bx		;
 11238                                  					; (si =	byte offset of the cluster in the FAT)
 11239                                  		;push	dx ; 12/12/2023
 11240 00002AF7 31D2                    		xor	dx, dx
 11241                                  		; 12/12/2023
 11242                                  		; ds = FAT buffer segment
 11243 00002AF9 E87D00                  		call	get_fat_sector
 11244                                  		;pop	dx ; 12/12/2023
 11245                                  
 11246 00002AFC 8B07                    		mov	ax, [bx]	; save it into ax
 11247 00002AFE 750C                    		jnz	short even_odd	; if not a splitted fat, check even-odd.
 11248                                  		; 25/06/2023
 11249                                  		;mov	al, [bx]	; splitted fat
 11250                                  		
 11251                                  		; 12/12/2023
 11252                                  		;mov	[cs:temp_cluster], al
 11253 00002B00 50                      		push	ax ; **	; al = low 8 bits of 12 bits cluster number
 11254                                  
 11255 00002B01 46                       		inc	si		; (next	byte)
 11256                                  
 11257                                  		;push	dx ; 12/12/2023
 11258 00002B02 31D2                    		xor	dx, dx
 11259 00002B04 E87200                  		call	get_fat_sector
 11260                                  		;pop	dx ; 12/12/2023
 11261                                  
 11262                                  		;mov	al, ds:0
 11263                                  		; 12/12/2023
 11264                                  		; ds = FAT buffer segment
 11265                                  		;mov	al, [0] ; 19/10/2022
 11266                                  		;mov	[cs:temp_cluster+1], al
 11267                                  		;mov	ax, [cs:temp_cluster]
 11268                                  		; 12/12/2023
 11269                                  		;mov	al, [cs:temp_cluster]
 11270 00002B07 58                      		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
 11271 00002B08 8A260000                		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
 11272                                  even_odd:
 11273                                  		; 29/12/2023
 11274 00002B0C 5B                      		pop	bx ; 7*		; restore old fat entry	value
 11275 00002B0D 53                      		push	bx		; save it right	away.
 11276 00002B0E D1EB                    		shr	bx, 1		; was it even or odd?
 11277 00002B10 7308                    		jnc	short havclus	; it was even.
 11278 00002B12 D1E8                    		shr	ax, 1		; odd. massage fat value and keep
 11279                                  					; the highest 12 bits.
 11280 00002B14 D1E8                    		shr	ax, 1
 11281 00002B16 D1E8                    		shr	ax, 1
 11282 00002B18 D1E8                    		shr	ax, 1
 11283                                  havclus:
 11284 00002B1A 89C3                    		mov	bx, ax		; now bx = new fat entry.
 11285 00002B1C 81E3FF0F                		and	bx, 0FFFh	; keep low 12 bits.
 11286 00002B20 EB0B                    		jmp	short unpackx
 11287                                  ; ---------------------------------------------------------------------------
 11288                                  
 11289                                  unpack16:
 11290                                  		;push	dx	; 12/12/2023
 11291 00002B22 31D2                    		xor	dx, dx ; 0
 11292 00002B24 D1E6                    		shl	si, 1		; extend to 32 bit offset
 11293                                  		;adc	dx, 0
 11294                                  		; 12/12/2023
 11295 00002B26 D1D2                    		rcl	dx, 1
 11296                                  
 11297                                  		; 12/12/2023
 11298                                  		; ds = FAT buffer segment
 11299 00002B28 E84E00                  		call	get_fat_sector
 11300                                  		;pop	dx	; 12/12/2023
 11301 00002B2B 8B1F                    		mov	bx, [bx]	;
 11302                                  					; bx = new fat entry.
 11303                                  unpackx:
 11304                                  		; 20/12/2023
 11305 00002B2D 31F6                    		xor	si, si		; high word of cluster number = 0
 11306                                  					; (FAT12 or FAT16)
 11307                                  getcl1:
 11308                                  		; 29/12/2023
 11309 00002B2F 58                      		pop	ax	; 7* - cluster number lw
 11310                                  		;pop	word [cs:ClusterH]
 11311 00002B30 5A                      		pop	dx	; 6* - cluster number hw
 11312                                  
 11313                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 11314                                  		; (this is a fast kernel loading method by the MSDOS programmer)
 11315                                  		; ((consequtive clusters --> consequtive sectors))
 11316                                  
 11317 00002B31 29D8                    		sub	ax, bx	; previous - current (or current - new)	
 11318                                  		;sbb	[cs:ClusterH], si
 11319 00002B33 19F2                    		sbb	dx, si
 11320                                  		;;cmp	[cs:ClusterH], -1 ; one apart? (current = previous+1)
 11321                                  		;cmp	dx, -1
 11322                                  		; 29/12/2023
 11323 00002B35 42                      		inc	dx ; -1 -> 0
 11324 00002B36 7501                    		jnz	short not_consequental
 11325                                  		;cmp	ax, -1		; 0FFFFh ; is [ClusterH]:ax = -1 ?
 11326 00002B38 40                      		inc	ax ; -1 -> 0
 11327                                  not_consequental:
 11328 00002B39 58                      		pop	ax ; 5* 	; restore logical sector (low)
 11329 00002B3A 5A                      		pop	dx ; 4* ; * ; 12/12/2023
 11330 00002B3B 1F                      		pop	ds ; 3*
 11331                                  
 11332                                  		;; 12/12/2023
 11333                                  		;; (this is a fast kernel loading method by the MSDOS programmer)
 11334                                  		;; ((consequtive clusters --> consequtive sectors))
 11335                                  		;; ds = cs
 11336                                  		;sub	si, bx
 11337                                  		;cmp	si, -1		; one apart? (consequtive?)
 11338                                  		;			; (current = previous+1)
 11339                                  
 11340 00002B3C 7507                    		jnz	short getcl2	; no, read [doscnt] sectors 
 11341                                  
 11342                                  		;add	[cs:doscnt], cx ; (cx = sectors per cluster)
 11343 00002B3E 010E[001A]              		add	[doscnt], cx ; 12/12/2023 ; add to read count
 11344 00002B42 E97EFF                  		jmp	unpack
 11345                                  ; ---------------------------------------------------------------------------
 11346                                  
 11347                                  getcl2:
 11348 00002B45 56                      		push	si ; 20/12/2023
 11349 00002B46 53                      		push	bx	
 11350                                  		; bx = low word of the new cluster number
 11351                                  		; 20/12/2023 - Retro DOS v5.0 (32 bit cluster numbers)
 11352                                  		; si = high word of the new cluster number
 11353 00002B47 52                      		push	dx		; sector to read (high word)
 11354 00002B48 50                      		push	ax		; sector to read (low word)
 11355                                  		
 11356                                  		; 12/12/2023
 11357                                  		; ds = cs
 11358                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
 11359                                  		;mov	cx, [cs:doscnt]
 11360 00002B49 A1[FA19]                		mov	ax, [drvfat]	; get drive and	fat spec
 11361                                  
 11362                                  		;;;
 11363                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 11364                                  		;
 11365                                  		; dma and segment (64K boundary) overrun precaution
 11366                                  		; (sector count will be decreased if it is required)
 11367 00002B4C 89F9                     		mov	cx, di
 11368 00002B4E F7D1                    		not	cx		; cx = 65535 - cx
 11369 00002B50 D1E9                    		shr	cx, 1		; cx = cx/2
 11370 00002B52 30C9                    		xor	cl, cl
 11371 00002B54 86CD                    		xchg	cl, ch		; cx = cx/256
 11372                                  		
 11373                                  		;cmp	cx, [cs:doscnt]	
 11374                                  				; if sector read count > cx, decrease it to cx
 11375 00002B56 3B0E[001A]              		cmp	cx, [doscnt]
 11376 00002B5A 7604                    		jbe	short getcl3
 11377                                  		;;;
 11378                                  		;mov	cx, [cs:doscnt]
 11379 00002B5C 8B0E[001A]              		mov	cx, [doscnt]
 11380                                  getcl3:
 11381 00002B60 5A                      		pop	dx		; sector to read for diskrd (low)
 11382                                  		;pop	word [cs:start_sec_h]
 11383                                  		; 12/12/2023
 11384 00002B61 8F06[9C04]              		pop	word [start_sec_h]
 11385                                  					; sector to read for diskrd (high)
 11386                                  		; 06/04/2024
 11387                                  		;;;
 11388 00002B65 51                      		push	cx ; +*
 11389                                  		;;;
 11390                                  
 11391                                  		; 12/12/2023
 11392                                  		; ds = cs
 11393                                  		;push	ds
 11394                                  		;push	cs
 11395                                  		;pop	ds
 11396                                  		
 11397 00002B66 0E                      		push	cs		; simulate far call
 11398                                  
 11399                                  		; 20/12/2023
 11400                                  		; 17/10/2022
 11401 00002B67 BD[0C0A]                		mov	bp, DISKRD	; offset diskrd
 11402                                  		;mov	bp, 0A2Bh	; 20/12/2023
 11403                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 11404                                  		;mov	bp, 8E5h	; 17/10/2022
 11405                                  					; 2C7h:8E5h = 70h:2E55h
 11406                                  
 11407 00002B6A E804EF                  		call	call_bios_code	; read the clusters
 11408                                  
 11409                                  		;pop	ds
 11410                                  		; 12/12/2023
 11411                                  		; ds = cs
 11412                                  
 11413                                  		; 06/04/2024
 11414                                  		;;;
 11415 00002B6D 58                      		pop	ax ; +*		; sector count
 11416                                  		;;;
 11417                                  
 11418 00002B6E 5B                      		pop	bx		; lw of the new cluster number
 11419 00002B6F 5E                      		pop	si ; 20/12/2023 ; hw of the new cluster number
 11420                                  
 11421 00002B70 5F                      		pop	di ; 2* - (kernel) load location (es:di)
 11422                                  
 11423                                  		; 06/04/2024
 11424                                  		;;mov	ax, [cs:doscnt]	; get number of	sectors	read
 11425                                  		;; 12/12/2023
 11426                                  		;mov	ax, [doscnt]
 11427                                  		
 11428 00002B71 86E0                    		xchg	ah, al		; multiply by 256
 11429 00002B73 D1E0                    		shl	ax, 1		; times	2 equal	512
 11430 00002B75 01C7                    		add	di, ax		; update load location
 11431                                  
 11432 00002B77 59                      		pop	cx ; 1*		; restore sectors/cluster
 11433                                  
 11434 00002B78 C3                      		retn
 11435                                  
 11436                                  ; =============== S U B	R O U T	I N E =======================================
 11437                                  
 11438                                  ;function: find and read the corresponding fat sector into ds:0
 11439                                  ;
 11440                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
 11441                                  ;     ds - fatloc segment
 11442                                  ;     cs:drvfat - logical drive number, fat id
 11443                                  ;     cs:md_sectorsize
 11444                                  ;     cs:last_fat_secnum - last fat sector number read in.
 11445                                  ;
 11446                                  ;out). corresponding fat sector read in.
 11447                                  ;      bx = offset value from fatlog segment.
 11448                                  ;      other registers are saved.
 11449                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
 11450                                  ;      starts at the last byte of the fat sector. in this case, the caller
 11451                                  ;      should save this byte, and read the next fat sector to get the rest
 11452                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
 11453                                  
 11454                                  		; 17/10/2022
 11455                                  get_fat_sector:	
 11456                                  		; 20/12/2023
 11457                                  		; 12/12/2023
 11458                                  		; ds = fat buffer segment
 11459                                  
 11460                                  		; 12/12/2023
 11461                                  		;push	ax ; (not necessary)
 11462 00002B79 51                      		push	cx ; read count (sectors per cluster)
 11463 00002B7A 57                      		push	di ; IBMDOS.COM/MSDOS.SYS load offset
 11464 00002B7B 56                      		push	si ; FAT offset value (from fat entry 0)
 11465 00002B7C 06                      		push	es ; IBMDOS.COM/MSDOS.SYS load segment
 11466 00002B7D 1E                      		push	ds ; FAT buffer segment
 11467                                  
 11468                                  		; 12/12/2023
 11469 00002B7E 0E                      		push	cs
 11470 00002B7F 1F                      		pop	ds
 11471                                  
 11472                                  		; 06/04/2024
 11473                                  		; dx:si = offset value (starting from fat entry 0)
 11474                                  		;	      of fat entry to find
 11475                                  	
 11476 00002B80 89F0                    		mov	ax, si
 11477                                  		;;mov	cx, [cs:md_sectorsize] ; 512
 11478                                  		; 12/12/2023
 11479                                  		;mov	cx, [md_sectorsize] ; 512
 11480                                  		;div	cx		; ax = sector number, dx = offset
 11481                                  		; 12/12/2023
 11482                                  		;nop
 11483                                  
 11484                                  		; 12/12/2023
 11485 00002B82 F736[081A]              		div	word [md_sectorsize] ; 512
 11486                                  
 11487                                  		; ax = FAT sector (sequence/index) number
 11488                                  		; dx = cluster number offset
 11489                                  
 11490                                  		; Get rid of the assumption that
 11491                                  		; there	is only	one reserved sector
 11492                                  
 11493                                  		; 12/12/2023 ; *
 11494                                  		;push	es ; *
 11495                                  		;push	ds ; *
 11496                                  		;push	di ; *
 11497 00002B86 50                      		push	ax
 11498                                  		;push	cs ; *
 11499                                  		;pop	ds ; *
 11500                                  
 11501                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
 11502                                  		; 12/12/2023
 11503 00002B87 A1[FA19]                		mov	ax, [drvfat]	; get drive # and FAT id 
 11504 00002B8A BD[A405]                		mov	bp, SETDRIVE
 11505                                  		;mov	bp, 5AEh  ; PCDOS 7.1 IBMBIO.COM
 11506                                  		;;mov	bp, 4D7h	; setdrive
 11507                                  					; at 2C7h:4D7h = 70h:2A47h
 11508 00002B8D 0E                      		push	cs		; simulate far call
 11509 00002B8E E8E0EE                  		call	call_bios_code	; get bds for drive
 11510 00002B91 58                      		pop	ax		; (sector number -without reserved and hidden sectors-)
 11511 00002B92 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 11512                                  					; add #reserved_sectors
 11513                                  		; 12/12/2023
 11514                                  		;pop	di ; *
 11515                                  		;pop	ds ; *
 11516                                  		;pop	es ; *
 11517                                  
 11518                                  		; 12/12/2023
 11519                                  		; ds = cs
 11520 00002B96 3B06[0A1A]              		cmp	ax, [last_fat_sec_num]
 11521                                  		;cmp	ax, [cs:last_fat_sec_num]
 11522 00002B9A 741C                    		jz	short gfs_split_chk ; don't need to read it again.
 11523 00002B9C A3[0A1A]                		mov	[last_fat_sec_num], ax
 11524                                  		;mov	[cs:last_fat_sec_num], ax
 11525                                  					; sector number
 11526                                  					; (in the partition, without hidden sectors)
 11527                                  		; 13/12/2023
 11528 00002B9F 07                      		pop	es ; FAT buffer segment (DS on top of the stack)
 11529 00002BA0 06                      		push	es ; (put it on top of the stack again)
 11530                                  
 11531 00002BA1 52                      		push	dx ; cluster number offset
 11532                                  
 11533                                  		; 12/12/2023
 11534 00002BA2 31C9                    		xor	cx, cx
 11535 00002BA4 890E[9C04]              		mov	[start_sec_h], cx ;0 
 11536                                  		;mov	word [cs:start_sec_h], 0 
 11537                                  					; prepare to read the fat sector
 11538                                  					; start_sec_h is always	0 for fat sector.
 11539 00002BA8 89C2                    		mov	dx, ax
 11540                                  		; 12/12/2023
 11541 00002BAA 41                      		inc	cx ; cx = 1
 11542                                  		;mov	cx, 1		; 1 sector read
 11543                                  		;mov	ax, [cs:drvfat]
 11544 00002BAB A1[FA19]                		mov	ax, [drvfat]
 11545                                  		;push	ds
 11546                                  		;pop	es
 11547                                  
 11548 00002BAE 31FF                    		xor	di, di	; 0	; es:di	-> fatloc segment:0
 11549                                  		
 11550                                  		; 12/12/2023
 11551                                  		;push	ds
 11552                                  		;push	cs
 11553                                  		;pop	ds
 11554                                  		
 11555 00002BB0 0E                      		push	cs		; simulate far call
 11556                                  
 11557                                  		; 20/12/2023
 11558                                  		; 17/10/2022
 11559 00002BB1 BD[0C0A]                		mov	bp, DISKRD	; offset diskrd
 11560                                  		;mov	bp, 0A2Bh	; 20/12/2023
 11561                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 11562                                  		;mov	bp, 8E5h	; 17/10/2022
 11563                                  					; 2C7h:8E5h = 70h:2E55h
 11564                                  
 11565 00002BB4 E8BAEE                  		call	call_bios_code	; read the clusters
 11566                                  
 11567                                  		; 12/12/2023
 11568                                  		;pop	ds
 11569                                  		; ds = cs = biosdata segment
 11570                                  
 11571 00002BB7 5A                      		pop	dx ; cluster number offset 
 11572                                  
 11573                                  gfs_split_chk:
 11574                                  		; 13/12/2023
 11575                                  		;mov	cx, [cs:md_sectorsize] ; 512
 11576 00002BB8 8B0E[081A]              		mov	cx, [md_sectorsize]
 11577                                  ;gfs_split_chk:					
 11578 00002BBC 49                      		dec	cx		; 511
 11579 00002BBD 39CA                    		cmp	dx, cx		; if offset points to the
 11580                                  					; last byte of this sector,
 11581                                  					; then splitted	entry.
 11582 00002BBF 89D3                    		mov	bx, dx		; set bx to dx
 11583                                  		
 11584                                  		; 12/12/2023
 11585                                  		; bx = dx = cluster number offset in the FAT buffer
 11586 00002BC1 1F                      		pop	ds ; FAT buffer segment
 11587 00002BC2 07                      		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
 11588 00002BC3 5E                      		pop	si ; FAT offset value (from fat entry 0)
 11589 00002BC4 5F                      		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
 11590 00002BC5 59                      		pop	cx ; read count (sectors per cluster)
 11591                                  		;pop	ax
 11592                                  
 11593 00002BC6 C3                      		retn
 11594                                  
 11595                                  %else
 11596                                  
 11597                                  	; 06/04/2024 - temporary
 11598                                  temp_cluster:	dw	0
 11599                                  
 11600                                  ClusterH:	dw	0
 11601                                  
 11602                                  ; =============== S U B R O U T I N E =======================================
 11603                                  
 11604                                  getclus:
 11605                                                  push    cx              ; 1*
 11606                                                                          ; si:bx = (32 bit) cluster to read
 11607                                                                          ; cx = sectors per cluster
 11608                                                                          ; es:di = load location
 11609                                                  push    di              ; 2*
 11610                                                  mov     [cs:doscnt], cx
 11611                                                  mov     ax, bx
 11612                                                  mov     [cs:ClusterH], si ; high word of cluster number
 11613                                                  sub     ax, 2
 11614                                                  sbb     word [cs:ClusterH], 0
 11615                                                  xchg    ax, [cs:ClusterH]
 11616                                                  mul     cx
 11617                                                  xchg    ax, [cs:ClusterH]
 11618                                                  mul     cx
 11619                                                  add     dx, [cs:ClusterH] ; convert to logical sector
 11620                                                                          ; dx:ax = matching logical sector number
 11621                                                                          ; starting from the data sector
 11622                                                  add     ax, [cs:First_Data_Sector]
 11623                                                  adc     dx, [cs:First_Data_Sector+2]
 11624                                                                          ; dx:ax = first logical sector to read
 11625                                  unpack:
 11626                                                  push    ds              ; 3*
 11627                                                  push    ax              ; 4*
 11628                                                  push    si              ; 5*
 11629                                                  push    bx              ; 6*
 11630                                                  mov     ax, [cs:fatloc]
 11631                                                  mov     ds, ax
 11632                                                  test    byte [cs:fbigfat], 20h ; fbigbig
 11633                                                                          ; FAT32 ?
 11634                                                  jz      short not_32bit_cluster ; no
 11635                                  unpack32:                               ; yes
 11636                                                  push    dx              ; 7*
 11637                                                  mov     dx, si
 11638                                                  mov     si, bx
 11639                                                  add     si, si
 11640                                                  adc     dx, dx
 11641                                                  add     si, si
 11642                                                  adc     dx, dx          ; dx:si = 4*(si:bx)
 11643                                                  call    get_fat_sector
 11644                                                  mov     si, [bx+2]      ; byte 16-31 of the FAT32 cluster number
 11645                                                  mov     bx, [bx]        ; byte 0-15 of the FAT32 cluster number
 11646                                                  pop     dx              ; 7*
 11647                                                  jmp     short getcl1
 11648                                  ; ---------------------------------------------------------------------------
 11649                                  
 11650                                  not_32bit_cluster:
 11651                                                  mov     si, bx          ; next cluster
 11652                                                  test    byte [cs:fbigfat], 40h ; fbig
 11653                                                                          ; FAT16 ?
 11654                                                  jnz     short unpack16  ; yes
 11655                                  unpack12:
 11656                                                  shr     si, 1
 11657                                                  add     si, bx          ; 12 bit fat. si=si/2
 11658                                                                          ; si = clus + clus/2
 11659                                                                          ; (si = byte offset of the cluster in the FAT)
 11660                                                  push    dx
 11661                                                  xor     dx, dx
 11662                                                  call    get_fat_sector
 11663                                                  pop     dx
 11664                                                  mov     ax, [bx]        ; save cluster number into ax
 11665                                                  jnz     short even_odd  ; if not a splitted fat, check even-odd
 11666                                                  mov     al, [bx]        ; (not needed!) Erdogan Tan - 2023
 11667                                                  mov     byte [cs:temp_cluster], al ; splitted fat
 11668                                                  inc     si              ; (next byte)
 11669                                                  push    dx
 11670                                                  xor     dx, dx
 11671                                                  call    get_fat_sector
 11672                                                  pop     dx
 11673                                                  mov     al, [0]		; mov ah,[0]
 11674                                                  mov     byte [cs:temp_cluster+1], al
 11675                                                  mov     ax, [cs:temp_cluster] ; mov al,[cs:temp_cluster]
 11676                                  even_odd:
 11677                                                  pop     bx              ; restore old fat entry value
 11678                                                  push    bx              ; 6*
 11679                                                  shr     bx, 1           ; was it even or odd?
 11680                                                  jnb     short havclus   ; it was even
 11681                                                  shr     ax, 1           ; odd. massage fat value and keep
 11682                                                                          ; the highest 12 bits.
 11683                                                  shr     ax, 1
 11684                                                  shr     ax, 1
 11685                                                  shr     ax, 1
 11686                                  havclus:
 11687                                                  mov     bx, ax          ; now bx = new fat entry
 11688                                                  and     bx, 0FFFh       ; keep low 12 bits
 11689                                                  jmp     short unpackx
 11690                                  ; ---------------------------------------------------------------------------
 11691                                  
 11692                                  unpack16:
 11693                                                  push    dx
 11694                                                  xor     dx, dx          ; extend to 32 bit offset
 11695                                                  shl     si, 1           ; cluster number * 2
 11696                                                  adc     dx, 0
 11697                                                  call    get_fat_sector
 11698                                                  pop     dx
 11699                                                  mov     bx, [bx]        ; bx = new fat entry
 11700                                  unpackx:
 11701                                                  xor     si, si          ; high word of cluster number = 0
 11702                                                                          ; (FAT12 or FAT16)
 11703                                  getcl1:
 11704                                                  pop     ax              ; 6* - cluster number lw
 11705                                                  pop     word [cs:ClusterH] ; 5* - cluster number hw
 11706                                                  sub     ax, bx          ; previous - current (or current - new)
 11707                                                  sbb     [cs:ClusterH], si
 11708                                                  cmp     word [cs:ClusterH], -1 ; one apart? (current = previous+1)
 11709                                                  jnz     short not_consenquental
 11710                                                  cmp     ax, -1          ; 0FFFFh ; is [ClusterH]:ax = -1 ?
 11711                                  not_consenquental:
 11712                                                  pop     ax              ; 4* - low word of first logical sector
 11713                                                  pop     ds              ; 3*
 11714                                                  jnz     short getcl2
 11715                                                  add     [cs:doscnt], cx ; consequental cluster read, +1 cluster sectors
 11716                                                                          ; (cx = sectors per cluster)
 11717                                                  jmp     unpack
 11718                                  ; ---------------------------------------------------------------------------
 11719                                  
 11720                                  getcl2:
 11721                                                  push    bx
 11722                                                  push    si
 11723                                                  push    dx              ; sector to read (high)
 11724                                                  push    ax              ; sector to read (low)
 11725                                                  mov     ax, [cs:drvfat] ; get drive and fat spec
 11726                                                  mov     cx, di          ; dma and segment (64K boundary) overrun precaution
 11727                                                                          ; (sector count will be decreased if it is required)
 11728                                                  not     cx              ; cx = 65535 - cx
 11729                                                  shr     cx, 1           ; cx = cx/2
 11730                                                  xor     cl, cl
 11731                                                  xchg    cl, ch          ; cx = cx/256
 11732                                                  cmp     cx, [cs:doscnt] ; if sector read count > cx, decrease it to cx
 11733                                                  jbe     short getcl3
 11734                                                  mov     cx, [cs:doscnt]
 11735                                  getcl3:
 11736                                                  pop     dx              ; sector to read for diskrd (low)
 11737                                                  pop     word [cs:start_sec_h] ; sector to read for diskrd (high)
 11738                                                  push    cx
 11739                                                  push    ds
 11740                                                  push    cs
 11741                                                  pop     ds
 11742                                                  push    cs              ; simulate far call
 11743                                                  mov     bp, DISKRD ; BIOSCODE:0A2Bh ; 364h:0A2Bh
 11744                                                  call    call_bios_code
 11745                                                  pop     ds
 11746                                                  pop     ax              ; sector count
 11747                                                  pop     si
 11748                                                  pop     bx
 11749                                                  pop     di              ; 2* - load location (es:di)
 11750                                                  xchg    ah, al
 11751                                                  shl     ax, 1           ; ax = ax * 512 ; byte count
 11752                                                  add     di, ax          ; update load location
 11753                                                  pop     cx              ; 1* - restore sectors/cluster
 11754                                                  retn
 11755                                  
 11756                                  ; =============== S U B R O U T I N E =======================================
 11757                                  
 11758                                  get_fat_sector:
 11759                                                  push    ax              ; dx:si = offset value (starting from fat entry 0)
 11760                                                                          ;         of fat entry to find
 11761                                                  push    cx
 11762                                                  push    di
 11763                                                  push    si
 11764                                                  push    es
 11765                                                  push    ds
 11766                                                  mov     ax, si
 11767                                                  mov     cx, [cs:md_sectorsize] ; 512
 11768                                                  div     cx
 11769                                                  nop                     ; ax = sector number, dx = offset
 11770                                                  push    es
 11771                                                  push    ds
 11772                                                  push    di
 11773                                                  push    ax
 11774                                                  push    cs
 11775                                                  pop     ds
 11776                                                  mov     ax, [cs:drvfat] ; get drive # and FAT id
 11777                                                  mov     bp, SetDrive ; BIOSCODE:05AEh
 11778                                                  push    cs              ; simulate far call
 11779                                                  call    call_bios_code  ; get bds for drive
 11780                                                  pop     ax              ; (sector number -without reserved and hidden sectors-)
 11781                                                  add     ax, [es:di+9]   ; [es:di+BDS.resectors]
 11782                                                                          ; add #reserved_sectors
 11783                                                  pop     di
 11784                                                  pop     ds
 11785                                                  pop     es
 11786                                                  cmp     ax, [cs:last_fat_sec_num]
 11787                                                  jz      short gfs_split_chk ; don't need to read it again
 11788                                                  mov     [cs:last_fat_sec_num], ax ; sector number
 11789                                                                          ; (in the partition, without hidden sectors)
 11790                                                  push    dx
 11791                                                  mov     word [cs:start_sec_h], 0 ; prepare to read the fat sector
 11792                                                                          ; start_sec_h is always 0 for fat sector
 11793                                                  mov     dx, ax
 11794                                                  mov     cx, 1           ; 1 sector read
 11795                                                  mov     ax, [cs:drvfat]
 11796                                                  push    ds
 11797                                                  pop     es
 11798                                                  xor     di, di          ; es:di -> fatloc segment:0
 11799                                                  push    ds
 11800                                                  push    cs
 11801                                                  pop     ds
 11802                                                  push    cs              ; simulate far call
 11803                                                  mov     bp, DISKRD ; BIOSCODE:0A2Bh ; 364h:0A2Bh
 11804                                                  call    call_bios_code
 11805                                                  pop     ds
 11806                                                  pop     dx
 11807                                                  mov     cx, [cs:md_sectorsize] ; 512
 11808                                  gfs_split_chk:
 11809                                                  dec     cx              ; 511
 11810                                                  cmp     dx, cx          ; if offset points to the last byte of this sector,
 11811                                                                          ; then splitted entry.
 11812                                                  mov     bx, dx          ; offset value from fatloc segment
 11813                                                  pop     ds
 11814                                                  pop     es
 11815                                                  pop     si
 11816                                                  pop     di
 11817                                                  pop     cx
 11818                                                  pop     ax
 11819                                                  retn
 11820                                  
 11821                                  %endif
 11822                                  
 11823                                  ; 15/10/2022
 11824                                  ;Bios_Data_Init	ends
 11825                                  
 11826                                  ; ---------------------------------------------------------------------------
 11827                                  
 11828                                  		; 09/12/2022
 11829                                  		;db 0
 11830                                  
 11831                                  numbertodiv	equ ($-BData_start)
 11832                                  numbertomod	equ (numbertodiv % 16)
 11833                                  
 11834                                  %if numbertomod>0 & numbertomod<16
 11835 00002BC7 00<rep 9h>              		times (16-numbertomod) db 0
 11836                                  %endif
 11837                                  
 11838                                  ;align 16
 11839                                  
 11840                                  ; 09/12/2022
 11841                                  IOSYSCODESEGOFF	equ $ - BData_start
 11842                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
 11843                                  
 11844                                  ;--- End of DOSBIOS data segment --------------------------------------------
 11845                                  ; ---------------------------------------------------------------------------
 11846                                  		;db 4 dup(0)
 11847                                  ; 09/12/2022		
 11848                                  ;		times 4 db 0	; 19/10/2022
 11849                                  ; ---------------------------------------------------------------------------
 11850                                  
 11851                                  ;============================================================================
 11852                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
 11853                                  ;============================================================================
 11854                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11855                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 11856                                  
 11857                                  section .BIOSCODE vstart=0 
 11858                                  
 11859                                  ; 30/12/2022
 11860                                  ; (BIOSCODE SEGMENT is 2CCh for MSDOS 6.21 IO.SYS)  -- ((25C0h+700h)>>4) --
 11861                                  
 11862                                  BCode_start:	 ; 09/12/2022
 11863                                   
 11864                                  ; 02/10/2022
 11865                                  
 11866                                  ;--- DOSBIOS code segment ---------------------------------------------------
 11867                                  ;----------------------------------------------------------------------------
 11868                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
 11869                                  ;----------------------------------------------------------------------------
 11870                                  
 11871                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
 11872 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
 11873 00000030 7000                    BiosDataWord:	dw 70h
 11874                                  
 11875                                  ; 15/10/2022
 11876                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
 11877                                  ; 09/12/2022
 11878                                  BIOSDATAWORD	equ BiosDataWord
 11879                                  
 11880                                  ; ---------------------------------------------------------------------------
 11881                                  
 11882                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11883                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 11884                                  
 11885                                  ;************************************************************************
 11886                                  ;*									*
 11887                                  ;*	seg_reinit is called with ax = our new code segment value,	*
 11888                                  ;*	  trashes di, cx, es						*
 11889                                  ;*									*
 11890                                  ;*	cas -- should be made disposable!				*
 11891                                  ;*									*
 11892                                  ;************************************************************************
 11893                                  
 11894                                  	; 20/09/2023	
 11895                                  	; 10/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11896                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
 11897                                  
 11898                                  _seg_reinit:
 11899 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11900                                  					; at 2C7h:30h or 70h:25A0h
 11901                                  		;mov	di, (offset cdev+2)
 11902 00000037 BF[0406]                		mov	di, cdev+2	; 19/10/2022
 11903                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
 11904                                  		; 10/08/2023
 11905 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
 11906                                  _seg_reinit_1:
 11907 0000003D AB                      		stosw			; modify Bios_Code entry points
 11908 0000003E 47                      		inc	di
 11909 0000003F 47                      		inc	di
 11910 00000040 E2FB                    		loop	_seg_reinit_1
 11911                                  		; 10/08/2023 (PCDOS 7.1)
 11912                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
 11913                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
 11914 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
 11915                                  
 11916 00000046 CB                      		retf
 11917                                  
 11918                                  ; ---------------------------------------------------------------------------
 11919                                  
 11920                                  ; 15/10/2022
 11921                                  
 11922                                  ;************************************************************************
 11923                                  ;*									*
 11924                                  ;*	chardev_entry - main device driver dispatch routine		*
 11925                                  ;*	   called with a dummy parameter block on the stack		*
 11926                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
 11927                                  ;*									*
 11928                                  ;*	will eventually take care of doing the transitions in		*
 11929                                  ;*	   out of Bios_Code						*
 11930                                  ;*									*
 11931                                  ;************************************************************************
 11932                                  
 11933                                  		; 20/09/2023
 11934                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
 11935 00000047 56                      		push	si
 11936 00000048 50                      		push	ax
 11937 00000049 51                      		push	cx
 11938 0000004A 52                      		push	dx
 11939 0000004B 57                      		push	di
 11940 0000004C 55                      		push	bp
 11941 0000004D 1E                      		push	ds
 11942 0000004E 06                      		push	es
 11943 0000004F 53                      		push	bx
 11944 00000050 89E5                    		mov	bp, sp
 11945 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
 11946                                  		;;mov	ds, word [cs:0030h]
 11947                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 11948 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 11949                                  		; 20/09/2023 (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:005Ah)
 11950 0000005A C434                    		les	si, [si]
 11951                                  		;mov	ax, [si+2]	; get the device number	if present
 11952 0000005C 8CC0                    		mov	ax, es
 11953 0000005E A2[2100]                		mov	[auxnum], al
 11954 00000061 8826[8004]              		mov	[printdev], ah
 11955                                  		;mov	si, [si]	; point	to the device dispatch table
 11956 00000065 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
 11957 00000069 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
 11958 0000006D 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
 11959 00000071 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
 11960 00000075 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
 11961                                  		; 17/10/2022
 11962 00000079 81FE[6F05]              		cmp	si, DSKTBL
 11963                                  		;;cmp	si, 579h	; (PCDOS 7.1 IBMBIO.COM)
 11964                                  		;cmp	si, 4A2h	; dsktbl
 11965                                  					; at 2C7h:4A2h = 70h:2A12h
 11966 0000007D 7517                    		jnz	short no_sector32_mapping
 11967                                  
 11968                                  ; Special case for 32-bit start sector number:
 11969                                  ;   if (si==dsktbl) /* if this is a disk device call */
 11970                                  ;      set high 16 bits of secnum to 0
 11971                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
 11972                                  ;
 11973                                  ; pass high word of sector number in start_sec_h, low word in dx
 11974                                  ;
 11975                                  ; note: start_l and start_h are the offsets within the io_request packet
 11976                                  ;	  which contain the low and hi words of the 32 bit start sector if
 11977                                  ;	  it has been used.
 11978                                  ;
 11979                                  ; note: remember not to destroy the registers which have been set up before
 11980                                  
 11981                                  		; 20/09/2023
 11982                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
 11983 0000007F C706[9C04]0000          		mov	word [start_sec_h], 0
 11984 00000085 83FAFF                  		cmp	dx, 0FFFFh
 11985 00000088 750C                    		jnz	short no_sector32_mapping
 11986 0000008A 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
 11987                                  					; 32 bits dsk req
 11988                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
 11989 0000008E 8916[9C04]              		mov	[start_sec_h], dx
 11990 00000092 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
 11991                                  					; dx = packet.start_l
 11992                                  no_sector32_mapping:
 11993 00000096 97                      		xchg	ax, di
 11994 00000097 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
 11995 0000009B 2E3A04                  		cmp	al, [cs:si]
 11996 0000009E 732B                    		jnb	short command_error
 11997 000000A0 98                      		cbw			; note that al <= 15 means ok
 11998 000000A1 D1E0                    		shl	ax, 1
 11999 000000A3 01C6                    		add	si, ax
 12000 000000A5 97                      		xchg	ax, di
 12001 000000A6 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
 12002 000000AA FC                      		cld
 12003                                  		; 17/10/2022
 12004 000000AB 2EFF5401                		call	near [cs:si+1]
 12005                                  		;call	word ptr cs:si+1
 12006 000000AF 7202                    		jb	short already_got_ah_status
 12007 000000B1 B401                    		mov	ah, 1
 12008                                  already_got_ah_status:
 12009                                  		;;mov	ds, [cs:0030h]	; 15/10/2022
 12010                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12011                                  					; cas note: shouldn't be needed!
 12012 000000B3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12013                                  		;lds	bx, ds:ptrsav
 12014 000000B8 C51E[1200]              		lds	bx, [ptrsav]
 12015 000000BC 894703                  		mov	[bx+3],	ax	; [bx+status]
 12016                                  					; mark operation complete
 12017 000000BF 5B                      		pop	bx
 12018 000000C0 07                      		pop	es
 12019 000000C1 1F                      		pop	ds
 12020 000000C2 5D                      		pop	bp
 12021 000000C3 5F                      		pop	di
 12022 000000C4 5A                      		pop	dx
 12023 000000C5 59                      		pop	cx
 12024 000000C6 58                      		pop	ax
 12025 000000C7 5E                      		pop	si
 12026                                  		;add	sp, 2		; get rid of fake return address
 12027                                  		; 20/09/2023 (PCDOS 7.1	- IBMBIO.COM - BIOSCODE:00C8h)
 12028 000000C8 44                      		inc	sp
 12029 000000C9 44                      		inc	sp	
 12030                                  
 12031                                  		; fall through into bc_retf
 12032                                  ; ---------------------------------------------------------------------------	
 12033                                  bc_retf:
 12034 000000CA CB                      		retf
 12035                                  ; ---------------------------------------------------------------------------
 12036                                  
 12037                                  command_error:				
 12038 000000CB E80700                  		call	bc_cmderr
 12039 000000CE EBE3                    		jmp	short already_got_ah_status
 12040                                  ; 15/10/2022
 12041                                  ; 01/05/2019
 12042                                  
 12043                                  ;----------------------------------------------------------------------------
 12044                                  ; The following piece of hack is for supporting CP/M compatibility
 12045                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
 12046                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
 12047                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
 12048                                  ; high.
 12049                                  ;----------------------------------------------------------------------------
 12050                                  
 12051                                  		;db 7 dup(0)
 12052                                  
 12053                                  		; 20/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 12054                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:0D0h)
 12055                                  		; 15/10/2022
 12056                                  		;dw 0		; pad to bring offset to 0D0h
 12057                                  
 12058 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
 12059                                  				;  which is the CP/M call 5 entry point
 12060                                  		
 12061                                  
 12062                                  ; ---------------------------------------------------------------------------
 12063                                  
 12064                                  ;	exit - all routines return through this path
 12065                                  
 12066                                  bc_cmderr:				
 12067 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
 12068                                  					; unknown command error
 12069                                  
 12070                                  ; =============== S U B	R O U T	I N E =======================================
 12071                                  
 12072                                  ;	now zero the count field by subtracting its current value,
 12073                                  ;	  which is still in cx, from itself.
 12074                                  
 12075                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
 12076                                  ;	  in order to return the number actually complete
 12077                                  
 12078                                  bc_err_cnt:	
 12079                                  		;les	bx, ds:ptrsav
 12080                                  		; 19/10/2022
 12081 000000D7 C41E[1200]              		les	bx, [ptrsav]
 12082 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
 12083                                  					; # of successful i/o's
 12084 000000DF B481                    		mov	ah, 81h		; mark error return
 12085 000000E1 F9                      		stc			; indicate abnormal end
 12086 000000E2 C3                      		retn
 12087                                  
 12088                                  ; 15/10/2022
 12089                                  
 12090                                  ;Bios_Code ends
 12091                                  
 12092                                  ;----------------------------------------------------------------------------
 12093                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
 12094                                  ;----------------------------------------------------------------------------
 12095                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12096                                  ; 10/01/2019 - Retro DOS v4.0
 12097                                  
 12098                                  ; 30/04/2019
 12099                                  
 12100                                  ;title	mschar - character and clock devices
 12101                                  
 12102                                  ;MODE_CTRLBRK	equ	0FFh
 12103                                  
 12104                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
 12105                                  
 12106                                  ;************************************************************************
 12107                                  ;*									*
 12108                                  ;*	device driver dispatch tables					*
 12109                                  ;*									*
 12110                                  ;*	each table starts with a byte which lists the number of		*
 12111                                  ;*	legal functions, followed by that number of words. Each		*
 12112                                  ;*	word represents an offset of a routine in Bios_Code which	*
 12113                                  ;*	handles the function. The functions are terminated with		*
 12114                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
 12115                                  ;*	to the caller. If carry is set, the ah/al registers are		*
 12116                                  ;*	returned as abnormal completion status. Notice that ds		*
 12117                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
 12118                                  ;*									*
 12119                                  ;************************************************************************
 12120                                  
 12121                                  		; 20/09/2023
 12122                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:00E3h)
 12123                                  		; 13/12/2022
 12124 000000E3 00                      		db 0
 12125                                  
 12126                                  		; 13/12/2022
 12127 000000E4 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
 12128                                  					; 2C7h:0E4h = 70h:2654h
 12129 000000E5 [FA01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 12130                                  					; 00 init
 12131 000000E7 [FA01]                  		dw bc_exvec  ; 1FBh	; 01
 12132 000000E9 [FA01]                  		dw bc_exvec  ; 1FBh	; 02
 12133 000000EB [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
 12134                                  					; 03
 12135 000000ED [5C01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
 12136                                  					; 04
 12137 000000EF [9F01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
 12138                                  					; 05
 12139 000000F1 [FA01]                  		dw bc_exvec  ; 1FBh	; 06
 12140 000000F3 [0802]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
 12141                                  					; 07
 12142 000000F5 [FC01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
 12143                                  					; 08
 12144 000000F7 [FC01]                  		dw con_writ  ; 1FDh	; 09
 12145 000000F9 [FA01]                  		dw bc_exvec  ; 1FBh	; 0A
 12146                                  con_table_end:
 12147 000000FB 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
 12148                                  					; 2C7h:0FBh = 70h:266Bh
 12149 000000FC [FA01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
 12150 000000FE [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 12151 00000100 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 12152 00000102 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
 12153 00000104 [1902]                  		dw prn_input  ;	21Ah	; prn_input
 12154                                  					; 04 indicate zero chars read
 12155 00000106 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 12156                                  					; 05 read non-destructive
 12157 00000108 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 12158 0000010A [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 12159 0000010C [1E02]                  		dw prn_writ   ;	21Fh	; prn_writ
 12160 0000010E [1E02]                  		dw prn_writ   ; 21Fh	; 09
 12161 00000110 [4F02]                  		dw prn_stat   ; 251h	; prn_stat
 12162 00000112 [FA01]                  		dw bc_exvec   ; 1FBh	; 0B
 12163 00000114 [FA01]                  		dw bc_exvec   ; 1FBh	; 0C
 12164 00000116 [FA01]                  		dw bc_exvec   ; 1FBh	; 0D
 12165 00000118 [FA01]                  		dw bc_exvec   ; 1FBh	; 0E
 12166 0000011A [FA01]                  		dw bc_exvec   ; 1FBh	; 0F
 12167 0000011C [9402]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
 12168 0000011E [FA01]                  		dw bc_exvec   ; 1FBh	; 11
 12169 00000120 [FA01]                  		dw bc_exvec   ; 1FBh	; 12
 12170 00000122 [C202]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
 12171 00000124 [FA01]                  		dw bc_exvec   ; 1FBh	; 14
 12172 00000126 [FA01]                  		dw bc_exvec   ; 1FBh	; 15
 12173 00000128 [FA01]                  		dw bc_exvec   ; 1FBh	; 16
 12174 0000012A [FA01]                  		dw bc_exvec   ; 1FBh	; 17
 12175 0000012C [FA01]                  		dw bc_exvec   ; 1FBh	; 18
 12176 0000012E [F702]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
 12177                                  prn_table_end:
 12178 00000130 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
 12179                                  					; 2C7h:130h = 70h:26A0h
 12180 00000131 [FA01]                  		dw bc_exvec   ; 1FBh	; 00 - init
 12181 00000133 [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 12182 00000135 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 12183 00000137 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 12184 00000139 [1203]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
 12185 0000013B [3703]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
 12186 0000013D [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 12187 0000013F [7803]                  		dw aux_flsh   ;	36Ch	; aux_flsh
 12188 00000141 [7F03]                  		dw aux_writ   ;	374h	; aux_writ
 12189 00000143 [7F03]                  		dw aux_writ   ;	374h	; 09
 12190 00000145 [5703]                  		dw aux_wrst   ;	355h	; aux_wrst
 12191                                  aux_table_end:
 12192 00000147 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
 12193                                  					; 2C7h:147h = 70h:26B7h
 12194 00000148 [FA01]                  		dw bc_exvec   ; 1FBh	; 00
 12195 0000014A [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 12196 0000014C [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 12197 0000014E [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 12198 00000150 [E404]                  		dw tim_read   ;	435h	; tim_read
 12199 00000152 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 12200 00000154 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 12201 00000156 [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 12202 00000158 [E503]                  		dw tim_writ   ; 3DBh	; tim_writ
 12203 0000015A [E503]                  		dw tim_writ   ; 3DBh	; 09
 12204                                  tim_table_end:
 12205                                  
 12206                                  ; ---------------------------------------------------------------------------
 12207                                  
 12208                                  ;************************************************************************
 12209                                  ;*									*
 12210                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
 12211                                  ;*									*
 12212                                  ;************************************************************************
 12213                                  
 12214                                  con_read:				; 2C7h:15Ch = 70h:26CCh
 12215                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
 12216 0000015C E306                    		jcxz	con_exit	; 19/10/2022
 12217                                  con_loop:				
 12218 0000015E E80500                  		call	chrin		; get char in al
 12219 00000161 AA                      		stosb			; store	char at	es:di
 12220 00000162 E2FA                    		loop	con_loop
 12221                                  con_exit:				
 12222 00000164 F8                      		clc
 12223 00000165 C3                      		retn
 12224                                  
 12225                                  ; =============== S U B	R O U T	I N E =======================================
 12226                                  
 12227                                  ;************************************************************************
 12228                                  ;*									*
 12229                                  ;*	chrin - input single char from keyboard into al			*
 12230                                  ;*									*
 12231                                  ;*	  we are going to issue extended keyboard function, if		*
 12232                                  ;*	  supported. the returning value of the extended keystroke	*
 12233                                  ;*	  of the extended keyboard function uses 0E0h in al		*
 12234                                  ;*	  instead of 00h as in the conventional keyboard function.	*
 12235                                  ;*	  this creates a conflict when the user entered real		*
 12236                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
 12237                                  ;*	  keystroke and the greek alpha. this case will be handled	*
 12238                                  ;*	  in the following manner:					*
 12239                                  ;*									*
 12240                                  ;*	      ah = 16h							*
 12241                                  ;*	      int 16h							*
 12242                                  ;*	      if al == 0, then extended code (in ah)			*
 12243                                  ;*	      else if al == 0E0h, then					*
 12244                                  ;*	      if ah <> 0, then extended code (in ah)			*
 12245                                  ;*		else greek_alpha character.				*
 12246                                  ;*									*
 12247                                  ;*	also, for compatibility reason, if an extended code is		*
 12248                                  ;*	  detected, then we are going to change the value in al		*
 12249                                  ;*	  from 0E0h to 00h.						*
 12250                                  ;*									*
 12251                                  ;************************************************************************
 12252                                  
 12253                                  		; 19/10/2022
 12254                                  chrin:		
 12255 00000166 8A26[7E04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
 12256 0000016A 30C0                    		xor	al, al
 12257 0000016C 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
 12258 00000170 08C0                    		or	al, al
 12259 00000172 752A                    		jnz	short keyret
 12260 00000174 CD16                    		int	16h		; KEYBOARD -
 12261 00000176 09C0                    		or	ax, ax
 12262 00000178 74EC                    		jz	short chrin
 12263 0000017A 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 12264 0000017D 7504                    		jnz	short alt_ext_chk
 12265 0000017F B010                    		mov	al, 10h
 12266 00000181 EB1B                    		jmp	short keyret
 12267                                  ; ---------------------------------------------------------------------------
 12268                                  
 12269                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
 12270                                  ;    if character read was 0E0h then
 12271                                  ;      if extended byte was zero (i.e. ah == 0) then
 12272                                  ;	 goto keyret
 12273                                  ;      else
 12274                                  ;	 set al to zero
 12275                                  ;	 goto alt_save
 12276                                  ;      endif
 12277                                  ;    endif
 12278                                  ;  endif
 12279                                  
 12280                                  alt_ext_chk:
 12281 00000183 803E[7E04]00            		cmp	byte [keyrd_func], 0
 12282 00000188 740C                    		jz	short not_ext
 12283 0000018A 3CE0                    		cmp	al, 0E0h
 12284 0000018C 7508                    		jnz	short not_ext
 12285 0000018E 08E4                    		or	ah, ah
 12286 00000190 740C                    		jz	short keyret
 12287 00000192 30C0                    		xor	al, al
 12288 00000194 EB04                    		jmp	short alt_save
 12289                                  ; ---------------------------------------------------------------------------
 12290                                  
 12291                                  not_ext:				
 12292 00000196 08C0                    		or	al, al		; special case?
 12293 00000198 7504                    		jnz	short keyret
 12294                                  alt_save:				
 12295 0000019A 8826[0C00]              		mov	[altah], ah	; store	special	key
 12296                                  keyret:					
 12297 0000019E C3                      		retn
 12298                                  
 12299                                  ; ---------------------------------------------------------------------------
 12300                                  
 12301                                  ;************************************************************************
 12302                                  ;*									*
 12303                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
 12304                                  ;*									*
 12305                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
 12306                                  ;*	in the status word of the request packet, and there is no	*
 12307                                  ;*	character in the input buffer, the driver issues a system	*
 12308                                  ;*	wait request to the rom. on return from the rom, it returns	*
 12309                                  ;*	a 'char-not-found' to the dos.					*
 12310                                  ;*									*
 12311                                  ;************************************************************************
 12312                                  
 12313                                  		; 19/10/2022
 12314                                  con_rdnd:				
 12315 0000019F A0[0C00]                		mov	al, [altah]
 12316 000001A2 08C0                    		or	al, al
 12317 000001A4 754C                    		jnz	short rdexit
 12318 000001A6 8A26[7F04]              		mov	ah, [keysts_func]
 12319 000001AA CD16                    		int	16h		; KEYBOARD -
 12320 000001AC 751D                    		jnz	short gotchr
 12321 000001AE 803E[7900]00            		cmp	byte [fhavek09], 0
 12322 000001B3 7412                    		jz	short z_bus_exit
 12323 000001B5 C41E[1200]              		les	bx, [ptrsav]
 12324                                  		; 12/12/2022
 12325 000001B9 26F6470404              		test	byte [es:bx+4], 04h
 12326                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
 12327 000001BE 7407                    		jz	short z_bus_exit
 12328 000001C0 B80041                  		mov	ax, 4100h
 12329 000001C3 30DB                    		xor	bl, bl
 12330 000001C5 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
 12331                                  					; AL = condition type, BH = condition compare or mask value
 12332                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
 12333                                  					; DX = I/O port	address	if AL bit 4 set
 12334                                  z_bus_exit:				
 12335 000001C7 F9                      		stc			; 2C7h:1C8h = 70h:2738h
 12336 000001C8 B403                    		mov	ah, 3		; indicate busy	status
 12337 000001CA C3                      		retn
 12338                                  ; ---------------------------------------------------------------------------
 12339                                  
 12340                                  gotchr:					
 12341 000001CB 09C0                    		or	ax, ax
 12342 000001CD 7508                    		jnz	short notbrk	; check	for null after break
 12343 000001CF 8A26[7E04]              		mov	ah, [keyrd_func] ; issue keyboard read function
 12344 000001D3 CD16                    		int	16h		; KEYBOARD -
 12345 000001D5 EBC8                    		jmp	short con_rdnd	; get a	real status
 12346                                  ; ---------------------------------------------------------------------------
 12347                                  
 12348                                  notbrk:					
 12349 000001D7 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 12350 000001DA 7504                    		jnz	short rd_ext_chk
 12351 000001DC B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
 12352 000001DE EB12                    		jmp	short rdexit
 12353                                  ; ---------------------------------------------------------------------------
 12354                                  
 12355                                  rd_ext_chk:				
 12356 000001E0 803E[7E04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
 12357 000001E5 740B                    		jz	short rdexit
 12358 000001E7 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
 12359 000001E9 7507                    		jnz	short rdexit
 12360 000001EB 80FC00                  		cmp	ah, 0		; scan code exist?
 12361 000001EE 7402                    		jz	short rdexit	; yes. greek alpha char.
 12362 000001F0 B000                    		mov	al, 0		; no. extended key stroke.
 12363                                  					; change it for	compatibility
 12364                                  rdexit:					
 12365 000001F2 C41E[1200]              		les	bx, [ptrsav]
 12366 000001F6 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
 12367                                  					; return keyboard character here
 12368                                  bc_exvec:				
 12369 000001FA F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 12370                                  					; indicate normal termination
 12371 000001FB C3                      		retn
 12372                                  ; ---------------------------------------------------------------------------
 12373                                  
 12374                                  ;************************************************************************
 12375                                  ;*									*
 12376                                  ;*	con_write - console write routine				*
 12377                                  ;*									*
 12378                                  ;*	entry:	es:di -> buffer						*
 12379                                  ;*		cx    =  count						*
 12380                                  ;*									*
 12381                                  ;************************************************************************
 12382                                  
 12383                                  con_writ:
 12384                                  		;jcxz	short bc_exvec
 12385 000001FC E3FC                    		jcxz	bc_exvec	; 19/10/2022
 12386                                  		; 12/12/2022
 12387                                  		;jcxz	cc_ret
 12388                                  con_lp:					
 12389 000001FE 268A05                  		mov	al, [es:di]
 12390 00000201 47                      		inc	di
 12391 00000202 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 12392                                  					; AL = character to display
 12393 00000204 E2F8                    		loop	con_lp
 12394                                  cc_ret:					
 12395 00000206 F8                      		clc
 12396 00000207 C3                      		retn
 12397                                  
 12398                                  ; =============== S U B	R O U T	I N E =======================================
 12399                                  
 12400                                  ;************************************************************************
 12401                                  ;*									*
 12402                                  ;*	con_flush - flush out keyboard queue				*
 12403                                  ;*									*
 12404                                  ;************************************************************************
 12405                                  
 12406                                  con_flush:
 12407 00000208 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
 12408                                  flloop:					; while	(charavail()) charread();	
 12409 0000020D B401                    		mov	ah, 1
 12410 0000020F CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 12411                                  					; Return: ZF clear if character	in buffer
 12412                                  					; AH = scan code, AL = character
 12413                                  					; ZF set if no character in buffer
 12414 00000211 74F3                    		jz	short cc_ret
 12415 00000213 30E4                    		xor	ah, ah
 12416 00000215 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 12417                                  					; Return: AH = scan code, AL = character
 12418 00000217 EBF4                    		jmp	short flloop
 12419                                  
 12420                                  ; ---------------------------------------------------------------------------
 12421                                  
 12422                                  ; 15/10/2022
 12423                                  
 12424                                  ;************************************************************************
 12425                                  ;*									*
 12426                                  ;*	some equates for rom bios printer i/o				*
 12427                                  ;*									*
 12428                                  ;************************************************************************
 12429                                  
 12430                                  ; ibm rom status bits (i don't trust them, neither should you)
 12431                                  ; warning!!! the ibm rom does not return just one bit. it returns a
 12432                                  ; whole slew of bits, only one of which is correct.
 12433                                  
 12434                                  ;notbusystatus	equ 10000000b		; not busy
 12435                                  ;nopaperstatus	equ 00100000b		; no more paper
 12436                                  ;prnselected	equ 00010000b		; printer selected
 12437                                  ;ioerrstatus	equ 00001000b		; some kinda error
 12438                                  ;timeoutstatus	equ 00000001b		; time out.
 12439                                  ;
 12440                                  ;noprinter	equ 00110000b		; no printer attached
 12441                                  
 12442                                  ; 18/03/2019 - Retro DOS v4.0
 12443                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
 12444                                  
 12445                                  ; ---------------------------------------------------------------------------
 12446                                  
 12447                                  ;************************************************************************
 12448                                  ;*									*
 12449                                  ;*	prn_input - return with no error but zero chars read		*
 12450                                  ;*									*
 12451                                  ;*	enter with cx = number of characters requested			*
 12452                                  ;*									*
 12453                                  ;************************************************************************
 12454                                  
 12455                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
 12456 00000219 E8BBFE                  		call	bc_err_cnt	; reset	count to zero
 12457                                  					; (sub reqpkt.count,cx)
 12458                                  		; 12/12/2022
 12459                                  prn_done:
 12460 0000021C F8                      		clc			; but return with carry	reset for no error
 12461 0000021D C3                      		retn
 12462                                  ; ---------------------------------------------------------------------------
 12463                                  
 12464                                  ;************************************************************************
 12465                                  ;*									*
 12466                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
 12467                                  ;*									*
 12468                                  ;*	auxnum has printer number					*
 12469                                  ;*									*
 12470                                  ;************************************************************************
 12471                                  
 12472                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
 12473                                  		;jcxz	short prn_done	; no chars to output
 12474 0000021E E3FC                    		jcxz	prn_done	; 19/10/2022
 12475                                  prn_loop:				
 12476 00000220 BB0200                  		mov	bx, 2		; retry	count
 12477                                  prn_out:				
 12478 00000223 E83600                  		call	prnstat		; get status
 12479 00000226 751D                    		jnz	short TestPrnError
 12480 00000228 268A05                  		mov	al, [es:di]	; get character	to print
 12481 0000022B 30E4                    		xor	ah, ah
 12482 0000022D E82E00                  		call	prnop		; print	to printer
 12483 00000230 7419                    		jz	short prn_con	; no error - continue
 12484 00000232 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
 12485 00000235 7509                    		jnz	short _prnwf
 12486 00000237 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
 12487 00000239 C606[0C00]00            		mov	byte [altah], 0
 12488 0000023E EB08                    		jmp	short pmessg
 12489                                  ; ---------------------------------------------------------------------------
 12490                                  
 12491                                  _prnwf:					
 12492 00000240 F6C401                  		test	ah, 1		; timeoutstatus
 12493 00000243 7406                    		jz	short prn_con
 12494                                  TestPrnError:				
 12495 00000245 4B                      		dec	bx		; retry	until count is exhausted.
 12496 00000246 75DB                    		jnz	short prn_out
 12497                                  pmessg:					
 12498 00000248 E98CFE                  		jmp	bc_err_cnt
 12499                                  ; ---------------------------------------------------------------------------
 12500                                  
 12501                                  prn_con:				
 12502 0000024B 47                      		inc	di		; point	to next	char and continue
 12503 0000024C E2D2                    		loop	prn_loop
 12504                                  ;prn_done:				
 12505                                  		; 12/12/2022
 12506                                  prn_done2:
 12507                                  		;clc
 12508                                  		; cf=0
 12509 0000024E C3                      		retn
 12510                                  ; ---------------------------------------------------------------------------
 12511                                  
 12512                                  ;************************************************************************
 12513                                  ;*									*
 12514                                  ;*	prn_stat - device driver entry to return printer status		*
 12515                                  ;*									*
 12516                                  ;************************************************************************
 12517                                  
 12518                                  prn_stat:				; 2C7h:251h = 70h:27C1h
 12519 0000024F E80A00                  		call	prnstat		; device in dx
 12520 00000252 75F4                    		jnz	short pmessg
 12521 00000254 F6C480                  		test	ah, 80h		; notbusystatus
 12522                                  		;jnz	short prn_done
 12523                                  		; 12/12/2022
 12524 00000257 75F5                    		jnz	short prn_done2 ; cf=0
 12525 00000259 E96BFF                  		jmp	z_bus_exit
 12526                                  ; ---------------------------------------------------------------------------
 12527                                  
 12528                                  ;************************************************************************
 12529                                  ;*									*
 12530                                  ;*	prnstat - utility function to call ROM BIOS to check		*
 12531                                  ;*		 printer status. Return meaningful error code		*
 12532                                  ;*									*
 12533                                  ;************************************************************************
 12534                                  
 12535                                  prnstat:				
 12536 0000025C B402                    		mov	ah, 2		; set command for get status
 12537                                  					; PRINTER - GET	STATUS
 12538                                  					; DX = printer port (0-3)
 12539                                  					; Return: AH = status
 12540                                  
 12541                                  ; =============== S U B	R O U T	I N E =======================================
 12542                                  
 12543                                  ;************************************************************************
 12544                                  ;*									*
 12545                                  ;*	prnop - call ROM BIOS printer function in ah			*
 12546                                  ;*		return zero true if no error				*
 12547                                  ;*		return zero false if error, al = error code		*
 12548                                  ;*									*
 12549                                  ;************************************************************************
 12550                                  
 12551                                  prnop:
 12552                                  		; 20/12/2023 - Retro DOS v5.0
 12553                                  		; PCDOS 7.1 IBMBIO.COM
 12554                                  		
 12555                                  		;mov	dx, [auxnum]	; get printer number
 12556                                  		;int	17h
 12557                                  
 12558 0000025E 1E                      		push	ds
 12559 0000025F FF36[2100]              		push	word [auxnum]
 12560 00000263 31D2                    		xor	dx, dx ; 0
 12561 00000265 8EDA                    		mov	ds, dx
 12562 00000267 5A                      		pop	dx
 12563 00000268 9C                      		pushf			; simulate int 17h
 12564 00000269 FA                      		cli
 12565                                  		;call	dword ptr ds:5ghghCh
 12566 0000026A FF1E5C00                		call	far [17h*4]	; 0:5Ch = INT 17h vector
 12567 0000026E 1F                      		pop	ds
 12568                                  
 12569                                  	; This check was added to see if this is a case of no
 12570                                  	; printer being installed. This tests checks to be sure
 12571                                  	; the error is noprinter (30h)
 12572                                  
 12573 0000026F 50                      		push	ax
 12574 00000270 80E430                  		and	ah, 30h
 12575 00000273 80FC30                  		cmp	ah, 30h		; noprinter
 12576 00000276 58                      		pop	ax
 12577 00000277 7506                    		jnz	short NextTest
 12578 00000279 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
 12579 0000027C 80CC08                  		or	ah, 8		; ioerrstatus
 12580                                  
 12581                                  ; examine the status bits to see if an error occurred. unfortunately, several
 12582                                  ; of the bits are set so we have to pick and choose. we must be extremely
 12583                                  ; careful about breaking basic.
 12584                                  
 12585                                  NextTest:				
 12586 0000027F F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
 12587                                  					; i/o error?
 12588 00000282 740A                    		jz	short checknotready ; no, try not ready
 12589                                  
 12590                                  ; at this point, we know we have an error. the converse is not true
 12591                                  
 12592 00000284 B009                    		mov	al, 9		; error_I24_out_of_paper
 12593                                  					; first, assume	out of paper
 12594 00000286 F6C420                  		test	ah, 20h		; out of paper set?
 12595 00000289 7502                    		jnz	short ret1	; yes, error is	set
 12596 0000028B FEC0                    		inc	al		; return al=10 (i/o error)
 12597                                  ret1:					
 12598 0000028D C3                      		retn
 12599                                  ; ---------------------------------------------------------------------------
 12600                                  
 12601                                  checknotready:				
 12602 0000028E B002                    		mov	al, 2		; assume not-ready
 12603 00000290 F6C401                  		test	ah, 1
 12604 00000293 C3                      		retn
 12605                                  
 12606                                  ; ---------------------------------------------------------------------------
 12607                                  
 12608                                  ;************************************************************************
 12609                                  ;*									*
 12610                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
 12611                                  ;*		     this entry point should never block waiting for	*
 12612                                  ;*		     device to come ready.				*
 12613                                  ;*									*
 12614                                  ;*	inputs:	cx = count, es:di -> buffer				*
 12615                                  ;*	outputs: set the number of bytes transferred in the		*
 12616                                  ;*		 device driver request packet				*
 12617                                  ;*									*
 12618                                  ;************************************************************************
 12619                                  
 12620                                  		; 19/10/2022
 12621                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
 12622 00000294 89FE                    		mov	si, di		; everything is	set for	lodsb
 12623                                  prn_tilbloop:				
 12624 00000296 51                      		push	cx
 12625 00000297 53                      		push	bx
 12626 00000298 30FF                    		xor	bh, bh
 12627 0000029A 8A1E[8004]              		mov	bl, [printdev]
 12628 0000029E D1E3                    		shl	bx, 1
 12629                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
 12630 000002A0 8B8F[8104]              		mov	cx, [wait_count+bx]
 12631 000002A4 5B                      		pop	bx
 12632                                  prn_getstat:				
 12633 000002A5 E8B4FF                  		call	prnstat		; get status
 12634 000002A8 7514                    		jnz	short prn_bperr	; error
 12635 000002AA F6C480                  		test	ah, 80h		; ready	yet?
 12636 000002AD E1F6                    		loope	prn_getstat	; no, go for more
 12637 000002AF 59                      		pop	cx		; get original count
 12638 000002B0 740D                    		jz	short prn_berr	; still	not ready => done
 12639 000002B2 26                      		es
 12640 000002B3 AC                      		lodsb
 12641                                  		;lods	byte ptr es:[si] ; es
 12642                                  					; lodsb
 12643 000002B4 30E4                    		xor	ah, ah
 12644 000002B6 E8A5FF                  		call	prnop
 12645 000002B9 7504                    		jnz	short prn_berr	; error
 12646 000002BB E2D9                    		loop	prn_tilbloop
 12647                                  		; 12/12/2022
 12648                                  		; cf=0 (prnop)
 12649                                  		;clc			; normal no-error return
 12650 000002BD C3                      		retn			;   from device driver
 12651                                  
 12652                                  ; ---------------------------------------------------------------------------
 12653                                  
 12654                                  prn_bperr:				
 12655 000002BE 59                      		pop	cx		; restore transfer count from stack
 12656                                  prn_berr:				
 12657 000002BF E915FE                  		jmp	bc_err_cnt
 12658                                  ; ---------------------------------------------------------------------------
 12659                                  
 12660                                  ; 15/10/2022
 12661                                  
 12662                                  ;************************************************************************
 12663                                  ;*									*
 12664                                  ;*	prn_genioctl - get/set printer retry count			*
 12665                                  ;*									*
 12666                                  ;************************************************************************
 12667                                  
 12668                                  ; IOCTL.INC (MSDOS 6.0, 1991)
 12669                                  ; 11/01/2019
 12670                                  
 12671                                  ;********************************;*
 12672                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
 12673                                  ;********************************;*
 12674                                  
 12675                                  ;;RAWIO SUB-FUNCTIONS
 12676                                  ;;get_retry_count equ 65h
 12677                                  ;;set_retry_count equ 45h
 12678                                  
 12679                                  ;;struc A_RETRYCOUNT
 12680                                  ;;.rc_count: resw 1
 12681                                  ;;endstruc
 12682                                  
 12683                                  ;ioc_pc equ 5
 12684                                  
 12685                                  ; ---------------------------------------------------------------------------
 12686                                  
 12687                                  		; 19/10/2022
 12688                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
 12689 000002C2 C43E[1200]              		les	di, [ptrsav]
 12690 000002C6 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 12691                                  					; ioc_pc
 12692 000002CB 7403                    		jz	short prnfunc_ok
 12693                                  
 12694                                  prnfuncerr:				
 12695 000002CD E905FE                  		jmp	bc_cmderr
 12696                                  ; ---------------------------------------------------------------------------
 12697                                  
 12698                                  prnfunc_ok:				
 12699 000002D0 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 12700 000002D4 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
 12701 000002D8 30FF                    		xor	bh, bh
 12702                                  		;mov	bl, ds:printdev	; get index into retry counts
 12703 000002DA 8A1E[8004]              		mov	bl, [printdev]
 12704 000002DE D1E3                    		shl	bx, 1
 12705                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
 12706 000002E0 8B8F[8104]              		mov	cx, [wait_count+bx]
 12707 000002E4 3C65                    		cmp	al, 65h		; get_retry_count
 12708 000002E6 7407                    		jz	short prngetcount
 12709 000002E8 3C45                    		cmp	al, 45h		; set_retry_count
 12710 000002EA 75E1                    		jnz	short prnfuncerr
 12711 000002EC 268B0D                  		mov	cx, [es:di]
 12712                                  prngetcount:				
 12713                                  		;mov	ds:wait_count[bx], cx
 12714 000002EF 898F[8104]              		mov	[wait_count+bx], cx
 12715 000002F3 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
 12716                                  					; return current retry count
 12717                                  		; 12/12/2022
 12718                                  		; cf=0
 12719                                  		;clc
 12720 000002F6 C3                      		retn
 12721                                  ; ---------------------------------------------------------------------------
 12722                                  
 12723                                  ;************************************************************************
 12724                                  ;*									*
 12725                                  ;*  prn_ioctl_query							*
 12726                                  ;*									*
 12727                                  ;*  Added for 5.00							*
 12728                                  ;************************************************************************
 12729                                  
 12730                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
 12731 000002F7 C43E[1200]              		les	di, [ptrsav]
 12732 000002FB 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 12733                                  					; ioc_pc
 12734 00000300 750D                    		jnz	short prn_query_err
 12735 00000302 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 12736 00000306 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
 12737 00000308 7404                    		jz	short IOCtlSupported
 12738 0000030A 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
 12739 0000030C 7501                    		jnz	short prn_query_err
 12740                                  IOCtlSupported:	
 12741                                  		; 12/12/2022
 12742                                  		; cf=0		
 12743                                  		;clc
 12744 0000030E C3                      		retn
 12745                                  ; ---------------------------------------------------------------------------
 12746                                  
 12747                                  prn_query_err:
 12748                                  		; 12/12/2022				
 12749                                  		;stc
 12750 0000030F E9C3FD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
 12751                                  ; ---------------------------------------------------------------------------
 12752                                  
 12753                                  ;************************************************************************
 12754                                  ;*									*
 12755                                  ;*	aux port driver code -- "aux" == "com1"				*
 12756                                  ;*									*
 12757                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
 12758                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
 12759                                  ;*									*
 12760                                  ;************************************************************************
 12761                                  
 12762                                  ;	values in ah, requesting function of int 14h in rom bios
 12763                                  
 12764                                  ;auxfunc_send	 equ	1	;transmit
 12765                                  ;auxfunc_receive equ	2	;read
 12766                                  ;auxfunc_status	 equ	3	;request status
 12767                                  
 12768                                  ;	error flags, reported by int 14h, reported in ah:
 12769                                  
 12770                                  ;flag_data_ready equ	01h	;data ready
 12771                                  ;flag_overrun	 equ	02h	;overrun error
 12772                                  ;flag_parity	 equ	04h	;parity error
 12773                                  ;flag_frame	 equ	08h	;framing error
 12774                                  ;flag_break	 equ	10h	;break detect
 12775                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
 12776                                  ;flag_timeout	 equ	80h	;timeout
 12777                                  
 12778                                  ;	these flags reported in al:
 12779                                  
 12780                                  ;flag_cts	 equ	10h	;clear to send
 12781                                  ;flag_dsr	 equ	20h	;data set ready
 12782                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
 12783                                  
 12784                                  ; ---------------------------------------------------------------------------
 12785                                  
 12786                                  ;************************************************************************
 12787                                  ;*									*
 12788                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
 12789                                  ;*		   at es:di						*
 12790                                  ;*									*
 12791                                  ;************************************************************************
 12792                                  
 12793                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
 12794                                  		;jcxz	short exvec2
 12795 00000312 E311                    		jcxz	exvec2		; 19/10/2022
 12796 00000314 E88000                  		call	getbx		; put address of auxbuf	in bx
 12797 00000317 30C0                    		xor	al, al
 12798 00000319 8607                    		xchg	al, [bx]
 12799 0000031B 08C0                    		or	al, al
 12800 0000031D 7503                    		jnz	short aux2
 12801                                  aux1:					
 12802 0000031F E80500                  		call	auxin		; get character	from port
 12803                                  					; won't return if error
 12804                                  aux2:					
 12805 00000322 AA                      		stosb
 12806 00000323 E2FA                    		loop	aux1		; if more characters, go around	again
 12807                                  exvec2:					
 12808 00000325 F8                      		clc			; all done, successful exit
 12809                                  auxin_retn:	; 18/12/2022
 12810 00000326 C3                      		retn
 12811                                  ; ---------------------------------------------------------------------------
 12812                                  
 12813                                  ;************************************************************************
 12814                                  ;*									*
 12815                                  ;*	auxin - call rom bios to read character from aux port		*
 12816                                  ;*		if error occurs, map the error and return one		*
 12817                                  ;*		level up to device driver exit code, setting		*
 12818                                  ;*		the number of bytes transferred appropriately		*
 12819                                  ;*									*
 12820                                  ;************************************************************************
 12821                                  
 12822                                  auxin:					
 12823 00000327 B402                    		mov	ah, 2		; auxfunc_receive
 12824 00000329 E83A00                  		call	auxop
 12825 0000032C F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
 12826                                  		;jnz	short arbad	; skip if any error bits set
 12827                                  		;retn
 12828                                  		; 25/06/2023 (BugFix)
 12829 0000032F 74F5                    		jz	short auxin_retn
 12830                                  ; ---------------------------------------------------------------------------
 12831                                  
 12832                                  arbad:					
 12833 00000331 58                      		pop	ax		; remove return	address	(near call)
 12834                                  		;xor	al, al
 12835                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
 12836                                  		; 11/08/2023
 12837 00000332 B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
 12838 00000334 E9A0FD                  		jmp	bc_err_cnt
 12839                                  
 12840                                  ; ---------------------------------------------------------------------------
 12841                                  
 12842                                  ;************************************************************************
 12843                                  ;*									*
 12844                                  ;*	aux_rdnd - non-destructive aux port read			*
 12845                                  ;*									*
 12846                                  ;************************************************************************
 12847                                  
 12848                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
 12849 00000337 E85D00                  		call	getbx
 12850 0000033A 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
 12851 0000033C 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
 12852 0000033E 7511                    		jnz	short auxdrx	; then return character
 12853 00000340 E82100                  		call	auxstat		; if not, get status of	aux device
 12854 00000343 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
 12855 00000346 740C                    		jz	short auxbus	; then device is busy (not ready)
 12856 00000348 A820                    		test	al, 20h		; flag_dsr - test data set ready
 12857 0000034A 7408                    		jz	short auxbus	; then device is busy (not ready)
 12858 0000034C E8D8FF                  		call	auxin		; else aux is ready, get character
 12859 0000034F 8807                    		mov	[bx], al
 12860                                  auxdrx:					
 12861 00000351 E99EFE                  		jmp	rdexit		; return busy status
 12862                                  ; ---------------------------------------------------------------------------
 12863                                  
 12864                                  auxbus:					
 12865 00000354 E970FE                  		jmp	z_bus_exit
 12866                                  ; ---------------------------------------------------------------------------
 12867                                  
 12868                                  ;************************************************************************
 12869                                  ;*									*
 12870                                  ;*	aux_wrst - return aux port write status				*
 12871                                  ;*									*
 12872                                  ;************************************************************************
 12873                                  
 12874                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
 12875 00000357 E80A00                  		call	auxstat		; get status of	aux in ax
 12876 0000035A A820                    		test	al, 20h		; test data set	ready
 12877 0000035C 74F6                    		jz	short auxbus	; then device is busy (not ready)
 12878 0000035E F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
 12879 00000361 74F1                    		jz	short auxbus	; then device is busy (not ready)
 12880                                  		; 12/12/2022
 12881                                  		; cf=0	; (test instruction resets cf)
 12882                                  		;clc
 12883 00000363 C3                      		retn
 12884                                  ; ---------------------------------------------------------------------------
 12885                                  
 12886                                  ;************************************************************************
 12887                                  ;*									*
 12888                                  ;*	auxstat - call rom bios to determine aux port status		*
 12889                                  ;*									*
 12890                                  ;*	exit:	ax = status						*
 12891                                  ;*		dx = [auxnum]						*
 12892                                  ;*									*
 12893                                  ;************************************************************************
 12894                                  
 12895                                  auxstat:				
 12896 00000364 B403                    		mov	ah, 3		; auxfunc_status
 12897                                  
 12898                                  		; fall into auxop
 12899                                  
 12900                                  ; =============== S U B	R O U T	I N E =======================================
 12901                                  
 12902                                  ;************************************************************************
 12903                                  ;*									*
 12904                                  ;*	auxop - perform rom-biox aux port interrupt			*
 12905                                  ;*									*
 12906                                  ;*	entry:	ah = int 14h function number				*
 12907                                  ;*	exit:	ax = results						*
 12908                                  ;*		dx = [auxnum]						*
 12909                                  ;*									*
 12910                                  ;************************************************************************
 12911                                  
 12912                                  auxop:		; proc near
 12913                                  		; 20/12/2023 - Retro DOS v5.0
 12914                                  		;mov	dx, [auxnum]	; ah=function code
 12915                                  		;			; 0=init, 1=send, 2=receive, 3=status
 12916                                  		;			; get port number
 12917                                  		;
 12918                                  		;int	14h		; SERIAL I/O - GET USART STATUS
 12919                                  		;			; DX = port number (0-3)
 12920                                  		;			; Return: AX = port status code
 12921                                  		; (PCDOS 7.1 IBMBIO.COM)
 12922 00000366 1E                      		push	ds
 12923 00000367 FF36[2100]              		push	word [auxnum]
 12924 0000036B 31D2                    		xor	dx, dx ; 0
 12925 0000036D 8EDA                    		mov	ds, dx
 12926 0000036F 5A                      		pop	dx
 12927 00000370 9C                      		pushf			; simulate INT 14h
 12928 00000371 FA                      		cli
 12929                                  		;call	dword ptr ds:50h
 12930 00000372 FF1E5000                		call	far [14h*4]	; INT 14h vector (14h*4 = 50h)
 12931 00000376 1F                      		pop	ds
 12932 00000377 C3                      		retn
 12933                                  
 12934                                  ; ---------------------------------------------------------------------------
 12935                                  
 12936                                  ;************************************************************************
 12937                                  ;*									*
 12938                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
 12939                                  ;*		   auxbuf [auxnum] to zero				*
 12940                                  ;*									*
 12941                                  ;*	cas - shouldn't this code call the rom bios input function	*
 12942                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
 12943                                  ;*	      pending serial input queue if there's a tsr like MODE	*
 12944                                  ;*	      which is providing interrupt-buffering of aux port?	*
 12945                                  ;*									*
 12946                                  ;************************************************************************
 12947                                  
 12948                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
 12949 00000378 E81C00                  		call	getbx		; flush	aux input buffer
 12950 0000037B C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
 12951                                  					; zero out buffer
 12952                                  		;clc			; all done, successful return
 12953                                  		; 12/12/2022
 12954                                  		; cf=0 ('add' instruction in 'getbx')
 12955 0000037E C3                      		retn
 12956                                  ; ---------------------------------------------------------------------------
 12957                                  
 12958                                  ;************************************************************************
 12959                                  ;*									*
 12960                                  ;*	aux_writ - write to aux device					*
 12961                                  ;*									*
 12962                                  ;************************************************************************
 12963                                  
 12964                                  aux_writ:				; 2C7h:374h = 70h:28E4h
 12965                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
 12966 0000037F E3A4                    		jcxz	exvec2		; 19/10/2022
 12967                                  aux_loop:				
 12968 00000381 268A05                  		mov	al, [es:di]	; get character	to be written
 12969                                  					; move di pointer to next character
 12970 00000384 47                      		inc	di
 12971 00000385 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
 12972 00000387 E8DCFF                  		call	auxop		; send character over aux port
 12973 0000038A F6C480                  		test	ah, 80h		; check	for error
 12974 0000038D 7405                    		jz	short awok	; then no error
 12975 0000038F B00A                    		mov	al, 10		; else indicate	write fault
 12976 00000391 E943FD                  		jmp	bc_err_cnt	; call error routines
 12977                                  ; ---------------------------------------------------------------------------
 12978                                  
 12979                                  awok:					
 12980 00000394 E2EB                    		loop	aux_loop	; if cx	is non-zero,
 12981                                  					; still	more character to print
 12982                                  		;clc			; all done, successful return
 12983                                  		; 12/12/2022
 12984                                  		; cf=0 (test instruction above)	
 12985 00000396 C3                      		retn
 12986                                  
 12987                                  ; =============== S U B	R O U T	I N E =======================================
 12988                                  
 12989                                  ;************************************************************************
 12990                                  ;*									*
 12991                                  ;*	getbx - return bx -> single byte input buffer for		*
 12992                                  ;*		selected aux port ([auxnum])				*
 12993                                  ;*									*
 12994                                  ;************************************************************************
 12995                                  
 12996                                  getbx:	
 12997 00000397 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
 12998                                  					; for selected aux port	([auxnum])
 12999                                  		;add	bx, offset auxbuf
 13000 0000039B 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
 13001                                  		; 12/12/2022
 13002                                  		; cf=0 (if [auxnum] is valid number) 
 13003 0000039F C3                      		retn
 13004                                  
 13005                                  ; ---------------------------------------------------------------------------
 13006                                  
 13007                                  ; 15/10/2022
 13008                                  
 13009                                  ;----------------------------------------------------------------
 13010                                  ;								:
 13011                                  ;		    clock device driver 			:
 13012                                  ;								:
 13013                                  ;								:
 13014                                  ;   this file contains the clock device driver. 		:
 13015                                  ;								:
 13016                                  ;   the routines in this files are:				:
 13017                                  ;								:
 13018                                  ;	routine 		function			:
 13019                                  ;	------- 		--------			:
 13020                                  ;	tim_writ		set the current time		:
 13021                                  ;	tim_read		read the current time		:
 13022                                  ;	time_to_ticks		convert time to corresponding	:
 13023                                  ;				  number of clock ticks 	:
 13024                                  ;								:
 13025                                  ; the clock ticks at the rate of:				:
 13026                                  ;								:
 13027                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
 13028                                  ; see each routine for information on the use.			:
 13029                                  ;								:
 13030                                  ;----------------------------------------------------------------
 13031                                  
 13032                                  ; convert time to ticks
 13033                                  ; input : time in cx and dx
 13034                                  ; ticks returned in cx:dx
 13035                                  
 13036                                  ;19/07/2019
 13037                                  ;09/03/2019
 13038                                  
 13039                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
 13040                                  
 13041                                  ; first convert from hour,min,sec,hund. to
 13042                                  ; total number of 100th of seconds
 13043                                  
 13044 000003A0 B03C                    		mov	al, 60
 13045 000003A2 F6E5                    		mul	ch		; hours	to minutes
 13046 000003A4 B500                    		mov	ch, 0
 13047 000003A6 01C8                    		add	ax, cx		; total	minutes
 13048 000003A8 B97017                  		mov	cx, 6000	; 60*100
 13049 000003AB 89D3                    		mov	bx, dx		; get out of the way of	the multiply
 13050 000003AD F7E1                    		mul	cx		; convert to 1/100 sec
 13051 000003AF 89C1                    		mov	cx, ax
 13052 000003B1 B064                    		mov	al, 100
 13053 000003B3 F6E7                    		mul	bh		; convert seconds to 1/100 sec
 13054 000003B5 01C1                    		add	cx, ax		; combine seconds with hours and min
 13055 000003B7 83D200                  		adc	dx, 0		; ripple carry
 13056 000003BA B700                    		mov	bh, 0
 13057 000003BC 01D9                    		add	cx, bx		; combine 1/100	sec
 13058 000003BE 83D200                  		adc	dx, 0
 13059                                  
 13060                                  	; dx:cx is time in 1/100 sec
 13061                                  
 13062 000003C1 92                      		xchg	ax, dx
 13063 000003C2 91                      		xchg	ax, cx		; now time is in cx:ax
 13064 000003C3 BB0BE9                  		mov	bx, 59659
 13065 000003C6 F7E3                    		mul	bx		; multiply low half
 13066 000003C8 87D1                    		xchg	dx, cx
 13067 000003CA 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
 13068 000003CB F7E3                    		mul	bx		; multiply high	half
 13069 000003CD 01C8                    		add	ax, cx		; combine overlapping products
 13070 000003CF 83D200                  		adc	dx, 0
 13071 000003D2 92                      		xchg	ax, dx		; ax:dx=time*59659
 13072 000003D3 BB0500                  		mov	bx, 5
 13073 000003D6 F6F3                    		div	bl		; divide high half by 5
 13074 000003D8 88C1                    		mov	cl, al
 13075 000003DA B500                    		mov	ch, 0
 13076 000003DC 88E0                    		mov	al, ah		; remainder of divide-by-5
 13077 000003DE 98                      		cbw
 13078 000003DF 92                      		xchg	ax, dx		; use it to extend low half
 13079 000003E0 F7F3                    		div	bx		; divide low half by 5
 13080 000003E2 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
 13081 000003E4 CB                      		retf			; far return
 13082                                  
 13083                                  ; ---------------------------------------------------------------------------
 13084                                  
 13085                                  ; 17/10/2022
 13086                                  ; 15/10/2022
 13087                                  
 13088                                  ;--------------------------------------------------------------------
 13089                                  ;
 13090                                  ; tim_writ sets the current time
 13091                                  ;
 13092                                  ; on entry es:[di] has the current time:
 13093                                  ;
 13094                                  ;	number of days since 1-1-80	(word)
 13095                                  ;	minutes (0-59)			(byte)
 13096                                  ;	hours (0-23)			(byte)
 13097                                  ;	hundredths of seconds (0-99)	(byte)
 13098                                  ;	seconds (0-59)			(byte)
 13099                                  ;
 13100                                  ; each number has been checked for the correct range.
 13101                                  ;
 13102                                  ;	NOTE: Any changes in this routine probably require corresponding
 13103                                  ;	changes in the version that is built with the power manager driver.
 13104                                  ;	See ptime.asm.
 13105                                  ;
 13106                                  ;--------------------------------------------------------------------
 13107                                  
 13108                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 13109                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
 13110                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
 13111 000003E5 268B05                  		mov	ax, [es:di]
 13112 000003E8 50                      		push	ax		; daycnt. we need to set this at the very
 13113                                  					; end to avoid tick windows.
 13114 000003E9 803E[8C04]00            		cmp	byte [havecmosclock], 0
 13115                                  		;cmp	ds:havecmosclock, 0
 13116 000003EE 7423                    		jz	short no_cmos_1
 13117 000003F0 268A4503                		mov	al, [es:di+3]	; near indirect	calls
 13118                                  					; get binary hours
 13119                                  					; convert to bcd
 13120                                  		;call	far [bintobcd]
 13121                                  		;;call	ds:bintobcd	; call far [bintobcd]
 13122                                  		; 08/08/2023
 13123 000003F4 E8E800                  		call	bintobcd
 13124 000003F7 88C5                    		mov	ch, al		; ch = bcd hours
 13125 000003F9 268A4502                		mov	al, [es:di+2]	; get binary minutes
 13126                                  		;call	far [bintobcd]
 13127                                  		;;call	ds:bintobcd	; convert to bcd
 13128 000003FD E8DF00                  		call	bintobcd
 13129 00000400 88C1                    		mov	cl, al		; cl = bcd minutes
 13130 00000402 268A4505                		mov	al, [es:di+5]	; get binary seconds
 13131                                  		;call	far [bintobcd]
 13132                                  		;;call	ds:bintobcd
 13133 00000406 E8D600                  		call	bintobcd
 13134                                  
 13135 00000409 88C6                    		mov	dh, al		; dh = bcd seconds
 13136 0000040B B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
 13137 0000040D FA                      		cli
 13138 0000040E B403                    		mov	ah, 3
 13139 00000410 CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
 13140                                  					; CH = hours in	BCD, CL	= minutes in BCD
 13141                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
 13142                                  					; Return: CMOS clock set
 13143 00000412 FB                      		sti
 13144                                  no_cmos_1:				
 13145 00000413 268B4D02                		mov	cx, [es:di+2]
 13146 00000417 268B5504                		mov	dx, [es:di+4]
 13147                                  		; 17/10/2022
 13148 0000041B FF1E[0606]              		call	far [ttticks]
 13149                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
 13150                                  					; convert time to ticks
 13151                                  					; cx:dx	now has	time in	ticks
 13152 0000041F FA                      		cli			; turn off timer
 13153 00000420 B401                    		mov	ah, 1
 13154 00000422 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
 13155                                  					; CX:DX	= clock	count
 13156                                  					; Return: time of day set
 13157                                  		;pop	ds:daycnt
 13158 00000424 8F06[8904]              		pop	word [daycnt]
 13159 00000428 FB                      		sti
 13160                                  		;cmp	ds:havecmosclock, 0
 13161 00000429 803E[8C04]00            		cmp	byte [havecmosclock], 0
 13162 0000042E 7409                    		jz	short no_cmos_2
 13163                                  
 13164                                  		; 08/08/2023
 13165                                  		;call	far [daycnttoday]
 13166                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
 13167                                  					; convert to bcd format
 13168 00000430 E80700                  		call	daycnttoday
 13169                                  
 13170 00000433 FA                      		cli
 13171 00000434 B405                    		mov	ah, 5
 13172 00000436 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
 13173                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
 13174                                  					; CH = century (19h or 20h)
 13175                                  					; Return: CMOS clock set
 13176 00000438 FB                      		sti
 13177                                  no_cmos_2:
 13178                                  		; 12/12/2022
 13179                                  		; cf=0
 13180                                  		;clc
 13181 00000439 C3                      		retn
 13182                                  
 13183                                  ; ---------------------------------------------------------------------------
 13184                                  
 13185                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 13186                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
 13187                                  %if 1 
 13188                                  
 13189                                  ; CMOS Clock setting support routines used by MSCLOCK.
 13190                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
 13191                                  
 13192                                  daycnttoday:	; proc near
 13193                                  
 13194                                  ; entry: [daycnt] = number of days since 1-1-80
 13195                                  ;
 13196                                  ; return: ch - century in bcd
 13197                                  ;	  cl - year in bcd
 13198                                  ;	  dh - month in bcd
 13199                                  ;	  dl - day in bcd
 13200                                  
 13201                                  		; 20/12/2023 - Retro DOS v5.0
 13202                                  
 13203                                  		; 08/08/2023 (ds:) (near proc)
 13204                                  		; 16/10/2022 (cs:) (far proc)		
 13205 0000043A FF36[8904]              		push	word [daycnt] ; save daycnt
 13206 0000043E 813E[8904]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
 13207                                  					; # days from 1-1-1980 to 1-1-2000
 13208 00000444 7308                    		jnb	short century20
 13209                                  		;mov	byte [base_century], 19
 13210                                  		;mov	byte [base_year], 80
 13211                                  		; 08/08/2023
 13212 00000446 C706[8D04]1350          		mov	word [base_century], 5013h
 13213 0000044C EB0C                    		jmp	short years
 13214                                  ; ----------------------------------------------------------------------------
 13215                                  		
 13216                                  century20:				
 13217                                  		;mov	byte [base_century], 20
 13218                                  		;mov	byte [base_year], 0
 13219                                  		; 08/08/2023
 13220 0000044E C706[8D04]1400          		mov	word [base_century], 20
 13221 00000454 812E[8904]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
 13222                                  					; adjust daycnt
 13223                                  years:					
 13224 0000045A 31D2                    		xor	dx, dx
 13225 0000045C A1[8904]                		mov	ax, [daycnt]
 13226 0000045F BBB505                  		mov	bx, 1461	; (366+365*3)
 13227                                  					; # of days in a Leap year block
 13228 00000462 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
 13229 00000464 8916[8904]              		mov	[daycnt], dx	; save daycnt left
 13230 00000468 B304                    		mov	bl, 4
 13231 0000046A F6E3                    		mul	bl		; AX = # of years. Less	than 100
 13232 0000046C 0006[8E04]              		add	[base_year], al ; So, ah = 0. Adjust year
 13233 00000470 FF06[8904]              		inc	word [daycnt]	; set daycnt to	1 base
 13234                                  		; 08/08/2023
 13235 00000474 BB6E01                  		mov	bx, 366
 13236 00000477 B90300                  		mov	cx, 3
 13237                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
 13238 0000047A 391E[8904]              		cmp	[daycnt], bx ; 366
 13239 0000047E 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
 13240 00000480 FE06[8E04]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
 13241                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
 13242 00000484 291E[8904]              		sub	[daycnt], bx ; 366 ; 08/08/2023
 13243                                  		;mov	cx, 3		; And next three years are normal
 13244                                  		; 08/08/2023
 13245 00000488 4B                      		dec	bx ; 365
 13246                                  regularyear:	; 20/12/2023
 13247                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
 13248 00000489 391E[8904]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
 13249 0000048D 760F                    		jbe	short yeardone	; {if (daycnt >	365)
 13250 0000048F FE06[8E04]              		inc	byte [base_year] ; { daycnt -=	365
 13251                                  		;sub	word [daycnt], 365 ; }
 13252 00000493 291E[8904]              		sub	[daycnt], bx ; 365 ; 08/08/2023
 13253 00000497 E2F0                    		loop	regularyear	; }
 13254                                  					;
 13255                                  					; should never fall through loop
 13256                                  leapyear:	
 13257 00000499 C606[9004]1D            		mov	byte [february], 29 ; 08/08/2023			
 13258                                  		;mov	byte [month_tab+1], 29 ; leap year.
 13259                                  					; change month table.
 13260                                  yeardone:				
 13261 0000049E 31DB                    		xor	bx, bx
 13262 000004A0 31D2                    		xor	dx, dx
 13263 000004A2 A1[8904]                		mov	ax, [daycnt]
 13264                                  		;mov	si, offset month_tab
 13265 000004A5 BE[8F04]                		mov	si, month_tab	; 19/10/2022
 13266                                  		;mov	cx, 12
 13267                                  		; 08/08/2023
 13268 000004A8 B10C                    		mov	cl, 12
 13269                                  months:					
 13270 000004AA FEC3                    		inc	bl
 13271                                  		; 08/08/2023
 13272 000004AC 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
 13273 000004AE 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
 13274                                  					; dh=0
 13275 000004B0 7605                    		jbe	short month_done
 13276 000004B2 46                      		inc	si		; next month
 13277 000004B3 29D0                    		sub	ax, dx		; adjust daycnt
 13278 000004B5 E2F3                    		loop	months		;
 13279                                  					; should never fall through loop
 13280                                  month_done:	
 13281 000004B7 C606[9004]1C            		mov	byte [february], 28 ; 08/08/2023
 13282                                  		;mov	byte [month_tab+1], 28
 13283                                  					; restore month table value
 13284 000004BC 88DA                    		mov	dl, bl
 13285 000004BE 8A36[8E04]              		mov	dh, [base_year]
 13286 000004C2 8A0E[8D04]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
 13287 000004C6 E81600                  		call	bintobcd	; convert "day"	to bcd
 13288                                  					; dl = bcd day,	al = month
 13289 000004C9 86D0                    		xchg	dl, al
 13290 000004CB E81100                  		call	bintobcd	; dh = bcd month, al = year
 13291 000004CE 86F0                    		xchg	dh, al
 13292 000004D0 E80C00                  		call	bintobcd	; cl = bcd year, al = century
 13293 000004D3 86C8                    		xchg	cl, al
 13294 000004D5 E80700                  		call	bintobcd	; ch = bcd century
 13295 000004D8 88C5                    		mov	ch, al
 13296 000004DA 8F06[8904]              		pop	word [daycnt] ; restore original value
 13297 000004DE C3                      		retn
 13298                                  
 13299                                  ;----------------------------------------------------------------------------
 13300                                  
 13301                                  bintobcd:	; proc near		; real time clock support
 13302                                  
 13303                                  ;convert a binary input in al (less than 63h or 99 decimal)
 13304                                  ;into a bcd value in al. ah destroyed.	
 13305                                  		
 13306 000004DF D40A                    		aam			; AH = AL/10, AL = AL MOD 10
 13307 000004E1 D510                    		aad     10h             ; db 0D5h,10h
 13308                                  					; AL = (AH*10H)+AL, AH = 0
 13309 000004E3 C3                      		retn
 13310                                  %endif
 13311                                  
 13312                                  ;----------------------------------------------------------------------------
 13313                                  
 13314                                  ; 15/10/2022
 13315                                  
 13316                                  ;----------------------------------------------------------------------------
 13317                                  ; gettime reads date and time
 13318                                  ; and returns the following information:
 13319                                  ;
 13320                                  ;	es:[di]  =count of days since 1-1-80
 13321                                  ;	es:[di+2]=hours
 13322                                  ;	es:[di+3]=minutes
 13323                                  ;	es:[di+4]=seconds
 13324                                  ;	es:[di+5]=hundredths of seconds
 13325                                  ;
 13326                                  ;	NOTE: Any changes in this routine probably require corresponding
 13327                                  ;	changes in the version that is built with the power manager driver.
 13328                                  ;	See ptime.asm.
 13329                                  ;----------------------------------------------------------------------------
 13330                                  
 13331                                  tim_read:				; 2C7h:435h = 70h:29A5h
 13332 000004E4 E84A00                  		call	GetTickCnt
 13333 000004E7 8B36[8904]              		mov	si, [daycnt]
 13334                                  
 13335                                  ; we now need to convert the time in tick to the time in 100th of
 13336                                  ; seconds. the relation between tick and seconds is:
 13337                                  ;
 13338                                  ;		 65,536 seconds
 13339                                  ;	       ----------------
 13340                                  ;		1,193,180 tick
 13341                                  ;
 13342                                  ; to get to 100th of second we need to multiply by 100. the equation is:
 13343                                  ;
 13344                                  ;	ticks from clock  * 65,536 * 100
 13345                                  ;      --------------------------------- = time in 100th of seconds
 13346                                  ;		1,193,180
 13347                                  ;
 13348                                  ; fortunately this formula simplifies to:
 13349                                  ;
 13350                                  ;	ticks from clock * 5 * 65,536
 13351                                  ;      --------------------------------- = time in 100th of seconds
 13352                                  ;		59,659
 13353                                  ;
 13354                                  ; the calculation is done by first multipling tick by 5. next we divide by
 13355                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
 13356                                  ; my 16 bits to the left.
 13357                                  ;
 13358                                  ; start with ticks in cx:dx
 13359                                  ; multiply by 5
 13360                                  
 13361 000004EB 89C8                    		mov	ax, cx
 13362 000004ED 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
 13363                                  					; multiply by 5
 13364 000004EF D1E2                    		shl	dx, 1
 13365 000004F1 D1D1                    		rcl	cx, 1		; times	2
 13366 000004F3 D1E2                    		shl	dx, 1
 13367 000004F5 D1D1                    		rcl	cx, 1		; times	4
 13368 000004F7 01DA                    		add	dx, bx
 13369 000004F9 11C8                    		adc	ax, cx		; times	5
 13370 000004FB 92                      		xchg	ax, dx
 13371                                  
 13372                                  ; now have ticks * 5 in	dx:ax
 13373                                  ; we now need to multiply by 65536 and divide by 59659 d.
 13374                                  
 13375 000004FC B90BE9                  		mov	cx, 59659	; get divisor
 13376 000004FF F7F1                    		div	cx		; dx now has remainder
 13377                                  					; ax has high word of final quotient
 13378                                  
 13379                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 13380                                  		;mov	bx, ax		; put high word	in safe	place
 13381 00000501 93                      		xchg	bx, ax
 13382 00000502 31C0                    		xor	ax, ax		; this is the multiply by 65536
 13383 00000504 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
 13384                                  
 13385                                  ; rounding based on the	remainder may be added here
 13386                                  ; the result in	bx:ax is time in 1/100 second.
 13387                                  
 13388 00000506 89DA                    		mov	dx, bx		
 13389 00000508 B9C800                  		mov	cx, 200		; extract 1/100's
 13390                                  
 13391                                  ; division by 200 is necessary to ensure no overflow--max result
 13392                                  ; is number of seconds in a day/2 = 43200.
 13393                                  
 13394 0000050B F7F1                    		div	cx
 13395 0000050D 80FA64                  		cmp	dl, 100		; remainder over 100?
 13396 00000510 7203                    		jb	short noadj
 13397 00000512 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
 13398                                  noadj:					
 13399 00000515 F5                      		cmc			; if we	subtracted 100,	carry is now set
 13400 00000516 88D3                    		mov	bl, dl		; save 1/100's
 13401                                  
 13402                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
 13403                                  ; by two, shifting a one in if the remainder had exceeded 100.
 13404                                  
 13405 00000518 D1D0                    		rcl	ax, 1		
 13406 0000051A B200                    		mov	dl, 0
 13407 0000051C D1D2                    		rcl	dx, 1
 13408                                  		;mov	cx, 60		; divide out seconds
 13409                                  		; 20/12/2023
 13410 0000051E B13C                    		mov	cl, 60
 13411 00000520 F7F1                    		div	cx
 13412 00000522 88D7                    		mov	bh, dl		; save the seconds
 13413 00000524 F6F1                    		div	cl		; break	into hours and minutes
 13414 00000526 86C4                    		xchg	al, ah
 13415                                  
 13416                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
 13417                                  
 13418                                  		; 08/08/2023
 13419                                  		;push	ax
 13420                                  		;mov	ax, si		; daycnt
 13421 00000528 96                      		xchg	ax, si
 13422 00000529 AB                      		stosw
 13423                                  		;pop	ax
 13424 0000052A 96                      		xchg	ax, si		; al = hours, ah = minutes
 13425 0000052B AB                      		stosw
 13426 0000052C 89D8                    		mov	ax, bx
 13427 0000052E AB                      		stosw
 13428 0000052F F8                      		clc			; [es:di] = count of days since 1-1-80
 13429                                  					;   [es:di+2] = hours
 13430                                  					;   [es:di+3] = minutes
 13431                                  					;   [es:di+4] = seconds
 13432                                  					;   [es:di+5] = hundredths of seconds
 13433 00000530 C3                      		retn
 13434                                  
 13435                                  ; =============== S U B	R O U T	I N E =======================================
 13436                                  
 13437                                  ; 15/10/2022
 13438                                  
 13439                                  ;----------------------------------------------------------------------------
 13440                                  ;
 13441                                  ; procedure : GetTickCnt
 13442                                  ;
 13443                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
 13444                                  ;		of rollover [except when power management driver is in use]. 
 13445                                  ;		Uses the following logic for updating Daycnt
 13446                                  ;
 13447                                  ;		if ( rollover ) {
 13448                                  ;			if ( t_switch )
 13449                                  ;				daycnt++ ;
 13450                                  ;			else
 13451                                  ;				daycnt += rollover ;
 13452                                  ;		}
 13453                                  ;
 13454                                  ; USES : AX
 13455                                  ;
 13456                                  ; RETURNS : CX:DX - tick count
 13457                                  ; MODIFIES : daycnt
 13458                                  ;
 13459                                  ;----------------------------------------------------------------------------
 13460                                  
 13461                                  		; 17/10/2022
 13462                                  GetTickCnt:
 13463 00000531 30E4                    		xor	ah, ah
 13464 00000533 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
 13465                                  					; Return: CX:DX	= clock	count
 13466                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
 13467                                  					; midnight
 13468                                  					; Otherwise, AL	> 0
 13469                                  		; 20/12/2023
 13470 00000535 30E4                    		xor	ah, ah
 13471 00000537 3826[8B04]              		cmp	byte [t_switch], ah ; 0
 13472                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
 13473 0000053B 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
 13474                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
 13475                                  					; and not flag
 13476 0000053D 0106[8904]              		add	[daycnt], ax
 13477 00000541 C3                      		retn
 13478                                  ; ---------------------------------------------------------------------------
 13479                                  
 13480                                  inc_case:
 13481 00000542 08C0                    		or	al, al
 13482 00000544 7404                    		jz	short no_rollover
 13483 00000546 FF06[8904]              		inc	word [daycnt]
 13484                                  no_rollover:
 13485 0000054A C3                      		retn
 13486                                  
 13487                                  ; ---------------------------------------------------------------------------
 13488                                  ; ---------------------------------------------------------------------------
 13489                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13490                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0556h
 13491                                  
 13492                                  %if 1
 13493                                  
 13494 0000054B 4641543132202020        fat_12_id:	db 'FAT12   '
 13495 00000553 4641543136202020        fat_16_id:	db 'FAT16   '
 13496 0000055B 4641543332202020        fat_32_id:	db 'FAT32   '
 13497 00000563 4E4F204E414D452020-     nul_vid:	db 'NO NAME    '
 13497 0000056C 2020               
 13498                                  
 13499                                  %endif
 13500                                  
 13501                                  ;----------------------------------------------------------------------------
 13502                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
 13503                                  ;----------------------------------------------------------------------------
 13504                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13505                                  ; 09/03/2019 - Retro DOS v4.0
 13506                                  
 13507                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
 13508                                  ; 26/05/2018 - Retro DOS v3.0
 13509                                  ; 23/03/2018 - Retro DOS v2.0
 13510                                  
 13511                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
 13512                                  
 13513                                  ;struc BPB_TYPE
 13514                                  ;.SECSIZE:	resw 1
 13515                                  ;.SECALL:	resb 1
 13516                                  ;.RESNUM:	resw 1
 13517                                  ;.FATNUM:	resb 1
 13518                                  ;.DIRNUM:	resw 1
 13519                                  ;.SECNUM:	resw 1
 13520                                  ;.FATID:	resb 1
 13521                                  ;.FATSIZE:	resw 1
 13522                                  ;.SLIM:		resw 1
 13523                                  ;.HLIM:		resw 1
 13524                                  ;.HIDDEN:	resw 1
 13525                                  ;.size:
 13526                                  ;endstruc
 13527                                  
 13528                                  ;-----------------------------------------------------------------
 13529                                  ;	disk interface routines
 13530                                  ;-----------------------------------------------------------------
 13531                                  
 13532                                  ; device attribute bits:
 13533                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
 13534                                  
 13535                                  ;MAXERR		equ	5
 13536                                  ;MAX_HD_FMT_ERR	equ	2
 13537                                  
 13538                                  ;LSTDRV	equ 504h
 13539                                  
 13540                                  ; some floppies do not have changeline. as a result, media-check would
 13541                                  ; normally return i-don't-know, the dos would continually reread the fat and
 13542                                  ; discard cached data. we optimize this by implementing a logical door-latch:
 13543                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
 13544                                  ; the time of the last successful disk operation and compare it with the current
 13545                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
 13546                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
 13547                                  ; since we cannot trust the timer to be always available, we record the number 
 13548                                  ; of media checks that have occurred when no apparent time has elapsed. while
 13549                                  ; this number is < a given threshold, we say no change. when it exceeds that
 13550                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
 13551                                  ; the time of last successful access, if we see that time has passed too,
 13552                                  ; we reset the counter.
 13553                                  
 13554                                  accessmax	equ	5
 13555                                  
 13556                                  ; due to various bogosities, we need to continually adjust what the head
 13557                                  ; settle time is.  the following algorithm is used:
 13558                                  ;
 13559                                  ;   get the current head settle value.
 13560                                  ;   if it is 0, then
 13561                                  ;	set slow = 15
 13562                                  ;   else
 13563                                  ;	set slow = value
 13564                                  ;   ...
 13565                                  ;*********************************************
 13566                                  ;************ old algorithm ******************
 13567                                  ;*   if we are seeking and writing then
 13568                                  ;*	 use slow
 13569                                  ;*   else
 13570                                  ;*	 use fast
 13571                                  ;*********************************************
 13572                                  ;*********** ibm's requested logic ***********
 13573                                  ;   if we are seeking and writing and not on an at then
 13574                                  ;	use slow
 13575                                  ;   else
 13576                                  ;	use fast
 13577                                  ;   ...
 13578                                  ;   restore current head settle value
 13579                                  ;
 13580                                  ;
 13581                                  ;---------------------------------------
 13582                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
 13583                                  					; it on after handling config.sys file as a
 13584                                  					; default value, if multrk_flag = multrk_off1.
 13585                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
 13586                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
 13587                                  
 13588                                  ; close data segment, open Bios_Code segment
 13589                                  
 13590                                  ; 15/10/2022
 13591                                  
 13592                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
 13593                                  
 13594                                  ;-----------------------------------------------------------------
 13595                                  ;	command jump table
 13596                                  ;-----------------------------------------------------------------
 13597                                  
 13598 0000056E 00                      		db 0
 13599                                  
 13600                                  ; 11/12/2022
 13601                                  %if 0
 13602                                  
 13603                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
 13604                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
 13605                                  		dw 1742h		; dsk_init
 13606                                  		dw 4EBh			; media_chk
 13607                                  		dw 592h			; get_bpb
 13608                                  		dw 0D5h			; bc_cmderr
 13609                                  		dw 857h			; dsk_read
 13610                                  		dw 83Dh			; x_bus_exit
 13611                                  		dw 558h			; ret_carry_clear
 13612                                  		dw 558h			; ret_carry_clear
 13613                                  		dw 849h			; dsk_writ
 13614                                  		dw 841h			; dsk_writv
 13615                                  		dw 558h			; ret_carry_clear
 13616                                  		dw 558h			; ret_carry_clear
 13617                                  		dw 0D5h			; bc_cmderr
 13618                                  		dw 80Ah			; dsk_open
 13619                                  		dw 81Ah			; dsk_close
 13620                                  		dw 831h			; dsk_rem
 13621                                  		dw 558h			; ret_carry_clear
 13622                                  		dw 558h			; ret_carry_clear
 13623                                  		dw 558h			; ret_carry_clear
 13624                                  		dw 0C6Bh		; do_generic_ioctl
 13625                                  		dw 558h			; ret_carry_clear
 13626                                  		dw 558h			; ret_carry_clear
 13627                                  		dw 558h			; ret_carry_clear
 13628                                  		dw 1124h		; ioctl_getown
 13629                                  		dw 1142h		; ioctl_setown
 13630                                  		dw 129Ah		; ioctl_support_query
 13631                                  
 13632                                  ;dtbl_siz equ $-dsktbl
 13633                                  
 13634                                  %endif
 13635                                  
 13636                                  ; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13637                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0579h		
 13638                                  
 13639                                  		; 21/12/2023 - Retro DOS v5.0
 13640                                  		; 11/12/2022
 13641 0000056F 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
 13642 00000570 [4A1A]                  		dw dsk_init
 13643 00000572 [B805]                  		dw media_chk
 13644 00000574 [5706]                  		dw get_bpb
 13645                                  		;dw bc_cmderr
 13646 00000576 [4A0E]                  		dw ioctl_input ; PCDOS 7 ; 21/12/2023
 13647 00000578 [7209]                  		dw dsk_read
 13648 0000057A [5809]                  		dw x_bus_exit
 13649 0000057C [2206]                  		dw ret_carry_clear
 13650 0000057E [2206]                  		dw ret_carry_clear
 13651 00000580 [6409]                  		dw dsk_writ
 13652 00000582 [5C09]                  		dw dsk_writv
 13653 00000584 [2206]                  		dw ret_carry_clear
 13654 00000586 [2206]                  		dw ret_carry_clear
 13655                                  		;dw bc_cmderr
 13656 00000588 [F70D]                  		dw ioctl_output ; PCDOS 7 ; 21/12/2023
 13657 0000058A [2909]                  		dw dsk_open
 13658 0000058C [3809]                  		dw dsk_close
 13659 0000058E [4E09]                  		dw dsk_rem
 13660 00000590 [2206]                  		dw ret_carry_clear
 13661 00000592 [2206]                  		dw ret_carry_clear
 13662 00000594 [2206]                  		dw ret_carry_clear
 13663 00000596 [CC0E]                  		dw do_generic_ioctl
 13664 00000598 [2206]                  		dw ret_carry_clear
 13665 0000059A [2206]                  		dw ret_carry_clear
 13666 0000059C [2206]                  		dw ret_carry_clear
 13667 0000059E [A713]                  		dw ioctl_getown
 13668 000005A0 [C413]                  		dw ioctl_setown
 13669 000005A2 [1C15]                  		dw ioctl_support_query
 13670                                  
 13671                                  dtbl_siz equ $-dsktbl
 13672                                  
 13673                                  ; =============== S U B	R O U T	I N E =======================================
 13674                                  
 13675                                  ; ---------------------------------------------------------------------------
 13676                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
 13677                                  ; the one that belongs to the drive specified. carry is set if none exists
 13678                                  ; for the drive. Pointer is returned in es:[di]
 13679                                  ;
 13680                                  ;  AL contains the logical drive number.
 13681                                  ; ---------------------------------------------------------------------------
 13682                                  
 13683                                  SetDrive:
 13684                                  		;les	di, dword ptr ds:start_bds ; Point es:di to first bds
 13685 000005A4 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
 13686                                  X_Scan_Loop:
 13687 000005A8 26384505                		cmp	[es:di+5], al	
 13688 000005AC 7409                    		jz	short X_SetDrv
 13689 000005AE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
 13690 000005B1 83FFFF                  		cmp	di, 0FFFFh
 13691 000005B4 75F2                    		jnz	short X_Scan_Loop
 13692 000005B6 F9                      		stc
 13693                                  X_SetDrv:
 13694 000005B7 C3                      		retn
 13695                                  
 13696                                  ; ---------------------------------------------------------------------------
 13697                                  
 13698                                  ; 15/10/2022
 13699                                  
 13700                                  	; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13701                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05C2h
 13702                                  
 13703                                  ; ---------------------------------------------------------------------
 13704                                  ; if id is f9, have a 96tpi disk else
 13705                                  ; if bit 2 is 0 then media is not removable and could not have changed
 13706                                  ;  otherwise if within 2 secs of last disk operation media could not
 13707                                  ;    have changed, otherwise dont know if media has changed
 13708                                  ; ---------------------------------------------------------------------
 13709                                  
 13710                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
 13711 000005B8 E8E9FF                  		call	SetDrive
 13712 000005BB BE0100                  		mov	si, 1
 13713                                  		; 21/12/2023
 13714 000005BE 26F6454001              		test	byte [es:di+40h], 1
 13715                                  		;test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
 13716                                  					; fchanged_by_format
 13717 000005C3 7415                    		jz	short WeAreNotFakingIt
 13718                                  		; 21/12/2023
 13719 000005C5 26806540FE              		and	byte [es:di+40h], 0FEh
 13720                                  		; 12/12/2022
 13721                                  		;and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
 13722                                  		;;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
 13723                                  					; ~fchanged_by_format ;	reset flag
 13724 000005CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 13725                                  					; Ensure that we ask the rom if media has changed
 13726                                  		; 21/12/2023
 13727 000005CF 26F6453F01              		test	byte [es:di+3Fh], 1
 13728                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13729                                  					; fnon_removable
 13730 000005D4 740B                    		jz	short wehaveafloppy
 13731                                  		;mov	si, 0FFFFh	; Indicate media changed
 13732                                  		; 11/08/2023
 13733 000005D6 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
 13734 000005D8 EB2B                    		jmp	short Media_Done ; Media_Done
 13735                                  ; ---------------------------------------------------------------------------
 13736                                  
 13737                                  WeAreNotFakingIt:
 13738                                  		; 21/12/2023
 13739 000005DA 26F6453F01              		test	byte [es:di+3Fh], 1
 13740                                  		;test	byte [es:di+BDS.flags], fnon_removable			
 13741                                  		;test	byte [es:di+23h], 1
 13742 000005DF 7524                    		jnz	short Media_Done
 13743                                  wehaveafloppy:
 13744                                  		;xor	si, si ; 0	; Presume "I don't know"
 13745                                  		; 11/08/2023
 13746 000005E1 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
 13747                                  
 13748                                  		; If we have a floppy with changeline support, we ask the ROM
 13749                                  		; to determine if media has changed. We do not perform the
 13750                                  		; 2 second check for these drives.
 13751                                  
 13752 000005E2 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
 13753 000005E7 740A                    		jz	short mChk_NoChangeLine	; Brif not
 13754 000005E9 E83615                  		call	mediacheck	;  Call	into removable routine
 13755 000005EC 7236                    		jb	short err_exitj
 13756 000005EE E89A16                  		call	haschange
 13757 000005F1 7512                    		jnz	short Media_Done
 13758                                  mChk_NoChangeLine:
 13759                                  		; If we come here, we have a floppy with no changeline support
 13760                                  			
 13761 000005F3 BE0100                  		mov	si, 1		; Presume no change
 13762 000005F6 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
 13763 000005F9 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
 13764                                  					; Is drive of last access the same?
 13765 000005FD 7505                    		jnz	short Media_Unk	; No, then "i don't know"
 13766 000005FF E82800                  		call	Check_Time_Of_Access
 13767 00000602 EB01                    		jmp	short Media_Done
 13768                                  ; ---------------------------------------------------------------------------
 13769                                  
 13770                                  Media_Unk:
 13771 00000604 4E                      		dec	si		; 0 ; Return "I don't know"
 13772                                  
 13773                                  		; SI now contains the correct value for media change.
 13774                                  		; Clean up the left overs
 13775                                  Media_Done:
 13776                                  		; 19/10/2022
 13777 00000605 06                      		push	es
 13778 00000606 C41E[1200]              		les	bx, [ptrsav]
 13779 0000060A 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
 13780 0000060E 07                      		pop	es
 13781 0000060F 09F6                    		or	si, si
 13782 00000611 790F                    		jns	short ret_carry_clear ;	volidok
 13783 00000613 803E[7700]00            		cmp	byte [fhave96], 0
 13784 00000618 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
 13785 0000061A E80016                  		call	media_set_vid
 13786                                  mChk1_NoChangeLine:
 13787 0000061D C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 13788                                  					; Make sure we ask rom for media check
 13789                                  ret_carry_clear:			
 13790 00000622 F8                      		clc			; volidok
 13791 00000623 C3                      		retn
 13792                                  ; ---------------------------------------------------------------------------
 13793                                  
 13794                                  err_exitj:
 13795 00000624 E88207                  		call	maperror	; guaranteed to	set carry
 13796                                  ret81:					
 13797 00000627 B481                    		mov	ah, 81h		; return error status
 13798 00000629 C3                      		retn			; return with carry set
 13799                                  
 13800                                  ; =============== S U B	R O U T	I N E =======================================
 13801                                  
 13802                                  ; ---------------------------------------------------------------------------
 13803                                  ; perform a check on the time passed since the last access for this physical
 13804                                  ; drive.
 13805                                  ; we are accessing the same drive. if the time of last successful access was
 13806                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
 13807                                  ; returns in si:
 13808                                  ;	0 - if time of last access was >= 2 seconds
 13809                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
 13810                                  ; registers affected ax,cx,dx, flags.
 13811                                  ;
 13812                                  ;	assume es:di -> bds, ds->Bios_Data
 13813                                  ; ---------------------------------------------------------------------------
 13814                                  
 13815                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 13816                                  		; 19/10/2022
 13817                                  Check_Time_Of_Access:
 13818 0000062A BE0100                  		mov	si, 1		; presume no change.
 13819 0000062D E801FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
 13820                                  		; 21/12/2023
 13821 00000630 268B4579                		mov	ax, [es:di+79h]
 13822                                  		;mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
 13823                                  					; get stored time
 13824 00000634 29C2                    		sub	dx, ax
 13825                                  		; 21/12/2023
 13826 00000636 268B457B                		mov	ax, [es:di+7Bh]
 13827                                  		;mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
 13828 0000063A 19C1                    		sbb	cx, ax
 13829                                  		; 11/08/2023
 13830                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
 13831                                  		;mov	al, [accesscount]
 13832 0000063C 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
 13833 0000063E 09D2                    		or	dx, dx		; time must pass
 13834 00000640 750C                    		jnz	short timepassed ; yes, examine max value
 13835                                  		; 11/08/2023
 13836                                  		;inc	al
 13837                                  		;cmp	al, 5
 13838                                  		;;inc	byte [accesscount]
 13839                                  		;;cmp	byte [accesscount], 5
 13840                                  		;			; if count is less than threshold, ok
 13841                                  		;jb	short timecheck_ret
 13842                                  		;;dec	byte [accesscount] ; don't let the count wrap
 13843                                  		; 11/08/2023
 13844                                  		;dec	al
 13845                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
 13846                                  		; 11/08/2023
 13847 00000642 803E[1D01]04            		cmp	byte [accesscount], 4
 13848 00000647 730A                    		jnb	short timecheck_unk
 13849 00000649 FE06[1D01]              		inc	byte [accesscount]
 13850 0000064D C3                      		retn
 13851                                  
 13852                                  ; ---------------------------------------------------------------------------
 13853                                  
 13854                                  timepassed:
 13855 0000064E 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
 13856                                  					; min elapsed time? (2 seconds)
 13857 00000651 7601                    		jbe	short timecheck_ret ; yes, presume no change
 13858                                  
 13859                                  		; everything indicates that we do not know what has happened.
 13860                                  timecheck_unk:
 13861 00000653 4E                      		dec	si		; presume i don't know
 13862                                  timecheck_ret:
 13863                                  		; 11/08/2023
 13864                                  		;mov	[accesscount], al
 13865 00000654 C3                      		retn
 13866                                  
 13867                                  ; ---------------------------------------------------------------------------
 13868                                  ; 15/10/2022
 13869                                  Err_Exitj2:
 13870 00000655 EBCD                    		jmp	short err_exitj
 13871                                  
 13872                                  ; ---------------------------------------------------------------------------
 13873                                  
 13874                                  ; 15/10/2022
 13875                                  
 13876                                  ; ==========================================================================
 13877                                  ; Build a valid bpb for the disk in the drive.
 13878                                  ; ==========================================================================
 13879                                  
 13880                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 13881                                  		; 19/10/2022
 13882                                  get_bpb:				; 2C7h:592h = 70h:2B02h
 13883 00000657 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
 13884 0000065A E847FF                  		call	SetDrive	; get the correct bds for the drive
 13885                                  		; 21/12/2023
 13886 0000065D 26F6453F01              		test	byte [es:di+3Fh], 1
 13887                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13888                                  					; fnon_removable
 13889 00000662 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
 13890                                  
 13891                                  		; let's set the default value for volid,vol_serial,
 13892                                  		; filesys_id in bds table
 13893                                  
 13894 00000664 E83600                  		call	clear_ids
 13895                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
 13896 00000667 C606[9B04]01            		mov	byte [set_id_flag], 1
 13897 0000066C E86700                  		call	GetBp		; build	a bpb if necessary
 13898 0000066F 72B6                    		jb	short ret81
 13899                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
 13900 00000671 803E[9B04]02            		cmp	byte [set_id_flag], 2
 13901                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
 13902 00000676 C606[9B04]00            		mov	byte [set_id_flag], 0
 13903 0000067B 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
 13904                                  					; otherwise, conventional boot record
 13905                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
 13906 0000067D 803E[7700]00            		cmp	byte [fhave96], 0
 13907 00000682 7403                    		jz	short already_gotbpb ; brif not
 13908 00000684 E80A16                  		call	set_volume_id
 13909                                  already_gotbpb:
 13910 00000687 83C706                  		add	di, 6		; BDS.BPB
 13911                                  					; return the bpb from the current bds
 13912                                  
 13913                                  ;		fall into setptrsav, es:di -> result
 13914                                  
 13915                                  ; ---------------------------------------------------------------------------
 13916                                  
 13917                                  ; 15/10/2022
 13918                                  
 13919                                  ; ==========================================================================
 13920                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
 13921                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
 13922                                  ;Note that this works in most cases because most pointers are in Bios_Data.
 13923                                  ;It fails, for instance, when we install an external drive using driver.sys
 13924                                  ;because then the BDS segment is no longer Bios_Data. 
 13925                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
 13926                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
 13927                                  ;restored before returning to the caller.
 13928                                  ; ==========================================================================
 13929                                  
 13930                                  ; 21/12/2023
 13931                                  %if 0
 13932                                  		; 19/10/2022
 13933                                  SetPtrSav:	; return point for dsk_init
 13934                                  		mov	cx, es		; save es
 13935                                  		;les	bx, ds:ptrsav
 13936                                  		les	bx, [ptrsav]
 13937                                  		mov	[es:bx+0Dh], ah	; [es:bx+media]
 13938                                  		mov	[es:bx+12h], di	; [es:bx+count]
 13939                                  		mov	[es:bx+14h], cx	; [es:bx+count+2]
 13940                                  		clc
 13941                                  		retn
 13942                                  %endif
 13943                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13944                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0698h
 13945                                  SetPtrSav:	
 13946                                  		; return point for dsk_init
 13947 0000068A 1E                      		push	ds
 13948                                  		;lds	bx, ds:ptrsav
 13949 0000068B C51E[1200]              		lds	bx, [ptrsav]
 13950 0000068F 88670D                  		mov	[bx+0Dh], ah	; [bx+media]
 13951 00000692 897F12                  		mov	[bx+12h], di	; [bx+count]
 13952 00000695 8C4714                  		mov	[bx+14h], es	; [bx+count+2]
 13953 00000698 1E                      		push	ds
 13954 00000699 07                      		pop	es
 13955 0000069A 1F                      		pop	ds
 13956 0000069B F8                      		clc
 13957 0000069C C3                      		retn
 13958                                  
 13959                                  ; =============== S U B	R O U T	I N E =======================================
 13960                                  
 13961                                  ; 15/10/2022
 13962                                  
 13963                                  ; -----------------------------------------------------
 13964                                  ; clear ids in bds table. only applied for floppies.
 13965                                  ;input:  es:di -> bds table
 13966                                  ;	assumes ds: -> Bios_Data
 13967                                  ;output: volid set to "NO NAME    "
 13968                                  ;	 vol_serial set to 0.
 13969                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
 13970                                  ;	   depending on the flag fatsize in bds.
 13971                                  ;
 13972                                  ;	trashes si, cx
 13973                                  ; -----------------------------------------------------
 13974                                  
 13975                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
 13976                                  ;size_of_EXT_SYSTEM_ID equ 8
 13977                                  
 13978                                  ; 11/09/2023
 13979                                  ; 14/08/2023
 13980                                  ;BDS.fatsiz equ 1Fh
 13981                                  ; 21/12/2023
 13982                                  ;BDS.fatsiz equ 59
 13983                                  
 13984                                  		; 22/12/2023
 13985                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13986                                  clear_ids:
 13987                                  		;mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
 13988                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM BugFix)
 13989 0000069D 268A5D3B                		mov	bl, [es:di+3Bh] ; mov bl,[es:di+BDS.fatsiz]; *+
 13990                                  clear_ids_x:
 13991                                  		; 21/12/2023 
 13992                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06ABh)
 13993                                  		; 11/09/2023		
 13994                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
 13995 000006A1 57                      		push	di
 13996 000006A2 31C9                    		xor	cx, cx		; no serial number
 13997                                  		; 21/12/2023
 13998 000006A4 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 13999 000006A9 26898D8B00              		mov	[es:di+8Bh], cx	; [es:di+BDS.vol_serial+2]
 14000                                  		;mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 14001                                  		;mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 14002                                  
 14003                                  		; BUGBUG - there's a lot in common here and with
 14004                                  		; mov_media_ids.. see if we can save some space by
 14005                                  		; merging them... jgl
 14006                                  
 14007                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 14008                                  		; 10/12/2022
 14009 000006AE B10B                    		mov	cl, 11 ; cx = 11
 14010                                  
 14011                                  		;;mov	si, offset vol_no_name ; "NO NAME    "
 14012                                  		;mov	si, vol_no_name	; 19/10/2022
 14013                                  		; 22/12/2023
 14014                                  		;mov	si, offset nul_vid ; "NO NAME    "
 14015 000006B0 BE[6305]                		mov	si, nul_vid
 14016                                  
 14017                                  		; 21/12/2023
 14018 000006B3 83C77D                  		add	di, 125
 14019                                  		;add	di, 75		; BDS.volid
 14020                                  		
 14021                                  		;rep movsb
 14022                                  		; 21/12/2023
 14023                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; cs rep movsb
 14024                                  		; 26/12/2023
 14025                                  		;cs	; vol_no_name is in BIOSCODE segment
 14026                                  		;rep movsb
 14027 000006B6 F3                      		rep
 14028 000006B7 2E                      		cs
 14029 000006B8 A4                      		movsb
 14030                                  
 14031                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
 14032                                  		;;test	byte [es:di+BDS.fatsiz], fbig
 14033                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
 14034                                  		;test	byte [es:di+1Fh], 40h
 14035                                  		; 21/12/2023 - Retro DOS v5.0
 14036                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h)
 14037                                  		;test	byte [es:di+59], 20h 
 14038                                  			; (here, es:di points to the BDS offset +136)
 14039                                  			; purpose: test byte [es:di+BDS.fatsiz], fbigbig
 14040                                  			; applied: test byte [es:BDS.fatsiz+136], fbigbig -BUG!-
 14041                                  
 14042                                  			; (PCDOS 7.1 BUG note: 26/06/2023 - Erdogan Tan)
 14043                                  			;; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
 14044                                  			; Microsoft/IBM code has a bug here because the BDS's
 14045                                  			; .volid and .filesys_id fields will be reset
 14046                                  			; (to their default text) according to 'BDS.fatsiz' flags
 14047                                  			; at the BDS offset 59 but current (this) code checks flags
 14048                                  			; at ES:DI+59 while DI points the BDS offset 136!? ; (PCDOS 7.1)
 14049                                  			;; at the BDS offset 31 but current (this) code checks flags
 14050                                  			;; at ES:DI+31 while DI points the BDS offset 86!? ; (MSDOS 6.22)
 14051                                  			;
 14052                                  			; Correct Code:
 14053                                  			; ;test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig  ; (PCDOS 7.1)	
 14054                                  			; ;;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig  ; (MSDOS 6.22)
 14055                                  			; 11/09/2023
 14056                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
 14057                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
 14058                                  			;
 14059                                  			; Same BUG is existing in MSDOS 6.22 IO.SYS - BIOSCODE:05EFh
 14060                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
 14061                                  
 14062                                  			;
 14063                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
 14064                                  			; 'clear_ids' is used for floppy disks only and the default
 14065                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
 14066                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
 14067                                  
 14068                                  		; 21/12/2023 - Retro DOS v5.0
 14069                                  		;mov	si, offset fat_32_id ; "FAT32   "
 14070 000006B9 BE[5B05]                		mov	si, fat_32_id	
 14071                                  
 14072                                  		; 21/12/2023
 14073                                  		; BugFix (of the PCDOS 7.1 IBMBIO.COM BUG) ; *+
 14074                                  		;test	bl, fbigbig ; FAT32 flag
 14075 000006BC F6C320                  		test	bl, 20h ; * ; BL = [es:BDS.fatsiz] = [es:59]
 14076 000006BF 750B                    		jnz	short ci_bigfat
 14077                                  
 14078                                  		;mov	si, offset fat_16_id ; "FAT16	"
 14079 000006C1 BE[5305]                		mov	si, fat_16_id	; 19/10/2022
 14080                                  		
 14081                                  		; 21/12/2023
 14082                                  		; !BUG! (PCDOS 7.1 IBMBIO.COM BIOSCODE:06CDh)
 14083                                  		;test	byte [es:di+59], 40h ; [es:di+BDS.fatsiz], fbig
 14084                                  		; BugFix ; *+
 14085                                  		;test	bl, fbig ; FAT16 flag
 14086 000006C4 F6C340                  		test	bl, 40h ; * ; Retro DOS v5.0
 14087                                  		;;test	al, 40h ; * ; Retro DOS v4.2
 14088 000006C7 7503                    		jnz	short ci_bigfat
 14089                                  
 14090                                  		;mov	si, offset fat_12_id ; "FAT12	"
 14091 000006C9 BE[4B05]                		mov	si, fat_12_id	; 19/10/2022
 14092                                  ci_bigfat:
 14093                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 14094                                  		; 10/12/2022
 14095 000006CC B108                    		mov	cl, 8 ; cx = 8 
 14096 000006CE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 14097                                  					; filesys_id field
 14098                                  		;rep movsb
 14099                                  		; 21/12/2023 - Retro DOS v5.0
 14100                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; 0F3h,2Eh,0A4h
 14101                                  		; 26/12/2023
 14102                                  		;cs	; fat32_id, fat16_id and fat12_id are in BIOSCODE segment
 14103                                  		;rep movsb
 14104 000006D1 F3                      		rep
 14105 000006D2 2E                      		cs
 14106 000006D3 A4                      		movsb
 14107                                  
 14108 000006D4 5F                      		pop	di		; restore bds pointer
 14109                                  getret_exit:		; 21/12/2023
 14110 000006D5 C3                      		retn
 14111                                  
 14112                                  ; =============== S U B	R O U T	I N E =======================================
 14113                                  
 14114                                  ; 15/10/2022
 14115                                  
 14116                                  ; ---------------------------------------------------------------------------
 14117                                  ;	getbp - return bpb from the drive specified by the bds.
 14118                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
 14119                                  ;	    note that we never come here for fixed disks.
 14120                                  ;	    for all other cases,
 14121                                  ;	      - it reads boot sector to pull out the bpb
 14122                                  ;	      - if no valid bpb is found, it then reads the fat sector,
 14123                                  ;		to get the fat id byte to build the bpb from there.
 14124                                  ;
 14125                                  ;   inputs:	es:di point to correct bds.
 14126                                  ;
 14127                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
 14128                                  ;		carry set, and al=7 if invalid disk.
 14129                                  ;		carry set and error code in al if other error.
 14130                                  ;		if failed to recognize the boot record, then will set the
 14131                                  ;		set_id_flag to 0.
 14132                                  ;		this routine will only work for a floppy diskette.
 14133                                  ;		     for a fixed disk, it will just return.
 14134                                  ;
 14135                                  ;	****** Note: getbp is a clone of getbp which uses the newer
 14136                                  ;	  segment definitions. It should be migrated towards.
 14137                                  ;	   now es:di has the bds, ds: has Bios_Data
 14138                                  ; ---------------------------------------------------------------------------
 14139                                  
 14140                                  		; 29/12/2023
 14141                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 14142                                  GetBp:
 14143                                  		; if returning fake bpb then return bpb as is.
 14144                                  		; 21/12/2023
 14145 000006D6 26F6453F05              		test	byte [es:di+3Fh], 5 ; PCDOS 7.1
 14146                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
 14147                                  		;test	byte [es:di+23h], 5 ; MSDOS 6.22 (& MSDOS 5.0)
 14148                                  		;jz	short getbp1	; getbp1
 14149                                  		;jmp	getret_exit
 14150                                  		; 21/12/2023
 14151 000006DB 75F8                    		jnz	short getret_exit
 14152                                  ; ---------------------------------------------------------------------------
 14153                                  getbp1:	
 14154 000006DD 51                      		push	cx
 14155 000006DE 52                      		push	dx
 14156 000006DF 53                      		push	bx
 14157                                  
 14158                                  		; attempt to read in boot sector and determine bpb.
 14159                                  		; we assume that the 2.x and greater dos disks all
 14160                                  		; have a valid boot sector.
 14161                                  
 14162 000006E0 E8CF00                  		call	readbootsec
 14163 000006E3 720A                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
 14164 000006E5 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
 14165 000006E7 7509                    		jnz	short dofatbpb
 14166 000006E9 E81401                  		call	movbpb		; move bpb into	registers
 14167                                  		;jmp	short Has1
 14168                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
 14169 000006EC E9B500                  		jmp	getret
 14170                                  ; ---------------------------------------------------------------------------
 14171                                  
 14172                                  getbp_err_ret_brdg:
 14173 000006EF E9B600                  		jmp	getbp_err_ret
 14174                                  ; ---------------------------------------------------------------------------
 14175                                  
 14176                                  		; we have a 1.x diskette. In this case read in the fat ID byte
 14177                                  		; and fill in bpb from there.
 14178                                  dofatbpb:				
 14179 000006F2 E8B401                  		call	readfat		; puts media descriptor	byte in	ah
 14180 000006F5 72F8                    		jb	short getbp_err_ret_brdg
 14181                                  		;cmp	ds:fhave96, 0	;  changeline support available?
 14182 000006F7 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
 14183 000006FC 7403                    		jz	short bpb_nochangeline ; brif not
 14184 000006FE E83115                  		call	hidensity	; may not return! May add sp, 2	and
 14185                                  					; jump to has1!!!!!! or	has720K
 14186                                  bpb_nochangeline:		; test for a valid 3.5" medium			
 14187                                  		; 21/12/2023 - Retro DOS v5.0
 14188 00000701 26807D3E02              		cmp	byte [es:di+3Eh], 2
 14189                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 14190                                  					; ffSmall
 14191 00000706 7512                    		jnz	short is_floppy
 14192 00000708 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
 14193 0000070B 7512                    		jnz	short got_unknown_medium
 14194                                  Has720K:
 14195                                  		; 21/12/2023
 14196                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
 14197                                  		;mov	bx, sm92	; 19/10/2022
 14198                                  
 14199                                  		; es points to segment of bds. the following should be modified
 14200                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
 14201                                  		; driver.sys is loaded since the bds is inside the driver.sys.
 14202                                  
 14203                                  		; 21/12/2023
 14204                                  		;; 10/12/2022
 14205                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
 14206                                  		;; 21/12/2022
 14207                                  		;mov	al, [bx]
 14208                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
 14209                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
 14210                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
 14211                                  		;; 19/10/2022 - Temporary !
 14212                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
 14213                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
 14214                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
 14215                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
 14216                                  
 14217                                  		; 21/12/2023 - Retro DOS v5.0
 14218 0000070D B003                    		mov	al, 3		; bpbtype.sbf = 3
 14219 0000070F B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
 14220 00000712 BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
 14221                                  					; dh = bpbtype.chead = 2
 14222 00000715 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
 14223                                  					; bh = bpbtype.dire = 112
 14224 00000718 EB30                    		jmp	short Has1
 14225                                  ; ---------------------------------------------------------------------------
 14226                                  
 14227                                  is_floppy:			; must be a 5.25" floppy if we come here
 14228 0000071A 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
 14229                                  		;jb	short got_unknown_medium
 14230                                  		; 21/12/2023
 14231 0000071D 730A                    		jnb	short chk_160K
 14232                                  ; ---------------------------------------------------------------------------
 14233                                  		; 21/12/2023
 14234                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 14235                                  		; we do	not assume any type of bpb for this medium.
 14236                                  got_unknown_medium:
 14237                                  		;mov	ds:set_id_flag,	0
 14238 0000071F C606[9B04]00            		mov	byte [set_id_flag], 0
 14239 00000724 B007                    		mov	al, 7
 14240 00000726 F9                      		stc
 14241 00000727 EB7B                    		jmp	short getret
 14242                                  ; ---------------------------------------------------------------------------
 14243                                  chk_160K:
 14244 00000729 B001                    		mov	al, 1		; set number of	fat sectors
 14245 0000072B BB0840                  		mov	bx, 16392	; 64*256+8
 14246                                  					; set dir entries and sector max
 14247 0000072E B94001                  		mov	cx, 320		; 40*8
 14248                                  					; set size of drive
 14249 00000731 BA0101                  		mov	dx, 257		; 01*256+1
 14250                                  					; set head limit and sec/all unit
 14251                                  		; 21/12/2023
 14252                                  		;mov	al, 1		; bpbtype.sbf = 1
 14253                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
 14254                                  		;			; bh = bpbtype.dire = 64
 14255                                  		;mov	cx, 140h	; bpbtype.csec = 320
 14256                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
 14257                                  		;			; dh = bpbtype.chead = 1
 14258                                  
 14259 00000734 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 14260 00000737 7505                    		jnz	short has8	; nz = has 8 sectors
 14261                                  		
 14262                                  		; 29/12/2023
 14263                                  		;inc	al	; 2 	; inc number of	fat sectors
 14264                                  		;inc	bl	; 9	; inc sector max
 14265 00000739 40                      		inc	ax
 14266 0000073A 43                      		inc	bx
 14267                                  
 14268                                  		;add	cx, 40		; increase size	(to 360)
 14269                                  		; 18/12/2022
 14270 0000073B 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 14271                                  has8:
 14272 0000073E F6C401                  		test	ah, 1		; test for 1 or	2 heads
 14273 00000741 7407                    		jz	short Has1	; jz = 1 head
 14274 00000743 01C9                    		add	cx, cx		; double size of disk
 14275 00000745 B770                    		mov	bh, 112		; increase number of directory entries
 14276 00000747 FEC6                    		inc	dh	; 2	; inc sec/all unit
 14277                                  		; 29/12/2023
 14278                                  		;inc	dl	; 2	; inc head limit
 14279 00000749 42                      		inc	dx
 14280                                  Has1:
 14281                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 14282 0000074A 1E                      		push	ds
 14283 0000074B 06                      		push	es
 14284 0000074C 1F                      		pop	ds
 14285                                  
 14286                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 14287                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 14288                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 14289                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 14290                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 14291                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 14292                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 14293                                  
 14294 0000074D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 14295 00000750 30F6                    		xor	dh, dh
 14296 00000752 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 14297 00000755 88FA                    		mov	dl, bh
 14298 00000757 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 14299 0000075A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 14300 0000075D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 14301 00000760 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 14302 00000763 88C2                    		mov	dl, al
 14303 00000765 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 14304 00000768 88DA                    		mov	dl, bl
 14305 0000076A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 14306                                  
 14307                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 14308                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 14309                                  		; to 0 since this code is for floppies
 14310                                  
 14311                                  		; 18/12/2022
 14312                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 14313                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 14314                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 14315                                  		; 18/12/2022
 14316 0000076D 29C9                    		sub	cx, cx ; 0
 14317                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 14318                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 14319                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 14320                                  		
 14321                                  		; 02/09/2023
 14322 0000076F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 14323 00000772 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 14324 00000775 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 14325                                  
 14326                                  		; 21/12/2023 - Retro DOS v5.0
 14327 00000778 894D1F                  		mov     [di+1Fh], cx    ; [di+BDS.fatsecs32] ; BPB_FATSz32
 14328 0000077B 894D21                  		mov     [di+21h], cx    ; [di+BDS.fatsecs32+2]
 14329 0000077E 894D27                  		mov     [di+27h], cx    ; [di+BDS.rootdirclust]
 14330 00000781 894D29                  		mov     [di+29h], cx    ; [di+BDS.rootdirclust+2]
 14331 00000784 894D2F                  		mov     [di+2Fh], cx    ; [di+BDS.reserved]
 14332                                  					;     BPB_Reserved (12 zero bytes)
 14333 00000787 894D31                  		mov     [di+31h], cx
 14334 0000078A 894D33                  		mov     [di+33h], cx
 14335 0000078D 894D35                  		mov     [di+35h], cx
 14336 00000790 894D37                  		mov     [di+37h], cx
 14337 00000793 894D39                  		mov     [di+39h], cx
 14338 00000796 894D23                  		mov     [di+23h], cx    ; [di+BDS.extflags] ; BPB_ExtFlags
 14339 00000799 894D25                  		mov     [di+25h], cx    ; [di+BDS.fsver] ; BPB_FSVer
 14340                                  
 14341 0000079C 49                      		dec     cx              ; -1 ; 0FFFFFFFFh
 14342 0000079D 894D2B                  		mov     [di+2Bh], cx    ; [di+BDS.fsinfo] ; BPB_FSInfo
 14343 000007A0 894D2D                  		mov     [di+2Dh], cx    ; [di+BDS.bkbootsec] ; BPB_BkBootSec
 14344                                  		
 14345 000007A3 1F                      		pop	ds ; 02/09/2023
 14346                                  getret:
 14347 000007A4 5B                      		pop	bx
 14348 000007A5 5A                      		pop	dx
 14349 000007A6 59                      		pop	cx
 14350                                  ;getret_exit:		; 21/12/2023
 14351 000007A7 C3                      		retn
 14352                                  ; ---------------------------------------------------------------------------
 14353                                  
 14354                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 14355                                  		;mov	ds:set_id_flag,	0
 14356                                  		; 19/10/2022
 14357 000007A8 C606[9B04]00            		mov	byte [set_id_flag], 0
 14358 000007AD E8F905                  		call	maperror
 14359 000007B0 EBF2                    		jmp	short getret
 14360                                  ; ---------------------------------------------------------------------------
 14361                                  ; 21/12/2023
 14362                                  ;		; we have a 3.5" diskette for which we cannot build a bpb.
 14363                                  ;		; we do	not assume any type of bpb for this medium.
 14364                                  ;
 14365                                  ;got_unknown_medium:
 14366                                  ;		;mov	ds:set_id_flag,	0
 14367                                  ;		mov	byte [set_id_flag], 0
 14368                                  ;		mov	al, 7
 14369                                  ;		stc
 14370                                  ;		jmp	short getret
 14371                                  
 14372                                  ; =============== S U B	R O U T	I N E =======================================
 14373                                  
 14374                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 14375                                  
 14376                                  ; ----------------------------------------------------------------
 14377                                  ; read in the boot sector. set carry if error in reading sector.
 14378                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 14379                                  ;
 14380                                  ;	assumes es:di -> bds, ds-> Bios_Data
 14381                                  ; ----------------------------------------------------------------
 14382                                  
 14383                                  ; 10/03/2019 - Retro DOS v4.0
 14384                                  
 14385                                  ; 30/12/2022 - Retro DOS v4.2
 14386                                  ; (MSDOS 6.21 IO.SYS, BIOSCODE:06C3h)
 14387                                  ; ((MSDOS 6.22 IO.SYS, BIOSCODE:06C3h)) ; 22/12/2023
 14388                                  
 14389                                  ; 22/12/2023 - Retro DOS v5.0
 14390                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:07C6h)
 14391                                  
 14392                                  readbootsec:	
 14393 000007B2 B600                    		mov	dh, 0		; head 0
 14394 000007B4 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 14395 000007B7 E8FC00                  		call	read_sector
 14396 000007BA 7243                    		jb	short err_ret
 14397 000007BC 31DB                    		xor	bx, bx		; assume valid boot sector
 14398                                  
 14399                                  		; put a sanity check for the boot sector in here to detect
 14400                                  		; boot sectors that do not have valid bpbs. we examine the
 14401                                  		; first two bytes - they must contain a long jump (69h) or a
 14402                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 14403                                  		; (E9h). if this test is passed, we further check by examining
 14404                                  		; the signature at the end of the boot sector for the word
 14405                                  		; AA55h. if the signature is not present, we examine the media
 14406                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 14407                                  		; logic is modified a little bit. we are not going to check
 14408                                  		; signature. instead we are going to sanity check the media
 14409                                  		; byte in bpb regardless of the validity of signature. this is
 14410                                  		; to save the already developed commercial products that have
 14411                                  		; good jump instruction and signature but with the false bpb
 14412                                  		; informations
 14413                                  
 14414                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 14415                                  
 14416                                  		; 02/09/2023
 14417                                  		; 19/10/2022
 14418                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 14419                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 14420                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 14421                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 14422                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 14423                                  		;jnz	short invalidbootsec
 14424                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 14425                                  		;jnz	short invalidbootsec
 14426                                  
 14427                                  		; 02/09/2023 (PCDOS 7.1)
 14428 000007BE A0[5201]                		mov	al, [disksector]
 14429 000007C1 3C69                    		cmp	al, 69h		; is it a direct jump?
 14430 000007C3 740F                    		je	short check_bpb_mediabyte
 14431                                  					; don't need to find a nop
 14432 000007C5 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 14433 000007C7 740B                    		je	short check_bpb_mediabyte
 14434                                  					; no need for nop
 14435 000007C9 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 14436 000007CB 7530                    		jne	short invalidbootsec
 14437 000007CD 803E[5401]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 14438 000007D2 7529                    		jne	short invalidbootsec
 14439                                  
 14440                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14441                                  ;
 14442                                  ;; 10/03/2019
 14443                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 14444                                  ;;
 14445                                  ;; Don't have to perform the following signature check since
 14446                                  ;; we need to check the media byte even with the good signatured diskette.
 14447                                  ;;
 14448                                  ;;check_signature:
 14449                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 14450                                  ;;							 ; disk or 1.x media.
 14451                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 14452                                  ;;					       ; may need some special handling
 14453                                  
 14454                                  ; check for non-ibm disks which do not have the signature AA55h at the
 14455                                  ; end of the boot sector, but still have a valid boot sector. this is done
 14456                                  ; by examining the media descriptor in the boot sector.
 14457                                  
 14458                                  		; 19/10/2022
 14459                                  check_bpb_mediabyte:
 14460 000007D4 A0[6701]                		mov	al, [disksector+15h]
 14461                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 14462 000007D7 50                      		push	ax ; 02/09/2023
 14463 000007D8 24F0                    		and	al, 0F0h
 14464 000007DA 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 14465 000007DC 58                      		pop	ax ; 02/09/2023
 14466 000007DD 751E                    		jnz	short invalidbootsec
 14467                                  
 14468                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 14469                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 14470                                  ; sectors. these are specifically diskettes that were formatted in drives
 14471                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 14472                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 14473                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 14474                                  ; help our build bpb routine to recognise these specific cases, and to
 14475                                  ; set up out copy of the bpb accordingly.
 14476                                  ; we do this by checking to see if the boot sector is off a diskette that
 14477                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 14478                                  ; sec/clus field to 1. if not, we carry on as normal.
 14479                                  
 14480                                  checksinglesided:
 14481                                  		;mov	al, [disksector+15h]
 14482                                  		; 02/09/2023
 14483                                  		; al = [disksector+15h]
 14484 000007DF 3CF0                    		cmp	al, 0F0h
 14485 000007E1 741B                    		jz	short gooddsk
 14486 000007E3 A801                    		test	al, 1
 14487 000007E5 7517                    		jnz	short gooddsk
 14488 000007E7 813E[5A01]332E          		cmp	word [disksector+8], 2E33h ; "3."
 14489 000007ED 7507                    		jnz	short mustbeearlier
 14490 000007EF 803E[5C01]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 14491 000007F4 7308                    		jnb	short gooddsk
 14492                                  
 14493                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 14494                                  
 14495                                  mustbeearlier:				
 14496 000007F6 C606[5F01]01            		mov	byte [disksector+0Dh], 1
 14497                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 14498 000007FB EB01                    		jmp	short gooddsk
 14499                                  ; ---------------------------------------------------------------------------
 14500                                  
 14501                                  invalidbootsec:				
 14502 000007FD 43                      		inc	bx		; indicate that boot sector invalid
 14503                                  		; 10/12/2022
 14504                                  movbpb_ret:
 14505                                  gooddsk:				
 14506 000007FE F8                      		clc
 14507                                  err_ret:
 14508 000007FF C3                      		retn
 14509                                  ; ---------------------------------------------------------------------------
 14510                                  
 14511                                  		; 10/12/2022
 14512                                  ;err_ret:				
 14513                                  		;retn
 14514                                  
 14515                                  ; =============== S U B	R O U T	I N E =======================================
 14516                                  
 14517                                  ; 15/10/2022
 14518                                  ; ---------------------------------------------------------------------------
 14519                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 14520                                  ; getbp routine at has1
 14521                                  ;
 14522                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 14523                                  ; serial number, volume label, file system id in bds according to
 14524                                  ; the boot record. after that, this routine will set the set_id_flag to 2
 14525                                  ; to signal that volume label is set already from the extended boot record
 14526                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 14527                                  ; the volume label in the root directory.)
 14528                                  ; ---------------------------------------------------------------------------
 14529                                  
 14530                                  ; 10/03/2019 - Retro DOS v4.0
 14531                                  
 14532                                  ; 22/12/2023
 14533                                  %if 0
 14534                                  		; 19/10/2022
 14535                                  movbpb:
 14536                                  		mov	dh, [disksector+0Dh]
 14537                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 14538                                  					; sectors per unit
 14539                                  		mov	bh, [disksector+11h]
 14540                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 14541                                  					; number of directory entries
 14542                                  		mov	cx, [disksector+13h]
 14543                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 14544                                  					; size of drive
 14545                                  		mov	ah, [disksector+15h]
 14546                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 14547                                  					; media	descriptor
 14548                                  		mov	al, [disksector+16h];
 14549                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 14550                                  					; number of fat	sectors
 14551                                  		mov	bl, [disksector+18h]
 14552                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 14553                                  					; sectors per track
 14554                                  		mov	dl, [disksector+1Ah]
 14555                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 14556                                  					; number of heads
 14557                                  %else
 14558                                  		; 29/12/2023
 14559                                  		; 22/12/2023 - Retro DOS v5.0
 14560                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0814h)
 14561                                  		;;;
 14562                                  movbpb:
 14563 00000800 57                      		push	di
 14564 00000801 83C706                  		add	di, 6		; BDS+6 = BDS.BPB
 14565 00000804 8D36[5D01]              		lea	si, [disksector+0Bh]
 14566 00000808 B93500                  		mov	cx, 53		; copy bios parameters block
 14567                                  					; from BPB_BytsPerSec to (FAT32) BS_DrvNum (excluded)
 14568 0000080B FC                      		cld
 14569 0000080C F3A4                    		rep movsb
 14570 0000080E 8B4CD3                  		mov	cx, [si-45]	; si = disksector+64 -> 64-45 = 19
 14571                                  					; disksektor+19 = BPB_TotSec16
 14572 00000811 31C0                    		xor	ax, ax
 14573 00000813 E308                    		jcxz	movbpb_bigdisk
 14574 00000815 26894DE0                		mov	[es:di-32], cx	; write 16 bit total sectors
 14575                                  					; to 32 bit total sectors field
 14576 00000819 268945E2                		mov	[es:di-30], ax	; BPB_TotalSec32+2 (BDS offset 29, BPB offset 23)
 14577                                  movbpb_bigdisk:
 14578 0000081D 3944D6                  		cmp	[si-42], ax     ; BPB_FATSz16 = disksector+22
 14579 00000820 7410                    		jz	short movbpb_fat32
 14580                                  movbpb_fat:
 14581 00000822 83EF1C                  		sub	di, 28		; di = BDS offset 31 (BPB offset 25)
 14582                                  		; 29/12/2023
 14583 00000825 B90C00                  		mov	cx, 12		; clear 12 byte extended BDS (FAT32) fields
 14584                                  					; (which are used only for FAT32 disks)
 14585 00000828 F3AA                    		rep stosb
 14586 0000082A 48                      		dec	ax		; -1 ; 0FFFFh
 14587 0000082B AB                      		stosw			; set BDS offset 43 (dword) to -1
 14588                                  					; dword [BDS.BPB_FSInfo] = 0FFFFFFFFh
 14589 0000082C AB                      		stosw
 14590 0000082D 40                      		inc	ax		; ax = 0
 14591 0000082E B10C                    		mov	cl, 12		
 14592                                  		;mov	cx, 12		; clear BDS offset 47 to 59
 14593                                  					; (BPB offset 41 to 53) (disksector offset 52 to 64)
 14594 00000830 F3AA                    		rep stosb
 14595                                  movbpb_fat32:
 14596 00000832 5F                      		pop	di
 14597                                  %endif
 14598                                  		;;;
 14599                                  
 14600 00000833 803E[9B04]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 14601 00000838 75C4                    		jnz	short movbpb_ret
 14602 0000083A E81200                  		call	mov_media_ids
 14603 0000083D 7205                    		jb	short movbpb_conv ; conventional boot record?
 14604 0000083F C606[9B04]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 14605                                  movbpb_conv:
 14606 00000844 803E[7700]01            		cmp	byte [fhave96], 1
 14607 00000849 75B3                    		jnz	short movbpb_ret
 14608 0000084B E83714                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 14609                                  		; 10/12/2022
 14610                                  		; cf = 0
 14611                                  ;movbpb_ret:
 14612                                  		;clc
 14613 0000084E C3                      		retn
 14614                                  		
 14615                                  ; =============== S U B	R O U T	I N E =======================================
 14616                                  
 14617                                  ;copy the boot_serial number, volume id, and filesystem id from the
 14618                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 14619                                  ;by es:di.
 14620                                  
 14621                                  ;in.) es:di -> bds
 14622                                  ;     ds:disksector = valid extended boot record.
 14623                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 14624                                  ;      the boot record information.
 14625                                  ;     carry flag set if not an extended bpb.
 14626                                  ;     all registers saved except the flag.
 14627                                  
 14628                                  ; 22/12/2023
 14629                                  %if 0
 14630                                  		; 19/10/2022
 14631                                  mov_media_ids:		
 14632                                  		cmp	byte [disksector+26h], 29h
 14633                                  					; [disksector+EXT_BOOT.SIG],
 14634                                  					; EXT_BOOT_SIGNATURE
 14635                                  		jnz	short mmi_not_ext
 14636                                  		push	cx
 14637                                  		mov	cx, [disksector+27h]
 14638                                  					; [disksector+EXT_BOOT.SERIAL]
 14639                                  		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 14640                                  		mov	cx, [disksector+29h]
 14641                                  					; [disksector+EXT_BOOT.SERIAL+2]
 14642                                  		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 14643                                  		push	di
 14644                                  		push	si
 14645                                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 14646                                  		mov	si, disksector+2Bh
 14647                                  		;mov	si, (offset disksector+2Bh) ;
 14648                                  					; disksector+EXT_BOOT.VOL_LABEL
 14649                                  		add	di, 75		; BDS.volid
 14650                                  		rep movsb
 14651                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 14652                                  		; 10/12/2022
 14653                                  		mov	cl, 8 ; cx = 8
 14654                                  		mov	si, disksector+36h
 14655                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 14656                                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 14657                                  		rep movsb
 14658                                  		pop	si
 14659                                  		pop	di
 14660                                  		pop	cx
 14661                                  		; 10/12/2022
 14662                                  		; cf = 0
 14663                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 14664                                  				; (20/09/2022)
 14665                                  		retn
 14666                                  %else
 14667                                  		; 22/12/2023 - Retro DOS v5.0
 14668                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0865h)
 14669                                  		;;;		
 14670                                  mov_media_ids:
 14671 0000084F 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 14672 00000854 7507                    		jnz	short mmi_chk_fat
 14673 00000856 803E[9401]29            		cmp	byte [disksector+42h], 29h
 14674                                  					; [disksector+FAT32_EXT_BOOT.SIG],
 14675                                  					; EXT_BOOT_SIGNATURE
 14676 0000085B EB05                    		jmp	short mmi_chk_fat32
 14677                                  mmi_chk_fat:
 14678 0000085D 803E[7801]29            		cmp	byte [disksector+26h], 29h
 14679                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 14680                                  mmi_chk_fat32:
 14681 00000862 7543                    		jnz	short mmi_not_ext
 14682 00000864 51                      		push	cx
 14683 00000865 50                      		push	ax
 14684 00000866 57                      		push	di
 14685 00000867 56                      		push	si
 14686 00000868 1E                      		push	ds
 14687 00000869 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 14688 0000086E 750C                    		jnz	short mmi_fat
 14689                                  
 14690                                  mmi_fat32:				; FAT32 file system
 14691                                  		;lds	cx, dword ptr ds:disksector+43h
 14692 00000870 C50E[9501]              		lds	cx, [disksector+43h]	; BS_FAT32_VolID
 14693 00000874 BE[9901]                		mov	si, disksector+47h	; BS_FAT32_VolLab
 14694 00000877 B8[A401]                		mov	ax, disksector+52h	; BS_FAT32_FilSysType
 14695 0000087A EB0A                    		jmp	short mmi_do
 14696                                  
 14697                                  mmi_fat:
 14698                                  		;lds	cx, dword ptr ds:disksector+27h
 14699 0000087C C50E[7901]              		lds	cx, [disksector+27h]	; BS_VolID
 14700 00000880 BE[7D01]                		mov	si, disksector+2Bh	; BS_VolLab
 14701 00000883 B8[8801]                		mov	ax, disksector+36h	; BS_FilSysType
 14702                                  mmi_do:
 14703 00000886 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 14704                                  					; (BDS offset 137)
 14705 0000088B 268C9D8B00              		mov	[es:di+8Bh], ds	; [es:di+BDS.vol_serial+2]
 14706 00000890 1F                      		pop	ds
 14707 00000891 B90B00                  		mov	cx, 11
 14708 00000894 83C77D                  		add	di, 125		; di = di+125 = BDS.volid
 14709 00000897 F3A4                    		rep movsb
 14710 00000899 B108                    		mov	cl, 8		; di = di+136
 14711 0000089B 89C6                    		mov	si, ax		; BS_FilSysType or BS_FAT32_FilSysType
 14712 0000089D 83C705                  		add	di, 5		; di = di+141 = BDS.filesys_id
 14713 000008A0 F3A4                    		rep movsb
 14714 000008A2 5E                      		pop	si
 14715 000008A3 5F                      		pop	di
 14716 000008A4 58                      		pop	ax
 14717 000008A5 59                      		pop	cx
 14718                                  		;clc	; this clc is not required (16/06/2019 - Erdogan Tan)
 14719                                  			; (20/09/2022 - 27/06/2023) MSDOS 6.21 .. PCDOS 7.1
 14720 000008A6 C3                      		retn
 14721                                  %endif
 14722                                  		;;;
 14723                                  	
 14724                                  ; ---------------------------------------------------------------------------
 14725                                  
 14726                                  mmi_not_ext:				
 14727 000008A7 F9                      		stc
 14728 000008A8 C3                      		retn
 14729                                  
 14730                                  ; =============== S U B	R O U T	I N E =======================================
 14731                                  
 14732                                  ; 15/10/2022
 14733                                  ; --------------------------------------------------------------
 14734                                  ; read in the fat sector and get the media byte from it.
 14735                                  ; input : es:di -> bds
 14736                                  ; output:
 14737                                  ;	  carry set if an error occurs, ax contains error code.
 14738                                  ;	  otherwise, ah contains media byte on exit
 14739                                  ; --------------------------------------------------------------
 14740                                  
 14741                                  readfat:	
 14742                                  		;mov	dh, 0
 14743                                  		; 10/12/2022
 14744 000008A9 30F6                    		xor	dh, dh
 14745 000008AB B90200                  		mov	cx, 2		; head 0
 14746                                  					; cylinder 0, sector 2
 14747 000008AE E80500                  		call	read_sector
 14748 000008B1 7202                    		jb	short bad_fat_ret
 14749 000008B3 8A27                    		mov	ah, [bx]	; media	byte
 14750                                  bad_fat_ret:				
 14751 000008B5 C3                      		retn
 14752                                  
 14753                                  ; =============== S U B	R O U T	I N E =======================================
 14754                                  
 14755                                  ; 15/10/2022
 14756                                  
 14757                                  ; ---------------------------------------------------------------------------
 14758                                  ; read a single sector into the temp buffer.
 14759                                  ; perform three retries in case of error.
 14760                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 14761                                  ;		cx has sector and cylinder
 14762                                  ;		dh has head
 14763                                  ;		es:di has bds
 14764                                  ;		ds has Bios_Data
 14765                                  ;
 14766                                  ;   outputs:	carry clear
 14767                                  ;		    Bios_Data:bx point to sector
 14768                                  ;		       (note: some callers assume location of buffer)
 14769                                  ;
 14770                                  ;		carry set
 14771                                  ;		    ax has rom error code
 14772                                  ;
 14773                                  ; register bp is preserved.
 14774                                  ; ---------------------------------------------------------------------------
 14775                                  
 14776                                  ; 10/03/2019 - Retro DOS v4.0
 14777                                  ; 22/12/2023 - Retro DOS v5.0
 14778                                  
 14779                                  		; 19/10/2022
 14780                                  read_sector:
 14781 000008B6 55                      		push	bp
 14782 000008B7 BD0300                  		mov	bp, 3		; make 3 attempts
 14783 000008BA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14784 000008BE BB[5201]                		mov	bx, disksector	; get es:bx to point to	buffer
 14785                                  rd_ret:
 14786 000008C1 06                      		push	es
 14787 000008C2 1E                      		push	ds
 14788 000008C3 07                      		pop	es
 14789 000008C4 B80102                  		mov	ax, 201h
 14790 000008C7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 14791                                  					; AL = number of sectors to read, CH = track, CL = sector
 14792                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 14793                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 14794 000008C9 07                      		pop	es
 14795 000008CA 734A                    		jnb	short okret2
 14796                                  rd_rty:
 14797 000008CC E81205                  		call	again		; reset	disk, decrement	bp, preserve ax
 14798 000008CF 7442                    		jz	short err_rd_ret
 14799                                  
 14800                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14801 000008D1 26F6453F01              		test	byte [es:di+3Fh], 1
 14802                                  		;test	byte [es:di+23h], 1
 14803                                  		;;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 14804                                  					; fnon_removable
 14805 000008D6 75E9                    		jnz	short rd_ret
 14806 000008D8 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14807 000008DD 7510                    		jnz	short rd_skip1_dpt
 14808 000008DF 50                      		push	ax
 14809 000008E0 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 14810 000008E1 C536[2D01]              		lds	si, [dpt]
 14811                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14812                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 14813                                  		;			; NORMSETTLE
 14814                                  		; 12/12/2022
 14815 000008E5 B00F                    		mov	al, 15
 14816 000008E7 864409                  		xchg	al, [si+9]
 14817                                  		; 
 14818 000008EA 1F                      		pop	ds
 14819 000008EB A2[2A01]                		mov	[save_head_sttl], al
 14820 000008EE 58                      		pop	ax
 14821                                  rd_skip1_dpt:
 14822 000008EF 06                      		push	es
 14823 000008F0 1E                      		push	ds
 14824 000008F1 07                      		pop	es
 14825 000008F2 B80102                  		mov	ax, 201h
 14826 000008F5 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 14827                                  					; AL = number of sectors to read, CH = track, CL = sector
 14828                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 14829                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 14830 000008F7 07                      		pop	es
 14831 000008F8 9C                      		pushf
 14832 000008F9 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14833 000008FE 750E                    		jnz	short rd_skip2_dpt
 14834 00000900 50                      		push	ax
 14835 00000901 A0[2A01]                		mov	al, [save_head_sttl]
 14836 00000904 1E                      		push	ds
 14837 00000905 C536[2D01]              		lds	si, [dpt]
 14838 00000909 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14839 0000090C 1F                      		pop	ds
 14840 0000090D 58                      		pop	ax
 14841                                  rd_skip2_dpt:
 14842 0000090E 9D                      		popf
 14843 0000090F 7305                    		jnb	short okret2
 14844 00000911 EBB9                    		jmp	short rd_rty
 14845                                  ; ---------------------------------------------------------------------------
 14846                                  
 14847                                  err_rd_ret:
 14848 00000913 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 14849                                  					; return error
 14850 00000915 F9                      		stc
 14851                                  
 14852                                  ; update information pertaining to last drive accessed, time of access, last
 14853                                  ; track accessed in that drive.
 14854                                  
 14855                                  okret2:
 14856 00000916 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 14857 0000091A 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 14858                                  		
 14859                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14860 0000091E 26886D78                		mov	[es:di+78h], ch
 14861                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 14862                                  					; save last track accessed on this drive
 14863                                  					; preserve flags in case error occurred
 14864 00000922 9C                      		pushf
 14865 00000923 E89B04                  		call	set_tim
 14866 00000926 9D                      		popf			; restore flags
 14867 00000927 5D                      		pop	bp
 14868 00000928 C3                      		retn
 14869                                  
 14870                                  ;----------------------------------------------------------------------------
 14871                                  ;	disk open/close routines
 14872                                  ;----------------------------------------------------------------------------
 14873                                  
 14874                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 14875 00000929 803E[7700]00            		cmp	byte [fhave96], 0
 14876 0000092E 7407                    		jz	short dsk_open_exit ; done if no changeline support
 14877 00000930 E871FC                  		call	SetDrive	; get bds for drive
 14878                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14879 00000933 26FF453C                		inc	word [es:di+3Ch] ; [es:di+BDS.opcnt] ; BDS offset 60
 14880                                  		;inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 14881                                  dsk_open_exit:
 14882                                  		; 10/12/2022
 14883                                  		; cf = 0			
 14884                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 14885                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 14886 00000937 C3                      		retn
 14887                                  ; ---------------------------------------------------------------------------
 14888                                  
 14889                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 14890 00000938 803E[7700]00            		cmp	byte [fhave96], 0
 14891 0000093D 740E                    		jz	short exitjx	; done if no changeline	support
 14892 0000093F E862FC                  		call	SetDrive	; get bds for drive
 14893                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14894 00000942 26837D3C00              		cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt] ; BDS off 60
 14895                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14896 00000947 7404                    		jz	short exitjx	; watch	out for	wrap
 14897                                  		; 22/12/2023
 14898 00000949 26FF4D3C                		dec	word [es:di+3Ch]
 14899                                  		;dec	word [es:di+20h]
 14900                                  exitjx:
 14901                                  		; 10/12/2022
 14902                                  		; cf = 0
 14903                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 14904                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 14905 0000094D C3                      		retn
 14906                                  
 14907                                  ;----------------------------------------------------------------------------
 14908                                  ;		disk removable routine
 14909                                  ;----------------------------------------------------------------------------
 14910                                  
 14911                                  		; al is	unit #
 14912                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 14913 0000094E E853FC                  		call	SetDrive	; get bds for this drive
 14914                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14915                                  		;test	byte [es:di+BDS.flags], fnon_removable
 14916 00000951 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 14917 00000956 74F5                    		jz	short exitjx
 14918                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags], fnon_removable
 14919                                  		;;jnz	short x_bus_exit ; non_rem
 14920                                  		;jnz	short non_rem	; 15/10/2022
 14921                                  		;; 10/12/2022
 14922                                  		;; cf = 0
 14923                                  		;;clc			; CF is already ZERO here
 14924                                  		;			; 15/10/2022
 14925                                  		;retn
 14926                                  ; ---------------------------------------------------------------------------
 14927                                  
 14928                                  non_rem:
 14929                                  x_bus_exit:
 14930 00000958 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 14931                                  					; return busy status
 14932 0000095A F9                      		stc
 14933                                  dsk_ret:
 14934 0000095B C3                      		retn
 14935                                  
 14936                                  ;----------------------------------------------------------------------------
 14937                                  ;		disk i/o routines
 14938                                  ;----------------------------------------------------------------------------
 14939                                  
 14940                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 14941                                  		;mov	word [wrtverify], 103h
 14942                                  		; 19/10/2022
 14943 0000095C C706[2001]0301          		mov	word [rflag], 103h
 14944                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 14945 00000962 EB06                    		jmp	short dsk_cl
 14946                                  ; ---------------------------------------------------------------------------
 14947                                  
 14948                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 14949                                  		;mov	word [wrtverify], 3
 14950                                  		; 19/10/2022
 14951 00000964 C706[2001]0300          		mov	word [rflag], 3
 14952                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 14953                                  dsk_cl:
 14954 0000096A E8A400                  		call	diskio		; romwrite
 14955                                  ; ---------------------------------------------------------------------------
 14956                                  
 14957                                  dsk_io:
 14958 0000096D 73EC                    		jnb	short dsk_ret
 14959 0000096F E965F7                  		jmp	bc_err_cnt
 14960                                  ; ---------------------------------------------------------------------------
 14961                                  
 14962                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 14963 00000972 E89700                  		call	diskrd
 14964 00000975 EBF6                    		jmp	short dsk_io
 14965                                  
 14966                                  ; =============== S U B	R O U T	I N E =======================================
 14967                                  
 14968                                  ; 15/10/2022
 14969                                  ; 10/03/2019 - Retro DOS v4.0
 14970                                  ; 22/12/2023 - Retro DOS v5.0
 14971                                  
 14972                                  ;-----------------------------------------------------------
 14973                                  ; miscellaneous odd jump routines. 
 14974                                  ; moved out of mainline for speed.
 14975                                  
 14976                                  ; if we have a system where we have virtual drives, we need 
 14977                                  ; to prompt the user to place the correct disk in the drive.
 14978                                  ;
 14979                                  ;	assume es:di -> bds, ds:->Bios_Data
 14980                                  ;-----------------------------------------------------------
 14981                                  
 14982                                  		; 19/10/2022
 14983                                  checksingle:
 14984 00000977 50                      		push	ax
 14985 00000978 53                      		push	bx
 14986                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14987 00000979 268B5D3F                		mov	bx, [es:di+3Fh]	; [es:di+BDS.flags]
 14988                                  		;mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 14989                                  
 14990                                  ; if hard drive, cannot change disk.
 14991                                  ; if current owner of physical drive, no need to change diskette.
 14992                                  
 14993 0000097D F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 14994 00000980 7573                    		jnz	short singleret
 14995 00000982 F6C310                  		test	bl, 10h		; fi_am_mult
 14996                                  					; is there a drive sharing this	physical drive?
 14997 00000985 746E                    		jz	short singleret
 14998                                  
 14999                                  ; look for the previous owner of this physical drive
 15000                                  ; and reset its ownership flag.
 15001                                  
 15002 00000987 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 15003                                  					; get physical drive number
 15004 0000098B 06                      		push	es		; preserve pointer to current bds
 15005 0000098C 57                      		push	di
 15006 0000098D C43E[1901]              		les	di, [start_bds] ; get first bds
 15007                                  scan_list:
 15008 00000991 26384504                		cmp	[es:di+4], al
 15009 00000995 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 15010 00000997 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 15011                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15012 00000999 26845D3F                		test	[es:di+3Fh], bl	; [es:di+BDS.flags]
 15013                                  		;test	[es:di+23h], bl
 15014 0000099D 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 15015 0000099F 26305D3F                		xor	[es:di+3Fh], bl
 15016                                  		;xor	[es:di+23h], bl	; reset	ownership flag
 15017 000009A3 5F                      		pop	di		; restore pointer to current bds
 15018 000009A4 07                      		pop	es
 15019 000009A5 26085D3F                		or	[es:di+3Fh], bl
 15020                                  		;or	[es:di+23h], bl	; ; set	ownership flag
 15021                                  
 15022                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 15023                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 15024                                  ; in this case.
 15025 000009A9 803E[7A00]01            		cmp	byte [fsetowner], 1
 15026 000009AE 7517                    		jnz	short not_fsetowner
 15027                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 15028 000009B0 26807D0400              		cmp	byte [es:di+4], 0
 15029 000009B5 753E                    		jnz	short singleret
 15030 000009B7 268A4505                		mov	al, [es:di+5]
 15031                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 15032                                  					; get the DOS drive letter
 15033 000009BB 06                      		push	es
 15034 000009BC 8E06[1A00]              		mov	es, [zeroseg]
 15035 000009C0 26A20405                		mov	[es:LSTDRV], al
 15036                                  		;mov	es:504h, al	; [es:LSTDRV]
 15037                                  					; set up sdsb
 15038 000009C4 07                      		pop	es		; restore bds pointer
 15039 000009C5 EB2E                    		jmp	short singleret
 15040                                  ; ---------------------------------------------------------------------------
 15041                                  
 15042                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 15043                                  ; we now check to see if we are in a single drive system and the application
 15044                                  ; has "cleverly" diddled the sdsb
 15045                                  
 15046                                  not_fsetowner:
 15047 000009C7 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 15048 000009CC 7517                    		jnz	short ignore_sdsb
 15049 000009CE 50                      		push	ax
 15050 000009CF 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 15051 000009D3 88C4                    		mov	ah, al
 15052 000009D5 06                      		push	es
 15053 000009D6 8E06[1A00]              		mov	es, [zeroseg]
 15054 000009DA 2686060405              		xchg	al, [es:LSTDRV]
 15055                                  		;xchg	al, es:504h	; [es:LSTDRV]
 15056                                  					; then swap(curr_drv,req_drv)
 15057 000009DF 07                      		pop	es
 15058 000009E0 38C4                    		cmp	ah, al		; else
 15059 000009E2 58                      		pop	ax		; swap(curr_drv,req_drv)
 15060 000009E3 7410                    		jz	short singleret	; issue	swap_dsk_msg
 15061                                  ignore_sdsb:
 15062 000009E5 E8B310                  		call	swpdsk
 15063 000009E8 EB0B                    		jmp	short singleret
 15064                                  ; ---------------------------------------------------------------------------
 15065                                  
 15066                                  scan_skip:
 15067 000009EA 26C43D                  		les	di, [es:di]
 15068                                  		;les	di, es:[di]	; [es:di+BDS.link]
 15069                                  					; go to	next bds
 15070 000009ED 83FFFF                  		cmp	di, 0FFFFh ; -1	; end of list?
 15071 000009F0 759F                    		jnz	short scan_list	; continue until hit end of list
 15072 000009F2 F9                      		stc
 15073 000009F3 5F                      		pop	di		; restore current bds
 15074 000009F4 07                      		pop	es
 15075                                  singleret:
 15076 000009F5 5B                      		pop	bx
 15077 000009F6 58                      		pop	ax
 15078 000009F7 C3                      		retn
 15079                                  
 15080                                  ; 22/12/2023
 15081                                  %if 0
 15082                                  ; ---------------------------------------------------------------------------
 15083                                  
 15084                                  baddrive:
 15085                                  		mov	al, 8		; sector not found
 15086                                  		jmp	short baddrive_ret
 15087                                  %endif
 15088                                  
 15089                                  ; ---------------------------------------------------------------------------
 15090                                  
 15091                                  unformatteddrive:
 15092 000009F8 B007                    		mov	al, 7		; unknown media
 15093                                  ;baddrive_ret:
 15094 000009FA F9                      		stc
 15095                                  ; ---------------------------------------------------------------------------
 15096                                  
 15097                                  ioret:
 15098 000009FB C3                      		retn
 15099                                  
 15100                                  ; ---------------------------------------------------------------------------
 15101                                  		
 15102                                  		; 22/12/2023 - Retro DOS v5.0
 15103                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A1Bh
 15104                                  
 15105 000009FC 10                      LBA_Packet:	db 16			; ...
 15106                                  					; DAP buffer
 15107 000009FD 00                                      db 0
 15108 000009FE 0000                    dap_block_cnt:	dw 0			; ...
 15109 00000A00 00000000                dap_trans_buf:	dd 0			; ...
 15110 00000A04 00000000                dap_lba_value:	dd 0			; ...
 15111 00000A08 00000000                		dd 0
 15112                                  
 15113                                  ; ---------------------------------------------------------------------------
 15114                                  
 15115                                  ; 15/10/2022
 15116                                  
 15117                                  ; ---------------------------------------------------------------------------
 15118                                  ;	disk i/o handler
 15119                                  ;
 15120                                  ;	al = drive number (0-6)
 15121                                  ;	ah = media descriptor
 15122                                  ;	cx = sector count
 15123                                  ;	dx = first sector (low)
 15124                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 15125                                  ;	ds = cs
 15126                                  ;	es:di = transfer address
 15127                                  ;	[rflag]=operation (2=read, 3=write)
 15128                                  ;	[verify]=1 for verify after write
 15129                                  ;
 15130                                  ;	if successful carry flag = 0
 15131                                  ;	  else cf=1 and al contains error code
 15132                                  ; ---------------------------------------------------------------------------
 15133                                  
 15134                                  		; 12/12/2023
 15135                                  		; ds = biosdata segment (cs = bioscode segment)
 15136                                  diskrd:	
 15137                                  		;mov	ds:rflag, 2	; romread
 15138                                  		; 19/10/2022
 15139 00000A0C C606[2001]02            		mov	byte [rflag], 2 ; romread
 15140                                  
 15141                                  ; =============== S U B	R O U T	I N E =======================================
 15142                                  
 15143                                  		; 22/12/2023 - Retro DOS v5.0
 15144                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A30h
 15145                                  ; 22/12/2023
 15146                                  %if 0
 15147                                  		; 19/10/2022
 15148                                  diskio:
 15149                                  		mov	bx, di		; es:bx	= transfer address
 15150                                  		mov	[xfer_seg], es	; save transfer	segment
 15151                                  		call	SetDrive
 15152                                  		mov	al, [es:di+10h]	; [es:di+BDS.media]
 15153                                  		mov	[medbyt], al
 15154                                  		;jcxz	short ioret
 15155                                  		jcxz	ioret
 15156                                  
 15157                                  ; see if the media is formatted or not by checking the flags field in
 15158                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 15159                                  ; go to the error exit at label unformatteddrive.
 15160                                  
 15161                                  		test	byte [es:di+24h], 2
 15162                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 15163                                  					; unformatted_media
 15164                                  		jnz	short unformatteddrive
 15165                                  		mov	[seccnt], cx	; save sector count
 15166                                  		mov	[spsav], sp	; save sp
 15167                                  
 15168                                  ; ensure that we are trying to access valid sectors on the drive
 15169                                  
 15170                                  		mov	ax, dx
 15171                                  		xor	si, si ; 0
 15172                                  		add	dx, cx
 15173                                  		;adc	si, 0
 15174                                  		; 02/09/2023 (PCDOS 7.1)
 15175                                  		rcl	si, 1
 15176                                  		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 15177                                  					; 32 bit sector ?
 15178                                  		jz	short sanity32
 15179                                  		;cmp	si, 0
 15180                                  		; 02/09/2023
 15181                                  		or	si, si
 15182                                  		jnz	short baddrive
 15183                                  		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 15184                                  		ja	short baddrive
 15185                                  		jmp	short sanityok
 15186                                  ; ---------------------------------------------------------------------------
 15187                                  
 15188                                  sanity32:
 15189                                  		add	si, [start_sec_h]
 15190                                  		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 15191                                  		jb	short sanityok
 15192                                  		ja	short baddrive
 15193                                  		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 15194                                  		ja	short baddrive
 15195                                  sanityok:
 15196                                  		mov	dx, [start_sec_h]
 15197                                  		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 15198                                  		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 15199                                  
 15200                                  ; now dx;ax have the physical first sector.
 15201                                  ; since the following procedures is going to destroy ax, let's
 15202                                  ; save it temporarily to saved_word.
 15203                                  
 15204                                  		mov	[saved_word], ax ; save the sector number (low)
 15205                                  
 15206                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 15207                                  ; will do it because we will skip the set up stuff with hard disks.
 15208                                  
 15209                                  		push	es
 15210                                  		;mov	es, [zeroseg]
 15211                                  		; 02/09/2023
 15212                                  		xor	si, si ; 0
 15213                                  		mov	es, si
 15214                                  		les	si, [es:DSKADR]
 15215                                  		;les	si, es:78h	; [es:DSKADR]
 15216                                  					; current disk parm table
 15217                                  		mov	[dpt], si
 15218                                  		mov	[dpt+2], es
 15219                                  		pop	es
 15220                                  		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15221                                  					; fnon_removable
 15222                                  		jnz	short skip_setup
 15223                                  		call	checksingle
 15224                                  
 15225                                  ; check to see if we have previously noted a change line. the routine
 15226                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 15227                                  ; the proper error code.
 15228                                  
 15229                                  		cmp	byte [fhave96], 0 ; do we have changeline support?
 15230                                  		jz	short diskio_nochangeline ; brif not
 15231                                  		call	checklatchio	; will do a sneaky pop stack return
 15232                                  					; if a disk error occurs
 15233                                  diskio_nochangeline:			
 15234                                  		call	iosetup		; set up tables	and variables for i/o
 15235                                  
 15236                                  ; now the settle values are correct for the following code
 15237                                  
 15238                                  skip_setup:
 15239                                  
 15240                                  ; 32 bit sector calculation.
 15241                                  ; dx:[saved_word] = starting sector number.
 15242                                  				
 15243                                  		mov	ax, dx
 15244                                  		xor	dx, dx
 15245                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 15246                                  					 ; divide by sec per track
 15247                                  		; 02/09/2023
 15248                                  		mov	cx, [es:di+13h]
 15249                                  		div	cx
 15250                                  		mov	[temp_h], ax
 15251                                  		mov	ax, [saved_word]
 15252                                  		div	cx ; 02/09/2023
 15253                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 15254                                  					; now, [temp_h]:ax = track #, dx = sector
 15255                                  		;inc	dl		; sector number	is 1 based.
 15256                                  		; 18/12/2022
 15257                                  		inc	dx
 15258                                  		mov	[cursec], dl	; save current sector
 15259                                  		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 15260                                  					; get number of	heads
 15261                                  		push	ax
 15262                                  		xor	dx, dx
 15263                                  		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 15264                                  		div	cx
 15265                                  		mov	[temp_h], ax
 15266                                  		pop	ax
 15267                                  		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 15268                                  		cmp	word [temp_h], 0
 15269                                  		ja	short baddrive_brdg
 15270                                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 15271                                  		ja	short baddrive_brdg
 15272                                  		mov	[curhd], dl	; save current head
 15273                                  		mov	[curtrk], ax	; save current track
 15274                                  
 15275                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 15276                                  ; violations here. not true. we perform the operation as if everything is
 15277                                  ; symmetric; let the int 13 handler worry about the dma violations.
 15278                                  
 15279                                  		mov	ax, [seccnt]
 15280                                  		call	block		; (cas - call/ret)
 15281                                  		;call	done
 15282                                  		;retn
 15283                                  		; 18/12/2022
 15284                                  		jmp	done
 15285                                  %else
 15286                                  		;;;	; 22/12/2023
 15287                                  diskio:
 15288 00000A11 89FB                    		mov	bx, di		; al = drive number
 15289                                  					; cx = sector count
 15290                                  					; dx = first sector (low)
 15291                                  					; [start_sec_h] = first sector (high)
 15292                                  					;
 15293                                  					; es:bx = transfer address
 15294 00000A13 8C06[A804]              		mov	[xfer_seg], es	; save transfer segment
 15295 00000A17 E88AFB                  		call	SetDrive
 15296 00000A1A 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 15297 00000A1E A2[1F01]                		mov	[medbyt], al
 15298 00000A21 E3D8                    		jcxz	ioret
 15299                                  
 15300                                  ; see if the media is formatted or not by checking the flags field in
 15301                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 15302                                  ; go to the error exit at label unformatteddrive.
 15303                                  
 15304 00000A23 26F6454002              		test	byte [es:di+40h], 2 ; [es:di+BDS.flags+1]
 15305                                  					; unformatted_media
 15306 00000A28 75CE                    		jnz	short unformatteddrive
 15307 00000A2A 890E[2201]              		mov	[seccnt], cx	; save sector count
 15308 00000A2E 8926[3501]              		mov	[spsav], sp	; save sp
 15309                                  
 15310                                  ; ensure that we are trying to access valid sectors on the drive
 15311                                  
 15312 00000A32 89D0                    		mov	ax, dx
 15313 00000A34 31F6                    		xor	si, si ; 0
 15314 00000A36 01CA                    		add	dx, cx
 15315 00000A38 D1D6                    		rcl	si, 1
 15316 00000A3A 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 15317                                  					; > 32 bit sector ?
 15318 00000A3F 740E                    		jz	short sanity32
 15319 00000A41 09F6                    		or	si, si
 15320 00000A43 7506                    		jnz	short baddrive
 15321 00000A45 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 15322                                  		;ja	short baddrive
 15323                                  		;jmp	short sanityok
 15324                                  		; 22/12/2023
 15325 00000A49 7616                    		jna	short sanityok
 15326                                  ; 29/12/2023
 15327                                  ; 22/12/2023
 15328                                  ;%if 1
 15329                                  ; ---------------------------------------------------------------------------
 15330                                  
 15331                                  baddrive:
 15332 00000A4B B008                    		mov	al, 8		; sector not found
 15333                                  		;jmp	short baddrive_ret
 15334                                  ; ---------------------------------------------------------------------------
 15335                                  ;unformatteddrive:
 15336                                  		;mov	al, 7		; unknown media
 15337                                  baddrive_ret:
 15338 00000A4D F9                      		stc
 15339                                  ;ioret:
 15340 00000A4E C3                      		retn
 15341                                  ;%endif
 15342                                  
 15343                                  ; ---------------------------------------------------------------------------
 15344                                  
 15345                                  sanity32:
 15346 00000A4F 0336[9C04]              		add	si, [start_sec_h]
 15347 00000A53 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 15348 00000A57 7208                    		jb	short sanityok
 15349 00000A59 77F0                    		ja	short baddrive
 15350 00000A5B 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 15351 00000A5F 77EA                    		ja	short baddrive
 15352                                  sanityok:
 15353 00000A61 8B16[9C04]              		mov	dx, [start_sec_h]
 15354 00000A65 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 15355 00000A69 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 15356                                  
 15357                                  ; now dx;ax have the physical first sector.
 15358                                  ; since the following procedures is going to destroy ax, let's
 15359                                  ; save it temporarily to saved_word.
 15360                                  
 15361 00000A6D A3[9E04]                		mov	[saved_word], ax ; save the sector number (low)
 15362                                  
 15363                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 15364                                  ; will do it because we will skip the set up stuff with hard disks.
 15365                                  
 15366 00000A70 06                      		push	es
 15367 00000A71 31F6                    		xor	si, si ; 0
 15368 00000A73 8EC6                    		mov	es, si
 15369                                  		;les	si, dword ptr es:78h
 15370 00000A75 26C4367800              		les	si, [es:78h]	; INT 1Eh vector address
 15371                                  					; [es:DSKADR] - current disk parm table
 15372 00000A7A 8936[2D01]              		mov	[dpt], si
 15373 00000A7E 8C06[2F01]              		mov	[dpt+2], es
 15374 00000A82 07                      		pop	es
 15375 00000A83 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 15376 00000A88 7510                    		jnz	short chk_13h_ext_flag
 15377 00000A8A E8EAFE                  		call	checksingle
 15378                                  
 15379                                  ; check to see if we have previously noted a change line. the routine
 15380                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 15381                                  ; the proper error code.
 15382                                  
 15383 00000A8D 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 15384 00000A92 7403                    		jz	short diskio_nochangeline ; brif not
 15385 00000A94 E8D210                  		call	checklatchio	; will do a sneaky pop stack return
 15386                                  					; if a disk error occurs
 15387                                  diskio_nochangeline:
 15388 00000A97 E8E000                  		call	iosetup		; set up tables and variables for i/o
 15389                                  
 15390                                  chk_13h_ext_flag:
 15391 00000A9A 26F6454004              		test	byte [es:di+40h], 4 ; [es:di+BDS.flags+1], fLBArw
 15392                                  					; LBA read/write flag
 15393 00000A9F 7539                    		jnz	short set_lbarw_1
 15394                                  		;jmp	skip_setup
 15395                                  		; 22/12/2023
 15396                                  ; ---------------------------------------------------------------------------
 15397                                  
 15398                                  ; now the settle values are correct for the following code
 15399                                  
 15400                                  skip_setup:
 15401                                  
 15402                                  ; 32 bit sector calculation.
 15403                                  ; dx:[saved_word] = starting sector number.
 15404                                  
 15405                                  		;push	bp ; ! (not necessary) ; 22/12/2023
 15406 00000AA1 92                      		xchg	ax, dx ; mov ax,dx
 15407 00000AA2 31D2                    		xor	dx, dx
 15408 00000AA4 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 15409                                  					; divide by sec per track
 15410 00000AA8 F7F1                    		div	cx
 15411 00000AAA 95                      		xchg	ax, bp ; mov bp,ax
 15412 00000AAB A1[9E04]                		mov	ax, [saved_word]
 15413 00000AAE F7F1                    		div	cx		; [es:di+BDS.secpertrack]
 15414                                  					; now, bp:ax = track #, dx = sector
 15415                                  					; sector number is 1 based.
 15416 00000AB0 42                      		inc	dx
 15417 00000AB1 8816[3101]              		mov	[cursec], dl	; save current sector
 15418 00000AB5 268B4D15                		mov	cx, [es:di+15h] ; [es:di+BDS.heads]
 15419                                  					; get number of heads
 15420                                  		; 22/12/2023
 15421                                  		;push	ax ; *
 15422 00000AB9 31D2                    		xor	dx, dx
 15423 00000ABB 95                      		xchg	ax, bp ; bp = *	; divide tracks by heads per cylinder
 15424 00000ABC F7F1                    		div	cx
 15425 00000ABE 95                      		xchg	ax, bp ; ax = *, bp = **
 15426                                  		;pop	ax ; *
 15427 00000ABF F7F1                    		div	cx		; now, bp:ax = cylinder #, dx = head
 15428 00000AC1 09ED                    		or	bp, bp ; ** = 0 ?
 15429                                  		;pop	bp ; ! ; 22/12/2023
 15430                                  		;jnz	short baddrive_brdg
 15431                                  		; 22/12/2023
 15432 00000AC3 7586                    		jnz	short baddrive
 15433                                  
 15434                                  		;cmp	ax, 1024	; 2^10 currently maximum for track #.
 15435                                  		;jnb	short baddrive_brdg
 15436                                  		; 22/12/2023
 15437 00000AC5 80FC04                  		cmp	ah, 4	; if ax >= 4*256 (1024) 
 15438 00000AC8 7381                    		jnb	short baddrive 
 15439                                  
 15440 00000ACA 8816[3201]              		mov	[curhd], dl	; save current head
 15441 00000ACE A3[3301]                		mov	[curtrk], ax	; save current track
 15442                                  
 15443                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 15444                                  ; violations here. not true. we perform the operation as if everything is
 15445                                  ; symmetric; let the int 13 handler worry about the dma violations.
 15446                                  
 15447 00000AD1 A1[2201]                		mov	ax, [seccnt]
 15448 00000AD4 E81F01                  		call	block
 15449                                  		;call	done
 15450                                  		;retn
 15451                                  		; 22/12/2023
 15452 00000AD7 E9E500                  		jmp	done
 15453                                  		
 15454                                  ; ---------------------------------------------------------------------------
 15455                                  
 15456                                  set_lbarw_1:
 15457 00000ADA A1[9E04]                		mov	ax, [saved_word] ; check for mini disk
 15458                                  					 ; (logical dos drive/partition)
 15459 00000ADD 26837D7901              		cmp	word [es:di+79h], 1 ; [di+BDS.bdsm_ismini]
 15460                                  					    ; logical dos partition
 15461 00000AE2 750F                    		jnz	short set_lbarw_2 ; not a logical dos partition/drive
 15462 00000AE4 26837D7B00              		cmp	word [es:di+7Bh], 0 ; [di+BDS.bdsm_hidden_trks] (> 0)
 15463 00000AE9 7408                    		jz	short set_lbarw_2
 15464 00000AEB 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 15465 00000AEF 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 15466                                  
 15467                                  set_lbarw_2:
 15468 00000AF3 2EA3[040A]              		mov	[cs:dap_lba_value], ax
 15469 00000AF7 2E8916[060A]            		mov	[cs:dap_lba_value+2], dx
 15470 00000AFC 2E891E[000A]            		mov	[cs:dap_trans_buf], bx
 15471 00000B01 A1[A804]                		mov	ax, [xfer_seg]
 15472 00000B04 2EA3[020A]              		mov	[cs:dap_trans_buf+2], ax
 15473 00000B08 A1[2201]                		mov	ax, [seccnt]
 15474 00000B0B 2EA3[FE09]              		mov	[cs:dap_block_cnt], ax
 15475 00000B0F BD0500                  		mov	bp, 5
 15476 00000B12 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 15477 00000B16 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count
 15478                                  
 15479                                  set_lbarw_3:
 15480 00000B1A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 15481 00000B1E 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 15482 00000B22 80C440                  		add	ah, 40h
 15483 00000B25 30C0                    		xor	al, al
 15484 00000B27 1E                      		push	ds
 15485 00000B28 0E                      		push	cs
 15486 00000B29 1F                      		pop	ds
 15487 00000B2A BE[FC09]                		mov	si, LBA_Packet
 15488 00000B2D CD13                    		int	13h		; LBA read/write
 15489 00000B2F 1F                      		pop	ds
 15490 00000B30 731A                    		jnc	short set_lbarw_7
 15491 00000B32 E8AC02                  		call	again
 15492                                  set_lbarw_9:
 15493 00000B35 7503                    		jnz	short set_lbarw_4
 15494 00000B37 E92B02                  		jmp	harderr
 15495                                  ; ---------------------------------------------------------------------------
 15496                                  
 15497                                  set_lbarw_4:
 15498                                  ;set_lbarw_9:	; 22/12/2023
 15499 00000B3A 80FCCC                  		cmp	ah, 0CCh	; Write fault (hard disk)
 15500 00000B3D 7505                    		jnz	short set_lbarw_5
 15501 00000B3F BD0100                  		mov	bp, 1
 15502                                  		;jmp	short set_lbarw_6
 15503                                  		; 17/04/2024
 15504 00000B42 EBD6                    		jmp	short set_lbarw_3
 15505                                  ; ---------------------------------------------------------------------------
 15506                                  
 15507                                  set_lbarw_5:
 15508                                  set_lbarw_10:	; 22/12/2023
 15509 00000B44 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 15510                                  set_lbarw_6:
 15511                                  set_lbarw_11:
 15512 00000B4A EBCE                    		jmp	short set_lbarw_3
 15513                                  ; ---------------------------------------------------------------------------
 15514                                  
 15515                                  set_lbarw_7:
 15516 00000B4C 813E[2001]0301          		cmp	word [rflag], 103h
 15517 00000B52 7523                    		jnz	short set_lbarw_12
 15518 00000B54 B444                    		mov	ah, 44h
 15519 00000B56 1E                      		push	ds
 15520 00000B57 0E                      		push	cs
 15521 00000B58 1F                      		pop	ds
 15522 00000B59 CD13                    		int	13h		; DISK - IBM/MS Extension - VERIFY SECTORS
 15523                                  					;  (DL - drive, [SI - disk address packet)
 15524 00000B5B 1F                      		pop	ds
 15525 00000B5C 7319                    		jnc	short set_lbarw_12
 15526 00000B5E 80FC11                  		cmp	ah, 11h		; ECC corrected data error (soft error - retried OK )
 15527 00000B61 7506                    		jnz	short set_lbarw_8
 15528 00000B63 FF0E[A504]              		dec	word [soft_ecc_cnt]
 15529                                  ;set_lbarw_8:
 15530 00000B67 740E                    		jz	short set_lbarw_12
 15531                                  set_lbarw_8:
 15532 00000B69 E8CF07                  		call	ResetDisk
 15533 00000B6C 80FC11                  		cmp	ah, 11h
 15534 00000B6F 74D9                    		jz	short set_lbarw_11
 15535 00000B71 FF0E[A304]              		dec	word [vretry_cnt]
 15536                                  		;jnz	short set_lbarw_9
 15537                                  		;jmp	harderr
 15538                                  		; 22/12/2023
 15539 00000B75 EBBE                    		jmp	short set_lbarw_9
 15540                                  
 15541                                  ; ---------------------------------------------------------------------------
 15542                                  ;		; 22/12/2023
 15543                                  ;set_lbarw_9:
 15544                                  ;		cmp	ah, 0CCh
 15545                                  ;		jnz	short set_lbarw_10
 15546                                  ;		mov	bp, 1
 15547                                  ;		jmp	short set_lbarw_11
 15548                                  ; ---------------------------------------------------------------------------
 15549                                  ;		; 22/12/2023
 15550                                  ;set_lbarw_10:
 15551                                  ;		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 15552                                  ;set_lbarw_11:
 15553                                  ;		jmp	short set_lbarw_3
 15554                                  ; ---------------------------------------------------------------------------
 15555                                  
 15556                                  set_lbarw_12:
 15557 00000B77 31C0                    		xor	ax, ax
 15558                                  skip_dpt_setting:	; 23/12/2023
 15559 00000B79 C3                      		retn
 15560                                  		;;;	; 22/12/2023
 15561                                  %endif
 15562                                  
 15563                                  ; ---------------------------------------------------------------------------
 15564                                  
 15565                                  		; 22/12/2023
 15566                                  ;baddrive_brdg:
 15567                                  		;jmp	baddrive
 15568                                  
 15569                                  ; =============== S U B	R O U T	I N E =======================================
 15570                                  
 15571                                  ;--------------------------------------------------------------
 15572                                  ; set the drive-last-accessed flag for diskette only.
 15573                                  ; we know that the hard disk will not be removed.
 15574                                  ; es:di -> current bds.
 15575                                  ; ds -> Bios_Data
 15576                                  ; ax,cx,si are destroyed.
 15577                                  ;--------------------------------------------------------------
 15578                                  
 15579                                  		; 23/12/2023 - Retro DOS v5.0
 15580                                  
 15581                                  		; 19/10/2022
 15582                                  iosetup:
 15583 00000B7A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 15584 00000B7E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 15585                                  
 15586                                  ; determine proper head settle values
 15587                                  
 15588 00000B81 803E[A905]00            		cmp	byte [media_set_for_format], 0
 15589 00000B86 75F1                    		jnz	short skip_dpt_setting
 15590 00000B88 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 15591 00000B8B 1E                      		push	ds
 15592 00000B8C C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 15593 00000B90 884404                  		mov	[si+4],	al
 15594                                  		
 15595                                  		;; 23/12/2023
 15596                                  		;mov	ah, al
 15597                                  		;mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 15598                                  		;;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 15599                                  		;pop	ds
 15600                                  		;mov	[motorstartup], al
 15601                                  		;mov	[save_eot], ah
 15602                                  		; 06/04/2024
 15603 00000B93 8A640A                  		mov	ah,[si+10]
 15604 00000B96 1F                      		pop	ds
 15605 00000B97 8826[2601]              		mov	[motorstartup], ah
 15606 00000B9B A2[2B01]                		mov	[save_eot], al
 15607                                  
 15608                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 15609                                  ; motor start time to 4. this checking for every i/o is going to affect
 15610                                  ; performance across the board, but is necessary!!
 15611                                  
 15612 00000B9E 1E                      		push	ds
 15613 00000B9F C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 15614                                  		; 23/12/2023  - Retro DOS v5.0
 15615 00000BA3 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; (PCDOS 7.1 IBMBIO.COM)
 15616                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 15617                                  					; ffSmall
 15618 00000BA8 7505                    		jnz	short motor_start_ok
 15619 00000BAA B004                    		mov	al, 4
 15620 00000BAC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 15621                                  motor_start_ok:
 15622                                  
 15623                                  ; ds:si now points to disk parameter table.
 15624                                  ; get current settle and set fast settle
 15625                                  
 15626                                  		;xor	al, al
 15627                                  		;inc	al		; ibm wants fast settle	to be 1
 15628                                  		; 18/12/2022
 15629 00000BAF 31C0                    		xor	ax, ax
 15630 00000BB1 40                      		inc	ax
 15631 00000BB2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 15632                                  					; get settle and set up	for fast
 15633 00000BB5 1F                      		pop	ds
 15634 00000BB6 A2[2701]                		mov	[settlecurrent], al
 15635 00000BB9 B00F                    		mov	al, 15		; NORMSETTLE
 15636                                  					; someone has diddled the settle
 15637 00000BBB A2[2801]                		mov	[settleslow], al
 15638                                  		; 23/12/2023
 15639                                  ;skip_dpt_setting:
 15640 00000BBE C3                      		retn
 15641                                  
 15642                                  ; =============== S U B	R O U T	I N E =======================================
 15643                                  
 15644                                  ;--------------------------------------------------------------
 15645                                  ; set time of last access, and reset default values in the dpt.
 15646                                  ;
 15647                                  ;	  note: trashes (at least) si
 15648                                  ;--------------------------------------------------------------
 15649                                  
 15650                                  		; 23/12/2023 - Retro DOS v5.0
 15651                                  
 15652                                  		; 19/10/2022
 15653                                  done:		
 15654                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15655                                  					; fnon_removable
 15656                                  		; 23/12/2023
 15657 00000BBF 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 15658 00000BC4 752F                    		jnz	short ddbx	; do not set for non-removable media
 15659 00000BC6 E8F801                  		call	set_tim
 15660                                  ;diddleback:
 15661                                  ; 09/12/2022
 15662                                  diddle_back:
 15663 00000BC9 9C                      		pushf
 15664 00000BCA 803E[A905]00            		cmp	byte [media_set_for_format], 0
 15665 00000BCF 7523                    		jnz	short nodiddleback
 15666 00000BD1 50                      		push	ax
 15667 00000BD2 06                      		push	es
 15668 00000BD3 C436[2D01]              		les	si, [dpt]
 15669 00000BD7 A0[2B01]                		mov	al, [save_eot]
 15670 00000BDA 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 15671 00000BDE A0[2701]                		mov	al, [settlecurrent]
 15672 00000BE1 8A26[2601]              		mov	ah, [motorstartup]
 15673 00000BE5 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 15674 00000BE9 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 15675 00000BEE 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 15676 00000BF2 07                      		pop	es
 15677 00000BF3 58                      		pop	ax
 15678                                  nodiddleback:
 15679 00000BF4 9D                      		popf
 15680                                  ddbx:
 15681 00000BF5 C3                      		retn
 15682                                  
 15683                                  ; =============== S U B	R O U T	I N E =======================================
 15684                                  
 15685                                  ;--------------------------------------------------------------
 15686                                  ;read the number of sectors specified in ax,
 15687                                  ;handling track boundaries
 15688                                  ;es:di -> bds for this drive
 15689                                  ;--------------------------------------------------------------
 15690                                  
 15691                                  		; 23/12/2023 - Retro DOS v5.0
 15692                                  
 15693                                  		; 19/10/2022
 15694                                  block:	
 15695 00000BF6 09C0                    		or	ax, ax
 15696 00000BF8 74FB                    		jz	short ddbx
 15697                                  		; 23/12/2023
 15698 00000BFA 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 15699                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15700                                  					    ; fnon_removable
 15701 00000BFF 740D                    		jz	short block_floppy
 15702                                  
 15703                                  ; check	to see if multi	track operation	is allowed. if not
 15704                                  ; we have to go	to the block_floppy below to break up the operation.
 15705                                  
 15706 00000C01 F606[A004]80            		test	byte [multrk_flag], 80h
 15707                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 15708 00000C06 7406                    		jz	short block_floppy
 15709 00000C08 E82800                  		call	Disk
 15710 00000C0B 31C0                    		xor	ax, ax
 15711 00000C0D C3                      		retn
 15712                                  ; ---------------------------------------------------------------------------
 15713                                  
 15714                                  block_floppy:
 15715                                  
 15716                                  ; read at most 1 track worth. perform minimization at sector / track
 15717                                  
 15718 00000C0E 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 15719                                  		;inc	cl
 15720                                  		; 23/12/2023
 15721 00000C12 41                      		inc	cx
 15722 00000C13 2A0E[3101]              		sub	cl, [cursec]
 15723 00000C17 30ED                    		xor	ch, ch
 15724 00000C19 39C8                    		cmp	ax, cx
 15725 00000C1B 7302                    		jnb	short gotmin
 15726 00000C1D 89C1                    		mov	cx, ax
 15727                                  gotmin:
 15728                                  
 15729                                  ; ax is the requested number of sectors to read
 15730                                  ; cx is the number that we can do on this track
 15731                                  
 15732 00000C1F 50                      		push	ax
 15733 00000C20 51                      		push	cx
 15734 00000C21 89C8                    		mov	ax, cx
 15735 00000C23 E80D00                  		call	Disk
 15736 00000C26 59                      		pop	cx
 15737 00000C27 58                      		pop	ax
 15738                                  
 15739                                  ; cx is the number of sectors just transferred
 15740                                  
 15741 00000C28 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 15742 00000C2A D0E1                    		shl	cl, 1
 15743 00000C2C 00CF                    		add	bh, cl		; adjust transfer address
 15744 00000C2E EBC6                    		jmp	short block
 15745                                  dskerr_brdg:
 15746 00000C30 E9F400                  		jmp	dskerr
 15747                                  
 15748                                  ; =============== S U B	R O U T	I N E =======================================
 15749                                  
 15750                                  ; 15/10/2022
 15751                                  
 15752                                  ;--------------------------------------------------------------
 15753                                  ;perform disk i/o with retries
 15754                                  ; al = number of sectors (1-8, all on one track)
 15755                                  ; es:di point to drive parameters
 15756                                  ; xfer_seg:bx = transfer address 
 15757                                  ;		(must not cross a 64k physical boundary)
 15758                                  ; [rflag] = 2 if read, 3 if write
 15759                                  ; [verify] = 0 for normal, 1 for verify after write
 15760                                  ;--------------------------------------------------------------
 15761                                  
 15762                                  		; 18/04/2024
 15763                                  		; 23/12/2023 - Retro DOS v5.0
 15764                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0C74h)
 15765                                  
 15766                                  		; 19/10/2022
 15767                                  Disk:
 15768                                  
 15769                                  ; Check for hard disk format and
 15770                                  ; if TRUE then set max error count to 2
 15771                                  
 15772 00000C33 BD0500                  		mov	bp, 5		; MAXERR
 15773                                  					; set up retry count
 15774                                  		; 18/04/2024
 15775                                  		;; 23/12/2023
 15776                                  		;mov	cl, [es:di+3Fh]
 15777                                  		;and	cx, 1
 15778 00000C36 26F6453F01              		test	byte [es:di+3Fh], 1
 15779                                  		;test	byte [es:di+23h], 1 
 15780                                  					; [es:di+BDS.flags], fnon_removable
 15781 00000C3B 7408                    		jz	short GetRdWrInd
 15782 00000C3D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 15783 00000C40 7403                    		jz	short GetRdWrInd
 15784 00000C42 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 15785                                  GetRdWrInd:				
 15786 00000C45 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 15787 00000C49 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 15788 00000C4D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 15789                                  ;retry:
 15790                                  ; 09/12/2022
 15791                                  _retry:
 15792 00000C51 50                      		push	ax
 15793 00000C52 8B16[3301]              		mov	dx, [curtrk]
 15794                                  		;; 23/12/2023
 15795                                  		;jcxz	disk_not_mini
 15796                                  		; 18/04/2024
 15797 00000C56 26F6453F01              		test	byte [es:di+3Fh], 1
 15798                                  		;test	byte [es:di+23h], 1
 15799 00000C5B 740B                    		jz	short disk_not_mini
 15800                                  
 15801                                  		; 23/12/2023
 15802 00000C5D 26837D7901              		cmp	word [es:di+79h], 1
 15803                                  		;cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 15804                                  					; is this a mini disk? ((logical dos partition))
 15805 00000C62 7504                    		jnz	short disk_not_mini ; no. continue to next.
 15806                                  		; 23/12/2023
 15807 00000C64 2603557B                		add     dx, [es:di+7Bh]
 15808                                  		;add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 15809                                  					; add hidden trks.
 15810                                  disk_not_mini:
 15811 00000C68 D0CE                    		ror	dh, 1
 15812 00000C6A D0CE                    		ror	dh, 1
 15813 00000C6C 0A36[3101]              		or	dh, [cursec]
 15814 00000C70 89D1                    		mov	cx, dx
 15815 00000C72 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 15816 00000C74 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 15817 00000C78 268A5504                		mov	dl, [es:di+4]	; physical drive number
 15818                                  					; [es:di+BDS.drivenum]
 15819                                  		; 23/12/2023
 15820 00000C7C 26807D3E05              		cmp	byte [es:di+3Eh], 5 
 15821                                  		;cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 15822 00000C81 7411                    		jz	short do_fast	; hard files use fast speed
 15823                                  
 15824                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 15825                                  ; this helps when we have just done a reset disk operation and the head has
 15826                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 15827                                  
 15828 00000C83 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 15829                                  		;jz	short do_writej
 15830                                  		; 23/12/2023
 15831 00000C88 746A                    		jz	short do_write
 15832 00000C8A 80FC02                  		cmp	ah, 2		; romread
 15833 00000C8D 7405                    		jz	short do_fast
 15834 00000C8F 80FC04                  		cmp	ah, 4		; romverify
 15835                                  		;jz	short do_fast
 15836                                  		; 23/12/2023
 15837 00000C92 7560                    		jnz	short do_write
 15838                                  ;do_writej:
 15839                                  
 15840                                  ; reads always fast, unless we have just done a disk reset operation
 15841                                  			
 15842                                  		;jmp	short do_write	; reads	always fast
 15843                                  ; ---------------------------------------------------------------------------
 15844                                  
 15845                                  do_fast:
 15846 00000C94 E80501                  		call	fastspeed	; change settle	mode
 15847                                  testerr:
 15848 00000C97 7297                    		jb	short dskerr_brdg
 15849                                  
 15850                                  		; 23/12/2023 Retro DOS v5.0
 15851                                  		; (PCDOS 7.1 IBMBIO.COM)
 15852 00000C99 83FD05                  		cmp	bp, 5		; is there retry ?
 15853 00000C9C 7505                    		jnz	short testerror	; yes
 15854 00000C9E 80FCBB                  		cmp	ah, 0BBh	; Undefined error (hard disk)
 15855 00000CA1 748D                    		jz	short dskerr_brdg
 15856                                  testerror:
 15857                                  
 15858                                  ; set drive and track of last access
 15859                                  
 15860 00000CA3 8816[7600]              		mov	[step_drv], dl
 15861                                  		; 23/12/2023
 15862 00000CA7 26886D78                		mov	[es:di+78h], ch
 15863                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 15864                                  no_set:
 15865                                  		;cmp	word [wrtverify], 103h
 15866 00000CAB 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 15867 00000CB1 7452                    		jz	short doverify
 15868                                  noverify:
 15869 00000CB3 58                      		pop	ax
 15870                                  
 15871                                  ; check the flags word in the bds to see if the drive is non removable
 15872                                  ; if not we needn't do anything special
 15873                                  ; if it is a hard disk then check to see if multi-track operation
 15874                                  ; is specified. if specified we don't have to calculate for the next
 15875                                  ; track since we are already done. so we can go to the exit of this routine.
 15876                                  
 15877                                  		; 23/12/2023
 15878 00000CB4 26F6453F01              		test	byte [es:di+3Fh], 1
 15879                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15880                                  					; fnon_removable
 15881 00000CB9 7407                    		jz	short its_removable
 15882 00000CBB F606[A004]80            		test	byte [multrk_flag], 80h ; multrk_on
 15883 00000CC0 7530                    		jnz	short disk_ret
 15884                                  its_removable:
 15885 00000CC2 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 15886 00000CC5 30E4                    		xor	ah, ah
 15887 00000CC7 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 15888 00000CCB 00C1                    		add	cl, al
 15889 00000CCD 880E[3101]              		mov	[cursec], cl
 15890 00000CD1 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 15891                                  					; see if sector/track limit reached
 15892 00000CD5 761B                    		jbe	short disk_ret
 15893 00000CD7 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 15894 00000CDC 8A36[3201]              		mov	dh, [curhd]
 15895 00000CE0 FEC6                    		inc	dh
 15896 00000CE2 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 15897 00000CE6 7206                    		jb	short noxor
 15898 00000CE8 30F6                    		xor	dh, dh
 15899 00000CEA FF06[3301]              		inc	word [curtrk]
 15900                                  noxor:
 15901 00000CEE 8836[3201]              		mov	[curhd], dh
 15902                                  disk_ret:
 15903 00000CF2 F8                      		clc
 15904 00000CF3 C3                      		retn
 15905                                  ; ---------------------------------------------------------------------------
 15906                                  
 15907                                  ; 15/10/2022
 15908                                  
 15909                                  ; 24/12/2023 - Retro DOS v5.0
 15910                                  
 15911                                  ;--------------------------------------------------------------
 15912                                  ; the request is for write. determine if we are talking about
 15913                                  ; the same track and drive. if so, use the fast speed.
 15914                                  ;--------------------------------------------------------------
 15915                                  
 15916                                  do_write:
 15917 00000CF4 3A16[7600]              		cmp	dl, [step_drv]
 15918 00000CF8 7506                    		jnz	short do_norm	; we have changed drives
 15919                                  		; 24/12/2023
 15920 00000CFA 263A6D78                		cmp	ch, [es:di+78h]
 15921                                  		;cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 15922 00000CFE 7494                    		jz	short do_fast	; we are still on the same track
 15923                                  do_norm:
 15924 00000D00 E87500                  		call	normspeed
 15925 00000D03 EB92                    		jmp	short testerr
 15926                                  ; ---------------------------------------------------------------------------
 15927                                  
 15928                                  ;--------------------------------------------------------------
 15929                                  ; we have a verify request also. get state info and go verify
 15930                                  ;--------------------------------------------------------------
 15931                                  
 15932                                  doverify:
 15933 00000D05 58                      		pop	ax
 15934 00000D06 50                      		push	ax
 15935 00000D07 B404                    		mov	ah, 4
 15936 00000D09 E89000                  		call	fastspeed
 15937 00000D0C 73A5                    		jnb	short noverify
 15938                                  
 15939                                  ; check the error returned in ah to see if it is a soft ecc error.
 15940                                  ; if it is not we needn't do anything special. if it is a soft
 15941                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 15942                                  ; this retry count becomes 0 then we just ignore the error and go to
 15943                                  ; no_verify but if we can still try then we call the routine to reset
 15944                                  ; the disk and go to dskerr1 to retry the operation.
 15945                                  
 15946 00000D0E 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 15947 00000D11 750B                    		jnz	short not_softecc_err
 15948 00000D13 FF0E[A504]              		dec	word [soft_ecc_cnt]
 15949 00000D17 749A                    		jz	short noverify	; no more retry
 15950 00000D19 E81F06                  		call	ResetDisk	; reset	disk
 15951 00000D1C EB3E                    		jmp	short dskerr1	; retry
 15952                                  ; ---------------------------------------------------------------------------
 15953                                  
 15954                                  not_softecc_err:			; other error.
 15955 00000D1E E81A06                  		call	ResetDisk
 15956 00000D21 FF0E[A304]              		dec	word [vretry_cnt]
 15957 00000D25 EB1C                    		jmp	short dskerr0
 15958                                  ; ---------------------------------------------------------------------------
 15959                                  
 15960                                  ;--------------------------------------------------------------
 15961                                  ; need to special case the change-line error ah=06h.
 15962                                  ; if we get this, we need to return it.
 15963                                  ;--------------------------------------------------------------
 15964                                  
 15965                                  dskerr:
 15966 00000D27 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 15967 00000D2C 7403                    		jz	short dskerr_nochangeline ; brif not
 15968 00000D2E E8BE0E                  		call	checkio
 15969                                  dskerr_nochangeline:
 15970 00000D31 803E[A704]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 15971 00000D36 7508                    		jnz	short dochkagain ; no more retry.
 15972 00000D38 BD0100                  		mov	bp, 1
 15973 00000D3B C606[A704]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 15974                                  dochkagain:
 15975 00000D40 E89E00                  		call	again
 15976                                  dskerr0:
 15977 00000D43 7420                    		jz	short harderr
 15978                                  		; 24/12/2023
 15979 00000D45 26F6453F01              		test	byte [es:di+3Fh], 1
 15980                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15981                                  					; fnon_removable
 15982 00000D4A 7505                    		jnz	short skip_timeout_chk
 15983 00000D4C 80FC80                  		cmp	ah, 80h		; timeout?
 15984 00000D4F 7414                    		jz	short harderr
 15985                                  skip_timeout_chk:
 15986 00000D51 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 15987 00000D54 740A                    		jz	short write_fault_err ;	then, don't retry.
 15988 00000D56 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 15989                                  					; set soft_ecc_cnt back	to maxerr
 15990                                  dskerr1:
 15991 00000D5C 58                      		pop	ax		; restore sector count
 15992                                  		;jmp	retry
 15993                                  		; 09/12/2022
 15994 00000D5D E9F1FE                  		jmp	_retry
 15995                                  ; ---------------------------------------------------------------------------
 15996                                  
 15997                                  write_fault_err:
 15998 00000D60 BD0100                  		mov	bp, 1		; just retry only once
 15999                                  					; for write fault error.
 16000 00000D63 EBF7                    		jmp	short dskerr1
 16001                                  
 16002                                  		; fall into harderr
 16003                                  ; ---------------------------------------------------------------------------
 16004                                  
 16005                                  ; entry point for routines that call maperror themselves
 16006                                  
 16007                                  harderr:
 16008 00000D65 E84100                  		call	maperror
 16009                                  harderr2:
 16010 00000D68 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 16011                                  					; force a media check through rom
 16012 00000D6D 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 16013 00000D71 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 16014                                  
 16015                                  ; since we are performing a non-local goto, restore the disk parameters
 16016                                  
 16017                                  		;jmp	diddleback
 16018                                  		; 09/12/2022
 16019 00000D75 E951FE                  		jmp	diddle_back
 16020                                  
 16021                                  ; =============== S U B	R O U T	I N E =======================================
 16022                                  
 16023                                  ; change settle value from settlecurrent to whatever is appropriate
 16024                                  ; note that this routine is never called for a fixed disk.
 16025                                  
 16026                                  		; 19/10/2022
 16027                                  normspeed:
 16028 00000D78 803E[A905]00            		cmp	byte [media_set_for_format], 0
 16029 00000D7D 751D                    		jnz	short fastspeed
 16030 00000D7F 06                      		push	es
 16031 00000D80 50                      		push	ax
 16032 00000D81 A0[2801]                		mov	al, [settleslow]
 16033 00000D84 C436[2D01]              		les	si, [dpt]	; current disk parm table
 16034 00000D88 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16035 00000D8C 58                      		pop	ax
 16036 00000D8D 07                      		pop	es
 16037 00000D8E E80B00                  		call	fastspeed
 16038                                  		; 24/12/2023
 16039                                  		;push	es
 16040                                  		;les	si, [dpt]
 16041                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16042                                  		;			; 1 is fast settle value
 16043                                  		;pop	es
 16044 00000D91 1E                      		push	ds
 16045 00000D92 C536[2D01]              		lds	si, [dpt]
 16046 00000D96 C6440901                		mov	byte [si+9], 1
 16047 00000D9A 1F                      		pop	ds
 16048                                  
 16049 00000D9B C3                      		retn
 16050                                  
 16051                                  ; =============== S U B	R O U T	I N E =======================================
 16052                                  
 16053                                  ; if the drive has been marked as too big (i.e. starting sector of the
 16054                                  ; partition is > 16 bits, then always return drive not ready.
 16055                                  
 16056                                  		; 24/12/2023 - Retro DOS v5.0
 16057                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0DDDh)
 16058                                  fastspeed:
 16059                                  		;;test	byte [es:di+3Bh], 80h ; [es:di+BDS.fatsiz]
 16060                                  		;test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 16061                                  		;			; ftoobig
 16062                                  		;jnz	short notready
 16063 00000D9C 06                      		push	es
 16064 00000D9D 8E06[A804]              		mov	es, [xfer_seg]
 16065 00000DA1 CD13                    		int	13h		; DISK -
 16066 00000DA3 8C06[A804]              		mov	[xfer_seg], es
 16067 00000DA7 07                      		pop	es
 16068 00000DA8 C3                      		retn
 16069                                  ; ---------------------------------------------------------------------------
 16070                                  ;		; 24/12/2023
 16071                                  ;notready:
 16072                                  		;stc
 16073                                  		;mov	ah, 80h
 16074                                  		;retn
 16075                                  
 16076                                  ; =============== S U B	R O U T	I N E =======================================
 16077                                  
 16078                                  ; map error returned by rom in ah into corresponding code to be returned to
 16079                                  ; dos in al. trashes di. guaranteed to set carry.
 16080                                  
 16081                                  maperror:
 16082 00000DA9 51                      		push	cx
 16083 00000DAA 06                      		push	es
 16084 00000DAB 1E                      		push	ds		; set es=Bios_Data
 16085 00000DAC 07                      		pop	es
 16086 00000DAD 88E0                    		mov	al, ah		; put error code in al
 16087 00000DAF A2[4601]                		mov	[lsterr], al	; terminate list with error code
 16088                                  		; 24/12/2023
 16089 00000DB2 B90B00                  		mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 16090                                  		;mov	cx, 9		; numerr (= errout-errin)
 16091                                  					; number of possible error conditions
 16092 00000DB5 BF[3C01]                		mov	di, errin	; point to error conditions
 16093 00000DB8 F2AE                    		repne scasb
 16094                                  
 16095                                  		; 24/12/2023
 16096                                  		; 02/09/2023
 16097 00000DBA 8A450A                  		mov	al, [di+10] ; PCDOS 7.1 IBMBIO.COM
 16098                                  		; 10/12/2022
 16099                                  		;mov	al, [di+8]	; [di+numerr-1]
 16100                                  					; get translation
 16101                                  		; 19/10/2022 - Temporary ! 
 16102                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 16103 00000DBD 07                      		pop	es
 16104 00000DBE 59                      		pop	cx
 16105 00000DBF F9                      		stc			; flag error condition
 16106 00000DC0 C3                      		retn
 16107                                  
 16108                                  ; =============== S U B	R O U T	I N E =======================================
 16109                                  
 16110                                  ; set the time of last access for this drive.
 16111                                  ; this is done only for removable media. es:di -> bds
 16112                                  
 16113                                  set_tim:
 16114 00000DC1 50                      		push	ax
 16115 00000DC2 E86CF7                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 16116                                  
 16117                                  ; we have the new time. if we see that the time has passed,
 16118                                  ; then we reset the threshold counter...
 16119                                  
 16120                                  		; 24/12/2023 - Retro DOS v5.0
 16121 00000DC5 263B5579                		cmp	dx, [es:di+79h]	; PCDOS 7.1 IBMBIO.COM
 16122                                  		;cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 16123 00000DC9 7506                    		jne	short setaccess
 16124                                  		; 24/12/2023
 16125 00000DCB 263B4D7B                		cmp	cx, [es:di+7Bh]	; PCDOS 7.1 IBMBIO.COM
 16126                                  		;cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 16127                                  		;jz	short done_set
 16128                                  		; 12/12/2022
 16129 00000DCF 740E                    		je	short done_set2
 16130                                  setaccess:
 16131 00000DD1 C606[1D01]00            		mov	byte [accesscount], 0
 16132                                  		
 16133                                  		; 24/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16134 00000DD6 26895579                		mov	[es:di+79h], dx
 16135 00000DDA 26894D7B                		mov	[es:di+7Bh], cx
 16136                                  		;mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 16137                                  		;mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 16138                                  done_set:
 16139 00000DDE F8                      		clc
 16140                                  done_set2:		; 12/12/2022
 16141 00000DDF 58                      		pop	ax
 16142 00000DE0 C3                      		retn
 16143                                  
 16144                                  ; =============== S U B	R O U T	I N E =======================================
 16145                                  
 16146                                  ; this routine is called if an error occurs while formatting or verifying.
 16147                                  ; it resets the drive,and decrements the retry count.
 16148                                  ; on entry - ds:di - points to bds for the drive
 16149                                  ;	     bp    - contains retry count
 16150                                  ; on exit    flags indicate result of decrementing retry count
 16151                                  
 16152                                  again:
 16153 00000DE1 E85705                  		call	ResetDisk
 16154 00000DE4 80FC06                  		cmp	ah, 6
 16155 00000DE7 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 16156                                  					; do not decrement retry count.
 16157 00000DE9 4D                      		dec	bp		; decrement retry count
 16158 00000DEA C3                      		retn
 16159                                  ; ---------------------------------------------------------------------------
 16160                                  
 16161                                  dont_dec_retry_count:
 16162 00000DEB 08E4                    		or	ah, ah
 16163 00000DED C3                      		retn
 16164                                  
 16165                                  ;----------------------------------------------------------------------------
 16166                                  ; Retro DOS v5.0 - PCDOS 7.1 IBMBIO.COM - BIOSCODE:0E30h
 16167                                  ;----------------------------------------------------------------------------
 16168                                  ; 24/12/2023 - Retro DOS v5.0
 16169                                  ;;;;
 16170                                  
 16171 00000DEE 00                      ioctl_drvnum:	db 0
 16172                                  
 16173                                  		; 24/12/2023
 16174                                  
 16175                                  ; =============== S U B R O U T I N E =======================================
 16176                                  
 16177                                  get_phy_drv_num:
 16178 00000DEF E8B2F7                  		call	SetDrive	; get physical drive number
 16179                                  					; INPUT: al = logical drive number (BDS.drivelet)
 16180                                  					; OUTPUT: physical drive number (BDS.drivenum)
 16181 00000DF2 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16182 00000DF6 C3                      		retn
 16183                                  
 16184                                  ; =============== S U B R O U T I N E =======================================
 16185                                  
 16186                                  		; 24/12/2023
 16187                                  ioctl_output:
 16188 00000DF7 E8F5FF                  		call	get_phy_drv_num
 16189 00000DFA 2E8816[EE0D]            		mov	[cs:ioctl_drvnum], dl
 16190 00000DFF B441                    		mov	ah, 41h
 16191 00000E01 BBAA55                  		mov	bx, 55AAh
 16192 00000E04 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 16193                                  					; BX = 55AAh, DL = drive number
 16194                                  					; Return: CF set if not supported
 16195                                  					; AH = extensions version
 16196                                  					; BX = AA55h
 16197                                  					; CX = Interface support bit map
 16198 00000E06 7235                    		jc	short int13h_exts_err
 16199                                  ioctl_input_1:
 16200 00000E08 C43E[1200]              		les	di, [ptrsav]
 16201 00000E0C 26C47D0E                		les	di, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 16202 00000E10 723E                    		jc	short ioctl_input_2
 16203 00000E12 B80046                  		mov	ax, 4600h	; Eject removable media
 16204 00000E15 263805                  		cmp	[es:di], al	; al = 0 ; disk ioctl function = 0
 16205 00000E18 7417                    		je	short ioctl_output_1
 16206 00000E1A 26803D01                		cmp	byte [es:di], 1 ; al = 1 ; disk ioctl function = 1
 16207 00000E1E 751B                    		jne	short ioctl_output_2
 16208 00000E20 B80145                  		mov	ax, 4501h	; Lock/unlock media
 16209                                  					; (al, 0 = lock, 1 = unlock)
 16210 00000E23 26807D0100              		cmp	byte [es:di+1], 0 ; unlock (reverse of INT 13h ah=45h)
 16211 00000E28 7407                    		jz	short ioctl_output_1
 16212 00000E2A 26384501                		cmp	[es:di+1], al	; lock (reverse of INT 13h ah=45h)
 16213 00000E2E 750B                    		jne	short ioctl_output_2
 16214 00000E30 48                      		dec	ax
 16215                                  ioctl_output_1:
 16216 00000E31 2E8A16[EE0D]            		mov	dl, [cs:ioctl_drvnum]
 16217 00000E36 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 16218 00000E38 7203                    		jc	short int13h_exts_err
 16219                                  ioctl_lock_err:
 16220                                  		; cf=0
 16221                                  ioctl_output_ret:
 16222                                  		;clc
 16223 00000E3A C3                      		retn
 16224                                  ; ---------------------------------------------------------------------------
 16225                                  
 16226                                  ioctl_output_2:
 16227 00000E3B B401                    		mov	ah, 1
 16228                                  int13h_exts_err:
 16229 00000E3D 80FCB0                  		cmp	ah, 0B0h	; volume not locked in drive
 16230 00000E40 74F8                    		je	short ioctl_lock_err
 16231 00000E42 80FCB4                  		cmp	ah, 0B4h	; lock count exceeded
 16232 00000E45 74F3                    		je	short ioctl_lock_err
 16233 00000E47 E9DAF7                  		jmp	err_exitj
 16234                                  
 16235                                  ; =============== S U B R O U T I N E =======================================
 16236                                  
 16237                                  		; 24/12/2023
 16238                                  ioctl_input:
 16239 00000E4A E8A2FF                  		call	get_phy_drv_num
 16240 00000E4D F9                      		stc
 16241 00000E4E EBB8                    		jmp	short ioctl_input_1
 16242                                  ioctl_input_2:
 16243 00000E50 26803D06                		cmp	byte [es:di], 6	; disk ioctl function = 6
 16244 00000E54 75E5                    		jne	short ioctl_output_2
 16245 00000E56 B80245                  		mov	ax, 4502h	; get lock status
 16246 00000E59 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 16247 00000E5B 72E0                    		jc	short int13h_exts_err
 16248 00000E5D BB0C00                  		mov	bx, 0Ch		; bit 1 lock bit
 16249 00000E60 3C00                    		cmp	al, 0		; not locked
 16250 00000E62 7402                    		jz	short ioctl_input_3
 16251 00000E64 B30E                    		mov	bl, 0Eh
 16252                                  ioctl_input_3:
 16253 00000E66 53                      		push	bx
 16254 00000E67 B404                    		mov	ah, 4
 16255 00000E69 B90101                  		mov	cx, 101h
 16256 00000E6C B601                    		mov	dh, 1
 16257 00000E6E CD13                    		int	13h		; DISK - VERIFY SECTORS
 16258                                  					; AL = number of sectors to verify, CH = track, CL = sector
 16259                                  					; DH = head, DL = drive
 16260                                  					; Return: CF set on error, AH = status
 16261                                  					; AL = number of sectors verified
 16262 00000E70 5B                      		pop	bx
 16263 00000E71 80FC31                  		cmp	ah, 31h		; no media in drive (IBM/MS INT 13 extensions)
 16264 00000E74 740B                    		je	short ioctl_input_5
 16265 00000E76 80FC80                  		cmp	ah, 80h		; timeout (not ready)
 16266 00000E79 7406                    		je	short ioctl_input_5
 16267                                  ioctl_input_4:
 16268 00000E7B 26895D01                		mov	[es:di+1], bx
 16269 00000E7F EBB9                    		jmp	short ioctl_lock_err
 16270                                  ioctl_input_5:
 16271 00000E81 81CB0108                		or	bx, 801h	; bit 0 error bit (1 = error, 31h or 80h)
 16272                                  					; bit 11 (not ready -removable media error- bit)
 16273                                  					; if bit 11 = 0, another error (except 31h and 80h)
 16274 00000E85 EBF4                    		jmp	short ioctl_input_4
 16275                                  
 16276                                  ; ---------------------------------------------------------------------------
 16277                                  ;;;;
 16278                                  
 16279                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16280                                  
 16281                                  ;----------------------------------------------------------------------------
 16282                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 16283                                  ;----------------------------------------------------------------------------
 16284                                  ; 11/03/2019 - Retro DOS v4.0
 16285                                  
 16286                                  ; 18/03/2019
 16287                                  
 16288                                  ; ==========================================================================
 16289                                  ;
 16290                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 16291                                  ;
 16292                                  ;      This function is intended to give the user to control the
 16293                                  ;      bds table flags of unformatted_media bit.
 16294                                  ;      GetAccessFlag will show the status -
 16295                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 16296                                  ;						1 disk i/o allowed
 16297                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 16298                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 16299                                  ;						1 disallow disk i/o
 16300                                  ; ==========================================================================
 16301                                  
 16302                                  		; generic ioctl dispatch tables
 16303                                  
 16304                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 16305                                  
 16306                                  ; 24/12/2023
 16307                                  ; BIOSCODE:0ECAh (PCDOS 7.1, IBMBIO.COM)
 16308                                  
 16309                                  ; ---------------------------------------------------------------------------
 16310                                  		; 24/12/2023
 16311                                  		;db 0
 16312                                  ; 09/12/2022 
 16313                                  %if 0
 16314                                  
 16315                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 16316                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 16317                                  		dw 0EE8h	; 61h	; ReadTrack
 16318                                  		dw 0E86h	; 62h	; VerifyTrack
 16319                                  		dw 0CA3h	 	; Cmd_Error_Proc
 16320                                  		dw 0CA3h		; Cmd_Error_Proc
 16321                                  		dw 0CA3h		; Cmd_Error_Proc
 16322                                  		dw 119Ah	; 66h	; GetMediaId
 16323                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 16324                                  		dw 12C1h	; 68h	; SenseMediaType
 16325                                  
 16326                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 16327                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 16328                                  		dw 0EEFh	; 41h	; WriteTrack
 16329                                  		dw 0DC1h	; 42h	; FormatTrack
 16330                                  		dw 0CA3h		; Cmd_Error_Proc
 16331                                  		dw 0CA3h		; Cmd_Error_Proc
 16332                                  		dw 0CA3h		; Cmd_Error_Proc
 16333                                  		dw 11D2h	; 46h	; SetMediaId
 16334                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 16335                                  
 16336                                  %endif
 16337                                  		; 24/12/2023 - Retro DOS v5.0
 16338                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0ECAh)
 16339                                  
 16340                                  		; 09/12/2022
 16341                                  IoReadJumpTable:
 16342 00000E87 10                      		db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 15
 16343 00000E88 [1A0F]                  		dw GetDeviceParameters	; 60h
 16344 00000E8A [9311]                  		dw ReadTrack		; 61h
 16345 00000E8C [3311]                  		dw VerifyTrack		; 62h
 16346 00000E8E [160F]                  		dw Cmd_Error_Proc
 16347 00000E90 [160F]                  		dw Cmd_Error_Proc
 16348 00000E92 [160F]                  		dw Cmd_Error_Proc
 16349 00000E94 [1214]                  		dw GetMediaId		; 66h
 16350 00000E96 [EF14]                  		dw GetAccessFlag	; 67h ; unpublished function
 16351 00000E98 [4415]                  		dw SenseMediaType	; 68h
 16352                                  		; 24/12/2023
 16353                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16354 00000E9A [160F]                  		dw Cmd_Error_Proc	; 69h
 16355 00000E9C [160F]                  		dw Cmd_Error_Proc	; 6Ah
 16356 00000E9E [160F]                  		dw Cmd_Error_Proc
 16357 00000EA0 [160F]                  		dw Cmd_Error_Proc
 16358 00000EA2 [160F]                  		dw Cmd_Error_Proc
 16359 00000EA4 [160F]                  		dw Cmd_Error_Proc	; 6Eh
 16360 00000EA6 [C815]                  		dw GetDrvMapInfo	; 6Fh
 16361                                  
 16362                                  IoWriteJumpTable:
 16363 00000EA8 0A                      		db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 9
 16364 00000EA9 [7A0F]                  		dw SetDeviceParameters	; 40h
 16365 00000EAB [9A11]                  		dw WriteTrack		; 41h
 16366 00000EAD [6D10]                  		dw FormatTrack		; 42h
 16367 00000EAF [160F]                  		dw Cmd_Error_Proc
 16368 00000EB1 [160F]                  		dw Cmd_Error_Proc
 16369 00000EB3 [160F]                  		dw Cmd_Error_Proc
 16370 00000EB5 [5214]                  		dw SetMediaId		; 46h
 16371 00000EB7 [0415]                  		dw SetAccessFlag	; 47h ; unpublished function
 16372                                  		; 24/12/2023
 16373                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16374 00000EB9 [8115]                  		dw SetLockState		; 48h
 16375 00000EBB [9815]                  		dw EjectMedia		; 49h	
 16376                                  		
 16377                                  ; ==========================================================================
 16378                                  ; IOC_DC_Table
 16379                                  ;
 16380                                  ; This table contains all of the valid generic IOCtl Minor codes for
 16381                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 16382                                  ; Added for 5.00
 16383                                  ; ==========================================================================
 16384                                  
 16385                                  		; 24/12/2023 - Retro DOS v5.0
 16386                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F00h)
 16387                                  
 16388 00000EBD 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 16389 00000EBE 40                      		db 40h			; SET_DEVICE_PARAMETERS
 16390 00000EBF 61                      		db 61h			; READ_TRACK
 16391 00000EC0 41                      		db 41h			; WRITE_TRACK
 16392 00000EC1 62                      		db 62h			; VERIFY_TRACK
 16393 00000EC2 42                      		db 42h			; FORMAT_TRACK
 16394 00000EC3 66                      		db 66h			; GET_MEDIA_ID
 16395 00000EC4 46                      		db 46h			; SET_MEDIA_ID
 16396 00000EC5 67                      		db 67h			; GET_ACCESS_FLAG
 16397 00000EC6 47                      		db 47h			; SET_ACCESS_FLAG
 16398 00000EC7 68                      		db 68h			; SENSE_MEDIA_TYPE
 16399                                  		; 24/12/2023
 16400                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16401 00000EC8 48                      		db 48h			; SET_LOCK_STATE
 16402 00000EC9 49                      		db 49h			; EJECT_MEDIA
 16403 00000ECA 6F                      		db 6Fh			; GET_DRV_MAP_INFO
 16404                                  
 16405                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 16406                                  
 16407                                  		; 24/12/2023 - Retro DOS v5.0
 16408                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Eh)
 16409                                  
 16410 00000ECB 00                      new_genioctl:	db 0
 16411                                  
 16412                                  ; ---------------------------------------------------------------------------
 16413                                  
 16414                                  ; 16/10/2022
 16415                                  
 16416                                  ; ==========================================================================
 16417                                  ; Do_Generic_IOCtl: perform generic ioctl request
 16418                                  ;
 16419                                  ;    input: AL contains logical drive
 16420                                  ;
 16421                                  ;	functions are dispatched through a call. On return, carry indicates
 16422                                  ;	error code in al. Note::bES:b& ds undefined on return from
 16423                                  ;	subfunctions.
 16424                                  ;
 16425                                  ; ==========================================================================
 16426                                  
 16427                                  ; 11/03/2019
 16428                                  		; 24/12/2023 - Retro DOS v5.0
 16429                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Fh)
 16430                                  
 16431                                  		; 19/10/2022
 16432                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 16433 00000ECC E8D5F6                  		call	SetDrive	; ES:DI	Points to bds for drive
 16434                                  		
 16435                                  		; 24/12/2023
 16436                                  		;;;
 16437 00000ECF 2EC606[CB0E]00          		mov	byte [cs:new_genioctl], 0
 16438                                  					; 0, old generic ioctl function
 16439 00000ED5 06                      		push	es
 16440 00000ED6 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 16441 00000EDA 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 16442                                  					; RAWIO
 16443                                  		; 24/12/2023
 16444                                  		;mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 16445                                  		;pop	es
 16446                                  		;jnz	short IoctlFuncErr
 16447 00000EDF 740A                    		jz	short chk_genioctl_minor
 16448 00000EE1 2EFE06[CB0E]            		inc	byte [cs:new_genioctl]
 16449                                  					; 1, new generic ioctl function (FAT32)
 16450 00000EE6 26807F0D48              		cmp	byte [es:bx+0Dh], 48h ; Generic IOCtl Request support
 16451                                  				; (called only if bit 6 of attribute is set to 1)
 16452                                  chk_genioctl_minor:
 16453 00000EEB 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 16454 00000EEF 07                      		pop	es
 16455 00000EF0 7525                    		jnz	short IoctlFuncErr
 16456                                  		;;;
 16457                                  
 16458                                  		; cas note: Could do the above two blocks in reverse order.
 16459                                  		; Would have to preserve al for SetDrive
 16460                                  
 16461                                  		; 10/12/2022
 16462 00000EF2 BE[870E]                		mov	si, IoReadJumpTable
 16463                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 16464                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 16465 00000EF5 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 16466 00000EF7 7503                    		jnz	short NotGenericWrite ; function is a read.
 16467                                  		; 10/12/2022
 16468 00000EF9 BE[A80E]                		mov	si, IoWriteJumpTable
 16469                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 16470                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 16471                                  NotGenericWrite:
 16472 00000EFC 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 16473 00000EFE 2C40                    		sub	al, 40h		; offset for base function
 16474 00000F00 2E3A04                  		cmp	al, [cs:si]
 16475 00000F03 7712                    		ja	short IoctlFuncErr
 16476 00000F05 98                      		cbw
 16477                                  		; 24/12/2023
 16478                                  		;shl	ax, 1
 16479 00000F06 01C0                    		add	ax, ax
 16480 00000F08 46                      		inc	si
 16481 00000F09 01C6                    		add	si, ax
 16482 00000F0B 2EFF14                  		call	near [cs:si]
 16483                                  		;call	word ptr cs:[si]
 16484 00000F0E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16485                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16486                                  					; 2C7h:30h = 70h:25A0h
 16487 00000F13 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 16488 00000F15 C3                      		retn			; Pass carry flag through to exit code
 16489                                  ; ---------------------------------------------------------------------------
 16490                                  
 16491                                  		; Cmd_Error_Proc is called as a procedure and also use
 16492                                  		; as a fall through from above
 16493                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 16494 00000F16 5A                      		pop	dx
 16495                                  IoctlFuncErr:
 16496 00000F17 E9BBF1                  		jmp	bc_cmderr
 16497                                  ; ---------------------------------------------------------------------------
 16498                                  
 16499                                  ; 16/10/2022
 16500                                  
 16501                                  ; ==========================================================================
 16502                                  ;**	GetDeviceParameters:
 16503                                  ;
 16504                                  ;	GetDeviceParameters implements the generic ioctl function:
 16505                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 16506                                  ;
 16507                                  ;	ENTRY	(ES:di) = BDS for drive
 16508                                  ;		PtrSav = long pointer to request header
 16509                                  ;	EXIT	??? BUGBUG
 16510                                  ;	USES	??? BUGBUG
 16511                                  ; ==========================================================================
 16512                                  
 16513                                  		; 24/12/2023 - Retro DOS v5.0
 16514                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F5Dh)
 16515                                  
 16516                                  		; 19/10/2022
 16517                                  GetDeviceParameters:
 16518                                  		; Copy info from bds to the device parameters packet
 16519                                  
 16520 00000F1A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16521 00000F1E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16522                                  					; (DS:BX) = return buffer
 16523                                  		; 24/12/2023
 16524 00000F21 268A453E                		mov	al, [es:di+3Eh]
 16525                                  		;mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 16526 00000F25 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 16527                                  		; 24/12/2023
 16528 00000F28 268B453F                		mov	ax, [es:di+3Fh]
 16529                                  		;mov	ax, [es:di+35]	; [es:di+BDS.flags]
 16530 00000F2C 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 16531                                  					; Mask off other bits
 16532 00000F2F 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 16533                                  		; 24/12/2023
 16534 00000F32 268B4541                		mov     ax, [es:di+41h]
 16535                                  		;mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 16536 00000F36 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 16537 00000F39 30C0                    		xor	al, al		; Set media type to default
 16538 00000F3B 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 16539                                  					
 16540                                  		; copy recommended bpb
 16541                                  
 16542                                  		; 24/12/2023
 16543 00000F3E 8D7543                  		lea     si, [di+43h]
 16544                                  		;lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 16545 00000F41 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16546                                  					; BUILD_DEVICE_BPB
 16547 00000F44 7412                    		jz	short UseBpbPresent
 16548 00000F46 1E                      		push	ds		; Save request packet segment
 16549 00000F47 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16550                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16551                                  					; 2C7h:30h = 70h:25A0h
 16552                                  					; Point back to Bios_Data
 16553 00000F4C E828FA                  		call	checksingle
 16554 00000F4F E884F7                  		call	GetBp		; Build	the bpb	from scratch
 16555 00000F52 1F                      		pop	ds		; Restore request packet segment
 16556 00000F53 7224                    		jb	short GetParmRet
 16557 00000F55 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 16558                                  					; Use this subfield of bds instead
 16559                                  UseBpbPresent:				
 16560 00000F58 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 16561                                  					; This is where	the result goes
 16562                                  		; 24/12/2023
 16563 00000F5B 31D2                    		xor	dx, dx ; 0
 16564                                  		
 16565                                  		; 24/12/2023
 16566 00000F5D B91F00                  		mov	cx, 31		; A_BPB.size = 31
 16567                                  		;mov	cx, 25		; A_BPB.size - 6
 16568                                  					; For now use 'small' bpb
 16569                                  		; 24/12/2023
 16570                                  		;;;
 16571 00000F60 2E3816[CB0E]            		cmp	[cs:new_genioctl], dl ; 0 ? ; *
 16572 00000F65 7404                    		jz	short gdp_1	; old type (FAT12 & FAT16) structure
 16573                                  		;mov	cx, 53		; FAT32 BPB size
 16574                                  		;mov	dx, 32		; 53+32 = 85 bytes (A_BPB_FAT32.size)
 16575 00000F67 B135                    		mov	cl, 53
 16576 00000F69 B220                    		mov	dl, 32
 16577                                  gdp_1:
 16578                                  		;;;
 16579 00000F6B 1E                      		push	ds		; reverse segments for copy
 16580 00000F6C 06                      		push	es
 16581 00000F6D 1F                      		pop	ds
 16582 00000F6E 07                      		pop	es
 16583 00000F6F F3A4                    		rep movsb
 16584                                  
 16585                                  		; 24/12/2023
 16586                                  		;;;
 16587 00000F71 89D1                    		mov	cx, dx		; 0 or 32
 16588 00000F73 E304                    		jcxz	gdp_2
 16589 00000F75 30C0                    		xor	al, al		; 32 zeros
 16590 00000F77 F3AA                    		rep stosb
 16591                                  gdp_2:
 16592                                  		;clc	; cf is already 0 ; * ; 24/12/2023
 16593                                  		;;;		
 16594                                  		
 16595                                  		; 12/12/2022
 16596                                  		; cf=0 (cmp instruction -above- resets cf) 	
 16597                                  		;clc
 16598                                  GetParmRet:				
 16599 00000F79 C3                      		retn
 16600                                  ; ---------------------------------------------------------------------------
 16601                                  
 16602                                  ; 17/10/2022
 16603                                  ; 16/10/2022
 16604                                  
 16605                                  ; ==========================================================================
 16606                                  ; SetDeviceParameters:
 16607                                  ;
 16608                                  ; input: ES:di points to bds for drive
 16609                                  ; ==========================================================================
 16610                                  
 16611                                  		; 24/12/2023 - Retro DOS v5.0
 16612                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0FC0h)
 16613                                  
 16614                                  		; 19/10/2022
 16615                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 16616 00000F7A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16617 00000F7E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16618                                  		; 24/12/2023
 16619 00000F81 26814D3F4001            		or	word [es:di+3Fh], 140h
 16620                                  		;or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 16621                                  					; fchanged_by_format|fchanged
 16622 00000F87 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16623                                  					; ONLY_SET_TRACKLAYOUT
 16624                                  		;jnz	short setTrackTable
 16625                                  		; 24/12/2023
 16626 00000F8A 7403                    		jz	short sdp_1
 16627 00000F8C E98000                  		jmp	setTrackTable
 16628                                  sdp_1:	
 16629 00000F8F 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 16630                                  		; 24/12/2023
 16631 00000F92 2688453E                		mov	[es:di+3Eh], al
 16632                                  		;mov	[es:di+34], al	; [es:di+BDS.formfactor]
 16633 00000F96 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 16634                                  		; 24/12/2023
 16635 00000F99 26894541                		mov	[es:di+41h], ax
 16636                                  		;mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 16637 00000F9D 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 16638 00000FA0 1E                      		push	ds
 16639                                  		; 17/10/2022
 16640 00000FA1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16641                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16642                                  					; 2C7h:30h = 70h:25A0h
 16643                                  		;cmp	byte [fhave96], 0
 16644 00000FA6 803E[7700]00            		cmp	byte [fhave96], 0
 16645 00000FAB 1F                      		pop	ds
 16646 00000FAC 7502                    		jnz	short HaveChange ; we have changeline support
 16647                                  		; 10/12/2022
 16648 00000FAE 24FD                    		and	al, 0FDh
 16649                                  		;and	ax, 0FFFDh	; ~fchangeline
 16650                                  
 16651                                  		; Ignore all bits except non_removable and changeline
 16652                                  HaveChange:
 16653 00000FB0 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 16654                                  		; 24/12/2023
 16655 00000FB3 268B4D3F                		mov	cx, [es:di+3Fh]
 16656                                  		;mov	cx, [es:di+35]	; [es:di+BDS.flags]
 16657 00000FB7 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 16658 00000FBB 09C8                    		or	ax, cx
 16659                                  		; 24/12/2023
 16660 00000FBD 2689453F                		mov	[es:di+3Fh], ax
 16661                                  		;mov	[es:di+35], ax	; [es:di+BDS.flags]
 16662 00000FC1 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 16663                                  					; Set media type
 16664 00000FC4 1E                      		push	ds
 16665 00000FC5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16666                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16667 00000FCA A2[A805]                		mov	[mediatype], al
 16668                                  		;mov	ds:mediatype, al
 16669                                  
 16670                                  		; 24/12/2023
 16671                                  		;;;
 16672 00000FCD B93500                  		mov	cx, 53		; FAT32 BPB size
 16673 00000FD0 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 16674 00000FD6 7502                    		jnz	short sdp_2	; new type (FAT32) structure
 16675                                  		;mov	cx, 31		; A_BPB.size = 31
 16676 00000FD8 B11F                    		mov	cl, 31
 16677                                  sdp_2:
 16678                                  		;;;	
 16679 00000FDA 1F                      		pop	ds
 16680                                  
 16681                                  		; The media changed (maybe) so we will have to do a set dasd
 16682                                  		; the next time we format a track
 16683                                  
 16684                                  		; 24/12/2023
 16685 00000FDB 26804D3F80              		or	byte [es:di+3Fh], 80h
 16686                                  		; 10/12/2022
 16687                                  		;or	byte [es:di+35], 80h
 16688                                  		;;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 16689                                  					; set_dasd_true
 16690 00000FE0 57                      		push	di		; Save bds pointer
 16691                                  
 16692                                  		; Figure out what we are supposed to do with the bpb
 16693                                  		; were we asked to install a fake bpb?
 16694                                  
 16695 00000FE1 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16696                                  					; INSTALL_FAKE_BPB
 16697 00000FE4 7511                    		jnz	short InstallFakeBpb
 16698                                  
 16699                                  		; were we returning a fake bpb when asked to build a bpb?
 16700                                  
 16701                                  		; 24/12/2023
 16702 00000FE6 26F6453F04              		test	byte [es:di+3Fh], 4
 16703                                  		; 10/12/2022
 16704                                  		;test	byte [es:di+35], 4
 16705                                  		;;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 16706                                  					; return_fake_bpb
 16707 00000FEB 7405                    		jz	short InstallRecommendedBpb
 16708                                  
 16709                                  		; we were returning a fake bpb but we can stop now
 16710                                  
 16711                                  		; 24/12/2023
 16712 00000FED 2680653FFB              		and	byte [es:di+3Fh], 0FBh
 16713                                  		; 10/12/2022
 16714                                  		;and	byte [es:di+35], 0FBh
 16715                                  		;;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 16716                                  					; ~return_fake_bpb
 16717                                  InstallRecommendedBpb:
 16718                                  		; 24/12/2023
 16719                                  		;mov	cx, 31		; A_BPB.size
 16720                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 16721                                  		; cx = 53 or 31
 16722 00000FF2 8D7D43                  		lea	di, [di+43h]	; (PCDOS 7.1 IBMBIO.COM)
 16723 00000FF5 EB08                    		jmp	short CopyTheBpb
 16724                                  ; ---------------------------------------------------------------------------
 16725                                  
 16726                                  InstallFakeBpb:
 16727                                  		; 24/12/2023
 16728 00000FF7 26804D3F04              		or	byte [es:di+3Fh], 4
 16729                                  		; 10/12/2022
 16730                                  		;or	byte [es:di+35], 4
 16731                                  		;;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 16732                                  					; return_fake_bpb
 16733                                  		; 24/12/2023
 16734                                  		; cx = 53 or 31
 16735                                  		;mov	cx, 25		; A_BPB.size - 6
 16736                                  					; move 'smaller' bpb
 16737 00000FFC 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 16738                                  CopyTheBpb:				
 16739 00000FFF 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 16740 00001002 F3A4                    		rep movsb
 16741 00001004 1E                      		push	ds		; Save packet segment
 16742                                  		; 17/10/2022
 16743 00001005 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16744                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16745                                  					; Setup	for ds -> Bios_Data
 16746 0000100A E8DD03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 16747 0000100D 1F                      		pop	ds		; Restore packet segment
 16748 0000100E 5F                      		pop	di		; Restore bds pointer
 16749                                  setTrackTable:	
 16750                                  		; 24/12/2023
 16751                                  		;mov	cx, [bx+38]	; [bx+26h]
 16752                                  		;;;
 16753 0000100F 8B4F5C                  		mov	cx, [bx+5Ch]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 16754                                  					; offset 85+7 (A_BPB.size+7) (FAT32)
 16755 00001012 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 16756 00001018 7503                    		jnz	short sdp_3	; new type (FAT32) structure
 16757 0000101A 8B4F26                  		mov	cx, [bx+26h]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 16758                                  					; offset 31+7 (A_BPB.size+7)
 16759                                  sdp_3:
 16760                                  		;;;
 16761                                  
 16762 0000101D 1E                      		push	ds
 16763 0000101E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16764 00001023 890E[AA04]              		mov	[sectorspertrack], cx
 16765 00001027 1F                      		pop	ds
 16766                                  		
 16767                                  		; 24/12/2023
 16768 00001028 2680653FF7              		and	byte [es:di+3Fh], 0F7h
 16769                                  		; 10/12/2022
 16770                                  		;and	byte [es:di+35], 0F7h
 16771                                  		;;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 16772                                  					; ~good_tracklayout
 16773 0000102D F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16774                                  					; TRACKLAYOUT_IS_GOOD
 16775 00001030 7405                    		jz	short UglyTrackLayOut
 16776                                  		; 24/12/2023
 16777 00001032 26804D3F08              		or	byte [es:di+3Fh], 8
 16778                                  		; 10/12/2022
 16779                                  		;or	byte [es:di+35], 8
 16780                                  		;;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 16781                                  					; good_tracklayout
 16782                                  UglyTrackLayOut:
 16783 00001037 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 16784 0000103A 772D                    		ja	short TooManyPerTrack
 16785                                  		;jcxz	short SectorInfoSaved
 16786 0000103C E329                    		jcxz	SectorInfoSaved	; 19/10/2022
 16787                                  		
 16788 0000103E BF[AC04]                		mov	di, tracktable
 16789                                  
 16790                                  		; 24/12/2023
 16791                                  		;lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16792                                  		;;;
 16793 00001041 8D775E                  		lea	si, [bx+5Eh]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16794                                  					; offset 85+9 (A_BPB.size+9) (FAT32)
 16795 00001044 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 16796 0000104A 7503                    		jnz	short sdp_4	; new type (FAT32) structure
 16797 0000104C 8D7728                  		lea	si, [bx+28h]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16798                                  					; offset 31+9 (A_BPB.size+9)
 16799                                  sdp_4:
 16800                                  		;;;
 16801                                  
 16802                                  		; 17/10/2022
 16803 0000104F 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 16804                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16805                                  					; Trash	our bds	pointer
 16806                                  StoreSectorInfo:
 16807 00001054 47                      		inc	di
 16808 00001055 47                      		inc	di		; Skip over cylinder and head
 16809 00001056 AD                      		lodsw			; Get sector id
 16810 00001057 AA                      		stosb			; Copy it
 16811 00001058 AD                      		lodsw			; Get sector size
 16812                                  		
 16813                                  		; 24/12/2023
 16814                                  		; 02/09/2023 (PCDOS 7.1)
 16815                                  		;call	SectSizeToSectIndex
 16816                                  		; 18/04/2024
 16817                                  		;cmp	ah, 3 ; 02/09/2023
 16818 00001059 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 16819                                  					; examine upper	byte only
 16820 0000105C 7704                    		ja	short OneK
 16821 0000105E 88E0                    		mov	al, ah		; value	in AH is the index!
 16822 00001060 EB02                    		jmp	short sdp_s
 16823                                  OneK:
 16824 00001062 B003                    		mov	al, 3		; 1024 bytes per sector
 16825                                  sdp_s:
 16826 00001064 AA                      		stosb			; Store	sector SIZE index
 16827 00001065 E2ED                    		loop	StoreSectorInfo
 16828                                  SectorInfoSaved:
 16829 00001067 F8                      		clc
 16830 00001068 C3                      		retn
 16831                                  ; ---------------------------------------------------------------------------
 16832                                  
 16833                                  TooManyPerTrack:
 16834 00001069 B00C                    		mov	al, 0Ch
 16835 0000106B F9                      		stc
 16836 0000106C C3                      		retn
 16837                                  ; ---------------------------------------------------------------------------
 16838                                  
 16839                                  ; 16/10/2022
 16840                                  
 16841                                  ; ==========================================================================
 16842                                  ; FormatTrack:
 16843                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 16844                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 16845                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 16846                                  ;
 16847                                  ; input: ES:di points to bds for drive
 16848                                  ;
 16849                                  ; output:
 16850                                  ;	for status call:
 16851                                  ;	specialfunction byte set to:
 16852                                  ;		0 - rom support + legal combination
 16853                                  ;		1 - no rom support
 16854                                  ;		2 - illegal combination
 16855                                  ;		3 - no media present
 16856                                  ;	carry cleared.
 16857                                  ;
 16858                                  ;	for format track:
 16859                                  ;		carry set if error
 16860                                  ;
 16861                                  ; ==========================================================================
 16862                                  
 16863                                  ; 16/03/2019
 16864                                  		; 24/12/2023 - Retro DOS 5.0
 16865                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:10B7h)
 16866                                  
 16867                                  		; 19/10/2022
 16868                                  FormatTrack:
 16869 0000106D C51E[1200]              		lds	bx, [ptrsav]
 16870 00001071 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 16871 00001074 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16872                                  					; STATUS_FOR_FORMAT
 16873 00001077 740E                    		jz	short DoFormatTrack
 16874 00001079 1E                      		push	ds
 16875                                  		; 17/10/2022
 16876 0000107A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16877                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16878 0000107F E82502                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 16879 00001082 1F                      		pop	ds
 16880 00001083 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16881 00001085 F8                      		clc
 16882 00001086 C3                      		retn
 16883                                  ; ---------------------------------------------------------------------------
 16884                                  
 16885                                  DoFormatTrack:
 16886                                  		; 24/12/2023 - Retro DOS 5.0
 16887 00001087 26807D3E05              		cmp	byte [es:di+3Eh], 5				
 16888                                  		;cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 16889                                  					; DEV_HARDDISK
 16890 0000108C 7508                    		jnz	short DoFormatDiskette
 16891                                  		; 17/10/2022
 16892 0000108E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16893                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16894                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 16895 00001093 E99D00                  		jmp	VerifyTrack
 16896                                  ; ---------------------------------------------------------------------------
 16897                                  
 16898                                  DoFormatDiskette:
 16899 00001096 8B4F01                  		mov	cx, [bx+1]
 16900 00001099 8B5703                  		mov	dx, [bx+3]
 16901 0000109C F60702                  		test	byte [bx], 2
 16902                                  		; 17/10/2022
 16903 0000109F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16904                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16905                                  					; Setup	ds-> Bios_Data for verify
 16906 000010A4 7403                    		jz	short DoFormatDiskette_1
 16907 000010A6 E9E500                  		jmp	VerifyTrack_Err
 16908                                  ; ---------------------------------------------------------------------------
 16909                                  
 16910                                  DoFormatDiskette_1:
 16911 000010A9 E8FB01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 16912 000010AC 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 16913 000010AE 7406                    		jz	short NeedToSetDasd ; Old rom
 16914 000010B0 3C03                    		cmp	al, 3		; Time out error?
 16915 000010B2 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 16916                                  					; about	the illegal combination)
 16917 000010B4 EB68                    		jmp	short FormatFailed
 16918                                  ; ---------------------------------------------------------------------------
 16919                                  
 16920                                  NeedToSetDasd:
 16921 000010B6 52                      		push	dx
 16922 000010B7 E89001                  		call	SetDasd		; INT 13h, AH=17h
 16923 000010BA 5A                      		pop	dx
 16924                                  NoSetDasd:
 16925 000010BB E8B9F8                  		call	checksingle	; Do any needed	diskette swapping
 16926 000010BE 89D0                    		mov	ax, dx		; Get track from packet
 16927 000010C0 A3[3901]                		mov	[trknum], ax
 16928 000010C3 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 16929 000010C7 88CC                    		mov	ah, cl
 16930 000010C9 BB[AC04]                		mov	bx, tracktable
 16931 000010CC 8B0E[AA04]              		mov	cx, [sectorspertrack]
 16932                                  		; 24/12/2023 - Retro DOS 5.0
 16933 000010D0 E307                    		jcxz	set_fmt_retry_count
 16934                                  StoreCylinderHead:
 16935 000010D2 8907                    		mov	[bx], ax	; Store	into TrackTable
 16936 000010D4 83C304                  		add	bx, 4		; Skip to next sector field
 16937 000010D7 E2F9                    		loop	StoreCylinderHead
 16938                                  set_fmt_retry_count:	; 24/12/2023
 16939                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 16940                                  		; 02/09/2023
 16941 000010D9 B105                    		mov	cl, 5
 16942                                  FormatRetry:
 16943 000010DB 51                      		push	cx
 16944 000010DC BB[AC04]                		mov	bx, tracktable
 16945 000010DF A0[AA04]                		mov	al, [sectorspertrack]
 16946 000010E2 B405                    		mov	ah, 5		; romformat
 16947 000010E4 8C1E[A804]              		mov	[xfer_seg], ds
 16948 000010E8 E86602                  		call	ToRom
 16949 000010EB 59                      		pop	cx
 16950 000010EC 7216                    		jb	short FormatError
 16951 000010EE 51                      		push	cx		; Now verify the sectors just formatted.
 16952                                  					; NOTE:	because	of bug in some BIOSes we have to
 16953                                  					;	set ES:BX to 00:00
 16954 000010EF 53                      		push	bx
 16955 000010F0 31DB                    		xor	bx, bx
 16956 000010F2 891E[A804]              		mov	[xfer_seg], bx
 16957 000010F6 A0[AA04]                		mov	al, [sectorspertrack]
 16958 000010F9 B404                    		mov	ah, 4		; romverify
 16959 000010FB B101                    		mov	cl, 1
 16960 000010FD E85102                  		call	ToRom
 16961 00001100 5B                      		pop	bx
 16962 00001101 59                      		pop	cx
 16963 00001102 7329                    		jnb	short FormatOk
 16964                                  FormatError:
 16965 00001104 E83402                  		call	ResetDisk
 16966 00001107 C606[AA05]01            		mov	byte [had_format_error], 1
 16967 0000110C 50                      		push	ax
 16968 0000110D 51                      		push	cx
 16969 0000110E 52                      		push	dx
 16970 0000110F E89501                  		call	SetMediaForFormat
 16971 00001112 3C01                    		cmp	al, 1
 16972 00001114 7503                    		jnz	short WhileErr
 16973 00001116 E83101                  		call	SetDasd
 16974                                  WhileErr:
 16975 00001119 5A                      		pop	dx
 16976 0000111A 59                      		pop	cx
 16977 0000111B 58                      		pop	ax
 16978 0000111C E2BD                    		loop	FormatRetry
 16979                                  FormatFailed:
 16980 0000111E C606[AA05]01            		mov	byte [had_format_error], 1
 16981                                  					; Set the format error flag
 16982 00001123 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 16983 00001126 7502                    		jnz	short DoMapIt	; Error	to time	out error
 16984 00001128 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 16985                                  DoMapIt:
 16986 0000112A E97CFC                  		jmp	maperror
 16987                                  ; ---------------------------------------------------------------------------
 16988                                  
 16989                                  FormatOk:
 16990 0000112D C606[AA05]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 16991 00001132 C3                      		retn
 16992                                  ; ---------------------------------------------------------------------------
 16993                                  
 16994                                  ; 16/10/2022
 16995                                  
 16996                                  ; ==========================================================================
 16997                                  ;
 16998                                  ; VerifyTrack:
 16999                                  ;
 17000                                  ; input: ES:di points to bds for drive
 17001                                  ; ==========================================================================
 17002                                  
 17003                                  		; 24/12/2023 - Retro DOS 5.0
 17004                                  VerifyTrack:
 17005 00001133 1E                      		push	ds
 17006 00001134 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 17007 00001138 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17008                                  
 17009                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 17010                                  
 17011 0000113B 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 17012 0000113E 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 17013 00001141 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 17014 00001144 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 17015                                  					; Get option flag word
 17016 00001146 1F                      		pop	ds
 17017 00001147 C606[2001]04            		mov	byte [rflag], 4	; romverify
 17018 0000114C 890E[3301]              		mov	[curtrk], cx
 17019 00001150 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 17020 00001153 8B0E[AA04]              		mov	cx, [sectorspertrack]
 17021                                  
 17022                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 17023                                  		; specified if not we should go to the normal track verification
 17024                                  		; routine. If fast format has been specified we should get the
 17025                                  		; number of tracks to be verified and check it to see if it is
 17026                                  		; > 255. If it is then it is an error and we should go to
 17027                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 17028                                  		; sectors per track to get the total number of sectors to be
 17029                                  		; verified. This should also be less than equal to 255
 17030                                  		; otherwise we go to same error exit. If everything is okay
 17031                                  		; we initialise cx to the total sectors. use ax as a temporary
 17032                                  		; register.
 17033                                  
 17034                                  					; Special function requested?	
 17035 00001157 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 17036 0000115A 7421                    		jz	short NormVerifyTrack
 17037 0000115C 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 17038 0000115E 08E4                    		or	ah, ah
 17039 00001160 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 17040 00001162 F6E1                    		mul	cl
 17041 00001164 08E4                    		or	ah, ah
 17042 00001166 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 17043 00001168 89C1                    		mov	cx, ax
 17044                                  		; 24/12/2023
 17045 0000116A 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 17046                                  		; 10/12/2022
 17047                                  		;test	byte [es:di+35], 1
 17048                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 17049                                  					; fnon_removable
 17050 0000116F 740C                    		jz	short NormVerifyTrack
 17051                                  					; Multitrack operation = on?
 17052                                  		; 10/12/2022
 17053                                  		; 19/10/2022
 17054 00001171 F606[A004]80            		test	byte [multrk_flag], 80h
 17055                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 17056                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 17057 00001176 7405                    		jz	short NormVerifyTrack
 17058 00001178 C606[A704]01            		mov	byte [multitrk_format_flag], 1
 17059                                  NormVerifyTrack:
 17060 0000117D 31C0                    		xor	ax, ax		; 1st sector
 17061 0000117F 31DB                    		xor	bx, bx
 17062 00001181 891E[A804]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 17063 00001185 E83F00                  		call	TrackIo
 17064 00001188 C606[A704]00            		mov	byte [multitrk_format_flag], 0
 17065 0000118D C3                      		retn
 17066                                  ; ---------------------------------------------------------------------------
 17067                                  
 17068                                  VerifyTrack_Err:
 17069 0000118E B401                    		mov	ah, 1
 17070 00001190 E916FC                  		jmp	maperror
 17071                                  ; ---------------------------------------------------------------------------
 17072                                  
 17073                                  ; 16/10/2022
 17074                                  
 17075                                  ; ==========================================================================
 17076                                  ;
 17077                                  ; ReadTrack:
 17078                                  ;
 17079                                  ; input: ES:di points to bds for drive
 17080                                  ;
 17081                                  ; ==========================================================================
 17082                                  
 17083                                  ReadTrack:
 17084 00001193 C606[2001]02            		mov	byte [rflag], 2	; romread
 17085 00001198 EB05                    		jmp	short ReadWriteTrack
 17086                                  ; ---------------------------------------------------------------------------
 17087                                  
 17088                                  WriteTrack:
 17089                                  
 17090                                  ; ==========================================================================
 17091                                  ;
 17092                                  ; WriteTrack:
 17093                                  ;
 17094                                  ; input: ES:di points to bds for drive
 17095                                  ;
 17096                                  ; ==========================================================================
 17097                                  				
 17098 0000119A C606[2001]03            		mov	byte [rflag], 3	; romwrite
 17099                                  
 17100                                  		; Fall into ReadWriteTrack
 17101                                  
 17102                                  ; ==========================================================================
 17103                                  ;
 17104                                  ; readWriteTrack:
 17105                                  ;
 17106                                  ; input:
 17107                                  ;    ES:di points to bds for drive
 17108                                  ;    rFlag - 2 for read,3 for write
 17109                                  ;
 17110                                  ; ==========================================================================
 17111                                  
 17112                                  ReadWriteTrack:	
 17113                                  		; save bds pointer segment so we can use it to access
 17114                                  		; our packet. Notice that this is not the standard register
 17115                                  		; assignment for accessing packets
 17116                                  		
 17117                                  		; 19/10/2022
 17118 0000119F 06                      		push	es
 17119 000011A0 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 17120 000011A4 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17121 000011A8 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 17122 000011AC A3[3301]                		mov	[curtrk], ax
 17123 000011AF 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 17124 000011B3 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 17125 000011B6 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 17126 000011BA 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 17127 000011BE 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 17128                                  					; Get transfer address
 17129                                  
 17130                                  		; we just trashed our packet address, but we no longer care
 17131                                  
 17132 000011C2 8C06[A804]              		mov	[xfer_seg], es	; Pass transfer	segment
 17133 000011C6 07                      		pop	es
 17134                                  
 17135                                  		; Fall into TrackIo
 17136                                  
 17137                                  ; =============== S U B	R O U T	I N E =======================================
 17138                                  
 17139                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17140                                  
 17141                                  ; ==========================================================================
 17142                                  ;
 17143                                  ; TrackIo:
 17144                                  ;    performs track read/write/verify
 17145                                  ;
 17146                                  ;   input:
 17147                                  ;      rFlag	- 2 = read
 17148                                  ;		  3 = write
 17149                                  ;		  4 = verify
 17150                                  ;      AX	- Index into track table of first sector to io
 17151                                  ;      CX	- Number of sectors to io
 17152                                  ;      Xfer_Seg:BX - Transfer address
 17153                                  ;      ES:DI	- Pointer to bds
 17154                                  ;      CurTrk	- Current cylinder
 17155                                  ;      CurHd	- Current head
 17156                                  ;
 17157                                  ; ==========================================================================
 17158                                  
 17159                                  ; 16/03/2019 - Retro DOS v4.0
 17160                                  
 17161                                  		; 24/12/2023 - Retro DOS 5.0		
 17162                                  
 17163                                  		; 19/10/2022
 17164                                  TrackIo:
 17165                                  					; Procedure `disk' will pop stack to
 17166 000011C7 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 17167 000011CB E8A9F7                  		call	checksingle	; Ensure correct disk is in drv
 17168 000011CE 803E[A905]01            		cmp	byte [media_set_for_format], 1
 17169                                  					; See if we have already set	disk
 17170 000011D3 7407                    		jz	short Dptalreadyset ; base table
 17171 000011D5 50                      		push	ax		; set up tables	and variables for i/o
 17172 000011D6 51                      		push	cx
 17173 000011D7 E8A0F9                  		call	iosetup
 17174 000011DA 59                      		pop	cx
 17175 000011DB 58                      		pop	ax
 17176                                  Dptalreadyset:				; Point si at the table entry of the			
 17177 000011DC BE[AC04]                		mov	si, tracktable	; first sector to be io'd
 17178                                  		; 24/12/2023
 17179                                  		;add	ax, ax		; PCDOS 7.1 IBMBIO.COM
 17180                                  		;add	ax, ax
 17181 000011DF D1E0                    		shl	ax, 1
 17182 000011E1 D1E0                    		shl	ax, 1
 17183 000011E3 01C6                    		add	si, ax
 17184                                  
 17185                                  		; WE WANT:
 17186                                  		; CX to	be the number of times we have to loop
 17187                                  		; DX to	be the number of sectors we read on each iteration
 17188                                  		
 17189 000011E5 BA0100                  		mov	dx, 1
 17190                                  
 17191                                  		; 24/12/2023
 17192 000011E8 26F6453F08              		test	byte [es:di+3Fh], 8 ; PCDOS 7.1 IBMBIO.COM
 17193                                  		; 12/12/2022
 17194                                  		;test	byte [es:di+23h], 8
 17195                                  		;;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 17196                                  					; good_tracklayout
 17197 000011ED 7402                    		jz	short ionextsector
 17198                                  		
 17199 000011EF 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 17200                                  ionextsector:
 17201 000011F1 51                      		push	cx
 17202 000011F2 52                      		push	dx
 17203 000011F3 46                      		inc	si
 17204 000011F4 46                      		inc	si		; Skip over the	cylinder and head in
 17205                                  					; the track table
 17206 000011F5 AC                      		lodsb			; Get sector ID	from track table
 17207 000011F6 A2[3101]                		mov	[cursec], al
 17208                                  
 17209                                  		; assumptions for a fixed disk multi-track disk	i/o
 17210                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 17211                                  		;     only CL is valid.
 17212                                  		; 2). Sector size should be set	to 512 bytes.
 17213                                  		; 3). Good track layout
 17214                                  		
 17215                                  		; 24/12/2023
 17216 000011F9 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 17217                                  		; 12/12/2022
 17218                                  		;test	byte [es:di+23h], 1
 17219                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 17220                                  					; fnon_removable ; Fixed disk?
 17221 000011FE 7414                    		jz	short IoRemovable ; No
 17222                                  
 17223                                  		; 12/12/2022
 17224 00001200 F606[A004]80            		test	byte [multrk_flag], 80h
 17225                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 17226                                  						; Allow multi-track operation?
 17227 00001205 740D                    		jz	short IoRemovable ; No,don't do that.
 17228 00001207 8916[2201]              		mov	[seccnt], dx
 17229 0000120B 89D0                    		mov	ax, dx
 17230 0000120D E823FA                  		call	Disk
 17231 00001210 5A                      		pop	dx
 17232 00001211 59                      		pop	cx
 17233 00001212 F8                      		clc
 17234 00001213 C3                      		retn
 17235                                  ; ---------------------------------------------------------------------------
 17236                                  
 17237                                  IoRemovable:
 17238 00001214 AC                      		lodsb			; Get sector size index	from track
 17239                                  					; table	and save it
 17240 00001215 50                      		push	ax
 17241 00001216 56                      		push	si
 17242 00001217 1E                      		push	ds		; Save Bios_Data
 17243 00001218 50                      		push	ax
 17244 00001219 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 17245                                  					; Fetch	EOT while ds-> Bios_Data
 17246 0000121D C536[2D01]              		lds	si, [dpt]
 17247 00001221 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 17248 00001224 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 17249 00001227 58                      		pop	ax
 17250 00001228 1F                      		pop	ds
 17251 00001229 88D0                    		mov	al, dl
 17252 0000122B A3[2201]                		mov	[seccnt], ax
 17253 0000122E E802FA                  		call	Disk
 17254 00001231 5E                      		pop	si		; Advance buffer pointer by adding
 17255                                  					; sector size
 17256                                  		;pop	ax
 17257                                  		; 24/12/2023
 17258 00001232 59                      		pop	cx
 17259                                  
 17260                                  		; 02/09/2023 (PCDOS 7.1)
 17261                                  		;call	SectorSizeIndexToSectorSize
 17262                                  		;mov	cl, al	; 24/12/2023
 17263 00001233 B88000                  		mov	ax, 128
 17264 00001236 D3E0                    		shl	ax, cl
 17265                                  
 17266 00001238 01C3                    		add	bx, ax
 17267 0000123A 5A                      		pop	dx
 17268 0000123B 59                      		pop	cx
 17269 0000123C E2B3                    		loop	ionextsector
 17270 0000123E 803E[A905]01            		cmp	byte [media_set_for_format], 1
 17271                                  		;jz	short NoNeedDone
 17272                                  		; 12/12/2022
 17273 00001243 7404                    		je	short NoNeedDone2
 17274 00001245 E877F9                  		call	done		; set time of last access, and reset
 17275                                  					; entries in Dpt.
 17276                                  NoNeedDone:
 17277 00001248 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 17278                                  NoNeedDone2:
 17279 00001249 C3                      		retn
 17280                                  
 17281                                  ; =============== S U B	R O U T	I N E =======================================
 17282                                  
 17283                                  ; ---------------------------------------------------------------------------
 17284                                  ;
 17285                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 17286                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 17287                                  ; are permissible.
 17288                                  ;
 17289                                  ; On Input   AX contains sector size in bytes
 17290                                  ; On Output  AL Contains index
 17291                                  ; All other registers preserved
 17292                                  ;
 17293                                  ; ---------------------------------------------------------------------------
 17294                                  
 17295                                  ; 02/09/2023
 17296                                  ;SectSizeToSectIndex:
 17297                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 17298                                  ;					; examine upper	byte only
 17299                                  ;		ja	short OneK
 17300                                  ;		mov	al, ah		; value	in AH is the index!
 17301                                  ;		retn
 17302                                  
 17303                                  ; ---------------------------------------------------------------------------
 17304                                  ;
 17305                                  ;OneK:
 17306                                  ;		mov	al, 3
 17307                                  ;		retn
 17308                                  
 17309                                  ; =============== S U B	R O U T	I N E =======================================
 17310                                  
 17311                                  ; 02/09/2023
 17312                                  ;SectorSizeIndexToSectorSize:
 17313                                  ;		mov	cl, al
 17314                                  ;		mov	ax, 128
 17315                                  ;		shl	ax, cl
 17316                                  ;		retn
 17317                                  
 17318                                  ; =============== S U B	R O U T	I N E =======================================
 17319                                  
 17320                                  ; 16/10/2022
 17321                                  
 17322                                  ; ---------------------------------------------------------------------------
 17323                                  ;
 17324                                  ; SetDASD
 17325                                  ;
 17326                                  ; Set up the rom for formatting.
 17327                                  ; we have to tell the rom bios what type of disk is in the drive.
 17328                                  ;
 17329                                  ; On Input   - ES:di - Points to bds
 17330                                  ;
 17331                                  ; ---------------------------------------------------------------------------
 17332                                  
 17333                                  		; 24/12/2023 - Retro DOS 5.0
 17334                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:129Bh)
 17335                                  
 17336                                  		; 19/10/2022
 17337                                  SetDasd:
 17338 0000124A 803E[AA05]01            		cmp	byte [had_format_error], 1 ;
 17339                                  					; See if we've previously set dasd type
 17340 0000124F 740C                    		jz	short DoSetDasd
 17341                                  		; 24/12/2023
 17342 00001251 26F6453F80              		test	byte [es:di+3Fh], 80h
 17343                                  		; 10/12/2022
 17344                                  		;test	byte [es:di+23h], 80h
 17345                                  		;;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 17346                                  					; set_dasd_true
 17347 00001256 7446                    		jz	short DasdHasBeenSet
 17348                                  		; 24/12/2023
 17349 00001258 2680653F7F              		and	byte [es:di+3Fh], 7Fh
 17350                                  		; 10/12/2022
 17351                                  		;and	byte [es:di+23h], 7Fh
 17352                                  		;;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 17353                                  					; ~set_dasd_true
 17354                                  DoSetDasd:
 17355 0000125D C606[AA05]00            		mov	byte [had_format_error], 0 ; Reset it
 17356 00001262 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 17357 00001267 B004                    		mov	al, 4
 17358                                  		; 24/12/2023
 17359 00001269 268A653E                		mov	ah, [es:di+3Eh]
 17360                                  		; 02/09/2023
 17361                                  		;mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 17362 0000126D 80FC02                  		cmp	ah, 2
 17363                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 17364                                  					; DEV_3INCH720KB
 17365 00001270 7414                    		jz	short DoSet
 17366                                  		; 24/12/2023
 17367 00001272 B001                    		mov	al, 1
 17368                                  		;cmp	ah, 1
 17369 00001274 38C4                    		cmp	ah, al	; 1
 17370                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 17371                                  					; DEV_5INCH96TPI
 17372                                  		;jz	short GotBig
 17373                                  		; 24/12/2023
 17374                                  		;mov	al, 1
 17375                                  		;jmp	short DoSet
 17376                                  		; 02/09/2023
 17377 00001276 750E                    		jnz	short DoSet
 17378                                  GotBig:
 17379                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 17380                                  		; 02/09/2023
 17381 00001278 40                      		inc	ax  ; mov al, 2
 17382 00001279 803E[A805]00            		cmp	byte [mediatype], 0
 17383 0000127E 7506                    		jnz	short DoSet
 17384                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 17385                                  		; 10/12/2022
 17386                                  		;inc	al  ; al = 3
 17387                                  		; 18/12/2022
 17388 00001280 40                      		inc	ax  ; al = 3
 17389 00001281 C606[3B01]54            		mov	byte [gap_patch], 54h
 17390                                  DoSet:
 17391 00001286 1E                      		push	ds
 17392 00001287 56                      		push	si
 17393                                  
 17394                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 17395                                  		; 02/09/2023
 17396 00001288 31F6                    		xor	si, si
 17397 0000128A 8EDE                    		mov	ds, si	; 0
 17398                                  
 17399 0000128C C5367800                		lds	si, [DSKADR]
 17400                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 17401                                  		;;lds	si, ds:78h
 17402                                  
 17403 00001290 C644090F                		mov	byte [si+9], 0Fh ;
 17404                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 17405 00001294 5E                      		pop	si
 17406 00001295 1F                      		pop	ds
 17407 00001296 B417                    		mov	ah, 17h
 17408 00001298 268A5504                		mov	dl, [es:di+4]
 17409 0000129C CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 17410                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 17411                                  DasdHasBeenSet:
 17412 0000129E 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 17413 000012A2 8826[3701]              		mov	[formt_eot], ah
 17414 000012A6 C3                      		retn
 17415                                  
 17416                                  ; =============== S U B	R O U T	I N E =======================================
 17417                                  
 17418                                  ; 16/10/2022
 17419                                  
 17420                                  ; ---------------------------------------------------------------------------
 17421                                  ;
 17422                                  ; Set Media Type for Format
 17423                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 17424                                  ; BPB area in the BDS can be handled by the rom.
 17425                                  ; On Input, ES:DI -> current BDS.
 17426                                  ; The status of the operation is returned in AL
 17427                                  ;
 17428                                  ;	- 0 - if the support is available,and the combination is valid.
 17429                                  ;	- 1 - no rom support
 17430                                  ;	- 2 - illegal combination
 17431                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 17432                                  ;
 17433                                  ; Flags also may be altered. All other registers preserved.
 17434                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 17435                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 17436                                  ; to the one returned. the original pointer to the disk base table is stored
 17437                                  ; in TempDpt, until it is restored.
 17438                                  ;
 17439                                  ; ---------------------------------------------------------------------------
 17440                                  
 17441                                  		; 24/12/2023 - Retro DOS 5.0
 17442                                  
 17443                                  		; 19/10/2022
 17444                                  SetMediaForFormat:	
 17445 000012A7 51                      		push	cx
 17446 000012A8 52                      		push	dx
 17447                                  
 17448                                  		; If we have a format error, then do not change Dpt, TempDpt.
 17449                                  		; but we need to call int 13h, ah=18h again.
 17450                                  
 17451 000012A9 803E[AA05]01            		cmp	byte [had_format_error], 1
 17452 000012AE 7425                    		jz	short SkipSaveDskAdr
 17453 000012B0 30C0                    		xor	al, al		; If already done return 0
 17454 000012B2 803E[A905]01            		cmp	byte [media_set_for_format], 1
 17455 000012B7 7502                    		jnz	short DoSetMediaForFormat
 17456 000012B9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 17457                                  ; ---------------------------------------------------------------------------
 17458                                  
 17459                                  DoSetMediaForFormat:
 17460 000012BB 06                      		push	es
 17461 000012BC 56                      		push	si
 17462                                  
 17463                                  		; 02/09/2023
 17464                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 17465 000012BD 31F6                    		xor	si, si ; 0
 17466 000012BF 8EC6                    		mov	es, si
 17467                                  
 17468 000012C1 26C4367800              		les	si, [es:DSKADR]
 17469                                  		;les	si, es:78h	; [es:DSKADR]
 17470                                  					; Get pointer to disk base table
 17471 000012C6 8936[2D01]              		mov	[dpt], si
 17472 000012CA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 17473                                  
 17474                                  		; Initialize the head settle time to 0Fh. See the offsets
 17475                                  		; given in dskprm.inc.
 17476                                  
 17477 000012CE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 17478 000012D3 5E                      		pop	si
 17479 000012D4 07                      		pop	es
 17480                                  SkipSaveDskAdr:
 17481                                  		; 24/12/2023
 17482 000012D5 268B4D41                		mov	cx, [es:di+41h]	; (PCDOS 7.1 IBMBIO.COM)
 17483                                  		;mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 17484 000012D9 49                      		dec	cx
 17485 000012DA 80E503                  		and	ch, 3
 17486 000012DD D0CD                    		ror	ch, 1
 17487 000012DF D0CD                    		ror	ch, 1
 17488 000012E1 86E9                    		xchg	ch, cl
 17489 000012E3 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 17490 000012E7 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17491 000012EB 06                      		push	es
 17492 000012EC 1E                      		push	ds
 17493 000012ED 56                      		push	si
 17494 000012EE 57                      		push	di
 17495 000012EF B418                    		mov	ah, 18h
 17496 000012F1 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 17497                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 17498 000012F3 7231                    		jc	short FormaStatErr
 17499 000012F5 803E[AA05]01            		cmp	byte [had_format_error], 1
 17500 000012FA 7423                    		jz	short skip_disk_base_setting
 17501 000012FC 06                      		push	es		; Save segment returned	by the rom
 17502                                  
 17503                                  		; 02/09/2023
 17504                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 17505 000012FD 31F6                    		xor	si, si
 17506 000012FF 8EC6                    		mov	es, si ; 0
 17507 00001301 06                      		push	es ; * ; 02/09/2023
 17508                                  
 17509 00001302 26C4367800              		les	si, [es:DSKADR]
 17510                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 17511                                  					; Get current disk base	table
 17512 00001307 8936[AB05]              		mov	[tempdpt], si
 17513 0000130B 8C06[AD05]              		mov	[tempdpt+2], es ; Save it
 17514                                  
 17515                                  		; 02/09/2023
 17516                                  		;;mov	es, [zeroseg]
 17517                                  		;xor	si, si ; 0
 17518                                  		;mov	es, si
 17519 0000130F 07                      		pop	es ; * ; 02/09/2023
 17520                                  
 17521                                  		;mov	es:78h,	di
 17522 00001310 26893E7800              		mov	[es:DSKADR], di
 17523                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 17524 00001315 268F067A00              		pop	word [es:DSKADR+2]
 17525 0000131A C606[A905]01            		mov	byte [media_set_for_format], 1
 17526                                  skip_disk_base_setting:
 17527 0000131F 30C0                    		xor	al, al		; Legal	combination + rom support code
 17528                                  		;mov	ds:had_format_error, al	; Reset	the flag
 17529 00001321 A2[AA05]                		mov	[had_format_error], al
 17530 00001324 EB0E                    		jmp	short PopStatRet
 17531                                  ; ---------------------------------------------------------------------------
 17532                                  
 17533                                  FormaStatErr:
 17534                                  		; 10/12/2022
 17535 00001326 B003                    		mov	al, 3
 17536                                  
 17537 00001328 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 17538                                  					; Illegal combination =	0Ch
 17539 0000132B 7406                    		jz	short FormatStatIllegalComb
 17540 0000132D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 17541 00001330 7402                    		jz	short FormatStatTimeOut
 17542                                  		; 10/12/2022
 17543                                  		;dec	al
 17544                                  		; 18/12/2022
 17545 00001332 48                      		dec	ax
 17546                                  		; al = 2
 17547                                  		;mov	al, 1		; Function not supported.
 17548                                  		;jmp	short PopStatRet
 17549                                  ; ---------------------------------------------------------------------------
 17550                                  
 17551                                  FormatStatIllegalComb:
 17552                                  		; 10/12/2022
 17553                                  		;dec	al	; 3 -> 2 or 2 -> 1
 17554                                  		; 18/12/2022
 17555 00001333 48                      		dec	ax
 17556                                  		; al = 2
 17557                                  		;mov	al, 2		; Function supported, but
 17558                                  					; Illegal sect/trk,trk combination.
 17559                                  		; 10/12/2022
 17560                                  		;jmp	short PopStatRet
 17561                                  ; ---------------------------------------------------------------------------
 17562                                  
 17563                                  FormatStatTimeOut:
 17564                                  		; 10/12/2022
 17565                                  		; al = 3
 17566                                  		;mov	al, 3		; Function supported, but
 17567                                  					; Media	not present.
 17568                                  PopStatRet:
 17569 00001334 5F                      		pop	di
 17570 00001335 5E                      		pop	si
 17571 00001336 1F                      		pop	ds
 17572 00001337 07                      		pop	es
 17573                                  SetMediaRet:
 17574 00001338 5A                      		pop	dx
 17575 00001339 59                      		pop	cx
 17576 0000133A C3                      		retn
 17577                                  
 17578                                  ; =============== S U B	R O U T	I N E =======================================
 17579                                  
 17580                                  ; 16/10/2022
 17581                                  
 17582                                  ; ---------------------------------------------------------------------------
 17583                                  ;
 17584                                  ; RESET THE DRIVE
 17585                                  ;
 17586                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 17587                                  ; slow head settle time for the next operation. this is because the reset
 17588                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 17589                                  ; time around - there is a problem with 3.5" drives in that the head does
 17590                                  ; not settle down in time,even for read operations!!
 17591                                  ;
 17592                                  ; ---------------------------------------------------------------------------
 17593                                  
 17594                                  ResetDisk:
 17595 0000133B 50                      		push	ax
 17596                                  
 17597                                  		; 02/09/2023
 17598 0000133C B80100                  		mov	ax, 1 ; PCDOS 7.1
 17599 0000133F 3806[A905]              		cmp	[media_set_for_format], al ; 1
 17600                                  		;cmp	byte [media_set_for_format], 1
 17601                                  					; Reset while formatting?
 17602 00001343 7503                    		jnz	short ResetDisk_cont
 17603                                  					; Then verify operation in "fmt & vrfy"
 17604                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 17605 00001345 A2[AA05]                		mov	[had_format_error], al ; 1
 17606                                  ResetDisk_cont:
 17607                                  		; 02/09/2023 (ah=0)
 17608                                  		;xor	ah, ah		; So signals that we had a format error
 17609 00001348 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 17610                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 17611 0000134A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 17612                                  					; Zap up the speed
 17613 0000134F 58                      		pop	ax
 17614 00001350 C3                      		retn
 17615                                  
 17616                                  ; =============== S U B	R O U T	I N E =======================================
 17617                                  
 17618                                  ; 16/10/2022
 17619                                  
 17620                                  ; ---------------------------------------------------------------------------
 17621                                  ;
 17622                                  ; This routine sets up the drive parameter table with the values needed for
 17623                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 17624                                  ;
 17625                                  ; on entry  -	ES:DI - points to bds for the drive
 17626                                  ;		Xfer_Seg:BX - points to trkbuf
 17627                                  ;		AL    - number of sectors
 17628                                  ;		AH    - int 13 function code
 17629                                  ;		CL    - sector number for verify
 17630                                  ;		DS    - Bios_Data
 17631                                  ;
 17632                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 17633                                  ;		AX and flags are the results of the int 13
 17634                                  ;
 17635                                  ; ---------------------------------------------------------------------------
 17636                                  
 17637                                  		; 24/12/2023 - Retro DOS 5.0
 17638                                  
 17639                                  		; 19/10/2022
 17640                                  ToRom:
 17641 00001351 53                      		push	bx
 17642 00001352 56                      		push	si
 17643                                  
 17644                                  		; Compaq bug fix - check whether we are using new ROM
 17645                                  		; functionality to set up format, not merely if it exists.
 17646                                  		; This was formerly a check against [new_rom]
 17647                                  
 17648 00001353 F606[A905]01            		test	byte [media_set_for_format], 1
 17649 00001358 7534                    		jnz	short GotValidDpt
 17650 0000135A 50                      		push	ax
 17651 0000135B 06                      		push	es		; Save bds segment
 17652                                  		; 24/12/2023
 17653 0000135C 26807D3E02              		cmp	byte [es:di+3Eh], 2
 17654                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 17655                                  					; ffSmall ; is it a 3.5" drive?
 17656                                  		; 24/12/2023
 17657                                  		;pushf	; not necessary	; (Save	the cmp	result)
 17658 00001361 8E06[1A00]              		mov	es, [zeroseg]
 17659                                  		;les	si, es:78h	; Get pointer to disk base table
 17660 00001365 26C4367800              		les	si, [es:DSKADR]
 17661                                  		;mov	word ptr ds:dpt, si
 17662                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 17663 0000136A 8936[2D01]              		mov	[dpt], si
 17664 0000136E 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 17665                                  		
 17666 00001372 A0[3701]                		mov	al, [formt_eot]
 17667 00001375 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 17668 00001379 A0[3B01]                		mov	al, [gap_patch]
 17669 0000137C 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 17670                                  					; Important for	format
 17671 00001380 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 17672                                  					; Assume we are	doing a	seek operation
 17673                                  					; Setup	motor start correctly for 3.5" drives
 17674                                  		; 24/12/2023
 17675                                  		;popf			; Get result of	earlier	cmp
 17676 00001385 7505                    		jnz	short MotorStrtOK
 17677 00001387 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 17678                                  MotorStrtOK:
 17679 0000138C 07                      		pop	es		; Restore bds segment
 17680 0000138D 58                      		pop	ax
 17681                                  GotValidDpt:
 17682 0000138E 8B16[3901]              		mov	dx, [trknum]	; Set track number
 17683 00001392 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 17684 00001394 268A5504                		mov	dl, [es:di+4]	; Set drive number
 17685 00001398 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 17686 0000139C 06                      		push	es		; Save bds segment
 17687 0000139D 8E06[A804]              		mov	es, [xfer_seg]
 17688 000013A1 CD13                    		int	13h		; DISK -
 17689 000013A3 07                      		pop	es		; Restore bds segment
 17690 000013A4 5E                      		pop	si
 17691 000013A5 5B                      		pop	bx
 17692 000013A6 C3                      		retn
 17693                                  
 17694                                  ; ---------------------------------------------------------------------------
 17695                                  
 17696                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17697                                  ; 24/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 17698                                  
 17699                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 17700                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1404h
 17701                                  
 17702                                  ; ==========================================================================
 17703                                  ;
 17704                                  ; get the owner of the physical drive represented by the logical drive in al.
 17705                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 17706                                  ; if this is not the case, the system may hang, just following the linked list.
 17707                                  ;
 17708                                  ; ==========================================================================
 17709                                  
 17710                                  		; 24/12/2023 - Retro DOS 5.0
 17711                                  
 17712                                  		; 19/10/2022
 17713                                  ioctl_getown:
 17714 000013A7 E8FAF1                  		call	SetDrive
 17715 000013AA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 17716                                  					; Get physical drive number
 17717 000013AE C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 17718                                  ownloop:
 17719 000013B2 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 17720 000013B6 7507                    		jnz	short getnextBDS
 17721                                  		; 24/12/2023
 17722 000013B8 26F6453F20              		test	byte [es:di+3Fh], 20h ; (PCDOS 7.1 IBMBIO.COM)
 17723                                  		; 10/12/2022
 17724                                  		;test	byte [es:di+23h], 20h
 17725                                  		;;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 17726                                  					; fi_own_physical
 17727 000013BD 7514                    		jnz	short exitown
 17728                                  getnextBDS:
 17729 000013BF 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 17730 000013C2 EBEE                    		jmp	short ownloop
 17731                                  ; ---------------------------------------------------------------------------
 17732                                  
 17733                                  ; ==========================================================================
 17734                                  ;
 17735                                  ; set the ownership of the physical drive represented by the logical drive
 17736                                  ; in al to al.
 17737                                  ;
 17738                                  ; ==========================================================================
 17739                                  
 17740                                  		; 24/12/2023 - Retro DOS 5.0
 17741                                  
 17742                                  		; 19/10/2022
 17743                                  ioctl_setown:
 17744 000013C4 E8DDF1                  		call	SetDrive
 17745 000013C7 C606[7A00]01            		mov	byte [fsetowner], 1
 17746                                  					; set flag for CheckSingle to look at.
 17747 000013CC E8A8F5                  		call	checksingle
 17748                                  		; 02/09/2023
 17749 000013CF FE0E[7A00]              		dec	byte [fsetowner] ; 0
 17750                                  		;mov	byte [fsetowner], 0
 17751                                  					; set ownership	of drive reset flag
 17752                                  		; Fall into ExitOwn
 17753                                  
 17754                                  ; ==========================================================================
 17755                                  ;
 17756                                  ; if there is only one logical drive assigned to this physical drive, return
 17757                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 17758                                  ;
 17759                                  ; ==========================================================================
 17760                                  
 17761                                  		; 24/12/2023 - Retro DOS 5.0
 17762                                  exitown:
 17763 000013D3 30C9                    		xor	cl, cl
 17764                                  		; 24/12/2023
 17765 000013D5 26F6453F10              		test	byte [es:di+3Fh], 10h ; (PCDOS 7.1 IBMBIO.COM)
 17766                                  		; 12/12/2022
 17767                                  		;test	byte [es:di+23h], 10h
 17768                                  		;;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 17769                                  					; fi_am_mult
 17770 000013DA 7406                    		jz	short exitnomult
 17771 000013DC 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 17772                                  					; Get logical drive number
 17773                                  					; Get it 1-based
 17774 000013E0 FEC1                    		inc	cl
 17775                                  exitnomult:
 17776 000013E2 C51E[1200]              		lds	bx, [ptrsav]
 17777 000013E6 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 17778                                  					; Exit normal termination
 17779                                  		; 12/12/2022
 17780                                  		; cf=0
 17781                                  		;clc
 17782 000013E9 C3                      		retn
 17783                                  
 17784                                  ; =============== S U B	R O U T	I N E =======================================
 17785                                  
 17786                                  ; 16/10/2022
 17787                                  
 17788                                  ; ---------------------------------------------------------------------------
 17789                                  ;
 17790                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 17791                                  ; only if the first byte of TempDpt is not -1.
 17792                                  ; all registers (including flags) are preserved.
 17793                                  ;
 17794                                  ; ---------------------------------------------------------------------------
 17795                                  
 17796                                  		; 24/12/2023
 17797                                  		; 19/10/2022
 17798                                  RestoreOldDpt:
 17799                                  		; if we have already restored the disk base table earlier,
 17800                                  		; do not do it again.
 17801                                  
 17802 000013EA 50                      		push	ax
 17803 000013EB 30C0                    		xor	al, al
 17804 000013ED A2[AA05]                		mov	[had_format_error], al	; Reset flag and 
 17805 000013F0 8606[A905]              		xchg	al, [media_set_for_format] ; get current flag setting
 17806 000013F4 08C0                    		or	al, al
 17807 000013F6 7418                    		jz	short DontRestore
 17808 000013F8 56                      		push	si
 17809 000013F9 1E                      		push	ds
 17810 000013FA 06                      		push	es
 17811 000013FB C536[AB05]              		lds	si, [tempdpt]
 17812                                  
 17813                                  		; 17/10/2022
 17814                                  		;mov	es, [cs:BIOSDATAWORD]
 17815                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17816                                  		;mov	es, [es:zeroseg]
 17817                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 17818                                  
 17819                                  		; 24/12/2023
 17820 000013FF 31C0                    		xor	ax, ax
 17821 00001401 8EC0                    		mov	es, ax ; 0
 17822                                  
 17823                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 17824 00001403 2689367800              		mov	[es:DSKADR], si
 17825                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 17826 00001408 268C1E7A00              		mov	[es:DSKADR+2], ds
 17827 0000140D 07                      		pop	es
 17828 0000140E 1F                      		pop	ds
 17829 0000140F 5E                      		pop	si
 17830                                  DontRestore:
 17831 00001410 58                      		pop	ax
 17832                                  		; 12/12/2022
 17833                                  		; cf=0
 17834                                  		;clc			;  Clear carry
 17835 00001411 C3                      		retn
 17836                                  
 17837                                  ; ---------------------------------------------------------------------------
 17838                                  
 17839                                  ; 16/10/2022
 17840                                  
 17841                                  ; ==========================================================================
 17842                                  ;	get media id
 17843                                  ; ==========================================================================
 17844                                  ;
 17845                                  ; FUNCTION: get the volume label,the system id and the serial number from
 17846                                  ;	    the media that has the extended boot record.
 17847                                  ;	    for the conventional media,this routine will return "unknown
 17848                                  ;	    media type" error to dos.
 17849                                  ;
 17850                                  ; INPUT :   ES:di -> bds table for this drive.
 17851                                  ;
 17852                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 17853                                  ;	    if carry set,then al contains the device driver error number
 17854                                  ;	    that will be returned to dos.
 17855                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 17856                                  ;
 17857                                  ; SUBROUTINES TO BE CALLED:
 17858                                  ;	BootIo:NEAR
 17859                                  ;
 17860                                  ; LOGIC:
 17861                                  ;	to recognize the extended boot record,this logic will actually
 17862                                  ;	access the boot sector even if it is a hard disk.
 17863                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 17864                                  ;	field of bpb and the extended boot signature.
 17865                                  ;
 17866                                  ; {
 17867                                  ;	get logical drive number from bds table;
 17868                                  ;	rFlag = read operation;
 17869                                  ;	BootIo;		 /*get the media boot record into the buffer
 17870                                  ;	if (no error) then
 17871                                  ;	     if (extended boot record) then
 17872                                  ;		{ set volume label,volume serial number and system id
 17873                                  ;		  of the request packet to those of the boot record;
 17874                                  ;		};
 17875                                  ;	     else		  /*not an extended bpb */
 17876                                  ;		{ set register al to "unknown media.." error code;
 17877                                  ;		  set carry bit;
 17878                                  ;		};
 17879                                  ;	else
 17880                                  ;	     ret;	/*already error code is set in the register al
 17881                                  ;
 17882                                  ; ==========================================================================
 17883                                  
 17884                                  ;size_of_EXT_BOOT_SERIAL equ 4
 17885                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 17886                                  ;;size_of_EXT_SYSTEM_ID equ 8
 17887                                  
 17888                                  		; 24/12/2023 - Retro DOS 5.0
 17889                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:1478h)
 17890                                  
 17891                                  		; 19/10/2022
 17892                                  GetMediaId:
 17893 00001412 E8B000                  		call	ChangeLineChk
 17894 00001415 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 17895 00001419 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 17896 0000141E E88C00                  		call	BootIo		; Read boot sector into	DiskSector
 17897 00001421 722E                    		jb	short IOCtl_If1
 17898                                  					; Valid? (0F0h-0FFh?)
 17899 00001423 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 17900                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 17901                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 17902                                  		; 24/12/2023
 17903 00001428 7225                    		jb	short IOCtl_If7		
 17904                                  
 17905                                  		; 24/12/2023
 17906                                  		; 10/12/2022
 17907                                  		;mov	si, disksector+26h
 17908                                  		;;;
 17909                                  		; 24/12/2023
 17910                                  		;mov	si, disksector+43h ; BS_FAT32_VolID
 17911 0000142A BE[9401]                		mov	si, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023
 17912 0000142D 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 17913 00001432 7403                    		jz	short IOCtl_If3 ; FAT32 fs
 17914 00001434 83EE1C                  		sub	si, 1Ch         ; FAT (12-16) fs ; 43h-1Ch = 27h ; BS_VolID
 17915                                  		; si = disksector+26h = BS_BootSig ; 24/12/2023
 17916                                  IOCtl_If3:
 17917                                  		;cmp	byte [si-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 17918                                  		;;;
 17919 00001437 803C29                  		cmp	byte [si], 29h
 17920                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 17921                                  					; EXT_BOOT_SIGNATURE
 17922 0000143A 7512                    		jne	short IOCtl_If2	; not extended boot record
 17923 0000143C C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 17924 00001440 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17925                                  		; 10/12/2022
 17926                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 17927 00001444 46                      		inc	si
 17928                                  		; 24/12/2023
 17929                                  		; si = disksector+27h (BS_VolID)
 17930                                  		;      or disksector+43h (BS_FAT32_VolID)
 17931                                  
 17932 00001445 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 17933                                  IOCtl_If4:		; 24/12/2023
 17934 00001448 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 17935                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 17936                                  					; +size_of_EXT_SYSTEM_ID
 17937 0000144B F3A4                    		rep movsb		; Move from Bios_Data into request packet
 17938                                  	
 17939                                  		; 10/12/2022
 17940                                  		; cf = 0
 17941                                  		;clc
 17942                                  
 17943 0000144D C3                      		retn
 17944                                  ; ---------------------------------------------------------------------------
 17945                                  
 17946                                  		; 24/12/2023
 17947                                  IOCtl_If2:
 17948 0000144E F9                      		stc	
 17949                                  IOCtl_If7:
 17950 0000144F B007                    		mov	al, 7		; error_unknown_media
 17951                                  		;stc
 17952                                  IOCtl_If6:
 17953                                  IOCtl_If1:
 17954 00001451 C3                      		retn
 17955                                  ; ---------------------------------------------------------------------------
 17956                                  
 17957                                  ; 16/10/2022
 17958                                  
 17959                                  ; ==========================================================================
 17960                                  ;  set media id
 17961                                  ; ==========================================================================
 17962                                  
 17963                                  ; function: set the volume label, the system id and the serial number of
 17964                                  ;	    the media that has the extended boot record.
 17965                                  ;	    for the conventional media, this routine will return "unknown
 17966                                  ;	    media.." error to dos.
 17967                                  ;	    this routine will also set the corresponding informations in
 17968                                  ;	    the bds table.
 17969                                  ;
 17970                                  ; input :   ES:di -> bds table for this drive.
 17971                                  ;
 17972                                  ; output:   the extended boot record in the media will be set according to
 17973                                  ;	    the request packet.
 17974                                  ;	    if carry set, then al contains the device driver error number
 17975                                  ;	    that will be returned to dos.
 17976                                  ;
 17977                                  ; subroutines to be called:
 17978                                  ;	BootIo:NEAR
 17979                                  ;
 17980                                  ; logic:
 17981                                  ;
 17982                                  ; {
 17983                                  ;	get drive_number from bds;
 17984                                  ;	rFlag = "read operation";
 17985                                  ;	BootIo;
 17986                                  ;	if (no error) then
 17987                                  ;	     if (extended boot record) then
 17988                                  ;		{ set volume label,volume serial number and system id
 17989                                  ;		  of the boot record to those of the request packet;
 17990                                  ;		  rFlag = "write operation";
 17991                                  ;		  get drive number from bds;
 17992                                  ;		  BootIo;	  /*write it back*/
 17993                                  ;		};
 17994                                  ;	     else		  /*not an extended bpb */
 17995                                  ;		{ set register al to "unknown media.." error code;
 17996                                  ;		  set carry bit;
 17997                                  ;		  ret;	 /*return back to caller */
 17998                                  ;		};
 17999                                  ;	else
 18000                                  ;	     ret;		 /*already error code is set */
 18001                                  ;
 18002                                  ; ==========================================================================
 18003                                  
 18004                                  		; 24/12/2023 - Retro DOS 5.0
 18005                                  
 18006                                  		; 19/10/2022
 18007                                  SetMediaId:
 18008 00001452 E87000                  		call	ChangeLineChk
 18009 00001455 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 18010                                  					; Logical drive	number
 18011 00001459 88C2                    		mov	dl, al
 18012 0000145B C606[2001]02            		mov	byte [rflag], 2	; romread
 18013 00001460 52                      		push	dx
 18014 00001461 E84900                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 18015 00001464 5A                      		pop	dx
 18016 00001465 72EA                    		jb	short IOCtl_If6
 18017                                  					; Valid? (0F0h-0FFh?)
 18018 00001467 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 18019                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 18020 0000146C 72E1                    		jb	short IOCtl_If7	; Brif not
 18021                                  
 18022                                  		; 24/12/2023
 18023                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 18024                                  		;			; EXT_BOOT_SIGNATURE
 18025                                  		;jnz	short IOCtl_If7	; not extended boot record
 18026                                  		
 18027 0000146E 06                      		push	es		; Save BDS pointer
 18028 0000146F 57                      		push	di
 18029 00001470 1E                      		push	ds		; Point	ES To boot record
 18030 00001471 07                      		pop	es
 18031                                  
 18032                                  		; 24/12/2023
 18033                                  		;;;
 18034                                  		;mov	di, disksector+43h ; disksector+EXT_BOOT.SERIAL
 18035 00001472 BF[9401]                		mov	di, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023 
 18036 00001475 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 18037 0000147A 7403                    		jz      short IOCtl_If5	; FAT32 fs
 18038 0000147C 83EF1C                  		sub	di, 1Ch		; 67-28 ; offset disksektor+27h
 18039                                  		; di = disksector+26h = BS_BootSig ; 24/12/2023
 18040                                  IOCtl_If5:
 18041                                  		;cmp	byte [di-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 18042 0000147F 803D29                  		cmp	byte [di], 29h
 18043 00001482 7404                    		je	short IOCtl_If8
 18044 00001484 5F                      		pop	di		; not extended boot record
 18045 00001485 07                      		pop	es
 18046                                  		;jmp	short IOCtl_If7
 18047                                  		; 24/12/2023
 18048 00001486 EBC6                    		jmp	short IOCtl_If2
 18049                                  IOCtl_If8:
 18050                                  		;;;
 18051                                  		; 24/12/2023
 18052                                  		;mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 18053 00001488 47                      		inc	di
 18054                                  		; di = disksector+27h (BS_VolID)
 18055                                  		;      or disksector+43h (BS_FAT32_VolID)
 18056                                  
 18057 00001489 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 18058 0000148D C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 18059 00001490 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 18060                                  		
 18061                                  		; 24/12/2023
 18062                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 18063                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 18064                                  		;			; +size_of_EXT_SYSTEM_ID
 18065                                  		;rep movsb
 18066 00001493 E8B2FF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 18067                                  
 18068 00001496 06                      		push	es		; point	ds back	to Bios_Data
 18069 00001497 1F                      		pop	ds
 18070 00001498 5F                      		pop	di		; restore bds pointer
 18071 00001499 07                      		pop	es
 18072 0000149A E8B2F3                  		call	mov_media_ids	; update the bds media id info.
 18073 0000149D 88D0                    		mov	al, dl
 18074 0000149F C606[2001]03            		mov	byte [rflag], 3	; romwrite
 18075 000014A4 E80600                  		call	BootIo		; write	it back.
 18076 000014A7 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 18077                                  					; make sure chk_media check the driver
 18078                                  					; return with error code from BootIo
 18079 000014AC C3                      		retn
 18080                                  ; ---------------------------------------------------------------------------
 18081                                  
 18082                                  		; 24/12/2023
 18083                                  ;IOCtl_If7:
 18084                                  ;		mov	al, 7		; error_unknown_media
 18085                                  ;		stc
 18086                                  ;IOCtl_If6:
 18087                                  ;		retn
 18088                                  
 18089                                  ; =============== S U B	R O U T	I N E =======================================
 18090                                  
 18091                                  ; 16/10/2022
 18092                                  
 18093                                  ; ---------------------------------------------------------------------------
 18094                                  ;	BootIo
 18095                                  ; ---------------------------------------------------------------------------
 18096                                  ;
 18097                                  ; function: read/write the boot record into boot sector.
 18098                                  ;
 18099                                  ; input :
 18100                                  ;	    al=logical drive number
 18101                                  ;	    rFlag = operation (read/write)
 18102                                  ;
 18103                                  ; output:   for read operation,the boot record of the drive specified in bds
 18104                                  ;	    be read into the DiskSector buffer.
 18105                                  ;	    for write operation,the DiskSector buffer image will be written
 18106                                  ;	    to the drive specified in bds.
 18107                                  ;	    if carry set,then al contains the device driver error number
 18108                                  ;	    that will be returned to dos.
 18109                                  ;	    AX,CX,DX register destroyed.
 18110                                  ;	    if carry set,then al will contain the error code from DiskIO.
 18111                                  ;
 18112                                  ; subroutines to be called:
 18113                                  ;	DiskIO:NEAR
 18114                                  ;
 18115                                  ; logic:
 18116                                  ;
 18117                                  ; {
 18118                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 18119                                  ;	sectorcount = 1;	 /*read 1 sector only */
 18120                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 18121                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 18122                                  ; }
 18123                                  ; ==========================================================================
 18124                                  
 18125                                  		; 19/10/2022
 18126                                  BootIo:	
 18127 000014AD 06                      		push	es
 18128 000014AE 57                      		push	di
 18129 000014AF 53                      		push	bx
 18130 000014B0 1E                      		push	ds
 18131 000014B1 07                      		pop	es		; Point ES: to Bios_Data
 18132                                  
 18133                                  		; Call DiskIO to read/write the boot sec. The parameters which
 18134                                  		; need to be initialized for this subroutine out here are
 18135                                  		; - Transfer address to Bios_Data:DiskSector
 18136                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 18137                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 18138                                  		; - Number of sectors <-- 1
 18139                                  
 18140 000014B2 BF[5201]                		mov	di, disksector	; es:di -> transfer address
 18141 000014B5 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 18142 000014B7 8916[9C04]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 18143 000014BB B90100                  		mov	cx, 1
 18144 000014BE E850F5                  		call	diskio
 18145 000014C1 5B                      		pop	bx
 18146 000014C2 5F                      		pop	di
 18147 000014C3 07                      		pop	es
 18148 000014C4 C3                      		retn
 18149                                  
 18150                                  ; =============== S U B	R O U T	I N E =======================================
 18151                                  
 18152                                  ; 16/10/2022
 18153                                  
 18154                                  ; ---------------------------------------------------------------------------
 18155                                  ;	ChangeLineChk
 18156                                  ; ---------------------------------------------------------------------------
 18157                                  ;
 18158                                  ; when the user calls get/set media id call before dos establishes the media
 18159                                  ; by calling "media_chk",the change line activity of the drive is going to be
 18160                                  ; lost.	this routine will check the change line activity and will save the
 18161                                  ; history in the flags.
 18162                                  ;
 18163                                  ; FUNCTION: check the change line error activity
 18164                                  ;
 18165                                  ; INPUT :  ES:di -> bds table.
 18166                                  ;
 18167                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 18168                                  ;
 18169                                  ; SUBROUTINES TO BE CALLED:
 18170                                  ;	Set_Changed_DL
 18171                                  ;
 18172                                  ; ---------------------------------------------------------------------------
 18173                                  
 18174                                  		; 24/12/2023 - Retro DOS 5.0
 18175                                  ChangeLineChk:	
 18176 000014C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18177 000014C9 08D2                    		or	dl, dl		; Fixed	disk?
 18178 000014CB 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 18179                                  		; 24/12/2023
 18180 000014CD 26F6453F04              		test	byte [es:di+3Fh], 4 ; [es:di+BDS.flags] ; PCDOS 7.1
 18181                                  		; 12/12/2022
 18182                                  		;test	byte [es:di+23h], 4
 18183                                  		;;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 18184                                  					; return_fake_bpb
 18185 000014D2 751A                    		jnz	short ChangeLnChkRet
 18186 000014D4 803E[7700]01            		cmp	byte [fhave96], 1   ; This rom support change line?
 18187 000014D9 7513                    		jnz	short ChangeLnChkRet
 18188 000014DB E8AD07                  		call	haschange	; This drive support change line?
 18189 000014DE 740E                    		jz	short ChangeLnChkRet ; Do nothing
 18190                                  
 18191                                  		; Execute the rom disk interrupt to check changeline activity.
 18192                                  
 18193 000014E0 B416                    		mov	ah, 16h
 18194 000014E2 CD13                    		int	13h	; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 18195                                  				; DL = drive to	check
 18196                                  				; Return: AH = disk change status
 18197 000014E4 7308                    		jnb	short ChangeLnChkRet
 18198 000014E6 53                      		push	bx
 18199 000014E7 BB4000                  		mov	bx, 40h		; fchanged
 18200                                  					; Update flag in BDS for this
 18201                                  					; physical drive
 18202 000014EA E87707                  		call	set_changed_dl
 18203 000014ED 5B                      		pop	bx
 18204                                  ChangeLnChkRet:				
 18205 000014EE C3                      		retn
 18206                                  
 18207                                  ; ---------------------------------------------------------------------------
 18208                                  
 18209                                  ; 16/10/2022
 18210                                  
 18211                                  ; ==========================================================================
 18212                                  ;	GetAccessFlag
 18213                                  ; ==========================================================================
 18214                                  ;
 18215                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 18216                                  ;
 18217                                  ; INPUT :
 18218                                  ;	    ES:di -> bds table
 18219                                  ;
 18220                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 18221                                  ;						 = 1 if disk i/o allowed.
 18222                                  ; ==========================================================================
 18223                                  
 18224                                  		; 24/12/2023 - Retro DOS 5.0
 18225                                  
 18226                                  		; 19/10/2022
 18227                                  GetAccessFlag:				
 18228 000014EF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 18229 000014F3 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18230                                  		;mov	al, 0		; Assume result	is unformatted
 18231                                  		; 10/12/2022
 18232 000014F6 28C0                    		sub	al, al
 18233                                  		; 24/12/2023
 18234 000014F8 26F6454002              		test	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 18235                                  		;test	word ptr es:[di+3Fh], 200h
 18236                                  		; 10/12/2022
 18237                                  		;test	byte [es:di+36], 02h
 18238                                  		;;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 18239                                  					; unformatted_media
 18240 000014FD 7501                    		jnz	short GafDone	; Done if unformatted
 18241                                  		;inc	al		; Return true for formatted
 18242                                  		; 24/12/2023
 18243 000014FF 40                      		inc	ax
 18244                                  GafDone:				
 18245 00001500 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 18246 00001503 C3                      		retn
 18247                                  ; ---------------------------------------------------------------------------
 18248                                  
 18249                                  ; 16/10/2022
 18250                                  
 18251                                  ; ==========================================================================
 18252                                  ;	SetAccessFlag
 18253                                  ; ==========================================================================
 18254                                  ;
 18255                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 18256                                  ;
 18257                                  ; input :
 18258                                  ;	    ES:di -> bds table
 18259                                  ;
 18260                                  ; output:   unformtted_media bit modified according to the user request
 18261                                  ; ==========================================================================
 18262                                  
 18263                                  		; 24/12/2023 - Retro DOS 5.0
 18264                                  
 18265                                  		; 19/10/2022
 18266                                  SetAccessFlag:				
 18267 00001504 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 18268 00001508 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18269                                  		; 24/12/2023
 18270 0000150B 26806540FD              		and	byte [es:di+40h], 0FDh ; (PCDOS 7.1 IBMBIO.COM)
 18271                                  		;and	word ptr es:[di+3Fh], 0FDFFh
 18272                                  		; 10/12/2022
 18273                                  		;and	byte [es:di+36], 0FDh
 18274                                  		;;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 18275                                  					; ~unformatted_media
 18276 00001510 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 18277 00001514 7505                    		jnz	short saf_Done
 18278                                  		; 24/12/2023
 18279 00001516 26804D4002              		or	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 18280                                  		;or	word ptr es:[di+3Fh], 200h
 18281                                  		; 15/04/2024
 18282                                  		; 10/12/2022
 18283                                  		;or	byte [es:di+36], 02h
 18284                                  		;;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 18285                                  					; unformatted_media
 18286                                  saf_Done:				
 18287 0000151B C3                      		retn
 18288                                  ; ---------------------------------------------------------------------------
 18289                                  
 18290                                  ; 16/10/2022
 18291                                  
 18292                                  ; ==========================================================================
 18293                                  ; Ioctl_Support_Query
 18294                                  ; ==========================================================================
 18295                                  ;
 18296                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 18297                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 18298                                  ; device attributes specifies if this function is supported.
 18299                                  ;
 18300                                  ; ==========================================================================
 18301                                  
 18302                                  		; 24/12/2023 - Retro DOS 5.0
 18303                                  
 18304                                  		; 19/10/2022
 18305                                  ioctl_support_query:
 18306 0000151C 06                      		push	es
 18307 0000151D C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 18308 00001521 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 18309                                  					; AL ==	Major, AH == Minor
 18310                                  		; 24/12/2023
 18311                                  		; 02/09/2023 (PCDOS 7.1)
 18312 00001525 3C48                    		cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 18313                                  					; new generic ioctl function (FAT32)
 18314 00001527 7404                    		je	short ioctl_support
 18315                                  
 18316 00001529 3C08                    		cmp	al, 8		; IOC_DC
 18317                                  					; See if major code is 8
 18318 0000152B 7513                    		jne	short nosupport
 18319                                  ioctl_support:
 18320 0000152D 0E                      		push	cs
 18321 0000152E 07                      		pop	es
 18322                                  		; 24/12/2023
 18323                                  		; 02/09/2023
 18324 0000152F B90E00                  		mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 18325                                  		;mov	cx, 11		; IOC_DC_TABLE_LEN
 18326                                  		; 10/12/2022
 18327 00001532 BF[BD0E]                		mov	di, IOC_DC_Table
 18328                                  		;mov	di, 0C60h	; IOC_DC_Table
 18329                                  					; at 2C7h:0C60h	= 70h:31D0h
 18330 00001535 86C4                    		xchg	al, ah		; Put minor code in AL
 18331 00001537 F2AE                    		repne scasb		; Scan for minor code in AL
 18332 00001539 7505                    		jnz	short nosupport	; it was not found
 18333 0000153B B80001                  		mov	ax, 100h
 18334                                  		; 10/12/2022
 18335                                  		; (jump to ioctlsupexit is not required)
 18336                                  		;jmp	short $+2	; ioctlsupexit
 18337                                  					; Signal ioctl is supported
 18338                                  		;;jmp	short ioctlsupexit
 18339                                  ; ---------------------------------------------------------------------------
 18340                                  ioctlsupexit:
 18341 0000153E 07                      		pop	es
 18342                                  		; 10/12/2022
 18343                                  		; cf = 0
 18344                                  		;clc
 18345 0000153F C3                      		retn
 18346                                  ; ---------------------------------------------------------------------------
 18347                                  nosupport:
 18348 00001540 07                      		pop	es
 18349 00001541 E991EB                  		jmp	bc_cmderr
 18350                                  ; ---------------------------------------------------------------------------
 18351                                  
 18352                                  ; 16/10/2022
 18353                                  
 18354                                  ; ==========================================================================
 18355                                  ;	GetMediaSenseStatus
 18356                                  ; ==========================================================================
 18357                                  ;
 18358                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 18359                                  ;	    diskette drive and whether the media is the default type
 18360                                  ;	    for that drive. (default type means the max size for that
 18361                                  ;	    drive)
 18362                                  ;
 18363                                  ; INPUT :   ES:DI -> BDS table
 18364                                  ; OUTPUT:   If carry clear
 18365                                  ;	    DS:BX -> Updated IOCtlPacket
 18366                                  ;
 18367                                  ;			 Special Function at offset 0:
 18368                                  ;				0	- Media detected is not default type
 18369                                  ;				1	- Media detected is default type
 18370                                  ;
 18371                                  ;			 Device Type at offset 1:
 18372                                  ;				2       - 720K 3.5" 80 tracks
 18373                                  ;				7	- 1.44M 3.5" 80 tracks
 18374                                  ;				9	- 2.88M 3.5" 80 tracks
 18375                                  ;
 18376                                  ; Error Codes returned in AX if carry set:
 18377                                  ;
 18378                                  ; 8102 - Drive not ready	- No disk is in the drive.
 18379                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 18380                                  ;				  the media is really unkown, any error
 18381                                  ;				  other than "media not present"
 18382                                  ; 
 18383                                  ; ==========================================================================
 18384                                  
 18385                                  		; 19/10/2022
 18386                                  SenseMediaType:
 18387 00001544 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 18388 00001548 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18389                                  		; 10/10/2022
 18390                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 18391 0000154B 31D2                    		xor	dx, dx
 18392 0000154D 8917                    		mov	[bx], dx ; 0
 18393                                  		;
 18394 0000154F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18395                                  					; Get int 13h drive number from	BDS
 18396                                  		; 10/12/2022
 18397                                  		;xor	dh, dh		; DX = physical	drive number
 18398 00001553 B420                    		mov	ah, 20h		; Get Media Type function
 18399                                  					; If no	carry media type in AL
 18400 00001555 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 18401 00001557 7216                    		jc	short MediaSenseEr ; error code	in AH
 18402 00001559 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 18403                                  DetermineMediaType:
 18404 0000155B FEC8                    		dec	al
 18405 0000155D 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 18406 0000155F 740A                    		jz	short GotMediaType
 18407 00001561 0404                    		add	al, 4
 18408 00001563 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 18409 00001565 7404                    		jz	short GotMediaType
 18410 00001567 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 18411 00001569 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 18412                                  GotMediaType:
 18413 0000156B 884701                  		mov	[bx+1],	al	; Save the return value
 18414                                  		; 10/12/2022
 18415                                  		; cf = 0
 18416                                  		;clc			; Signal success
 18417 0000156E C3                      		retn
 18418                                  ; ---------------------------------------------------------------------------
 18419                                  
 18420                                  MediaSenseEr:
 18421 0000156F 80FC32                  		cmp	ah, 32h		; See if not default media error
 18422 00001572 74E7                    		jz	short DetermineMediaType ; Not really an error
 18423 00001574 B002                    		mov	al, 2		; Now assume drive not ready
 18424 00001576 80FC31                  		cmp	ah, 31h		; See if media was present
 18425 00001579 7402                    		jz	short SenseErrExit ; Return drive not ready
 18426                                  UnknownMediaType:
 18427 0000157B B007                    		mov	al, 7		; Just don't know the media type
 18428                                  SenseErrExit:
 18429 0000157D B481                    		mov	ah, 81h		; Signal error return
 18430 0000157F F9                      		stc
 18431 00001580 C3                      		retn
 18432                                  
 18433                                  ; ----------------------------------------------------------------------------
 18434                                  		; 10/12/2022
 18435                                  		;db    0
 18436                                  ; ----------------------------------------------------------------------------
 18437                                  
 18438                                  ;-----------------------------------------------------------------------------
 18439                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:15F2h
 18440                                  ;-----------------------------------------------------------------------------
 18441                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 18442                                  
 18443                                  ; =============== S U B R O U T I N E =======================================
 18444                                  
 18445                                  SetLockState:
 18446 00001581 C51E[1200]              		lds	bx, [ptrsav]	; set media lock state
 18447 00001585 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18448                                  		;mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18449                                  		;call	check_int13h_exts_present
 18450                                  		; 26/12/2023
 18451 00001588 E82100                  		call	check_int13h_exts_p
 18452                                  		;mov	al, 3		; unknown command error
 18453 0000158B 721C                    		jc	short setlockst_ret
 18454 0000158D 8A07                    		mov	al, [bx]	; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FUNCTIONS]
 18455 0000158F B445                    		mov	ah, 45h
 18456 00001591 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE
 18457                                  		; (DL - drive, [SI - disk address packet)
 18458 00001593 884701                  		mov	[bx+1], al	; 1 = locked, 0 = not locked
 18459                                  		; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FLAG]
 18460                                  		
 18461                                  		; 26/12/2023
 18462 00001596 EB0A                    		jmp	short sls_em
 18463                                  
 18464                                  ;		jnc	short setlockst_ret
 18465                                  ;		mov	al, ah
 18466                                  ;		call	maperror
 18467                                  ;setlockst_ret:
 18468                                  ;		mov	ah, 81h		; Return this status in case of carry
 18469                                  ;		retn
 18470                                  
 18471                                  ; =============== S U B R O U T I N E =======================================
 18472                                  
 18473                                  EjectMedia:
 18474                                  		;mov	dl, [es:di+4]	; eject media in drive
 18475                                  		;			; [es:di+BDS.drivenum]
 18476                                  		;call	check_int13h_exts_present
 18477                                  		; 26/12/2023
 18478 00001598 E81100                  		call	check_int13h_exts_p
 18479                                  		;mov	al, 3		; unknown command error
 18480 0000159B 720C                    		jc	short ejectm_ret
 18481 0000159D B80046                  		mov	ax, 4600h
 18482 000015A0 CD13                    		int	13h		; DISK - IBM/MS Extension - EJECT MEDIA
 18483                                  		; (DL - drive)
 18484                                  sls_em:			; 26/12/2023
 18485 000015A2 7305                    		jnc	short ejectm_ret
 18486 000015A4 88E0                    		mov	al, ah
 18487 000015A6 E800F8                  		call	maperror
 18488                                  setlockst_ret:		; 26/12/2023
 18489                                  ejectm_ret:
 18490 000015A9 B481                    		mov	ah, 81h		; Return this status in case of carry
 18491 000015AB C3                      		retn
 18492                                  
 18493                                  ; =============== S U B R O U T I N E =======================================
 18494                                  
 18495                                  		; 26/12/2023
 18496                                  check_int13h_exts_p:
 18497 000015AC 268A5504                		mov	dl, [es:di+4]
 18498                                  
 18499                                  check_int13h_exts_present:
 18500 000015B0 B441                    		mov	ah, 41h
 18501 000015B2 53                      		push	bx
 18502 000015B3 BBAA55                  		mov	bx, 55AAh
 18503 000015B6 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 18504                                  					; BX = 55AAh, DL = drive number
 18505                                  					; Return: CF set if not supported
 18506                                  					; AH = extensions version
 18507                                  					; BX = AA55h
 18508                                  					; CX = Interface support bit map
 18509 000015B8 81FB55AA                		cmp	bx, 0AA55h
 18510 000015BC 5B                      		pop	bx
 18511 000015BD 7505                    		jnz	short exts_notsupported
 18512 000015BF F6C102                  		test	cl, 2		; bit 1 - drive locking and ejecting subset
 18513 000015C2 7503                    		jnz	short exts_supported
 18514                                  exts_notsupported:
 18515                                  		; 26/12/2023
 18516 000015C4 B003                    		mov	al, 3
 18517                                  		;
 18518 000015C6 F9                      		stc
 18519                                  exts_supported:
 18520 000015C7 C3                      		retn
 18521                                  
 18522                                  ; =============== S U B R O U T I N E =======================================
 18523                                  
 18524                                  GetDrvMapInfo:
 18525 000015C8 8CD9                    		mov	cx, ds		; get drive map information
 18526                                  					;
 18527                                  					; es:di points to BDS which belongs to
 18528                                  					;	  the requested logical/dos drive number
 18529                                  					;
 18530                                  					; Format of parameter block:
 18531                                  					; Offset  Description (Table 01570)
 18532                                  					;  00h    (call) length of this buffer (in bytes)
 18533                                  					;  01h    (ret) number of bytes in parameter block
 18534                                  					;	    actually used
 18535                                  					;  02h    (ret) drive flags
 18536                                  					;  03h    (ret) physical drive number
 18537                                  					;	    00h-7Fh floppy
 18538                                  					;	    80h-FEh hard
 18539                                  					;	    FFh no physical drive
 18540                                  					;  04h    (ret) bitmap of logical drives associated with
 18541                                  					;	    physical drive
 18542                                  					;	    bit 0 = drive A:, etc.
 18543                                  					;  08h    (ret) relative block address of partition start
 18544                                  					;	    qword
 18545                                  					;
 18546                                  					; Ref: Ralf Brown's Interrupt List, INTERRUP.G
 18547 000015CA C51E[1200]              		lds	bx, [ptrsav]
 18548 000015CE C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18549 000015D1 B80381                  		mov	ax, 8103h	; ah = generic ioctl error code (81h)
 18550                                  					; al = unknown command error (03h)
 18551 000015D4 803F10                  		cmp	byte [bx], 10h	; parameter buffer length = 16 bytes
 18552 000015D7 7251                    		jb	short gdmi_4
 18553 000015D9 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18554 000015DD 885703                  		mov	[bx+3], dl	; parameter block - offset 3 - physical drive number
 18555 000015E0 C6470110                		mov	byte [bx+1], 10h ; parameter block - actually used length
 18556 000015E4 268B4517                		mov	ax, [es:di+17h]	; [es:di+BDS.hiddensectors]
 18557 000015E8 894708                  		mov	[bx+8], ax	; parameter block - offset 8 - partition start LBA
 18558 000015EB 268B4519                		mov	ax, [es:di+19h]	; [es:di+BDS.hiddensectors+2]
 18559 000015EF 89470A                  		mov	[bx+0Ah], ax	; parameter block - offset 10
 18560 000015F2 31C0                    		xor	ax, ax ; 0
 18561 000015F4 884702                  		mov	[bx+2], al	; drive flags = 0 (protected mode flags etc.)
 18562 000015F7 89470C                  		mov	[bx+0Ch], ax	; high dword of partition start address (LBA) is 0
 18563 000015FA 89470E                  		mov	[bx+0Eh], ax
 18564 000015FD 894704                  		mov	[bx+4], ax	; logical drive bitmap of same physical drive
 18565                                  					; initialized as 0
 18566 00001600 894706                  		mov	[bx+6], ax ; 0
 18567 00001603 8EC1                    		mov	es, cx
 18568                                  		;les	di, dword ptr es:start_bds ; 1st BDS
 18569 00001605 26C43E[1901]            		les	di, [es:start_bds]
 18570 0000160A B90100                  		mov	cx, 1		; bit 0 (drive A:)
 18571                                  gdmi_1:
 18572 0000160D 83FFFF                  		cmp	di, 0FFFFh	; last BDS ?
 18573 00001610 7415                    		jz	short gdmi_3	; yes
 18574 00001612 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum], dl
 18575                                  					; is it same physical drive ?
 18576 00001616 7506                    		jnz	short gdmi_2	; no
 18577 00001618 094F04                  		or	[bx+4], cx	; set bit for logical drive index of this BDS
 18578                                  					; (previously) shifted bit (which is 1/ON) is in ax:cx
 18579 0000161B 094706                  		or	[bx+6], ax
 18580                                  gdmi_2:
 18581 0000161E D1E1                    		shl	cx, 1		; shift one left for setting the next drive's bit
 18582 00001620 D1D0                    		rcl	ax, 1		; set high word of the bit select (set) value
 18583 00001622 26C43D                  		les	di, [es:di]	; next BDS
 18584 00001625 EBE6                    		jmp	short gdmi_1	; loop until di = -1 (last BDS sign)
 18585                                  gdmi_3:
 18586 00001627 B80001                  		mov	ax, 100h	; success
 18587                                  gdmi_4:
 18588 0000162A C3                      		retn
 18589                                  
 18590                                  ;-----------------------------------------------------------------------------
 18591                                  
 18592                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18593                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 18594                                  
 18595                                  ;-----------------------------------------------------------------------------
 18596                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 18597                                  ;-----------------------------------------------------------------------------
 18598                                  ; 16/03/2019 - Retro DOS v4.0
 18599                                  
 18600                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 18601                                  ;	after booting. this allows testing and implementation of custom int_13
 18602                                  ;	handlers, without giving up ms-dos error recovery
 18603                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 18604                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 18605                                  ;	exit:	orig13	== address of new int_13 handler
 18606                                  ;		ds:dx	== old orig13 value
 18607                                  ;		es:bx	== old old13  value
 18608                                  ;
 18609                                  ; int 2f handler for external block drivers to communicate with the internal
 18610                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 18611                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 18612                                  ; dsk_entry, the entry point for all disk requests.
 18613                                  ;
 18614                                  ; on exit from this driver, we will return to the external driver
 18615                                  ; that issued this int 2f, and can then remove the flags from the stack.
 18616                                  ; this scheme allows us to have a small external device driver, and makes
 18617                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 18618                                  ; since we only need to make changes in one place (most of the time).
 18619                                  ;
 18620                                  ;   ax=800h - check for installed handler - reserved
 18621                                  ;   ax=801h - install the bds into the linked list
 18622                                  ;   ax=802h - dos request
 18623                                  ;   ax=803h - return bds table starting pointer in ds:di
 18624                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 18625                                  ;	    problem. bds table is going to be used to get head/sector
 18626                                  ;	    informations without calling generic ioctl get device parm call.)
 18627                                  
 18628                                  ;BIOSSEGMENT equ 70h
 18629                                  DOSBIOSSEG equ 0070h ; 17/10/2022
 18630                                  
 18631                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 18632                                  ;BIOSCODE:16AAh (PCDOS 7.1, IBMBIO.COM) ; 26/12/2023
 18633                                  
 18634                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 18635 0000162B 80FC13                  		cmp	ah, 13h
 18636 0000162E 7413                    		jz	short int2f_replace_int13
 18637 00001630 80FC08                  		cmp	ah, 8
 18638 00001633 7432                    		jz	short mine
 18639                                  
 18640                                  ; Check for WIN386 startup and return the BIOS instance data
 18641                                  
 18642 00001635 80FC16                  		cmp	ah, 16h		; MultWin386
 18643 00001638 746D                    		jz	short win386call
 18644 0000163A 80FC4A                  		cmp	ah, 4Ah		; multMULT
 18645 0000163D 7503                    		jnz	short i2f_handler_iret
 18646 0000163F E99800                  		jmp	handle_multmult
 18647                                  ; ---------------------------------------------------------------------------
 18648                                  
 18649                                  i2f_handler_iret:			
 18650 00001642 CF                      		iret
 18651                                  ; ---------------------------------------------------------------------------
 18652                                  
 18653                                  int2f_replace_int13:
 18654 00001643 FA                      		cli	; 26/12/2023
 18655 00001644 50                      		push	ax	; free up a register for caller's ds
 18656 00001645 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 18657                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 18658                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 18659                                  					; = [02C7h:0030h] = [0070h:25A0h]
 18660 00001647 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 18661                                  		; 19/10/2022
 18662                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 18663                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 18664                                  		;push	word ptr ds:Old13	; return them to caller
 18665                                  		;push	word ptr ds:Old13+2
 18666                                  		
 18667                                  		; 02/09/2023 (PCDOS 7.1)
 18668                                  		;push	word [Orig13]
 18669 0000164C FF36[B600]              		push	word [Orig13+2]
 18670                                  		;push	word [Old13]
 18671 00001650 FF36[0801]              		push	word [Old13+2]
 18672                                  
 18673                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 18674                                  		;mov	word ptr ds:Orig13+2, ax
 18675                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 18676                                  		;mov	word ptr ds:Old13+2, es
 18677                                  		
 18678                                  		;mov	[Orig13], dx
 18679                                  		; 02/09/2023
 18680 00001654 8716[B400]              		xchg	dx, [Orig13]
 18681 00001658 A3[B600]                		mov	[Orig13+2], ax
 18682                                  		;mov	[Old13], bx
 18683                                  		; 02/09/2023
 18684 0000165B 871E[0601]              		xchg	bx, [Old13]
 18685 0000165F 8C06[0801]              		mov	[Old13+2], es
 18686                                  
 18687 00001663 07                      		pop	es			; es:bx := old old13 vector
 18688                                  		; 02/09/2023
 18689                                  		;pop	bx
 18690 00001664 1F                      		pop	ds			; ds:dx := old orig13 vector
 18691                                  		;pop	dx ; 02/09/2023
 18692 00001665 58                      		pop	ax
 18693                                  i2f_iret:
 18694 00001666 CF                      		iret
 18695                                  ; ---------------------------------------------------------------------------
 18696                                  
 18697                                  mine:
 18698 00001667 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 18699 00001669 73FB                    		jnb	short i2f_iret
 18700 0000166B 08C0                    		or	al, al			; a get installed state request?
 18701 0000166D 7503                    		jnz	short disp_func
 18702 0000166F B0FF                    		mov	al, 0FFh
 18703                                  		;jmp	short i2f_iret
 18704                                  		; 02/09/2023
 18705 00001671 CF                      		iret
 18706                                  ; ---------------------------------------------------------------------------
 18707                                  
 18708                                  disp_func:
 18709 00001672 3C01                    		cmp	al, 1			; request for installing bds?
 18710 00001674 7418                    		jz	short do_subfun_01
 18711 00001676 3C03                    		cmp	al, 3			; get bds vector?
 18712 00001678 7423                    		jz	short do_get_bds_vector
 18713                                  
 18714                                  ; set up pointer to request packet
 18715                                  
 18716 0000167A 1E                      		push	ds
 18717 0000167B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 18718                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18719                                  					; = [0070h:25A0h] = [02C7h:0030h]
 18720                                  		; 19/10/2022
 18721                                  		;mov	word ptr ds:ptrsav, bx
 18722                                  		;mov	word ptr ds:ptrsav+2, es
 18723 00001680 891E[1200]              		mov	[ptrsav], bx
 18724 00001684 8C06[1400]              		mov	[ptrsav+2], es
 18725 00001688 1F                      		pop	ds
 18726                                  		;jmp	far ptr	i2f_dskentry
 18727                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 18728                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 18729 00001689 EA[5E06]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 18730                                  		;; 17/10/2022
 18731                                  		;;jmp	far DOSBIOSSEG:dsk_entry
 18732                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 18733                                  					; NOTE: jump to a FAR function, not an
 18734                                  					;  IRET type function. Callers of
 18735                                  					;  this int2f subfunction will have
 18736                                  					;  to be careful to do a popf
 18737                                  
 18738                                  ; ---------------------------------------------------------------------------
 18739                                  
 18740                                  do_subfun_01:
 18741 0000168E 06                      		push	es
 18742 0000168F 1E                      		push	ds
 18743 00001690 1E                      		push	ds
 18744 00001691 07                      		pop	es
 18745                                  		; 17/10/2022
 18746 00001692 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18747                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18748                                  					; point	ds: -> Bios_Data
 18749 00001697 E8BC03                  		call	install_bds
 18750 0000169A 1F                      		pop	ds
 18751 0000169B 07                      		pop	es
 18752                                  		;jmp	short i2f_iret
 18753                                  		; 02/09/2023
 18754 0000169C CF                      		iret
 18755                                  ; ---------------------------------------------------------------------------
 18756                                  
 18757                                  do_get_bds_vector:
 18758                                  		; 17/10/2022
 18759 0000169D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18760                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18761 000016A2 C53E[1901]              		lds	di, [start_bds]
 18762                                  		;lds	di, ds:start_bds
 18763                                  ;ii2f_iret:	; 10/12/2022
 18764                                  		;jmp	short i2f_iret
 18765                                  		; 02/09/2023
 18766 000016A6 CF                      		iret
 18767                                  ; ---------------------------------------------------------------------------
 18768                                  
 18769                                  ; 17/10/2022
 18770                                  ; 16/10/2022
 18771                                  
 18772                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 18773                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 18774                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 18775                                  
 18776                                  win386call:
 18777 000016A7 1E                      		push	ds
 18778 000016A8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18779                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18780                                  					; at 2C7h:30h =	70h:25A0h
 18781 000016AD 3C05                    		cmp	al, 5		; Win386_Init
 18782                                  					; is it	win386 initializing?
 18783 000016AF 7410                    		jz	short Win386Init
 18784 000016B1 3C06                    		cmp	al, 6		; Win386_Exit
 18785                                  					; is it	win386 exiting?
 18786 000016B3 7523                    		jnz	short win_iret	; if not, continue int2f chain
 18787                                  		; 12/12/2022
 18788 000016B5 F6C201                  		test	dl, 1
 18789                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 18790 000016B8 751E                    		jnz	short win_iret	; if not win386, then continue
 18791                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 18792 000016BA 8026[1208]00            		and	byte [IsWin386], 0 
 18793 000016BF EB17                    		jmp	short win_iret
 18794                                  ; ---------------------------------------------------------------------------
 18795                                  
 18796                                  Win386Init:
 18797                                  		; 12/12/2022
 18798 000016C1 F6C201                  		test	dl, 1
 18799                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 18800 000016C4 7512                    		jnz	short win_iret	; if not win386, then continue
 18801                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 18802 000016C6 800E[1208]01            		or	byte [IsWin386], 1
 18803                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 18804                                  		;mov	word ptr ds:SI_Next+2, es
 18805 000016CB 891E[E007]              		mov	[SI_Next], bx
 18806 000016CF 8C06[E207]              		mov	[SI_Next+2], es
 18807                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 18808 000016D3 BB[DE07]                		mov	bx, Win386_SI	; 19/10/2022
 18809 000016D6 1E                      		push	ds
 18810 000016D7 07                      		pop	es
 18811                                  win_iret:
 18812 000016D8 1F                      		pop	ds
 18813                                  ii2f_iret:	; 10/12/2022
 18814                                  		;jmp	short i2f_iret	; return back up the chain
 18815                                  		; 02/09/2023
 18816 000016D9 CF                      		iret
 18817                                  ; ---------------------------------------------------------------------------
 18818                                  
 18819                                  handle_multmult:
 18820 000016DA 3C01                    		cmp	al, 1
 18821 000016DC 7514                    		jnz	short try_2
 18822 000016DE 1E                      		push	ds
 18823 000016DF E84500                  		call	HMAPtr		; get offset of free HMA
 18824                                  		; 10/12/2022
 18825                                  		;xor	bx, bx
 18826                                  		;dec	bx
 18827 000016E2 BBFFFF                  		mov	bx, 0FFFFh
 18828 000016E5 8EC3                    		mov	es, bx		; seg of HMA
 18829 000016E7 89FB                    		mov	bx, di
 18830 000016E9 F7D3                    		not	bx
 18831 000016EB 09DB                    		or	bx, bx
 18832 000016ED 7401                    		jz	short try_1
 18833 000016EF 43                      		inc	bx
 18834                                  try_1:
 18835 000016F0 1F                      		pop	ds
 18836                                  		;jmp	short ii2f_iret
 18837                                  		; 02/09/2023
 18838 000016F1 CF                      		iret
 18839                                  ; ---------------------------------------------------------------------------
 18840                                  
 18841                                  try_2:
 18842 000016F2 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 18843 000016F4 7530                    		jnz	short try_3
 18844 000016F6 1E                      		push	ds
 18845                                  		; 10/12/2022
 18846                                  		;xor	di, di
 18847                                  		;dec	di
 18848 000016F7 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 18849 000016FA 8EC7                    		mov	es, di
 18850 000016FC E82800                  		call	HMAPtr		; get offset of free HMA
 18851 000016FF 83FFFF                  		cmp	di, 0FFFFh
 18852 00001702 7421                    		jz	short InsuffHMA
 18853 00001704 F7DF                    		neg	di		; free space in HMA
 18854 00001706 39FB                    		cmp	bx, di
 18855 00001708 7605                    		jbe	short try_4
 18856                                  		; 10/12/2022
 18857                                  		;sub	di, di
 18858                                  		;dec	di
 18859 0000170A BFFFFF                  		mov	di, 0FFFFh
 18860                                  		;jmp	short InsuffHMA
 18861                                  		; 02/09/2023
 18862 0000170D 1F                      		pop	ds
 18863 0000170E CF                      		iret
 18864                                  ; ---------------------------------------------------------------------------
 18865                                  
 18866                                  try_4:
 18867                                  		;mov	di, ds:FreeHMAPtr
 18868 0000170F 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18869 00001713 83C30F                  		add	bx, 15
 18870                                  		;and	bx, 0FFF0h
 18871                                  		; 10/12/2022
 18872 00001716 80E3F0                  		and	bl, 0F0h
 18873                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer
 18874 00001719 011E[D707]              		add	[FreeHMAPtr], bx
 18875 0000171D 7506                    		jnz	short InsuffHMA
 18876 0000171F C706[D707]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 18877                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 18878                                  					; no more HMA if we have wrapped
 18879                                  InsuffHMA:
 18880 00001725 1F                      		pop	ds
 18881                                  		; 10/12/2022
 18882                                  try_3:
 18883                                  		;jmp	short ii2f_iret
 18884                                  		; 02/09/2023
 18885 00001726 CF                      		iret
 18886                                  ; ---------------------------------------------------------------------------
 18887                                  
 18888                                  		; 10/12/2022
 18889                                  ;try_3:
 18890                                  		;jmp	ii2f_iret
 18891                                  
 18892                                  ; =============== S U B	R O U T	I N E =======================================
 18893                                  
 18894                                  ; 16/10/2022
 18895                                  
 18896                                  ;--------------------------------------------------------------------------
 18897                                  ;
 18898                                  ; procedure : HMAPtr
 18899                                  ;
 18900                                  ;		Gets the offset of the free HMA area ( with respect to
 18901                                  ;							seg ffff )
 18902                                  ;		If DOS has not moved high, tries to move DOS high.
 18903                                  ;		In the course of doing this, it will allocate all the HMA
 18904                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 18905                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 18906                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 18907                                  ;
 18908                                  ;	RETURNS : offset of free HMA in DI
 18909                                  ;		  BIOS_DATA, seg in DS
 18910                                  ;
 18911                                  ;--------------------------------------------------------------------------
 18912                                  
 18913                                  		; 17/10/2022
 18914                                  HMAPtr:
 18915 00001727 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18916                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18917 0000172C 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18918                                  		;mov	di, ds:FreeHMAPtr
 18919 00001730 83FFFF                  		cmp	di, 0FFFFh
 18920 00001733 750F                    		jnz	short HMAPtr_retn
 18921 00001735 803E[DD07]00            		cmp	byte [SysinitPresent], 0
 18922                                  		;cmp	ds:SysinitPresent, 0
 18923 0000173A 7408                    		jz	short HMAPtr_retn
 18924 0000173C FF1E[D907]              		call	far [MoveDOSIntoHMA]
 18925                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 18926 00001740 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18927                                  		;mov	di, ds:FreeHMAPtr
 18928                                  HMAPtr_retn:
 18929 00001744 C3                      		retn
 18930                                  
 18931                                  ; =============== S U B	R O U T	I N E =======================================
 18932                                  
 18933                                  ; 16/10/2022
 18934                                  
 18935                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 18936                                  ; but go ahead and update direction flag, si, & di
 18937                                  
 18938                                  move_sector:
 18939                                  
 18940                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 18941                                  ; any segment to be a fault. Theoretically, this could be handled
 18942                                  ; by the fault handler and the behavior of an 8086 could be emulated
 18943                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 18944                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 18945                                  ; also handles the fault incorrectly in their ROM BIOS for real
 18946                                  ; mode. Their fault handler was only designed to deal with one
 18947                                  ; special case which occurred in a magazine benchmark, but didn't
 18948                                  ; handle the general case worth beans.
 18949                                  ;
 18950                                  ; Simply changing this code to do a byte loop would work okay but
 18951                                  ; would involve a general case performance hit. Therefore, we'll
 18952                                  ; check for either source or destination offsets being within one
 18953                                  ; sector of the end of their segments and only in that case fall
 18954                                  ; back to a byte move.
 18955                                  
 18956 00001745 FC                      		cld
 18957 00001746 51                      		push	cx
 18958 00001747 B90001                  		mov	cx, 256
 18959 0000174A 81FE00FE                		cmp	si, 0FE00h
 18960 0000174E 770A                    		ja	short movsec_bytes
 18961 00001750 81FF00FE                		cmp	di, 0FE00h
 18962 00001754 7704                    		ja	short movsec_bytes
 18963 00001756 F3A5                    		rep movsw
 18964 00001758 59                      		pop	cx
 18965 00001759 C3                      		retn
 18966                                  ; ---------------------------------------------------------------------------
 18967                                  
 18968                                  movsec_bytes:
 18969 0000175A D1E1                    		shl	cx, 1
 18970 0000175C F3A4                    		rep movsb
 18971 0000175E 59                      		pop	cx
 18972 0000175F C3                      		retn
 18973                                  
 18974                                  ; =============== S U B	R O U T	I N E =======================================
 18975                                  
 18976                                  ; 16/10/2022
 18977                                  
 18978                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 18979                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 18980                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 18981                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 18982                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 18983                                  ; but we break down a request when we get an ecc or dma error into several
 18984                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 18985                                  ; number of sectors on a track on the medium, and the request would fail.
 18986                                  ;
 18987                                  ; input conditions:
 18988                                  ;	all registers set up for an int 13 request.
 18989                                  ;
 18990                                  ; output:
 18991                                  ;	dh - contains starting head number for request
 18992                                  ;	cx - contains starting sector and cylinder numbers
 18993                                  ;	(the above may or may not have been changed, and are 0-based)
 18994                                  ;	all other registers preserved.
 18995                                  
 18996                                  		; 26/12/2023 - Retro DOS 5.0
 18997                                  check_wrap:	
 18998 00001760 50                      		push	ax
 18999 00001761 53                      		push	bx
 19000 00001762 06                      		push	es
 19001 00001763 57                      		push	di
 19002 00001764 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 19003 00001767 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 19004                                  		; 26/12/2023
 19005 00001769 26F6453F01              		test	byte [es:di+3Fh], 1
 19006                                  		; 12/12/2022
 19007                                  		;test	byte [es:di+23h], 1
 19008                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 19009 0000176E 7457                    		jz	short no_wrap	; no wrapping for removable media
 19010 00001770 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 19011 00001774 89C8                    		mov	ax, cx
 19012 00001776 83E03F                  		and	ax, 3Fh		; extract sector number
 19013 00001779 39D8                    		cmp	ax, bx		; are we going to wrap?
 19014 0000177B 764A                    		jbe	short no_wrap
 19015 0000177D F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 19016                                  
 19017                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 19018                                  ; last sector on that track.
 19019                                  
 19020 0000177F 08E4                    		or	ah, ah
 19021 00001781 7503                    		jnz	short not_on_bound
 19022                                  		; 18/12/2022
 19023 00001783 48                      		dec	ax ; *
 19024 00001784 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 19025                                  					; if on	boundary
 19026                                  		;dec	al ; *		; also decrement # of head wraps
 19027                                  not_on_bound:
 19028 00001786 80E1C0                  		and	cl, 0C0h	; zero out sector #
 19029 00001789 08E1                    		or	cl, ah		; or in	new sector #
 19030 0000178B 30E4                    		xor	ah, ah		; ax = # of head wraps
 19031 0000178D 40                      		inc	ax
 19032 0000178E 00F0                    		add	al, dh		; add in starting head #
 19033 00001790 80D400                  		adc	ah, 0		; catch	any carry
 19034                                  		; 02/09/2023
 19035 00001793 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 19036 00001797 39D8                    		cmp	ax, bx
 19037                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 19038                                  					; are we going to wrap around a	head?
 19039 00001799 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 19040 0000179B 52                      		push	dx		; preserve drive number and head number
 19041 0000179C 31D2                    		xor	dx, dx
 19042                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 19043 0000179E F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 19044                                  
 19045                                  ; careful here! if new head # is 0, then we are on the last head.
 19046                                  
 19047 000017A0 09D2                    		or	dx, dx
 19048 000017A2 7507                    		jnz	short no_head_bound
 19049 000017A4 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 19050                                  
 19051                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 19052                                  
 19053 000017A6 09C0                    		or	ax, ax
 19054 000017A8 7401                    		jz	short no_head_bound
 19055 000017AA 48                      		dec	ax		; reduce number	of cylinder wraps
 19056                                  no_head_bound:				
 19057 000017AB 88D7                    		mov	bh, dl		; bh has new head number
 19058 000017AD 5A                      		pop	dx		; restore drive number and head number
 19059 000017AE FECF                    		dec	bh		; get it 0-based
 19060 000017B0 88FE                    		mov	dh, bh		; set up new head number in dh
 19061 000017B2 88CF                    		mov	bh, cl
 19062 000017B4 80E73F                  		and	bh, 3Fh		; preserve sector number
 19063 000017B7 B306                    		mov	bl, 6
 19064 000017B9 86CB                    		xchg	cl, bl
 19065 000017BB D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 19066 000017BD 00C5                    		add	ch, al		; add in cylinder wrap
 19067 000017BF 10E3                    		adc	bl, ah		; add in high byte
 19068 000017C1 D2E3                    		shl	bl, cl		; move up to ms	end
 19069 000017C3 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 19070 000017C5 08F9                    		or	cl, bh		; or in	sector number
 19071                                  no_wrap:				
 19072 000017C7 F8                      		clc
 19073 000017C8 5F                      		pop	di
 19074 000017C9 07                      		pop	es
 19075 000017CA 5B                      		pop	bx
 19076 000017CB 58                      		pop	ax
 19077 000017CC C3                      		retn
 19078                                  ; ---------------------------------------------------------------------------
 19079                                  
 19080                                  no_wrap_head:				
 19081 000017CD 88C6                    		mov	dh, al		; do not lose new head number
 19082 000017CF FECE                    		dec	dh		; get it 0-based
 19083 000017D1 EBF4                    		jmp	short no_wrap
 19084                                  
 19085                                  ; =============== S U B	R O U T	I N E =======================================
 19086                                  
 19087                                  ; 16/10/2022
 19088                                  
 19089                                  ; this is a special version of the bds lookup code which is
 19090                                  ; based on physical drives rather than the usual logical drives
 19091                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 19092                                  ; otherwise carry is clear
 19093                                  ;
 19094                                  ; guaranteed to trash no registers except es:di
 19095                                  
 19096                                  		; 19/10/2022
 19097                                  find_bds:	
 19098 000017D3 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 19099                                  fbds_1:					
 19100 000017D7 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 19101 000017DB 7409                    		jz	short fdbs_2
 19102 000017DD 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 19103                                  					; go to next bds
 19104 000017E0 83FFFF                  		cmp	di, 0FFFFh
 19105 000017E3 75F2                    		jnz	short fbds_1
 19106 000017E5 F9                      		stc
 19107                                  fdbs_2:					
 19108 000017E6 C3                      		retn
 19109                                  
 19110                                  ; =============== S U B	R O U T	I N E =======================================
 19111                                  
 19112                                  ; 16/10/2022
 19113                                  		; 17/10/2022
 19114                                  doint:
 19115                                  		; 10/12/2022
 19116 000017E7 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 19117                                  					; get physical drive number
 19118                                  		; 19/10/2022 - Temporary !
 19119                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 19120                                  		
 19121 000017EA 30E4                    		xor	ah, ah
 19122 000017EC 08C0                    		or	al, al
 19123 000017EE 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 19124                                  		; 10/12/2022
 19125 000017F0 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 19126                                  					; get request code
 19127                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 19128 000017F3 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 19129                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 19130 000017F6 9D                      		popf
 19131                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 19132                                  		; 17/10/2022
 19133 000017F7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19134                                  		;;call	call_orig13	; call far 70h:797h
 19135                                  					; call far KERNEL_SEGMENT:call_orig13
 19136 000017FC 9C                      		pushf
 19137                                  		; 10/12/2022
 19138 000017FD 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 19139                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 19140                                  dointdone:				
 19141 00001800 C3                      		retn
 19142                                  
 19143                                  ;----------------------------------------------------------------------------
 19144                                  
 19145                                  ; 16/10/2022
 19146                                  
 19147                                  ; this is the true int 13 handler. we parse the request to see if there is
 19148                                  ; a dma violation. if so, depending on the function, we:
 19149                                  ;   read/write break the request into three pieces and move the middle one
 19150                                  ;	       into our internal buffer.
 19151                                  ;
 19152                                  ;   format     copy the format table into the buffer
 19153                                  ;   verify     point the transfer address into the buffer
 19154                                  ;
 19155                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 19156                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 19157                                  ; the offending sector into the buffer below and do the i/o from there.
 19158                                  
 19159                                  ;struc INT13FRAME
 19160                                  ;.oldbp: resw
 19161                                  ;.oldax: resw 
 19162                                  ;.oldbx: resw
 19163                                  ;.oldcx: resw
 19164                                  ;.olddx: resw
 19165                                  ;.oldds: resw	; now we save caller's ds, too
 19166                                  ;.olddd: resd
 19167                                  ;.oldf:	resw
 19168                                  ;end struc
 19169                                  
 19170                                  ;----------------------------------------------------------------------------
 19171                                  
 19172                                  ;   entry conditions:
 19173                                  ;	ah = function
 19174                                  ;	al = number of sectors
 19175                                  ;	es:bx = dma address
 19176                                  ;	cx = packed track and sector
 19177                                  ;	dx = head and drive
 19178                                  ;   output conditions:
 19179                                  ;	no dma violation.
 19180                                  
 19181                                  ;	use extreme caution when working with this code. In general,
 19182                                  ;	  all registers are hot at all times.
 19183                                  ;
 19184                                  ;	question:  does this code handle cases where dma errors
 19185                                  ;	  occur during ecc retries, and where ecc errors occur during
 19186                                  ;	  dma breakdowns???? Hmmmmm.
 19187                                  
 19188                                  ;----------------------------------------------------------------------------
 19189                                  
 19190                                  ; ---------------------------------------------------------------------------
 19191                                  
 19192                                  		; 26/12/2023 - Retro DOS v5.0
 19193                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1889h
 19194                                  dtype_array:
 19195 00001801 90004000                		dd 400090h		; 40h:90h is drive type array addr
 19196                                  
 19197                                  ; 17/10/2022
 19198                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 19199                                  ; 09/12/2022
 19200                                  DTYPEARRAY equ dtype_array
 19201                                  
 19202                                  ; ---------------------------------------------------------------------------
 19203                                  
 19204                                  ; stick some special stuff out of mainline
 19205                                  
 19206                                  ; we know we're doing a format command. if we have changeline
 19207                                  ; support, then flag some special changed stuff and set changed
 19208                                  ; by format bit for all logical drives using this physical drive
 19209                                  
 19210                                  format_special_stuff:
 19211 00001805 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 19212 0000180A 7459                    		jz	short format_special_stuff_done ; brif not
 19213 0000180C 53                      		push	bx
 19214 0000180D BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 19215 00001810 E85104                  		call	set_changed_dl	; indicate that media changed by format
 19216 00001813 5B                      		pop	bx
 19217 00001814 EB4F                    		jmp	short format_special_stuff_done
 19218                                  ; ---------------------------------------------------------------------------
 19219                                  
 19220                                  ; 16/10/2022
 19221                                  
 19222                                  ; we know we've got ec35's on the system. Now see if we're doing
 19223                                  ; a floppy. If so, create a mask and see if this particular
 19224                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 19225                                  
 19226                                  		; 19/10/2022
 19227                                  ec35_special_stuff:
 19228 00001816 84D2                    		test	dl, dl		; floppy or hard disk?
 19229 00001818 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 19230 0000181A 50                      		push	ax		; see if this PARTICULAR drive is ec35
 19231 0000181B 51                      		push	cx
 19232 0000181C 88D1                    		mov	cl, dl		; turn drive number into bit map
 19233 0000181E B001                    		mov	al, 1		; assume drive 0
 19234 00001820 D2E0                    		shl	al, cl		; shift	over correct number of times
 19235 00001822 8406[A204]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 19236 00001826 59                      		pop	cx
 19237 00001827 58                      		pop	ax
 19238 00001828 7442                    		jz	short ec35_special_stuff_done
 19239                                  					; done if this floppy is not an	ec35
 19240 0000182A 53                      		push	bx		; free up a far	pointer	(es:bx)
 19241 0000182B 06                      		push	es
 19242                                  		; 17/10/2022
 19243 0000182C 2EC41E[0118]            		les	bx, [cs:DTYPEARRAY]
 19244                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 19245                                  					; 0070h:3A65h =	2C7h:14F5h
 19246 00001831 00D3                    		add	bl, dl
 19247 00001833 80D700                  		adc	bh, 0		; find entry for this drive
 19248 00001836 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 19249                                  					; (360k	disk in	360k drive,
 19250                                  					; no double-stepping, 250 kbs transfer rate)
 19251 0000183A 07                      		pop	es
 19252 0000183B 5B                      		pop	bx
 19253 0000183C EB2E                    		jmp	short ec35_special_stuff_done
 19254                                  ; ---------------------------------------------------------------------------
 19255                                  
 19256                                  ; 16/10/2022
 19257                                  
 19258                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 19259                                  ; this function does not reset the common buses after the execution.
 19260                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 19261                                  ; will issue ah=1 (read status) call to reset the buses.
 19262                                  
 19263                                  ps2_special_stuff:
 19264 0000183E 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 19265                                  					; read driver parm ?
 19266 00001843 7407                    		jz	short ps2_30_problem
 19267 00001845 803E[1E00]15            		cmp	byte [prevoper], 15h
 19268                                  					; apparently function 15h fails, too
 19269 0000184A 752D                    		jnz	short ps2_special_stuff_done
 19270                                  ps2_30_problem:
 19271 0000184C 50                      		push	ax
 19272 0000184D B401                    		mov	ah, 1
 19273                                  		; 26/12/2023
 19274                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18D7h
 19275                                  		;		 ; call BIOSDATA:call_orig13	
 19276                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 19277                                  		; 17/10/2022
 19278 0000184F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19279                                  		;call	call_orig13	; call far 70:797h
 19280                                  					; call far KERNEL_SEGMENT:call_orig13
 19281 00001854 58                      		pop	ax
 19282 00001855 EB22                    		jmp	short ps2_special_stuff_done
 19283                                  ; ---------------------------------------------------------------------------
 19284                                  
 19285                                  ; 17/10/2022
 19286                                  ; 16/10/2022
 19287                                  
 19288                                  ; here is the actual int13 handler
 19289                                  
 19290                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 19291                                  
 19292                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 19293                                  ; vectoring up here from Bios_Data
 19294                                  
 19295                                  		; 19/10/2022
 19296 00001857 1E                      		push	ds		; save caller's ds register first thing
 19297                                  		;;mov	ds, word [cs:0030h]
 19298                                  					; and set up our own ds -> Bios_Data
 19299 00001858 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 19300                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 19301                                  					; = [02C7h:0030h] = [0070h:25A0h]
 19302                                  
 19303                                  ; let the operation proceed. if there is a dma violation, then we do things
 19304                                  
 19305 0000185D A3[1E00]                		mov	[prevoper], ax	; save request
 19306 00001860 80FC05                  		cmp	ah, 5		; romformat
 19307 00001863 74A0                    		jz	short format_special_stuff
 19308                                  					; go do special stuff for format
 19309                                  format_special_stuff_done:
 19310 00001865 803E[A204]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 19311 0000186A 75AA                    		jnz	short ec35_special_stuff
 19312                                  					; go handle it out of line if so
 19313                                  ec35_special_stuff_done:
 19314                                  		; 26/12/2023
 19315                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18EDh
 19316                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 19317 0000186C 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19318                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19319                                  		
 19320 00001871 9C                      		pushf			; save result flags
 19321                                  		
 19322 00001872 803E[AF05]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 19323                                  					; mdl_ps2_30
 19324 00001877 74C5                    		jz	short ps2_special_stuff
 19325                                  					; exit mainline to address special
 19326                                  ps2_special_stuff_done:			; ps2/30 problem if so
 19327 00001879 9D                      		popf
 19328 0000187A 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 19329                                  ret_from_i13:
 19330 0000187C 1F                      		pop	ds
 19331 0000187D CA0200                  		retf	2		; restore ds &	iret w/flags
 19332                                  ; ---------------------------------------------------------------------------
 19333                                  
 19334                                  ; most of our code exits through here. If carry isn't set, then
 19335                                  ; just do a simple exit. Else doublecheck that we aren't getting
 19336                                  ; a changeline error.
 19337                                  
 19338                                  i13ret_ck_chglinerr:			
 19339 00001880 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 19340                                  i13_ret_error:				
 19341 00001882 80FC06                  		cmp	ah, 6		; did i	see a change event?
 19342 00001885 7513                    		jnz	short int13b	; skip if wrong	error
 19343 00001887 08D2                    		or	dl, dl		; is this for the hard disk?
 19344 00001889 780F                    		js	short int13b	; yes, ignore
 19345 0000188B 803E[7700]00            		cmp	byte [fhave96], 0
 19346 00001890 7408                    		jz	short int13b	; just in case ROM returned this
 19347                                  					; error	even though it told us it
 19348                                  					; never	would
 19349 00001892 53                      		push	bx
 19350 00001893 BB4000                  		mov	bx, 40h		; fchanged
 19351 00001896 E8CB03                  		call	set_changed_dl
 19352 00001899 5B                      		pop	bx
 19353                                  int13b:
 19354 0000189A F9                      		stc			; now return the error
 19355 0000189B EBDF                    		jmp	short ret_from_i13
 19356                                  ; ---------------------------------------------------------------------------
 19357                                  
 19358                                  ; some kind of error occurred. see if it is dma violation
 19359                                  
 19360                                  goterr13:
 19361 0000189D 80FC09                  		cmp	ah, 9		; dma error?
 19362 000018A0 747C                    		jz	short gotdmaerr
 19363                                  goterr13_xxxx:
 19364 000018A2 80FC11                  		cmp	ah, 11h		; ecc error?
 19365 000018A5 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 19366 000018A7 803E[A905]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 19367 000018AC 74D4                    		jz	short i13_ret_error
 19368                                  
 19369 000018AE 803E[1F00]02            		cmp	byte [prevoper+1], 2
 19370                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 19371                                  					; (2 = romread)
 19372                                  					; ECC correction only applies to reads
 19373 000018B3 75CD                    		jnz	short i13_ret_error
 19374                                  
 19375 000018B5 30E4                    		xor	ah, ah
 19376                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 19377                                  		; 17/10/2022
 19378 000018B7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19379                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19380                                  					; call far 70:797h
 19381 000018BC A1[1E00]                		mov	ax, [prevoper]
 19382 000018BF 30E4                    		xor	ah, ah		; return code =	no error
 19383 000018C1 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 19384 000018C3 74B7                    		jz	short ret_from_i13 ; return with carry clear
 19385 000018C5 53                      		push	bx
 19386 000018C6 51                      		push	cx
 19387 000018C7 52                      		push	dx
 19388 000018C8 A2[2000]                		mov	[number_of_sec], al
 19389                                  loop_ecc:
 19390 000018CB B80102                  		mov	ax, 201h	; read one sector
 19391                                  
 19392                                  ; we do reads one sector at a time. this ensures that we will eventually
 19393                                  ; finish the request since ecc errors on one sector do read in that sector.
 19394                                  ;
 19395                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 19396                                  ; that attempt to read more sectors than are available on a particular
 19397                                  ; track.
 19398                                  ;
 19399                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 19400                                  ; this request.
 19401                                  ;
 19402                                  ; at this point, all registers are set up for the call to orig13, except
 19403                                  ; that there may be a starting sector number that is bigger than the number
 19404                                  ; of sectors on a track.
 19405                                  ;
 19406 000018CE E88FFE                  		call	check_wrap	; get correct parameters for int 13
 19407                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 19408                                  		; 17/10/2022
 19409 000018D1 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19410                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19411 000018D6 730C                    		jnb	short ok11_op
 19412 000018D8 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 19413 000018DB 741B                    		jz	short handle_dma_during_ecc
 19414 000018DD 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 19415 000018E0 7510                    		jnz	short ok11_exit_err
 19416                                  		; 10/12/2022
 19417                                  		; xor ax ax -> ah = 0
 19418                                  		;mov	ah, 0		; ecc error. reset the system again.
 19419 000018E2 31C0                    		xor	ax, ax		; clear	the error code so that if this
 19420                                  					; was the last sector, no error	code
 19421                                  					; will be returned for the corrected
 19422                                  					; read.	(clear carry too.)
 19423                                  ok11_op:
 19424 000018E4 FE0E[2000]              		dec	byte [number_of_sec]
 19425 000018E8 7409                    		jz	short ok11_exit	; all done?
 19426 000018EA FEC1                    		inc	cl		; advance sector number
 19427                                  					; add 200h to address
 19428 000018EC FEC7                    		inc	bh
 19429 000018EE FEC7                    		inc	bh
 19430 000018F0 EBD9                    		jmp	short loop_ecc
 19431                                  ; ---------------------------------------------------------------------------
 19432                                  
 19433                                  ; locate error returns centrally
 19434                                  
 19435                                  ok11_exit_err:
 19436 000018F2 F9                      		stc			; set carry bit again.
 19437                                  ok11_exit:
 19438 000018F3 5A                      		pop	dx
 19439 000018F4 59                      		pop	cx
 19440 000018F5 5B                      		pop	bx
 19441 000018F6 EB88                    		jmp	short i13ret_ck_chglinerr
 19442                                  ; ---------------------------------------------------------------------------
 19443                                  
 19444                                  ; do the single sector read again, this time into our temporary
 19445                                  ; buffer, which is guaranteed not to have a DMA error, then
 19446                                  ; move the data to its proper location and proceed
 19447                                  
 19448                                  handle_dma_during_ecc:
 19449 000018F8 06                      		push	es
 19450 000018F9 53                      		push	bx
 19451 000018FA BB[5201]                		mov	bx, disksector
 19452 000018FD 1E                      		push	ds
 19453 000018FE 07                      		pop	es		; point es:bx to buffer
 19454 000018FF B80102                  		mov	ax, 201h	; read one sector
 19455                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 19456                                  		; 17/10/2022
 19457 00001902 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19458                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19459 00001907 5B                      		pop	bx
 19460 00001908 07                      		pop	es
 19461 00001909 7305                    		jnb	short handle_dma_during_ecc_noerr
 19462 0000190B 80FC11                  		cmp	ah, 11h
 19463 0000190E 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 19464                                  
 19465                                  ; now we're kosher. Copy the data to where it belongs and resume
 19466                                  ; the ECC looping code.
 19467                                  
 19468                                  handle_dma_during_ecc_noerr:
 19469 00001910 56                      		push	si
 19470 00001911 57                      		push	di
 19471 00001912 89DF                    		mov	di, bx
 19472 00001914 BE[5201]                		mov	si, disksector
 19473 00001917 E82BFE                  		call	move_sector
 19474 0000191A 5F                      		pop	di
 19475 0000191B 5E                      		pop	si
 19476 0000191C EBC6                    		jmp	short ok11_op
 19477                                  ; ---------------------------------------------------------------------------
 19478                                  
 19479                                  ; we truly have a dma violation. restore register ax and retry the
 19480                                  ; operation as best we can.
 19481                                  
 19482                                  gotdmaerr:
 19483 0000191E A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 19484 00001921 FB                      		sti
 19485 00001922 80FC02                  		cmp	ah, 2		; romread
 19486 00001925 723B                    		jb	short i13_done_dmaerr
 19487                                  					; just pass dma error thru for
 19488                                  					; functions we don't handle
 19489 00001927 80FC04                  		cmp	ah, 4		; romverify
 19490 0000192A 743C                    		jz	short intverify
 19491 0000192C 80FC05                  		cmp	ah, 5		; romformat
 19492 0000192F 7448                    		jz	short intformat
 19493 00001931 772F                    		ja	short i13_done_dmaerr
 19494                                  
 19495                                  ; we are doing a read/write call. check for dma problems
 19496                                  
 19497                                  ;	******** set up stack frame here!!! ********
 19498                                  
 19499 00001933 52                      		push	dx
 19500 00001934 51                      		push	cx
 19501 00001935 53                      		push	bx
 19502 00001936 50                      		push	ax
 19503 00001937 55                      		push	bp
 19504 00001938 89E5                    		mov	bp, sp
 19505 0000193A 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 19506                                  		; 26/12/2023
 19507                                  		;add	dx, dx
 19508                                  		;add	dx, dx
 19509                                  		;add	dx, dx
 19510                                  		;add	dx, dx		; dx = dx*16
 19511 0000193C D1E2                    		shl	dx, 1
 19512 0000193E D1E2                    		shl	dx, 1
 19513 00001940 D1E2                    		shl	dx, 1
 19514 00001942 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 19515 00001944 01DA                    		add	dx, bx		; combine with offset
 19516 00001946 81C2FF01                		add	dx, 511		; simulate a transfer
 19517                                  
 19518                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 19519                                  ; we skip the first transfer and perform the remaining buffering and transfer
 19520                                  
 19521 0000194A 7303                    		jnb	short no_skip_first
 19522 0000194C E98300                  		jmp	bufferx		; restore dh=head & do buffer
 19523                                  ; ---------------------------------------------------------------------------
 19524                                  
 19525                                  no_skip_first:
 19526 0000194F D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 19527 00001951 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 19528 00001953 28F4                    		sub	ah, dh
 19529                                  
 19530                                  ; ah is now the number of sectors that we can successfully write in this
 19531                                  ; segment. if this number is above or equal to the requested number, then we
 19532                                  ; continue the operation as normal. otherwise, we break it into pieces.
 19533                                  ;
 19534                                  ; wait a sec. this is goofy. the whole reason we got here in the
 19535                                  ; first place is because we got a dma error. so it's impossible
 19536                                  ; for the whole block to fit, unless the dma error was returned
 19537                                  ; in error.
 19538                                  
 19539 00001955 38C4                    		cmp	ah, al		; can we fit it	in?
 19540 00001957 7236                    		jb	short doblock	; no, perform blocking.
 19541                                  
 19542                                  ; yes, the request fits. let it happen.
 19543                                  
 19544 00001959 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 19545                                  					; set up head number
 19546 0000195C E888FE                  		call	doint
 19547 0000195F E9D900                  		jmp	bad13		; and return from this place
 19548                                  ; ---------------------------------------------------------------------------
 19549                                  
 19550                                  i13_done_dmaerr:
 19551 00001962 B409                    		mov	ah, 9		; pass dma error thru to caller
 19552 00001964 F9                      		stc
 19553 00001965 E914FF                  		jmp	ret_from_i13	; return with error,
 19554                                  					; we know it's not a changeline error
 19555                                  ; ---------------------------------------------------------------------------
 19556                                  
 19557                                  ; verify the given sectors. place the buffer pointer into our space.
 19558                                  
 19559                                  intverify:
 19560 00001968 06                      		push	es		; save caller's dma address
 19561 00001969 53                      		push	bx
 19562 0000196A 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 19563 0000196B 07                      		pop	es
 19564                                  dosimple:
 19565 0000196C BB[5201]                		mov	bx, disksector
 19566                                  					; do the i/o from Bios_Data:disksector
 19567                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 19568                                  		; 17/10/2022
 19569 0000196F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19570                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19571 00001974 5B                      		pop	bx
 19572 00001975 07                      		pop	es
 19573 00001976 E907FF                  		jmp	i13ret_ck_chglinerr
 19574                                  ; ---------------------------------------------------------------------------
 19575                                  
 19576                                  ; format operation. copy the parameter table into Bios_Data:disksector
 19577                                  
 19578                                  intformat:
 19579 00001979 06                      		push	es
 19580 0000197A 53                      		push	bx
 19581 0000197B 56                      		push	si
 19582 0000197C 57                      		push	di
 19583 0000197D 1E                      		push	ds
 19584                                  
 19585                                  ; point ds to the caller's dma buffer, es to Bios_Data
 19586                                  ; in other words, swap (ds, es)
 19587                                  
 19588 0000197E 06                      		push	es
 19589 0000197F 1E                      		push	ds
 19590 00001980 07                      		pop	es
 19591 00001981 1F                      		pop	ds
 19592 00001982 89DE                    		mov	si, bx
 19593 00001984 BF[5201]                		mov	di, disksector
 19594 00001987 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 19595 0000198A 1F                      		pop	ds
 19596 0000198B 5F                      		pop	di
 19597 0000198C 5E                      		pop	si		; do the i/o from
 19598 0000198D EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 19599                                  ; ---------------------------------------------------------------------------
 19600                                  
 19601                                  ; we can't fit the request into the entire block. perform the operation on
 19602                                  ; the first block.
 19603                                  ;
 19604                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 19605                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 19606                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 19607                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 19608                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 19609                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 19610                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 19611                                  ; doblock will handle the first block of requested sectors within the
 19612                                  ; boundary of this safe value.
 19613                                  
 19614                                  		; 26/12/2023 - Retro DOS v5.0
 19615                                  doblock:
 19616                                  
 19617                                  ; try to get the # of sectors/track from bds via rom drive number.
 19618                                  ; for any mini disks installed, here we have to pray that they have the
 19619                                  ; same # of sector/track as the main dos partition disk drive.
 19620                                  				
 19621 0000198F 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 19622                                  					; get head #, drive #
 19623 00001992 51                      		push	cx
 19624 00001993 06                      		push	es
 19625 00001994 57                      		push	di		; ah - # of sectors before dma boundary
 19626                                  					; al - requested # of sectors for i/o.
 19627 00001995 E83BFE                  		call	find_bds
 19628 00001998 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 19629                                  		; 26/12/2023
 19630 0000199C 26F6453F01              		test	byte [es:di+3Fh], 1
 19631                                  		; 12/12/2022
 19632                                  		;test	byte [es:di+23h], 1
 19633                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 19634 000019A1 5F                      		pop	di
 19635 000019A2 07                      		pop	es
 19636 000019A3 88E0                    		mov	al, ah		; set al=ah for	floppies
 19637 000019A5 7404                    		jz	short doblockflop ; they are track by track operation
 19638 000019A7 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 19639 000019A9 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 19640                                  doblockflop:
 19641 000019AB 59                      		pop	cx
 19642                                  doblockcontinue:
 19643 000019AC 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 19644 000019AE 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 19645 000019B0 50                      		push	ax
 19646 000019B1 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 19647 000019B3 EB03                    		jmp	short doblockdoint
 19648                                  ; ---------------------------------------------------------------------------
 19649                                  
 19650                                  doblocklast:
 19651 000019B5 88C4                    		mov	ah, al
 19652 000019B7 50                      		push	ax
 19653                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 19654 000019B8 E82CFE                  		call	doint
 19655 000019BB 727E                    		jb	short bad13	; something happened, bye!
 19656 000019BD 58                      		pop	ax
 19657 000019BE 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 19658                                  					; decrement by the successful operation
 19659 000019C1 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 19660 000019C3 00E7                    		add	bh, ah		; advance dma addres
 19661 000019C5 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 19662 000019C7 38C4                    		cmp	ah, al		; check	the previous value
 19663 000019C9 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 19664                                  					; then we are done already.
 19665 000019CB 28E0                    		sub	al, ah		; otherwise,
 19666                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 19667 000019CD E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 19668 000019D0 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 19669                                  ; ---------------------------------------------------------------------------
 19670                                  
 19671                                  bufferx:
 19672 000019D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 19673                                  					; set up head number
 19674                                  buffer:
 19675 000019D5 53                      		push	bx
 19676 000019D6 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 19677 000019D9 80FC03                  		cmp	ah, 3		; romwrite
 19678 000019DC 7525                    		jnz	short doread	;
 19679                                  					
 19680                                  ; copy the offending sector into local buffer
 19681                                  
 19682 000019DE 06                      		push	es
 19683 000019DF 1E                      		push	ds
 19684 000019E0 56                      		push	si
 19685 000019E1 57                      		push	di
 19686 000019E2 1E                      		push	ds		; exchange segment registers
 19687 000019E3 06                      		push	es
 19688 000019E4 1F                      		pop	ds
 19689 000019E5 07                      		pop	es
 19690 000019E6 BF[5201]                		mov	di, disksector	; where to move
 19691 000019E9 57                      		push	di		; save it
 19692 000019EA 89DE                    		mov	si, bx		; source
 19693 000019EC E856FD                  		call	move_sector	; move sector into local buffer
 19694 000019EF 5B                      		pop	bx		; new transfer address
 19695                                  					; (es:bx = Bios_Data:diskbuffer)
 19696 000019F0 5F                      		pop	di		; restore caller's di & si
 19697 000019F1 5E                      		pop	si
 19698 000019F2 1F                      		pop	ds		; restore Bios_Data
 19699                                  
 19700                                  ; see if we are wrapping around a track or head
 19701                                  
 19702 000019F3 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 19703                                  					; get drive number
 19704 000019F5 8A5608                  		mov	dl, [bp+8]
 19705 000019F8 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 19706                                  					;
 19707                                  					; ah is	function
 19708                                  					; al is	1 for single sector transfer
 19709                                  					; es:bx	is local transfer addres
 19710                                  					; cx is	track/sector number
 19711                                  					; dx is	head/drive number
 19712                                  					; si,di	unchanged
 19713 000019FB E8E9FD                  		call	doint
 19714 000019FE 07                      		pop	es		; restore caller's dma segment
 19715 000019FF 723A                    		jb	short bad13	; go clean up
 19716 00001A01 EB22                    		jmp	short dotail
 19717                                  ; ---------------------------------------------------------------------------
 19718                                  
 19719                                  ; reading a sector. do int first, then move things around
 19720                                  
 19721                                  doread:
 19722 00001A03 06                      		push	es
 19723 00001A04 53                      		push	bx
 19724 00001A05 1E                      		push	ds		; es = Bios_Code
 19725 00001A06 07                      		pop	es
 19726 00001A07 BB[5201]                		mov	bx, disksector
 19727 00001A0A B001                    		mov	al, 1
 19728 00001A0C 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 19729                                  					; get drive number
 19730 00001A0F E84EFD                  		call	check_wrap	;
 19731                                  					; ah = function
 19732                                  					; al = 1 for single sector
 19733                                  					; es:bx	points to local	buffer
 19734                                  					; cx, dx are track/sector, head/drive
 19735 00001A12 E8D2FD                  		call	doint
 19736 00001A15 5B                      		pop	bx
 19737 00001A16 07                      		pop	es
 19738 00001A17 7222                    		jb	short bad13
 19739 00001A19 56                      		push	si
 19740 00001A1A 57                      		push	di
 19741 00001A1B 89DF                    		mov	di, bx
 19742 00001A1D BE[5201]                		mov	si, disksector
 19743 00001A20 E822FD                  		call	move_sector
 19744 00001A23 5F                      		pop	di
 19745 00001A24 5E                      		pop	si
 19746                                  
 19747                                  ; note the fact that we've done 1 more sector
 19748                                  
 19749                                  dotail:
 19750 00001A25 5B                      		pop	bx		; retrieve new dma area
 19751 00001A26 80C702                  		add	bh, 2		; advance over sector
 19752 00001A29 41                      		inc	cx
 19753 00001A2A 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 19754 00001A2D F8                      		clc
 19755 00001A2E FEC8                    		dec	al
 19756 00001A30 7409                    		jz	short bad13	; no more i/o
 19757                                  
 19758                                  ; see if we wrap around a track or head boundary with starting sector
 19759                                  ; we already have the correct head number to pass to check_wrap
 19760                                  
 19761 00001A32 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 19762 00001A35 E828FD                  		call	check_wrap
 19763 00001A38 E8ACFD                  		call	doint
 19764                                  
 19765                                  ; we are done. ax has the final code; we throw away what we got before
 19766                                  
 19767                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 19768                                  ;	   or we've finished. If carry is set now, our only
 19769                                  ;	   hope for salvation is that it was a read operation
 19770                                  ;	   and the error code is ECC error. In that case, we'll
 19771                                  ;	   just pop the registers and go do the old ECC thing.
 19772                                  ;	   When the DMA error that got us here in the first
 19773                                  ;	   place occurs, it'll handle it.
 19774                                  
 19775                                  bad13:
 19776 00001A3B 89EC                    		mov	sp, bp
 19777 00001A3D 5D                      		pop	bp
 19778 00001A3E 5B                      		pop	bx
 19779 00001A3F 5B                      		pop	bx
 19780 00001A40 59                      		pop	cx
 19781 00001A41 5A                      		pop	dx
 19782 00001A42 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 19783 00001A44 E935FE                  		jmp	ret_from_i13	; non-error exit
 19784                                  ; ---------------------------------------------------------------------------
 19785                                  
 19786                                  xgoterr13_xxxx:	
 19787 00001A47 E958FE                  		jmp	goterr13_xxxx
 19788                                  
 19789                                  ; ---------------------------------------------------------------------------
 19790                                  		; 10/12/2022
 19791                                  		;db 	0
 19792                                  ; ---------------------------------------------------------------------------
 19793                                  
 19794                                  ;Bios_Code ends
 19795                                  
 19796                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19797                                  
 19798                                  ;-----------------------------------------------------------------------------
 19799                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 19800                                  ;-----------------------------------------------------------------------------
 19801                                  ; 17/03/2019 - Retro DOS v4.0
 19802                                  
 19803                                  		; 19/10/2022
 19804                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 19805 00001A4A 8A26[7500]              		mov	ah, [drvmax]
 19806 00001A4E BF[3C05]                		mov	di, dskdrvs
 19807 00001A51 1E                      		push	ds		; pass result in es:di
 19808 00001A52 07                      		pop	es
 19809 00001A53 E934EC                  		jmp	SetPtrSav
 19810                                  
 19811                                  ; =============== S U B	R O U T	I N E =======================================
 19812                                  
 19813                                  ;---------------------------------------------------------------------------
 19814                                  ; install_bds installs a bds at location es:di into the current linked list of
 19815                                  ; bds maintained by this device driver. it places the bds at the end of the
 19816                                  ; list. Trashes (at least) ax, bx, di, si
 19817                                  ;---------------------------------------------------------------------------
 19818                                  
 19819                                  		; 26/12/2023 - Retro DOS v5.0
 19820                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1AE0h
 19821                                  install_bds:
 19822 00001A56 1E                      		push	ds		; save Bios_Data segment
 19823 00001A57 BE[1901]                		mov	si, start_bds	; beginning of chain
 19824                                  
 19825                                  		; ds:si now points to link to first bds
 19826                                  		; assume bds list is non-empty
 19827                                  loop_next_bds:
 19828 00001A5A C534                    		lds	si, [si]	; [si+BDS.link]
 19829                                  					; fetch	next bds
 19830 00001A5C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 19831 00001A60 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 19832                                  					; drive	with new one?
 19833 00001A63 7518                    		jnz	short next_bds
 19834 00001A65 B310                    		mov	bl, 10h		; fi_am_mult
 19835                                  		; 26/12/2023
 19836 00001A67 26085D3F                		or	[es:di+3Fh], bl
 19837                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 19838                                  					; set both of them to i_am_mult	if so
 19839 00001A6B 085C3F                  		or	[si+3Fh], bl
 19840                                  		;or	[si+23h], bl	; [si+BDS.flags]
 19841 00001A6E 2680653FDF              		and	byte [es:di+3Fh], 0DFh
 19842                                  		;and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 19843                                  					; we don't own it
 19844 00001A73 8A5C3F                  		mov	bl, [si+3Fh]
 19845                                  		;mov	bl, [si+23h]	; [si+BDS.flags]
 19846                                  					; determine if changeline available
 19847 00001A76 80E302                  		and	bl, 2		; fchangeline
 19848 00001A79 26085D3F                		or	[es:di+3Fh], bl
 19849                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 19850                                  next_bds:
 19851                                  		; 02/09/2023 (PCDOS 7.1)
 19852 00001A7D B8FFFF                  		mov	ax, 0FFFFh	; -1
 19853 00001A80 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 19854                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 19855                                  					; are we at end	of list?
 19856 00001A82 75D6                    		jnz	short loop_next_bds
 19857 00001A84 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 19858                                  					; install bds
 19859 00001A87 893C                    		mov	[si], di
 19860 00001A89 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 19861                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 19862                                  					; set next pointer to null
 19863 00001A8C 1F                      		pop	ds
 19864                                  
 19865                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS - BIOSCODE:1785h)
 19866                                  ; 16/10/2022 (MSDOS 6.0 Code)
 19867                                  
 19868                                  ; **** If the new drive has a higher EOT value, we must alter the
 19869                                  ;      'eot' variable appropriately.
 19870                                  
 19871                                  		; 26/12/2023
 19872 00001A8D 268A4550                		mov	al, [es:di+50h]	; [es:di+BDS.rsecpertrack]
 19873                                  		; 01/06/2019
 19874                                  		;mov	al,[es:di+52]
 19875                                  		; 22/07/2023
 19876                                  		;mov	al,[es:di+BDS.rsecpertrack]
 19877 00001A91 3A06[2C01]              		cmp	al,[eot]
 19878 00001A95 7603                    		jbe	short _eot_ok
 19879 00001A97 A2[2C01]                		mov	[eot],al
 19880                                  _eot_ok:
 19881 00001A9A C3                      		retn
 19882                                  
 19883                                  ; ---------------------------------------------------------------------------
 19884                                  
 19885                                  ; 17/10/2022
 19886                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 19887                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h
 19888                                  ; 09/12/2022
 19889                                  DRVLET equ drvlet
 19890                                  SNGMSG equ sngmsg
 19891                                  
 19892                                  ; 16/10/2022
 19893                                  
 19894                                  ;---------------------------------------------------------------------------
 19895                                  ;  ask to swap the disk in drive a:
 19896                                  ;	es:di -> bds
 19897                                  ;	ds -> Bios_Data
 19898                                  ;---------------------------------------------------------------------------
 19899                                  
 19900                                  		; 26/12/2023 - Retro DOS v5.0
 19901                                  
 19902                                  		; 19/10/2022
 19903 00001A9B F606[1208]01            swpdsk:		test	byte [IsWin386], 1
 19904                                  		;test	ds:IsWin386, 1	; Is win386 present?
 19905 00001AA0 7405                    		jz	short no_win386	; no, skip SetFocus
 19906                                  		
 19907                                  		; set focus to the correct VM
 19908                                  		;call	far ptr 70h:813h ; PCDOS 7.1 IBMBIO.COM BIOSCODE:1B2Ch
 19909                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 19910                                  		; 17/10/2022
 19911 00001AA2 9A[1308]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus ; BIOSDATA:V86_Crit_SetFocus
 19912                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 19913                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 19914                                  no_win386:
 19915 00001AA7 51                      		push	cx
 19916 00001AA8 52                      		push	dx
 19917 00001AA9 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 19918                                  					; get the drive	letter
 19919                                  
 19920                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 19921                                  ;           then existing dsk is drive A & vice versa
 19922                                  
 19923 00001AAD 88D6                    		mov	dh, dl
 19924 00001AAF 80F601                  		xor	dh, 1
 19925 00001AB2 29C9                    		sub	cx, cx		; nobody has handled swap disk
 19926 00001AB4 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 19927                                  					; broad	cast code for swap disk
 19928                                  					; Broadcast it
 19929 00001AB7 CD2F                    		int	2Fh
 19930 00001AB9 41                      		inc	cx		; cx == -1 ?
 19931 00001ABA 741E                    		jz	short swpdsk9	; somebody has handled it
 19932                                  
 19933                                  ; using a different drive in a one drive system so request the user change disks
 19934                                  
 19935 00001ABC 80C241                  		add	dl, 'A'
 19936                                  		; 17/10/2022
 19937 00001ABF 2E8816[F91A]            		mov	[cs:DRVLET], dl	; "A: and press any key when ready\r\n\n"
 19938                                  		; 16/10/2022
 19939                                  		;;mov	byte [cs:drvlet], dl
 19940                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 19941                                  					; 0070h:3D54h =	2C7h:17E4h
 19942 00001AC4 BE[DD1A]                		mov	si, SNGMSG	; "\r\nInsert diskette for drive "
 19943                                  		;mov	si, 17C8h	; sngmsg
 19944                                  					; 0070h:3D38h =	2C7h:17C8h
 19945 00001AC7 53                      		push	bx
 19946 00001AC8 2E                      		cs
 19947 00001AC9 AC                      		lodsb			; get the next character of the message
 19948                                  		;lods	byte ptr cs:[si]
 19949                                  wrmsg_loop:
 19950 00001ACA CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 19951                                  					; AL = character to display
 19952 00001ACC 2E                      		cs
 19953 00001ACD AC                      		lodsb
 19954                                  		;lods	byte ptr cs:[si] ; cs lodsb
 19955                                  					; get the next character of the	message
 19956 00001ACE 08C0                    		or	al, al
 19957 00001AD0 75F8                    		jnz	short wrmsg_loop
 19958 00001AD2 E833E7                  		call	con_flush	; flush out keyboard queue
 19959                                  					; call rom-bios
 19960 00001AD5 30E4                    		xor	ah, ah
 19961 00001AD7 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 19962                                  					; Return: AH = scan code, AL = character
 19963 00001AD9 5B                      		pop	bx
 19964                                  swpdsk9:
 19965 00001ADA 5A                      		pop	dx
 19966 00001ADB 59                      		pop	cx
 19967 00001ADC C3                      		retn
 19968                                  
 19969                                  ; ---------------------------------------------------------------------------
 19970                                  
 19971                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19972                                  
 19973                                  ;--------------------------------------------------------
 19974                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 19975                                  ;--------------------------------------------------------
 19976                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 19977                                  ;--------------------------------------------------------
 19978                                  ; 17/03/2019 - Retro DOS v4.0
 19979                                  ; 26/12/2023 - Retro DOS v5.0
 19980                                  
 19981                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 19982                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B67h
 19983 00001ADD 0D0A                    sngmsg:		db 0Dh,0Ah
 19984 00001ADF 496E73657274206469-     		db 'Insert diskette for drive '
 19984 00001AE8 736B6574746520666F-
 19984 00001AF1 7220647269766520   
 19985                                  
 19986                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 19987                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B83h
 19988 00001AF9 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 19988 00001B02 65737320616E79206B-
 19988 00001B0B 6579207768656E2072-
 19988 00001B14 656164790D0A       
 19989 00001B1A 0A00                    		db 0Ah,0
 19990                                  
 19991                                  ; =============== S U B	R O U T	I N E =======================================
 19992                                  
 19993                                  ;---------------------------------------------------------------------------
 19994                                  ; input : es:di points to current bds for drive.
 19995                                  ; return : zero set if no open files
 19996                                  ;	   zero reset if open files
 19997                                  ;---------------------------------------------------------------------------
 19998                                  
 19999                                  		; 26/12/2023 - Retro DOS v5.0
 20000                                  chkopcnt:	
 20001 00001B1C 26837D3C00              		cmp     word [es:di+3Ch], 0
 20002                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 20003 00001B21 C3                      		retn
 20004                                  
 20005                                  ; =============== S U B	R O U T	I N E =======================================
 20006                                  
 20007                                  ;---------------------------------------------------------------------------
 20008                                  ; at media check time, we need to really get down and check what the change is.
 20009                                  ; this is guaranteed to be expensive.
 20010                                  ;
 20011                                  ;	es:di -> bds, ds -> Bios_Data
 20012                                  ;---------------------------------------------------------------------------
 20013                                  
 20014                                  		; 26/12/2023 - Retro DOS v5.0
 20015                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1BA6h
 20016                                  mediacheck:
 20017 00001B22 E852EE                  		call	checksingle	; make sure correct disk is in place
 20018 00001B25 31F6                    		xor	si, si
 20019 00001B27 E86101                  		call	haschange
 20020 00001B2A 742F                    		jz	short mediaret
 20021                                  		; 26/12/2023
 20022                                  		;test	byte [es:di+3Fh], 40h ; [es:di+BDS.flags], fchanged ; 40h
 20023 00001B2C E85001                  		call	checkromchange
 20024 00001B2F 752B                    		jnz	short mediadovolid
 20025 00001B31 50                      		push	ax
 20026 00001B32 52                      		push	dx
 20027 00001B33 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 20028                                  					; set logical drive number
 20029 00001B37 B416                    		mov	ah, 16h
 20030 00001B39 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 20031                                  					; DL = drive to	check
 20032                                  					; Return: AH = disk change status
 20033 00001B3B 5A                      		pop	dx
 20034 00001B3C 58                      		pop	ax
 20035 00001B3D 721D                    		jb	short mediadovolid
 20036 00001B3F BE0100                  		mov	si, 1		; signal no change
 20037                                  
 20038                                  ; there are some drives with changeline that "lose" the changeline indication
 20039                                  ; if a different drive is accessed after the current one. in order to avoid
 20040                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 20041                                  ; is not active and we are accessing a different drive from the last one.
 20042                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 20043                                  ; status.
 20044                                  		; 19/10/2022
 20045 00001B42 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 20046 00001B46 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 20047                                  					; (If the last drive accessed is not current drive
 20048                                  					; media	change status may be incorrect.	So,
 20049                                  					; "I don't now" will be returned even if it is indicated
 20050                                  					; as media is not changed.)
 20051 00001B4A 740F                    		jz	short mediaret	; (same	drive,
 20052                                  					; media	changeline indication is reliable)
 20053                                  
 20054                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 20055                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 20056                                  ; "not changed" here since the 2 second test said no change.)
 20057                                  
 20058 00001B4C 50                      		push	ax
 20059 00001B4D 51                      		push	cx
 20060 00001B4E 52                      		push	dx
 20061 00001B4F E8D8EA                  		call	Check_Time_Of_Access
 20062 00001B52 5A                      		pop	dx
 20063 00001B53 59                      		pop	cx
 20064 00001B54 58                      		pop	ax
 20065 00001B55 09F6                    		or	si, si
 20066 00001B57 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 20067                                  					; (volume id will be checked)
 20068 00001B59 31F6                    		xor	si, si		; return "i don't know"
 20069                                  mediaret:
 20070 00001B5B C3                      		retn
 20071                                  ; ---------------------------------------------------------------------------
 20072                                  
 20073                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 20074                                  ; because this may be different since we only set medbyt when doing a read
 20075                                  ; or write.
 20076                                  
 20077                                  mediadovolid:
 20078 00001B5C E877EB                  		call	GetBp		; build	a new bpb in current bds
 20079 00001B5F 72FA                    		jb	short mediaret
 20080 00001B61 E82D00                  		call	check_vid
 20081 00001B64 73F5                    		jnb	short mediaret
 20082 00001B66 E940F2                  		jmp	maperror	; fix up al for	return to dos
 20083                                  ; ---------------------------------------------------------------------------
 20084                                  
 20085                                  ; simple, quick check of latched change. if no indication, then return
 20086                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 20087                                  ; return and set al = 15 (for invalid media change) which will be returned to
 20088                                  ; dos.
 20089                                  ;
 20090                                  ; for dos 3.3, this will work only for the drive that has changeline.
 20091                                  
 20092                                  ;	call with es:di -> bds, ds -> Bios_Data
 20093                                  ;	***** warning:  this routine will return one level up on the stack
 20094                                  ;			if an error occurs!
 20095                                  
 20096                                  checklatchio:
 20097                                  
 20098                                  ; if returning fake bpb then assume the disk has not changed
 20099                                  
 20100                                  		; 26/12/2023
 20101                                  		;cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt]	
 20102 00001B69 E8B0FF                  		call	chkopcnt
 20103 00001B6C 741B                    		jz	short checkret	; done if zero
 20104                                  
 20105                                  ; check for past rom indications. if no rom change indicated, then return ok.
 20106                                  
 20107                                  		; 26/12/2023
 20108                                  		;test	word [es:di+3Fh], 40h
 20109                                  		;			; test [es:di+BDS.flags], fchanged ; 40h
 20110 00001B6E E80E01                  		call	checkromchange
 20111 00001B71 7416                    		jz	short checkret
 20112                                  
 20113                                  ; we now see that a change line has been seen in the past. let's do the
 20114                                  ; expensive verification.
 20115                                  
 20116 00001B73 E860EB                  		call	GetBp		; build	bpb in current bds
 20117 00001B76 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 20118 00001B78 E81600                  		call	check_vid
 20119 00001B7B 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 20120 00001B7D 09F6                    		or	si, si		; is changed for sure?
 20121 00001B7F 7908                    		jns	short checkret
 20122 00001B81 E88F00                  		call	returnvid
 20123                                  checklatchret:
 20124 00001B84 E822F2                  		call	maperror	; fix up al for	return to dos
 20125                                  ret_no_error_map:
 20126 00001B87 F9                      		stc
 20127 00001B88 5E                      		pop	si		; pop off return address
 20128                                  checkret:
 20129 00001B89 C3                      		retn
 20130                                  ; ---------------------------------------------------------------------------
 20131                                  
 20132                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 20133                                  ; only if there was a disk error. return that error code in ax.
 20134                                  ;
 20135                                  ;	called with es:di -> bds, ds -> Bios_Data
 20136                                  
 20137                                  checkfatvid:
 20138 00001B8A E8D101                  		call	fat_check	; check	the fat	and the	vid
 20139 00001B8D 09F6                    		or	si, si
 20140 00001B8F 7835                    		js	short changed_drv
 20141                                  
 20142                                  ; the fat was the same. fall into check_vid and check volume id.
 20143                                  
 20144                                  		; fall into check_vid
 20145                                  
 20146                                  ; =============== S U B	R O U T	I N E =======================================
 20147                                  
 20148                                  ; now with the extended boot record, the logic should be enhanced.
 20149                                  ;
 20150                                  ; if it is the extended boot record, then we check the volume serial
 20151                                  ; number instead of volume id. if it is different, then set si to -1.
 20152                                  ;
 20153                                  ; if it is same, then si= 1 (no change).
 20154                                  ;
 20155                                  ; if it is not the extended boot record, then just follows the old
 20156                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 20157                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 20158                                  ; should have already covered by extended boot structure checking.
 20159                                  ; so, we will return "i don't know" by setting si to 0.
 20160                                  ;
 20161                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 20162                                  ; (this will be gauranteed by a successful getbp call right before this
 20163                                  ; routine.)
 20164                                  ;
 20165                                  ;	called with es:di -> bds, ds -> bds
 20166                                  
 20167                                  		; 26/12/2023 - Retro DOS v5.0
 20168                                  		; 19/10/2022
 20169                                  check_vid:
 20170                                  
 20171                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 20172                                  ; boot signature. if it is set then go to do the extended
 20173                                  ; id check otherwise continue with code below
 20174                                  
 20175                                  		; 26/12/2023
 20176                                  		;;;
 20177 00001B91 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 20178 00001B96 7507                    		jnz     short chk_vid_1
 20179 00001B98 803E[9401]29            		cmp     byte [disksector+42h], 29h ; BS_FAT32_BootSig
 20180                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 20181 00001B9D EB05                    		jmp     short chk_vid_2
 20182                                  chk_vid_1:
 20183                                  		;;;
 20184 00001B9F 803E[7801]29            		cmp	byte [disksector+26h], 29h
 20185                                  					; [disksector+EXT_BOOT.SIG],
 20186                                  					; EXT_BOOT_SIGNATURE
 20187                                  chk_vid_2:		; 26/12/2023
 20188 00001BA4 7427                    		jz	short do_ext_check_id
 20189 00001BA6 E8E200                  		call	haschange
 20190 00001BA9 74DE                    		jz	short checkret
 20191 00001BAB 31F6                    		xor	si, si
 20192 00001BAD 803E[6201]00            		cmp	byte [disksector+10h], 0 ; BPB_NumFATs
 20193                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 20194 00001BB2 7411                    		jz	short checkfatret ; don't read vol id
 20195                                  					; if not fat system
 20196 00001BB4 E8F400                  		call	read_volume_id
 20197 00001BB7 720C                    		jb	short checkfatret
 20198 00001BB9 E89901                  		call	check_volume_id
 20199 00001BBC BEFFFF                  		mov	si, 0FFFFh	; -1
 20200                                  					; definitely changed
 20201 00001BBF 7505                    		jnz	short changed_drv
 20202                                  
 20203 00001BC1 46                      		inc	si		; not changed
 20204                                  vid_no_changed:
 20205 00001BC2 E8C000                  		call	resetchanged
 20206                                  		; 12/12/2022
 20207                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 20208                                  		;clc
 20209                                  checkfatret:
 20210 00001BC5 C3                      		retn
 20211                                  ; ---------------------------------------------------------------------------
 20212                                  
 20213                                  		; 12/12/2022
 20214                                  changed_drv:
 20215 00001BC6 F8                      		clc			; cas -- return	no error
 20216 00001BC7 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 20217                                  					; ensure that we ask rom for media
 20218 00001BCC C3                      		retn			; check	next time round
 20219                                  ; ---------------------------------------------------------------------------
 20220                                  
 20221                                  ; extended id check
 20222                                  
 20223                                  ; 16/10/2022
 20224                                  
 20225                                  ; the code to check extended id is basically a check to see if the
 20226                                  ; volume serial number is still the same. the volume serial number
 20227                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 20228                                  ; ds:di points to the bds of the drive under consideration.
 20229                                  ; the bds has fields containing the high and low words 
 20230                                  ; of the volume serial number of the media in the drive.
 20231                                  ; compare these fields to the fields mentioned above. if these fields
 20232                                  ; do not match the media has changed and so we should jump to the code
 20233                                  ; starting at ext_changed else return "i don't know" status
 20234                                  ; in the register used for the changeline status and continue executing
 20235                                  ; the code given below. for temporary storage use the register which
 20236                                  ; has been saved and restored around this block.
 20237                                  ;
 20238                                  ; bds fields in inc\msbds.inc
 20239                                  
 20240                                  		; 26/12/2023 - Retro DOS v5.0
 20241                                  		; 19/10/2022
 20242                                  do_ext_check_id:
 20243                                  		; 26/12/2023
 20244                                  		;push	ax
 20245                                  		;;mov	ax, word ptr ds:disksector+27h
 20246                                  		;			; [DiskSector+EXT_BOOT.SERIAL]
 20247                                  		;mov	ax, [disksector+27h]
 20248                                  ; 26/12/2023
 20249                                  %if 1
 20250                                  		;;;
 20251 00001BCD 57                      		push	di
 20252 00001BCE BE[9501]                		mov	si, disksector+43h ; BS_FAT32_VolID
 20253                                  					; [DiskSector+FAT32_EXT_BOOT.SERIAL]
 20254 00001BD1 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 20255 00001BD6 7403                    		jz	short chk_vid_3
 20256 00001BD8 83EE1C                  		sub	si, 28		; BS_VolID
 20257                                  		; si = disksector+27h	; [DiskSector+EXT_BOOT.SERIAL]
 20258                                  chk_vid_3:
 20259                                  		; [es:di+89h] = [es:di+BDS.vol_serial]
 20260 00001BDB 81C78900                		add	di, 137		; BDS.vol_serial
 20261 00001BDF A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL] ; (or FAT32_EXT_BOOT)
 20262                                  			;		= [di+BDS.vol_serial] ?
 20263 00001BE0 7501                    		jnz	short chk_vid_4
 20264 00001BE2 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL+2] ; (or FAT32_EXT_BOOT)
 20265                                  			;		= [di+BDS.vol_serial+2] ?
 20266                                  chk_vid_4:
 20267 00001BE3 5F                      		pop	di
 20268                                  		;pop	ax
 20269 00001BE4 7504                    		jnz	short ext_changed ; not equal/same
 20270 00001BE6 31F6                    		xor	si, si 		 ; 0 ; don't know
 20271 00001BE8 EBD8                    		jmp	short vid_no_changed ; reset the flag
 20272                                  		;;;
 20273                                  %else
 20274                                  		; 02/09/2023
 20275                                  		xor	si, si ; 0
 20276                                  		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 20277                                  		jnz	short ext_changed
 20278                                  		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 20279                                  		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 20280                                  		jnz	short ext_changed
 20281                                  		;xor	si, si		; 0
 20282                                  					; don't know
 20283                                  		pop	ax
 20284                                  		jmp	short vid_no_changed
 20285                                  					; reset the flag
 20286                                  %endif
 20287                                  
 20288                                  ; ---------------------------------------------------------------------------
 20289                                  
 20290                                  ext_changed:
 20291                                  		; 26/12/2023
 20292                                  		;pop	ax
 20293                                  		; 02/09/2023
 20294                                  		;dec	si ; mov si, 0FFFFh ; -1
 20295 00001BEA BEFFFF                  		mov	si, 0FFFFh	; -1
 20296                                  					; disk changed!
 20297                                  		; 12/12/2022
 20298                                  		; ('changed_drv' clears cf)
 20299                                  		;clc
 20300 00001BED EBD7                    		jmp	short changed_drv
 20301                                  
 20302                                  ; ---------------------------------------------------------------------------
 20303                                  
 20304                                  ; at i/o time, we detected the error. now we need to determine whether the
 20305                                  ; media was truly changed or not. we return normally if media change unknown.
 20306                                  ; and we pop off the call and jmp to harderr if we see an error.
 20307                                  ;
 20308                                  ; es:di -> bds
 20309                                  
 20310                                  checkio:				
 20311 00001BEF 80FC06                  		cmp	ah, 6
 20312 00001BF2 75D1                    		jnz	short checkfatret
 20313 00001BF4 E825FF                  		call	chkopcnt
 20314 00001BF7 74CC                    		jz	short checkfatret
 20315 00001BF9 E8DAEA                  		call	GetBp
 20316 00001BFC 7212                    		jb	short no_error_map
 20317 00001BFE E889FF                  		call	checkfatvid
 20318 00001C01 7209                    		jb	short checkioret ; disk	error trying to	read in.
 20319 00001C03 09F6                    		or	si, si		; is changed for sure?
 20320 00001C05 7802                    		js	short checkioerr ; yes changed
 20321 00001C07 45                      		inc	bp		; allow	a retry
 20322 00001C08 C3                      		retn
 20323                                  ; ---------------------------------------------------------------------------
 20324                                  
 20325                                  checkioerr:				
 20326 00001C09 E80700                  		call	returnvid
 20327                                  
 20328                                  checkioret:				
 20329 00001C0C F9                      		stc			; make sure carry gets passed through
 20330 00001C0D E955F1                  		jmp	harderr
 20331                                  ; ---------------------------------------------------------------------------
 20332                                  
 20333                                  no_error_map:				
 20334 00001C10 E955F1                  		jmp	harderr2
 20335                                  
 20336                                  ; =============== S U B	R O U T	I N E =======================================
 20337                                  
 20338                                  ; return vid sets up the vid for a return to dos.
 20339                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 20340                                  ;  **** trashes si! ****
 20341                                  
 20342                                  returnvid:		
 20343 00001C13 BE1600                  		mov	si, 22		; extra
 20344                                  					; offset into pointer to return	value
 20345 00001C16 E80700                  		call	vid_into_packet
 20346 00001C19 B406                    		mov	ah, 6
 20347 00001C1B F9                      		stc
 20348 00001C1C C3                      		retn
 20349                                  
 20350                                  ; ---------------------------------------------------------------------------
 20351                                  
 20352                                  ; moves the pointer to the volid for the drive into the original request packet
 20353                                  ; no attempt is made to preserve registers.
 20354                                  ;
 20355                                  ; assumes es:di -> bds
 20356                                  ; **trashes si**
 20357                                  
 20358                                  media_set_vid:				
 20359 00001C1D BE0F00                  		mov	si, 15		; trans+1
 20360                                  					; return the value here	in packet
 20361                                  
 20362                                  		; fall into vid_into_packet
 20363                                  
 20364                                  ; =============== S U B	R O U T	I N E =======================================
 20365                                  
 20366                                  ; return pointer to vid in bds at es:di in packet[si]
 20367                                  
 20368                                  		; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 20369                                  		; 19/10/2022
 20370                                  vid_into_packet:
 20371 00001C20 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 20372 00001C21 C51E[1200]              		lds	bx, [ptrsav]
 20373                                  		;add	di, 75		; BDS.volid
 20374                                  		; 14/04/2024
 20375 00001C25 83C77D                  		add	di, 125	; (PCDOS 7.1)
 20376 00001C28 8938                    		mov	[bx+si], di
 20377                                  		;sub	di, 75		; BDS.volid
 20378 00001C2A 83EF7D                  		sub	di, 125
 20379 00001C2D 8C4002                  		mov	[bx+si+2], es
 20380 00001C30 1F                      		pop	ds
 20381                                  dofloppy:	; 18/12/2022
 20382 00001C31 C3                      		retn
 20383                                  
 20384                                  ; ---------------------------------------------------------------------------
 20385                                  
 20386                                  ;----------------------------------------------------------------------------
 20387                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 20388                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 20389                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 20390                                  ;   of getbp. for 3.5" media, we just return.
 20391                                  ;
 20392                                  ;   inputs:	es:di point to correct bds for this drive
 20393                                  ;		ah has media byte
 20394                                  ;
 20395                                  ;   outputs:	carry clear
 20396                                  ;		    no registers modified
 20397                                  ;		carry set
 20398                                  ;		    al = sectors/fat
 20399                                  ;		    bh = number of root directory entries
 20400                                  ;		    bl = sectors per track
 20401                                  ;		    cx = number of sectors
 20402                                  ;		    dh = sectors per allocation unit
 20403                                  ;		    dl = number of heads
 20404                                  ;
 20405                                  ;----------------------------------------------------------------------------
 20406                                  
 20407                                  		; 26/12/2023 - Retro DOS v5.0
 20408                                  hidensity:
 20409                                  
 20410                                  ; check for correct drive
 20411                                  		
 20412                                  		; 26/12/2023
 20413 00001C32 26F6453F02              		test	byte [es:di+3Fh], 2 ; is it special?
 20414                                  		; 12/12/2022
 20415                                  		;test	byte [es:di+23h], 2
 20416                                  		;;test	word [es:di+23h], 2 ; is it special?
 20417                                  					; [es:di+BDS.flags], fchangeline
 20418 00001C37 74F8                    		jz	short dofloppy	; no, do normal floppy test
 20419                                  
 20420                                  ; we have a media byte that is pretty complex. examine drive information
 20421                                  ; table to see what kind it is.
 20422                                  
 20423                                  		; 26/12/2023
 20424 00001C39 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; is it single-media?
 20425                                  		;cmp	byte [es:di+22h], 2 ; is it single-media?
 20426 00001C3E 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 20427                                  					; yes, use fatid...
 20428                                  ; 96 tpi drive?
 20429 00001C40 80FCF9                  		cmp	ah, 0F9h
 20430 00001C43 75EC                    		jnz	short dofloppy
 20431                                  
 20432                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 20433                                  ;------ a 720K diskette
 20434                                  
 20435                                  		; 02/09/2023 (PCDOS 7.1)
 20436                                  		; 26/12/2023
 20437 00001C45 268A453E                		mov	al, [es:di+3Eh] ; [es:di+BDS.formfactor]
 20438                                  		;mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 20439 00001C49 3C07                    		cmp	al, 7
 20440                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 20441                                  					; ffOther
 20442 00001C4B 7413                    		jz	short Is720K
 20443 00001C4D 3C09                    		cmp	al, 9
 20444                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 20445                                  					; ff288
 20446 00001C4F 740F                    		jz	short Is720K
 20447 00001C51 B007                    		mov	al, 7		; seven	sectors	/ fat
 20448 00001C53 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 20449                                  					; 224 root dir entries
 20450                                  					; & 0Fh sector max
 20451 00001C56 B96009                  		mov	cx, 2400	; 80*15*2
 20452                                  					; 80 tracks, 15 sectors/track,
 20453                                  					; 2 sides
 20454                                  		; 02/09/2023
 20455 00001C59 5A                      		pop	dx		; pop off return address
 20456 00001C5A BA0201                  		mov	dx, 258		; 1*256+2
 20457                                  					; sectors/allocation unit
 20458                                  					; & head max
 20459                                  		;add	sp, 2		; pop off return address
 20460 00001C5D E9EAEA                  		jmp	Has1		; return to tail of getbp
 20461                                  ; ---------------------------------------------------------------------------
 20462                                  
 20463                                  Is720K:
 20464                                  		; 02/09/2023
 20465 00001C60 5B                      		pop	bx		; pop off return address
 20466                                  		;add	sp, 2		; pop off return address
 20467 00001C61 E9A9EA                  		jmp	Has720K		; return to 720K code
 20468                                  ; ---------------------------------------------------------------------------
 20469                                  
 20470                                  		; 18/12/2022
 20471                                  ;dofloppy:
 20472                                  		;retn
 20473                                  
 20474                                  ; =============== S U B	R O U T	I N E =======================================
 20475                                  
 20476                                  ; 16/10/2022
 20477                                  
 20478                                  ;---------------------------------------------------------------------------
 20479                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 20480                                  ;		   essentially used to indicate changeline, or format.
 20481                                  ;
 20482                                  ;   inputs:	dl contains physical drive number
 20483                                  ;		bx contains bits to set in the flag field in the bdss
 20484                                  ;   outputs:	none
 20485                                  ;   registers modified: flags
 20486                                  ;
 20487                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 20488                                  ;
 20489                                  ; in the virtual drive system we *must* flag the other drives as being changed
 20490                                  ;---------------------------------------------------------------------------
 20491                                  
 20492                                  		; 26/12/2023 - Retro DOS v5.0
 20493                                  set_changed_dl:	
 20494 00001C64 06                      		push	es
 20495 00001C65 57                      		push	di
 20496                                  		;les	di, ds:start_bds
 20497                                  		; 19/10/2022
 20498 00001C66 C43E[1901]              		les	di, [start_bds]
 20499                                  
 20500                                  ; note: we assume that the list is non-empty
 20501                                  
 20502                                  scan_bds:
 20503 00001C6A 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 20504 00001C6E 7504                    		jnz	short get_next_bds
 20505                                  
 20506                                  ; someone may complain, but this *always* must be done when a disk change is
 20507                                  ; noted. there are *no* other compromising circumstances.
 20508                                  
 20509                                  		; 26/12/2023
 20510 00001C70 26095D3F                		or	[es:di+3Fh], bx	; [es:di+BDS.flags]
 20511                                  		;or	[es:di+23h], bx	; [es:di+BDS.flags]
 20512                                  					; signal change	on other drive
 20513                                  get_next_bds:
 20514 00001C74 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 20515                                  					; go to	next bds
 20516 00001C77 83FFFF                  		cmp	di, 0FFFFh
 20517 00001C7A 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 20518 00001C7C 5F                      		pop	di
 20519 00001C7D 07                      		pop	es
 20520 00001C7E C3                      		retn
 20521                                  
 20522                                  ; =============== S U B	R O U T	I N E =======================================
 20523                                  
 20524                                  ;---------------------------------------------------------------------------
 20525                                  ; checkromchange - see if external program has diddled rom change line.
 20526                                  ;
 20527                                  ;   inputs:	es:di points to current bds.
 20528                                  ;   outputs:	zero set - no change
 20529                                  ;		zero reset - change
 20530                                  ;   registers modified: none
 20531                                  ;---------------------------------------------------------------------------
 20532                                  
 20533                                  		; 26/12/2023 - Retro DOS v5.0
 20534                                  checkromchange:	
 20535                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 20536                                  		; 26/12/2023
 20537 00001C7F 26F6453F40              		test	byte [es:di+3Fh], 40h
 20538                                  		; 10/12/2022
 20539                                  		;test	byte [es:di+23h], 40h
 20540                                  		;;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 20541                                  					; fchanged
 20542 00001C84 C3                      		retn
 20543                                  
 20544                                  ; =============== S U B	R O U T	I N E =======================================
 20545                                  
 20546                                  ;---------------------------------------------------------------------------
 20547                                  ; resetchanged - restore value of change line
 20548                                  ;
 20549                                  ;   inputs:	es:di points to current bds
 20550                                  ;   outputs:	none
 20551                                  ;   registers modified: none
 20552                                  ;---------------------------------------------------------------------------
 20553                                  
 20554                                  		; 26/12/2023 - Retro DOS v5.0
 20555                                  resetchanged:
 20556                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh
 20557                                  		; 26/12/2023
 20558 00001C85 2680653FBF              		and	byte [es:di+3Fh], 0BFh
 20559                                  		; 10/12/2022
 20560                                  		;and	byte [es:di+23h], 0BFh
 20561                                  		;;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 20562                                  					; ~fchanged
 20563 00001C8A C3                      		retn
 20564                                  
 20565                                  ; =============== S U B	R O U T	I N E =======================================
 20566                                  
 20567                                  ;---------------------------------------------------------------------------
 20568                                  ; haschange - see if drive can supply change line
 20569                                  ;
 20570                                  ;   inputs:	es:di points to current bds
 20571                                  ;   outputs:	zero set - no change line available
 20572                                  ;		zero reset - change line available
 20573                                  ;   registers modified: none
 20574                                  ;---------------------------------------------------------------------------
 20575                                  
 20576                                  		; 26/12/2023 - Retro DOS v5.0
 20577                                  haschange:
 20578                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 20579                                  		; 26/12/2023
 20580 00001C8B 26F6453F02              		test	byte [es:di+3Fh], 2
 20581                                  		; 10/12/2022
 20582                                  		;test	byte [es:di+23h], 2
 20583                                  		;;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 20584                                  					; fchangeline
 20585 00001C90 C3                      		retn
 20586                                  
 20587                                  ; ---------------------------------------------------------------------------
 20588                                  
 20589                                  ; 16/10/2022
 20590                                  
 20591                                  ;-------------------------------------------------------------------------
 20592                                  ; set_volume_id      -	main routine, calls other routines.
 20593                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 20594                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 20595                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 20596                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 20597                                  ;-------------------------------------------------------------------------
 20598                                  
 20599                                  ; set_volume_id
 20600                                  ;   if drive has changeline support, read in and set the volume_id
 20601                                  ; and the last fat_id byte. if no change line support then do nothing.
 20602                                  ;
 20603                                  ;   on entry:
 20604                                  ;	es:di points to the bds for this disk.
 20605                                  ;	ah contains media byte
 20606                                  ;
 20607                                  ;   on exit:
 20608                                  ;	carry clear:
 20609                                  ;	   successful call
 20610                                  ;	carry set
 20611                                  ;	   error and ax has error code
 20612                                  
 20613                                  set_volume_id:
 20614 00001C91 52                      		push	dx		; save registers
 20615 00001C92 50                      		push	ax
 20616 00001C93 E8F5FF                  		call	haschange	; does drive have changeline support?
 20617 00001C96 740B                    		jz	short setvret	; no, get out
 20618 00001C98 E81000                  		call	read_volume_id
 20619 00001C9B 7209                    		jb	short seterr
 20620 00001C9D E8A900                  		call	transfer_volume_id ; copy the volume id	to special drive
 20621 00001CA0 E8E2FF                  		call	resetchanged	; restore value	of change line
 20622                                  setvret:				
 20623                                  		; 10/12/2022
 20624                                  		; cf = 0
 20625                                  		;clc			; no error, clear carry flag
 20626 00001CA3 58                      		pop	ax		; restore registers
 20627 00001CA4 5A                      		pop	dx
 20628 00001CA5 C3                      		retn
 20629                                  ; ---------------------------------------------------------------------------
 20630                                  
 20631                                  seterr:
 20632 00001CA6 5A                      		pop	dx		; pop stack but don't overwrite ax
 20633 00001CA7 5A                      		pop	dx		; restore dx
 20634 00001CA8 C3                      		retn
 20635                                  ; ---------------------------------------------------------------------------
 20636 00001CA9 0000                    root_sec:	dw 0			; root sector #
 20637                                  
 20638                                  ; 16/10/2022
 20639                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 20640                                  ; 09/12/2022
 20641                                  ROOTSEC equ root_sec
 20642                                  
 20643                                  ; =============== S U B	R O U T	I N E =======================================
 20644                                  
 20645                                  ; 16/10/2022
 20646                                  
 20647                                  ; read_volume_id read the volume id and tells if it has been changed.
 20648                                  ;
 20649                                  ;   on entry:
 20650                                  ;	es:di points to current bds for drive.
 20651                                  ;
 20652                                  ;   on exit:
 20653                                  ;	carry clear
 20654                                  ;	    si = 1  no change
 20655                                  ;	    si = 0  ?
 20656                                  ;	    si = -1 change
 20657                                  ;
 20658                                  ;	carry set:
 20659                                  ;	    error and ax has error code.
 20660                                  
 20661                                  read_volume_id:
 20662 00001CAB 52                      		push	dx		; preserve registers
 20663 00001CAC 51                      		push	cx
 20664 00001CAD 53                      		push	bx
 20665 00001CAE 50                      		push	ax
 20666 00001CAF 06                      		push	es		; stack the bds last
 20667 00001CB0 57                      		push	di
 20668 00001CB1 1E                      		push	ds		; point es to Bios_Data
 20669 00001CB2 07                      		pop	es
 20670 00001CB3 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 20671 00001CB6 BE[6305]                		mov	si, nul_vid	; "NO NAME	 "
 20672                                  		; 26/12/2023
 20673 00001CB9 B90B00                  		mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 20674                                  		;mov	cx, 12		; initialize tmp_vid to	null vi_id
 20675                                  		
 20676                                  		;rep	movsb
 20677                                  		; 26/12/2023
 20678                                  		;rep movs byte ptr es:[di], byte ptr cs:[si]
 20679                                  		;db 0FBh,2Eh,0A4h 
 20680                                  		;cs	; nul_vid is in BIOSCODE segment 
 20681                                  		;rep movsb
 20682 00001CBC F3                      		rep
 20683 00001CBD 2E                      		cs
 20684 00001CBE A4                      		movsb	
 20685                                  		
 20686 00001CBF 5F                      		pop	di
 20687 00001CC0 07                      		pop	es
 20688 00001CC1 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 20689                                  					; # of fats
 20690 00001CC5 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 20691                                  					; sectors / fat
 20692 00001CC9 F6E1                    		mul	cl		; size taken by	fats
 20693 00001CCB 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 20694                                  					; add on reserved sectors
 20695                                  					;
 20696                                  					; ax is	now sector # (0	based)
 20697                                  		; 17/10/2022
 20698 00001CCF 2EA3[A91C]              		mov	[cs:ROOTSEC], ax
 20699                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 20700                                  					; 0070h:3EFFh =	2C7h:198Fh
 20701 00001CD3 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 20702                                  					; # root dir entries
 20703 00001CD7 B104                    		mov	cl, 4		; 16 entries/sector
 20704 00001CD9 D3E8                    		shr	ax, cl		; divide by 16
 20705                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 20706                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 20707 00001CDB 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 20708                                  next_sec:
 20709 00001CDC 51                      		push	cx		; save outer loop counter
 20710 00001CDD 2EA1[A91C]              		mov	ax, [cs:ROOTSEC]
 20711                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 20712                                  					; get sector #
 20713 00001CE1 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 20714                                  					; sectors / track
 20715 00001CE5 31D2                    		xor	dx, dx
 20716 00001CE7 F7F1                    		div	cx
 20717                                  
 20718                                  ; set up registers for call to read_sector
 20719                                  
 20720 00001CE9 42                      		inc	dx		; dx= sectors into track
 20721                                  					; ax= track count from 0
 20722 00001CEA 88D1                    		mov	cl, dl		; sector to read
 20723 00001CEC 31D2                    		xor	dx, dx
 20724 00001CEE 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 20725                                  					; # heads on this disc
 20726 00001CF2 88D6                    		mov	dh, dl		; head number
 20727 00001CF4 88C5                    		mov	ch, al		; track	#
 20728 00001CF6 E8BDEB                  		call	read_sector	; get first sector of the root directory,
 20729                                  					; ds:bx	-> directory sector
 20730 00001CF9 723F                    		jb	short readviderr
 20731 00001CFB B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 20732 00001CFE B008                    		mov	al, 8		; volume label bit
 20733                                  fvid_loop:
 20734                                  		; 02/09/2023 (PCDOS 7.1)
 20735 00001D00 382F                    		cmp	[bx], ch ; 0				
 20736                                  		;cmp	byte [bx], 0 ; end of dir?
 20737 00001D02 7433                    		jz	short no_vid	; yes, no vol id
 20738 00001D04 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 20739 00001D07 7405                    		jz	short ent_loop	; yes, skip
 20740 00001D09 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 20741 00001D0C 750F                    		jnz	short found_vid	; jmp yes
 20742                                  ent_loop:
 20743 00001D0E 83C320                  		add	bx, 32		; add length of	directory entry
 20744 00001D11 E2ED                    		loop	fvid_loop
 20745 00001D13 59                      		pop	cx		; outer loop
 20746 00001D14 2EFF06[A91C]            		inc	word [cs:ROOTSEC]
 20747                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 20748                                  					; next sector
 20749 00001D19 E2C1                    		loop	next_sec	; continue
 20750                                  notfound:
 20751                                  		; 02/09/2023
 20752                                  		;xor	si, si
 20753 00001D1B EB13                    		jmp	short fvid_ret
 20754                                  ; ---------------------------------------------------------------------------
 20755                                  
 20756                                  found_vid:
 20757                                  		; 02/09/2023
 20758                                  		; cf = 0  ('test' instruction clears cf)
 20759 00001D1D 59                      		pop	cx		; clean stack of outer loop counter
 20760 00001D1E 89DE                    		mov	si, bx		; point	to volume_id
 20761 00001D20 06                      		push	es		; preserve current bds
 20762 00001D21 57                      		push	di
 20763 00001D22 1E                      		push	ds
 20764 00001D23 07                      		pop	es		; point es to Bios_Data
 20765 00001D24 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 20766 00001D27 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 20767                                  					; length of string minus nul
 20768 00001D2A F3A4                    		rep movsb		; mov volume label to tmp_vid
 20769                                  		;xor	al, al
 20770                                  		; 02/09/2023
 20771 00001D2C 91                      		xchg	ax, cx		; ax = 0
 20772 00001D2D AA                      		stosb			; null terminate
 20773                                  		;;xor	si, si
 20774                                  		; 02/09/2023
 20775                                  		;xchg	ax, si		; si = 0
 20776 00001D2E 5F                      		pop	di		; restore current bds
 20777 00001D2F 07                      		pop	es
 20778                                  fvid_ret:
 20779                                  		; 02/09/2023
 20780 00001D30 31F6                    		xor	si, si ; 0
 20781                                  				
 20782 00001D32 58                      		pop	ax
 20783                                  		; 10/12/2022
 20784                                  		; cf = 0
 20785                                  		;clc
 20786                                  rvidret:
 20787 00001D33 5B                      		pop	bx		; restore registers
 20788 00001D34 59                      		pop	cx
 20789 00001D35 5A                      		pop	dx
 20790 00001D36 C3                      		retn
 20791                                  ; ---------------------------------------------------------------------------
 20792                                  
 20793                                  no_vid:
 20794 00001D37 59                      		pop	cx		; clean stack of outer loop counter
 20795                                  		;jmp	short notfound	; not found
 20796                                  		; 02/09/2023
 20797 00001D38 EBF6                    		jmp	short fvid_ret
 20798                                  ; ---------------------------------------------------------------------------
 20799                                  
 20800                                  readviderr:
 20801 00001D3A 5E                      		pop	si		; trash the outer loop counter
 20802 00001D3B 5E                      		pop	si		; caller's ax, return error code instead
 20803 00001D3C EBF5                    		jmp	short rvidret
 20804                                  
 20805                                  ; ---------------------------------------------------------------------------
 20806                                  		; 26/12/2023 - Retro DOS v5.0
 20807                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 20808                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 20809                                  preset_volid_addr:
 20810 00001D3E BE[4008]                		mov	si, tmp_vid	; "NO NAME    "
 20811                                  		; 26/12/2023
 20812                                  		; PCDOS 7.1
 20813 00001D41 83C77D                  		add	di, 125		; BDS.volid
 20814 00001D44 B90B00                  		mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 20815                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 20816                                  		;add	di, 75		; BDS.volid
 20817                                  		;mov	cx, 12		; VOLID_SIZ
 20818                                  		;
 20819 00001D47 FC                      		cld
 20820 00001D48 C3                      		retn
 20821                                  
 20822                                  ; =============== S U B	R O U T	I N E =======================================
 20823                                  
 20824                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 20825                                  ;
 20826                                  ; inputs:	es:di has current bds
 20827                                  ; outputs:	bds for drive has volume id from tmp
 20828                                  
 20829                                  		; 27/12/2023 - Retro DOS v5.0
 20830                                  transfer_volume_id:
 20831 00001D49 57                      		push	di		; copy the volume id from tmp to special drive
 20832                                  		;push	si
 20833 00001D4A 51                      		push	cx
 20834                                  		; 27/12/2023
 20835 00001D4B 56                      		push	si
 20836                                  
 20837                                  		;mov	si, tmp_vid	; "NO NAME	 "
 20838                                  		;;add	di, BDS.volid
 20839                                  		;add	di, 75		; BDS.volid
 20840                                  		;;mov	cx, VOLID_SIZ
 20841                                  		;mov	cx, 12		; VOLID_SIZ
 20842                                  		;cld
 20843                                  		; 02/09/2023 (PCDOS 7.1)
 20844 00001D4C E8EFFF                  		call	preset_volid_addr
 20845                                  
 20846 00001D4F F3A4                    		rep movsb
 20847                                  		
 20848                                  		; 27/12/2023
 20849 00001D51 5E                      		pop	si
 20850                                  chk_volid_ok:
 20851 00001D52 59                      		pop	cx
 20852                                  		;pop	si
 20853 00001D53 5F                      		pop	di
 20854 00001D54 C3                      		retn
 20855                                  
 20856                                  ; =============== S U B	R O U T	I N E =======================================
 20857                                  
 20858                                  ;  check_volume_id - compare volume id in tmp area with
 20859                                  ;		     one expected for drive
 20860                                  ;
 20861                                  ;   inputs:	es:di has current bds for drive
 20862                                  ;   outputs:	zero true means it matched
 20863                                  
 20864                                  		; 27/12/2023 - Retro DOS v5.0
 20865                                  check_volume_id:
 20866 00001D55 57                      		push	di
 20867 00001D56 51                      		push	cx
 20868                                  		
 20869                                  		;mov	si, tmp_vid	; "NO NAME	 "
 20870                                  		;;add	di, BDS.volid
 20871                                  		;add	di, 75		; BDS.volid
 20872                                  		;;mov	cx, VOLID_SIZ
 20873                                  		;mov	cx, 12		; VOLID_SIZ
 20874                                  		;cld
 20875                                  		; 02/09/2023 (PCDOS 7.1)
 20876 00001D57 E8E4FF                  		call	preset_volid_addr
 20877                                  
 20878 00001D5A F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 20879                                  		
 20880                                  		; 27/12/2023
 20881                                  		;pop	cx
 20882                                  		;pop	di
 20883                                  		;retn
 20884 00001D5C EBF4                    		jmp	short chk_volid_ok
 20885                                  
 20886                                  ; =============== S U B	R O U T	I N E =======================================
 20887                                  
 20888                                  ;   fat_check - see of the fatid has changed in the specified drive.
 20889                                  ;	      - uses the fat id obtained from the boot sector.
 20890                                  ;
 20891                                  ;   inputs:	medbyt is expected fat id
 20892                                  ;		es:di points to current bds
 20893                                  ;
 20894                                  ;   output:	si = -1 if fat id different,
 20895                                  ;		si = 0 otherwise
 20896                                  ;
 20897                                  ;   no other registers changed.
 20898                                  
 20899                                  fat_check:
 20900 00001D5E 50                      		push	ax
 20901 00001D5F 31F6                    		xor	si, si		; say fat id's are same.
 20902 00001D61 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 20903 00001D64 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 20904                                  					; compare it with the bds medbyte
 20905 00001D68 7401                    		jz	short okret1	; carry	clear
 20906 00001D6A 4E                      		dec	si
 20907                                  okret1:
 20908 00001D6B 58                      		pop	ax
 20909 00001D6C C3                      		retn
 20910                                  
 20911                                  ; ---------------------------------------------------------------------------
 20912                                  
 20913                                  ; BIOSCODE:1DFEh (PCDOS 7.1 IBMBIO.COM) ; 27/12/2023
 20914                                  		;times 2 db 0
 20915                                  
 20916                                  ; BIOSCODE:1A69h (MSDOS 6.21 IO.SYS) ((& MSDOS 6.22 IO.SYS))
 20917                                  		;times 7 db 0
 20918                                  
 20919                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 20920                                  
 20921                                  		; 09/12/2022
 20922                                  		;times 4 db 0	; 17/10/2022
 20923                                  		;db 4 dup(0)	; times 4 db 0
 20924                                  
 20925                                  ; ---------------------------------------------------------------------------
 20926                                  
 20927                                  		; 09/12/2022
 20928                                  		;db 0
 20929                                  
 20930                                  number2div	equ ($-BCode_start)
 20931                                  number2mod	equ (number2div % 16)
 20932                                  
 20933                                  %if number2mod>0 & number2mod<16
 20934 00001D6D 00<rep 3h>              		times (16-number2mod) db 0
 20935                                  %endif
 20936                                  
 20937                                  ;align 16
 20938                                  
 20939                                  ; 09/12/2022
 20940                                  BCODE_END	equ $ - BCode_start
 20941                                  ; 31/03/2024
 20942                                  BCODEEND:
 20943                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 20944                                  ; 13/12/2022
 20945                                  SYSINITOFFSET	equ BCODE_END
 20946                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 20947                                  
 20948                                  ; 30/12/2022 - Retro DOS v4.2
 20949                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
 20950                                  
 20951                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 20952                                  
 20953                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20954                                  ; 01/05/2019 - Retro DOS v4.0 
 20955                                  ; ============================================================================
 20956                                  ; end of BIOSCODE
 20957                                  
 20958                                  ; ----------------------------------------------------------------------------
 20959                                  ; %include sysinit5.s	; 09/12/2022
 20960                                  ; ----------------------------------------------------------------------------
 20961                                  
 20962                                  ;=============================================================================
 20963                                  ; (IO.SYS) SYSINIT SEGMENT 
 20964                                  ;=============================================================================
 20965                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20966                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20967                                  ;
 20968                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 20969                                  
 20970                                  section .SYSINIT vstart=0
 20971                                  
 20972                                  ; ****************************************************************************
 20973                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 20974                                  ; ----------------------------------------------------------------------------
 20975                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 20976                                  ; ----------------------------------------------------------------------------
 20977                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 20978                                  ; ----------------------------------------------------------------------------
 20979                                  ; Assembler: NASM version 2.15
 20980                                  ; ----------------------------------------------------------------------------
 20981                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 20982                                  ; ----------------------------------------------------------------------------
 20983                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 20984                                  ; ----------------------------------------------------------------------------
 20985                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 20986                                  ; source code by Microsoft, 1991 
 20987                                  ; ----------------------------------------------------------------------------
 20988                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 20989                                  ; by Microsoft, 12/10/1983
 20990                                  ; ****************************************************************************
 20991                                  ; main file: 'retrodos4.s'
 20992                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 20993                                  
 20994                                  ; 30/12/2022 - Retro DOS v4.2 
 20995                                  ; Retro DOS v4.0 - 2019
 20996                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 20997                                   
 20998                                  ; 21/10/2022
 20999                                  ; ----------------------------------------------------------------------------
 21000                                  ; This source code (version) is based on SYSINIT source code of disassembled
 21001                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 21002                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 21003                                  ; ----------------------------------------------------------------------------
 21004                                  ; Binary file splitter & joiner: FFSJ v3.3
 21005                                  
 21006                                  ;--------------------------------------------------------------
 21007                                  ; SYSINIT.TXT (27/01/1983)
 21008                                  ;--------------------------------------------------------------
 21009                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 21010                                  ;over  the  system  initialization  after  the  OEM  bios   has
 21011                                  ;performed any  initialization  it  needs  to  do.   Control is
 21012                                  ;transfered with a long jump to the external  variable  SYSINIT
 21013                                  ;
 21014                                  ;
 21015                                  ;   The OEM  has  the  following  variables declared external:
 21016                                  ;
 21017                                  ;   CURRENT_DOS_LOCATION    WORD
 21018                                  ;
 21019                                  ;This word  contains  the  segment  number of the DOS before it
 21020                                  ;is relocated.  The OEM bios must set this value.
 21021                                  ;
 21022                                  ;   FINAL_DOS_LOCATION      WORD
 21023                                  ;
 21024                                  ;This word contains the segment number of the DOS after SYSINIT
 21025                                  ;moves it.  The OEM bios must set this value.
 21026                                  ;
 21027                                  ;   DEVICE_LIST             DWORD
 21028                                  ;
 21029                                  ;This  double  word  pointer  points  to  the  linked  list  of
 21030                                  ;character and block device drivers.  The  OEM  must  set  this
 21031                                  ;value.
 21032                                  ;
 21033                                  ;   MEMORY_SIZE             WORD
 21034                                  ;
 21035                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 21036                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 21037                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 21038                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 21039                                  ;and read it back until it gets a mismatch.
 21040                                  ;
 21041                                  ;   DEFAULT_DRIVE           BYTE
 21042                                  ;
 21043                                  ;This is  the initial default drive when the system first comes
 21044                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 21045                                  ;it then drive a is assumed.
 21046                                  ;
 21047                                  ;   BUFFERS                 BYTE
 21048                                  ;
 21049                                  ;This is  the  default  number of buffers for the system.  This
 21050                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 21051                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 21052                                  ;
 21053                                  ;   FILES                   BYTE
 21054                                  ;
 21055                                  ;This is  the  default  number  of  files for the system.  This
 21056                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 21057                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 21058                                  ;
 21059                                  ;   SYSINIT                 FAR
 21060                                  ;
 21061                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 21062                                  ;this label at the end of its INIT code.
 21063                                  ;
 21064                                  ;   The OEM  has  the  following  variables declared public:
 21065                                  ;
 21066                                  ;   RE_INIT                 FAR
 21067                                  ;
 21068                                  ;This is an entry point which allows the BIOS to do some INIT
 21069                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 21070                                  ;PRESERVED.  On entry DS points to the first available memory
 21071                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 21072                                  ;prefix which represents  the  "program"  currently  running.
 21073                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 21074                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 21075                                  ;that  no  memory  is  allocated to it, it is running in free
 21076                                  ;memory.
 21077                                  ;NOTES:
 21078                                  ;     At the time this routine is called SYSINIT occupies the
 21079                                  ;highest 10K of memory ("highest" is determined by the  value
 21080                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 21081                                  ;     Since this is called AFTER DOS is initialized, you can
 21082                                  ;make system calls.  This also implies that the code for this
 21083                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 21084                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 21085                                  ;     If you don't want  anything done just set this to point
 21086                                  ;at a FAR RET instruction.
 21087                                  
 21088                                  ; ----------------------------------------------------------------------
 21089                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 21090                                  ; ----------------------------------------------------------------------
 21091                                  
 21092                                  ;include version.inc
 21093                                  ; ----------------------------------------------------------------------
 21094                                  
 21095                                  ;FALSE   EQU     0
 21096                                  ;TRUE    EQU     0FFFFh
 21097                                  
 21098                                  ;IBMVER	    EQU     TRUE
 21099                                  ;IBMCOPYRIGHT EQU   FALSE
 21100                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 21101                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 21102                                  ;MSVER      EQU     FALSE
 21103                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 21104                                  ;KANJI      EQU     FALSE
 21105                                  
 21106                                  ;(MSDOS 6.0, versiona.inc, 1991)
 21107                                  ; ----------------------------------------------------------------------
 21108                                  ;MAJOR_VERSION  EQU	6
 21109                                  ;;MINOR_VERSION	EQU	0	;6.00
 21110                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 21111                                  
 21112                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 21113                                  ; ----------------------------------------------------------------------
 21114                                  ;MAJOR_VERSION   EQU	5
 21115                                  ;MINOR_VERSION   EQU	0
 21116                                  
 21117                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 21118                                  ;MAJOR_VERSION   EQU	6
 21119                                  ;MINOR_VERSION   EQU	22
 21120                                  
 21121                                  ; 21/02/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
 21122                                  MAJOR_VERSION   EQU	7
 21123                                  MINOR_VERSION   EQU	10
 21124                                  
 21125                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 21126                                  
 21127                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 21128                                  				; currently 0.
 21129                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 21130                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 21131                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 21132                                  
 21133                                  ;      if1
 21134                                  ;      %OUT  ... for DOS Version 5.00 ...
 21135                                  ;      endif
 21136                                  
 21137                                         ;******************************
 21138                                         ;Each assembler program should:
 21139                                         ;  mov ah,030h                   ;DOS Get Version function
 21140                                         ;  int 021h                      ;Version ret. in AX,minor version first
 21141                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 21142                                         ;  jne error_handler             ; EXACT version match.
 21143                                         ;******************************
 21144                                  
 21145                                  ; ----------------------------------------------------------------------
 21146                                  ; device definitions
 21147                                  
 21148                                  ;Attribute bit masks
 21149                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 21150                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 21151                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 21152                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 21153                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 21154                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 21155                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 21156                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 21157                                  
 21158                                  ; The device table list has the form:
 21159                                  struc	SYSDEV
 21160 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 21161 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 21162 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 21163 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 21164 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 21165                                  .size:
 21166                                  endstruc
 21167                                  
 21168                                  ;Static Reguest Header
 21169                                  struc	SRHEAD
 21170 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 21171 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 21172 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 21173 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 21174 00000005 ????????????????                	resb 8		;Reserved for queue links
 21175                                  .size:
 21176                                  endstruc
 21177                                  
 21178                                  ;Status word masks
 21179                                  STERR   EQU     8000H           ;Bit 15 - Error
 21180                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 21181                                  STDON   EQU     0100H           ;Bit 8 - Done
 21182                                  STECODE EQU     00FFH           ;Error code
 21183                                  WRECODE EQU     0
 21184                                  
 21185                                  ;Function codes
 21186                                  DEVINIT EQU     0               ;Initialization
 21187                                  DINITHL EQU     26              ;Size of init header
 21188                                  DEVMDCH EQU     1               ;Media check
 21189                                  DMEDHL  EQU     15              ;Size of media check header
 21190                                  DEVBPB  EQU     2               ;Get BPB
 21191                                  DEVRDIOCTL EQU  3               ;IOCTL read
 21192                                  DBPBHL  EQU     22              ;Size of Get BPB header
 21193                                  DEVRD   EQU     4               ;Read
 21194                                  DRDWRHL EQU     22              ;Size of RD/WR header
 21195                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 21196                                  DRDNDHL EQU     14              ;Size of non destructive read header
 21197                                  DEVIST  EQU     6               ;Input status
 21198                                  DSTATHL EQU     13              ;Size of status header
 21199                                  DEVIFL  EQU     7               ;Input flush
 21200                                  ; 21/02/2024
 21201                                  ;DFLSHL EQU     15              ;Size of flush header
 21202                                  DFLSHL	equ	13	; PCDOS 7.1 IBMDOS.COM  ; 21/02/2024
 21203                                  DEVWRT  EQU     8               ;Write
 21204                                  DEVWRTV EQU     9               ;Write with verify
 21205                                  DEVOST  EQU     10              ;Output status
 21206                                  DEVOFL  EQU     11              ;Output flush
 21207                                  DEVWRIOCTL EQU  12              ;IOCTL write
 21208                                  
 21209                                  ; ----------------------------------------------------------------------
 21210                                  struc	SYS_FCB
 21211 00000000 ??                      .fcb_drive:	resb 1
 21212 00000001 ????????????????        .fcb_name:	resb 8
 21213 00000009 ??????                  .fcb_ext:	resb 3
 21214 0000000C ????                    .fcb_EXTENT:	resw 1
 21215 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 21216 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 21217                                                          ; word
 21218 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 21219 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 21220 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 21221 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 21222                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 21223                                                          ; If file, bit 6=0 if dirty
 21224                                                          ; If I/O device, bit 6=0 if EOF (input)
 21225                                                          ;               Bit 5=1 if Raw mode
 21226                                                          ;               Bit 0=1 if console input device
 21227                                                          ;               Bit 1=1 if console output device
 21228                                                          ;               Bit 2=1 if null device
 21229                                                          ;               Bit 3=1 if clock device
 21230 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 21231 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 21232 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 21233 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 21234 00000020 ??                      .fcb_NR:	resb 1	; Next record
 21235 00000021 ????????                .fcb_RR:	resb 4	; Random record
 21236                                  .size:
 21237                                  endstruc
 21238                                  
 21239                                  ; ----------------------------------------------------------------------
 21240                                  ; Field definition for I/O buffer information
 21241                                  
 21242                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 21243                                  
 21244                                  	; 03/01/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 21245                                  
 21246                                  struc BUFFINFO
 21247 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
 21248 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
 21249 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
 21250                                  				; SFT table index (bit 7 = 1)
 21251                                  				; = FFH if buffer free
 21252 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
 21253                                  				;	= 0 if Local device buffer
 21254                                  				; Bit 6 = 1 if buffer dirty
 21255                                  				; Bit 5 = Reserved
 21256                                  				; Bit 4 = Search bit (bit 7 = 1)
 21257                                  				; Bit 3 = 1 if buffer is DATA
 21258                                  				; Bit 2 = 1 if buffer is DIR
 21259                                  				; Bit 1 = 1 if buffer is FAT
 21260                                  				; Bit 0 = Reserved
 21261 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
 21262                                  ; The next two items are often refed as a word (flags bit 7 = 0)
 21263 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
 21264 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
 21265 0000000D ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 21266                                  			   ; hw of sectors per FAT
 21267 0000000F ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
 21268 00000013 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
 21269 00000015 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
 21270 00000016 ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 21271                                  			   ; reserved word for dword boundary
 21272                                  .size:	; 20 bytes ; MSDOS 5.0 to 6.22
 21273                                  	; 24 bytes ; PCDOS 7.1 ; 03/01/2024
 21274                                  endstruc
 21275                                  
 21276                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
 21277                                  				;For buf_flags bit 7 = 1, this is the byte
 21278                                  				;offset of the start of the buffer in
 21279                                  				;the file pointed to by buf_ID. Thus
 21280                                  				;the buffer starts at location
 21281                                  				;buf_offset in the file and contains
 21282                                  				;buf_fill bytes.
 21283                                  
 21284                                  bufinsiz	equ	BUFFINFO.size	; Size of structure in bytes
 21285                                  
 21286                                  
 21287                                  buf_Free	equ	0FFh		; buf_id of free buffer
 21288                                  
 21289                                  ;Flag byte masks
 21290                                  buf_isnet	EQU	10000000B
 21291                                  buf_dirty	EQU	01000000B
 21292                                  ;***
 21293                                  buf_visit	EQU	00100000B
 21294                                  ;***
 21295                                  buf_snbuf	EQU	00010000B
 21296                                  
 21297                                  buf_isDATA	EQU	00001000B
 21298                                  buf_isDIR	EQU	00000100B
 21299                                  buf_isFAT	EQU	00000010B
 21300                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 21301                                  
 21302                                  buf_NetID	EQU	bufinsiz
 21303                                  
 21304                                  ; ----------------------------------------------------------------------
 21305                                  
 21306                                  ; ----------------------------------------------------------------------
 21307                                  ;**	DPB - Drive Parameter Block
 21308                                  
 21309                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 21310                                  
 21311                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 21312                                  ;	possibly inaccurate deductions from code study... - jgl
 21313                                  ;
 21314                                  ;	The DPB is DOS's main structure for describing block devices.
 21315                                  ;	It contains info about the "Drive" intermingled with info about
 21316                                  ;	the FAT file system which is presumably on the drive.  I don't know
 21317                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 21318                                  ;
 21319                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 21320                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 21321                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 21322                                  
 21323                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 21324                                  
 21325                                  ; 12/05/2019 - Retro DOS v4.0
 21326                                  
 21327                                  ; 01/01/2024
 21328                                  %if 0
 21329                                  
 21330                                  struc	DPB
 21331                                  .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 21332                                  .UNIT:		resb 1		; Driver unit number of DPB
 21333                                  .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 21334                                  .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 21335                                  .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 21336                                  .FIRST_FAT:	resw 1		; Starting record of FATs
 21337                                  .FAT_COUNT:	resb 1		; Number of FATs for this drive
 21338                                  .ROOT_ENTRIES:	resw 1		; Number of directory entries
 21339                                  .FIRST_SECTOR:	resw 1		; First sector of first cluster
 21340                                  .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 21341                                  ; MSDOS 3.3
 21342                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
 21343                                  ; MSDOS 6.0
 21344                                  .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 21345                                  .DIR_SECTOR:	resw 1		; Starting record of directory
 21346                                  .DRIVER_ADDR:	resd 1		; Pointer to driver
 21347                                  .MEDIA:		resb 1		; Media byte
 21348                                  .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 21349                                  				; check the first time this DPB is used
 21350                                  .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 21351                                  .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 21352                                  .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 21353                                  .size:
 21354                                  endstruc
 21355                                  
 21356                                  %else
 21357                                  
 21358                                  ; 01/01/2024 - Retro DOS v5.0 (PCDOS 7.1)
 21359                                  
 21360                                  struc	DPB
 21361 00000000 ??                      .DRIVE:		resb 1	; 0	; Logical drive # assoc with DPB (A=0,B=1,...)
 21362 00000001 ??                      .UNIT:		resb 1	; 1	; Driver unit number of DPB
 21363 00000002 ????                    .SECTOR_SIZE:	resw 1	; 2	; Size of physical sector in bytes
 21364 00000004 ??                      .CLUSTER_MASK:	resb 1	; 4	; Sectors/cluster - 1
 21365 00000005 ??                      .CLUSTER_SHIFT:	resb 1	; 5	; Log2 of sectors/cluster
 21366 00000006 ????                    .FIRST_FAT:	resw 1	; 6	; Starting record of FATs
 21367 00000008 ??                      .FAT_COUNT:	resb 1	; 8	; Number of FATs for this drive
 21368 00000009 ????                    .ROOT_ENTRIES:	resw 1	; 9	; Number of directory entries
 21369 0000000B ????                    .FIRST_SECTOR:	resw 1	; 11	; First sector of first cluster
 21370 0000000D ????                    .MAX_CLUSTER:	resw 1	; 13	; Number of clusters on drive + 1
 21371 0000000F ????                    .FAT_SIZE:	resw 1	; 15	; Number of records occupied by FAT
 21372 00000011 ????                    .DIR_SECTOR:	resw 1	; 17	; Starting record of directory
 21373 00000013 ????????                .DRIVER_ADDR:	resd 1  ; 19	; Pointer to driver
 21374 00000017 ??                      .MEDIA:		resb 1	; 23	; Media byte
 21375 00000018 ??                      .FIRST_ACCESS:	resb 1	; 24	; This is initialized to -1 to force a media
 21376                                  				; check the first time this DPB is used
 21377 00000019 ????????                .NEXT_DPB:	resd 1	; 25	; Pointer to next Drive parameter block
 21378 0000001D ????                    .NEXT_FREE:	resw 1	; 29	; Cluster # of last allocated cluster
 21379 0000001F ????                    .FREE_CNT:	resw 1	; 31	; Count of free clusters, -1 if unknown
 21380                                  ; FAT32 fs ; 01/01/2024
 21381                                  ; ref: https://en.wikibooks.org/wiki/
 21382                                  ;      First_steps_towards_system_programming_under_MS-DOS_7/Appendix
 21383                                  ;   -- A.03-1. Structure of Drive Parameters Blocks (DPB) ---
 21384 00000021 ????                    .FREE_CNT_HW:	resw 1	; 33	; High word of free cluster count
 21385 00000023 ????                    .EXT_FLAGS:	resw 1	; 35	; FAT32 extended flags (active FAT number)
 21386 00000025 ????                    .FSINFO_SECTOR:	resw 1	; 37	; (FAT32 fs) FSINFO structure sector address
 21387 00000027 ????                    .BKBOOT_SECTOR:	resw 1	; 39	; (FAT32 fs) Backup Boot Sector address
 21388 00000029 ????????                .FCLUS_FSECTOR: resd 1	; 41	; The first cluster's first sector address
 21389 0000002D ????????                .LAST_CLUSTER:	resd 1	; 45	; The last cluster number
 21390 00000031 ????????                .FAT32_SIZE:	resd 1	; 49	; Number of FAT sectors (for FAT32 fs)	 
 21391 00000035 ????????                .ROOT_CLUSTER:	resd 1	; 53	; Root directory's cluster number (FAT32 fs)
 21392                                  ; 01/01/2024 - Retro DOS v5.0
 21393 00000039 ????????                .FAT32_NXTFREE:	resd 1  ; 57	; The next free cluster (for FAT32 fs)
 21394                                  .size:		; 61 bytes ; 01/01/2024 (PCDOS 7.1)
 21395                                  endstruc
 21396                                  
 21397                                  %endif
 21398                                  
 21399                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 21400                                  
 21401                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 21402                                  
 21403                                  ; ----------------------------------------------------------------------
 21404                                  ; 26/03/2018
 21405                                  
 21406                                  ; IOCTL SUB-FUNCTIONS
 21407                                  IOCTL_GET_DEVICE_INFO	EQU	0
 21408                                  IOCTL_SET_DEVICE_INFO	EQU	1
 21409                                  IOCTL_READ_HANDLE	EQU	2
 21410                                  IOCTL_WRITE_HANDLE	EQU	3
 21411                                  IOCTL_READ_DRIVE	EQU	4
 21412                                  IOCTL_WRITE_DRIVE	EQU	5
 21413                                  IOCTL_GET_INPUT_STATUS	EQU	6
 21414                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 21415                                  IOCTL_CHANGEABLE?	EQU	8
 21416                                  IOCTL_SHARING_RETRY	EQU	11
 21417                                  GENERIC_IOCTL_HANDLE	EQU	12
 21418                                  GENERIC_IOCTL		EQU	13
 21419                                  
 21420                                  ; GENERIC IOCTL SUB-FUNCTIONS
 21421                                  RAWIO			EQU	8
 21422                                  
 21423                                  ; RAWIO SUB-FUNCTIONS
 21424                                  GET_DEVICE_PARAMETERS	EQU	60H
 21425                                  SET_DEVICE_PARAMETERS	EQU	40H
 21426                                  READ_TRACK		EQU	61H
 21427                                  WRITE_TRACK		EQU	41H
 21428                                  VERIFY_TRACK		EQU	62H
 21429                                  FORMAT_TRACK		EQU	42H
 21430                                  
 21431                                  ; DEVICETYPE VALUES
 21432                                  MAX_SECTORS_IN_TRACK	EQU	63
 21433                                  DEV_5INCH		EQU	0
 21434                                  DEV_5INCH96TPI		EQU	1
 21435                                  DEV_3INCH720KB		EQU	2
 21436                                  DEV_8INCHSS		EQU	3
 21437                                  DEV_8INCHDS		EQU	4
 21438                                  DEV_HARDDISK		EQU	5
 21439                                  DEV_OTHER		EQU	7
 21440                                  ;DEV_3INCH1440KB	EQU	7
 21441                                  DEV_3INCH2880KB		EQU	9
 21442                                  ; Retro DOS v2.0 - 26/03/2018
 21443                                  ;;DEV_TAPE		EQU	6
 21444                                  ;;DEV_ERIMO		EQU	8
 21445                                  ;DEV_3INCH2880KB	EQU	9
 21446                                  DEV_3INCH1440KB		EQU	10
 21447                                  
 21448                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 21449                                  					; CURRENTLY SUPPORT.
 21450                                  MAX_DEV_TYPE		EQU	10
 21451                                  
 21452                                  struc A_SECTORTABLE
 21453 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 21454 00000002 ????                    .ST_SECTORSIZE:		resw	1
 21455                                  .size:
 21456                                  endstruc
 21457                                  
 21458                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 21459                                  
 21460                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 21461                                  ;
 21462                                  ;	The BPB contains information about the disk structure.  It dates
 21463                                  ;	back to the earliest FAT systems and so FAT information is
 21464                                  ;	intermingled with physical driver information.
 21465                                  ;
 21466                                  ;	A boot sector contains a BPB for its device; for other disks
 21467                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 21468                                  ;	information in the DPB.
 21469                                  ;
 21470                                  ;	The BDS structure contains a BPB within it.
 21471                                  
 21472                                  ; 01/01/2024
 21473                                  %if 0
 21474                                  
 21475                                  struc A_BPB
 21476                                  .BPB_BYTESPERSECTOR:	resw	1
 21477                                  .BPB_SECTORSPERCLUSTER:	resb	1
 21478                                  .BPB_RESERVEDSECTORS:	resw	1
 21479                                  .BPB_NUMBEROFFATS:	resb	1
 21480                                  .BPB_ROOTENTRIES: 	resw	1
 21481                                  .BPB_TOTALSECTORS:	resw	1
 21482                                  .BPB_MEDIADESCRIPTOR:	resb	1
 21483                                  .BPB_SECTORSPERFAT:	resw	1
 21484                                  .BPB_SECTORSPERTRACK:	resw	1
 21485                                  .BPB_HEADS:		resw	1
 21486                                  .BPB_HIDDENSECTORS:	resw	1
 21487                                  			resw	1
 21488                                  .BPB_BIGTOTALSECTORS:	resw	1
 21489                                  			resw	1
 21490                                  			resb	6	; NOTE:  many times these
 21491                                  ;					; 	 6 bytes are omitted
 21492                                  ;					;	 when BPB manipulations
 21493                                  ;					;	 are performed!
 21494                                  .size:
 21495                                  endstruc
 21496                                  
 21497                                  %else
 21498                                  
 21499                                  ; 14/04/2024
 21500                                  ; 01/01/2024 - Retro DOS v5.0
 21501                                  
 21502                                  struc A_BPB
 21503 00000000 ????                    .BYTESPERSECTOR:    resw 1
 21504 00000002 ??                      .SECTORSPERCLUSTER: resb 1
 21505 00000003 ????                    .RESERVEDSECTORS:   resw 1
 21506 00000005 ??                      .NUMBEROFFATS:	    resb 1
 21507 00000006 ????                    .ROOTENTRIES:	    resw 1
 21508 00000008 ????                    .TOTALSECTORS:	    resw 1
 21509 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
 21510 0000000B ????                    .SECTORSPERFAT:	    resw 1
 21511 0000000D ????                    .SECTORSPERTRACK:   resw 1
 21512 0000000F ????                    .HEADS:		    resw 1
 21513 00000011 ????????                .HIDDENSECTORS:	    resd 1
 21514 00000015 ????????                .BIGTOTALSECTORS:   resd 1
 21515                                  ;............ FAT32 ......  + 28
 21516 00000019 ????????                .FATSIZE32:	    resd 1
 21517 0000001D ????                    .EXTFLAGS:	    resw 1
 21518 0000001F ????                    .FSVER:		    resw 1
 21519 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
 21520 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
 21521 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
 21522 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
 21523                                  		; 14/04/2024
 21524 00000035 ????????????            		    resb 6  ; A_BPB.size must be 59
 21525                                  .size:
 21526                                  endstruc
 21527                                  
 21528                                  %endif
 21529                                  
 21530                                  struc A_DEVICEPARAMETERS
 21531 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 21532 00000001 ??                      .DP_DEVICETYPE:		resb	1
 21533 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 21534 00000004 ????                    .DP_CYLINDERS:		resw	1
 21535 00000006 ??                      .DP_MEDIATYPE:		resb	1
 21536 00000007 <res 3Bh>               .DP_BPB:		resb	A_BPB.size
 21537 00000042 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 21538 00000044 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 21539                                  endstruc
 21540                                  
 21541                                  ; ----------------------------------------------------------------------
 21542                                  ; structure, equates for devmark for mem command.
 21543                                  
 21544                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 21545                                  
 21546                                  struc devmark
 21547 00000000 ??                       .id:	    resb 1
 21548 00000001 ????                     .seg:	    resw 1
 21549 00000003 ????                     .size:	    resw 1
 21550 00000005 ??????                   .dum:	    resb 3
 21551 00000008 ????????????????         .filename: resb 8
 21552                                  endstruc
 21553                                  
 21554                                  devmark_stk	equ	'S'
 21555                                  devmark_device	equ	'D'
 21556                                  devmark_ifs	equ	'I'
 21557                                  devmark_buf	equ	'B'
 21558                                  devmark_cds	equ	'L' ; lastdrive
 21559                                  devmark_files	equ	'F'
 21560                                  devmark_fcbs	equ	'X'
 21561                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 21562                                  devmark_ems_stub equ	'E'
 21563                                  
 21564                                  setbrkdone	equ	00000001b
 21565                                  for_devmark	equ	00000010b
 21566                                  not_for_devmark equ	11111101b
 21567                                  
 21568                                  ; ----------------------------------------------------------------------
 21569                                  ; Memory arena structure
 21570                                  
 21571                                  ; 24/03/2019 - Retro DOS v4.0 
 21572                                  ; (MSDOS 6.0, ARENA.INC)
 21573                                  
 21574                                  ;** Arena Header
 21575                                  
 21576                                  struc ARENA
 21577 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 21578 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 21579 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 21580 00000005 ??????                  .RESERVED	resb 3		; reserved
 21581 00000008 ????????????????        .NAME:		resb 8		; owner file name
 21582                                  endstruc
 21583                                  
 21584                                  ; 12/04/2019
 21585                                  
 21586                                  arena_owner_system	EQU 0	; free block indication
 21587                                  
 21588                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 21589                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 21590                                  
 21591                                  ; ----------------------------------------------------------------------
 21592                                  ; Process data block (otherwise known as program header)
 21593                                  
 21594                                  ; 23/03/2019 - Retro DOS v4.0
 21595                                  
 21596                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 21597                                  
 21598                                  FILPERPROC	EQU     20
 21599                                  
 21600                                  struc PDB	; Process_data_block
 21601 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 21602 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 21603 00000004 ??                                      resb 1
 21604 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 21605 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 21606 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 21607 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 21608 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 21609 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 21610 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 21611 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 21612 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 21613 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 21614 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 21615 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 21616 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 21617 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 21618 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 21619 00000042 <res Eh>                .PAD1:		resb 14		; 	
 21620 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 21621 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 21622 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 21623 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 21624 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 21625 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 21626                                  ;.size:
 21627                                  endstruc
 21628                                  
 21629                                  ; ----------------------------------------------------------------------
 21630                                  ; <system call definitions>
 21631                                  
 21632                                  ; 23/03/2019 - Retro DOS v4.0
 21633                                  
 21634                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 21635                                  
 21636                                  ABORT                           EQU 0   ;  0      0
 21637                                  STD_CON_INPUT                   EQU 1   ;  1      1
 21638                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 21639                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 21640                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 21641                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 21642                                  RAW_CON_IO                      EQU 6   ;  6      6
 21643                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 21644                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 21645                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 21646                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 21647                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 21648                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 21649                                  DISK_RESET                      EQU 13  ; 13      D
 21650                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 21651                                  FCB_OPEN                        EQU 15  ; 15      F
 21652                                  FCB_CLOSE                       EQU 16  ; 16     10
 21653                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 21654                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 21655                                  FCB_DELETE                      EQU 19  ; 19     13
 21656                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 21657                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 21658                                  FCB_CREATE                      EQU 22  ; 22     16
 21659                                  FCB_RENAME                      EQU 23  ; 23     17
 21660                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 21661                                  SET_DMA                         EQU 26  ; 26     1A
 21662                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 21663                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 21664                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 21665                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 21666                                  GET_FCB_POSITION                EQU 36  ; 36     24
 21667                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 21668                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 21669                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 21670                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 21671                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 21672                                  GET_DATE                        EQU 42  ; 42     2A
 21673                                  SET_DATE                        EQU 43  ; 43     2B
 21674                                  GET_TIME                        EQU 44  ; 44     2C
 21675                                  SET_TIME                        EQU 45  ; 45     2D
 21676                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 21677                                  ; Extended functionality group
 21678                                  GET_DMA                         EQU 47  ; 47     2F
 21679                                  GET_VERSION                     EQU 48  ; 48     30
 21680                                  KEEP_PROCESS                    EQU 49  ; 49     31
 21681                                  GET_DPB                         EQU 50  ; 50     32
 21682                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 21683                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 21684                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 21685                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 21686                                  CHAR_OPER                       EQU 55  ; 55     37
 21687                                  INTERNATIONAL                   EQU 56  ; 56     38
 21688                                  ;   Directory Group
 21689                                  MKDIR                           EQU 57  ; 57     39
 21690                                  RMDIR                           EQU 58  ; 58     3A
 21691                                  CHDIR                           EQU 59  ; 59     3B
 21692                                  ;   File Group
 21693                                  CREAT                           EQU 60  ; 60     3C
 21694                                  OPEN                            EQU 61  ; 61     3D
 21695                                  CLOSE                           EQU 62  ; 62     3E
 21696                                  READ                            EQU 63  ; 63     3F
 21697                                  WRITE                           EQU 64  ; 64     40
 21698                                  UNLINK                          EQU 65  ; 65     41
 21699                                  LSEEK                           EQU 66  ; 66     42
 21700                                  CHMOD                           EQU 67  ; 67     43
 21701                                  IOCTL                           EQU 68  ; 68     44
 21702                                  XDUP                            EQU 69  ; 69     45
 21703                                  XDUP2                           EQU 70  ; 70     46
 21704                                  CURRENT_DIR                     EQU 71  ; 71     47
 21705                                  ;    Memory Group
 21706                                  ALLOC                           EQU 72  ; 72     48
 21707                                  DEALLOC                         EQU 73  ; 73     49
 21708                                  SETBLOCK                        EQU 74  ; 74     4A
 21709                                  ;    Process Group
 21710                                  EXEC                            EQU 75  ; 75     4B
 21711                                  EXIT                            EQU 76  ; 76     4C
 21712                                  WAITPROCESS			EQU 77  ; 77     4D
 21713                                  FIND_FIRST                      EQU 78  ; 78     4E
 21714                                  ;   Special Group
 21715                                  FIND_NEXT                       EQU 79  ; 79     4F
 21716                                  ; SPECIAL SYSTEM GROUP
 21717                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 21718                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 21719                                  GET_IN_VARS                     EQU 82  ; 82     52
 21720                                  SETDPB                          EQU 83  ; 83     53
 21721                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 21722                                  DUP_PDB                         EQU 85  ; 85     55
 21723                                  RENAME                          EQU 86  ; 86     56
 21724                                  FILE_TIMES                      EQU 87  ; 87     57
 21725                                  ;
 21726                                  ALLOCOPER			EQU 88	; 88     58	
 21727                                  ; Network extention system calls
 21728                                  GetExtendedError		EQU 89	; 89	 59
 21729                                  CreateTempFile			EQU 90	; 90	 5A
 21730                                  CreateNewFile			EQU 91	; 91	 5B
 21731                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 21732                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 21733                                  					;	    CloseByName, CloseUser,
 21734                                  					;	    CloseUserProcess,
 21735                                  					;	    GetOpenFileList
 21736                                  UserOper			EQU 94	; 94	 5E Get and Set
 21737                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 21738                                  xNameTrans			EQU 96	; 96	 60
 21739                                  PathParse			EQU 97	; 97	 61
 21740                                  GetCurrentPSP			EQU 98	; 98	 62
 21741                                  Hongeul 			EQU 99	; 99	 63
 21742                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 21743                                  Set_Printer_Flag		EQU 100 ; 100	 64
 21744                                  GetExtCntry			EQU 101 ; 101	 65
 21745                                  GetSetCdPg			EQU 102 ; 102	 66
 21746                                  ExtHandle			EQU 103 ; 103	 67
 21747                                  Commit				EQU 104 ; 104	 68
 21748                                  GetSetMediaID			EQU 105 ; 105	 69
 21749                                  IFS_IOCTL			EQU 107 ; 107	 6B
 21750                                  ExtOpen 			EQU 108 ; 108	 6C
 21751                                  ;
 21752                                  ;ifdef ROMEXEC
 21753                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 21754                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 21755                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 21756                                  ;endif
 21757                                  ;
 21758                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 21759                                  OEM_C1				EQU 249 ; 249	 F9
 21760                                  OEM_C2				EQU 250 ; 250	 FA
 21761                                  OEM_C3				EQU 251 ; 251	 FB
 21762                                  OEM_C4				EQU 252 ; 252	 FC
 21763                                  OEM_C5				EQU 253 ; 253	 FD
 21764                                  OEM_C6				EQU 254 ; 254	 FE
 21765                                  OEM_C7				EQU 255 ; 255	 FF
 21766                                  
 21767                                  ; ----------------------------------------------------------------------
 21768                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 21769                                  ; ----------------------------------------------------------------------
 21770                                  
 21771                                  ;;	IF	STACKSW
 21772                                  
 21773                                  ;;
 21774                                  ;; Internal Stack Parameters
 21775                                  ;EntrySize		equ	8
 21776                                  ;
 21777                                  ;MinCount		equ	8
 21778                                  ;DefaultCount		equ	9
 21779                                  ;MaxCount		equ	64
 21780                                  ;
 21781                                  ;MinSize 		equ	32
 21782                                  ;DefaultSize		equ	128
 21783                                  ;MaxSize 		equ	512
 21784                                  
 21785                                  ;;	ENDIF
 21786                                  
 21787                                  ; ----------------------------------------------------------------------
 21788                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 21789                                  ; ----------------------------------------------------------------------
 21790                                  					  ;;Rev 3.30 Modification
 21791                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 21792                                  									  
 21793                                  ;*******************************					  
 21794                                  ;System Service call ( Int 15h )					  
 21795                                  ;*******************************					  
 21796                                  ;Function AH = 0C0h, Return system configuration			  
 21797                                  ;For PC and PCJR on return:						  
 21798                                  ;	(AH)	= 80h							  
 21799                                  ;	(CY)	= 1							  
 21800                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 21801                                  ;	(AH)	= 86h							  
 21802                                  ;	(CY)	= 1							  
 21803                                  ;For all others:							  
 21804                                  ;	(AH)	= 0							  
 21805                                  ;	(CY)	= 0							  
 21806                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 21807                                  ; System descriptor :							  
 21808                                  ;	DW	xxxx		length of descriptor in bytes,		  
 21809                                  ;				minimum length = 8			  
 21810                                  ;	DB	xx		model byte				  
 21811                                  ;				0FFh	= PC				  
 21812                                  ;				0FEh	= PC/XT, Portable		  
 21813                                  ;				0FDh	= PC/JR 			  
 21814                                  ;				0FCh	= PC/AT				  
 21815                                  ;				0F9h	= Convertable			  
 21816                                  ;				0F8h	= Model 80			  
 21817                                  ;				0E0 thru 0EFh = reserved		  
 21818                                  ;									  
 21819                                  ;	DB	xx		secondary model byte			  
 21820                                  ;				000h	= PC1				  
 21821                                  ;				000h	= PC/XT, Portable		  
 21822                                  ;				000h	= PC/JR 			  
 21823                                  ;				000h	= PC/AT 			  
 21824                                  ;				001h	= PC/AT Model 339		  
 21825                                  ;				003h	= PC/RT				  
 21826                                  ;				000h	= Convertable			  
 21827                                  ;									  
 21828                                  ;	DB	xx		bios revision level			  
 21829                                  ;				00 for first release, subsequent release  
 21830                                  ;				of code with same model byte and	  
 21831                                  ;				secondary model byte require revison level
 21832                                  ;				to increase by one.			  
 21833                                  ;									  
 21834                                  ;	DB	xx		feature information byte 1		  
 21835                                  ;				X0000000 = 1, bios use DMA channel 3	  
 21836                                  ;					 = 0, DMA channel 3 not used	  
 21837                                  ;									  
 21838                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 21839                                  ;					 = 0, 2nd Interrupt chip not present
 21840                                  ;									  
 21841                                  ;				00X00000 = 1, Real Time Clock present	  
 21842                                  ;					 = 0, Real Time Clock not present 
 21843                                  ;									  
 21844                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 21845                                  ;						called in keyboard interrupt
 21846                                  ;						(Int 09h).		  
 21847                                  ;					 = 0, Keyboard escape sequence not
 21848                                  ;						called. 		  
 21849                                  ;				0000XXXX reserved			  
 21850                                  ;									  
 21851                                  ;	DB	xx		feature information byte 2 - reserved	  
 21852                                  ;									  
 21853                                  ;	DB	xx		feature information byte 2 - reserved	  
 21854                                  ;									  
 21855                                  ;	DB	xx		feature information byte 2 - reserved	  
 21856                                  ;									  
 21857                                  ;	DB	xx		feature information byte 2 - reserved	  
 21858                                  ;									  
 21859                                  
 21860                                  ; 22/03/2019
 21861                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR
 21862 00000000 ????                    .bios_sd_leng:		resw 1
 21863 00000002 ??                      .bios_sd_modelbyte:	resb 1
 21864                                  .bios_sd_scnd_modelbyte: 
 21865 00000003 ??                      			resb 1
 21866 00000004 ??                      			resb 1
 21867 00000005 ??                      .bios_sd_featurebyte1:	resb 1
 21868 00000006 ????????                			resb 4
 21869                                  endstruc
 21870                                  
 21871                                  ;FeatureByte1	bit map equates
 21872                                  DMAchannel3		equ 10000000b
 21873                                  ScndIntController	equ 01000000b
 21874                                  RealTimeClock		equ 00100000b
 21875                                  KeyEscapeSeq		equ 00010000b
 21876                                  					;;End of Modification
 21877                                  
 21878                                  ; ----------------------------------------------------------------------
 21879                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 21880                                  ; ----------------------------------------------------------------------
 21881                                  ; 22/03/2019 - Retro DOS v4.0
 21882                                  
 21883                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 21884                                  
 21885                                  struc SysInitVars
 21886                                  ; MSDOS 3.3
 21887 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 21888 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 21889 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 21890 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 21891 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 21892 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 21893 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 21894 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 21895 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 21896 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 21897 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 21898 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 21899                                  ; MSDOS 6.0
 21900 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 21901 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 21902 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 21903 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 21904                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 21905 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 21906 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 21907 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 21908 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 21909 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 21910 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 21911 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 21912                                  .size:
 21913                                  endstruc
 21914                                  
 21915                                  ;This is added for more information exchage between DOS, BIOS.
 21916                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 21917                                  
 21918                                  ; 22/03/2019
 21919                                  struc SysInitVars_Ext
 21920 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 21921 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 21922                                  endstruc
 21923                                  
 21924                                  ; 09/06/2018
 21925                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 21926                                  SYSI_DPB    equ	0
 21927                                  SYSI_SFT    equ 4
 21928                                  SYSI_CLOCK  equ 8
 21929                                  SYSI_CON    equ 12
 21930                                  SYSI_MAXSEC equ 16
 21931                                  SYSI_BUF    equ 18
 21932                                  SYSI_CDS    equ 22
 21933                                  SYSI_FCB    equ 26
 21934                                  SYSI_KEEP   equ 30
 21935                                  SYSI_NUMIO  equ	32
 21936                                  SYSI_NCDS   equ	33
 21937                                  SYSI_DEV    equ 34
 21938                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 21939                                  SYSI_ATTR	  equ 38
 21940                                  SYSI_STRAT	  equ 40
 21941                                  SYSI_INTER	  equ 42
 21942                                  SYSI_NAME	  equ 44
 21943                                  SYSI_SPLICE	  equ 52
 21944                                  SYSI_IBMDOS_SIZE  equ 53
 21945                                  SYSI_IFS_DOSCALL@ equ 55
 21946                                  SYSI_IFS	  equ 59
 21947                                  SYSI_BUFFERS	  equ 63
 21948                                  SYSI_BOOT_DRIVE   equ 67
 21949                                  SYSI_DWMOVE	  equ 68
 21950                                  SYSI_EXT_MEM	  equ 69
 21951                                  
 21952                                  ;The SYSI_BUF of SysInitVars points to the following structure
 21953                                  
 21954                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 21955                                  
 21956                                  struc BUFFINF 	; BUFFINFO
 21957 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 21958 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 21959 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 21960 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 21961                                  
 21962 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 21963                                  				; are in HMA
 21964 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 21965                                  				;  used to read/write on disks
 21966 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 21967 00000015 ????                    .UU_EMS_NPA640:		resw 1
 21968 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 21969 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 21970 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 21971 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 21972 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 21973 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 21974 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 21975                                  .size:
 21976                                  endstruc
 21977                                  
 21978                                  ; ----------------------------------------------------------------------
 21979                                  ; CURDIR.INC (MSDOS 6.0 - 1991)
 21980                                  ; ----------------------------------------------------------------------
 21981                                  ; 22/03/2019 - Retro DOS v4.0
 21982                                  
 21983                                  ;**	CDS - Current Directory Structure
 21984                                  ;
 21985                                  ; CDS items are used bu the internal routines to store cluster numbers and
 21986                                  ; network identifiers for each logical name.  The ID field is used dually,
 21987                                  ; both as net ID and for a cluster number for local devices. In the case
 21988                                  ; of local devices, the cluster number will be -1 if there is a potential
 21989                                  ; of the disk being changed or if the path must be recracked.
 21990                                  ;
 21991                                  ;	Some pathnames have special preambles, such as
 21992                                  ;
 21993                                  ;		\\machine\sharename\...
 21994                                  ;	For these pathnames we can't allow ".." processing to back us
 21995                                  ;	up into the special front part of the name.  The CURDIR_END field
 21996                                  ;	holds the address of the seperator character which marks
 21997                                  ;	the split between the special preamble and the regular
 21998                                  ;	path list; ".." processing isn't allowed to back us up past
 21999                                  ;	(i.e., before) CURDIR_END
 22000                                  ;	For the root, it points at the leading /. For net
 22001                                  ;	assignments it points at the end (nul) of the initial assignment:
 22002                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 22003                                  ;	  ^		 ^		     ^
 22004                                  
 22005                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 22006                                  TEMPLEN 	EQU	DIRSTRLEN*2
 22007                                  
 22008                                  struc 		curdir_list
 22009                                  ; MSDOS 3.3
 22010 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 22011 00000043 ????                    .cdir_flags	resw	1		; various flags
 22012 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 22013 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 22014 0000004D ????                    .cdir_usr_word	resw	1
 22015 0000004F ????                    .cdir_end	resw	1		; end of assignment
 22016                                  ; MSDOS 6.0
 22017 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 22018 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 22019 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 22020                                  .size:
 22021                                  endstruc
 22022                                  
 22023                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 22024                                  						; ASM87 which doesn't allow
 22025                                  						; Size directive as a macro
 22026                                  						; argument
 22027                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 22028                                  
 22029                                  ;**	Flag values for CURDIR_FLAGS
 22030                                  
 22031                                  ;Flag word masks
 22032                                  curdir_isnet	EQU	1000000000000000B
 22033                                  curdir_isifs	EQU	1000000000000000B
 22034                                  curdir_inuse	EQU	0100000000000000B
 22035                                  curdir_splice	EQU	0010000000000000B
 22036                                  curdir_local	EQU	0001000000000000B
 22037                                  
 22038                                  ; ----------------------------------------------------------------------
 22039                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 22040                                  ; ----------------------------------------------------------------------
 22041                                  ; 25/03/2019 - Retro DOS v4.0
 22042                                  
 22043                                  ; 09/04/2024 - Retro DOS v4.2 (BugFix)
 22044                                  ; 09/04/2024 - Retro DOS v5.0
 22045                                  
 22046                                  ; system file table
 22047                                  
 22048                                  ;**	System File Table SuperStructure
 22049                                  ;
 22050                                  ;	The system file table entries are allocated in contiguous groups.
 22051                                  ;	There may be more than one such groups; the SF "superstructure"
 22052                                  ;	tracks the groups.
 22053                                  
 22054                                  struc	SF
 22055 00000000 ????????                .SFLink:	resd	1
 22056 00000004 ????                    .SFCount:	resw	1		; number of entries
 22057 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 22058                                  .size:
 22059                                  endstruc
 22060                                  
 22061                                  ;**	System file table entry
 22062                                  ;
 22063                                  ;	These are the structures which are at SFTABLE in the SF structure.
 22064                                  
 22065                                  struc	SF_ENTRY
 22066 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 22067                                  					;   if FCB then ref count
 22068 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 22069 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 22070 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 22071                                  					; Bit 15 = 1 if remote file
 22072                                  					;	 = 0 if local file or device
 22073                                  					; Bit 14 = 1 if date/time is not to be
 22074                                  					;   set from clock at CLOSE.  Set by
 22075                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 22076                                  					;   other reseters of the dirty bit
 22077                                  					;   (WRITE)
 22078                                  					; Bit 13 = Pipe bit (reserved)
 22079                                  					;
 22080                                  					; Bits 0-7 (old FCB_devid bits)
 22081                                  					; If remote file or local file, bit
 22082                                  					; 6=0 if dirty Device ID number, bits
 22083                                  					; 0-5 if local file.
 22084                                  					; bit 7=0 for local file, bit 7
 22085                                  					;      =1 for local I/O device
 22086                                  					; If local I/O device, bit 6=0 if EOF (input)
 22087                                  					;		Bit 5=1 if Raw mode
 22088                                  					;		Bit 0=1 if console input device
 22089                                  					;		Bit 1=1 if console output device
 22090                                  					;		Bit 2=1 if null device
 22091                                  					;		Bit 3=1 if clock device
 22092 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 22093                                  					; to device header if local device,
 22094                                  					; points to net device header if
 22095                                  					; remote
 22096 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 22097                                  ;.sf_lstclus:	resw	1 ; *	
 22098 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 22099 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 22100 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 22101 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 22102                                  ;
 22103                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 22104                                  ; ID
 22105                                  ;
 22106 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 22107 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 22108 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 22109                                  ;
 22110                                  ; End of 7 bytes of file-system specific info.
 22111                                  ;
 22112 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 22113                                  					; directory entry.  This is used by
 22114                                  					; close to detect file deleted and
 22115                                  					; disk changed errors.
 22116                                  ; SHARING INFO
 22117 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 22118 0000002F ????                    .sf_UID:	resw	1
 22119 00000031 ????                    .sf_PID:	resw	1
 22120 00000033 ????                    .sf_MFT:	resw	1
 22121 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 22122 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 22123                                  .size:
 22124                                  endstruc
 22125                                  
 22126                                  ; ----------------------------------------------------------------------
 22127                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987)
 22128                                  ; ----------------------------------------------------------------------
 22129                                  ; 11/06/2018 - Retro DOS v3.0
 22130                                  
 22131                                  ;Equates for COUNTRY INFORMATION.
 22132                                  SetCountryInfo		EQU	1	;country info
 22133                                  SetUcase		EQU	2	;uppercase table
 22134                                  SetLcase		EQU	3	;lowercase table (Reserved)
 22135                                  SetUcaseFile		EQU	4	;uppercase file spec table
 22136                                  SetFileList		EQU	5	;valid file character list
 22137                                  SetCollate		EQU	6	;collating sequence
 22138                                  SetDBCS 		EQU	7	;double byte character set
 22139                                  SetALL			EQU	-1	;all the entries
 22140                                  
 22141                                  ;DOS country and code page information table structure.
 22142                                  ;Internally, IBMDOS gives a pointer to this table.
 22143                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 22144                                  ;this structure.
 22145                                  
 22146                                  struc country_cdpg_info ; DOS_country_cdpg_info
 22147 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 22148 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 22149 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 22150 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 22151 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 22152 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 22153                                  
 22154 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 22155 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 22156                                  
 22157 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 22158 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 22159                                  
 22160 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 22161 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 22162                                  
 22163 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 22164 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 22165 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 22166 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 22167 00000067 ????                    .ccDFormat:		resw	1	;date format
 22168 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 22169                                  					;5 byte of (currency symbol+0)
 22170 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 22171 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 22172 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 22173 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 22174 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 22175 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 22176 00000078 ??                      .ccTFormat:		resb	1	;time format
 22177 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 22178 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 22179 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 22180                                  .size:
 22181                                  endstruc
 22182                                  
 22183                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 22184                                  
 22185                                  ; ======================================================================
 22186                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 22187                                  ; ======================================================================
 22188                                  ; 21/03/2019 - Retro DOS v4.0
 22189                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 22190                                  
 22191                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 22192                                  ; 21/10/2022
 22193                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 22194                                  ; 22/10/2022
 22195                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 22196                                  ; 09/12/2022
 22197                                  DOSBIOCODESEG equ IOSYSCODESEG
 22198                                  
 22199                                  ; Note: These offset addresses must be chanqed when the code 
 22200                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 22201                                  
 22202                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 22203                                  
 22204                                  ; 09/12/2022
 22205                                  %if 0
 22206                                  
 22207                                  ; 13/05/2019
 22208                                  
 22209                                  ;IsWin386         equ 08CFh
 22210                                  ;V86_Crit_SetFocus equ 08D0h
 22211                                  ; 21/10/2022
 22212                                  IsWin386          equ 08D0h
 22213                                  V86_Crit_SetFocus equ 08D1h 
 22214                                  
 22215                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 22216                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 22217                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 22218                                  
 22219                                  ;SysinitPresent	  equ 08FCh
 22220                                  ; 21/10/2022
 22221                                  SysinitPresent	  equ 08FDh
 22222                                  
 22223                                  inHMA		  equ 000Dh
 22224                                  xms		  equ 000Eh
 22225                                  ;FreeHMAPtr	  equ 08F6h
 22226                                  ;multrk_flag	  equ 0533h
 22227                                  ;ec35_flag	  equ 0535h
 22228                                  ;EOT		  equ 012Eh
 22229                                  ; 21/10/2022
 22230                                  FreeHMAPtr	  equ 08F7h
 22231                                  multrk_flag	  equ 052Fh
 22232                                  ec35_flag	  equ 0531h
 22233                                  EOT		  equ 012Ch
 22234                                  
 22235                                  ;NextStack	  equ 08BFh
 22236                                  ;IT_StackLoc	  equ 08C5h
 22237                                  ;IT_StackSize	  equ 08C9h
 22238                                  ; 21/10/2022
 22239                                  NextStack	  equ 08C0h
 22240                                  IT_StackLoc	  equ 08C6h
 22241                                  IT_StackSize	  equ 08CAh
 22242                                  
 22243                                  ;MoveDOSIntoHMA	  equ 08F8h
 22244                                  ; 21/10/2022
 22245                                  MoveDOSIntoHMA	  equ 08F9h
 22246                                  
 22247                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 22248                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 22249                                  ; 21/10/2022
 22250                                  INT19SEM equ 0640h ; (iosys5.txt)
 22251                                  I19_LST  equ 0641h ; (iosys5.txt)
 22252                                  
 22253                                  %endif
 22254                                  
 22255                                  ; 09/12/2022
 22256                                  seg_reinit equ _seg_reinit
 22257                                  ec35_flag  equ ec35flag
 22258                                  INT19SEM   equ int19sem
 22259                                  I19_LST    equ i19_lst
 22260                                  
 22261                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 22262                                  INT19OLD08 equ I19_LST+6
 22263                                  INT19OLD09 equ I19_LST+11
 22264                                  INT19OLD0A equ I19_LST+16
 22265                                  INT19OLD0B equ I19_LST+21
 22266                                  INT19OLD0C equ I19_LST+26
 22267                                  INT19OLD0D equ I19_LST+31
 22268                                  INT19OLD0E equ I19_LST+36
 22269                                  INT19OLD70 equ I19_LST+41
 22270                                  INT19OLD72 equ I19_LST+46
 22271                                  INT19OLD73 equ I19_LST+51
 22272                                  INT19OLD74 equ I19_LST+56
 22273                                  INT19OLD76 equ I19_LST+61
 22274                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 22275                                  
 22276                                  ; 09/12/2022
 22277                                  %if 0
 22278                                  
 22279                                  ;keyrd_func	equ 04E9h
 22280                                  ;keysts_func	equ 04EAh
 22281                                  ;t_switch	equ 04F6h
 22282                                  ; 21/10/2022
 22283                                  keyrd_func	equ 04E5h
 22284                                  keysts_func	equ 04E6h
 22285                                  t_switch	equ 04F2h
 22286                                  
 22287                                  ; 22/10/2022
 22288                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 22289                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 22290                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 22291                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 22292                                  
 22293                                  %endif
 22294                                  
 22295                                  ; 09/12/2022
 22296                                  BCODESTART	equ BIOSDATAWORD
 22297                                  RE_INIT		equ re_init
 22298                                  
 22299                                  ; ----------------------------------------------------------------------
 22300                                  ; CONFIG.INC (MSDOS 6.0 - 1991)
 22301                                  ; ----------------------------------------------------------------------
 22302                                  ; 15/04/2019 - Retro DOS v4.0
 22303                                  
 22304                                  CONFIG_BEGIN        equ  '['
 22305                                  CONFIG_BREAK        equ  'C'
 22306                                  CONFIG_BUFFERS      equ  'B'
 22307                                  CONFIG_COMMENT      equ  'Y'
 22308                                  CONFIG_COUNTRY      equ  'Q'
 22309                                  CONFIG_DEVICE       equ  'D'
 22310                                  CONFIG_DEVICEHIGH   equ  'U'
 22311                                  CONFIG_DOS          equ  'H'
 22312                                  CONFIG_DRIVPARM     equ  'P'
 22313                                  CONFIG_FCBS         equ  'X'
 22314                                  CONFIG_FILES        equ  'F'
 22315                                  CONFIG_INCLUDE      equ  'J'
 22316                                  CONFIG_INSTALL      equ  'I'
 22317                                  CONFIG_INSTALLHIGH  equ  'W'
 22318                                  CONFIG_LASTDRIVE    equ  'L'
 22319                                  CONFIG_MENUCOLOR    equ  'R'
 22320                                  CONFIG_MENUDEFAULT  equ  'A'
 22321                                  CONFIG_MENUITEM     equ  'E'
 22322                                  CONFIG_MULTITRACK   equ  'M'
 22323                                  CONFIG_NUMLOCK      equ  'N'
 22324                                  CONFIG_REM          equ  '0'
 22325                                  CONFIG_SEMICOLON    equ  ';'
 22326                                  CONFIG_SET          equ  'V'
 22327                                  CONFIG_SHELL        equ  'S'
 22328                                  CONFIG_STACKS       equ  'K'
 22329                                  CONFIG_SUBMENU      equ  'O'
 22330                                  CONFIG_SWITCHES     equ  '1'
 22331                                  
 22332                                  CONFIG_UNKNOWN      equ  'Z'
 22333                                  
 22334                                  ; 13/05/2024 - Retro DOS v5.0 (PCDOS 71 IBMBIO.COM)
 22335                                  CONFIG_DOSDATA      equ  'T'
 22336                                  
 22337                                  CONFIG_OPTION_QUERY equ 80h
 22338                                  
 22339                                  ; ----------------------------------------------------------------------
 22340                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991)
 22341                                  ; ----------------------------------------------------------------------
 22342                                  ; 21/03/2019 - Retro DOS v4.0
 22343                                  
 22344                                  true	equ	0FFFFh
 22345                                  false	equ	0
 22346                                  cr	equ	13
 22347                                  lf	equ	10
 22348                                  tab	equ	9
 22349                                  
 22350                                  multMULT	   equ	4Ah
 22351                                  multMULTGETHMAPTR  equ	1
 22352                                  multMULTALLOCHMA   equ	2
 22353                                  
 22354                                  ;NOEXEC    equ	FALSE
 22355                                  
 22356                                  stacksw    equ	true	;include switchable hardware stacks
 22357                                  mycds_size equ	88	;size of curdir_list. if it is not
 22358                                  			;the same, then will generate compile error.
 22359                                  
 22360                                  entrysize   equ     8
 22361                                  
 22362                                  mincount    equ     8
 22363                                  defaultcount equ    9
 22364                                  maxcount    equ     64
 22365                                  
 22366                                  minsize     equ     32
 22367                                  defaultsize equ     128
 22368                                  maxsize     equ     512
 22369                                  
 22370                                  ;%define allocbyte  byte [es:bp+0]
 22371                                  ;%define intlevel   byte [es:bp+1]
 22372                                  ;%define savedsp    word [es:bp+2]
 22373                                  ;%define savedss    word [es:bp+4]
 22374                                  ;%define newsp	    word [es:bp+6]
 22375                                  
 22376                                  allocbyte   equ     0
 22377                                  intlevel    equ     1
 22378                                  savedsp     equ     2
 22379                                  savedss     equ     4
 22380                                  newsp       equ     6
 22381                                  
 22382                                  free	    equ     0
 22383                                  allocated   equ     1
 22384                                  overflowed  equ     2
 22385                                  clobbered   equ     3
 22386                                  
 22387                                  ;---------------------------------------
 22388                                  ; external variable defined in ibmbio module for multi-track
 22389                                  
 22390                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 22391                                  			  ; it on after handling config.sys file as a
 22392                                  			  ; default value,if multrk_flag = multrk_off1.
 22393                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 22394                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 22395                                  
 22396                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 22397                                  
 22398                                  SYSINIT$:
 22399                                  	;IF	STACKSW 
 22400                                  	; include MSSTACK.INC	;Main stack program and data definitions
 22401                                  	; include STKMES.INC	;Fatal stack error message
 22402                                  	;   public Endstackcode
 22403                                  ;Endstackcode	label byte
 22404                                  	;ENDIF
 22405                                  
 22406                                  ; 05/07/2018
 22407                                  ; ----------------------------------------------------------------------
 22408                                  ; 04/06/2018 - Retro DOS v3.0
 22409                                  
 22410                                  ; ----------------------------------------------------------------------
 22411                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 22412                                  ; ----------------------------------------------------------------------
 22413                                  
 22414                                  ;	MSStack.inc
 22415                                  ;
 22416                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 22417                                  ;	should follow the standard Interrupt Sharing Scheme which has
 22418                                  ;	a standard header structure.
 22419                                  ;	Fyi, the following shows the relations between
 22420                                  ;	the interrupt vector and interrupt level.
 22421                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 22422                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 22423                                  ;	MSSTACK module modifies the following interrupt vectors
 22424                                  ;	to meet the standard Interrupt Sharing standard;
 22425                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 22426                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 22427                                  ;	should be initialized to indicat whether this interrupt handler is
 22428                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 22429                                  ;	program header is initialized in STKINIT.INC module.
 22430                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 22431                                  ;
 22432                                  
 22433                                  ;  User specifies the number of stack elements - default = 9
 22434                                  ;						 minimum = 8
 22435                                  ;						 maximum = 64
 22436                                  ;
 22437                                  ;  Intercepts Asynchronous Hardware Interrupts only
 22438                                  ;
 22439                                  ;  Picks a stack from pool of stacks and switches to it
 22440                                  ;
 22441                                  ;  Calls the previously saved interrupt vector after pushing flags
 22442                                  ;
 22443                                  ;  On return, returns the stack to the stack pool
 22444                                  ;
 22445                                  
 22446                                  ; This is a modification of STACKS:
 22447                                  ; 1. To fix a bug which was causing the program to take up too much space.
 22448                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 22449                                  ;    . Clobbers the stack that got too big instead of innocent stack
 22450                                  ;    . Allows system to work if the only stack that got too big was the most
 22451                                  ;      deeply nested one
 22452                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 22453                                  ; 4. Does not intercept any interrupts on a PCjr.
 22454                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 22455                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 22456                                  
 22457                                  		;EVEN
 22458                                  ;align 2
 22459                                  		; 21/10/2022
 22460                                  
 22461 00000000 0000                    		dw	0	; spare field but leave these in order
 22462 00000002 0000                    stackcount:	dw	0
 22463 00000004 0000                    stackat: 	dw	0
 22464 00000006 0000                    stacksize:	dw	0
 22465 00000008 0000                    stacks:		dw	0
 22466 0000000A 0000                    		dw	0
 22467                                  
 22468 0000000C [0800]                  firstentry:	dw	stacks
 22469 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 22470 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 22471                                  
 22472                                  ;***********************************************************************
 22473                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 22474                                  
 22475                                  ; ----------------------------------------------------------------------
 22476                                  
 22477 00000012 00000000                old02:	dd	0
 22478                                  
 22479                                  int02:
 22480                                  
 22481                                  ; *********************************************************************
 22482                                  ;
 22483                                  ; this is special support for the pc convertible / nmi handler
 22484                                  ;
 22485                                  ;	on the pc convertible, there is a situation where an nmi can be 
 22486                                  ;	caused by using the "out" instructions to certain ports. when this
 22487                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 22488                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 22489                                  ;	includes other type of interrupts (hardware and software), and
 22490                                  ;	also includes other type of nmi's. when any nmi has occured,
 22491                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 22492                                  ;	the software takes specific steps to allow further interrupting.
 22493                                  ;
 22494                                  ;	for pc convertible, the situation where the nmi is generated by the
 22495                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 22496                                  ;	otherwords, it is actually a "restartable exception". in this
 22497                                  ;	case, the software handler must be able to get to the stack in
 22498                                  ;	order to figure out what instruction caused the problem, where
 22499                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 22500                                  ;	we will not switch stacks in this situation. this situation is
 22501                                  ;	detected by interrogating port 62h, and checking for a bit value
 22502                                  ;	of 80h. if set, *****do not switch stacks*****.
 22503                                  ;
 22504                                  ; *********************************************************************
 22505                                  
 22506 00000016 50                      	push	ax
 22507 00000017 06                      	push	es
 22508 00000018 B800F0                  	mov	ax,0F000h
 22509 0000001B 8EC0                    	mov	es,ax
 22510                                  	; 02/11/2022
 22511 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 22512 00000023 07                      	pop	es
 22513 00000024 750C                    	jne	short normal02
 22514                                  
 22515 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 22516                                  				; 0-3: values of DIP switches
 22517                                  				; 5: 1=Timer 2 channel out
 22518                                  				; 6: 1=I/O channel check
 22519                                  				; 7: 1=RAM parity check error occurred.
 22520 00000028 A880                    	test	al,80h
 22521 0000002A 7406                    	jz	short normal02
 22522                                  special02:
 22523 0000002C 58                      	pop	ax
 22524 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 22525                                  normal02:
 22526 00000032 58                      	pop	ax
 22527 00000033 E81101                  	call	do_int_stacks
 22528 00000036 [1200]                  	dw	old02
 22529                                  
 22530                                  ; ----------------------------------------------------------------------
 22531                                  
 22532 00000038 00000000                old08:	dd	0
 22533                                  
 22534                                  int08:
 22535 0000003C E80801                  	call	do_int_stacks
 22536 0000003F [3800]                  	dw	old08
 22537                                  
 22538                                  ; ----------------------------------------------------------------------
 22539                                  
 22540 00000041 00000000                old09:	dd	0
 22541                                  
 22542                                  int09:
 22543                                  
 22544                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 22545                                  ; as its first instruction for compatibility reasons
 22546                                  
 22547 00000045 EB02                    	jmp	short keyboard_lbl
 22548 00000047 90                      	nop
 22549 00000048 00                      	db	0
 22550                                  
 22551                                  keyboard_lbl:
 22552 00000049 E8FB00                  	call	do_int_stacks
 22553 0000004C [4100]                  	dw	old09
 22554                                  
 22555                                  ; ----------------------------------------------------------------------
 22556                                  
 22557 0000004E 00000000                old70:	dd	0
 22558                                  
 22559                                  int70:
 22560 00000052 E8F200                  	call	do_int_stacks
 22561 00000055 [4E00]                  	dw	old70
 22562                                  
 22563                                  ; ----------------------------------------------------------------------
 22564                                  
 22565                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 22566                                  ;public	int&a
 22567                                  ;public	old&a
 22568                                  ;public	firstflag&a
 22569                                  ;int&a	proc	far
 22570                                  ;	jmp	short entry_int&a&_stk
 22571                                  ;old&a	dd	  0		;forward pointer
 22572                                  ;	dw	  424bh 	;compatible signature for int. sharing
 22573                                  ;firstflag&a db   0		;the firstly hooked.
 22574                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 22575                                  ;	db	7 dup (0)	;reserved for future.
 22576                                  ;entry_int&a&_stk:
 22577                                  ;	call	do_int_stacks
 22578                                  ;	dw	old&a
 22579                                  ;intret_&a:
 22580                                  ;	iret
 22581                                  ;int&a	endp
 22582                                  ;	endm
 22583                                  
 22584                                  ; ----------------------------------------------------------------------
 22585                                  
 22586                                  int0A:
 22587 00000057 EB10                    	jmp	short entry_int0A_stk
 22588 00000059 00000000                old0A:	dd	0	
 22589 0000005D 4B42                    	dw	424Bh
 22590                                  firstflag0A:
 22591 0000005F 00                      	db	0
 22592 00000060 EB0C                    	jmp	short intret_0A
 22593 00000062 00<rep 7h>              	times	7 db 0
 22594                                  
 22595                                  entry_int0A_stk:
 22596 00000069 E8DB00                  	call	do_int_stacks
 22597 0000006C [5900]                  	dw	old0A
 22598                                  intret_0A:
 22599 0000006E CF                      	iret
 22600                                  
 22601                                  ; ----------------------------------------------------------------------
 22602                                  
 22603                                  int0B:
 22604 0000006F EB10                    	jmp	short entry_int0B_stk
 22605 00000071 00000000                old0B:	dd	0	
 22606 00000075 4B42                    	dw	424Bh
 22607                                  firstflag0B:
 22608 00000077 00                      	db	0
 22609 00000078 EB0C                    	jmp	short intret_0B
 22610 0000007A 00<rep 7h>              	times	7 db 0
 22611                                  
 22612                                  entry_int0B_stk:
 22613 00000081 E8C300                  	call	do_int_stacks
 22614 00000084 [7100]                  	dw	old0B
 22615                                  intret_0B:
 22616 00000086 CF                      	iret
 22617                                  
 22618                                  ; ----------------------------------------------------------------------
 22619                                  
 22620                                  int0C:
 22621 00000087 EB10                    	jmp	short entry_int0C_stk
 22622 00000089 00000000                old0C:	dd	0	
 22623 0000008D 4B42                    	dw	424Bh
 22624                                  firstflag0C:
 22625 0000008F 00                      	db	0
 22626 00000090 EB0C                    	jmp	short intret_0C
 22627 00000092 00<rep 7h>              	times	7 db 0
 22628                                  
 22629                                  entry_int0C_stk:
 22630 00000099 E8AB00                  	call	do_int_stacks
 22631 0000009C [8900]                  	dw	old0C
 22632                                  intret_0C:
 22633 0000009E CF                      	iret
 22634                                  
 22635                                  ; ----------------------------------------------------------------------
 22636                                  
 22637                                  int0D:
 22638 0000009F EB10                    	jmp	short entry_int0D_stk
 22639 000000A1 00000000                old0D:	dd	0	
 22640 000000A5 4B42                    	dw	424Bh
 22641                                  firstflag0D:
 22642 000000A7 00                      	db	0
 22643 000000A8 EB0C                    	jmp	short intret_0D
 22644 000000AA 00<rep 7h>              	times	7 db 0
 22645                                  
 22646                                  entry_int0D_stk:
 22647 000000B1 E89300                  	call	do_int_stacks
 22648 000000B4 [A100]                  	dw	old0D
 22649                                  intret_0D:
 22650 000000B6 CF                      	iret
 22651                                  
 22652                                  ; ----------------------------------------------------------------------
 22653                                  
 22654                                  int0E:
 22655 000000B7 EB10                    	jmp	short entry_int0E_stk
 22656 000000B9 00000000                old0E:	dd	0	
 22657 000000BD 4B42                    	dw	424Bh
 22658                                  firstflag0E:
 22659 000000BF 00                      	db	0
 22660 000000C0 EB0C                    	jmp	short intret_0E
 22661 000000C2 00<rep 7h>              	times	7 db 0
 22662                                  
 22663                                  entry_int0E_stk:
 22664 000000C9 E87B00                  	call	do_int_stacks
 22665 000000CC [B900]                  	dw	old0E
 22666                                  intret_0E:
 22667 000000CE CF                      	iret
 22668                                  
 22669                                  ; ----------------------------------------------------------------------
 22670                                  
 22671                                  int72:
 22672 000000CF EB10                    	jmp	short entry_int72_stk
 22673 000000D1 00000000                old72:	dd	0	
 22674 000000D5 4B42                    	dw	424Bh
 22675                                  firstflag72:
 22676 000000D7 00                      	db	0
 22677 000000D8 EB0C                    	jmp	short intret_72
 22678 000000DA 00<rep 7h>              	times	7 db 0
 22679                                  
 22680                                  entry_int72_stk:
 22681 000000E1 E86300                  	call	do_int_stacks
 22682 000000E4 [D100]                  	dw	old72
 22683                                  intret_72:
 22684 000000E6 CF                      	iret
 22685                                  
 22686                                  ; ----------------------------------------------------------------------
 22687                                  
 22688                                  int73:
 22689 000000E7 EB10                    	jmp	short entry_int73_stk
 22690 000000E9 00000000                old73:	dd	0	
 22691 000000ED 4B42                    	dw	424Bh
 22692                                  firstflag73:
 22693 000000EF 00                      	db	0
 22694 000000F0 EB0C                    	jmp	short intret_73
 22695 000000F2 00<rep 7h>              	times	7 db 0
 22696                                  
 22697                                  entry_int73_stk:
 22698 000000F9 E84B00                  	call	do_int_stacks
 22699 000000FC [E900]                  	dw	old73
 22700                                  intret_73:
 22701 000000FE CF                      	iret
 22702                                  
 22703                                  ; ----------------------------------------------------------------------
 22704                                  
 22705                                  int74:
 22706 000000FF EB10                    	jmp	short entry_int74_stk
 22707 00000101 00000000                old74:	dd	0	
 22708 00000105 4B42                    	dw	424Bh
 22709                                  firstflag74:
 22710 00000107 00                      	db	0
 22711 00000108 EB0C                    	jmp	short intret_74
 22712 0000010A 00<rep 7h>              	times	7 db 0
 22713                                  
 22714                                  entry_int74_stk:
 22715 00000111 E83300                  	call	do_int_stacks
 22716 00000114 [0101]                  	dw	old74
 22717                                  intret_74:
 22718 00000116 CF                      	iret
 22719                                  
 22720                                  ; ----------------------------------------------------------------------
 22721                                  
 22722                                  int76:
 22723 00000117 EB10                    	jmp	short entry_int76_stk
 22724 00000119 00000000                old76:	dd	0	
 22725 0000011D 4B42                    	dw	424Bh
 22726                                  firstflag76:
 22727 0000011F 00                      	db	0
 22728 00000120 EB0C                    	jmp	short intret_76
 22729 00000122 00<rep 7h>              	times	7 db 0
 22730                                  
 22731                                  entry_int76_stk:
 22732 00000129 E81B00                  	call	do_int_stacks
 22733 0000012C [1901]                  	dw	old76
 22734                                  intret_76:
 22735 0000012E CF                      	iret
 22736                                  
 22737                                  ; ----------------------------------------------------------------------
 22738                                  
 22739                                  int77:
 22740 0000012F EB10                    	jmp	short entry_int77_stk
 22741 00000131 00000000                old77:	dd	0	
 22742 00000135 4B42                    	dw	424Bh
 22743                                  firstflag77:
 22744 00000137 00                      	db	0
 22745 00000138 EB0C                    	jmp	short intret_77
 22746 0000013A 00<rep 7h>              	times	7 db 0
 22747                                  
 22748                                  entry_int77_stk:
 22749 00000141 E80300                  	call	do_int_stacks
 22750 00000144 [3101]                  	dw	old77
 22751                                  intret_77:
 22752 00000146 CF                      	iret
 22753                                  
 22754                                  ; ----------------------------------------------------------------------
 22755                                  
 22756                                  ;********************************************************************
 22757                                  ;common routines
 22758                                  ;********************************************************************
 22759                                  
 22760                                  ; do interrupt stack switching. the fake return address holds
 22761                                  ; a pointer to the far-pointer of the actual interrupt
 22762                                  ; service routine
 22763                                  
 22764                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 22765                                  ; 21/03/2019 - Retro DOS v4.0
 22766                                  
 22767                                  ;allocbyte   equ 0
 22768                                  ;intlevel    equ 1
 22769                                  ;savedsp     equ 2
 22770                                  ;savedss     equ 4
 22771                                  ;newsp       equ 6
 22772                                  
 22773                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 22774                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:0147h)
 22775                                  
 22776                                  do_int_stacks:
 22777 00000147 50                      	push	ax
 22778 00000148 55                      	push	bp
 22779 00000149 06                      	push	es
 22780 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 22781 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 22782 00000154 B001                    	mov	al,allocated ; 1
 22783                                  	; 21/10/2022
 22784                                  	;xchg	[es:bp+allocbyte],al 
 22785                                  	; 11/12/2022
 22786 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 22787 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 22788 0000015C 7551                    	jne	short notfree02
 22789                                  
 22790 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 22791                                  
 22792                                  found02:
 22793 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 22794 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 22795                                  
 22796 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 22797                                  
 22798 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 22799                                  	; 21/10/2022
 22800                                  	;mov	bp,[es:bp+6]
 22801                                  	; 11/12/2022
 22802                                  	;cmp	[es:bp+0],ax	
 22803 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 22804 00000176 7544                    	jne	short foundbad02
 22805                                  
 22806                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 22807 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 22808 0000017A 8EC5                    	mov	es,bp
 22809 0000017C 89E5                    	mov	bp,sp
 22810 0000017E 8B6E06                  	mov	bp,[bp+6]
 22811 00000181 8ED0                    	mov	ss,ax
 22812 00000183 8CC4                    	mov	sp,es
 22813 00000185 8EC0                    	mov	es,ax
 22814 00000187 2E8B6E00                	mov	bp,[cs:bp]
 22815                                  
 22816                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 22817                                  	;push    bp
 22818                                  	;mov     bp,sp
 22819                                  	;mov     ax,[bp+8]
 22820                                  	;pop     bp
 22821                                  	;push    es
 22822                                  	;pop     ss
 22823                                  	;mov     sp,bp
 22824                                  	;mov     bp,ax
 22825                                  	; 11/12/2022
 22826                                  	;;mov	bp,[cs:bp+0]	
 22827                                  	;mov	bp,[cs:bp]	
 22828                                  
 22829 0000018B 9C                      	pushf				; go execute the real interrupt handler
 22830                                  	; 11/12/2022
 22831 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 22832                                  	; 21/10/2022
 22833                                  	;call	far [cs:bp+0]
 22834                                  
 22835 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 22836                                  	; 11/12/2022
 22837 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 22838                                  	; 21/10/2022
 22839                                  	;mov	bp,[es:bp+0]
 22840 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 22841 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 22842                                  
 22843                                  	; 11/12/2022
 22844                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 22845                                  	; 21/10/2022
 22846 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 22847 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 22848                                  
 22849 000001A8 07                      	pop	es
 22850 000001A9 5D                      	pop	bp			; saved on entry
 22851 000001AA 58                      	pop	ax			; saved on entry
 22852 000001AB 83C402                  	add	sp,2
 22853 000001AE CF                      	iret				; done with this interrupt
 22854                                  
 22855                                  notfree02:
 22856 000001AF 3C01                    	cmp	al,allocated		; error flag
 22857 000001B1 7404                    	je	short findnext02	;  no, continue
 22858                                  	; 11/12/2022
 22859                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 22860                                  	; 21/10/2022
 22861 000001B3 26864600                	xchg	[es:bp],al
 22862                                  
 22863                                  findnext02:
 22864 000001B7 E81200                  	call	longpath
 22865 000001BA EBA8                    	jmp	short found02
 22866                                  
 22867                                  foundbad02:
 22868 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 22869 000001C1 72F4                    	jc	short findnext02
 22870 000001C3 89C5                    	mov	bp,ax			; flag this entry
 22871                                  	; 11/12/2022
 22872                                  	;mov	byte [es:bp+allocbyte],clobbered
 22873                                  	; 21/10/2022
 22874 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 22875 000001CA EBEB                    	jmp	short findnext02	; keep looking
 22876                                  
 22877                                  ; ----------------------------------------------------------------------
 22878                                  
 22879                                  ; Common routines
 22880                                  
 22881                                  longpath:
 22882                                  	; 21/03/2019
 22883 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 22884                                  lploopp:
 22885                                  	; 11/12/2022
 22886                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 22887                                  	; 21/10/2022
 22888 000001D1 26807E0000              	cmp	byte [es:bp],free
 22889 000001D6 7512                    	jne	short inuse		;  no, try next one
 22890                                  
 22891 000001D8 B001                    	mov	al,allocated
 22892                                  	; 11/12/2022
 22893                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 22894                                  	; 21/10/2022
 22895 000001DA 26864600                	xchg	[es:bp],al
 22896 000001DE 3C00                    	cmp	al,free 		; is it still free?
 22897 000001E0 7414                    	je	short found		;  yes, go use it
 22898                                  
 22899 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 22900 000001E4 7404                    	je	short inuse		;  no, check the next one
 22901                                  
 22902                                  	; 11/12/2022
 22903                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 22904                                  	; 21/10/2022
 22905 000001E6 26884600                	mov	[es:bp],al
 22906                                  inuse:
 22907 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 22908 000001EF 7406                    	je	short fatal
 22909 000001F1 83ED08                  	sub	bp,entrysize
 22910 000001F4 EBDB                    	jmp	short lploopp
 22911                                  found:
 22912 000001F6 C3                      	retn
 22913                                  fatal:
 22914 000001F7 1E                      	push	ds
 22915 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 22916 000001FB 8ED8                    	mov	ds,ax
 22917 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 22918 00000202 1F                      	pop	ds
 22919 00000203 7504                    	jne	short skip_nmis
 22920                                  
 22921 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 22922 00000207 E672                    	out	72h,al
 22923                                  
 22924                                  skip_nmis:
 22925 00000209 FA                      	cli				; disable and mask
 22926 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 22927 0000020C E621                    	out	021h,al
 22928 0000020E E6A1                    	out	0A1h,al
 22929                                  
 22930 00000210 8CCE                    	mov	si,cs
 22931 00000212 8EDE                    	mov	ds,si
 22932 00000214 BE[3B02]                	mov	si,fatal_msg
 22933                                  ;SR;
 22934                                  ;   We set all foci to this VM to issue the stack failure message
 22935                                  ;
 22936 00000217 50                      	push	ax
 22937 00000218 1E                      	push	ds
 22938                                  	;;mov	ax,Bios_Data ; 0070h
 22939                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 22940                                  	; 21/10/2022
 22941 00000219 B87000                  	mov	ax,DOSBIODATASEG
 22942 0000021C 8ED8                    	mov	ds,ax
 22943                                  
 22944                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 22945 0000021E F606[1208]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 22946 00000223 1F                      	pop	ds
 22947 00000224 58                      	pop	ax
 22948 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 22949                                  
 22950                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 22951                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 22952                                  	; 21/10/2022
 22953 00000227 9A[1308]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 22954                                  ;
 22955                                  ;SR; We do not bother about the returned status of this call. 
 22956                                  ;
 22957                                  fatal_loop:
 22958 0000022C AC                      	lodsb
 22959 0000022D 3C24                    	cmp	al,'$'
 22960 0000022F 7408                    	je	short fatal_done
 22961                                  
 22962 00000231 B307                    	mov	bl,7
 22963 00000233 B40E                    	mov	ah,14
 22964 00000235 CD10                    	int	10h			; whoops, this enables ints
 22965 00000237 EBF3                    	jmp	short fatal_loop
 22966                                  
 22967                                  fatal_done:
 22968 00000239 EBFE                    	jmp	short fatal_done
 22969                                  
 22970                                  
 22971                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 22972                                  ; ----------------------------------------------------------------------
 22973                                  ;	include msbio.cl5		; fatal stack error message
 22974                                  
 22975                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 22976                                  
 22977                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 22978                                  ; ----------------------------------------------------------------------
 22979                                  ; 04/06/2018 - Retro DOS v3.0
 22980                                  
 22981                                  fatal_msg:
 22982 0000023B 0D0A                    	db	0Dh,0Ah
 22983 0000023D 070D0A                  	db	7,0Dh,0Ah
 22984 00000240 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 22984 00000249 737461636B206F7665-
 22984 00000252 72666C6F770D0A     
 22985 00000259 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 22985 00000262 6C7465640D0A24     
 22986                                  
 22987                                  endstackcode:
 22988                                  
 22989                                  ; ----------------------------------------------------------------------
 22990                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 22991                                  ; ----------------------------------------------------------------------
 22992                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 22993                                  
 22994                                  ; 22/03/2019 - Retro DOS v4.0
 22995                                  
 22996                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 22997                                  
 22998                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 22999                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 23000                                  
 23001                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23002                                  ; ----------------------------------------------------------------------
 23003                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 23004                                  
 23005                                  ; SYSINIT:0269h (MSDOS 6.22 IO.SYS, SYSINIT segment, offset: 0269h)
 23006                                  
 23007                                  ; 29/12/2023- Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 23008                                  ; ----------------------------------------------------------------------
 23009                                  ; SYSINITSEG:0269h (PCDOS 7.1 IBMBIO.COM, SYSINIT segment, offset: 0269h)
 23010                                  
 23011                                  SYSINIT:	
 23012 00000269 E9AD01                          JMP	GOINIT
 23013                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 23014                                  
 23015                                  ; ----------------------------------------------------------------------
 23016                                  
 23017                                  struc DDHighInfo
 23018 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 23019 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 23020 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 23021                                  endstruc
 23022                                  
 23023                                  ; 22/03/2019 - Retro DOS v4.0
 23024                                  
 23025 0000026C 00                      runhigh: db	0
 23026                                  
 23027                                  ; 02/11/2022
 23028                                  ;align 4
 23029                                  
 23030                                  DOSINFO: 
 23031 0000026D 00000000                	dd	0	; address of the DOS Sysini Variables
 23032                                  ;MSDOS:
 23033                                  dos_temp_location: ; dword ; MSDOS 6.0
 23034                                  dosinit:		; MSDOS 6.0
 23035 00000271 0000                    	dw	0
 23036                                  
 23037                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23038                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 23039                                  ;	dw	0
 23040                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 23041                                  
 23042                                  CURRENT_DOS_LOCATION:
 23043 00000273 0000                    	dw	0
 23044                                  
 23045                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 23046                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 23047                                  
 23048                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23049                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 23050                                  ;DOSSIZE equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 23051                                  ; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 23052                                  ; 03/09/2023 (PCDOS 7.1 IBMDOS.COM size is 42566 bytes, 04/12/2003)
 23053                                  DOSSIZE equ	0B000h	; (PCDOS 7.1 - SYSINIT)
 23054                                  
 23055                                  DEVICE_LIST:
 23056 00000275 00000000                	dd	0
 23057                                  
 23058                                  ; 04/06/2018 - Retro DOS v3.0
 23059                                  ; 28/03/2018
 23060                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 23061                                  ;
 23062                                  sysi_country:	
 23063 00000279 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 23064                                  
 23065                                  ; MSDOS 6.0
 23066 0000027D 00000000                dos_segreinit:	dw	0,0	; room for dword
 23067                                  
 23068 00000281 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 23069 00000283 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 23070                                  
 23071 00000285 0000                    def_php:	dw	0
 23072                                  
 23073                                  ; M022--
 23074                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 23075                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 23076                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 23077                                  ;  the new home.
 23078                                  
 23079                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 23080                                  ; 21/10/2022
 23081                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 23082                                  
 23083                                  ; 22/10/2022
 23084                                  seg_reinit_ptr:	; label dword
 23085 00000287 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 23086                                  temp_bcode_seg:
 23087                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 23088                                  		; 22/10/2022
 23089 00000289 2D03                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS
 23090                                  				; 364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 23091                                  fake_floppy_drv:
 23092 0000028B 00                      		db	0	; set to 1 if this machine
 23093                                  				; does not have any floppies!!!
 23094                                  
 23095                                  ; Internal Stack Parameters
 23096                                  
 23097 0000028C 0900                    stack_count:	dW	defaultcount ; 9
 23098 0000028E 8000                    stack_size:	dw	defaultsize  ; 128
 23099 00000290 00000000                stack_addr:	dd	0
 23100                                  
 23101                                  ; 05/06/2018 - Retro DOS v3.0
 23102                                  
 23103                                  ; various default values
 23104                                  
 23105 00000294 0100                    MEMORY_SIZE:	dw	1
 23106                                  
 23107                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 23108                                  
 23109 00000296 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)
 23110 00000298 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 23111 00000299 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 23112 0000029B 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 23113 0000029D 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 23114                                  
 23115 0000029F 08                      FILES:	db	8	; enough files for pipe
 23116 000002A0 04                      FCBS:	db	4	; performance for recycling
 23117 000002A1 00                      KEEP:	db	0	; keep original set
 23118 000002A2 05                      NUM_CDS: db	5	; 5 net drives
 23119                                  
 23120                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 23121                                  ;;CONFBOT: dw	0
 23122                                  ;;ALLOCLIM: dw	0
 23123                                  ;CONFBOT: ; 02/11/2022
 23124                                  ;top_of_cdss: dw 0
 23125                                  
 23126                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 23127                                  ; (SYSINIT:02A3h)
 23128 000002A3 0000                    CONFBOT: dw	0
 23129 000002A5 0000                    ALLOCLIM: dw	0
 23130 000002A7 0000                    top_of_cdss: dw 0
 23131                                  
 23132                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 23133                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 23134                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 23135                                  
 23136 000002A9 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 23137                                  
 23138                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 23139                                  %if 0
 23140                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23141                                  ; (SYSINIT:02A9h)
 23142                                  
 23143                                  command_line:
 23144                                  	db	2,0
 23145                                  	db	'P'
 23146                                  	db	0
 23147                                  	times	124 db 0 ; db 124 dup(0)
 23148                                  
 23149                                  %endif
 23150                                  
 23151                                  ; (SYSINIT:0329h)
 23152 000002AD 00                      ZERO:	db	0
 23153 000002AE 00                      sepchr:	db	0
 23154 000002AF 0000                    linecount: dw	0			; line count in config.sys
 23155 000002B1 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 23156 000002B9 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 23157                                  
 23158 000002BB FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 23159 000002BC 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 23160                                  
 23161 000002BD 0000                    buf_prev_off:	dw	0
 23162                                  
 23163                                          ;IF      NOT NOEXEC
 23164                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 23165                                          ;ENDIF
 23166                                  
 23167                                  ; 29/12/2023
 23168                                  ; 01/05/2018
 23169                                  COMEXE:
 23170 000002BF 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 23171 000002C1 [BB4B]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 23172 000002C3 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 23173                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 23174 000002C5 [9802]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 23175 000002C7 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 23176 000002C9 [AD02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 23177 000002CB 0000                    		dw	0
 23178                                  
 23179                                  ; variables for install= command.
 23180                                  
 23181 000002CD 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 23182                                  					;  indicating the pass number
 23183                                  					; 0 - do scan for DOS=HIGH/LOW
 23184                                  					; 1 - load device drivers
 23185                                  					; 2 - was to load IFS
 23186                                  					;      now it is unused
 23187                                  					; 3 - do install=
 23188                                  					; >3 - nop
 23189 000002CE 0000                    install_flag:	dw	0
 23190                                  
 23191                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 23192                                  has_installed	equ	00000010b	; sysinit_base installed.
 23193                                  
 23194 000002D0 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 23195 000002D2 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 23196 000002D6 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 23197 000002DA 0000                    checksum:	dw	0		; used by sum_up
 23198                                  
 23199 000002DC 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 23200 000002F0 00                      ldexec_line:	db	0		;# of parm characters
 23201 000002F1 20                      ldexec_start:	db	' '
 23202 000002F2 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 23203                                  
 23204                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 23205                                  
 23206                                  instexe:
 23207 00000342 0000                    iexec.environ:	dw	0		; seg addr of environment
 23208 00000344 [F002]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 23209 00000346 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 23210                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 23211 00000348 [DC02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 23212 0000034A 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.22 IO.SYS)
 23213 0000034C [DC02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 23214 0000034E 0000                    		dw	0
 23215                                  
 23216                                  ; variables for comment=
 23217                                  
 23218 00000350 00                      com_level:	db	0		; level of " " in command line
 23219 00000351 00                      cmmt:		db	0		; length of comment string token
 23220 00000352 00                      cmmt1:		db	0		; token
 23221 00000353 00                      cmmt2:		db	0		; token
 23222 00000354 00                      cmd_indicator:	db	0
 23223 00000355 00                      donotshownum:	db	0
 23224                                  
 23225 00000356 0000                    count:		dw	0
 23226 00000358 0000                    org_count:	dw	0
 23227 0000035A 0000                    chrptr:		dw	0
 23228 0000035C 0000                    cntryfilehandle: dw	0
 23229 0000035E 0000                    old_area:	dw	0
 23230 00000360 0000                    impossible_owner_size: dw 0		; paragraph
 23231                                  
 23232                                  bucketptr: ; label dword
 23233                                  bufptr:	   ; label dword		; leave this stuff in order!
 23234 00000362 0000                    memlo:	dw	0
 23235                                  prmblk:	   ; label word
 23236 00000364 0000                    memhi:	dw	0
 23237 00000366 0000                    ldoff:	dw	0
 23238 00000368 0000                    area:	dw	0
 23239                                  
 23240                                  ; 29/12/2023 - PCDOS 7.1 IBMBIO.COM - SYSINIT:036Ah
 23241 0000036A 0000                    prev_memhi:	dw 0
 23242 0000036C 0000                    prev_alloclim:	dw 0
 23243 0000036E 00                      dosdata_umb:	db 0
 23244                                  
 23245                                  ; Following is the request packet used to call INIT routines for 
 23246                                  ; all device drivers. Some fields may be accessed individually in
 23247                                  ; the code, and hence have individual labels, but they should not
 23248                                  ; be separated.
 23249                                  
 23250 0000036F 19                      packet:	db	25			; PCDOS 7.1 IBMBIO.COM
 23251                                  	;db	24			; was 22
 23252 00000370 00                      	db	0
 23253 00000371 00                      	db	0			; initialize code
 23254 00000372 0000                    	dw	0
 23255 00000374 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 23256                                  
 23257 0000037C 00                      unitcount:	db	0
 23258 0000037D 00000000                break_addr:	dd	0
 23259 00000381 00000000                bpb_addr:	dd	0
 23260                                  drivenumber:	; 22/10/2022
 23261 00000385 00                      devdrivenum:	db	0 
 23262 00000386 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 23263                                  
 23264                                  ; end of request packet
 23265                                  
 23266                                  ;drivenumber:	db	0  ; 22/03/2019
 23267                                  
 23268                                  toomanydrivesflag:
 23269 00000388 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 23270 00000389 90                      align 2
 23271                                  
 23272                                  BCodeSeg:	; 21/10/2022
 23273 0000038A 2D03                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 23274                                  			; 0364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 23275                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 23276                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 23277                                  
 23278                                  ; 30/12/2022
 23279                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 23280                                  ;
 23281                                  ; Magicbackdoor: dd 0
 23282                                  ; NullBackdoor: 
 23283                                  ;		retf
 23284                                  
 23285                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23286                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 23287                                  ; 19/04/2019
 23288                                  _timer_lw_:
 23289 0000038C 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 23290                                  
 23291                                  ; 29/12/2023 - Retro DOS v5.0
 23292                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:038Eh
 23293                                  
 23294 0000038E 00                      F5_key:	db 0
 23295 0000038F 00                      F8_key:	db 0
 23296 00000390 00000000                MagicBackdoor:	dd 0
 23297                                  NullBackdoor:
 23298 00000394 CB                      		retf
 23299                                  
 23300                                  ;SR;
 23301                                  ; This is the communication block between the DOS and the BIOS. It starts at
 23302                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 23303                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 23304                                  ;is passed to DOS as part of the DOSINIT call.
 23305                                  ;
 23306                                  
 23307                                  BiosComBlock:
 23308                                  	;dd	Bios_Data:SysinitPresent 
 23309                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 23310 00000395 [DD07]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 23311                                  	;dw	KERNEL_SEGMENT ; 0070h
 23312                                  	; 21/10/2022
 23313 00000397 7000                    	dw	DOSBIODATASEG ; 0070h
 23314                                  
 23315                                  ;align 2
 23316                                  
 23317                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 23318                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 23319                                  tempstack:	
 23320 00000399 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 23321                                  
 23322                                  ; ----------------------------------------------------------------------------
 23323                                  
 23324                                  	; 29/12/2023 - Retro DOS v5.0
 23325                                  	; 22/10/2022 - Retro DOS v4.0
 23326                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 23327                                  GOINIT:		; (MSDOS 6.22 IO.SYS, SYSINIT:0412h)
 23328                                  		; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0419h)
 23329                                  	; 12/12/2023
 23330 00000419 0E                      	push	cs
 23331 0000041A 1F                      	pop	ds
 23332                                  
 23333                                  	; 12/12/2022
 23334                                  	; 22/03/2019 - Retro DOS v4.0
 23335                                  	; 06/07/2018
 23336                                  	; 04/06/2018 - Retro DOS v3.0
 23337                                  ; before doing anything else, let's set the model byte
 23338 0000041B B4C0                    	mov	ah,0C0h 		; get system configuration
 23339 0000041D CD15                    	int	15h			; 
 23340 0000041F 7214                    	jc	short no_rom_config
 23341                                  
 23342                                  	;cmp	ah,0			; double check
 23343                                  	;jne	short no_rom_config
 23344                                  	; 03/09/2023
 23345 00000421 08E4                    	or	ah,ah
 23346 00000423 7510                    	jnz	short no_rom_config
 23347                                  
 23348                                  	; 12/12/2023 ; *
 23349                                  	; ds = cs
 23350                                  
 23351 00000425 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 23352                                  	;mov	[cs:sys_model_byte],al 
 23353 00000429 A2[BB02]                	mov	[sys_model_byte],al ; *
 23354 0000042C 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 23355                                  	;mov	[cs:sys_scnd_model_byte],al
 23356 00000430 A2[BC02]                	mov	[sys_scnd_model_byte],al ; *
 23357                                  	;jmp	short SYSIN
 23358                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23359 00000433 EB29                    	jmp	short move_myself
 23360                                  
 23361                                  no_rom_config:				; Old ROM
 23362                                  	; 12/12/2023
 23363                                  	;mov	ax,0F000h
 23364                                  	;mov	ds,ax
 23365                                  	;mov	al,[0FFFEh]
 23366                                  	;mov	[cs:sys_model_byte],al	; set the model byte.
 23367                                  	; 12/12/2023
 23368                                  	; ds = cs
 23369 00000435 B800F0                  	mov	ax,0F000h
 23370 00000438 8EC0                    	mov	es,ax
 23371 0000043A 26A0FEFF                	mov	al,[es:0FFFEh]
 23372 0000043E A2[BB02]                	mov	[sys_model_byte],al	; set the model byte.
 23373                                  	
 23374                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 23375                                  ; execute the equipment determination interrupt and then
 23376                                  ; check the returned value to see if we have any floppy drives
 23377                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 23378                                  ; see the at tech ref bios listings for help on the equipment
 23379                                  ; flag interrupt (11h)	
 23380                                  
 23381                                  	; 22/10/2022
 23382                                  ;check_for_fake_floppy:			; entry point for rom_config above
 23383 00000441 CD11                    	int	11h			; check equipment flag
 23384                                  
 23385                                  	; 29/12/2023 - Retro DOS v5.0
 23386                                  	;jmp	short check_for_fake_floppy
 23387                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0446h
 23388                                  	;db	52h	; 'RPS' sign
 23389                                  	;db	50h
 23390                                  	;db	53h
 23391                                  
 23392                                  check_for_fake_floppy:
 23393                                  	; 29/12/2023
 23394                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0449h
 23395                                  	;or	ax, 1		; (nonsense! this may be overwritten/disabled
 23396                                  	;			; by using 'RPS' sign position)
 23397                                  	;			;		 03/07/2023 - Erdogan Tan
 23398                                  	;test	ax, 1		; have any floppies?
 23399                                  
 23400                                  	; 12/12/2022
 23401 00000443 A801                    	test	al,1		
 23402                                  	;test	ax,1			; have any floppies?
 23403 00000445 7517                    	jnz	short move_myself	; yes,normal system
 23404                                  
 23405                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 23406                                  ; whether it is an old ROM BIOS or a new one
 23407                                  ;
 23408                                  ; WARNING !!!
 23409                                  ;
 23410                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 23411                                  ; here will require an equivalent modification in MSINIT.ASM also
 23412                                  
 23413                                  	; 12/12/2023
 23414                                  	;push	es  ; not necessary
 23415                                  
 23416 00000447 30C9                    	xor	cl,cl	
 23417 00000449 B408                    	mov	ah,8			; get disk parameters
 23418 0000044B B200                    	mov	dl,0			; of drive 0
 23419 0000044D CD13                    	int	13h
 23420                                  
 23421                                  	;pop	es  ; 12/12/2023	
 23422                                  
 23423 0000044F 720D                    	jc	short move_myself	; if error lets assume that the
 23424                                  					;  ROM BIOS lied
 23425                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 23426                                  	;je	short move_myself
 23427                                  	; 03/09/2023
 23428 00000451 08C9                    	or	cl,cl
 23429 00000453 7409                    	jz	short move_myself
 23430                                  
 23431 00000455 08D2                    	or	dl,dl			; number of flp drvs == 0?
 23432 00000457 7505                    	jnz	short move_myself	; no
 23433                                  
 23434                                  	;mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 23435                                  	; 12/12/2023
 23436                                  	; ds = cs
 23437 00000459 C606[8B02]01            	mov	byte [fake_floppy_drv],1 ; set fake flag.
 23438                                  
 23439                                  move_myself:
 23440                                  	; 12/12/2023
 23441                                  	;cld	; not necessary		; set up move
 23442                                  	;xor	si,si
 23443                                  	;mov	di,si
 23444                                  
 23445                                  	; 12/12/2023
 23446                                  	; ds = cs
 23447                                  	; 12/12/2022
 23448                                  	;push	cs
 23449                                  	;pop	ds
 23450                                  
 23451                                  	;mov	cx,[cs:MEMORY_SIZE]
 23452 0000045E 8B0E[9402]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 23453                                  
 23454                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 23455                                  ;;;	if	msver
 23456                                  ;	cmp	cx,1		; 1 means do scan
 23457                                  ;	jnz	short noscan
 23458                                  ;	mov	cx,2048		; start scanning at 32k boundary
 23459                                  ;	xor	bx,bx
 23460                                  ;
 23461                                  ;memscan:inc	cx
 23462                                  ;	jz	short setend
 23463                                  ;	mov	ds,cx
 23464                                  ;	mov	al,[bx]
 23465                                  ;	not	al
 23466                                  ;	mov	[bx],al
 23467                                  ;	cmp	al,[bx]
 23468                                  ;	not	al
 23469                                  ;	mov	[bx],al
 23470                                  ;	jz	short memscan
 23471                                  ;setend:
 23472                                  ;	mov	cs:[memory_size],cx
 23473                                  ;;;	endif
 23474                                  
 23475                                  ;noscan: 				; cx is mem size in para
 23476                                  ;;
 23477                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 23478                                  ;;		  before we try to run.
 23479                                  ;;	       b) in any case, we should check for sufficient memory and give
 23480                                  ;;		  an appropriate error diagnostic if there isn't enough
 23481                                  ;
 23482                                  ;	push	cs
 23483                                  ;	pop	ds
 23484                                  ;
 23485                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 23486                                  ;;	  that way it would be easier to slide them down home in a minimal
 23487                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 23488                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 23489                                  ;;	  temporary home and the final one.  the problem with doing that
 23490                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 23491                                  ;
 23492                                  ;	dec	cx			; one para for an arena at end of mem
 23493                                  ;					; in case of UMBs
 23494                                  
 23495                                  	; 22/10/2022
 23496                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 23497                                  
 23498                                  	; 12/12/2022
 23499                                  	;push	cs
 23500                                  	;pop	ds
 23501                                  
 23502 00000462 49                      	dec	cx
 23503                                  
 23504                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 23505                                  
 23506 00000463 31DB                    	xor	bx,bx
 23507 00000465 8EC3                    	mov	es,bx
 23508                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 23509                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 23510                                  	; 29/09/2023
 23511 00000467 26C41EBC00              	les	bx,[es:(2Fh*4)]
 23512 0000046C 26817F035250            	cmp	word [es:bx+3],'RP'
 23513 00000472 751B                    	jne	short NoRPL
 23514 00000474 26807F054C              	cmp	byte [es:bx+5],'L'
 23515 00000479 7514                    	jne	short NoRPL
 23516                                  
 23517 0000047B 89CA                    	mov	dx,cx			; get TOM into DX
 23518 0000047D 52                      	push	dx
 23519 0000047E B8064A                  	mov	ax,4A06h
 23520                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 23521 00000481 CD2F                    	int	2Fh			; Get new TOM from any RPL
 23522 00000483 58                      	pop	ax
 23523 00000484 89D1                    	mov	cx,dx
 23524 00000486 39C2                    	cmp	dx,ax
 23525 00000488 7405                    	je	short NoRPL
 23526                                  	
 23527                                  	; 11/12/2022
 23528                                  	; ds = cs
 23529 0000048A 8916[9602]              	mov	[RPLMemTop],dx
 23530                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23531                                  	;mov	[cs:RPLMemTop],dx
 23532                                  	
 23533 0000048E 49                      	dec	cx
 23534                                  NoRPL:
 23535 0000048F B8[1054]                	mov	ax,SI_end		; need this much room for sysinit
 23536                                  					; (SI_end == sysinit code size)
 23537                                  					; 03/09/2023
 23538                                  					; (58A0h for MSDOS 6.21 IO.SYS)
 23539                                  					; (5B40h for PCDOS 7.1 IBMBIO.COM)
 23540 00000492 E80509                  	call	off_to_para
 23541 00000495 29C1                    	sub	cx,ax
 23542                                  
 23543                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 23544                                  ; code above sysinit in memory
 23545                                  ;
 23546 00000497 81E9000B                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 23547                                  			      ; (0B00h) ; (PCDOS 7.1 IBMBIO.COM) -03/09/2023-	
 23548                                  
 23549 0000049B B8701D                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 23550                                  					; (1A70h for MSDOS 6.21 IO.SYS)
 23551                                  					; 03/09/2023
 23552                                  					; (1E00h for PCDOS 7.1 IBMBIO.COM)
 23553 0000049E E8F908                  	call	off_to_para		; leave this much room for BIOS code
 23554 000004A1 29C1                    	sub	cx,ax
 23555 000004A3 8EC1                    	mov	es,cx			; segment where sysinit will be located
 23556                                  
 23557                                  	; 12/12/2023
 23558 000004A5 FC                      	cld	; not necessary		; set up move
 23559 000004A6 31F6                    	xor	si,si
 23560 000004A8 89F7                    	mov	di,si
 23561                                  
 23562 000004AA B9[1054]                	mov	cx,SI_end		; (sysinit code size)
 23563 000004AD D1E9                    	shr	cx,1			; divide by 2 to get words
 23564 000004AF F3A5                    	rep	movsw			; relocate sysinit
 23565                                  
 23566 000004B1 06                      	push	es			; push relocated segment
 23567 000004B2 B8[B704]                	mov	ax,SYSIN
 23568 000004B5 50                      	push	ax			; push relocated entry point
 23569                                  
 23570 000004B6 CB                      	retf				; far jump to relocated sysinit
 23571                                  
 23572                                  ; =============== S U B R O U T I N E ========================================
 23573                                  
 23574                                  ; 30/12/2023
 23575                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:04CEh
 23576                                  %if 0
 23577                                  get_cpu_type:
 23578                                  	pushf
 23579                                  	push	bx
 23580                                  	xor	bx,bx
 23581                                  	xor	ax,ax
 23582                                  	push	ax
 23583                                  	popf
 23584                                  	pushf
 23585                                  	pop	ax
 23586                                  	and	ax,0F000h
 23587                                  	cmp	ax,0F000h
 23588                                  	jz	short cpu_8086
 23589                                  	mov	ax,0F000h
 23590                                  	push	ax
 23591                                  	popf
 23592                                  	pushf
 23593                                  	pop	ax
 23594                                  	and	ax,0F000h
 23595                                  	jz	short cpu_286
 23596                                  cpu_386:
 23597                                  	inc	bx
 23598                                  cpu_286:
 23599                                  	inc	bx
 23600                                  cpu_8086:
 23601                                  	mov	ax,bx
 23602                                  	pop	bx
 23603                                  	popf
 23604                                  	retn
 23605                                  %endif
 23606                                  
 23607                                  ; ----------------------------------------------------------------------------
 23608                                  
 23609                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 23610                                  
 23611                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 23612                                  	; (SYSINIT:0533h)
 23613                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23614                                  	; (SYSINIT:04BFh)
 23615                                  	; 03/09/2023 - Retro DOS 4.2 (5.0 - Modified PCDOS 7.1 IBMBIO.COM)
 23616                                  	; (SYSINIT:04F3h)
 23617                                  SYSIN:
 23618                                  	; Retro DOS 5.0 - 30/12/2023
 23619                                  	; Retro DOS 4.0 - 22/03/2019
 23620                                  	; Retro DOS 2.0 - 25/02/2018
 23621                                  
 23622                                  	; 23/04/2019
 23623                                  	;;mov	ax,Bios_Data
 23624                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 23625                                  	; 21/10/2022
 23626 000004B7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23627 000004BA 8ED8                    	mov	ds,ax
 23628                                  
 23629                                  	; 30/12/2023 - Retro DOS v5.0
 23630                                  	;;;
 23631                                  	;push	es
 23632                                  	;push	ax		; not needed (*) E.TAN - 03/07/2023
 23633                                  	;push	di
 23634                                  	
 23635                                  	;call	get_cpu_type	; determine if 386 system
 23636                                  	;
 23637                                  get_cpu_type:
 23638 000004BC 9C                      	pushf
 23639 000004BD 31C0                    	xor	ax,ax
 23640 000004BF 50                      	push	ax
 23641 000004C0 9D                      	popf
 23642 000004C1 9C                      	pushf
 23643 000004C2 58                      	pop	ax
 23644 000004C3 2500F0                  	and	ax,0F000h
 23645 000004C6 3D00F0                  	cmp	ax,0F000h
 23646 000004C9 740F                    	jz	short cpu_8086
 23647 000004CB B800F0                  	mov	ax,0F000h
 23648 000004CE 50                      	push	ax
 23649 000004CF 9D                      	popf
 23650 000004D0 9C                      	pushf
 23651 000004D1 58                      	pop	ax
 23652 000004D2 2500F0                  	and	ax,0F000h
 23653 000004D5 7402                    	jz	short cpu_286
 23654                                  cpu_386:
 23655 000004D7 29C0                    	sub	ax,ax
 23656                                  cpu_286:
 23657 000004D9 40                      	inc	ax
 23658                                  cpu_8086:	; ax = 0
 23659                                  	; 30/12/2023 - Retro DOS v5.0
 23660 000004DA 2EA2[B606]              	mov	[cs:cpu_type],al ; 07/04/2024
 23661 000004DE 9D                      	popf
 23662                                  	;
 23663                                  	;cmp	ax,2		; 0 = 8086, 1 = 286, 2 = 386
 23664 000004DF 3C02                    	cmp	al,2
 23665 000004E1 7512                    	jnz     short not_386_system
 23666 000004E3 FC                      	cld			; 80386
 23667 000004E4 1E                      	push	ds
 23668 000004E5 07                      	pop	es		; change A20 line on/off check code
 23669 000004E6 BF[4D07]                	mov	di,cpu386_cmpsd
 23670 000004E9 B8B904                  	mov	ax,04B9h	; mov cx,4 ; B90400
 23671 000004EC AB                      	stosw
 23672 000004ED B800F3                  	mov	ax,0F300h	; repz  ; F3
 23673 000004F0 AB                      	stosw
 23674 000004F1 B866A7                  	mov	ax,0A766h	; cmpsd ; 66A7
 23675 000004F4 AB                      	stosw
 23676                                  not_386_system:
 23677                                  	;pop	di
 23678                                  	;pop	ax
 23679                                  	;pop	es
 23680                                  	;;;
 23681                                  
 23682 000004F5 8C0E[DB07]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 23683 000004F9 C606[DD07]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 23684                                  
 23685                                  ; first move the MSDOS.SYS image up to a harmless place 
 23686                                  ; on top of our new sysinitseg
 23687                                  
 23688                                  	; 22/10/2022
 23689 000004FE B8[1054]                	mov	ax,SI_end		; how big is sysinitseg?
 23690 00000501 E89608                  	call	off_to_para
 23691 00000504 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 23692 00000506 01C8                    	add	ax,cx
 23693 00000508 8EC0                    	mov	es,ax
 23694                                  	
 23695 0000050A 31F6                    	xor	si,si
 23696 0000050C 89F7                    	mov	di,si
 23697                                  
 23698 0000050E 2E8E1E[7302]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 23699                                  
 23700                                  	;mov	ax,cs	
 23701                                  	;mov	ds,ax
 23702                                  
 23703                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 23704                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 23705                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 23706                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 23707                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 23708                                  
 23709                                  	; 22/10/2022
 23710 00000513 B90058                  	mov	cx,DOSSIZE/2 ; 5000h
 23711                                  			     ; 03/09/2023
 23712                                  			     ; 5800h (PCDOS 7.1)
 23713 00000516 F3A5                    	rep     movsw
 23714 00000518 2E8C06[7302]            	mov	[cs:CURRENT_DOS_LOCATION],es
 23715                                  
 23716                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 23717                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 23718                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 23719                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 23720                                  
 23721                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 23722                                  	;mov	ax,cs
 23723                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 23724                                  	;mov	ds,ax
 23725                                  
 23726                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 23727                                  
 23728                                  ;	; 24/04/2019 
 23729                                  ;;ifndef ROMDOS
 23730                                  ;	mov	ax,[es:3] 		; get offset of dos
 23731                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 23732                                  ;	mov	[dosinit],ax		; that's the entry point offset
 23733                                  ;	call	off_to_para		; subtract this much from segment
 23734                                  ;	; 23/04/2019
 23735                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 23736                                  ;	sub	[FINAL_DOS_LOCATION],ax
 23737                                  ;;else
 23738                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 23739                                  ;;
 23740                                  ;;endif ; ROMDOS
 23741                                  
 23742                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 23743                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 23744                                  
 23745                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 23746                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 23747                                  
 23748                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 23749                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 23750                                  	; 03/09/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23751                                  	; (SYSINIT:04ECh for MSDOS 6.21 IO.SYS SYSINIT)
 23752                                  	; (SYSINIT:0540h for PCDOS 7.1 IBMBIO.COM SYSINIT)
 23753 0000051D A10300                  	mov	ax,[3]		; mov ax, word ptr ds:3
 23754                                  				; 30/12/2023
 23755                                  				; ax = 3F10h for IBMDOS 7.1 kernel
 23756                                  				;  (IBMDOS.SYS, offset 3)
 23757                                  
 23758 00000520 2EA3[7102]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 23759                                  	; 02/11/2022
 23760 00000524 E87308                  	call	off_to_para		; subtract this much from segment
 23761 00000527 2E2906[7302]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 23762                                  
 23763                                  	; Current DOSCODE start address = dword [dosinit]
 23764                                  
 23765                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 23766                                  ;; until it is determined whether it will be running in HIMEM or not.
 23767                                  
 23768                                  ;ifndef ROMDOS
 23769                                  
 23770                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 23771                                  
 23772                                  	; 22/10/2022
 23773 0000052C 8CC0                    	mov	ax,es
 23774 0000052E 05000B                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 23775 00000531 8EC0                    	mov	es,ax
 23776 00000533 2E8706[8902]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 23777 00000538 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 23778                                  
 23779                                  	;mov	si,BCODE_START ; mov si,30h
 23780                                  	; 09/12/2022
 23781 0000053A BE[3000]                	mov	si,BCODESTART
 23782                                  	; 02/11/2022
 23783 0000053D 89F7                    	mov	di,si
 23784                                  	; 30/12/2023
 23785                                  	;mov	cx,1E00h	; BCODE_END = (SYSINITSEG-DOSBIOCODESEG)*16
 23786                                  	;			; (544h-364h)*10h = 1E00h (for PCDOS 7.1 IBMBIO.COM)
 23787                                  	;mov	cx,BCODE_END	; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 23788                                  	;sub	cx,si
 23789                                  	; 31/03/2024
 23790                                  	BCODESIZE equ BCODEEND-BCODESTART
 23791 0000053F B9401D                  	mov	cx,BCODESIZE
 23792 00000542 D1E9                    	shr	cx,1
 23793 00000544 F3A5                    	rep	movsw			; move Bios_Code into place
 23794                                  
 23795 00000546 8CC0                    	mov	ax,es			; tell it what segment it's in
 23796 00000548 2EFF1E[8702]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 23797                                  
 23798                                  ;endif	; not ROMDOS
 23799                                  
 23800                                  ; now call dosinit while it's in its temporary home
 23801                                  
 23802                                  	;mov	ax,cs
 23803                                  	;mov	ds,ax	 
 23804                                  
 23805                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 23806                                  
 23807                                  	; 22/10/2022
 23808                                  
 23809 0000054D 2EC43E[9503]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 23810                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 23811 00000552 2EC536[7502]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 23812                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 23813                                  
 23814 00000557 2E8B16[9402]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 23815                                  
 23816 0000055C FA                      	cli
 23817 0000055D 8CC8                    	mov	ax,cs
 23818 0000055F 8ED0                    	mov	ss,ax
 23819                                  
 23820                                  ; 30/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 23821                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 23822                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 23823                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 23824                                  					  ; 586h in PCDOS 7.1 IBMBIO.COM SYSINIT
 23825                                  ;SYSINIT:0532h: 
 23826                                  
 23827                                  ; 22/10/2022
 23828                                  ; ----------------------------------------------------------------------------
 23829                                  ;SYSINIT:05A6h:
 23830                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 23831                                  
 23832                                  ; 03/09/2023
 23833                                  ; (locstack at SYSINIT:0586h in PCDOS 7.1 IBMBIO.COM SYSINIT)
 23834                                  
 23835                                  	;mov	sp,05A6h
 23836 00000561 BC6005                  	mov     sp,locstack		; set stack
 23837                                  
 23838 00000564 FB                      	sti
 23839                                  
 23840                                  ;align 2
 23841                                  	; 30/03/2018
 23842                                  ;LOCSTACK:
 23843                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 23844                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 23845                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 23846                                  
 23847                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23848                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 23849                                  
 23850                                  ; This call to DOSINIT will relocate the DOS data from its present location
 23851                                  ; at the top of memory, to its final location in low memory just above the
 23852                                  ; BIOS data. It will then build important DOS data structures in low 
 23853                                  ; memory following the DOS data. It returns (among many other things) the
 23854                                  ; new starting address of free memory.
 23855                                  
 23856 00000565 2EFF1E[7102]            	call	far [cs:dosinit]	; call dosinit	
 23857                                  			 ; es:di -> sysinitvars_ext
 23858                                  
 23859 0000056A 2E8C1E[8502]            	mov	[cs:def_php],ds		; save pointer to PSP
 23860                                  	
 23861                                  	; 11/12/2022
 23862                                  	; 22/03/2019
 23863 0000056F 0E                      	push	cs
 23864 00000570 1F                      	pop	ds
 23865                                  	; 22/10/2022
 23866 00000571 A3[8302]                	mov	[hi_doscod_size],ax
 23867 00000574 890E[8102]              	mov	[lo_doscod_size],cx
 23868 00000578 8916[7D02]              	mov	[dos_segreinit],dx
 23869                                  	
 23870                                  	; 11/12/2022
 23871                                  	; ds = cs
 23872                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 23873                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 23874                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 23875                                  
 23876                                  	; 05/06/2018 - Retro DOS v3.0
 23877                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 23878                                  
 23879                                  	; 11/12/2022
 23880                                  	; ds = cs
 23881                                  	; 22/10/2022
 23882                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 23883 0000057C 268B05                  	mov	ax,[es:di] ; 22/03/2019
 23884                                  	;mov	[cs:DOSINFO],ax
 23885 0000057F A3[6D02]                	mov	[DOSINFO],ax
 23886                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 23887 00000582 268B4502                	mov	ax,[es:di+2]
 23888                                  	;mov	[cs:DOSINFO+2],ax
 23889 00000586 A3[6F02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 23890                                  
 23891                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 23892 00000589 268B4504                	mov	ax,[es:di+4]
 23893                                  	;mov	[cs:sysi_country],ax
 23894 0000058D A3[7902]                	mov	[sysi_country],ax
 23895                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 23896 00000590 268B4506                	mov	ax,[es:di+6]
 23897                                  	;mov	[cs:sysi_country+2],ax
 23898 00000594 A3[7B02]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 23899                                  
 23900                                  	; 20/04/2019
 23901                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 23902                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 23903                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 23904                                  	; 22/10/2022
 23905                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 23906                                  	;;;mov	[dos_segreinit+2],es
 23907                                  	;;mov	[dos_segreinit+2],ax
 23908                                  	;mov	[cs:dos_segreinit+2],ax
 23909                                  	; 11/12/2022
 23910                                  	; ds = cs
 23911 00000597 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23912 0000059B 8C06[7F02]              	mov	[dos_segreinit+2],es
 23913                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23914                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 23915                                  	;mov	[cs:dos_segreinit+2],es
 23916                                  
 23917                                  ; ----------------------------------------------------------------------------
 23918                                  
 23919                                  ;SYSINIT:0577h:
 23920                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 23921                                  ;SYSINIT:05D1h:	; NoRPLArena 
 23922                                  
 23923                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 23924                                  ;------ Cover up RPL code with an arena
 23925                                  ;SYSINIT:05EBh:
 23926                                  	; 11/12/2022
 23927                                  	; ds = cs
 23928 0000059F 31DB                    	xor	bx,bx
 23929 000005A1 391E[9602]              	cmp	[RPLMemTop],bx ; 0
 23930                                  	;cmp	word [RPLMemTop],0
 23931                                  	;;cmp	word [cs:RPLMemTop],0
 23932 000005A5 7450                    	je	short NoRPLArena
 23933                                  
 23934                                  ;------ alloc all memory
 23935                                  
 23936                                  	; 11/12/2022
 23937                                  	;mov	bx,0FFFFh
 23938 000005A7 4B                      	dec	bx
 23939                                  	; bx = 0FFFFh
 23940 000005A8 B448                    	mov	ah,48h
 23941 000005AA CD21                    	int	21h
 23942                                  			; DOS - 2+ - ALLOCATE MEMORY
 23943                                  			; BX = number of 16-byte paragraphs desired
 23944 000005AC B448                    	mov	ah,48h
 23945 000005AE CD21                    	int	21h
 23946                                  
 23947 000005B0 8EC0                    	mov	es,ax			; get it into ES and save it
 23948 000005B2 06                      	push	es
 23949                                  
 23950                                  ;------ resize upto RPL mem
 23951                                  
 23952                                  	; 11/12/2022
 23953                                  	; ds = cs
 23954                                  	;sub	ax,[cs:RPLMemTop]
 23955 000005B3 2B06[9602]              	sub	ax,[RPLMemTop]
 23956 000005B7 F7D8                    	neg	ax
 23957 000005B9 48                      	dec	ax
 23958 000005BA 89C3                    	mov	bx,ax
 23959 000005BC B44A                    	mov	ah,4Ah
 23960 000005BE CD21                    	int	21h
 23961                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23962                                  			; ES = segment address of block to change
 23963                                  			; BX = new size in paragraphs
 23964                                  
 23965                                  ;------ allocate the free (RPL MEM)
 23966                                  
 23967 000005C0 BBFFFF                  	mov	bx,0FFFFh
 23968 000005C3 B448                    	mov	ah,48h
 23969 000005C5 CD21                    	int	21h
 23970 000005C7 B448                    	mov	ah,48h
 23971 000005C9 CD21                    	int	21h
 23972                                  
 23973                                  ;----- mark that it belongs to RPL
 23974                                  
 23975 000005CB 48                      	dec	ax
 23976 000005CC 8EC0                    	mov	es,ax
 23977                                  	;mov	word [es:arena_owner],8
 23978 000005CE 26C70601000800          	mov	word [es:1],8
 23979                                  	;mov	word [es:arena_name],'RP'
 23980 000005D5 26C70608005250          	mov	word [es:8],'RP'
 23981                                  	;mov	word [es:arena_name+2],'L'
 23982 000005DC 26C7060A004C00          	mov	word [es:10],'L'
 23983                                  	;mov	word [es:arena_name+4],0
 23984 000005E3 26C7060C000000          	mov	word [es:12],0
 23985                                  	;mov	word [es:arena_name+6],0
 23986 000005EA 26C7060E000000          	mov	word [es:14],0	
 23987                                  
 23988 000005F1 07                              pop     es                      ; get back ptr to first block
 23989 000005F2 B449                            mov     ah,49h	; Dealloc	; and free it
 23990 000005F4 CD21                    	int	21h		
 23991                                  					; DOS - 2+ - FREE MEMORY
 23992                                  					; ES = segment address of area to be freed
 23993                                  	; 11/12/2022
 23994 000005F6 F8                      	clc
 23995                                  
 23996                                  ; ----------------------------------------------------------------------------
 23997                                  
 23998                                  NoRPLArena:
 23999                                  	; 11/12/2022
 24000                                  	; ds = cs
 24001                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 24002 000005F7 C43E[6D02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 24003                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 24004                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 24005                                  
 24006                                  	; 11/12/2022
 24007                                  	;clc				; get the extended memory size
 24008                                  
 24009                                  ;	execute the get extended memory size subfunction in the bios int 15h
 24010                                  ;	if the function reports an error do nothing else store the extended
 24011                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 24012                                  ;	currently pointed to by es:di. use the offsets specified in the
 24013                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 24014                                  
 24015 000005FB B488                    	mov	ah,88h
 24016 000005FD CD15                    	int	15h			; check extended memory size
 24017 000005FF 720B                    	jc	short no_ext_memory
 24018                                  			; Get Extended Memory Size
 24019                                  			; Return: CF clear on success
 24020                                  			; AX = size of memory above 1M in K	
 24021                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 24022                                  	; 22/10/2022
 24023 00000601 26894545                	mov	[es:di+45h],ax ; save extended memory size
 24024 00000605 09C0                    	or	ax,ax
 24025 00000607 7403                    	jz	short no_ext_memory
 24026 00000609 E8F006                  	call	ClrVDISKHeader
 24027                                  no_ext_memory:
 24028                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 24029 0000060C 268B4510                	mov	ax,[es:di+10h]
 24030                                  	;add	ax,bufinsiz
 24031                                  	; 30/12/2023 - Retro DOS v5.0
 24032                                  	;add	ax,20		; size of buffer header
 24033 00000610 83C018                  	add     ax,24		; bufinsiz
 24034                                  				; size of buffer header = 24 (PCDOS v7.1 IBMBIO.COM)
 24035                                  				; (it was 20 in MSDOS 6.22 IO.SYS)
 24036                                  	; 11/12/2022
 24037                                  	; ds = cs
 24038 00000613 A3[9D02]                	mov	[singlebuffersize],ax	; total size for a buffer
 24039                                  	;mov	[cs:singlebuffersize],ax	
 24040                                  	; 11/12/2022
 24041 00000616 A0[9802]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 24042                                  	;mov	al,[cs:DEFAULT_DRIVE]
 24043                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 24044 00000619 26884543                	mov	[es:di+43h],al
 24045                                  
 24046                                  ; determine if 386 system...
 24047                                  
 24048                                  ; 30/12/2023
 24049                                  %if 0
 24050                                  	;get_cpu_type			; macro to determine cpu type
 24051                                  
 24052                                  get_cpu_type:
 24053                                  	; 11/12/2022
 24054                                  	pushf
 24055                                  	;push	bx
 24056                                  	;xor	bx,bx
 24057                                  	; 11/12/2022
 24058                                  	;xor	cx,cx
 24059                                  	;
 24060                                  	xor	ax,ax
 24061                                  	; ax = 0
 24062                                  	push    ax
 24063                                  	popf
 24064                                  	pushf
 24065                                  	pop	ax
 24066                                  	and	ax,0F000h
 24067                                  	;cmp	ax,0F000h
 24068                                  	cmp	ah,0F0h 
 24069                                  	je	short cpu_8086
 24070                                  	;mov	ax,0F000h
 24071                                  	mov	ah,0F0h
 24072                                  	; ax = 0F000h
 24073                                  	push	ax
 24074                                  	popf
 24075                                  	pushf
 24076                                  	pop	ax
 24077                                  	;and	ax,0F000h
 24078                                  	and	ah,0F0h
 24079                                  	jz	short cpu_286
 24080                                  cpu_386:
 24081                                  	; 11/12/2022
 24082                                  	;;inc	bx
 24083                                  	;inc	cx
 24084                                  	; 11/12/2022
 24085                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 24086                                  	mov	byte [es:di+44h],1
 24087                                  
 24088                                  	; 03/09/2023 - Retro DOS v5.0 (PCDOS 7.1 Modified SYSINIT)
 24089                                  	; change A20 line on/off check code to the faster (for 32 bit cpu)
 24090                                  	;push	es
 24091                                  	;push	di
 24092                                  	;mov	ax,DOSBIODATASEG ; 0070h
 24093                                  	;mov	es,ax
 24094                                  	;cld
 24095                                  	;mov	di,cpu386_cmpsd ; (IsA20Off)
 24096                                  	;mov	ax,4B9h        ; mov cx,4 ; B90400
 24097                                  	;stosw
 24098                                  	;mov	ax,0F300h      ; repz  ; F3
 24099                                  	;stosw
 24100                                  	;mov	ax,0A766h      ; cmpsd ; 66A7
 24101                                  	;stosw
 24102                                  	;pop	di
 24103                                  	;pop	es
 24104                                  
 24105                                  cpu_286:
 24106                                  	;;;inc	bx
 24107                                  	;;inc	cx
 24108                                  cpu_8086:
 24109                                  	; 11/12/2022
 24110                                  	;;mov	ax,bx
 24111                                  	;pop	bx
 24112                                  	popf
 24113                                  %endif
 24114                                  	;...
 24115                                  
 24116                                  	; 11/12/2022
 24117                                  	;or	cl,cl
 24118                                  	;jz	short not_386_system
 24119                                  	; 11/12/202
 24120                                  	;cmp	cl,2
 24121                                  	;;cmp	ax,2			; is it a 386?
 24122                                  	;jne	short not_386_system	; no: don't mess with flag
 24123                                  
 24124                                  	; 30/12/2023 - Retro DOS v5.0
 24125 0000061D 803E[B606]02            	cmp	byte [cpu_type], 2	; is it a 386?
 24126 00000622 7505                    	jne	short _not_386_cpu	; no: don't mess with flag
 24127                                  	
 24128                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 24129                                  	; 11/12/2022
 24130                                  	; 22/10/2022
 24131 00000624 26C6454401              	mov	byte [es:di+44h],1
 24132                                  _not_386_cpu:
 24133                                  	;mov	al,[es:di+SYSI_NUMIO]
 24134 00000629 268A4520                	mov	al,[es:di+20h]
 24135                                  	; 11/12/2022
 24136                                  	; ds = cs
 24137 0000062D A2[8503]                	mov	[drivenumber],al	; save start of installable block drvs
 24138                                  	;mov	[cs:drivenumber],al
 24139                                  
 24140 00000630 8CC8                    	mov	ax,cs
 24141 00000632 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 24142                                  	; 11/12/2022
 24143                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 24144                                  	;;mov	cx,[cs:singlebuffersize]
 24145                                  	;shr	cx,1			
 24146                                  	;shr	cx,1			; divide size by 16...
 24147                                  	;shr	cx,1
 24148                                  	;shr	cx,1			; ...to get paragraphs...
 24149                                  	;inc	cx			; ... and round up
 24150                                  	; 11/12/2022
 24151 00000635 8B1E[9D02]              	mov	bx,[singlebuffersize]
 24152 00000639 B104                    	mov	cl,4
 24153 0000063B D3EB                    	shr	bx,cl
 24154 0000063D 43                      	inc	bx
 24155                                  
 24156                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 24157                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 24158                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 24159                                  ;	  it is probably safe to assume that the sector size always will be.
 24160                                  ;
 24161                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 24162                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 24163                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 24164                                  ;	  other code from ever causing a problem???
 24165                                  
 24166                                  	; 11/12/2022
 24167 0000063E 29D8                    	sub	ax,bx
 24168                                  	;sub	ax,cx
 24169 00000640 A3[A702]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 24170                                  	; 22/10/2022
 24171                                  	;mov	[cs:top_of_cdss],ax
 24172                                  
 24173                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 24174                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 24175                                  ;	for allocating memory for MagicDrv.
 24176                                  
 24177                                  	; 30/12/2023
 24178                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 24179                                  	;push	di
 24180                                  
 24181                                  	; 22/10/2022
 24182                                  ;	mov	cx,ax			; save pointer for buffer
 24183                                  ;
 24184                                  ;;	now allocate space for 26 CDSs
 24185                                  ;
 24186                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 24187                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 24188                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 24189                                  
 24190                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 24191                                  	; (SYSINIT:064Ch)
 24192 00000643 89C1                    	mov	cx,ax ; (*)
 24193 00000645 2D8F00                  	sub	ax,((26*(curdirlen))+15)/16 ; sub ax,143
 24194 00000648 A3[A502]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 24195 0000064B A3[A302]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 24196                                  	 	
 24197                                  ; setup and initialize the temporary buffer at cx
 24198                                  
 24199                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 24200 0000064E 26C47D12                	les	di,[es:di+12h]
 24201                                  	; 11/12/2022
 24202 00000652 31DB                    	xor	bx,bx
 24203                                  	;xor	ax,ax
 24204                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 24205                                  	;mov	word [es:di+4],0
 24206 00000654 26895D04                	mov	[es:di+4],bx ; 0
 24207                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 24208                                  	;mov	word [es:di],0
 24209 00000658 26891D                  	mov	[es:di],bx ; 0
 24210                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 24211                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 24212                                  	;mov	[es:di+2],ax
 24213                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 24214                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 24215 0000065B 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 24216 0000065F 8EC1                    	mov	es,cx
 24217                                  
 24218                                  	; 11/12/2022
 24219                                  	;xor	ax,ax
 24220                                  	;mov	di,ax			; es:di -> single buffer
 24221 00000661 89DF                    	mov	di,bx
 24222                                  	; di = 0
 24223                                  
 24224                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 24225                                  	; 11/12/2022
 24226                                  	;mov	[es:di],ax ; 0
 24227 00000663 26891D                  	mov	[es:di],bx ; 0
 24228                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 24229                                  	; 11/12/2022
 24230                                  	;mov	[es:di+2],ax ; 0
 24231 00000666 26895D02                	mov	[es:di+2],bx ; 0 
 24232                                  
 24233                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 24234                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 24235                                  
 24236                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 24237 0000066A 26C74504FF00            	mov	word [es:di+4],00FFh
 24238                                  ;SYSINIT:06E6h
 24239                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 24240                                  	;mov	word [es:di+6],0
 24241                                  	; 11/12/2022
 24242                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 24243 00000670 26895D06                	mov	[es:di+6],bx ; 0
 24244                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 24245                                  	;mov	word [es:di+8],0
 24246                                  	; 11/12/2022
 24247                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 24248 00000674 26895D08                	mov	[es:di+8],bx ; 0
 24249                                  
 24250                                  	; 30/12/2023 (!*)
 24251                                  	;pop	di			; restore pointer to DOSINFO data
 24252                                  	;pop	es
 24253                                  
 24254                                  	; 11/12/2022
 24255                                  	; ds = cs
 24256                                  	; 22/10/2022
 24257                                  	;push	cs
 24258                                  	;pop	ds
 24259                                  
 24260 00000678 E82807                  	call	TempCDS			; set up cdss so re_init and sysinit
 24261                                  					;  can make disk system calls
 24262                                  					; tempcds trashes ds
 24263                                  	; 10/05/2019
 24264 0000067B 2E8E1E[8502]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 24265                                  
 24266                                  	;if not ibmjapver
 24267                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 24268                                  	;endif
 24269                                  
 24270                                  	; 22/10/2022
 24271                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 24272                                  	; 30/12/2022
 24273                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 24274                                  	;call	far ptr 70h:89Bh
 24275 00000680 9A[2807]7000            	call	DOSBIODATASEG:RE_INIT
 24276                                  
 24277 00000685 FB                      	sti				; ints ok
 24278 00000686 FC                      	cld				; make sure
 24279                                  
 24280                                  ; 23/03/2019
 24281                                  
 24282                                  ;SYSINIT:069Eh	; 30/12/2022
 24283                                  
 24284                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 24285                                  ; of the way by putting it just below sysinit at end of memory.
 24286                                  
 24287 00000687 8CCB                    	mov	bx,cs
 24288 00000689 83EB10                  	sub	bx,10h
 24289 0000068C 8EC3                    	mov	es,bx
 24290 0000068E 31F6                    	xor	si,si
 24291 00000690 89F7                    	mov	di,si
 24292 00000692 B98000                  	mov	cx,128
 24293 00000695 F3A5                    	rep	movsw
 24294                                  
 24295                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 24296                                  	; 22/10/2022
 24297 00000697 268C063600              	mov	[es:36h],es
 24298                                  
 24299                                   	; Set Process Data Block - Program Segment Prefix address
 24300                                  	; BX = PDB/PSP segment
 24301 0000069C B450                            mov	ah,50h	; SET_CURRENT_PDB
 24302 0000069E CD21                    	int	21h			; tell DOS we moved it
 24303                                  			; DOS - 2+ internal - SET PSP SEGMENT
 24304                                  			; BX = segment address of new PSP
 24305                                  	; 22/10/2022
 24306                                  	; 27/03/2019
 24307                                  	; 30/12/2023
 24308                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 24309                                  
 24310 000006A0 0E                      	push	cs	
 24311 000006A1 1F                      	pop	ds
 24312                                  
 24313                                  	; set up temp. critical error handler
 24314 000006A2 BA[794A]                	mov	dx,int24		; set up int 24 handler
 24315                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 24316                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 24317 000006A5 B82425                  	mov	ax,2524h
 24318 000006A8 CD21                    	int	21h
 24319                                  
 24320 000006AA 803E[8803]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 24321 000006AF 7406                            je      short no_err		   ;  N: continue            M029
 24322 000006B1 BA[9E53]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 24323                                          ; 22/10/2022
 24324                                  	;call	print 			   ;		             M029
 24325                                  	; 12/12/2022
 24326 000006B4 EB04                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0
 24327                                  
 24328                                  	; 30/12/2023 - Retro DOS v5.0
 24329                                  cpu_type:
 24330 000006B6 FF                      	db 0FFh	; db 0
 24331                                  
 24332                                  no_err:
 24333                                  	; 12/05/2019
 24334                                  	;----------------------------------------------
 24335                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 24336                                  	; 22/10/2022 - Retro DOS v4.0
 24337                                  	; 12/12/2022
 24338                                  	; 30/12/2023 - Retro DOS v5.0
 24339 000006B7 BA[7D4A]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 24340                                  p_dosinit_msg:
 24341 000006BA E89743                  	call	print			; Print message
 24342                                  	;----------------------------------------------
 24343                                  	
 24344                                  	; 11/12/2022
 24345                                  	; 22/10/2022
 24346                                  	; 23/03/2019 - Retro DOS v4.0
 24347                                  	;pop	ds			; start of free memory
 24348                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 24349                                  	
 24350                                  	; 11/12/2022
 24351                                  	; 27/03/2019
 24352 000006BD 8A16[9802]              	mov	dl,[DEFAULT_DRIVE]	
 24353                                  	; 30/12/2023
 24354                                  	;pop	ds ; */
 24355                                  
 24356 000006C1 08D2                    	or	dl,dl
 24357                                  	; 30/12/2023
 24358 000006C3 7405                    	jz	short nodrvset		; bios didn't say
 24359                                  	;jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 24360                                  	;dec	dl			; A = 0
 24361                                  	; 18/12/2022
 24362 000006C5 4A                      	dec	dx
 24363 000006C6 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 24364 000006C8 CD21                    	int	21h			; select the disk
 24365                                  			; DOS - SELECT DISK
 24366                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 24367                                  			; Return: AL = number of logical drives
 24368                                  nodrvset:
 24369                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS SYINIT)
 24370                                  	; (SYSINIT:06DFh)
 24371                                  	
 24372                                  	; 30/12/2023 - Retro DOS 5.0
 24373                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0733h)
 24374 000006CA 1E                      	push	ds
 24375 000006CB 29C0                    	sub	ax,ax
 24376 000006CD 8ED8                    	mov	ds,ax ; 0 ; ROM BIOS Data Area
 24377 000006CF A16C04                  	mov	ax,[46Ch] ; timer tick count (18.2 ticks per second)
 24378                                  	;mov	[cs:_timer_lw_],ax
 24379 000006D2 1F                      	pop	ds
 24380                                  	; ds = cs	
 24381 000006D3 A3[8C03]                	mov	[_timer_lw_],ax
 24382                                  
 24383                                  	; ---------------------
 24384                                  
 24385                                  	;ifdef	dblspace_hooks
 24386                                  	;	....
 24387                                  	;	....
 24388                                  	;endif
 24389                                  
 24390                                  	; ---------------------
 24391                                  
 24392                                  	; 30/12/2023 - Retro DOS 5.0 (Modified MSDOS 7.1 IBMBIO.COM SYS SYINIT)
 24393                                  ; ----------------------------------------------------------------------------
 24394                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0740h
 24395                                  
 24396 000006D6 0E                      	push	cs
 24397 000006D7 07                      	pop	es
 24398                                  
 24399                                  	; 07/04/2024
 24400                                   	;mov	word [cs:MagicBackdoor+2],cs
 24401                                  	;mov	word [cs:MagicBackdoor], NullBackdoor
 24402 000006D8 8C0E[9203]               	mov	word [MagicBackdoor+2],cs
 24403 000006DC C706[9003][9403]        	mov	word [MagicBackdoor], NullBackdoor
 24404                                  
 24405                                  	; ds = es = cs = SYSINIT segment
 24406                                  set_drvspc_size:
 24407 000006E2 BE[AB16]                	mov	si,MagicDDName		; "\DBLSPACE.BIN"
 24408                                  set_dblspc_size:
 24409 000006E5 E8792F                  	call	SizeDevice
 24410 000006E8 732B                    	jnc	short wait_for_key_2s
 24411                                  	;cmp	byte [cs:si], 'C'
 24412 000006EA 803C43                  	cmp	byte [si],'C'		; "C:\STACKER.BIN"
 24413 000006ED 740C                    	je	short set_drvspc_name
 24414                                  	;cmp	byte [cs:DEFAULT_DRIVE],3
 24415 000006EF 803E[9802]03            	cmp	byte [DEFAULT_DRIVE],3
 24416 000006F4 7405                    	je	short set_drvspc_name
 24417 000006F6 83EE02                  	sub	si,2			; "C:\DBLSPACE.BIN"
 24418 000006F9 EBEA                    	jmp	short set_dblspc_size
 24419                                  
 24420                                  set_drvspc_name:
 24421                                  	;cmp	byte [cs:MagicDDName+2],'R'	; "BLSPACE.BIN"
 24422 000006FB 803E[AD16]52            	cmp	byte [MagicDDName+2],'R'
 24423 00000700 7408                    	je	short set_stacker_name
 24424                                  	;mov	word [cs:MagicDDName+2],'RV'	; "DRVSPACE.BIN"
 24425 00000702 C706[AD16]5256          	mov	word [MagicDDName+2],'RV'
 24426 00000708 EBD8                    	jmp     short set_drvspc_size
 24427                                  
 24428                                  set_stacker_name:
 24429 0000070A 81FE[B916]              	cmp	si,StackerName		; "C:\STACKER.BIN"
 24430 0000070E 734B                    	jnb	short wfk2s_4
 24431 00000710 BE[BB16]                	mov	si,StackerName+2	; "\STACKER.BIN"
 24432 00000713 EBD0                    	jmp	short set_dblspc_size
 24433                                  
 24434                                  wait_for_key_2s:
 24435                                  	;mov	[cs:MagicDDNamePtr],si
 24436 00000715 8936[A716]              	mov	[MagicDDNamePtr],si
 24437 00000719 1E                      	push	ds
 24438 0000071A 29C0                    	sub	ax,ax
 24439 0000071C 8ED8                    	mov	ds,ax	; 0		; ROMBIOS data area
 24440 0000071E 8B166C04                	mov	dx,[46Ch]		; Counter for Interrupt 1Ah
 24441                                  wfk2s_1:
 24442 00000722 B401                    	mov	ah,1
 24443 00000724 CD16                    	int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 24444                                  				; Return: ZF clear if character in buffer
 24445                                  				; AH = scan code, AL = character
 24446                                  				; ZF set if no character in buffer
 24447 00000726 7511                    	jnz	short wfk2s_2
 24448 00000728 B402                    	mov	ah,2
 24449 0000072A CD16                    	int	16h			; KEYBOARD - GET SHIFT STATUS
 24450                                  					; AL = shift status bits
 24451 0000072C A803                    	test	al,3
 24452 0000072E 7509                    	jnz	short wfk2s_2
 24453 00000730 A16C04                  	mov	ax,[46Ch]		; tick count
 24454 00000733 29D0                    	sub	ax,dx
 24455 00000735 3C25                            cmp	al,37			; 2 seconds
 24456 00000737 72E9                    	jb	short wfk2s_1		; wait for user's key press
 24457                                  wfk2s_2:
 24458 00000739 1F                      	pop	ds			; read/check the pressed key
 24459 0000073A 29DB                    	sub	bx,bx	; bx = 0
 24460 0000073C B402                    	mov	ah,2
 24461 0000073E CD16                    	int	16h			; KEYBOARD - GET SHIFT STATUS
 24462                                  					; AL = shift status bits
 24463 00000740 A803                    	test	al,3			; Left or Right SHIFT key pressed ?
 24464 00000742 7402                    	jz	short wfk2s_3		; no
 24465 00000744 43                      	inc	bx
 24466 00000745 43                      	inc	bx	; bx = 2
 24467                                  wfk2s_3:
 24468 00000746 B401                    	mov	ah,1
 24469 00000748 CD16                    	int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 24470                                  				; Return: ZF clear if character in buffer
 24471                                  				; AH = scan code, AL = character
 24472                                  				; ZF set if no character in buffer
 24473 0000074A 7418                    	jz	short wfk2s_6
 24474 0000074C 80FC65                  	cmp	ah,65h			; F8 key pressed ?
 24475 0000074F 740C                    	jz	short wfk2s_5
 24476 00000751 80FC62                  	cmp	ah,62h			; F5 key pressed ?
 24477 00000754 750E                    	jnz	short wfk2s_6
 24478                                  	;mov	byte [cs:F5_key],1
 24479 00000756 C606[8E03]01            	mov	byte [F5_key],1
 24480                                  wfk2s_4:
 24481 0000075B EB49                    	jmp	short ProcessConfig	; continue (as normal/default state)
 24482                                  
 24483                                  wfk2s_5:
 24484                                  	;mov	byte [cs:F8_key],1
 24485 0000075D C606[8F03]01            	mov	byte [F8_key],1
 24486 00000762 EB42                    	jmp	short ProcessConfig
 24487                                  
 24488                                  wfk2s_6:
 24489 00000764 E8AA02                  	call	AllocFreeMem		; get the largest free block from DOS
 24490 00000767 E8700F                  	call	MagicPreload		; **** PRE-LOAD MAGICDRV!!! ****
 24491                                  
 24492                                  	; 07/04/2024 - Retro DOS v5.0
 24493                                  	; (DS may not be same with CS here!)
 24494 0000076A 0E                      	push	cs
 24495 0000076B 1F                      	pop	ds ; *
 24496 0000076C 8E06[6803]              	mov	es,[area]
 24497                                                        
 24498 00000770 09C0                    	or	ax,ax			; error?
 24499 00000772 7406                    	jz	short wfk2s_7
 24500                                  PreloadFailed:
 24501 00000774 B449                    	mov	ah,49h			; Dealloc ; free the block if no load
 24502                                  	;;mov	es,[cs:area]
 24503                                  	;mov	es,[area]
 24504 00000776 CD21                    	int	21h		; DOS - 2+ - FREE MEMORY
 24505                                  				; ES = segment address of area to be freed
 24506 00000778 EB2C                    	jmp	short ProcessConfig
 24507                                  
 24508                                  wfk2s_7:
 24509                                  	;mov	bx,[cs:memhi]
 24510                                  	;mov	es,[cs:area]
 24511                                  	;sub	bx,[cs:area]		; get desired block size in paras
 24512                                  	; 07/04/2024 - Retro DOS v5.0
 24513                                  	; ds = cs ; *
 24514 0000077A 8CC3                    	mov	bx,es
 24515 0000077C F7DB                    	neg	bx		; bx = - [cs:area]
 24516 0000077E 031E[6403]              	add	bx,[memhi]	; bx = [cs:memhi] - [cs:area]
 24517                                  
 24518 00000782 B44A                    	mov	ah,4Ah
 24519 00000784 CD21                    	int	21h		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 24520                                  				; ES = segment address of block to change
 24521                                  				; BX = new size in paragraphs
 24522 00000786 8CC0                    	mov	ax,es
 24523 00000788 48                      	dec	ax
 24524 00000789 8EC0                    	mov	es,ax			; get Magicdrv arena
 24525                                  
 24526 0000078B 26C70601000800          	mov	word [es:1],8	; [es:arena_owner]
 24527                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 24528 00000792 26C70608005344          	mov     word [es:8],4453h ; [es:arena_name],'SD' ; System Data
 24529                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h
 24530 00000799 2603060300                      add	ax,[es:3]		; get MCB length
 24531                                  	;add	ax,[es:ARENA.SIZE]
 24532                                  
 24533                                  	;lds	si,[cs:DOSINFO]		; get to arena header
 24534 0000079E C536[6D02]              	lds	si,[DOSINFO]
 24535 000007A2 40                              inc     ax			; get addr of next MCB
 24536 000007A3 8944FE                          mov     [si-2], ax      	; store that
 24537                                  
 24538                                  ; ----------------------------------------------------------------------------
 24539                                  
 24540                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 24541                                  
 24542                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 24543                                  ; ----------------------------------------------------------------------------
 24544                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 24545                                  ; ----------------------------------------------------------------------------
 24546                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 24547                                  ; ----------------------------------------------------------------------------
 24548                                  ; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM SYSINIT)
 24549                                  
 24550                                  ; (MSDOS 6.22 IO.SYS - SYSINIT:0744h)
 24551                                  
 24552                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0820h
 24553                                  
 24554                                  ProcessConfig:
 24555                                  	;; ds = cs ; 27/03/2019
 24556                                  	; 11/12/2022
 24557                                  	; ds <> cs	
 24558                                  
 24559                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 24560                                  
 24561 000007A6 E8BF1C                  	call	doconf			; do pre-scan for dos=high/low
 24562                                  
 24563                                  	; 11/12/2022
 24564                                  	; 27/03/2019
 24565                                  	; ds = cs (at return from doconf)
 24566                                  
 24567                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 24568                                  ; It will either be relocated to low memory, above the DOS data structures,
 24569                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 24570                                  ; code entry points will be located in low memory. Dos_segreinit is used
 24571                                  ; to tell the DOS data where the code has been placed, and to install the
 24572                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 24573                                  ; must first initialize it in its present location and load the installable
 24574                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 24575                                  ; relocate the DOS code into HiMem.
 24576                                  ;
 24577                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 24578                                  ; to install the low memory stub (this must be done before allowing any
 24579                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 24580                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 24581                                  ; been patched.
 24582                                  
 24583                                  	; 22/10/2022 - Retro DOS v4.0
 24584                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 24585                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 24586                                  	; 11/12/2022
 24587 000007A9 803E[6C02]00            	cmp	byte [runhigh],0
 24588 000007AE 7404                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 24589                                  
 24590                                  ;------ user chose to load high
 24591                                  
 24592                                  	; 22/10/2022
 24593                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 24594                                  	; 11/12/2022
 24595                                  	; ds = cs
 24596                                  ; 13/04/2024
 24597                                  %if 0
 24598                                  	mov	es,[CURRENT_DOS_LOCATION]
 24599                                  %endif
 24600                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 24601                                  	; 27/03/2019
 24602                                  	;;mov	es,[FINAL_DOS_LOCATION]
 24603                                  
 24604 000007B0 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 24605                                  
 24606                                  ; 13/04/2024
 24607                                  %if 0	
 24608                                  	; 11/12/2022
 24609                                  	; ds = cs
 24610                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 24611                                  	call	far [dos_segreinit]
 24612                                  %endif
 24613 000007B2 EB08                    	jmp	short do_multi_pass
 24614                                  
 24615                                  ;------ User chose to load dos low
 24616                                  
 24617                                  dont_install_stub:
 24618                                  	; 22/10/2022
 24619 000007B4 31DB                    	xor	bx,bx			; M012
 24620                                  					; don't use int 21 call to alloc mem
 24621 000007B6 E80E03                  	call	MovDOSLo		; move it !
 24622                                  
 24623 000007B9 B80100                  	mov	ax,1			; dont install stub
 24624                                  
 24625                                  ; 13/04/2024
 24626                                  %if 1
 24627                                  do_multi_pass:
 24628                                  %endif
 24629                                  	; 11/12/2022
 24630                                  	; ds = cs
 24631 000007BC 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 24632                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 24633                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 24634                                  	; 27/03/2019
 24635                                  ;do_multi_pass:
 24636                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 24637                                  
 24638                                  	; 11/12/2022
 24639                                  	; ds =cs
 24640                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 24641 000007C0 FF1E[7D02]              	call	far [dos_segreinit]
 24642                                  
 24643                                  ; 13/04/2024
 24644                                  %if 0
 24645                                  do_multi_pass:
 24646                                  %endif
 24647                                  
 24648 000007C4 E84A02                  	call	AllocFreeMem		; allocate all the free mem
 24649                                  					; & update [memhi] & [area]
 24650                                  					; start of free memory.
 24651                                  	;ifdef	dblspace_hooks
 24652                                  	;mov	bx,0			; magic backdoor to place int hooks
 24653                                  	;call	cs:MagicBackdoor
 24654                                  	;endif
 24655                                  
 24656                                  	; 07/04/2024 - Retro DOS v5.0
 24657                                  	; (PCDOS 7.1 IBMBIO.COM)
 24658                                  	;cmp	byte [cs:F5_key],1
 24659 000007C7 803E[8E03]01            	cmp	byte [F5_key],1
 24660 000007CC 740D                    	je	short skip_magicbackdoor
 24661                                  	;cmp	byte [cs:F8_key],1
 24662 000007CE 803E[8F03]01            	cmp	byte [F8_key],1
 24663 000007D3 7406                    	je	short skip_magicbackdoor
 24664 000007D5 31DB                    	xor	bx,bx	; bx = 0	; magic backdoor to place int hooks
 24665                                  	;call	far [cs:MagicBackdoor]
 24666 000007D7 FF1E[9003]              	call	far [MagicBackdoor]
 24667                                  
 24668                                  skip_magicbackdoor:
 24669                                  
 24670                                  ; Now, process config.sys some more.  
 24671                                  ; Load the device drivers and install programs
 24672                                  
 24673                                  	; 22/10/2022
 24674                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 24675                                  	; 11/12/2022
 24676                                  	; ds = cs
 24677 000007DB FE06[CD02]              	inc	byte [multi_pass_id]
 24678 000007DF E8221D                  	call	multi_pass		; load device drivers
 24679 000007E2 E8EA31                  	call	ShrinkUMB
 24680 000007E5 E80E32                  	call	UnlinkUMB		; unlink all UMBs	;M002
 24681                                  	; 02/11/2022
 24682                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 24683                                  	; 11/12/2022
 24684                                  	; ds = cs
 24685 000007E8 FE06[CD02]              	inc	byte [multi_pass_id]
 24686 000007EC E8151D                  	call	multi_pass		; was load ifs (now does nothing)
 24687                                  
 24688                                  	;ifdef	dblspace_hooks
 24689                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 24690                                  	;endif
 24691                                  
 24692                                  	; ds = cs
 24693                                  
 24694                                  	; 07/04/2024
 24695                                  	;call	endfile			; setup fcbs, files, buffers etc
 24696                                  
 24697                                  	;ifdef	dblspace_hooks
 24698                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 24699                                  	;endif
 24700                                  
 24701                                  	; 07/04/2024 - Retro DOS v5.0
 24702                                  	; (PCDOS 7.1 IBMBIO.COM)
 24703                                  	;cmp	byte [cs:F5_key],1
 24704 000007EF 803E[8E03]01            	cmp	byte [F5_key],1
 24705 000007F4 7412                    	je	short skip_magicpostload
 24706                                  	;cmp	byte [cs:F8_key],1
 24707 000007F6 803E[8F03]01            	cmp	byte [F8_key],1
 24708 000007FB 740B                    	je	short skip_magicpostload
 24709 000007FD E8B710                  	call	MagicPostload		; make sure Magicdrv is final placed
 24710                                  	; 13/04/2024
 24711                                  	; ds = cs
 24712 00000800 E83E06                  	call	endfile			; setup fcbs, files, buffers etc
 24713 00000803 E81011                  	call	MagicSetCdss		; disable CDSs of reserved drives
 24714                                  	; ds = cs
 24715 00000806 EB03                    	jmp	short _@_
 24716                                  
 24717                                  skip_magicpostload:
 24718                                  	; 13/04/2024
 24719                                  	; ds = cs
 24720 00000808 E83606                  	call	endfile			; setup fcbs, files, buffers etc
 24721                                  _@_:
 24722                                  
 24723                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 24724                                  ;to device drivers. This has been moved up to this point to avoid problems 
 24725                                  ;with overlays called from installed programs
 24726                                  
 24727                                  	; 11/12/2022
 24728                                  	; ds = cs
 24729                                  
 24730                                  	;;mov	ax,Bios_Data ; 0070h
 24731                                  	;mov	ax,KERNEL_SEGMENT
 24732                                  	; 21/10/2022
 24733 0000080B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 24734 0000080E 8EC0                    	mov	es,ax			; point ES to bios data
 24735                                  
 24736 00000810 26C606[DD07]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 24737                                  
 24738                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24739                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 24740                                  	;test	byte [cs:install_flag],1
 24741                                  	; 11/12/2022
 24742                                  	; ds = cs
 24743 00000816 F606[CE02]01            	test	byte [install_flag],1
 24744                                  	;test	byte [cs:install_flag],have_install_cmd
 24745                                  					; are there install commands?
 24746 0000081B 7407                    	jz	short dolast		; no, no need for further processing
 24747                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 24748                                  	; 11/12/2022
 24749                                  	; ds =cs
 24750 0000081D FE06[CD02]              	inc	byte [multi_pass_id]
 24751 00000821 E8E01C                  	call	multi_pass		; execute install= commands
 24752                                  
 24753                                  dolast:
 24754                                  	
 24755                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 24756                                  ;  free the confbot area used for config.sys and sysinit itself.
 24757                                  
 24758                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 24759                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 24760                                  ; anything, but just set up the ROM area for suballocation (or print
 24761                                  ; a message if HiMem is not available).
 24762                                  ;
 24763                                  ; There is also this little hack for CPM style DOS calls that needs to
 24764                                  ; be done when A20 is set...
 24765                                  
 24766                                  	; 11/12/2022
 24767                                  	; ds = cs
 24768                                  
 24769                                  	; 22/10/2022
 24770                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 24771                                  	; 11/12/2022
 24772 00000824 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 24773 00000829 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 24774 0000082B E84802                  	call	LoadDOSHiOrLo
 24775                                  _@@_:
 24776                                  	;cmp	byte [cs:runhigh],0	; are we running low
 24777                                  	; 11/12/2022
 24778                                  	; ds = cs
 24779 0000082E 803E[6C02]00            	cmp	byte [runhigh],0
 24780                                  	;je	short _@@@
 24781 00000833 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 24782 00000835 E84C05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 24783                                  _@@@:
 24784                                  
 24785                                  ; We are now done with CONFIG.SYS processing
 24786                                  
 24787                                  ConfigDone:
 24788                                  	; 12/12/2022
 24789                                  	; 22/10/2022
 24790                                  	;mov	byte [cs:donotshownum],1 
 24791                                  					; done with config.sys.
 24792                                  					; do not show line number message.
 24793                                  	;mov	es,[cs:area]
 24794                                  	; 12/12/2022
 24795                                  	; ds = cs
 24796                                  	; 27/03/2019
 24797 00000838 C606[5503]01            	mov	byte [donotshownum],1
 24798 0000083D 8E06[6803]              	mov	es,[area]
 24799                                  
 24800 00000841 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 24801 00000843 CD21                    	int	21h
 24802                                  			; DOS - 2+ - FREE MEMORY
 24803                                  			; ES = segment address of area to be freed
 24804                                  
 24805                                  	; 22/10/2022
 24806                                  	;test	word [cs:install_flag],2
 24807                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 24808                                  	;test	byte [cs:install_flag],has_installed
 24809                                  	; 11/12/2022
 24810                                  	; ds = cs
 24811 00000845 F606[CE02]02            	test	byte [install_flag],2 ; has_installed
 24812                                  	;test	byte [install_flag],has_installed
 24813 0000084A 741F                    	jz	short skip_free_sysinitbase ; no.
 24814                                  
 24815                                  ; set block from the old_area with impossible_owner_size.
 24816                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 24817                                  ; handle install= command.
 24818                                  
 24819                                  	; 12/12/2022
 24820                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 24821                                  	;push	bx
 24822                                  	
 24823                                  	; 22/10/2022
 24824                                  	;mov	es,[cs:old_area]
 24825                                  	;mov	bx,[cs:impossible_owner_size]
 24826                                  	; 12/12/2022
 24827                                  	; ds = cs
 24828 0000084C 8E06[5E03]              	mov	es,[old_area]
 24829 00000850 8B1E[6003]              	mov	bx,[impossible_owner_size]
 24830                                  	
 24831 00000854 B44A                    	mov	ah,4Ah ; SETBLOCK
 24832 00000856 CD21                    	int	21h
 24833                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 24834                                  			; ES = segment address of block to change
 24835                                  			; BX = new size in paragraphs
 24836 00000858 8CC0                    	mov	ax,es
 24837 0000085A 48                      	dec	ax
 24838 0000085B 8EC0                    	mov	es,ax			; point to arena
 24839                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 24840 0000085D 26C70601000800          	mov	word [es:1],8
 24841                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 24842 00000864 26C70608005344          	mov	word [es:8],'SD'
 24843                                  	
 24844                                  	; 12/12/2022
 24845                                  	;pop	bx
 24846                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 24847                                  
 24848                                  skip_free_sysinitbase:
 24849                                  	; 22/10/2022
 24850                                  	;cmp	byte [cs:runhigh],0
 24851                                  	; 12/12/2022
 24852                                  	; ds = cs
 24853 0000086B 803E[6C02]00            	cmp	byte [runhigh],0	
 24854 00000870 7403                    	je	short _@@@_ ; 04/07/2023
 24855                                  
 24856 00000872 E8DF03                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 24857                                  
 24858                                  ; ----------------------------------------------------------------------------
 24859                                  
 24860                                  _@@@_:
 24861                                  	; 12/12/2022
 24862                                  	; ds = cs
 24863                                  	; 22/10/2022
 24864                                  	; 27/03/2019
 24865                                  	;push	cs
 24866                                  	;pop	ds			; point DS to sysinitseg
 24867                                  
 24868                                  ; set up the parameters for command
 24869                                  
 24870                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 24871                                  ;;ifdef	MULTI_CONFIG
 24872                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 24873                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 24874                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 24875                                  ;	; !!!
 24876                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 24877                                  ;       ; !!!
 24878                                  ;	call    disable_autoexec        ; no, we should disable it
 24879                                  ;process_autoexec:
 24880                                  ;;endif	; !!!
 24881                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 24882                                  ;	; !!!
 24883                                  
 24884                                  	; 22/10/2022 
 24885                                  	;mov     cl,[command_line]
 24886                                          ;mov     ch,0
 24887                                          ;inc     cx
 24888                                          ;mov     si,command_line	
 24889                                  	;add     si,cx
 24890                                          ;mov     byte [si],cr	; cr-terminate command line
 24891                                  
 24892                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 24893                                  	; (SYSINIT:0809h)
 24894                                  
 24895                                  	;;;;
 24896                                  
 24897                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 24898                                  	; (SYSINIT:0813h)
 24899                                  	; ds = cs
 24900                                  	; push	cs
 24901                                  	; pop	ds
 24902                                  
 24903 00000875 C606[6419]00            	mov	byte [config_cmd],0	; set special code for query_user
 24904 0000087A E89F3D                  	call    query_user		; to issue the AUTOEXEC prompt
 24905                                  	; 07/04/2024
 24906                                  	;jnc	short process_autoexec	; we should process autoexec normally
 24907                                  
 24908                                  	; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 24909                                  	;;;
 24910 0000087D 9C                      	pushf
 24911 0000087E F606[814C]01            	test	byte [bDisableUI],1
 24912 00000883 7507                    	jnz	short _@@@@_	; F5 clean/interactive boot option (has been) disabled
 24913 00000885 803E[8E03]01            	cmp	byte [F5_key],1
 24914 0000088A 7405                    	je	short _@@@@@_	; F5 key pressed, bypass AUTOEXEC.BAT (clean boot)
 24915                                  _@@@@_:
 24916 0000088C 9D                      	popf
 24917 0000088D 730B                    	jnc	short process_autoexec	; we should process autoexec normally
 24918 0000088F EB01                    	jmp	short bypass_autoexec
 24919                                  _@@@@@_:
 24920 00000891 9D                      	popf			; cf status at the return from 'query_user' call
 24921                                  bypass_autoexec:
 24922                                  	;;;
 24923                                  
 24924                                  	; !!!
 24925 00000892 800E[854C]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 24926                                  	; !!!
 24927 00000897 E87D3E                  	call    disable_autoexec        ; no, we should disable it
 24928                                  process_autoexec:
 24929                                  	; !!!
 24930 0000089A E8C53E                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 24931                                  
 24932                                  	;mov     cl,[command_line]
 24933                                  	; 30/12/2022
 24934 0000089D BE[BB4B]                	mov	si,command_line
 24935 000008A0 8A0C                    	mov	cl,[si]
 24936 000008A2 B500                    	mov     ch,0
 24937 000008A4 41                      	inc     cx
 24938                                  	;mov	si,command_line
 24939 000008A5 01CE                    	add     si,cx
 24940 000008A7 C6040D                  	mov     byte [si],cr ; 0Dh	; cr-terminate command line
 24941                                  	
 24942                                  	;;;;		
 24943                                  
 24944                                  ; 30/12/2022 - Retro DOS v4.2
 24945                                  %if 0
 24946                                  	;mov	si,(offset command_line+1)
 24947                                  	mov	si,command_line+1
 24948                                  	push    ds
 24949                                  	pop     es
 24950                                  	mov     di,si
 24951                                  	mov     cl,0FFh ; -1
 24952                                  _@_loop:
 24953                                  	inc     cl ; +1
 24954                                  	lodsb
 24955                                  	stosb
 24956                                  	or      al,al
 24957                                  	jnz     short _@_loop
 24958                                  	dec     di
 24959                                  	mov     al,0Dh
 24960                                  	stosb			; cr-terminate command line
 24961                                  	mov     [command_line],cl ; command line length (except CR)
 24962                                  %endif
 24963                                  
 24964                                  ; ----------------------------------------------------------------------------
 24965                                  
 24966                                  ;   Once we get to this point, the above code, which is below "retry"
 24967                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 24968                                  ;   which follow....)
 24969                                  
 24970                                  retry:		; PCDOS 7.1 IBMBIO.COM - SYSINIT:094Ch ; 07/04/2024
 24971 000008AA BA[2D4B]                	mov	dx,commnd	; now pointing to file description
 24972                                  
 24973                                  ; we are going to open the command interpreter and size it as is done in
 24974                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 24975                                  ; there is not enough room for the command interpreter,exec will probably
 24976                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 24977                                  ; here to catch it. this code is not perfect (for instance .exe command
 24978                                  ; interpreters are possible) because it does its sizing based on the
 24979                                  ; assumption that the file being loaded is a .com file. it is close enough to
 24980                                  ; correctness to be usable.
 24981                                  
 24982                                  ; first, find out where the command interpreter is going to go.
 24983                                  
 24984 000008AD 52                      	push	dx		; save pointer to name
 24985 000008AE BBFFFF                  	mov	bx,0FFFFh
 24986 000008B1 B448                    	mov	ah,48h	; ALLOC
 24987 000008B3 CD21                            int     21h             ; get biggest piece
 24988 000008B5 B448                    	mov	ah,48h	; ALLOC
 24989 000008B7 CD21                    	int	21h		; second time gets it
 24990 000008B9 726B                    	jc	short memerrjx	; oooops
 24991                                  
 24992 000008BB 8EC0                    	mov	es,ax
 24993 000008BD B449                    	mov	ah,49h	; DEALLOC
 24994 000008BF CD21                    	int	21h		; give it right back
 24995 000008C1 89DD                    	mov	bp,bx
 24996                                  
 24997                                  ; es:0 points to block,and bp is the size of the block in para.
 24998                                  
 24999                                  ; we will now adjust the size in bp down by the size of sysinit.
 25000                                  ; we need to do this because exec might get upset if some of the exec
 25001                                  ; data in sysinit is overlayed during the exec.
 25002                                  
 25003                                  	; 22/10/2022
 25004                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 25005 000008C3 8B1E[9402]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 25006 000008C7 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 25007                                  
 25008                                  ; Note that the "config_wrkseg" environment data is a segment in
 25009                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 25010                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 25011                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 25012                                  ; we need to make sure that there's no way Exec will stomp on that data
 25013                                  ; before it can copy it, and one way to do that is to make the available
 25014                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 25015                                  ; from the "memory_size" segment value (which is typically A000h) instead
 25016                                  ; of the current sysinit CS....
 25017                                  ;
 25018                                  ; The reason I use the term "paranoid" is because this code should have
 25019                                  ; slid the data required by Exec up to the very top of memory, because as
 25020                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 25021                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 25022                                  ; consumes). Now it's just a little worse (65K or more, depending on
 25023                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 25024                                  ; is determined by the size of CONFIG.SYS.... -JTP
 25025                                  
 25026                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 25027                                  	; (SYSINIT:0858h)
 25028 000008C9 8B0E[6019]              	mov	cx,[config_envlen]
 25029 000008CD E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 25030 000008CF A1[6219]                        mov	ax,[config_wrkseg]	
 25031                                  
 25032                                  	; 22/10/2022
 25033                                  	;mov	cx,[config_envlen]
 25034                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 25035                                          ;mov	ax,[config_wrkseg]
 25036                                  ;no_env:
 25037                                  	; 22/10/2022
 25038                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 25039                                  no_env:
 25040                                  	; 30/12/2022
 25041                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 25042 000008D2 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 25043 000008D4 83C311                  	add	bx,11h		; add the sysinit php
 25044 000008D7 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 25045 000008D9 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 25046                                  
 25047                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 25048 000008DB B8003D                          mov	ax,3D00h
 25049 000008DE F9                      	stc                     ; in case of int 24
 25050 000008DF CD21                    	int	21h
 25051 000008E1 7271                    	jc	short comerr	; ooops
 25052                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 25053                                  			; DS:DX -> ASCIZ filename
 25054                                  			; AL = access mode
 25055                                  			; 0 - read
 25056                                  	; 22/10/2022
 25057                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 25058 000008E3 89C3                            mov     bx,ax           ; handle in bx
 25059                                  
 25060                                  ;   If the standard command interpreter is being used, verify it is correct
 25061                                  
 25062                                  	; 30/12/2022 - Retro DOS v4.2
 25063                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 25064 000008E5 803E[2A4B]00            	cmp	byte [newcmd],0	; was a new shell selected?
 25065 000008EA 7518                    	jne	short skip_validation ; yes
 25066                                  	; 07/04/2024 - Retro DOS v5.0
 25067                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:098Eh)
 25068 000008EC BA[A608]                	mov	dx,retry-4	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0948h
 25069 000008EF B90400                  	mov	cx,4		;
 25070 000008F2 B43F                    	mov	ah,READ		;
 25071 000008F4 CD21                    	int	21h		;
 25072 000008F6 803E[A608]E9            	cmp	byte [retry-4],0E9h
 25073 000008FB 7557                    	jne	short comerr
 25074                                  	; 20/04/2019 - Retro DOS v4.0
 25075                                  	; 30/12/2022 
 25076                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 25077                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)
 25078                                  	; 07/04/2024 - Retro DOS v5.0
 25079                                  	;;cmp	byte [retry-1],66h ; .. COMMAND.COM Version 6.22 (16h&0Fh)
 25080                                  	;cmp	byte [retry-1],7Ah ; PCDOS 7.1 IBMBIO.COM - SYSINIT:099Fh
 25081                                  				; .. COMMAND.COM Version 7.10 (0Ah&0Fh)
 25082 000008FD 803E[A908]7A            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 25083 00000902 7550                    	jne	short comerr	;
 25084                                  
 25085                                  	; 22/10/2022
 25086                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 25087                                  	;jne	short skip_validation ; yes
 25088                                  	;mov	dx,retry-4
 25089                                  	;mov	cx,4		;
 25090                                  	;mov	ah,READ		;
 25091                                  	;int	21h		;
 25092                                  	;cmp	byte [retry-4],0E9h
 25093                                  	;jne	short comerr
 25094                                  	;; 20/04/2019 - Retro DOS v4.0
 25095                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 25096                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 25097                                  	;jne	short comerr	;
 25098                                  
 25099                                  ;skip_validation:
 25100                                  	; 22/10/2022
 25101                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 25102                                  skip_validation:
 25103                                  	; 30/12/2022
 25104                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 25105 00000904 31C9                    	xor	cx,cx
 25106 00000906 31D2                    	xor	dx,dx
 25107                                  	;mov	ax,(LSEEK<<8)|2
 25108 00000908 B80242                  	mov	ax,4202h
 25109 0000090B F9                      	stc			; in case of int 24
 25110 0000090C CD21                    	int	21h		; get file size in dx:ax
 25111 0000090E 7244                    	jc	short comerr
 25112                                  				; convert size in dx:ax to para in ax
 25113 00000910 83C00F                  	add	ax,15		; round up size for conversion to para
 25114 00000913 83D200                  	adc	dx,0
 25115 00000916 E88104                  	call	off_to_para
 25116 00000919 B10C                    	mov	cl,12
 25117 0000091B D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 25118 0000091D 09D0                    	or	ax,dx		; ax is now # of para for file
 25119 0000091F 83C010                  	add	ax,10h		; 100h byte php
 25120 00000922 39E8                    	cmp	ax,bp		; will command fit in available mem?
 25121 00000924 7208                    	jb	short okld	; jump if yes.
 25122                                  
 25123                                  ; 30/12/2022
 25124                                  %if 0
 25125                                  	; 22/10/2022
 25126                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 25127                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 25128                                  	; 02/11/2022
 25129                                  	;jmp	mem_err
 25130                                  	; 11/12/2022
 25131                                  	; ds = cs
 25132                                  	jmp	mem_err2
 25133                                  %endif
 25134                                  	; 30/12/2022
 25135                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 25136                                  memerrjx:
 25137 00000926 BA[4951]                	mov	dx,badmem 	; "Configuration too large for memory"
 25138 00000929 E82841                  	call	print
 25139 0000092C EB3A                    	jmp     short continue
 25140                                  
 25141                                  okld:
 25142 0000092E B43E                    	mov	ah,3Eh ; CLOSE
 25143 00000930 CD21                    	int	21h		; close file
 25144                                  
 25145                                  	; 22/10/2022
 25146 00000932 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 25147                                  
 25148                                  	; 24/03/2019
 25149                                  
 25150 00000933 0E                      	push	cs		; point es to sysinitseg
 25151 00000934 07                      	pop	es
 25152 00000935 BB[BF02]                        mov     bx,COMEXE	; point to exec block
 25153                                  	; 22/10/2022
 25154                                  	;pop	dx              ; recover pointer to name
 25155                                  
 25156                                  ;;ifdef	MULTI_CONFIG
 25157                                  
 25158                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 25159                                  ;   there will be data if there were any valid SET commands and/or if a menu
 25160                                  ;   selection was made (in which case the CONFIG environment variable will be
 25161                                  ;   set to that selection).
 25162                                  
 25163                                  	; 23/10/2022
 25164                                  	;mov	cx,[config_envlen]
 25165                                  	;jcxz	no_envdata
 25166                                          ;mov	cx,[config_wrkseg]
 25167                                  ;no_envdata:
 25168                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 25169                                  	;mov	[bx],cx
 25170                                  
 25171                                  ;;endif	;MULTI_CONFIG
 25172                                  
 25173                                  	; 30/12/2022 - Retro DOS v4.2
 25174                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 25175 00000938 8B0E[6019]              	mov	cx,[config_envlen]
 25176 0000093C E304                    	jcxz	no_envdata
 25177 0000093E 8B0E[6219]                      mov	cx,[config_wrkseg]
 25178                                  no_envdata:
 25179                                  	;mov	[bx+EXEC0.ENVIRON],cx
 25180 00000942 890F                    	mov	[bx],cx	
 25181                                  	
 25182                                  	; 23/10/2022
 25183                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 25184                                  
 25185                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 25186 00000944 8C4F04                  	mov	[bx+4],cs
 25187                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 25188 00000947 8C4F08                  	mov	[bx+8],cs
 25189                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 25190 0000094A 8C4F0C                  	mov	[bx+12],cs
 25191                                  
 25192                                  	;mov	ax,(EXEC<<8) + 0
 25193                                  	; 23/10/2022
 25194                                  	;xor	ax,ax
 25195                                  	;mov	ah,4Bh
 25196                                  	; 04/07/2023
 25197                                  	;mov	ax,4B00h
 25198 0000094D B8004B                  	mov	ax,(EXEC<<8)
 25199                                  
 25200 00000950 F9                      	stc                     ; in case of int 24
 25201 00000951 CD21                            int     21h             ; go start up command
 25202                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 25203                                  			; DS:DX -> ASCIZ filename
 25204                                  			; ES:BX -> parameter block
 25205                                  			; AL = subfunc: load & execute program
 25206                                  	;push	cs
 25207                                  	;pop	ds
 25208                                  
 25209                                  	; 13/04/2024
 25210                                  	; 23/10/2022
 25211 00000953 52                      	push	dx		; push to balance fall-through pop
 25212                                  
 25213                                  ; note fall through if exec returns (an error)
 25214                                  comerr:
 25215                                  	; 23/10/2022
 25216                                  ;;ifdef	MULTI_CONFIG
 25217                                  	;cmp	byte [commnd4],0
 25218                                  	;je	short comerr2	; all defaults exhausted, print err msg
 25219                                  	;cmp	byte [newcmd],0
 25220                                  	;je	short continue	; don't print err msg for defaults just yet
 25221                                  ;comerr2:
 25222                                  ;;endif
 25223                                  
 25224                                  	; 30/12/2022 - Retro DOS v4.2
 25225                                  	;push	cs
 25226                                  	;pop	ds
 25227                                  	; 07/04/2024
 25228                                  	; ds = cs
 25229                                  
 25230 00000954 803E[9E4B]00            	cmp	byte [commnd4],0
 25231 00000959 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 25232 0000095B 803E[2A4B]00            	cmp	byte [newcmd],0
 25233 00000960 7406                    	je	short continue	; don't print err msg for defaults just yet
 25234                                  comerr2:
 25235                                  	; 07/04/2024
 25236                                  	;push	dx ; 30/12/2022
 25237                                  
 25238                                  	; 23/10/2022
 25239 00000962 BA[C550]                        mov     dx,badcom	; want to print command error
 25240 00000965 E8C040                  	call	badfil
 25241                                  	
 25242                                  	; 07/04/2024
 25243                                  	;pop	dx  ; 30/12/2022
 25244                                  continue:
 25245                                  	; 13/04/2024
 25246                                  	; 23/10/2022
 25247 00000968 5A                      	pop	dx
 25248                                  
 25249                                  ; 30/12/2022
 25250                                  %if 0
 25251                                  
 25252                                  ;;ifndef MULTI_CONFIG
 25253                                  	;jmp	stall
 25254                                  	; 24/10/2022
 25255                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 25256                                  	jmp	short stall
 25257                                  ;;else
 25258                                  
 25259                                  %endif
 25260                                  	
 25261                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 25262                                  ;%if 1
 25263                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 25264                                  ;%if 0	
 25265 00000969 B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 25266 0000096B CD21                    	int	21h             ;
 25267 0000096D 0441                    	add	al,'A'          ;
 25268 0000096F 88C2                    	mov	dl,al           ; DL == default drive letter
 25269 00000971 BE[6D4B]                	mov	si,commnd2
 25270 00000974 803E[2A4B]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 25271 00000979 7505                    	jne	short do_def2	; then try the 2nd alternate;
 25272 0000097B C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 25273 0000097E EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 25274                                  do_def2:			
 25275 00000980 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 25276 00000983 7554                            jne	short do_alt    ; no
 25277                                  do_def3:
 25278 00000985 BE[7E4B]                	mov	si,commnd3
 25279 00000988 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 25280 0000098B 754C                    	jne	short do_alt	; no
 25281 0000098D BE[9E4B]                	mov	si,commnd4
 25282 00000990 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 25283 00000993 7544                    	jne	short do_alt	; no
 25284 00000995 52                      	push	dx              ;
 25285 00000996 BA[3853]                	mov	dx,badcomprmpt
 25286 00000999 E8B840                  	call	print		;
 25287 0000099C 5A                      	pop	dx              ; recover default drive letter in DL
 25288                                  request_input:			;
 25289 0000099D B402                    	mov	ah,STD_CON_OUTPUT
 25290 0000099F CD21                    	int	21h             ;
 25291 000009A1 52                      	push	dx              ;
 25292 000009A2 B23E                    	mov	dl,'>'          ;
 25293 000009A4 CD21                    	int	21h             ;
 25294 000009A6 8A1E[2C4B]              	mov	bl,[tmplate+1]	; [tmplate+1] = 12
 25295 000009AA B700                    	mov	bh,0            ;
 25296 000009AC C687[2D4B]0D            	mov	byte [commnd+bx],0Dh
 25297 000009B1 BA[2B4B]                	mov	dx,tmplate
 25298 000009B4 B40A                    	mov	ah,STD_CON_STRING_INPUT
 25299 000009B6 CD21                    	int	21h             ; read a line of input
 25300 000009B8 BA[7050]                	mov	dx,crlfm	;
 25301 000009BB E89640                  	call	print           ;
 25302 000009BE 5A                      	pop	dx              ;
 25303 000009BF 8A1E[2C4B]              	mov	bl,[tmplate+1]	;
 25304 000009C3 08DB                    	or	bl,bl           ; was anything typed?
 25305 000009C5 74D6                    	jz	short request_input ;
 25306 000009C7 C606[2A4B]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 25307 000009CC C687[2D4B]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 25308 000009D1 C706[BB4B]000D          	mov	word [command_line],0D00h
 25309 000009D7 EB35                    	jmp	short do_exec   ;
 25310                                  do_alt:
 25311 000009D9 1E                      	push	ds
 25312 000009DA 07                      	pop	es
 25313 000009DB C606[2A4B]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 25314 000009E0 BF[2D4B]                	mov	di,commnd	;
 25315                                  do_alt1:
 25316 000009E3 AC                      	lodsb			; copy the alternate, zapping it as we go,
 25317 000009E4 C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 25318 000009E8 AA                      	stosb 			;
 25319 000009E9 08C0                    	or	al,al		;
 25320 000009EB 75F6                    	jnz	short do_alt1	;
 25321 000009ED BF[BB4B]                	mov	di,command_line
 25322 000009F0 807C023A                	cmp	byte [si+2],':'
 25323 000009F4 7503                    	jne	short do_alt2	;
 25324 000009F6 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 25325                                  do_alt2:			;
 25326 000009F9 AC                      	lodsb			;
 25327 000009FA AA                      	stosb			;
 25328 000009FB 08C0                    	or	al,al           ;
 25329 000009FD 75FA                    	jnz	short do_alt2   ;
 25330 000009FF C645FF0D                	mov	byte [di-1],cr
 25331                                  
 25332                                  ;;   Last but not least, see if we need to call disable_autoexec
 25333                                  
 25334                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 25335                                  	;cmp	[command_line-1],0
 25336                                          ;jne	short do_exec   ;
 25337                                          ;mov	[command_line-1],'/'
 25338                                  	;call	disable_autoexec ;
 25339                                  
 25340                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 25341 00000A03 C606[7B4C]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 25342 00000A08 E80C3D                  	call	disable_autoexec
 25343 00000A0B E8543D                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 25344                                  do_exec:
 25345 00000A0E E999FE                  	jmp	retry		;
 25346                                  
 25347                                  ;;endif	;MULTI_CONFIG
 25348                                  
 25349                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25350                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 25351                                  
 25352                                  ; 24/03/2019 - Retro DOS v4.0
 25353                                  
 25354                                  ; ----------------------------------------------------------------------
 25355                                  ; procedure : AllocFreeMem
 25356                                  ;
 25357                                  ; Allocate Max memory from DOS to find out where to load DOS.
 25358                                  ; DOS is at temporary location when this call is being made
 25359                                  ;
 25360                                  ; Inputs : None
 25361                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 25362                                  ;	   [area] & [memhi] set to the para value of the start of the
 25363                                  ;	   free memory.
 25364                                  ;
 25365                                  ; Uses   : AX, BX
 25366                                  ;
 25367                                  ; ----------------------------------------------------------------------
 25368                                  	
 25369                                  	; 30/12/2022 - Retro DOS v4.2
 25370                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 25371                                  
 25372                                  	; 08/04/2024 - Retro DOS v5.0
 25373                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0AB5h)
 25374                                  
 25375                                  	; 23/10/2022
 25376                                  AllocFreeMem:
 25377 00000A11 BBFFFF                  	mov	bx,0FFFFh
 25378 00000A14 B448                    	mov	ah,48h ; ALLOC
 25379 00000A16 CD21                    	int	21h			; first time fails
 25380 00000A18 B448                    	mov	ah,48h ; ALLOC
 25381 00000A1A CD21                    	int	21h			; second time gets it
 25382                                  	; 11/12/2022
 25383                                  	; ds = cs
 25384                                  	;mov	[cs:area],ax
 25385                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 25386 00000A1C A3[6803]                	mov	[area],ax
 25387 00000A1F A3[6403]                	mov	[memhi],ax		; memhi:memlo now points to			
 25388 00000A22 C3                      	retn				; start of free memory
 25389                                  				
 25390                                  	; include msbio.cl6
 25391                                  ; ----------------------------------------------------------------------
 25392                                  DOSLOMSG:
 25393 00000A23 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 25393 00000A2C 7661696C61626C653A-
 25393 00000A35 204C6F6164696E6720-
 25393 00000A3E 444F53206C6F770D0A-
 25393 00000A47 24                 
 25394                                  FEmsg:
 25395 00000A48 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 25395 00000A51 6F723A2043616E6E6F-
 25395 00000A5A 7420616C6C6F636174-
 25395 00000A63 65204D656D6F727920-
 25395 00000A6C 666F7220444F530D0A-
 25395 00000A75 24                 
 25396                                  
 25397                                  ; ----------------------------------------------------------------------
 25398                                  ;
 25399                                  ; procedure : LoadDOSHiOrLo
 25400                                  ;
 25401                                  ;		Tries to move DOS into HMA. If it fails then loads
 25402                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 25403                                  ;		moved; this just tries to allocate the HMA, and prints
 25404                                  ;		a message if this is not possible.
 25405                                  ;
 25406                                  ; ----------------------------------------------------------------------
 25407                                  
 25408                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25409                                  LoadDOSHiOrLo:
 25410                                  	; 27/03/2019 - Retro DOS v4.0
 25411                                  	; ds = cs
 25412 00000A76 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 25413                                  	;jc	short LdngLo		; If that don't work...
 25414                                  	;retn
 25415                                  	; 18/12/2022
 25416 00000A79 731C                    	jnc	short LoadDosHi_ok
 25417                                  LdngLo:
 25418                                  	; 23/10/2022
 25419                                  	;push	cs
 25420                                  	;pop	ds
 25421                                  	; 11/12/2022
 25422                                  	; ds = cs
 25423 00000A7B B409                    	mov	ah,9
 25424 00000A7D BA[230A]                	mov	dx,DOSLOMSG		; inform user that we are
 25425 00000A80 CD21                    	int	21h			; loading low
 25426                                  
 25427                                  ;ifndef ROMDOS
 25428                                  	; actually move the dos, and reinitialize it.
 25429                                  
 25430 00000A82 BB0100                  	mov	bx,1				; M012
 25431                                  						;  use int 21 alloc for mem
 25432 00000A85 E83F00                  	call	MovDOSLo
 25433                                  	; 11/12/2022
 25434                                  	; ds = cs
 25435                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 25436                                  	; 23/10/2022
 25437 00000A88 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 25438                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 25439                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 25440 00000A8C 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 25441                                  	; 11/12/2022
 25442                                  	; ds = cs
 25443                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 25444 00000A8E FF1E[7D02]              	call	far [dos_segreinit] ; 27/03/2019
 25445                                  	
 25446                                  ;endif ; ROMDOS
 25447                                  	; 23/10/2022
 25448                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 25449                                  	; 11/12/2022
 25450                                  	; ds = cs
 25451 00000A92 C606[6C02]00            	mov	byte [runhigh],0 ; 27/03/2019
 25452                                  LoadDosHi_ok:	; 18/12/2022
 25453 00000A97 C3                      	retn
 25454                                  
 25455                                  ; ----------------------------------------------------------------------
 25456                                  ;
 25457                                  ; procedure : TryToMovDOSHi
 25458                                  ;
 25459                                  ;		This tries to move DOS into HMA.
 25460                                  ;		Returns CY if it failed.
 25461                                  ;		If it succeeds returns with carry cleared.
 25462                                  ;
 25463                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 25464                                  ;		the A20 switching code in the low mem stub to be installed.
 25465                                  ; 
 25466                                  ; ----------------------------------------------------------------------
 25467                                  
 25468                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25469                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 25470                                  TryToMovDOSHi:
 25471                                  	; 11/12/2022
 25472                                  	; 27/03/2019 - Retro DOS v4.0
 25473                                  	; ds = cs
 25474 00000A98 E81300                  	call	MovDOSHi
 25475 00000A9B 7210                    	jc	short ttldhx
 25476                                  
 25477                                  ;ifndef ROMDOS
 25478                                  	; 23/10/2022
 25479                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 25480                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 25481                                  	; 11/12/2022
 25482                                  	; ds = cs
 25483 00000A9D 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 25484                                  ;else
 25485                                  ;	..
 25486                                  ;endif ; ROMDOS
 25487                                  
 25488                                  	; 11/12/2022
 25489                                  	; ds = cs
 25490 00000AA1 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 25491                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 25492 00000AA3 FF1E[7D02]              	call	far [dos_segreinit]
 25493                                  	;mov	byte [cs:runhigh],1
 25494 00000AA7 C606[6C02]01            	mov	byte [runhigh],1
 25495 00000AAC F8                      	clc
 25496                                  ttldhx:
 25497 00000AAD C3                      	retn
 25498                                  
 25499                                  ; ----------------------------------------------------------------------
 25500                                  ;
 25501                                  ; procedure : MovDOSHi
 25502                                  ;
 25503                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 25504                                  ;		For ROMDOS, the code is not actually moved, but the
 25505                                  ;		HMA is allocated and prepared for sub-allocation.
 25506                                  ;
 25507                                  ;		Returns : CY if it failed
 25508                                  ;
 25509                                  ; ----------------------------------------------------------------------
 25510                                  
 25511                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25512                                  MovDOSHi:
 25513                                  	; 14/05/2019
 25514                                  	; 27/03/2019 - Retro DOS v4.0
 25515                                  	; ds = cs
 25516 00000AAE E8D600                  	call	AllocHMA
 25517 00000AB1 7213                    	jc	short mdhx			; did we get HMA?
 25518 00000AB3 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 25519 00000AB6 8EC0                    	mov	es,ax
 25520                                  
 25521                                  ;ifndef ROMDOS
 25522                                  	; actually move the BIOS and DOS
 25523                                  
 25524                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 25525                                  	; 24/03/2019
 25526                                  	
 25527                                  	; 23/10/2022
 25528 00000AB8 E83200                  	call	MovBIOS				; First move BIOS into HMA
 25529                                  
 25530                                  	; ES:DI points to free HMA after BIOS
 25531                                  	
 25532                                  	; 14/05/2019
 25533                                  	; 24/03/2019 - Retro DOS v4.0
 25534                                  	;xor	di,di
 25535                                  	
 25536                                  	; 23/10/2022
 25537                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 25538                                  	; 11/12/2022
 25539                                  	; ds = cs
 25540 00000ABB 8B0E[8302]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 25541 00000ABF E81100                  	call	MovDOS				; and move it
 25542                                  
 25543                                  	; ES:DI points to free HMA after DOS
 25544                                  ;else
 25545                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 25546                                  ;
 25547                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 25548                                  ;
 25549                                  ;endif ; ROMDOS
 25550                                  
 25551 00000AC2 E87602                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 25552 00000AC5 F8                      	clc
 25553                                  mdhx:
 25554 00000AC6 C3                      	retn
 25555                                  
 25556                                  ; ----------------------------------------------------------------------
 25557                                  ;
 25558                                  ; procedure : MovDOSLo
 25559                                  ;
 25560                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 25561                                  ;
 25562                                  ; ----------------------------------------------------------------------
 25563                                  
 25564                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25565                                  
 25566                                  ;ifndef ROMDOS
 25567                                  
 25568                                  MovDOSLo:
 25569                                  	; 14/05/2019
 25570                                  	; 27/03/2019 - Retro DOS v4.0
 25571                                  	; ds = cs
 25572 00000AC7 E84500                  	call	AllocMemForDOS			; incestuosly!!!
 25573                                  	
 25574                                  	; 23/10/2022
 25575                                  	; 14/05/2019
 25576                                  	;inc	ax  ; skip MCB
 25577                                  	
 25578 00000ACA 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 25579                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 25580                                  	; 24/03/2019
 25581                                  	
 25582                                  	; 23/10/2022
 25583 00000ACC E81E00                  	call	MovBIOS
 25584                                  
 25585                                  ;------ ES:DI points memory immediately after BIOS
 25586                                  
 25587                                  	; 14/05/2019
 25588                                  	; NOTE: 
 25589                                  	;     Order of (RETRO) DOS kernel sections at memory:
 25590                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 25591                                  
 25592                                  	; 24/03/2019 - Retro DOS v4.0
 25593                                  	;xor	di,di	
 25594                                  
 25595                                  	; 23/10/2022
 25596                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 25597                                  	; 11/12/2022
 25598                                  	; ds = cs
 25599 00000ACF 8B0E[8102]              	mov	cx,[lo_doscod_size]		; low
 25600                                  	;call	MovDOS
 25601                                  	;retn
 25602                                  	; 11/12/2022
 25603                                  	;jmp	short MovDOS
 25604                                  
 25605                                  ;endif ; ROMDOS
 25606                                  
 25607                                  ; 11/12/2022
 25608                                  
 25609                                  ; ----------------------------------------------------------------------
 25610                                  ;
 25611                                  ; procedure : MovDOS
 25612                                  ;
 25613                                  ;		Moves DOS code into requested area
 25614                                  ;
 25615                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 25616                                  ;	     CX    - size of DOS code to be moved
 25617                                  ;
 25618                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 25619                                  ;
 25620                                  ; ----------------------------------------------------------------------
 25621                                  
 25622                                  	; 11/12/2022
 25623                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25624                                  
 25625                                  ;ifndef ROMDOS
 25626                                  
 25627                                  MovDOS:
 25628                                  	; 14/05/2019
 25629                                  	; 27/03/2019 - Retro DOS v4.0
 25630                                  
 25631                                  	; 11/12/2022
 25632                                  	; ds = cs
 25633                                  
 25634                                  	; 23/10/2022
 25635                                  	;push	ds ; *//
 25636                                  	
 25637 00000AD3 06                      	push	es
 25638 00000AD4 57                      	push	di
 25639                                  
 25640                                  	; 11/12/2022
 25641 00000AD5 1E                      	push	ds ; *// ; 11/12/202
 25642                                  
 25643                                  	; 29/04/2019
 25644 00000AD6 C536[7102]              	lds	si,[dosinit] ; 11/12/2022
 25645                                  	; 23/10/2022
 25646                                  	;lds	si,[cs:dosinit]
 25647                                  	; 03/09/2023
 25648 00000ADA 89F0                    	mov	ax,si
 25649                                  
 25650 00000ADC F3A4                    	rep	movsb
 25651                                  
 25652 00000ADE 1F                      	pop	ds ; *// ; 11/12/2022
 25653                                  
 25654 00000ADF 5B                      	pop	bx				; get back offset into which
 25655                                  						;  DOS was moved
 25656                                  	; 03/09/2023
 25657                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 25658                                  						;  wants to run
 25659                                  	; 03/09/2023
 25660                                  	;mov	ax,[dosinit]
 25661                                  	; ax = [dosinit]
 25662                                  
 25663 00000AE0 29D8                    	sub	ax,bx
 25664 00000AE2 E8B502                  	call	off_to_para
 25665 00000AE5 5B                      	pop	bx				; get the segment at which
 25666                                  						;  we moved DOS into
 25667 00000AE6 29C3                    	sub	bx,ax				; Adjust segment
 25668                                  	
 25669                                  	; 11/12/2022
 25670                                  	; 23/10/2022
 25671                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 25672                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 25673                                  	; 11/12/2022
 25674 00000AE8 891E[7302]              	mov	[CURRENT_DOS_LOCATION],bx
 25675                                  		
 25676                                  	; 27/03/2019
 25677                                  	;pop	ds ; *//
 25678                                  	; ds = cs
 25679                                  	;mov	[FINAL_DOS_LOCATION],bx
 25680                                  
 25681 00000AEC C3                      	retn
 25682                                  
 25683                                  ;endif ;ROMDOS
 25684                                  
 25685                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 25686                                  ; 24/03/2019
 25687                                  ; ----------------------------------------------------------------------
 25688                                  ;
 25689                                  ; procedure : MovBIOS
 25690                                  ;
 25691                                  ;		Moves BIOS code into requested segment
 25692                                  ;
 25693                                  ;	In : ES - segment to which BIOS is to be moved
 25694                                  ;		  ( it moves always into offset BCode_Start)
 25695                                  ;
 25696                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 25697                                  ;
 25698                                  ; ----------------------------------------------------------------------
 25699                                  
 25700                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25701                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25702                                  
 25703                                  ;ifndef ROMDOS
 25704                                  
 25705                                  MovBIOS: ; proc	near
 25706                                  	; 11/12/2022
 25707 00000AED 1E                      	push	ds ; ds = cs
 25708                                  	;
 25709                                  	; 23/10/2022
 25710                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 25711                                  	; 17/09/2023 ; 08/04/2024
 25712 00000AEE 8E1E[8902]              	mov	ds,[temp_bcode_seg]
 25713                                  	;mov	si,BCODE_START ; mov si,30h
 25714                                  	; 09/12/2022
 25715 00000AF2 BE[3000]                	mov	si,BCODESTART ; 30h
 25716 00000AF5 89F7                    	mov	di,si
 25717                                  	;mov	cx,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 25718 00000AF7 B9701D                  	mov	cx,BCODE_END ; mov cx,1A60h
 25719 00000AFA 29F1                    	sub	cx,si				; size of BIOS
 25720 00000AFC D1E9                    	shr	cx,1				; Both the labels are para
 25721                                  						;  aligned
 25722 00000AFE F3A5                    	rep	movsw
 25723                                  	
 25724                                  	; 11/12/2022
 25725 00000B00 1F                      	pop	ds ; ds = cs
 25726                                  	;
 25727 00000B01 06                      	push	es
 25728 00000B02 57                      	push	di				; save end of BIOS
 25729 00000B03 8CC0                    	mov	ax,es
 25730                                  	;
 25731                                  	; 11/12/2022
 25732                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 25733                                  	;;call	dword ptr cs:_seg_reinit_ptr
 25734                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 25735                                  	; ds = cs
 25736 00000B05 A3[8A03]                	mov	[BCodeSeg],ax
 25737 00000B08 FF1E[8702]              	call	far [seg_reinit_ptr]
 25738                                  	;
 25739 00000B0C 5F                      	pop	di
 25740 00000B0D 07                      	pop	es				; get back end of BIOS
 25741 00000B0E C3                      	retn
 25742                                  
 25743                                  ;MovBIOS endp
 25744                                  
 25745                                  ;endif ; ROMDOS
 25746                                  
 25747                                  ; 11/12/2022
 25748                                  %if 0
 25749                                  
 25750                                  ; 24/03/2019
 25751                                  
 25752                                  ; ----------------------------------------------------------------------
 25753                                  ;
 25754                                  ; procedure : MovDOS
 25755                                  ;
 25756                                  ;		Moves DOS code into requested area
 25757                                  ;
 25758                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 25759                                  ;	     CX    - size of DOS code to be moved
 25760                                  ;
 25761                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 25762                                  ;
 25763                                  ; ----------------------------------------------------------------------
 25764                                  
 25765                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25766                                  
 25767                                  ;ifndef ROMDOS
 25768                                  
 25769                                  MovDOS:
 25770                                  	; 14/05/2019
 25771                                  	; 27/03/2019 - Retro DOS v4.0
 25772                                  
 25773                                  	; 11/12/2022
 25774                                  	; ds = cs
 25775                                  
 25776                                  	; 23/10/2022
 25777                                  	;push	ds ; *//
 25778                                  	
 25779                                  	push	es
 25780                                  	push	di
 25781                                  
 25782                                  	; 11/12/2022
 25783                                  	push	ds ; *// ; 11/12/202
 25784                                  
 25785                                  	; 29/04/2019
 25786                                  	lds	si,[dosinit] ; 11/12/2022
 25787                                  	; 23/10/2022
 25788                                  	;lds	si,[cs:dosinit]
 25789                                  	; 03/09/2023
 25790                                  	mov	ax,si
 25791                                  
 25792                                  	rep	movsb
 25793                                  
 25794                                  	pop	ds ; *// ; 11/12/2022
 25795                                  
 25796                                  	pop	bx				; get back offset into which
 25797                                  						;  DOS was moved
 25798                                  	;mov	ax,[dosinit] ; 03/09/2023
 25799                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 25800                                  						;  wants to run
 25801                                  	sub	ax,bx
 25802                                  	call	off_to_para
 25803                                  	pop	bx				; get the segment at which
 25804                                  						;  we moved DOS into
 25805                                  	sub	bx,ax				; Adjust segment
 25806                                  	
 25807                                  	; 11/12/2022
 25808                                  	; 23/10/2022
 25809                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 25810                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 25811                                  	; 11/12/2022
 25812                                  	mov	[CURRENT_DOS_LOCATION],bx
 25813                                  		
 25814                                  	; 27/03/2019
 25815                                  	;pop	ds ; *//
 25816                                  	; ds = cs
 25817                                  	;mov	[FINAL_DOS_LOCATION],bx
 25818                                  
 25819                                  	retn
 25820                                  
 25821                                  ;endif ;ROMDOS
 25822                                  
 25823                                  %endif
 25824                                  
 25825                                  ; ----------------------------------------------------------------------
 25826                                  ;
 25827                                  ; procedure : AllocMemForDOS
 25828                                  ;
 25829                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 25830                                  ;
 25831                                  ;	Out : AX - seg of allocated memoryblock
 25832                                  ;
 25833                                  ; ----------------------------------------------------------------------
 25834                                  
 25835                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25836                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25837                                  
 25838                                  ;ifndef ROMDOS
 25839                                  
 25840                                  AllocMemForDOS:
 25841                                  	; 11/12/2022
 25842                                  	; 14/05/2019
 25843                                  	; 27/03/2019 - Retro DOS v4.0
 25844                                  	; ds = cs
 25845                                  	;mov	ax,BCode_end
 25846                                  	;sub	ax,BCode_start		; BIOS code size
 25847                                  	; 23/10/2022
 25848 00000B0F B8701D                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 25849                                  					; 30/12/2022
 25850                                  	;mov	ax,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 25851                                  	;sub	ax,BCODE_START ; 30h
 25852                                  	; 09/12/2022
 25853 00000B12 2D[3000]                	sub	ax,BCODESTART ; sub ax,30h ; 08/04/2024
 25854                                  	; 24/03/2019 - Retro DOS v4.0 
 25855                                  	; 02/11/2022
 25856                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 25857                                  	; 11/12/2022
 25858                                  	; ds = cs
 25859 00000B15 0306[8102]              	add	ax,[lo_doscod_size]
 25860 00000B19 83C00F                  	add	ax,15
 25861 00000B1C E87B02                  	call	off_to_para			; convert to para
 25862                                  	; 23/10/2022
 25863                                  	; 14/05/2019
 25864                                  	;inc	ax ; + 1 paragraph for MCB
 25865 00000B1F 09DB                    	or	bx,bx				; M012
 25866 00000B21 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 25867 00000B23 741A                    	jz	short update_arena		; M012
 25868 00000B25 B448                    	mov	ah,48h				; request DOS
 25869 00000B27 CD21                    	int	21h
 25870 00000B29 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 25871                                   	; 23/10/2022
 25872                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 25873 00000B2B 83E803                  	sub	ax,3				; Take care ORG 30h of
 25874                                  						;  BIOS code
 25875 00000B2E 8EC0                    	mov	es,ax
 25876                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 25877                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 25878                                  	; 14/05/2019
 25879                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 25880                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 25881                                  	; 08/04/2024 (PCDOS 7.1 IBMBIO.COM)
 25882                                  	; 23/10/2022
 25883 00000B30 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 25884 00000B37 26C70628005343          	mov	word [es:20h+8],'SC' ; 4353h	;  code area
 25885                                  
 25886 00000B3E C3                      	retn
 25887                                  
 25888                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 25889                                  ;	  using DOS itself causes an arena to be generated.
 25890                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 25891                                  ;	  assume that the device drivers are loaded into
 25892                                  ;	  the first arena. For this reason, MagicDrv's
 25893                                  ;	  main device driver header arena is manually
 25894                                  ;	  truncated from the arena chain, and the space
 25895                                  ;	  for DOS is allocated using the following
 25896                                  ;	  simple code, which also assumes that the
 25897                                  ;	  first arena is the free one where DOS's low
 25898                                  ;	  stub will go.
 25899                                  ;
 25900                                  ; M012 : BEGIN
 25901                                  
 25902                                  	; 23/10/2022
 25903                                  update_arena:
 25904 00000B3F 1E                      	push	ds ; ds = cs
 25905 00000B40 57                      	push	di
 25906 00000B41 51                      	push	cx
 25907 00000B42 52                      	push	dx
 25908                                  	; 23/10/2022
 25909                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 25910                                  	; 11/12/2022
 25911                                  	; ds = cs 
 25912 00000B43 C53E[6D02]              	lds	di,[DOSINFO] ; 27/03/2019	
 25913 00000B47 4F                      	dec	di
 25914 00000B48 4F                      	dec	di				; Arena head is immediately
 25915                                  						;  before sysvar
 25916 00000B49 8E05                    	mov	es,[di]				; es = arena head
 25917                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 25918 00000B4B 268B0E0300              	mov	cx,[es:3]
 25919 00000B50 39D9                    	cmp	cx,bx				; is it sufficient ?
 25920 00000B52 7227                    	jb	short FatalErr			; no, fatal error
 25921                                  
 25922                                  	;mov	dl,[es:ARENA.SIGNATURE]
 25923 00000B54 268A160000              	mov	dl,[es:0]
 25924 00000B59 8CC0                    	mov	ax,es
 25925 00000B5B 01D8                    	add	ax,bx				; ax = new arena head
 25926 00000B5D 8905                    	mov	[di],ax				; store it in DOS data area
 25927 00000B5F 8ED8                    	mov	ds,ax
 25928                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 25929 00000B61 88160000                	mov	[0],dl
 25930                                  	;mov	word [ARENA.OWNER],0		; free
 25931 00000B65 C70601000000            	mov	word [1],0
 25932 00000B6B 29D9                    	sub	cx,bx				; size of the new block
 25933                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 25934 00000B6D 890E0300                	mov	[3],cx
 25935 00000B71 8CC0                    	mov	ax,es				; return seg to the caller
 25936                                  	; 23/10/2022
 25937                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 25938 00000B73 83E803                  	sub	ax,3				;  BIOS code
 25939 00000B76 5A                      	pop	dx
 25940 00000B77 59                      	pop	cx
 25941 00000B78 5F                      	pop	di
 25942 00000B79 1F                      	pop	ds ; ds = cs
 25943 00000B7A C3                      	retn
 25944                                  ;
 25945                                  ; M012 : END
 25946                                  ;
 25947                                  FatalErr:
 25948 00000B7B 0E                      	push	cs
 25949 00000B7C 1F                      	pop	ds
 25950 00000B7D BA[480A]                	mov	dx,FEmsg
 25951 00000B80 B409                    	mov	ah,9
 25952 00000B82 CD21                    	int	21h 		; DOS - PRINT STRING
 25953                                  				; DS:DX -> string terminated by "$"
 25954                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 25955 00000B84 E9C707                  	jmp	stall
 25956                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25957                                  	;cli
 25958                                  	;hlt
 25959                                  
 25960                                  ;endif ;ROMDOS
 25961                                  
 25962                                  ; 25/03/2019 - Retro DOS v4.0
 25963                                  
 25964                                  ; ----------------------------------------------------------------------
 25965                                  ;
 25966                                  ; procedure : AllocHMA
 25967                                  ;
 25968                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 25969                                  ;	  up there. If it gets any sort of error, it will return with
 25970                                  ;	  carry set so that we can resort to running low.
 25971                                  ;
 25972                                  ;	It also returns ES: -> 0ffffh if it returns success
 25973                                  ;
 25974                                  ; ----------------------------------------------------------------------
 25975                                  
 25976                                  AllocHMA:
 25977                                  ;	cas note:  The pre-286 check is no longer needed here since the
 25978                                  ;		   presence of XMS is sufficient. However, this code hasn't
 25979                                  ;		   been deleted because it can be recycled for skipping the
 25980                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 25981                                  ;		   in the case of a pre-286.
 25982                                  
 25983                                  ;;	see if we're running on a pre-286. If not, force low.
 25984                                  ;
 25985                                  ;	xor	ax,ax
 25986                                  ;	pushf			; save flags (like int)
 25987                                  ;	push	ax
 25988                                  ;	popf
 25989                                  ;	pushf
 25990                                  ;	pop	ax
 25991                                  ;	popf			; restore original flags (like int)
 25992                                  ;	and	ax,0F000h
 25993                                  ;	cmp	ax,0F000h	; 8088/8086?
 25994                                  ;	jz	short grab_hma_error
 25995                                  
 25996                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25997                                  	; (SYSINIT:0A26h)
 25998                                  
 25999                                  	; 13/04/2024 - Retro DOS v5.0
 26000                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C41h) 
 26001                                  
 26002 00000B87 1E                      	push	ds
 26003                                  	;;mov	ax,Bios_Data
 26004                                  	;mov	ax,KERNEL_SEGMENT
 26005                                  	; 21/10/2022
 26006 00000B88 B87000                  	mov	ax,DOSBIODATASEG ; 70h
 26007 00000B8B 8ED8                    	mov	ds,ax
 26008                                  
 26009 00000B8D E84A00                  	call	IsXMSLoaded
 26010 00000B90 7545                    	jnz	short grabhma_error
 26011                                  
 26012 00000B92 B81043                  	mov	ax,4310h
 26013 00000B95 CD2F                    	int	2Fh		; get the vector into es:bx
 26014                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 26015                                  		; Return: ES:BX -> driver entry point
 26016                                  
 26017 00000B97 891E[0E00]              	mov	[xms],bx
 26018                                  	;mov	[0Eh], bx
 26019 00000B9B 8C06[1000]              	mov	[xms+2],es
 26020                                  	;mov	[10h],es
 26021                                  
 26022 00000B9F B401                    	mov	ah,1		; request HMA
 26023 00000BA1 BAFFFF                  	mov	dx,0FFFFh
 26024                                  	;call	dword ptr ds:0Eh
 26025 00000BA4 FF1E[0E00]              	call	far [xms]
 26026 00000BA8 48                      	dec	ax
 26027 00000BA9 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 26028                                  
 26029                                  ;------ Himem may be lying because it has allocated mem for int 15
 26030                                  
 26031 00000BAB B488                    	mov	ah,88h
 26032 00000BAD CD15                    	int	15h
 26033                                  		; Get Extended Memory Size
 26034                                  		; Return: CF clear on success
 26035                                  		; AX = size of memory above 1M in K
 26036 00000BAF 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 26037                                  	;jb	short grabhma_error
 26038                                  	; 11/12/2022
 26039 00000BB2 7224                    	jb	short grabhma_err ; cf=1
 26040                                  allocHMA_1:
 26041 00000BB4 B405                    	mov	ah,5		; localenableA20
 26042                                  	;call	dword ptr ds:0Eh
 26043 00000BB6 FF1E[0E00]              	call	far [xms]
 26044 00000BBA 48                      	dec	ax
 26045 00000BBB 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 26046                                  
 26047 00000BBD E89D01                  	call	IsVDiskInstalled
 26048 00000BC0 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 26049                                  
 26050 00000BC2 B8FFFF                  	mov	ax,0FFFFh
 26051 00000BC5 8EC0                    	mov	es,ax
 26052 00000BC7 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 26053 00000BCE 26813E10003412          	cmp	word [es:10h],1234h
 26054                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 26055                                  	; 11/12/2022
 26056 00000BD5 7401                    	je	short allocHMA_ok	
 26057                                  
 26058                                  ; 11/12/2022
 26059                                  ;	; 11/12/2022
 26060                                  ;	; cf=0
 26061                                  ;	;clc
 26062                                  ;	pop	ds
 26063                                  ;	retn
 26064                                  
 26065                                  grabhma_error:
 26066 00000BD7 F9                      	stc
 26067                                  	; 11/12/022
 26068                                  grabhma_err:	; cf=1
 26069                                  allocHMA_ok:	; cf=0
 26070 00000BD8 1F                      	pop	ds
 26071 00000BD9 C3                      	retn
 26072                                  
 26073                                  ; ----------------------------------------------------------------------
 26074                                  ;
 26075                                  ; procedure : IsXMSLoaded
 26076                                  ;
 26077                                  ;             Checks whether a XMS driver is loaded
 26078                                  ;
 26079                                  ; Returns : Z flag set if XMS driver loaded
 26080                                  ;           Z flag reset if no XMS drivers are present
 26081                                  ;
 26082                                  ; ----------------------------------------------------------------------
 26083                                  
 26084                                  IsXMSLoaded:
 26085 00000BDA B80043                  	mov	ax,4300h
 26086 00000BDD CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 26087                                  				; Return: AL = 80h XMS driver installed
 26088                                  				; AL <> 80h no driver
 26089 00000BDF 3C80                    	cmp	al,80h		; XMS installed?
 26090 00000BE1 C3                      	retn
 26091                                  
 26092                                  ; ----------------------------------------------------------------------
 26093                                  ; procedure : FTryToMovDOSHi
 26094                                  ;
 26095                                  ;		Called from HMA suballoc calls
 26096                                  ;	
 26097                                  ; ----------------------------------------------------------------------
 26098                                  
 26099                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26100                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0A84h)
 26101                                  
 26102                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26103                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C9Fh)
 26104                                  
 26105                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0B8Ch))
 26106                                  
 26107                                  FTryToMovDOSHi:	; proc	far
 26108                                  
 26109 00000BE2 50                      	push	ax
 26110 00000BE3 53                      	push	bx
 26111 00000BE4 51                      	push	cx
 26112 00000BE5 52                      	push	dx
 26113 00000BE6 56                      	push	si
 26114 00000BE7 57                      	push	di
 26115 00000BE8 1E                      	push	ds
 26116 00000BE9 06                      	push	es
 26117                                  
 26118                                  	; 23/10/2022
 26119                                  	; 27/03/2019 - Retro DOS v4.0
 26120                                  	; 11/12/2022
 26121 00000BEA 0E                      	push	cs
 26122 00000BEB 1F                      	pop	ds
 26123                                  
 26124                                  	;cmp	byte [cs:runhigh],0FFh
 26125                                  	; 11/12/2022
 26126 00000BEC 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 26127 00000BF1 7503                    	jne	short _ftymdh_1
 26128                                  
 26129                                  	; ds = cs
 26130 00000BF3 E8A2FE                  	call	TryToMovDOSHi
 26131                                  _ftymdh_1:
 26132 00000BF6 07                      	pop	es
 26133 00000BF7 1F                      	pop	ds
 26134 00000BF8 5F                      	pop	di
 26135 00000BF9 5E                      	pop	si
 26136 00000BFA 5A                      	pop	dx
 26137 00000BFB 59                      	pop	cx
 26138 00000BFC 5B                      	pop	bx
 26139 00000BFD 58                      	pop	ax
 26140                                  
 26141 00000BFE CB                      	retf
 26142                                  
 26143                                  ; ----------------------------------------------------------------------
 26144                                  ;
 26145                                  ; following piece of code will be moved into a para boundary. And the para
 26146                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 26147                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 26148                                  ; to determine free extended memory.
 26149                                  ;
 26150                                  ; For more details read "power programming" column by Ray Duncan in the
 26151                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 26152                                  ;
 26153                                  ; ----------------------------------------------------------------------
 26154                                  
 26155                                  	; 30/12/2023 - Retro DOS 5.0
 26156 00000BFF 00                      	db	0
 26157                                  
 26158                                  ; 13/04/2024
 26159                                  ;align 2
 26160                                  
 26161                                  	; 30/12/2023
 26162                                  	; PCDOS v7.1 IBMBIO.COM, SYSYINIT:0CBCh
 26163                                  
 26164                                  StartVDHead:
 26165                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 26166                                  
 26167 00000C00 00000000                	dd	0		; link to next device driver
 26168 00000C04 0080                    	dw	8000h		; device attribute
 26169 00000C06 0000                    	dw	0		; strategy routine offset
 26170 00000C08 0000                    	dw	0		; interrupt routine offset
 26171 00000C0A 01                      	db	1		; number of units
 26172                                  	;db	7 dup(0) 
 26173 00000C0B 00<rep 7h>              	times	7 db 0 		; reserved area
 26174                                  VDiskSig1:
 26175 00000C12 564449534B              	db	'VDISK'
 26176                                  
 26177                                  VLEN1	equ	($-VDiskSig1)
 26178                                  
 26179 00000C17 202056332E33            	db	'  V3.3'	; vdisk label
 26180                                  	;db	15 dup (0)	; pad
 26181 00000C1D 00<rep Fh>              	times	15 db 0
 26182 00000C2C 0000                    	dw	0		; bits 0-15 of free HMA
 26183 00000C2E 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 26184                                  VDInt19:
 26185 00000C2F EA                      	db	0EAh		; jmp to old vector
 26186                                  OldVDInt19:
 26187 00000C30 00000000                	dd	0		; Saved int 19 vector
 26188                                  
 26189                                  EndVDHead: ; label byte
 26190                                  
 26191                                  VDiskHMAHead:	
 26192 00000C34 000000                  	db	0,0,0		; non-bootable disk
 26193                                  VDiskSig2:
 26194 00000C37 564449534B              	db	'VDISK'
 26195                                  
 26196                                  VLEN2	equ	($-VDiskSig2)
 26197                                  
 26198 00000C3C 332E33                  	db	'3.3'		; OEM - signature
 26199 00000C3F 8000                    	dw	128		; number of bytes/sector
 26200 00000C41 01                      	db	1		; sectors/cluster
 26201 00000C42 0100                    	dw	1		; reserved sectors
 26202 00000C44 01                      	db	1		; number of FAT copies
 26203 00000C45 4000                    	dw	64		; number of root dir entries
 26204 00000C47 0002                    	dw	512		; number of sectors
 26205 00000C49 FE                      	db	0FEh		; media descriptor
 26206 00000C4A 0600                    	dw	6		; number of sectors/FAT
 26207 00000C4C 0800                    	dw	8		; sectors per track
 26208 00000C4E 0100                    	dw	1		; number of heads
 26209 00000C50 0000                    	dw	0		; number of hidden sectors
 26210 00000C52 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 26211                                  
 26212                                  EndVDiskHMAHead: ; label byte
 26213                                  
 26214                                  ; ----------------------------------------------------------------------
 26215                                  ;
 26216                                  ; procedure : InstVDiskHeader
 26217                                  ;
 26218                                  ;             Installs the VDISK header to reserve the 64k of HMA
 26219                                  ;	      It puts a 32 byte header at 10000:0 and
 26220                                  ;	      another header at (seg of int19):0
 26221                                  ;
 26222                                  ; Inputs : None
 26223                                  ;
 26224                                  ; Outputs : None
 26225                                  ;
 26226                                  ; USES : DS,SI,AX,CX,DX
 26227                                  ;
 26228                                  ; ----------------------------------------------------------------------
 26229                                  
 26230                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26231                                  
 26232                                  InstVDiskHeader:
 26233 00000C54 31C0                    	xor	ax,ax
 26234 00000C56 8ED8                    	mov	ds,ax			; seg of int vect table
 26235                                  
 26236                                  ;-------------- save old int 19 vector
 26237                                  
 26238                                  	; 23/10/2022
 26239 00000C58 A16400                  	mov	ax,[19h*4]
 26240                                  	;mov	[OldVDInt19],ax
 26241 00000C5B 2EA3[300C]              	mov	[cs:OldVDInt19],ax
 26242 00000C5F A16600                  	mov	ax,[19h*4+2]
 26243                                  	;mov	[OldVDInt19+2],ax
 26244 00000C62 2EA3[320C]              	mov	[cs:OldVDInt19+2],ax
 26245                                  
 26246                                  ;-------------- calculate seg of new int 19 handler
 26247                                  
 26248 00000C66 B448                    	mov	ah,48h			; allocate memory
 26249                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 26250                                  	; 23/10/2022
 26251 00000C68 BB0400                  	mov	bx,4
 26252 00000C6B CD21                    	int	21h
 26253                                  
 26254                                  ;	if carry, fatal hanging error!!!!!
 26255                                  
 26256 00000C6D 48                      	dec	ax			; point to arena
 26257 00000C6E 8EC0                    	mov	es,ax
 26258                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 26259 00000C70 26C70601000800          	mov	word [es:1],8
 26260                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 26261 00000C77 26C70608005343          	mov	word [es:8],'SC' ; 4353h
 26262 00000C7E 40                      	inc	ax
 26263 00000C7F 8EC0                    	mov	es,ax			; get back to allocated memory
 26264                                  
 26265                                  ;-------------- install new int 19 vector
 26266                                  
 26267 00000C81 FA                      	cli				; no reboots at this time
 26268                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 26269 00000C82 C70664002F00            	mov	word [19h*4],47
 26270 00000C88 A36600                  	mov	[19h*4+2],ax
 26271                                  
 26272                                  ;-------------- move the code into proper place
 26273                                  
 26274                                  	;mov	cx,(EndVDHead-StartVDHead)
 26275 00000C8B B93400                  	mov	cx,52
 26276 00000C8E BE[000C]                	mov	si,StartVDHead
 26277 00000C91 31FF                    	xor	di,di
 26278 00000C93 0E                      	push	cs
 26279 00000C94 1F                      	pop	ds
 26280 00000C95 FC                      	cld
 26281 00000C96 F3A4                    	rep	movsb
 26282 00000C98 FB                      	sti				; BUGBUG is sti OK now?
 26283                                  
 26284                                  ;-------------- mov the HMA VDisk head into HMA
 26285                                  
 26286                                  	; 23/10/2022
 26287 00000C99 57                      	push	di
 26288 00000C9A 06                      	push	es
 26289                                  
 26290                                  	;mov	ax,0FFFFh
 26291                                  	;mov	es,ax
 26292                                  	; 03/09/2023
 26293 00000C9B 49                      	dec	cx
 26294                                  	; cx = 0FFFFh
 26295 00000C9C 8EC1                    	mov	es,cx
 26296                                  
 26297 00000C9E BF1000                  	mov	di,10h
 26298                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 26299 00000CA1 B92000                  	mov	cx,32
 26300 00000CA4 BE[340C]                	mov	si,VDiskHMAHead
 26301 00000CA7 F3A4                    	rep	movsb			; ds already set to cs
 26302                                  
 26303 00000CA9 5F                      	pop	di
 26304 00000CAA 07                      	pop	es
 26305                                  
 26306 00000CAB C3                      	retn
 26307                                  
 26308                                  ; ----------------------------------------------------------------------
 26309                                  ; procedure : ClrVDISKHeader
 26310                                  ;
 26311                                  ;		Clears the first 32 bytes at 1MB boundary
 26312                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 26313                                  ;		left by previous DOS=HIGH session
 26314                                  ;
 26315                                  ; ----------------------------------------------------------------------
 26316                                  
 26317                                  struc desc
 26318 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 26319 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 26320 00000004 ??                       .hi_byte:	resb 	1		; address
 26321 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 26322 00000006 ????                     .reserved:	resw	1		;
 26323                                   .size:
 26324                                  endstruc
 26325                                  
 26326                                  		; 23/10/2022
 26327                                  bmove:		;label byte
 26328                                  
 26329                                  dummy:		;times desc.size db 0	; desc	<>
 26330 00000CAC 00<rep 8h>              		times 8 db 0		 
 26331                                  gdt:		;times desc.size db 0	; desc	<>
 26332 00000CB4 00<rep 8h>              		times 8 db 0
 26333 00000CBC FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 26334 00000CBE 0000                    		dw	0
 26335 00000CC0 00                      		db	0
 26336 00000CC1 93                      		db	93h
 26337 00000CC2 0000                    		dw	0
 26338 00000CC4 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 26339 00000CC6 0000                    		dw	0
 26340 00000CC8 10                      		db	10h
 26341 00000CC9 93                      		db	93h
 26342 00000CCA 0000                    		dw	0
 26343                                  
 26344                                  rombios_code:	;times desc.size db 0	; desc	<>
 26345 00000CCC 00<rep 8h>              		times 8 db 0
 26346                                  temp_stack:	;times desc.size db 0	; desc	<>
 26347 00000CD4 00<rep 8h>              		times 8 db 0
 26348                                  
 26349 00000CDC 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 26350                                  
 26351                                  
 26352                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 26353                                  
 26354                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26355                                  ; (SYSINIT:0CA6h)
 26356                                  
 26357                                  ClrVDISKHeader:	; proc	near
 26358                                  
 26359                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 26360                                  ;;-----------------------------------------------------------	      ;I070
 26361                                  ;; The following workaround get around a problem with the	      ;I070
 26362                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 26363                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 26364                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 26365                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 26366                                  ;; move crashes the system. We can do this because these	      ;I070
 26367                                  ;; systems clear all of memory on a cold boot.			      ;I070
 26368                                  ;								      ;I070
 26369                                  ;               in      al,64h         ; Test for password servr mode ;I070
 26370                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 26371                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 26372                                  ;                                      ; Check for Tortugas...	      ;I070
 26373                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 26374                                  ;               je      short ClrVDISKno                              ;I070
 26375                                  ;                                      ; Check for mod 30-286	      ;I070
 26376                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 26377                                  ;               jne     short ClrVDISKok			      ;I070
 26378                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 26379                                  ;								      ;I070
 26380                                  ;ClrVDISKok:							      ;I070
 26381                                  ;-----------------------------------------------------------	      ;I070
 26382                                  
 26383                                  	; 30/12/2023 - Retro DOS v5.0
 26384                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0DBAh
 26385                                  ClrVDISKHeader:
 26386 00000CFC E464                    	in	al,64h	; 8042 keyboard controller status register
 26387                                  			; 7:  PERR    1=parity error in data received from keyboard
 26388                                  			;    +----------- AT Mode ----------+------------ PS/2 Mode ------------+
 26389                                  			; 6: |RxTO    receive (Rx) timeout  | TO     general timeout (Rx or Tx) |
 26390                                  			; 5: |TxTO    transmit (Tx) timeout | MOBF   mouse output buffer full   |
 26391                                  			;    +------------------------------+-----------------------------------+
 26392                                  			; 4:  INH     0=keyboard communications inhibited
 26393                                  			; 3:  A2      0=60h was the port last written to, 1=64h was last
 26394                                  			; 2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot
 26395                                  			; 1:  IBF     1=input buffer full (keyboard can't accept data)
 26396                                  			; 0:  OBF     1=output buffer full (data from keyboard is available)
 26397 00000CFE A810                    	test	al,10h	; test bit 4 - Is keyboard inhibited?
 26398 00000D00 7511                    	jnz	short ClrVDISKok ; No, go do block move
 26399                                  	; 30/12/2023
 26400                                  	; ds = cs	
 26401 00000D02 813E[BB02]F819          	cmp	word [sys_model_byte],19F8h ; check for TORTUGA models
 26402 00000D08 7408                    	jz	short ClrVDISKno ; do not use INT 15h block move code
 26403                                  				 ; (while 8042 is disabled)
 26404 00000D0A 813E[BB02]FC09          	cmp	word [sys_model_byte],9FCh ; check for PS/2 30-286 model
 26405 00000D10 7501                    	jnz	short ClrVDISKok
 26406                                  ClrVDISKno:
 26407 00000D12 C3                      	retn
 26408                                  ; ---------------------------------------------------------------------------
 26409                                  	; 30/12/2023
 26410                                  ClrVDISKok:
 26411                                  	; 12/12/2022
 26412                                  	; ds = cs
 26413                                  
 26414                                  	; 30/12/2022 - Retro DOS v4.2
 26415                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 26416                                  
 26417 00000D13 06                      	push	es
 26418 00000D14 8CC8                    	mov	ax,cs
 26419 00000D16 89C2                    	mov	dx,ax
 26420 00000D18 B10C                    	mov	cl,12
 26421 00000D1A D3EA                    	shr	dx,cl
 26422 00000D1C B104                    	mov	cl,4
 26423 00000D1E D3E0                    	shl	ax,cl
 26424 00000D20 05[DC0C]                	add	ax,ClrdVDISKHead
 26425 00000D23 80D200                  	adc	dl,0
 26426                                  
 26427                                  	;; 23/10/2022
 26428                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 26429                                  	;mov	[cs:src_desc+2],ax
 26430                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 26431                                  	;mov	[cs:src_desc+4],dl
 26432                                  	; 12/12/2022
 26433                                  	;mov	[src_desc+desc.lo_word],ax
 26434 00000D26 A3[BE0C]                	mov	[src_desc+2],ax
 26435                                  	;mov	[src_desc+desc.hi_byte],dl
 26436 00000D29 8816[C00C]              	mov	[src_desc+4],dl
 26437                                  
 26438 00000D2D B91000                  	mov	cx,16	; 16 words
 26439 00000D30 0E                      	push	cs
 26440 00000D31 07                      	pop	es
 26441 00000D32 BE[AC0C]                	mov	si,bmove
 26442 00000D35 B487                    	mov	ah,87h
 26443 00000D37 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 26444                                  			; CX = number of words to move 
 26445                                  			; ES:SI -> global descriptor table
 26446                                  			; Return: CF set on error, AH = status
 26447 00000D39 07                      	pop	es
 26448 00000D3A C3                      	retn
 26449                                  
 26450                                  ; ----------------------------------------------------------------------
 26451                                  ;
 26452                                  ; procedure : SaveFreeHMAPtr
 26453                                  ;
 26454                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 26455                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 26456                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 26457                                  ;		the offset.
 26458                                  ;
 26459                                  ; Inputs : ES:DI - pointer to free HMA
 26460                                  ; Output : FreeHMAPtr in BIOS data segment updated
 26461                                  ;
 26462                                  ; ----------------------------------------------------------------------
 26463                                  
 26464                                  SaveFreeHMAPtr:
 26465                                  	; 03/09/2023
 26466 00000D3B 1E                      	push	ds
 26467 00000D3C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26468 00000D3F 8ED8                    	mov	ds,ax
 26469                                  	;
 26470 00000D41 8CC3                    	mov	bx,es
 26471 00000D43 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 26472                                  	; 03/09/2023
 26473 00000D46 A2[0D00]                	mov	[inHMA],al ; 0FFh  ; (BIOSDATA:000Dh) ; 08/04/2024
 26474                                  	;
 26475 00000D49 29D8                    	sub	ax,bx
 26476 00000D4B 83C70F                  	add	di,15		   ; para round
 26477 00000D4E 83E7F0                  	and	di,0FFF0h
 26478 00000D51 B104                    	mov	cl,4
 26479 00000D53 D3E0                    	shl	ax,cl
 26480 00000D55 29C7                    	sub	di,ax
 26481                                  	;
 26482                                  	; 03/09/2023
 26483                                  	;push	ds
 26484                                  	;;mov	ax,Bios_Data ; 0070h
 26485                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 26486                                  	; 21/10/2022
 26487                                  	; 03/09/2023
 26488                                  	;mov	ax,DOSBIODATASEG ; 0070h
 26489                                  	;mov	ds,ax
 26490                                  		; (BIOSDATA:07D7h for PCDOS 7.1 IBMBIO.COM) ; 08/04/2024
 26491 00000D57 893E[D707]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 26492                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 26493 00000D5B 1F                      	pop	ds
 26494 00000D5C C3                      	retn
 26495                                  
 26496                                  ; ----------------------------------------------------------------------
 26497                                  ;
 26498                                  ; procedure : IsVDiskInstalled
 26499                                  ;
 26500                                  ;		Checks for the presence of VDISK header at 1MB boundary
 26501                                  ;		& INT 19 vector
 26502                                  ;
 26503                                  ; Inputs  : A20 flag should be ON
 26504                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 26505                                  ;
 26506                                  ; ----------------------------------------------------------------------
 26507                                  
 26508                                  IsVDiskInstalled:
 26509 00000D5D 31C0                    	xor	ax,ax
 26510 00000D5F 8ED8                    	mov	ds,ax
 26511 00000D61 8E1E4E00                	mov	ds,[19*4+2]
 26512                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 26513                                  	; 23/10/2022
 26514 00000D65 BE1200                  	mov	si,12h ; 18
 26515                                  	;mov	cx,VLEN1 ; 5
 26516 00000D68 B90500                  	mov	cx,5
 26517 00000D6B 0E                      	push	cs
 26518 00000D6C 07                      	pop	es
 26519 00000D6D BF[120C]                	mov	di,VDiskSig1
 26520 00000D70 F3A6                    	rep	cmpsb
 26521 00000D72 740F                    	je	short ivdins_retn
 26522 00000D74 B8FFFF                  	mov	ax,0FFFFh
 26523 00000D77 8ED8                    	mov	ds,ax
 26524                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 26525 00000D79 BE1300                  	mov	si,13h
 26526 00000D7C BF[370C]                	mov	di,VDiskSig2
 26527                                  	;;mov	cx,VLEN2  ; 5
 26528                                  	;mov	cx,5
 26529                                  	; 03/09/2023
 26530 00000D7F B105                    	mov	cl,5
 26531 00000D81 F3A6                    	rep	cmpsb
 26532                                  ivdins_retn: 
 26533 00000D83 C3                      	retn			; returns the Zero flag
 26534                                  
 26535                                  ; ----------------------------------------------------------------------
 26536                                  ;
 26537                                  ; procedure : CPMHack
 26538                                  ;
 26539                                  ;		Copies the code from 0:c0 into ffff:0d0h
 26540                                  ;		for CPM compatibility
 26541                                  ;
 26542                                  ; ----------------------------------------------------------------------
 26543                                  
 26544                                  	; 11/12/2022
 26545                                  CPMHack:
 26546 00000D84 1E                      	push	ds
 26547 00000D85 B9FFFF                  	mov	cx,0FFFFh
 26548 00000D88 8EC1                    	mov	es,cx		; ES = FFFF
 26549                                  	;xor	cx,cx
 26550                                  	; 11/12/2022
 26551 00000D8A 41                      	inc	cx  ; cx = 0
 26552 00000D8B 8ED9                    	mov	ds,cx		; DS = 0
 26553 00000D8D BEC000                  	mov	si,0C0h
 26554 00000D90 BFD000                  	mov	di,0D0h
 26555                                  	;mov	cx,5
 26556 00000D93 B105                    	mov	cl,5
 26557 00000D95 FC                      	cld
 26558 00000D96 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 26559 00000D98 1F                      	pop	ds
 26560 00000D99 C3                      	retn
 26561                                  
 26562                                  ; ----------------------------------------------------------------------
 26563                                  ;
 26564                                  ; procedure : off_to_para
 26565                                  ;
 26566                                  ; ----------------------------------------------------------------------
 26567                                  off_to_para:
 26568 00000D9A D1E8                    	shr	ax,1
 26569 00000D9C D1E8                    	shr	ax,1
 26570 00000D9E D1E8                    	shr	ax,1
 26571 00000DA0 D1E8                    	shr	ax,1
 26572 00000DA2 C3                      	retn
 26573                                  
 26574                                  ; ----------------------------------------------------------------------
 26575                                  ;**	TempCDS - Create (Temporary?) CDS
 26576                                  ;
 26577                                  ;	ENTRY	?? BUGBUG
 26578                                  ;		(DS) = SysInitSeg
 26579                                  ;	EXIT	?? BUGBUG
 26580                                  ;	USES	?? BUGBUG
 26581                                  ; ----------------------------------------------------------------------
 26582                                  
 26583                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26584                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26585                                  	; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26586                                  TempCDS:
 26587 00000DA3 C43E[6D02]              	les	di,[DOSINFO]
 26588 00000DA7 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 26589                                  
 26590                                  	;mov	cl,[es:di+20h]
 26591 00000DAB 30ED                    	xor	ch,ch			; (cx) = # of block devices
 26592                                  
 26593 00000DAD 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 26594                                  	;mov	[es:di+21h],cl	
 26595                                  
 26596                                  	;mov	al,cl
 26597                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 26598                                  	;;mov	ah,88
 26599                                  	;mul	ah			; (ax) = byte size for those CDSs
 26600                                  	; 30/12/2023
 26601 00000DB1 B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 26602                                  	;mov	al,88
 26603 00000DB3 F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 26604                                  
 26605 00000DB5 E85D05                  	call	ParaRound		; (ax) = paragraph size for CDSs
 26606 00000DB8 8B36[A702]              	mov	si,[top_of_cdss] ; 31/12/2022
 26607                                  
 26608                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 26609                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 26610                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 26611                                  ;		   variable which has the top of free memory for
 26612                                  ;		   device driver loads, etc.
 26613                                  
 26614 00000DBC 29C6                    	sub	si,ax
 26615                                  
 26616                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 26617                                  ;		that automatically updates alloclim every time we
 26618                                  ;		set up some new CDSs. Instead, I've added code
 26619                                  ;		which pre-allocates space for 26 CDSs. This
 26620                                  ;	        way we've got room for worst case CDSs before
 26621                                  ;		we place MagicDrv.sys
 26622                                  ;
 26623                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 26624                                  
 26625                                  	; 30/12/2022
 26626                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26627                                  	; (SYSINIT:0C52h)
 26628                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 26629                                  
 26630 00000DBE 26897518                	mov	[es:di+SYSI_CDS+2],si
 26631                                  	;mov	[es:di+18h],si
 26632 00000DC2 89F0                    	mov	ax,si
 26633 00000DC4 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 26634                                  	;mov	[word es:di+16h],0
 26635                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 26636 00000DCA 26C535                  	lds	si,[es:di]
 26637 00000DCD 8EC0                    	mov	es,ax
 26638 00000DCF 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 26639                                  
 26640                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 26641                                  ;	info from the corresponding DPB.
 26642                                  ;
 26643                                  ;	(cx) = count of CDSs left to process
 26644                                  ;	(es:di) = address of next CDS
 26645                                  
 26646                                  fooset:
 26647                                  	; 23/10/2022
 26648 00000DD1 2EA1[A902]              	mov	ax,[cs:DirStrng] ; "A:"
 26649 00000DD5 AB                      	stosw				; setup the root as the curdir
 26650                                  	
 26651                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 26652                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 26653                                  
 26654                                  	; 30/12/2022
 26655                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 26656 00000DD6 E85200                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 26657                                  
 26658                                  ;	(ds:si) = address of DPB
 26659                                  ;		 (si) = -1 if no drive
 26660                                  
 26661 00000DD9 2EA1[AB02]              	mov	ax,[cs:DirStrng+2] ; "\",0
 26662 00000DDD AB                      	stosw
 26663 00000DDE 2EFE06[A902]            	inc	byte [cs:DirStrng]
 26664 00000DE3 31C0                    	xor	ax,ax ; 0
 26665 00000DE5 51                      	push	cx
 26666                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 26667 00000DE6 B93F00                  	mov	cx,63	; 23/10/2022
 26668 00000DE9 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 26669                                  
 26670                                  ;	should handle the system that does not have any floppies.
 26671                                  ;	in this case,we are going to pretended there are two dummy floppies
 26672                                  ;	in the system. still they have dpb and cds,but we are going to
 26673                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 26674                                  ;	"invalid drive specification" message when the user try to
 26675                                  ;	access them.
 26676                                  ;
 26677                                  ;	(ax) = 0
 26678                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 26679                                  ;	(ds:si) = Next DPB (-1 if none)
 26680                                  
 26681 00000DEB 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 26682 00000DEE 740C                    	je	short fooset_zero	; don't have any physical drive.
 26683                                  
 26684                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 26685                                  ;	if we are faking floppy drives then see if this cds being initialised
 26686                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 26687                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 26688                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 26689                                  ;	for dpb offsets look at inc\dpb.inc.
 26690                                  
 26691                                  	; 03/09/2023
 26692 00000DF0 41                      	inc	cx  ; cx = 1
 26693                                  
 26694 00000DF1 2E380E[8B02]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 03/09/2023
 26695                                  	;cmp	byte [cs:fake_floppy_drv],1
 26696 00000DF6 750A                    	jne	short normcds 		; machine has floppy drives
 26697                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 26698                                  	;cmp	byte [si],1
 26699 00000DF8 380C                    	cmp	[si],cl ; 1 ; 03/09/2023
 26700 00000DFA 7706                    	ja	short normcds
 26701                                  
 26702                                  	; 30/12/2023
 26703                                  	; ax = 0
 26704                                  fooset_zero:
 26705 00000DFC B103                    	mov	cl,3			; the next dbp pointer
 26706                                  					; AX should be zero here
 26707 00000DFE F3AB                    	rep	stosw
 26708                                  	; 30/12/2023
 26709                                  	;pop	cx
 26710 00000E00 EB0F                    	jmp	short get_next_dpb ; findcds
 26711                                  
 26712                                  ;	(ax) = 0
 26713                                  
 26714                                  	; 30/12/2023
 26715                                  ;fooset_zero:
 26716                                  	;mov	cl,3
 26717                                  	;rep	stosw
 26718                                  	;pop	cx
 26719                                  	;jmp	short fincds
 26720                                  
 26721                                  ;*	We have a "normal" DPB and thus a normal CDS.
 26722                                  ;
 26723                                  ;	(ax) = 0
 26724                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 26725                                  ;	(ds:si) = Next DPB (-1 if none)
 26726                                  
 26727                                  normcds:
 26728                                  	; 30/12/2023
 26729                                  	;pop	cx
 26730                                  
 26731                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 26732                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 26733                                  ;	this media is a non-fat based one.
 26734                                  
 26735                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 26736                                  	; 23/10/2022
 26737                                  	;cmp	byte [si+8],0
 26738                                  	; 03/09/2023 (ax=0)
 26739 00000E02 384408                  	cmp	[si+8],al ; 0
 26740 00000E05 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 26741 00000E07 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 26742                                  	;mov	ax,4000h
 26743                                  setnormcds:
 26744 00000E0A AB                      	stosw				; curdir_flags
 26745 00000E0B 89F0                    	mov	ax,si
 26746 00000E0D AB                      	stosw				; curdir_devptr
 26747 00000E0E 8CD8                    	mov	ax,ds
 26748 00000E10 AB                      	stosw
 26749                                  
 26750                                  get_next_dpb:				; entry point for fake_fooset_zero
 26751                                  	; 30/12/2022
 26752                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 26753                                  	; 23/10/2022
 26754                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 26755                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 26756                                  fincds:	; get_next_dpb
 26757                                  	; 30/12/2023
 26758 00000E11 59                      	pop	cx
 26759                                  	; 30/12/2022
 26760                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 26761 00000E12 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 26762 00000E15 AB                      	stosw				; curdir_id
 26763 00000E16 AB                      	stosw				; curdir_id
 26764 00000E17 AB                      	stosw				; curdir_user_word
 26765 00000E18 B80200                  	mov	ax,2
 26766 00000E1B AB                      	stosw				; curdir_end
 26767 00000E1C B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 26768 00000E1E AA                      	stosb
 26769 00000E1F AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 26770 00000E20 AB                      	stosw
 26771 00000E21 AB                      	stosw
 26772                                  
 26773 00000E22 E2AD                    	loop	fooset
 26774                                  	
 26775 00000E24 2EC606[A902]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 26776                                  	
 26777 00000E2A C3                      	retn
 26778                                  
 26779                                  ; ----------------------------------------------------------------------
 26780                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 26781                                  ;
 26782                                  ;	entry:
 26783                                  ;	   al == ASCII CAPS drive letter
 26784                                  ;
 26785                                  ;	exit:
 26786                                  ;	   ds:si -> DPB, or si = -1 if not found
 26787                                  ; ----------------------------------------------------------------------
 26788                                  
 26789                                  ; 30/12/2023
 26790                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0EFEh
 26791                                  
 26792                                  	; 30/12/2022
 26793                                  	; (MSDOS 6.21 SYSINIT:0DEAh)
 26794                                  	; 23/10/2022
 26795                                  get_dpb_for_drive_al:
 26796 00000E2B 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 26797                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 26798 00000E30 C534                    	lds	si,[si]
 26799 00000E32 2C41                    	sub	al,'A'
 26800                                  
 26801                                  get_dpb_for_drive_1:
 26802                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 26803 00000E34 3A04                    	cmp	al,[si]
 26804 00000E36 7408                    	je	short got_dpb_for_drive	;  done if so
 26805                                  
 26806 00000E38 C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 26807 00000E3B 83FEFF                  	cmp	si,-1
 26808 00000E3E 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 26809                                  
 26810                                  got_dpb_for_drive:
 26811 00000E40 C3                      	retn
 26812                                  
 26813                                  ;=======================================================================
 26814                                  
 26815                                  ;**	EndFile - Build DOS structures
 26816                                  ;
 26817                                  ; This procedure is called after the config.sys has been processed and
 26818                                  ; installable device drivers have been loaded (but before "install="
 26819                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 26820                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 26821                                  ; to allow for the safe EXECing of "install=" programs. All memory
 26822                                  ; above these structures is deallocated back to DOS.
 26823                                  ;
 26824                                  ;	ENTRY	?? BUGBUG
 26825                                  ;	EXIT	?? BUGBUG
 26826                                  ;	USES	?? BUGBUG
 26827                                  
 26828                                  ;=======================================================================
 26829                                  ; allocate files
 26830                                  ; ----------------------------------------------------------------------
 26831                                  
 26832                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26833                                  	; (SYSINIT:0CCDh)
 26834                                  
 26835                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26836                                  	; (SYSINIT:0E00h)
 26837                                  
 26838                                  	; 09/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26839                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0F14h)
 26840                                  	
 26841                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0E00h))
 26842                                  
 26843                                  endfile:
 26844                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 26845                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 26846                                  ; to confbot.
 26847                                  
 26848                                  ;	if this procedure has been called to take care of install= command,
 26849                                  ;	   then we have to save es,si registers.
 26850                                  
 26851                                  	; 11/12/2022
 26852                                  	; ds = cs
 26853                                  
 26854                                  	; 23/10/2022
 26855                                  	; 31/03/2019
 26856 00000E41 1E                      	push	ds
 26857                                  
 26858                                  	;;mov	ax,Bios_Data ; 0070h
 26859                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 26860                                  	; 21/10/2022
 26861 00000E42 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26862 00000E45 8ED8                    	mov	ds,ax
 26863                                  
 26864                                  	;cmp	word [052Fh],0
 26865 00000E47 833E[A004]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 26866 00000E4C 7505                    	jne	short multrk_flag_done
 26867                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26868                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 26869                                  	; 12/12/2022
 26870 00000E4E 800E[A004]80            	or	byte [multrk_flag],multrk_on ; 80h
 26871                                  multrk_flag_done:
 26872                                  	; 23/10/2022
 26873                                  	; 31/03/2019
 26874 00000E53 1F                      	pop	ds
 26875                                  
 26876                                  	; 11/12/2022
 26877                                  	; ds = cs
 26878                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 26879                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26880                                  	; (SYSINIT:0E14h)
 26881 00000E54 A1[A302]                	mov	ax,[CONFBOT]
 26882 00000E57 A3[A502]                	mov	[ALLOCLIM],ax
 26883                                  	; 23/10/2022
 26884                                  	;mov	ax, [cs:top_of_cdss]
 26885                                  	;mov	[cs:ALLOCLIM], ax 
 26886                                  
 26887                                  	; 11/12/2022
 26888                                  	; ds = cs
 26889                                  	;push	cs
 26890                                  	;pop	ds
 26891                                  	
 26892                                  	;mov	ax,[CONFBOT]
 26893                                  	;mov	[ALLOCLIM],ax
 26894                                  
 26895                                  	; 09/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 26896                                  	;;;
 26897                                  	;;mov	ax,[cs:ALLOCLIM]
 26898                                  	;mov	ax,[ALLOCLIM]
 26899                                  	;mov	[cs:prev_alloclim],ax
 26900 00000E5A A3[6C03]                	mov	[prev_alloclim],ax
 26901                                  	;mov	ax,[cs:memhi]
 26902 00000E5D A1[6403]                	mov	ax,[memhi]
 26903                                  	;mov	[cs:prev_memhi],ax
 26904 00000E60 A3[6A03]                	mov	[prev_memhi],ax
 26905                                  dosfts:
 26906                                  	;;;
 26907                                  
 26908 00000E63 E88C39                  	call	round
 26909                                  
 26910                                  	; 11/12/2022
 26911                                  	; ds = cs
 26912 00000E66 A0[9F02]                	mov	al,[FILES]
 26913                                  	; 23/10/2022
 26914                                  	;mov	al,[cs:FILES]
 26915 00000E69 2C05                    	sub	al,5
 26916 00000E6B 764B                    	jbe	short dofcbs
 26917                                  
 26918 00000E6D 50                      	push	ax
 26919                                  	;mov	al,devmark_files ; 'F'
 26920 00000E6E B046                    	mov	al,'F'
 26921 00000E70 E81808                  	call	setdevmark		; set devmark for sfts (files)
 26922 00000E73 58                      	pop	ax
 26923 00000E74 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 26924                                  					;  it does sign extend.
 26925                                  	; 11/12/2022
 26926                                  	; ds = cs
 26927 00000E76 8B1E[6203]              	mov	bx,[memlo]
 26928 00000E7A 8B16[6403]              	mov	dx,[memhi]
 26929 00000E7E C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 26930                                  	; 23/10/2022
 26931                                  	;mov	bx,[cs:memlo]
 26932                                  	;mov	dx,[cs:memhi]
 26933                                  	;lds	di,[cs:DOSINFO]		
 26934                                  
 26935                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 26936 00000E82 C57D04                  	lds	di,[di+4]
 26937                                  
 26938                                  	;mov	[di+SF.SFLink],bx
 26939 00000E85 891D                    	mov	[di],bx
 26940 00000E87 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 26941                                  
 26942 00000E8A 0E                      	push	cs
 26943 00000E8B 1F                      	pop	ds
 26944                                  
 26945                                  	; 11/12/2022
 26946                                  	; ds = cs
 26947 00000E8C C43E[6203]              	les	di,[memlo]		;point to new sft
 26948                                  	; 23/10/2022
 26949                                  	;les	di,[cs:memlo]
 26950                                  
 26951                                  	;mov	word [es:di+SF.SFLink],-1
 26952 00000E90 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 26953                                  	;mov	[es:di+SF.SFCount],ax
 26954 00000E95 26894504                	mov	[es:di+4],ax
 26955                                  	; 09/04/2024
 26956 00000E99 B33B                    	mov	bl,SF_ENTRY.size ; 59
 26957                                  	;mov	bl,59
 26958 00000E9B F6E3                    	mul	bl			;ax = number of bytes to clear
 26959 00000E9D 89C1                    	mov	cx,ax
 26960                                  	; 11/12/2022
 26961                                  	; ds = cs
 26962 00000E9F 0106[6203]              	add	[memlo],ax		;allocate memory
 26963                                  	; 23/10/2022
 26964                                  	;add	[cs:memlo],ax
 26965 00000EA3 B80600                  	mov	ax,6
 26966                                  	; 11/12/2022
 26967 00000EA6 0106[6203]              	add	[memlo],ax		;remember the header too
 26968                                  	;add	[cs:memlo],ax
 26969                                  	; 11/12/2022
 26970 00000EAA 800E[6919]02            	or	byte [setdevmarkflag],for_devmark ; 2
 26971                                  	; 23/10/2022
 26972                                  	;or	byte [cs:setdevmarkflag],2
 26973 00000EAF E84039                  	call	round			; check for mem error before the stosb
 26974 00000EB2 01C7                    	add	di,ax
 26975 00000EB4 31C0                    	xor	ax,ax
 26976 00000EB6 F3AA                    	rep	stosb			;clean out the stuff
 26977                                  
 26978                                  ; allocate fcbs
 26979                                  ; ----------------------------------------------------------------------
 26980                                  
 26981                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26982                                  	; (SYSINIT:0D48h)
 26983                                  dofcbs:
 26984                                  	; 11/12/2022
 26985                                  	; ds = cs
 26986                                  	;push	cs
 26987                                  	;pop	ds
 26988 00000EB8 E83739                  	call	round
 26989                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 26990 00000EBB B058                    	mov	al,'X'
 26991 00000EBD E8CB07                  	call	setdevmark
 26992                                  	; 11/12/2022
 26993                                  	; ds = cs
 26994 00000EC0 A0[A002]                	mov	al,[FCBS]
 26995                                  	;mov	al,[cs:FCBS]
 26996 00000EC3 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 26997                                  					;  it does sign extend.
 26998                                  	; 11/12/2022
 26999 00000EC5 8B1E[6203]              	mov	bx,[memlo]
 27000 00000EC9 8B16[6403]              	mov	dx,[memhi]
 27001 00000ECD C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 27002                                  	; 23/10/2022
 27003                                  	;mov	bx,[cs:memlo]
 27004                                  	;mov	dx,[cs:memhi]
 27005                                  	;lds	di,[cs:DOSINFO]
 27006                                  
 27007                                  	;mov	[di+SYSI_FCB],bx
 27008                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 27009                                  	; 23/10/2022
 27010 00000ED1 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 27011 00000ED4 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 27012                                  
 27013 00000ED7 2E8A1E[A102]            	mov	bl,[cs:KEEP]
 27014 00000EDC 30FF                    	xor	bh,bh
 27015                                  	;mov	[di+SYSI_KEEP],bx
 27016 00000EDE 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 27017                                  
 27018 00000EE1 0E                      	push	cs
 27019 00000EE2 1F                      	pop	ds
 27020                                  	
 27021 00000EE3 C43E[6203]              	les	di,[memlo]		;point to new table
 27022                                  	;mov	word [es:di+SF.SFLink],-1
 27023 00000EE7 26C705FFFF              	mov	word [es:di],-1
 27024                                  	;mov	[es:di+SF.SFCount],ax
 27025                                  	; 02/11/2022
 27026 00000EEC 26894504                	mov	[es:di+4],ax
 27027 00000EF0 B33B                    	mov	bl,SF_ENTRY.size ; 59
 27028 00000EF2 89C1                    	mov	cx,ax
 27029 00000EF4 F6E3                    	mul	bl			;ax = number of bytes to clear
 27030 00000EF6 0106[6203]              	add	[memlo],ax		;allocate memory
 27031                                  	;mov	ax,6
 27032 00000EFA B80600                  	mov	ax,SF.size-2 ; 6
 27033 00000EFD 0106[6203]              	add	[memlo],ax		;remember the header too
 27034                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 27035 00000F01 800E[6919]02            	or	byte [setdevmarkflag],2
 27036 00000F06 E8E938                  	call	round			; check for mem error before the stosb
 27037 00000F09 01C7                    	add	di,ax			;skip over header
 27038 00000F0B B041                    	mov	al,'A'
 27039                                  fillloop:
 27040 00000F0D 51                      	push	cx			; save count
 27041 00000F0E B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 27042 00000F11 FC                      	cld
 27043 00000F12 F3AA                    	rep	stosb			; filled
 27044                                  
 27045                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 27046                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]
 27047                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 27048                                  
 27049                                  	; 18/12/2022
 27050                                  	;cx = 0
 27051 00000F14 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 27052 00000F18 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]
 27053 00000F1C 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 27054                                  	
 27055                                  	; 23/10/2022	
 27056                                  	;mov     word [es:di-3Bh],0
 27057                                  	;mov     word [es:di-26h],0
 27058                                  	;mov     word [es:di-24h],0
 27059                                  
 27060 00000F20 59                      	pop	cx
 27061 00000F21 E2EA                    	loop	fillloop
 27062                                  
 27063                                  ; allocate buffers
 27064                                  ; ----------------------------------------------------------------------
 27065                                  
 27066                                  ; search through the list of media supported and allocate 3 buffers if the
 27067                                  ; capacity of the drive is > 360kb
 27068                                  
 27069                                  	; 18/12/2022
 27070                                  	; cx = 0
 27071 00000F23 833E[9902]FF            	cmp	word [buffers],-1	; has buffers been already set?
 27072 00000F28 7403                    	je	short dodefaultbuff
 27073 00000F2A E98000                  	jmp	dobuff			; the user entered the buffers=.
 27074                                  
 27075                                  dodefaultbuff:
 27076                                  	; 18/12/2022
 27077 00000F2D 890E[9B02]              	mov	[h_buffers],cx ; 0
 27078                                  	;inc	cx
 27079                                  	;inc	cx
 27080                                  	;mov	[buffers],cx ; 2
 27081                                  	; 10/04/2024
 27082 00000F31 C706[9902]0200          	mov	word [buffers],2
 27083                                  
 27084                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 27085                                  	;mov	word [buffers],2	; default to 2 buffers
 27086                                  
 27087                                  	; 23/10/2022
 27088                                  	; 04/09/2023
 27089                                  	;push	ax
 27090                                  	;push	ds ; 26/03/2019
 27091                                  
 27092                                  	; 04/09/2023
 27093                                  	; ds = cs
 27094 00000F37 C42E[6D02]              	les	bp,[DOSINFO]		; search through the dpb's
 27095                                  	;les	bp,[cs:DOSINFO]
 27096                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27097                                  	; 11/12/2022
 27098 00000F3B 26C46E00                	les	bp,[es:bp]
 27099                                  	; 23/10/2022
 27100                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 27101                                  
 27102                                  	; 04/09/2023
 27103                                  	; ds = cs
 27104                                  	;push	cs
 27105                                  	;pop	ds
 27106                                  ;SYSINIT:0DE2h:
 27107                                  nextdpb:				; test if the drive supports removeable media
 27108                                  	;mov	bl,[es:bp+DPB.drive]
 27109                                  	; 11/12/2022
 27110 00000F3F 268A5E00                	mov	bl,[es:bp]
 27111                                  	; 23/10/2022
 27112                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 27113                                  
 27114                                  	;inc	bl
 27115                                  	; 18/12/2022
 27116 00000F43 43                      	inc	bx
 27117                                  
 27118                                  	;mov	ax,(IOCTL<<8)|8
 27119 00000F44 B80844                  	mov	ax,4408h
 27120 00000F47 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 27121                                  
 27122                                  ; ignore fixed disks
 27123                                  
 27124 00000F49 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 27125 00000F4B 7534                    	jnz	short nosetbuf
 27126                                  
 27127                                  ; get parameters of drive
 27128                                  
 27129 00000F4D 31DB                    	xor	bx,bx
 27130                                  	;;mov	bl,[es:bp+DPB.drive]
 27131                                  	; 11/12/2022
 27132 00000F4F 268A5E00                	mov	bl,[es:bp]
 27133                                  	; 23/10/2022
 27134                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 27135                                  	
 27136                                  	;inc	bl
 27137                                  	; 18/12/2022
 27138 00000F53 43                      	inc	bx
 27139                                  
 27140 00000F54 BA[BF4D]                	mov	dx,deviceparameters
 27141                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 27142 00000F57 B80D44                  	mov	ax,440Dh
 27143                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 27144 00000F5A B96008                  	mov	cx,860h
 27145 00000F5D CD21                    	int	21h		; DOS - 2+ - IOCTL -
 27146 00000F5F 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 27147                                  					; generic ioctl
 27148                                  ; determine capacity of drive
 27149                                  ; media capacity = #sectors * bytes/sector
 27150                                  
 27151                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS]
 27152                                  	; 23/10/2022
 27153 00000F61 8B1E[CE4D]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 27154                                  	
 27155                                  ; to keep the magnitude of the media capacity within a word,
 27156                                  ; scale the sector size
 27157                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 27158                                  
 27159                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR]
 27160                                  	; 23/10/2022
 27161 00000F65 A1[C64D]                	mov	ax,[deviceparameters+7] ; bytes per sector
 27162 00000F68 31D2                    	xor	dx,dx
 27163 00000F6A B90002                  	mov	cx,512
 27164 00000F6D F7F1                    	div	cx			; scale sector size in factor of
 27165                                  					; 512 bytes
 27166 00000F6F F7E3                    	mul	bx			; ax = #sectors * size factor
 27167 00000F71 09D2                    	or	dx,dx			; just in case of large floppies
 27168 00000F73 7505                    	jnz	short setbuf
 27169 00000F75 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 27170 00000F78 7607                    	jbe	short nosetbuf
 27171                                  setbuf:
 27172                                  	; 18/12/2022
 27173                                  	; word [buffers] = 2
 27174 00000F7A C606[9902]03            	mov	byte [buffers],3
 27175                                  	;mov	word [buffers],3
 27176 00000F7F EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 27177                                  					; for default buffer count
 27178                                  nosetbuf:
 27179                                  	; 23/10/2022
 27180                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 27181 00000F81 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 27182 00000F86 7406                    	je	short chk_memsize_for_buffers
 27183                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 27184 00000F88 26C46E19                	les	bp,[es:bp+19h]
 27185 00000F8C EBB1                    	jmp	short nextdpb
 27186                                  
 27187                                  ;from dos 3.3,the default number of buffers will be changed according to the
 27188                                  ;memory size too.
 27189                                  ; default buffers = 2
 27190                                  ; if diskette media > 360 kb,then default buffers = 3
 27191                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 27192                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 27193                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 27194                                  
 27195                                  chk_memsize_for_buffers:
 27196                                  	; 18/12/2022
 27197                                  	;cmp	word [MEMORY_SIZE],2000h
 27198                                  	;jbe	short bufset
 27199                                  	;mov	word [buffers],5
 27200                                  	;cmp	word [MEMORY_SIZE],4000h
 27201                                  	;jbe	short bufset
 27202                                  	;mov	word [buffers],10
 27203                                  	;cmp	word [MEMORY_SIZE],8000h
 27204                                  	;jbe	short bufset
 27205                                  	;mov	word [buffers],15
 27206                                  
 27207                                  	; 18/12/2022
 27208                                  	; word [buffers] = 3 or 2
 27209 00000F8E BB[9902]                	mov	bx,buffers
 27210 00000F91 A1[9402]                	mov	ax,[MEMORY_SIZE]
 27211 00000F94 48                      	dec	ax	; [MEMORY_SIZE] - 1
 27212                                  
 27213 00000F95 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 27214 00000F98 7213                    	jb	short bufset
 27215 00000F9A C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 27216 00000F9D 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 27217 00000FA0 730B                    	jnb	short bufset
 27218 00000FA2 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 27219 00000FA5 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 27220 00000FA8 7303                    	jnb	short bufset
 27221 00000FAA C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 27222                                  bufset:
 27223                                  	; 23/10/2022
 27224                                  	; 26/03/2019
 27225                                  	; 04/09/2023
 27226                                  	;pop	ds
 27227                                  	;pop	ax
 27228                                  
 27229                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 27230                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 27231                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 27232                                  
 27233                                  ; 26/03/2019
 27234                                  
 27235                                  ;*******************************************************************************
 27236                                  ;									       *
 27237                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 27238                                  ; input :								       *
 27239                                  ;    memhi:memlo - start of the next available memory			       *
 27240                                  ;    buffers = number of buffers					       *
 27241                                  ;    h_buffers = number of secondary buffers				       *
 27242                                  ;									       *
 27243                                  ; output:								       *
 27244                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 27245                                  ;	buffinfo set.							       *
 27246                                  ;	bufferqueue set.						       *
 27247                                  ;									       *
 27248                                  ; subroutines to be called:						       *
 27249                                  ;									       *
 27250                                  ;*******************************************************************************
 27251                                  
 27252                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27253                                  	; (SYSINIT:0E60h)
 27254                                  dobuff:
 27255                                  	; ds = cs ; 31/03/2019
 27256                                  	; 23/10/2022
 27257                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 27258                                  	; 04/09/2023
 27259 00000FAD A1[9902]                	mov	ax,[buffers] ; 31/03/2019
 27260 00000FB0 8B0E[9B02]              	mov	cx,[h_buffers] ; *
 27261 00000FB4 C51E[6D02]              	lds	bx,[DOSINFO]
 27262                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 27263                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 27264 00000FB8 89473F                  	mov	[bx+3Fh],ax
 27265                                  	; 04/09/2023
 27266                                  	;mov	ax,[cs:h_buffers]
 27267                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 27268                                  	;mov	[bx+41h],ax
 27269                                  	; 04/09/2023
 27270 00000FBB 894F41                  	mov	[bx+41h],cx ; *
 27271 00000FBE C55F12                  	lds	bx,[bx+12h]
 27272                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 27273 00000FC1 E82E38                  	call	round		; get [memhi]:[memlo]
 27274                                  	;mov	al,devmark_buf	; ='B'
 27275 00000FC4 B042                    	mov	al,'B'	
 27276 00000FC6 E8C206                  	call	setdevmark
 27277                                  
 27278                                  ;allocate buffers
 27279                                  
 27280 00000FC9 1E                      	push	ds			; save buffer info. ptr.
 27281 00000FCA 53                      	push	bx
 27282                                  
 27283 00000FCB E8D403                  	call	set_buffer
 27284                                  
 27285 00000FCE 5B                      	pop	bx
 27286 00000FCF 1F                      	pop	ds
 27287                                  
 27288                                  ;now set the secondary buffer if specified.
 27289                                  
 27290 00000FD0 2E833E[9B02]00          	cmp	word [cs:h_buffers],0
 27291 00000FD6 742D                    	je	short xif16
 27292 00000FD8 E81738                  	call	round
 27293                                  	; 23/10/2022
 27294 00000FDB 2E8B0E[6203]            	mov	cx,[cs:memlo]
 27295                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 27296 00000FE0 894F06                  	mov	[bx+6],cx
 27297 00000FE3 2E8B0E[6403]            	mov	cx,[cs:memhi]
 27298                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 27299 00000FE8 894F08                  	mov	[bx+8],cx
 27300 00000FEB 2E8B0E[9B02]            	mov	cx,[cs:h_buffers]
 27301                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 27302 00000FF0 894F0A                  	mov	[bx+10],cx
 27303 00000FF3 B80002                  	mov	ax,512			; 512 byte
 27304 00000FF6 F7E1                    	mul	cx
 27305 00000FF8 2EA3[6203]              	mov	[cs:memlo],ax
 27306                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 27307 00000FFC 2E800E[6919]02          	or	byte [cs:setdevmarkflag],2
 27308 00001002 E8ED37                  	call	round
 27309                                  xif16:
 27310                                  
 27311                                  ; ----------------------------------------------------------------------
 27312                                  ; allocate cdss
 27313                                  ; ----------------------------------------------------------------------
 27314                                  
 27315                                  buf1:
 27316 00001005 E8EA37                  	call	round
 27317                                  
 27318 00001008 50                      	push	ax
 27319                                  	; 23/10/2022
 27320                                  	;mov	ax,devmark_cds		;='L'
 27321 00001009 B84C00                  	mov	ax, 'L'
 27322 0000100C E87C06                  	call	setdevmark
 27323 0000100F 58                      	pop	ax
 27324                                  
 27325 00001010 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 27326                                  	;mov	cl,[es:di+SYSI_NUMIO]
 27327 00001015 268A4D20                	mov	cl,[es:di+20h]
 27328 00001019 2E3A0E[A202]            	cmp	cl,[cs:NUM_CDS]
 27329 0000101E 7305                    	jae	short gotncds 		; user setting must be at least numio
 27330 00001020 2E8A0E[A202]            	mov	cl,[cs:NUM_CDS]
 27331                                  gotncds:
 27332 00001025 30ED                    	xor	ch,ch
 27333                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 27334 00001027 26884D21                	mov	[es:di+21h],cl
 27335 0000102B 2EA1[6403]              	mov	ax,[cs:memhi]
 27336                                  	;mov	[es:di+SYSI_CDS+2],ax
 27337 0000102F 26894518                	mov	[es:di+18h],ax
 27338 00001033 2EA1[6203]              	mov	ax,[cs:memlo]
 27339                                  	;mov	[es:di+SYSI_CDS],ax
 27340 00001037 26894516                	mov	[es:di+16h],ax
 27341 0000103B 88C8                    	mov	al,cl
 27342                                  	;mov	ah,curdirlen ; curdir_list.size
 27343 0000103D B458                    	mov	ah,88
 27344 0000103F F6E4                    	mul	ah
 27345 00001041 E8D102                  	call	ParaRound
 27346 00001044 2E0106[6403]            	add	[cs:memhi],ax
 27347                                  
 27348                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 27349 00001049 2E800E[6919]02          	or	byte [cs:setdevmarkflag],2
 27350 0000104F E8A037                  	call	round			; check for mem error before initializing
 27351                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 27352 00001052 26C535                  	lds	si,[es:di]
 27353                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 27354 00001055 26C47D16                	les	di,[es:di+16h]
 27355 00001059 E875FD                  	call	fooset
 27356                                  
 27357                                  ; ----------------------------------------------------------------------
 27358                                  ; allocate space for internal stack
 27359                                  ; ----------------------------------------------------------------------
 27360                                  
 27361 0000105C 0E                      	push	cs
 27362 0000105D 1F                      	pop	ds
 27363                                  
 27364                                  ;	if the user did not entered stacks= command, as a default, do not install
 27365                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 27366                                  ;	otherwise,install it to the user specified value or to the default
 27367                                  ;	value of 9,128 for other systems.
 27368                                  
 27369 0000105E 833E[9002]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 27370 00001063 740E                    	je	short doinstallstack	; then install as specified by the user
 27371 00001065 803E[BC02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 27372 0000106A 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 27373 0000106C 803E[BB02]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 27374 00001071 736D                    	jae	short skipstack
 27375                                  doinstallstack:
 27376 00001073 A1[8C02]                	mov	ax,[stack_count]	; stack_count = 0?
 27377 00001076 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 27378 00001078 7466                    	jz	short skipstack		; don't install stack.
 27379                                  
 27380                                  ;	dynamic relocation of stack code.
 27381                                  
 27382 0000107A E87537                  	call	round			;[memhi] = seg. for stack code
 27383                                  					;[memlo] = 0
 27384                                  
 27385                                  ; set devmark block into memory for mem command
 27386                                  ; devmark_id = 's' for stack
 27387                                  
 27388                                  	;mov	al,devmark_stk	;='S'
 27389                                  	; 23/10/2022
 27390 0000107D B053                    	mov	al,'S'
 27391 0000107F E80906                  	call	setdevmark
 27392                                  
 27393 00001082 A1[6403]                	mov	ax,[memhi]
 27394 00001085 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 27395                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27396                                  	; 11/12/2022
 27397                                  	; ds = cs
 27398                                  	;push	cs
 27399                                  	;pop	ds
 27400 00001087 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 27401 00001089 31FF                    	xor	di,di
 27402 0000108B B9[6902]                	mov	cx,endstackcode
 27403 0000108E 890E[6203]              	mov	[memlo],cx
 27404 00001092 E85D37                  	call	round		;have enough space for relocation?
 27405 00001095 F3A4                    	rep	movsb
 27406                                  
 27407 00001097 1E                      	push	ds		; stick the location of the NextStack entry
 27408                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 27409                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27410                                  	; 21/10/2022
 27411 00001098 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27412 0000109B 8ED8                    	mov	ds,ax
 27413 0000109D C706[0208][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 27414 000010A3 8C06[0408]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 27415                                  
 27416 000010A7 2EA1[6203]              	mov	ax,[cs:memlo]
 27417 000010AB 2EA3[9002]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 27418 000010AF A3[0808]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 27419 000010B2 2EA1[6403]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 27420 000010B6 2EA3[9202]              	mov	[cs:stack_addr+2],ax
 27421 000010BA A3[0A08]                	mov	[IT_StackLoc+2],ax
 27422                                  
 27423                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 27424                                  
 27425                                  	;mov	ax,entrysize ; mov ax,8
 27426                                  	; 23/10/2022
 27427 000010BD B80800                  	mov	ax,8
 27428 000010C0 2E0306[8E02]            	add	ax,[cs:stack_size]
 27429 000010C5 2EF726[8C02]            	mul	word [cs:stack_count]
 27430                                  
 27431 000010CA A3[0C08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 27432                                  
 27433 000010CD 1F                      	pop	ds		; no more need to access Instance Table
 27434                                  
 27435 000010CE E84402                  	call	ParaRound	; convert size to paragraphs
 27436                                  	
 27437                                  	; 11/12/2022
 27438                                  	; ds = cs
 27439                                  	;add	[cs:memhi],ax
 27440 000010D1 0106[6403]              	add	[memhi],ax
 27441                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 27442                                  	;or	byte [cs:setdevmarkflag],2
 27443 000010D5 800E[6919]02            	or	byte [setdevmarkflag],2
 27444                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 27445                                  				;to set the devmark_size for stack by round routine.
 27446 000010DA E81537                  	call	round		; check for memory error before
 27447                                  				; continuing
 27448 000010DD E87D03                  	call	stackinit	; initialize hardware stack. 
 27449                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 27450                                  skipstack:
 27451                                  	
 27452                                  	; 10/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 27453                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:11F0h)
 27454                                  	;;;
 27455                                  	;push	cs
 27456                                  	;pop	ds
 27457                                  	; ds = cs
 27458 000010E0 803E[6E03]01            	cmp	byte [dosdata_umb],1	; PCDOS 7 feature - DOSDATA=UMB/NOUMB configuration
 27459                                  					; 1 = DOSDATA=UMB, 2 = (UMB) done, 0 = NOUMB
 27460 000010E5 7773                    	ja	short dosdata_umb_done	; 2 - done
 27461 000010E7 727D                    	jb	short dosdata_noumb	; 0 - DOSDATA=NOUMB
 27462                                  	
 27463 000010E9 803E[8B16]EA            	cmp	byte [setdevmark],0EAh
 27464 000010EE 7476                    	je	short dosdata_noumb
 27465                                  	
 27466 000010F0 B80258                  	mov	ax,5802h
 27467 000010F3 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 27468                                  				; AL = function code: (DOS 5beta) get UMB link state
 27469 000010F5 98                      	cbw
 27470 000010F6 89C7                    	mov	di,ax			; al = 01h -> UMBs in DOS memory chain
 27471                                  					; save current (previous) UMB link state
 27472 000010F8 BB0100                  	mov	bx,1			; bx = 01h -> add UMBs to DOS memory chain
 27473                                  	
 27474 000010FB B80358                  	mov	ax,5803h
 27475 000010FE CD21                    	int	21h
 27476 00001100 7264                    	jc	short dosdata_noumb
 27477                                  	
 27478 00001102 B80058                  	mov	ax,5800h
 27479 00001105 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 27480                                  				; AL = function code: get allocation strategy
 27481                                  	
 27482 00001107 89C6                    	mov	si,ax			; ax = current strategy
 27483                                  					; save current (previous) allocation strategy
 27484 00001109 BB4000                  	mov	bx,40h			; bl = new strategy = 40h - high memory first fit
 27485                                  	
 27486 0000110C B80158                  	mov	ax,5801h
 27487 0000110F CD21                    	int	21h
 27488                                  
 27489 00001111 8B1E[6403]              	mov	bx,[memhi]
 27490 00001115 2B1E[6A03]              	sub	bx,[prev_memhi]
 27491                                  	
 27492 00001119 B448                    	mov	ah,48h
 27493 0000111B CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
 27494                                  				; BX = number of 16-byte paragraphs desired
 27495 0000111D 89C1                    	mov	cx,ax			; ax = segment of allocated block
 27496 0000111F 89FB                    	mov	bx,di			; restore previous UMB link state
 27497                                  	
 27498 00001121 B80358                  	mov	ax,5803h
 27499 00001124 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 27500                                  				; AL = function code: (DOS 5beta) set UMB link state
 27501 00001126 89F3                    	mov	bx,si			; restore previous allocation strategy
 27502                                  	
 27503 00001128 B80158                  	mov	ax,5801h
 27504 0000112B CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 27505                                  				; AL = function code: set allocation strategy
 27506 0000112D 81F900A0                	cmp	cx,0A000h		; Is the allocated memory block (segment) a UMB?
 27507 00001131 7233                    	jb	short dosdata_noumb	; no
 27508                                  	
 27509                                  	;mov	word [ALLOCLIM],0FFFFh
 27510                                  	;mov	word [memlo],0
 27511 00001133 890E[6403]              	mov	[memhi],cx
 27512 00001137 49                      	dec	cx
 27513 00001138 8EC1                    	mov	es,cx			; point to arena/mcb
 27514                                  	; 10/04/2024
 27515 0000113A 31C9                    	xor	cx,cx ; 0
 27516 0000113C 890E[6203]              	mov	[memlo],cx ; 0
 27517 00001140 49                      	dec	cx
 27518 00001141 890E[A502]              	mov	[ALLOCLIM],cx ; 0FFFFh
 27519                                  
 27520 00001145 26C70601000800          	mov	word [es:1],8		; [es:arena_owner], 8 ; set impossible owner
 27521 0000114C 26C70608005344          	mov	word [es:8],4453h	; [es:arena_name],'SD' ; System Data
 27522 00001153 FE06[6E03]              	inc	byte [dosdata_umb]	; 1 -> 2 ; DOSDATA=UMB done.
 27523 00001157 E909FD                  	jmp	dosfts
 27524                                  
 27525                                  dosdata_umb_done:
 27526 0000115A A1[6A03]                	mov	ax,[prev_memhi]		; (recent memory block/segment before UMBs)
 27527 0000115D A3[6403]                	mov	[memhi],ax
 27528 00001160 A1[6C03]                	mov	ax,[prev_alloclim]
 27529 00001163 A3[A502]                	mov	[ALLOCLIM],ax
 27530                                  dosdata_noumb:
 27531                                   	;;;
 27532                                  
 27533                                  ;skipstack:
 27534                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27535                                  	; (SYSINIT:0F99h)
 27536                                  
 27537                                  	; 11/12/2022
 27538                                  	; ds = cs
 27539                                  	;push	cs
 27540                                  	;pop	ds
 27541                                  
 27542 00001166 A0[9F02]                	mov	al,[FILES]
 27543 00001169 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 27544                                  				;  it does sign extend.
 27545 0000116B 89C1                    	mov	cx,ax
 27546 0000116D 31DB                    	xor	bx,bx		;close standard input
 27547 0000116F B43E                    	mov	ah,3Eh ; CLOSE
 27548 00001171 CD21                    	int	21h
 27549 00001173 BB0200                  	mov	bx,2
 27550                                  rcclloop:			;close everybody but standard output
 27551 00001176 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 27552 00001178 CD21                    	int	21h		; in case we can't get new one open.
 27553 0000117A 43                      	inc	bx
 27554 0000117B E2F9                    	loop	rcclloop
 27555                                  
 27556 0000117D BA[C54A]                	mov	dx,condev
 27557 00001180 B002                    	mov	al,2
 27558 00001182 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 27559 00001184 F9                      	stc			; set for possible int 24
 27560 00001185 CD21                    	int	21h
 27561 00001187 7305                    	jnc	short goaux
 27562 00001189 E89C38                  	call	badfil
 27563 0000118C EB13                    	jmp	short goaux2
 27564                                  goaux:	
 27565 0000118E 50                      	push	ax
 27566 0000118F BB0100                  	mov	bx,1		;close standard output
 27567 00001192 B43E                    	mov	ah,3Eh ; CLOSE
 27568 00001194 CD21                    	int	21h
 27569 00001196 58                      	pop	ax
 27570                                  
 27571 00001197 89C3                    	mov	bx,ax		;new device handle
 27572 00001199 B445                    	mov	ah,45h ; XDUP
 27573 0000119B CD21                    	int	21h		;dup to 1,stdout
 27574 0000119D B445                    	mov	ah,45h ; XDUP
 27575 0000119F CD21                    	int	21h		;dup to 2,stderr
 27576                                  goaux2: 
 27577 000011A1 BA[C94A]                	mov	dx,auxdev
 27578 000011A4 B002                    	mov	al,2		;read/write access
 27579 000011A6 E8B038                  	call	open_dev
 27580                                  
 27581 000011A9 BA[CD4A]                	mov	dx,prndev
 27582 000011AC B001                    	mov	al,1		;write only
 27583 000011AE E8A838                  	call	open_dev
 27584                                  
 27585                                  ;global rearm command for shared interrupt devices attached in the system;
 27586                                  ;shared interrupt attachment has some problem when it issues interrupt
 27587                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 27588                                  ;no further interrupts on that level will be presented until a global rearm
 27589                                  ;is issued. by the request of the system architecture group, msbio will
 27590                                  ;issue a global rearm after every device driver is loaded.
 27591                                  ;to issue a global rearm:	;for pc1,xt,palace
 27592                                  ;
 27593                                  ;			  out 02f2h,xx  ; interrupt level 2
 27594                                  ;			  out 02f3h,xx  ; interrupt level 3
 27595                                  ;			  out 02f4h,xx  ; interrupt level 4
 27596                                  ;			  out 02f5h,xx  ; interrupt level 5
 27597                                  ;			  out 02f6h,xx  ; interrupt level 6
 27598                                  ;			  out 02f7h,xx  ; interrupt level 7
 27599                                  ;
 27600                                  ;	for pc at,in addition to the above commands,
 27601                                  ;	need to handle the secondary interrupt handler
 27602                                  ;
 27603                                  ;			  out 06f2h,xx  ; interrupt level 10
 27604                                  ;			  out 06f3h,xx  ; interrupt level 11
 27605                                  ;			  out 06f4h,xx  ; interrupt level 12
 27606                                  ;			  out 06f6h,xx  ; interrupt level 14
 27607                                  ;			  out 06f7h,xx  ; interrupt level 15
 27608                                  ;
 27609                                  ;	for round-up machine
 27610                                  ;
 27611                                  ;			  none.
 27612                                  
 27613                                  ; where xx stands for any value.
 27614                                  ;
 27615                                  ; for your information,after naples level machine,the system service bios
 27616                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 27617                                  
 27618                                  	; 24/10/2022
 27619                                  
 27620 000011B1 50                      	push	ax
 27621 000011B2 53                      	push	bx
 27622 000011B3 52                      	push	dx
 27623 000011B4 06                      	push	es
 27624                                  
 27625 000011B5 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 27626 000011B7 BAF202                  	mov	dx,2F2h 		;get starting address
 27627 000011BA EE                      	out	dx,al			; out 02f2h,0ffh
 27628 000011BB 42                      	inc	dx
 27629 000011BC EE                      	out	dx,al			; out 02f3h,0ffh
 27630 000011BD 42                      	inc	dx
 27631 000011BE EE                      	out	dx,al			; out 02f4h,0ffh
 27632 000011BF 42                      	inc	dx
 27633 000011C0 EE                      	out	dx,al			; out 02f5h,0ffh
 27634 000011C1 42                      	inc	dx
 27635 000011C2 EE                      	out	dx,al			; out 02f6h,0ffh
 27636 000011C3 42                      	inc	dx
 27637 000011C4 EE                      	out	dx,al			; out 02f7h,0ffh
 27638                                  
 27639                                  ;sb secondary global rearm
 27640                                  
 27641 000011C5 B800F0                  	mov	ax,0F000h		;get machine type
 27642 000011C8 8EC0                    	mov	es,ax
 27643 000011CA 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 27644 000011D0 740D                    	je	short startrearm	; *if at no need to check
 27645                                  
 27646 000011D2 B4C0                    	mov	ah,0C0h 		;get system configuration
 27647 000011D4 CD15                    	int	15h			; *
 27648 000011D6 7216                    	jc	short finishrearm	; *jmp if old rom
 27649                                  
 27650                                  ; test feature byte for secondary interrupt controller
 27651                                  
 27652 000011D8 26F6470540              	test	byte [es:bx+5],40h
 27653                                  	; 24/10/2022
 27654                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 27655 000011DD 740F                    	je	short finishrearm	;jmp if it is there
 27656                                  
 27657                                  startrearm:
 27658 000011DF B0FF                    	mov	al,0FFh 		;write any pattern to port
 27659 000011E1 BAF206                  	mov	dx,6F2h 		;get starting address
 27660 000011E4 EE                      	out	dx,al			;out 06f2h,0ffh
 27661 000011E5 42                      	inc	dx			;bump address
 27662 000011E6 EE                      	out	dx,al			;out 06f3h,0ffh
 27663 000011E7 42                      	inc	dx			;bump address
 27664 000011E8 EE                      	out	dx,al			;out 06f4h,0ffh
 27665 000011E9 42                      	inc	dx			;bump address
 27666 000011EA 42                      	inc	dx			;bump address
 27667 000011EB EE                      	out	dx,al			;out 06f6h,0ffh
 27668 000011EC 42                      	inc	dx			;bump address
 27669 000011ED EE                      	out	dx,al			;out 06f7h,0ffh
 27670                                  
 27671                                  finishrearm:
 27672 000011EE 07                      	pop	es
 27673 000011EF 5A                      	pop	dx
 27674 000011F0 5B                      	pop	bx
 27675 000011F1 58                      	pop	ax
 27676                                  
 27677                                  ;    global rearm end *******************
 27678                                  
 27679                                  ; ----------------------------------------------------------------------
 27680                                  ; allocate sysinit_base for install= command
 27681                                  ; ----------------------------------------------------------------------
 27682                                  ; sysinit_base allocation.
 27683                                  ;   check if endfile has been called to handle install= command.
 27684                                  
 27685                                  set_sysinit_base:
 27686                                  
 27687                                  ; ----------------------------------------------------------------------
 27688                                  ;sysinit_base will be established in the secure area of
 27689                                  ;lower memory when it handles the first install= command.
 27690                                  ;sysinit_base is the place where the actual exec function will be called and
 27691                                  ;will check sysinit module in high memory if it is damaged by the application
 27692                                  ;program.  if sysinit module has been broken,then "memory error..." message
 27693                                  ;is displayed by sysinit_base.
 27694                                  ; ----------------------------------------------------------------------
 27695                                  
 27696                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 27697                                  	; (SYSINIT:1028h)
 27698                                  
 27699                                  	; 11/12/2022
 27700                                  	; ds = cs
 27701 000011F2 50                      	push	ax			; set devmark for mem command
 27702 000011F3 A1[6403]                	mov	ax,[memhi]
 27703 000011F6 2B06[6803]              	sub	ax,[area]
 27704 000011FA A3[6003]                	mov	[impossible_owner_size],ax ;remember the size in case.
 27705                                  	;mov	al,devmark_inst ; 'T'
 27706 000011FD B054                    	mov	al,'T'
 27707 000011FF E88904                  	call	setdevmark
 27708 00001202 58                      	pop	ax
 27709                                  
 27710 00001203 8B3E[6403]              	mov	di,[memhi]
 27711 00001207 8EC7                    	mov	es,di
 27712 00001209 893E[D402]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 27713 0000120D 31FF                    	xor	di,di
 27714 0000120F 893E[D202]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 27715 00001213 BE[2113]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 27716 00001216 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 27717                                  	; 24/10/2022 
 27718                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 27719 00001219 010E[6203]              	add	[memlo],cx
 27720                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 27721                                  	; 11/12/2022
 27722                                  	; ds = cs
 27723                                  	;or	byte [cs:setdevmarkflag],2
 27724 0000121D 800E[6919]02            	or	byte [setdevmarkflag],2
 27725                                  	;or	byte [setdevmarkflag],for_devmark
 27726 00001222 E8CD35                  	call	round			; check mem error. also,readjust memhi for the next use.
 27727 00001225 F3A4                    	rep	movsb			; reallocate it.
 27728                                  
 27729 00001227 C706[D602][0813]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 27730 0000122D 8C0E[D802]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 27731                                  	;or	word [install_flag],has_installed ; set the flag.
 27732                                  	;or	byte [install_flag],has_installed ; 2
 27733                                  	; 11/12/2022
 27734 00001231 800E[CE02]02            	or	byte [install_flag],2
 27735                                  	; 24/10/2022
 27736                                  	;or	word [install_flag],2	
 27737                                  
 27738                                  ; ----------------------------------------------------------------------
 27739                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 27740                                  ; the top of the memory will be allocated for sysinit and config.sys if
 27741                                  ; have_install_cmd.
 27742                                  ; ----------------------------------------------------------------------
 27743                                  
 27744 00001236 E8B935                  	call	round
 27745 00001239 8B1E[6403]              	mov	bx,[memhi]
 27746 0000123D A1[6803]                	mov	ax,[area]
 27747 00001240 A3[5E03]                	mov	[old_area],ax		; save [area]
 27748 00001243 8EC0                    	mov	es,ax			;calc what we needed
 27749 00001245 29C3                    	sub	bx,ax
 27750                                  	; 24/10/2022
 27751 00001247 B44A                    	mov	ah,4Ah ; SETBLOCK
 27752 00001249 CD21                    	int	21h			;give the rest back
 27753                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 27754                                  		; ES = segment address of block to change
 27755                                  		; BX = new size in paragraphs
 27756 0000124B 06                      	push	es
 27757 0000124C 8CC0                    	mov	ax,es
 27758 0000124E 48                      	dec	ax
 27759 0000124F 8EC0                    	mov	es,ax			;point to arena
 27760                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 27761                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 27762                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 27763                                  	; 24/10/2022
 27764 00001251 26C70601000800          	mov	word [es:1],8		;set impossible owner
 27765 00001258 26C70608005344          	mov	word [es:8],'SD'	; System Data
 27766 0000125F 07                      	pop	es
 27767                                  
 27768 00001260 BBFFFF                  	mov	bx,0FFFFh
 27769 00001263 B448                    	mov	ah,48h ; ALLOC
 27770 00001265 CD21                    	int	21h
 27771 00001267 B448                    	mov	ah,48h ; ALLOC
 27772 00001269 CD21                    	int	21h			; allocate the rest of the memory
 27773                                  		; DOS - 2+ - ALLOCATE MEMORY
 27774                                  		; BX = number of 16-byte paragraphs desired
 27775 0000126B A3[6403]                	mov	[memhi],ax		; start of the allocated memory
 27776 0000126E C706[6203]0000          	mov	word [memlo],0		;  to be used next.
 27777                                  
 27778                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 27779                                  ;;;; allocated.
 27780                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 27781                                  ;;;; this time) to the top-of-the memory),here we are going to
 27782                                  ;;;; 1). "setblock" from memhi to confbot.
 27783                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 27784                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 27785                                  
 27786                                  ;memory allocation for sysinit,confbot module.
 27787                                  
 27788 00001274 8EC0                    	mov	es,ax
 27789                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27790                                  	; (SYSINIT:11DFh)
 27791 00001276 8B1E[A302]              	mov	bx,[CONFBOT]
 27792                                  	; 24/10/2022
 27793                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 27794 0000127A 29C3                    	sub	bx,ax			; confbot - memhi
 27795 0000127C 4B                      	dec	bx			; make a room for the memory block id.
 27796 0000127D 4B                      	dec	bx			; make sure!!!.
 27797 0000127E B44A                    	mov	ah,4Ah ; SETBLOCK
 27798 00001280 CD21                    	int	21h			; this will free (confbot to top of memory)
 27799                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 27800                                  		; ES = segment address of block to change
 27801                                  		; BX = new size in paragraphs
 27802 00001282 BBFFFF                  	mov	bx,0FFFFh
 27803 00001285 B448                    	mov	ah,48h ; ALLOC
 27804 00001287 CD21                    	int	21h
 27805 00001289 B448                    	mov	ah,48h ; ALLOC
 27806 0000128B CD21                    	int	21h			; allocate (confbot to top of memory)
 27807                                  		; DOS - 2+ - ALLOCATE MEMORY
 27808                                  		; BX = number of 16-byte paragraphs desired
 27809 0000128D A3[6803]                	mov	[area],ax		; save allocated memory segment.
 27810                                  					; need this to free this area for command.com.
 27811 00001290 8E06[6403]              	mov	es,[memhi]
 27812 00001294 B449                    	mov	ah,49h			; free allocated memory.
 27813 00001296 CD21                    	int	21h			; free (memhi to confbot(=area))
 27814                                  		; DOS - 2+ - FREE MEMORY
 27815                                  		; ES = segment address of area to be freed
 27816                                  endfile_ret:
 27817 00001298 C3                      	retn
 27818                                  
 27819                                  ; End of "EndFile" DOS structure configuration.
 27820                                  
 27821                                  ; ----------------------------------------------------------------------
 27822                                  ; 26/03/2019 - Retro DOS v4.0
 27823                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 27824                                  ; ----------------------------------------------------------------------
 27825                                  ; Do_Install_Exec
 27826                                  ;
 27827                                  ; This procedure is used to EXEC a program being loaded via the 
 27828                                  ; "install=" mechanism in config.sys. It does this by setting up
 27829                                  ; the parameters, and then jumping to sysinit_base, which has been
 27830                                  ; setup in low memory. When complete, sysinit_base will jump back
 27831                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 27832                                  ; program).
 27833                                  
 27834                                  ;SYSINIT:10CFh:
 27835                                  
 27836                                  do_install_exec:			; now,handles install= command.
 27837                                  
 27838 00001299 56                      	push	si			; save si for config.sys again.
 27839                                  
 27840                                  ; we are going to call load/exec function.
 27841                                  ; set es:bx to the parameter block here;;;;;;;
 27842                                  ; set ds:dx to the asciiz string. remember that we already has 0
 27843                                  ; after the filename. so parameter starts after that. if next
 27844                                  ; character is a line feed (i.e. 10),then assume that the 0
 27845                                  ; we already encountered used to be a carrage return. in this
 27846                                  ; case,let's set the length to 0 which will be followed by
 27847                                  ; carridge return.
 27848                                  
 27849                                  ; es:si -> command line in config.sys. points to the first non blank
 27850                                  ;character after =.
 27851                                  
 27852 0000129A 06                      	push	es
 27853 0000129B 1E                      	push	ds
 27854 0000129C 07                      	pop	es
 27855 0000129D 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 27856 0000129E 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 27857                                  
 27858 000012A0 31C9                    	xor	cx,cx
 27859 000012A2 FC                      	cld
 27860 000012A3 2EC606[F102]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 27861 000012A9 BF[F202]                	mov	di,ldexec_parm
 27862                                  installfilename:			; skip the file name
 27863 000012AC AC                      	lodsb				; al = ds:si; si++
 27864                                  	; 05/09/2023
 27865 000012AD 08C0                    	or	al,al
 27866                                  	;cmp	al,0
 27867                                  	;je	short got_installparm
 27868                                  	;jmp	short installfilename
 27869                                  	; 10/04/2024
 27870 000012AF 75FB                    	jnz	short installfilename
 27871                                  got_installparm:			; copy the parameters to ldexec_parm
 27872 000012B1 AC                      	lodsb
 27873 000012B2 268805                  	mov	[es:di],al
 27874 000012B5 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 27875 000012B7 7405                    	je	short done_installparm
 27876 000012B9 FEC1                    	inc	cl			; # of char. in the parm.
 27877 000012BB 47                      	inc	di
 27878 000012BC EBF3                    	jmp	short got_installparm
 27879                                  done_installparm:
 27880 000012BE 2E880E[F002]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 27881                                  	; 05/09/2023
 27882 000012C3 08C9                    	or	cl,cl
 27883                                  	;cmp	cl,0			; if no parm,then
 27884 000012C5 7506                    	jne	short install_seg_set 	; let the parm area
 27885 000012C7 2EC606[F102]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 27886                                  					; starts with cr.
 27887                                  install_seg_set:
 27888                                  	; 05/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 27889 000012CD 31DB                    	xor	bx,bx
 27890                                  	;mov	word [cs:0],0		; make a null environment segment
 27891 000012CF 2E891F                  	mov	[cs:bx],bx ; 05/09/2023
 27892 000012D2 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 27893                                  
 27894                                  ;---------------------------------------------------M067----------------
 27895                                  ;
 27896                                  ; 	the environment pointer is made 0. so the current environment ptr.
 27897                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 27898                                  ;
 27899                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 27900                                  ;
 27901                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 27902                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 27903                                  ; 	was fixed. 
 27904                                  ;
 27905                                  ; ----------------------------------------------------------------------
 27906                                  
 27907                                  ;;ifdef MULTI_CONFIG
 27908                                  
 27909                                  ; If there's any environment data in "config_wrkseg", pass to app
 27910                                  
 27911                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 27912                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 27913                                  ;%if 0
 27914 000012D4 89C1                    	mov	cx,ax ; *
 27915                                  	; 05/09/2023
 27916 000012D6 2E391E[6019]            	cmp	[cs:config_envlen],bx ; 0
 27917                                  	;cmp	word [cs:config_envlen],0
 27918 000012DB 7405                    	je	short no_envdata2
 27919 000012DD 2E8B0E[6219]            	mov	cx,[cs:config_wrkseg] ; *
 27920                                  no_envdata2:
 27921                                  ;;endif  ;MULTI_CONFIG
 27922                                  
 27923                                  ;%endif	; 24/10/2022
 27924                                  
 27925                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 27926                                  	; 05/09/2023 (BugFix)
 27927                                  	; 24/10/2022
 27928 000012E2 2E890E[4203]            	mov	[cs:iexec.environ],cx ; *
 27929                                  	; 02/11/2022
 27930                                  	;mov	[cs:iexec.environ],ax	; 05/09/2023
 27931                                  
 27932                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 27933 000012E7 2EA3[4603]              	mov	[cs:iexec.ldexec_line+2],ax
 27934                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 27935 000012EB 2EA3[4A03]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 27936                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 27937 000012EF 2EA3[4E03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 27938 000012F3 E86000                  	call	sum_up
 27939 000012F6 26A3[DA02]              	mov	[es:checksum],ax	; save the value of the sum
 27940 000012FA 31C0                    	xor	ax,ax
 27941 000012FC B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 27942 000012FE BB[4203]                	mov	bx,instexe		; es:bx -> parm block.
 27943 00001301 06                      	push	es			; save es,ds for load/exec
 27944 00001302 1E                      	push	ds			; these registers will be restored in sysinit_base.
 27945 00001303 2EFF2E[D202]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 27946                                  					; load/exec function and check sum.
 27947                                  
 27948                                  ;----------------------------------------
 27949                                  
 27950                                  ;j.k. this is the returning address from sysinit_base.
 27951                                  
 27952                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 27953                                  
 27954                                  sysinitptr:				; returning far address from sysinit_base
 27955 00001308 5E                      	pop	si			; restore si for config.sys file.
 27956 00001309 06                      	push	es
 27957 0000130A 1E                      	push	ds
 27958 0000130B 07                      	pop	es
 27959 0000130C 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 27960 0000130D 7305                            jnc     short install_exit_ret
 27961                                  
 27962 0000130F 56                      	push	si			; error in loading the file for install=.
 27963 00001310 E81937                  	call	badload 		; es:si-> path,filename,0.
 27964 00001313 5E                      	pop	si
 27965                                  
 27966                                  	; 24/10/2022
 27967                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 27968                                  	; 11/12/2022
 27969                                  	; ds = cs
 27970                                  
 27971                                  	; 30/12/2022 - Retro DOS v4.2
 27972                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 27973                                  
 27974                                  install_exit_ret:
 27975 00001314 C3                      	retn
 27976                                  
 27977                                  ; 30/12/2022 - Retro DOS v4.2
 27978                                  %if 0
 27979                                  install_exit_ret:
 27980                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 27981                                  
 27982                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 27983                                  ;SYSINIT:1142h:
 27984                                  	mov     ah,4Dh
 27985                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 27986                                  	cmp     ah,3
 27987                                  	jz      short sysinitptr_retn
 27988                                  	call    error_line
 27989                                  	stc
 27990                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 27991                                  	retn		
 27992                                  
 27993                                  %endif ; 24/10/2022
 27994                                  
 27995                                  ; ----------------------------------------------------------------------
 27996                                  
 27997                                  ;**	ParaRound - Round Up length to paragraph multiple
 27998                                  ;
 27999                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 28000                                  ;	by 16 yielding a "length in paragraphs" value.
 28001                                  ;
 28002                                  ;	ENTRY	(ax) = byte length
 28003                                  ;	EXIT	(ax) = rounded up length in paragraphs
 28004                                  ;	USES	ax, flags
 28005                                  
 28006                                  ParaRound:
 28007 00001315 83C00F                  	add	ax,15
 28008 00001318 D1D8                    	rcr	ax,1
 28009 0000131A D1E8                    	shr	ax,1
 28010 0000131C D1E8                    	shr	ax,1
 28011 0000131E D1E8                    	shr	ax,1
 28012 00001320 C3                      	retn
 28013                                  
 28014                                  ; ----------------------------------------------------------------------
 28015                                  ; sysinit_base module.
 28016                                  ;
 28017                                  ; This module is relocated by the routine EndFile to a location in low
 28018                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 28019                                  ; that are being loaded by the "install=" command. After the EXEC call
 28020                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 28021                                  ; top of memory) to be sure that the EXECed program did not damage it.
 28022                                  ; If it did, then this module will print an error message and stop the
 28023                                  ; system. Otherwise, it returns control to SYSINIT.
 28024                                  ;
 28025                                  ;in: after relocation,
 28026                                  ;    ax = 4b00h - load and execute the program dos function.
 28027                                  ;    ds = confbot. segment of config.sys file image
 28028                                  ;    es = sysinitseg. segment of sysinit module itself.
 28029                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 28030                                  ;    es:bx = pointer to a parameter block for load.
 28031                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 28032                                  ;    bigsize (word) - # of word from confbot to SI_end.
 28033                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 28034                                  ;			word boundary moduler form.
 28035                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 28036                                  ;
 28037                                  ;note: sysinit should save necessary registers and when the control is back
 28038                                  
 28039                                  	; 24/10/2022
 28040                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 28041                                  sysinit_base:				
 28042 00001321 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 28043 00001326 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 28044 0000132B CD21                    	int	21h			; load/exec dos call.
 28045 0000132D 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 28046 00001332 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 28047 00001337 1F                      	pop	ds			; restore confbot seg
 28048 00001338 07                      	pop	es			; restore sysinitseg
 28049 00001339 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 28050                                  					; at this time,i don't have to worry about
 28051                                  					; that sysinit module has been broken or not.
 28052 0000133B E81800                  	call	sum_up			; otherwise,check if it is good.
 28053 0000133E 263906[DA02]            	cmp	[es:checksum],ax
 28054 00001343 740C                    	je	short sysinit_base_end
 28055                                  
 28056                                  ;	memory broken. show "memory allocation error" message and stall.
 28057                                  
 28058 00001345 B409                    	mov	ah,9
 28059 00001347 0E                      	push	cs
 28060 00001348 1F                      	pop	ds
 28061                                  	; 30/12/2022
 28062                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 28063                                  	;mov	dx,102
 28064 00001349 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 28065                                  					; 66h (for MSDOS 6.21 SYSINIT)
 28066 0000134C CD21                    	int	21h
 28067                                  		; DOS - PRINT STRING
 28068                                  		; DS:DX -> string terminated by "$"
 28069                                  
 28070                                  	; 30/12/2022 - Retro DOS v4.2
 28071                                  stall:
 28072                                  	; 24/10/2022
 28073                                  _stall: 
 28074                                  	; 11/12/2022
 28075 0000134E F4                      	hlt 
 28076                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28077                                  	;hlt				;use HLT to minimize energy consumption
 28078 0000134F EBFD                            jmp	short _stall
 28079                                  
 28080                                  sysinit_base_end: 
 28081 00001351 26FF2E[D602]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 28082                                  
 28083                                  ;-------------------------------------
 28084                                  
 28085                                  sum_up:
 28086                                  
 28087                                  ;in:   es - sysinitseg.
 28088                                  ;out:  ax - result
 28089                                  ;
 28090                                  ;remark: since this routine will only check starting from "locstack" to the end of
 28091                                  ;	 sysinit segment,the data area, and the current stack area are not
 28092                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 28093                                  ;	 gaurantee to be safe.
 28094                                  ;
 28095                                  ;first sum up confbot seg.
 28096                                  
 28097 00001356 1E                      	push	ds
 28098                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28099                                  	; (SYSINIT:12C6h)
 28100 00001357 26A1[A302]              	mov	ax,[es:CONFBOT]
 28101                                  	; 24/10/2022
 28102                                  	;mov	ax,[es:top_of_cdss]
 28103 0000135B 8ED8                    	mov	ds,ax
 28104 0000135D 31F6                    	xor	si,si
 28105 0000135F 31C0                    	xor	ax,ax
 28106 00001361 268B0E[D002]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 28107                                  					; whole test better fail.
 28108 00001366 D1E9                    	shr	cx,1			; make it a word count
 28109 00001368 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 28110                                  sum1:
 28111 0000136A 0304                    	add	ax,[si]
 28112 0000136C 46                      	inc	si
 28113 0000136D 46                      	inc	si
 28114 0000136E E2FA                    	loop	sum1
 28115                                  ;now,sum up sysinit module.
 28116                                  sum_sys_code:
 28117                                  	; 24/10/2022
 28118 00001370 BE7013                  	mov	si,locstack ;; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 28119                                  			    ;; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 28120                                  			    ; 10/04/2024	
 28121                                  			    ; 586h (PCDOS 7.1 IBMBIO.COM, SYSINIT)	
 28122                                  				        ; starting after the stack.  M069
 28123                                  					;  this does not cover the possible stack code!!!
 28124                                  	;;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 28125                                  	; 02/11/2022
 28126                                  	;;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 28127                                  	; 10/04/2024
 28128                                  	;mov	cx,5B40h  ; (23360) for PCDOS 7.1 IBMBIO.COM (SYSINIT)	
 28129                                  	; 30/12/2022  
 28130 00001373 B9[1054]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 28131 00001376 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 28132 00001378 D1E9                    	shr	cx,1
 28133                                  sum2:
 28134 0000137A 260304                  	add	ax,[es:si]
 28135 0000137D 46                      	inc	si
 28136 0000137E 46                      	inc	si
 28137 0000137F E2F9                    	loop	sum2
 28138 00001381 1F                      	pop	ds
 28139 00001382 C3                      	retn
 28140                                  
 28141                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 28142                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 28143                                  ; (SYSINIT:12F2h)
 28144                                  ; 10/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 28145                                  ; (SYSINIT:149Dh)
 28146                                  
 28147                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 28148                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h)
 28149                                  				    ; = 62 (PCDOS 7.1 IBMBIO.COM, SYSINIT:143Bh)
 28150                                  sysinit_base_ssx:	
 28151 00001383 0000                    	dw	0
 28152                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 28153                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1295h)
 28154                                  				    ; = 64 (PCDOS 7.1 IBMBIO.COM, SYSINIT:1440h)
 28155                                  sysinit_base_spx:
 28156 00001385 0000                    	dw	0	
 28157                                  
 28158                                  mem_alloc_err_msgx:
 28159                                  
 28160                                         ;include msbio.cl4		; memory allocation error message
 28161                                  
 28162                                  ;(SYSINIT:12F6h: ; MSDOS 6.21 IO.SYS)
 28163                                  ;SYSINIT:14A1h:	; PCDOS 7.1 IBMBIO.COM
 28164 00001387 0D0A                    	db	0Dh,0Ah
 28165 00001389 4D656D6F727920616C-     	db 	'Memory allocation error $'
 28165 00001392 6C6F636174696F6E20-
 28165 0000139B 6572726F722024     
 28166                                  
 28167                                  end_sysinit_base: ; label byte
 28168                                  	; 24/10/2022
 28169                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 28170                                  
 28171                                  ; ----------------------------------------------------------------------
 28172                                  ; Set_Buffer
 28173                                  ;
 28174                                  ;function: set buffers in the real memory.				  
 28175                                  ;	   lastly set the memhi,memlo for the next available free address.
 28176                                  ;
 28177                                  ;input:    ds:bx -> buffinfo.
 28178                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 28179                                  ;	   singlebuffersize = buffer header size + sector size		  
 28180                                  ;
 28181                                  ;output:   buffers Queue established.	       				   
 28182                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 28183                                  ; ----------------------------------------------------------------------
 28184                                  
 28185                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 28186                                  	; (SYSINIT:11DCh)
 28187                                  
 28188                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 28189                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:14BCh)
 28190                                  
 28191                                  set_buffer:
 28192 000013A2 30D2                    	xor	dl,dl				; assume buffers not in HMA
 28193 000013A4 E85500                  	call	GetBufferAddr
 28194 000013A7 7402                    	jz	short set_buff_1
 28195 000013A9 B201                    	mov	dl,1				; buffers in HMA
 28196                                  set_buff_1:
 28197                                  	; 25/10/2022
 28198                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 28199 000013AB 893F                    	mov	[bx],di
 28200                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 28201 000013AD 8C4702                  	mov	[bx+2],es
 28202                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 28203 000013B0 C747040000              	mov	word [bx+4],0
 28204                                  
 28205 000013B5 89F8                    	mov	ax,di
 28206 000013B7 2E8B0E[9902]            	mov	cx,[cs:buffers]
 28207 000013BC 57                      	push	di				; remember first buffer
 28208                                  
 28209                                  ;	for each buffer
 28210                                  
 28211                                  nxt_buff:
 28212 000013BD E87500                  	call	set_buffer_info 		; set buf_link,buf_id...
 28213 000013C0 89C7                    	mov	di,ax
 28214 000013C2 E2F9                    	loop	nxt_buff
 28215                                  
 28216 000013C4 2E2B3E[9D02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 28217                                  
 28218 000013C9 59                      	pop	cx				; get first buffer
 28219                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 28220 000013CA 26890D                  	mov	[es:di],cx
 28221 000013CD 87CF                    	xchg	cx,di
 28222                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 28223                                  	; 25/10/2022
 28224 000013CF 26894D02                	mov	[es:di+2],cx
 28225                                  
 28226 000013D3 08D2                    	or	dl,dl				; In HMa ?
 28227 000013D5 7417                    	jz	short set_buff_2		; no
 28228                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 28229 000013D7 C6470C01                	mov	byte [bx+12],1
 28230 000013DB 2EA1[6403]              	mov	ax,[cs:memhi]			; seg of scratch buff
 28231                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 28232 000013DF C7470D0000              	mov	word [bx+13],0
 28233                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 28234 000013E4 89470F                  	mov	word [bx+15],ax
 28235 000013E7 2EA1[9D02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 28236                                  	; 11/04/2024 - Retro DOS v5.0
 28237                                  	; 05/09/2023
 28238                                  	;;sub	ax,bufinsiz ; 20		; buffer head not required
 28239                                  	;sub	ax,20
 28240 000013EB 83E818                  	sub	ax,24 ; bufinsiz		; (bufinsiz is 24 in PCDOS 7.1)
 28241                                  
 28242                                  set_buff_2:
 28243 000013EE 2E0106[6203]            	add	[cs:memlo],ax
 28244                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 28245 000013F3 2E800E[6919]02          	or	byte [cs:setdevmarkflag],2
 28246                                  	;call	round
 28247                                  	;retn
 28248                                  	; 12/12/2022
 28249 000013F9 E9F633                  	jmp	round
 28250                                  
 28251                                  ; ----------------------------------------------------------------------
 28252                                  ; procedure : GetBufferAddr
 28253                                  ;
 28254                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 28255                                  ;
 28256                                  ; returns in es:di the buffer adress
 28257                                  ; returns NZ if allocated in HMA
 28258                                  ; ----------------------------------------------------------------------
 28259                                  
 28260                                  	; 25/10/2022 
 28261                                  GetBufferAddr:
 28262 000013FC 53                      	push	bx
 28263 000013FD 52                      	push	dx
 28264                                  
 28265                                  	; 11/04/2024 - Retro DOS v5.0
 28266                                  	; PCDOS 7.1 IBMBIO.COM
 28267                                  	;;;
 28268 000013FE 2E803E[6E03]02          	cmp	byte [cs:dosdata_umb],2
 28269                                  				; is dosdata moved to UMB ? (DOSDATA=UMB done)
 28270 00001404 7506                    	jne	short gba_1     ; no
 28271 00001406 837F02FF                	cmp	word [bx+2],0FFFFh ; is the buffer (already) in HMA ?
 28272 0000140A 7423                    	je	short gba_2	; yes
 28273                                  gba_1:
 28274                                  	;;;
 28275                                  
 28276 0000140C 2EA1[9D02]              	mov	ax, [cs:singlebuffersize]
 28277 00001410 2EF726[9902]            	mul	word [cs:buffers]
 28278                                  	;add	ax,0Fh
 28279 00001415 83C00F                  	add	ax,15 
 28280                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28281                                  	;and	ax,~15	; 0FFF0h	; para round
 28282                                  	; 12/12/2022
 28283 00001418 24F0                    	and	al,~15	; 0F0h
 28284 0000141A 89C3                    	mov	bx,ax
 28285 0000141C B8024A                  	mov	ax,4A02h
 28286                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 28287 0000141F CD2F                    	int	2Fh	; DOS 5+ - ALLOCATE HMA SPACE
 28288                                  			;     AX = 4A02h
 28289                                  			;     BX = number of bytes
 28290                                  			; Return:
 28291                                  			;     ES:DI -> start of allocated HMA block or FFFFh:FFFFh
 28292                                  			;     BX = number of bytes actually allocated
 28293                                  			;	   (rounded up to next paragraph)
 28294                                  			; Notes:
 28295                                  			;     this call is not valid unless DOS is loaded in the HMA
 28296                                  			;     (DOS=HIGH)
 28297                                  
 28298 00001421 83FFFF                  	cmp	di,0FFFFh
 28299 00001424 7506                    	jne	short got_hma
 28300                                  	
 28301                                  	;mov	di,0		; dont xor di,di Z flag needed
 28302                                  	; 05/09/2023
 28303                                  	; zf=1
 28304 00001426 47                      	inc	di ; 0FFFFh -> 0
 28305                                  	; zf=1
 28306                                  	
 28307                                  	;zf=1
 28308                                  	;xor	di,di	; 25/10/2022
 28309                                  	;zf=1
 28310 00001427 2E8E06[6403]            	mov	es,[cs:memhi]
 28311                                  got_hma:
 28312 0000142C 5A                      	pop	dx
 28313 0000142D 5B                      	pop	bx
 28314 0000142E C3                      	retn
 28315                                  
 28316                                  	; 11/04/2024 - Retro DOS v5.0
 28317                                  	; PCDOS 7.1 IBMBIO.COM
 28318                                  	;;;
 28319                                  gba_2:
 28320 0000142F C43F                    	les	di,[bx]
 28321 00001431 09FF                    	or	di,di
 28322                                  	;pop	dx
 28323                                  	;pop	bx
 28324                                  	;retn
 28325                                  	; 11/04/2024 - Retro DOS v5.0
 28326 00001433 EBF7                    	jmp	short got_hma
 28327                                  	;;;
 28328                                  
 28329                                  ; ----------------------------------------------------------------------
 28330                                  
 28331                                  set_buffer_info:
 28332                                  
 28333                                  ;function: set buf_link,buf_id,buf_sector
 28334                                  ;
 28335                                  ;in: es:di -> buffer header to be set.
 28336                                  ;    ax = di
 28337                                  ;
 28338                                  ;out:
 28339                                  ;    above entries set.
 28340                                  
 28341                                  	; 25/10/2022 
 28342 00001435 2EFF36[BD02]            	push	word [cs:buf_prev_off]
 28343                                  	;pop	word [es:di+buffinfo.buf_prev]
 28344 0000143A 268F4502                	pop	word [es:di+2]
 28345 0000143E 2EA3[BD02]              	mov	[cs:buf_prev_off],ax
 28346 00001442 2E0306[9D02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 28347                                  	;mov	[es:di+buffinfo.buf_next],ax
 28348 00001447 268905                  	mov	[es:di],ax
 28349                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 28350 0000144A 26C74504FF00            	mov	word [es:di+4],00FFh
 28351                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 28352 00001450 26C745060000            	mov	word [es:di+6],0
 28353                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 28354 00001456 26C745080000            	mov	word [es:di+8],0
 28355 0000145C C3                      	retn
 28356                                  
 28357                                  ; ======================================================================
 28358                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 28359                                  ; ----------------------------------------------------------------------
 28360                                  ; 27/03/2019 - Retro DOS v4.0
 28361                                  
 28362                                  ; ----------------------------------------------------------------------
 28363                                  ; ibmstack initialization routine.
 28364                                  ;
 28365                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 28366                                  ;	has been modified. this initialization routine also has to
 28367                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 28368                                  ;	should be set to signal that this interrupt handler is the
 28369                                  ;	first handler hooked to this interrupt vector.
 28370                                  ;	we determine this by looking at the instruction pointed by
 28371                                  ;	this vector. if it is iret, then this handler should be the
 28372                                  ;	first one. in our case, only the interrupt vector 77h is the
 28373                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 28374                                  ;
 28375                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 28376                                  ;	some design changes are needed to the above interrupt sharing
 28377                                  ;	method. the above sharing scheme assumes that 1). interrupt
 28378                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 28379                                  ;	interrupts would only be generated on levels 7 and 15.
 28380                                  ;	these assumptions are not true any more. we have to use the firstflag
 28381                                  ;	for every level of interrupt. we will set the firstflag on the following
 28382                                  ;	conditions:
 28383                                  ;
 28384                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 28385                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 28386                                  ;	 c. else if cs:ip points to an iret, then "first"
 28387                                  ;	 d. else if cs:ip points to dummy, then "first"
 28388                                  ;
 28389                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 28390                                  ;	be equal to the value at f000:ff01. this location is the initial value
 28391                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 28392                                  ;	the bioses for all of the machines.
 28393                                  ;
 28394                                  ;	system design group requests bios to handle the phantom interrupts.
 28395                                  ;
 28396                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 28397                                  ;	produced by the bogus adapter card even without interrupt request is
 28398                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 28399                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 28400                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 28401                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 28402                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 28403                                  ;	interrupt line.
 28404                                  ;
 28405                                  ;	to handle those "phantom" interrupts, the main stack code will check
 28406                                  ;	the own firstflag, and if it is not "first" (which means the forward
 28407                                  ;	pointer points to the legal shared interrupt handler), then pass the
 28408                                  ;	control. if it is the first, then the following action should be
 28409                                  ;	taken. we don't have to implement skack logic in this case.
 28410                                  ;
 28411                                  ;	to implement this logic, we rather choose a simple method.
 28412                                  ;	if ont of the above "firstflag" conditions is met, we are not
 28413                                  ;	going to hook this interrupt vector. the reason is if the original
 28414                                  ;	vector points to "iret" and do nothing, we don't need
 28415                                  ;	to implement the stack logic for it. this will simplify implementation
 28416                                  ;	while maintaining compatibility with the old version of dos.
 28417                                  ;	this implies that in the main stack code, there might be a stack code
 28418                                  ;	that will never be used, a dead code.
 28419                                  ;
 28420                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 28421                                  
 28422                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 28423                                  	; (SYSINIT:1287h)
 28424                                  
 28425                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 28426                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:157Ch)
 28427                                  
 28428                                  	; 14/12/2022
 28429                                  stackinit:
 28430 0000145D 50                      	push	ax
 28431 0000145E 1E                      	push	ds
 28432 0000145F 06                      	push	es
 28433 00001460 53                      	push	bx
 28434 00001461 51                      	push	cx
 28435 00001462 52                      	push	dx
 28436 00001463 57                      	push	di
 28437 00001464 56                      	push	si
 28438 00001465 55                      	push	bp
 28439                                  
 28440                                  ;currently es -> stack code area
 28441                                  
 28442                                  	; 12/12/2022
 28443                                  	; ds = cs
 28444 00001466 A1[8C02]                	mov	ax,[stack_count]
 28445 00001469 89C1                    	mov	cx,ax  ; *!*!*  
 28446                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28447                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 28448                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 28449 0000146B 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 28450                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 28451 0000146F A1[8E02]                	mov	ax,[stack_size]	 ; !!		;in cs
 28452 00001472 26A3[0600]              	mov	[es:stacksize],ax
 28453                                  	; 12/12/2022
 28454 00001476 A1[9002]                	mov	ax,[stack_addr]			; offset
 28455                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28456                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 28457                                  	;mov	ax,[cs:stack_addr]  ; !!
 28458 00001479 26A3[0800]              	mov	[es:stacks],ax
 28459                                  	; 12/12/2022
 28460 0000147D 89C5                    	mov	bp,ax ; *!*
 28461 0000147F A1[9202]                	mov	ax,[stack_addr+2]
 28462                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28463                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 28464                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 28465 00001482 26A3[0A00]              	mov	[es:stacks+2],ax
 28466                                  
 28467                                  ; initialize the data fields with the parameters
 28468                                  
 28469                                  ; "firstentry" will always be at stacks
 28470                                  
 28471                                  	;mov	bp,[es:stacks]			; get offset of stack
 28472                                  	; 12/12/2022
 28473                                  	; bp = [es:stacks] ; *!*
 28474 00001486 26892E[0C00]            	mov	[es:firstentry],bp
 28475                                  
 28476                                  ; the stacks will always immediately follow the table entries
 28477                                  
 28478 0000148B B80800                  	mov	ax,entrysize ; 8
 28479                                  	;mov	cx,[es:stackcount]
 28480                                  	; 12/12/2022
 28481                                  	; cx = [es:stackcount] ; *!*!*
 28482 0000148E F7E1                    	mul	cx
 28483 00001490 01E8                    	add	ax,bp
 28484 00001492 26A3[0400]              	mov	[es:stackat],ax
 28485 00001496 89C3                    	mov	bx,ax
 28486 00001498 83EB02                  	sub	bx,2
 28487                                  
 28488                                  ; zero the entire stack area to start with
 28489                                  
 28490 0000149B 268B3E[0400]            	mov	di,[es:stackat]
 28491 000014A0 26A1[0600]              	mov	ax,[es:stacksize]
 28492 000014A4 F7E1                    	mul	cx
 28493 000014A6 89C1                    	mov	cx,ax
 28494 000014A8 31C0                    	xor	ax,ax
 28495 000014AA 06                      	push	es
 28496 000014AB 1F                      	pop	ds				;ds = relocated stack code seg.
 28497                                  
 28498                                  ;now, ds -> stack code area
 28499                                  
 28500 000014AC 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 28501 000014B0 FC                      	cld
 28502 000014B1 F3AA                    	rep	stosb
 28503                                  
 28504 000014B3 8B0E[0200]              	mov	cx,[stackcount]
 28505                                  
 28506                                  ; loop for "count" times, building a table entry
 28507                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 28508                                  ;  cx = number of entries
 28509                                  ;  es:bp => base of stacks - 2
 28510                                  ;  es:bx => first table entry
 28511                                  
 28512                                  buildloop:
 28513                                  	; 11/12/2022
 28514                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 28515                                  	; 25/10/2022
 28516                                  	;mov	byte [es:bp],free
 28517                                  	; 06/07/2023
 28518 000014B7 26884600                	mov	[es:bp],al ; 0 ; free
 28519 000014BB 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 28520                                  	;mov	[es:bp+1],al
 28521 000014BF 26894602                	mov	[es:bp+savedsp],ax
 28522                                  	;mov	[es:bp2],ax
 28523 000014C3 26894604                	mov	[es:bp+savedss],ax
 28524                                  	;mov	[es:bp+4],ax
 28525 000014C7 031E[0600]              	add	bx,[stacksize]
 28526 000014CB 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 28527                                  	;mov	[es:bp+6],bx
 28528 000014CF 26892F                  	mov	[es:bx],bp
 28529 000014D2 83C508                  	add	bp,entrysize ; 8
 28530                                  
 28531 000014D5 E2E0                    	loop	buildloop
 28532                                  
 28533 000014D7 83ED08                  	sub	bp,entrysize ; 8
 28534 000014DA 892E[0E00]              	mov	[lastentry],bp
 28535 000014DE 892E[1000]              	mov	[nextentry],bp
 28536                                  
 28537 000014E2 1E                      	push	ds
 28538                                  	;mov	ax,0F000h		;look at the model byte
 28539                                  	; 05/09/2023
 28540 000014E3 B4F0                    	mov	ah,0F0h ; ax = 0F000h
 28541 000014E5 8ED8                    	mov	ds,ax
 28542 000014E7 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 28543 000014EC 1F                      	pop	ds
 28544 000014ED 7504                    	jne	short skip_disablenmis
 28545                                  
 28546 000014EF B007                    	mov	al,07h			; disable convertible nmis
 28547 000014F1 E672                    	out	72h,al
 28548                                  
 28549                                  skip_disablenmis:
 28550 000014F3 31C0                    	xor	ax,ax
 28551 000014F5 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 28552                                  					;ds - relocated stack code segment
 28553 000014F7 FA                      	cli
 28554                                  
 28555                                  	;irp	aa,<02,08,09,70>
 28556                                  	;
 28557                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 28558                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 28559                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 28560                                  	;mov	dx,offset int&aa	;pass where new handler is
 28561                                  	;call	new_init_loop		;adjust the vector to new handler,
 28562                                  	;				;saving pointer to original owner
 28563                                  	;endm
 28564                                  
 28565                                  stkinit_02:
 28566 000014F8 BE0800                  	mov	si,02h*4 ; 8
 28567 000014FB BF[B305]                	mov	di,INT19OLD02
 28568 000014FE BB[1200]                	mov	bx,old02
 28569 00001501 BA[1600]                	mov	dx,int02
 28570 00001504 E84801                  	call	new_init_loop
 28571                                  stkinit_08:
 28572 00001507 BE2000                  	mov	si,08h*4 ; 32
 28573 0000150A BF[B805]                	mov	di,INT19OLD08
 28574 0000150D BB[3800]                	mov	bx,old08
 28575 00001510 BA[3C00]                	mov	dx,int08
 28576 00001513 E83901                  	call	new_init_loop
 28577                                  stkinit_09:
 28578 00001516 BE2400                  	mov	si,09h*4 ; 36
 28579 00001519 BF[BD05]                	mov	di,INT19OLD09
 28580 0000151C BB[4100]                	mov	bx,old09
 28581 0000151F BA[4500]                	mov	dx,int09
 28582 00001522 E82A01                  	call	new_init_loop
 28583                                  stkinit_70:
 28584 00001525 BEC001                  	mov	si,70h*4 ; 448
 28585 00001528 BF[DB05]                	mov	di,INT19OLD70
 28586 0000152B BB[4E00]                	mov	bx,old70
 28587 0000152E BA[5200]                	mov	dx,int70
 28588 00001531 E81B01                  	call	new_init_loop
 28589                                  
 28590                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 28591                                  	;
 28592                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 28593                                  	;push	ds			;save relocated stack code segment
 28594                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 28595                                  	;push	ds
 28596                                  	;pop	dx			;dx = segment value
 28597                                  	;	
 28598                                  	;cmp	dx,0
 28599                                  	;jz	int&aa&_first
 28600                                  	;
 28601                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 28602                                  	;jz	int&aa&_first
 28603                                  	;
 28604                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 28605                                  	;jz	int&aa&_not_first
 28606                                  	;
 28607                                  	;cmp	dx,0f000h		;rom bios segment
 28608                                  	;jnz	int&aa&_not_first
 28609                                  	;
 28610                                  	;push	es
 28611                                  	;push	dx
 28612                                  	;mov	dx,0f000h
 28613                                  	;mov	es,dx
 28614                                  	;cmp	bx,word ptr es:0ff01h
 28615                                         	;pop	dx
 28616                                  	;pop	es
 28617                                  	;jz	int&aa&_first
 28618                                  	;
 28619                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 28620                                  	;pop	ds
 28621                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 28622                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 28623                                  	;mov	dx, offset int&aa	;pass where new handler is
 28624                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 28625                                  	;				;pointer to original owner.
 28626                                  	;jmp	short int&aa&_end
 28627                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 28628                                  	;pop	ds
 28629                                  ;int&aa&_end:
 28630                                  	;
 28631                                  	;endm
 28632                                  
 28633                                  stkinit_0A:
 28634 00001534 BE2800                  	mov	si,0Ah*4 ; 40
 28635                                  	
 28636                                  ; 14/12/2022
 28637                                  %if 0	
 28638                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28639                                  	push	ds
 28640                                  	
 28641                                  	lds	bx,[es:si]
 28642                                  	push	ds
 28643                                  	pop	dx
 28644                                  		
 28645                                  	cmp	dx,0
 28646                                  	je	short int_0A_first
 28647                                  	
 28648                                  	cmp	byte [bx],0CFh
 28649                                  	je	short int_0A_first
 28650                                  	
 28651                                  	cmp	word [bx+6],424Bh
 28652                                  	je	short int_0A_not_first
 28653                                  	
 28654                                  	cmp	dx,0F000h
 28655                                  	jne	short int_0A_not_first
 28656                                  	
 28657                                  	push	es
 28658                                  	push	dx
 28659                                  	mov	dx,0F000h
 28660                                  	mov	es,dx
 28661                                  	cmp	bx,[es:0FF01h]
 28662                                         	pop	dx
 28663                                  	pop	es
 28664                                  	je	short int_0A_first
 28665                                  %Endif
 28666                                  
 28667                                  	; 14/12/2022
 28668                                  	; 25/10/2022
 28669 00001537 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 28670 0000153A 730C                    	jnc	short int_0A_first
 28671                                  	
 28672                                  int_0A_not_first:
 28673                                  	; 14/12/2022
 28674                                  	; 25/10/2022
 28675                                  	;pop	ds
 28676 0000153C BF[C205]                	mov	di,INT19OLD0A
 28677 0000153F BB[5900]                	mov	bx,old0A
 28678 00001542 BA[5700]                	mov	dx,int0A
 28679 00001545 E80701                  	call	new_init_loop
 28680                                  	
 28681                                  	; 14/12/2022	
 28682                                  	;jmp	short int_0A_end
 28683                                  ;int_0A_first:
 28684                                  	; 25/10/2022
 28685                                  	;pop	ds
 28686                                  
 28687                                  	; 14/12/2022
 28688                                  int_0A_first:
 28689                                  int_0A_end:
 28690                                  
 28691                                  stkinit_0B:
 28692 00001548 BE2C00                  	mov	si,0Bh*4 ; 44
 28693                                  	
 28694                                  	; 14/12/2022
 28695                                  	; 25/10/2022
 28696 0000154B E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 28697 0000154E 730C                    	jnc	short int_0B_end ; int_0B_first
 28698                                  
 28699                                  ; 14/12/2022
 28700                                  %if 0	
 28701                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28702                                  	push	ds
 28703                                  	lds	bx,[es:si]
 28704                                  	push	ds
 28705                                  	pop	dx
 28706                                  		
 28707                                  	cmp	dx,0
 28708                                  	je	short int_0B_first
 28709                                  
 28710                                  	cmp	byte [bx],0CFh
 28711                                  	je	short int_0B_first
 28712                                  	
 28713                                  	cmp	word [bx+6],424Bh
 28714                                  	je	short int_0B_not_first
 28715                                  	
 28716                                  	cmp	dx,0F000h
 28717                                  	jne	short int_0B_not_first
 28718                                  
 28719                                  	push	es
 28720                                  	push	dx
 28721                                  	mov	dx,0F000h
 28722                                  	mov	es,dx
 28723                                  	cmp	bx,[es:0FF01h]
 28724                                  	pop	dx
 28725                                  	pop	es
 28726                                  	je	short int_0B_first
 28727                                  %endif
 28728                                  
 28729                                  int_0B_not_first:
 28730                                  	; 14/12/2022
 28731                                  	; 25/10/2022
 28732                                  	;pop	ds
 28733 00001550 BF[C705]                	mov	di,INT19OLD0B
 28734 00001553 BB[7100]                	mov	bx,old0B
 28735 00001556 BA[6F00]                	mov	dx,int0B
 28736 00001559 E8F300                  	call	new_init_loop
 28737                                  
 28738                                  	; 14/12/2022
 28739                                  	;jmp	short int_0B_end
 28740                                  ;int_0B_first:
 28741                                  	; 25/10/2022
 28742                                  	;pop	ds
 28743                                  
 28744                                  int_0B_end:
 28745                                  	
 28746                                  stkinit_0C:
 28747 0000155C BE3000                  	mov	si,0Ch*4 ; 48
 28748                                  	
 28749                                  	; 14/12/2022
 28750                                  	; 25/10/2022
 28751 0000155F E8C300                  	call	int_xx_first_check
 28752 00001562 730C                    	jnc	short int_0C_end ; int_0C_first
 28753                                  
 28754                                  ; 14/12/2022
 28755                                  %if 0	
 28756                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28757                                  	push	ds
 28758                                  	lds	bx,[es:si]
 28759                                  	push	ds
 28760                                  	pop	dx
 28761                                  		
 28762                                  	cmp	dx,0
 28763                                  	je	short int_0C_first
 28764                                  
 28765                                  	cmp	byte [bx],0CFh
 28766                                  	je	short int_0C_first
 28767                                  	
 28768                                  	cmp	word [bx+6],424Bh
 28769                                  	je	short int_0C_not_first
 28770                                  	
 28771                                  	cmp	dx,0F000h
 28772                                  	jne	short int_0C_not_first
 28773                                  
 28774                                  	push	es
 28775                                  	push	dx
 28776                                  	mov	dx,0F000h
 28777                                  	mov	es,dx
 28778                                  	cmp	bx,[es:0FF01h]
 28779                                  	pop	dx
 28780                                  	pop	es
 28781                                  	je	short int_0C_first
 28782                                  %endif
 28783                                  	
 28784                                  int_0C_not_first:
 28785                                  	; 14/12/2022
 28786                                  	; 25/10/2022
 28787                                  	;pop	ds
 28788 00001564 BF[CC05]                	mov	di,INT19OLD0C
 28789 00001567 BB[8900]                	mov	bx,old0C
 28790 0000156A BA[8700]                	mov	dx,int0C
 28791 0000156D E8DF00                  	call	new_init_loop
 28792                                  
 28793                                  	; 14/12/2022
 28794                                  	;jmp	short int_0C_end
 28795                                  ;int_0C_first:
 28796                                  	; 25/10/2022
 28797                                  	;pop	ds
 28798                                  
 28799                                  int_0C_end:
 28800                                  
 28801                                  stkinit_0D:
 28802 00001570 BE3400                  	mov	si,0Dh*4 ; 52
 28803                                  
 28804                                  	; 14/12/2022	
 28805                                  	; 25/10/2022
 28806 00001573 E8AF00                  	call	int_xx_first_check
 28807 00001576 730C                    	jnc	short int_0D_end ; int_0D_first
 28808                                  
 28809                                  ; 14/12/2022
 28810                                  %if 0	
 28811                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28812                                  	push	ds
 28813                                  	lds	bx,[es:si]
 28814                                  	push	ds
 28815                                  	pop	dx
 28816                                  		
 28817                                  	cmp	dx,0
 28818                                  	je	short int_0D_first
 28819                                  
 28820                                  	cmp	byte [bx],0CFh
 28821                                  	je	short int_0D_first
 28822                                  	
 28823                                  	cmp	word [bx+6],424Bh
 28824                                  	je	short int_0D_not_first
 28825                                  	
 28826                                  	cmp	dx,0F000h
 28827                                  	jne	short int_0D_not_first
 28828                                  
 28829                                  	push	es
 28830                                  	push	dx
 28831                                  	mov	dx,0F000h
 28832                                  	mov	es,dx
 28833                                  	cmp	bx,[es:0FF01h]
 28834                                  	pop	dx
 28835                                  	pop	es
 28836                                  	je	short int_0D_first
 28837                                  %endif
 28838                                  	
 28839                                  int_0D_not_first:
 28840                                  	; 14/12/2022
 28841                                  	; 25/10/2022
 28842                                  	;pop	ds
 28843 00001578 BF[D105]                	mov	di,INT19OLD0D
 28844 0000157B BB[A100]                	mov	bx,old0D
 28845 0000157E BA[9F00]                	mov	dx,int0D
 28846 00001581 E8CB00                  	call	new_init_loop
 28847                                  
 28848                                  	; 14/12/2022
 28849                                  	;jmp	short int_0D_end
 28850                                  	; 02/11/2022
 28851                                  ;int_0D_first:
 28852                                  	;pop	ds
 28853                                  
 28854                                  int_0D_end:
 28855                                  
 28856                                  stkinit_0E:
 28857 00001584 BE3800                  	mov	si,0Eh*4 ; 56
 28858                                  
 28859                                  	; 14/12/2022	
 28860                                  	; 25/10/2022
 28861 00001587 E89B00                  	call	int_xx_first_check
 28862 0000158A 730C                    	jnc	short int_0E_end ; int_0E_first
 28863                                  
 28864                                  ; 14/12/2022
 28865                                  %if 0	
 28866                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28867                                  	push	ds
 28868                                  	lds	bx,[es:si]
 28869                                  	push	ds
 28870                                  	pop	dx
 28871                                  		
 28872                                  	cmp	dx,0
 28873                                  	je	short int_0E_first
 28874                                  
 28875                                  	cmp	byte [bx],0CFh
 28876                                  	je	short int_0E_first
 28877                                  	
 28878                                  	cmp	word [bx+6],424Bh
 28879                                  	je	short int_0E_not_first
 28880                                  	
 28881                                  	cmp	dx,0F000h
 28882                                  	jne	short int_0E_not_first
 28883                                  
 28884                                  	push	es
 28885                                  	push	dx
 28886                                  	mov	dx,0F000h
 28887                                  	mov	es,dx
 28888                                  	cmp	bx,[es:0FF01h]
 28889                                  	pop	dx
 28890                                  	pop	es
 28891                                  	je	short int_0E_first
 28892                                  %endif
 28893                                  	
 28894                                  int_0E_not_first:
 28895                                  	; 14/12/2022
 28896                                  	; 25/10/2022
 28897                                  	;pop	ds
 28898 0000158C BF[D605]                	mov	di,INT19OLD0E
 28899 0000158F BB[B900]                	mov	bx,old0E
 28900 00001592 BA[B700]                	mov	dx,int0E
 28901 00001595 E8B700                  	call	new_init_loop
 28902                                  
 28903                                  	; 14/12/2022
 28904                                  	;jmp	short int_0E_end
 28905                                  ;int_0E_first:
 28906                                  	; 25/10/2022
 28907                                  	;pop	ds	
 28908                                  
 28909                                  int_0E_end:
 28910                                  
 28911                                  stkinit_72:
 28912 00001598 BEC801                  	mov	si,72h*4 ; 456
 28913                                  	
 28914                                  	; 14/12/2022
 28915                                  	; 25/10/2022
 28916 0000159B E88700                  	call	int_xx_first_check
 28917 0000159E 730C                    	jnc	short int_72_end ; int_72_first
 28918                                  
 28919                                  ; 14/12/2022
 28920                                  %if 0	
 28921                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28922                                  	push	ds
 28923                                  	lds	bx,[es:si]
 28924                                  	push	ds
 28925                                  	pop	dx
 28926                                  		
 28927                                  	cmp	dx,0
 28928                                  	je	short int_72_first
 28929                                  
 28930                                  	cmp	byte [bx],0CFh
 28931                                  	je	short int_72_first
 28932                                  	
 28933                                  	cmp	word [bx+6],424Bh
 28934                                  	je	short int_72_not_first
 28935                                  	
 28936                                  	cmp	dx,0F000h
 28937                                  	jne	short int_72_not_first
 28938                                  
 28939                                  	push	es
 28940                                  	push	dx
 28941                                  	mov	dx,0F000h
 28942                                  	mov	es,dx
 28943                                  	cmp	bx,[es:0FF01h]
 28944                                  	pop	dx
 28945                                  	pop	es
 28946                                  	je	short int_72_first
 28947                                  %endif
 28948                                  	
 28949                                  int_72_not_first:
 28950                                  	; 14/12/2022
 28951                                  	; 25/10/2022
 28952                                  	;pop	ds
 28953 000015A0 BF[E005]                	mov	di,INT19OLD72
 28954 000015A3 BB[D100]                	mov	bx,old72
 28955 000015A6 BA[CF00]                	mov	dx,int72
 28956 000015A9 E8A300                  	call	new_init_loop
 28957                                  
 28958                                  	; 14/12/2022
 28959                                  	;jmp	short int_72_end
 28960                                  ;int_72_first:
 28961                                  	; 25/10/2022
 28962                                  	;pop	ds
 28963                                  
 28964                                  int_72_end:
 28965                                  
 28966                                  stkinit_73:
 28967 000015AC BECC01                  	mov	si,73h*4 ; 460
 28968                                  	
 28969                                  	; 14/12/2022
 28970                                  	; 25/10/2022
 28971 000015AF E87300                  	call	int_xx_first_check
 28972 000015B2 730C                    	jnc	short int_73_end ; int_73_first
 28973                                  
 28974                                  ; 14/12/2022
 28975                                  %if 0	
 28976                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28977                                  	push	ds
 28978                                  	lds	bx,[es:si]
 28979                                  	push	ds
 28980                                  	pop	dx
 28981                                  		
 28982                                  	cmp	dx,0
 28983                                  	je	short int_73_first
 28984                                  
 28985                                  	cmp	byte [bx],0CFh
 28986                                  	je	short int_73_first
 28987                                  	
 28988                                  	cmp	word [bx+6],424Bh
 28989                                  	je	short int_73_not_first
 28990                                  	
 28991                                  	cmp	dx,0F000h
 28992                                  	jne	short int_73_not_first
 28993                                  
 28994                                  	push	es
 28995                                  	push	dx
 28996                                  	mov	dx,0F000h
 28997                                  	mov	es,dx
 28998                                  	cmp	bx,[es:0FF01h]
 28999                                  	pop	dx
 29000                                  	pop	es
 29001                                  	je	short int_73_first
 29002                                  %endif	
 29003                                  	
 29004                                  int_73_not_first:
 29005                                  	; 14/12/2022
 29006                                  	; 25/10/2022
 29007                                  	;pop	ds
 29008 000015B4 BF[E505]                	mov	di,INT19OLD73
 29009 000015B7 BB[E900]                	mov	bx,old73
 29010 000015BA BA[E700]                	mov	dx,int73
 29011 000015BD E88F00                  	call	new_init_loop
 29012                                  
 29013                                  	; 14/12/2022
 29014                                  	;jmp	short int_73_end
 29015                                  ;int_73_first:
 29016                                  	; 25/10/2022
 29017                                  	;pop	ds
 29018                                  
 29019                                  int_73_end:
 29020                                  
 29021                                  stkinit_74:
 29022 000015C0 BED001                  	mov	si,74h*4 ; 464
 29023                                  	
 29024                                  	; 14/12/2022
 29025                                  	; 25/10/2022
 29026 000015C3 E85F00                  	call	int_xx_first_check
 29027 000015C6 730C                    	jnc	short int_74_end ; int_74_first
 29028                                  
 29029                                  ; 14/12/2022
 29030                                  %if 0		
 29031                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29032                                  	push	ds
 29033                                  	lds	bx,[es:si]
 29034                                  	push	ds
 29035                                  	pop	dx
 29036                                  		
 29037                                  	cmp	dx,0
 29038                                  	je	short int_74_first
 29039                                  
 29040                                  	cmp	byte [bx],0CFh
 29041                                  	je	short int_74_first
 29042                                  	
 29043                                  	cmp	word [bx+6],424Bh
 29044                                  	je	short int_74_not_first
 29045                                  	
 29046                                  	cmp	dx,0F000h
 29047                                  	jne	short int_74_not_first
 29048                                  
 29049                                  	push	es
 29050                                  	push	dx
 29051                                  	mov	dx,0F000h
 29052                                  	mov	es,dx
 29053                                  	cmp	bx,[es:0FF01h]
 29054                                  	pop	dx
 29055                                  	pop	es
 29056                                  	je	short int_74_first
 29057                                  %endif
 29058                                  
 29059                                  int_74_not_first:
 29060                                  	; 14/12/2022
 29061                                  	; 25/10/2022
 29062                                  	;pop	ds
 29063 000015C8 BF[EA05]                	mov	di,INT19OLD74
 29064 000015CB BB[0101]                	mov	bx,old74
 29065 000015CE BA[FF00]                	mov	dx,int74
 29066 000015D1 E87B00                  	call	new_init_loop
 29067                                  	
 29068                                  	; 14/12/2022
 29069                                  	;jmp	short int_74_end
 29070                                  ;int_74_first:
 29071                                  	; 25/10/2022
 29072                                  	;pop	ds
 29073                                  
 29074                                  int_74_end:
 29075                                  
 29076                                  stkinit_76:
 29077 000015D4 BED801                  	mov	si,76h*4 ; 472
 29078                                  	
 29079                                  	; 14/12/2022
 29080                                  	; 25/10/2022
 29081 000015D7 E84B00                  	call	int_xx_first_check
 29082 000015DA 730E                    	jnc	short int_76_end ; int_76_first
 29083                                  
 29084                                  ; 14/12/2022
 29085                                  %if 0	
 29086                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29087                                  	push	ds
 29088                                  	lds	bx,[es:si]
 29089                                  	push	ds
 29090                                  	pop	dx
 29091                                  		
 29092                                  	cmp	dx,0
 29093                                  	je	short int_76_first
 29094                                  
 29095                                  	cmp	byte [bx],0CFh
 29096                                  	je	short int_76_first
 29097                                  	
 29098                                  	cmp	word [bx+6],424Bh
 29099                                  	je	short int_76_not_first
 29100                                  	
 29101                                  	cmp	dx,0F000h
 29102                                  	jne	short int_76_not_first
 29103                                  
 29104                                  	push	es
 29105                                  	push	dx
 29106                                  	mov	dx,0F000h
 29107                                  	mov	es,dx
 29108                                  	cmp	bx,[es:0FF01h]
 29109                                  	pop	dx
 29110                                  	pop	es
 29111                                  	je	short int_76_first
 29112                                  %endif
 29113                                  	
 29114                                  int_76_not_first:
 29115                                  	; 14/12/2022
 29116                                  	; 25/10/2022
 29117                                  	;pop	ds
 29118 000015DC BF[EF05]                	mov	di,INT19OLD76
 29119 000015DF BB[1901]                	mov	bx,old76
 29120 000015E2 BA[1701]                	mov	dx,int76
 29121 000015E5 E86700                  	call	new_init_loop
 29122                                  
 29123                                  	; 14/12/2022
 29124 000015E8 EB00                    	jmp	short int_76_end
 29125                                  ;int_76_first:
 29126                                  	; 25/10/2022
 29127                                  	;pop	ds
 29128                                  
 29129                                  int_76_end:
 29130                                  
 29131                                  stkinit_77:
 29132 000015EA BEDC01                  	mov	si,77h*4 ; 476
 29133                                  	
 29134                                  	; 14/12/2022
 29135                                  	; 25/10/2022
 29136 000015ED E83500                  	call	int_xx_first_check
 29137 000015F0 730C                    	jnc	short int_77_end ; int_77_first
 29138                                  
 29139                                  ; 14/12/2022
 29140                                  %if 0	
 29141                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29142                                  	push	ds
 29143                                  	lds	bx,[es:si]
 29144                                  	push	ds
 29145                                  	pop	dx
 29146                                  		
 29147                                  	cmp	dx,0
 29148                                  	je	short int_77_first
 29149                                  
 29150                                  	cmp	byte [bx],0CFh
 29151                                  	je	short int_77_first
 29152                                  	
 29153                                  	cmp	word [bx+6],424Bh
 29154                                  	je	short int_77_not_first
 29155                                  	
 29156                                  	cmp	dx,0F000h
 29157                                  	jne	short int_77_not_first
 29158                                  
 29159                                  	push	es
 29160                                  	push	dx
 29161                                  	mov	dx,0F000h
 29162                                  	mov	es,dx
 29163                                  	cmp	bx,[es:0FF01h]
 29164                                  	pop	dx
 29165                                  	pop	es
 29166                                  	je	short int_77_first
 29167                                  %endif
 29168                                  	
 29169                                  int_77_not_first:
 29170                                  	; 14/12/2022
 29171                                  	; 25/10/2022
 29172                                  	;pop	ds
 29173 000015F2 BF[F405]                	mov	di,INT19OLD77
 29174 000015F5 BB[3101]                	mov	bx,old77
 29175 000015F8 BA[2F01]                	mov	dx,int77
 29176 000015FB E85100                  	call	new_init_loop
 29177                                  
 29178                                  	; 14/12/2022
 29179                                  	;jmp	short int_77_end
 29180                                  ;int_77_first:
 29181                                  	; 25/10/2022
 29182                                  	;pop	ds
 29183                                  
 29184                                  int_77_end:
 29185 000015FE 1E                      	push	ds
 29186 000015FF B800F0                  	mov	ax,0F000h		; look at the model byte
 29187 00001602 8ED8                    	mov	ds,ax
 29188 00001604 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 29189 00001609 1F                      	pop	ds
 29190 0000160A 7504                    	jne	short skip_enablenmis
 29191                                  
 29192 0000160C B027                    	mov	al,27h			; enable convertible nmis
 29193 0000160E E672                    	out	72h,al
 29194                                  
 29195                                  ; 25/10/2022
 29196                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 29197                                  
 29198                                  skip_enablenmis:
 29199 00001610 FB                      	sti
 29200                                  	;;mov	ax,Bios_Data ; 70h
 29201                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 29202                                  	; 21/10/2022
 29203 00001611 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 29204 00001614 8ED8                    	mov	ds,ax
 29205                                  
 29206                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 29207                                  
 29208 00001616 C606[B105]01            	mov	byte [INT19SEM],1	; indicate that int 19
 29209                                  					; initialization is complete
 29210                                  
 29211 0000161B 5D                      	pop	bp			; restore all
 29212 0000161C 5E                      	pop	si
 29213 0000161D 5F                      	pop	di
 29214 0000161E 5A                      	pop	dx
 29215 0000161F 59                      	pop	cx
 29216 00001620 5B                      	pop	bx
 29217 00001621 07                      	pop	es
 29218 00001622 1F                      	pop	ds
 29219 00001623 58                      	pop	ax
 29220 00001624 C3                      	retn
 29221                                  
 29222                                  ; 14/12/2022
 29223                                  ; ----------------------------------------------------------------------
 29224                                  
 29225                                  	; 14/12/2022
 29226                                  	; 25/10/2022
 29227                                  ;%if 0
 29228                                  	; 27/03/2019 - Retro DOS v4.0
 29229                                  int_xx_first_check:
 29230 00001625 1E                      	push	ds
 29231 00001626 26C51C                  	lds	bx,[es:si]
 29232 00001629 1E                      	push	ds
 29233 0000162A 5A                      	pop	dx
 29234                                  		
 29235                                  	;cmp	dx,0
 29236                                  	;je	short int_xx_first
 29237                                  	; 05/09/2023
 29238 0000162B 21D2                    	and	dx,dx
 29239 0000162D 741E                    	jz	short int_xx_first
 29240                                  	
 29241 0000162F 803FCF                  	cmp	byte [bx],0CFh
 29242 00001632 7419                    	je	short int_xx_first
 29243                                  	
 29244 00001634 817F064B42              	cmp	word [bx+6],424Bh
 29245 00001639 7411                    	je	short int_xx_not_first
 29246                                  	
 29247 0000163B 81FA00F0                	cmp	dx,0F000h
 29248 0000163F 750B                    	jne	short int_xx_not_first
 29249                                  
 29250 00001641 06                      	push	es
 29251                                  	;push	dx
 29252                                  	;mov	dx,0F000h
 29253 00001642 8EC2                    	mov	es,dx
 29254 00001644 263B1E01FF              	cmp	bx,[es:0FF01h]
 29255                                        	;pop	dx
 29256 00001649 07                      	pop	es
 29257 0000164A 7401                    	je	short int_xx_first
 29258                                  
 29259                                  int_xx_not_first:
 29260 0000164C F9                      	stc
 29261                                  int_xx_first:
 29262 0000164D 1F                      	pop	ds
 29263 0000164E C3                      	retn
 29264                                  
 29265                                  ;%endif
 29266                                  
 29267                                  ; ----------------------------------------------------------------------
 29268                                  ; 27/03/2019 - Retro DOS v4.0
 29269                                  
 29270                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 29271                                  ; (SYSINIT:1610h)
 29272                                  
 29273                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 29274                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1905h)
 29275                                  
 29276                                  new_init_loop:
 29277                                  	;;; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 29278 0000164F 2E803E[6E03]02          	cmp	byte [cs:dosdata_umb],2
 29279                                  				; is DOSDATA=UMB done ? (DOSDATA is in UMB)
 29280 00001655 7510                    	jne	short new_init_loop_1st
 29281 00001657 1E                      	push	ds		; restore original/previous interrupt handler
 29282                                  				; (from int19old?? field in BIOSDATA)
 29283                                  	;mov	ax,70h
 29284 00001658 B87000                  	mov	ax,DOSBIODATASEG
 29285 0000165B 8ED8                    	mov	ds,ax
 29286 0000165D C505                    	lds	ax,[di]		; restore original Int ?? handler addr from int19old?? field
 29287 0000165F 268904                  	mov	[es:si],ax	; copy the original int handler addr to its int vector addr
 29288 00001662 268C5C02                	mov	[es:si+2],ds
 29289 00001666 1F                      	pop	ds
 29290                                  new_init_loop_1st: 
 29291                                  	;;;
 29292                                  
 29293                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 29294                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 29295                                  ;	dx=ds:offset of intxx, the new interrupt handler
 29296                                  ;	di=offset value of int19old&aa variable in bios.
 29297                                  ;	es=zero, segid of vector table
 29298                                  ;	ds=relocated stack code segment
 29299                                  
 29300                                  ; 13/04/2024
 29301                                  %if 0
 29302                                  	mov	ax,[es:si]		;remember offset in vector
 29303                                  	mov	[bx],ax			; to original owner in ds
 29304                                  	mov	ax,[es:si+2]		;remember segid in vector
 29305                                  	mov	[bx+2],ax		; to original owner in ds
 29306                                  
 29307                                  	push	ds
 29308                                  	;;mov	ax,Bios_Data ; 70h
 29309                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 29310                                  	; 21/10/2022
 29311                                  	mov	ax,DOSBIODATASEG ; 0070h
 29312                                  	mov	ds,ax			;set int19oldxx value in bios for
 29313                                  	mov	ax,[es:si]		;int 19 handler
 29314                                  	mov	[di],ax
 29315                                  	mov	ax,[es:si+2]
 29316                                  	mov	[di+2],ax
 29317                                  	pop	ds
 29318                                  %else
 29319                                  	; 13/04/2024 - Retro DOS v5.0
 29320 00001667 1E                      	push	ds
 29321 00001668 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 29322 0000166C 894702                  	mov	[bx+2],ax		; to original owner in ds
 29323 0000166F 50                      	push	ax
 29324 00001670 268B04                  	mov	ax,[es:si]		;remember offset in vector
 29325 00001673 8907                    	mov	[bx],ax			; to original owner in ds
 29326 00001675 50                      	push	ax
 29327 00001676 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 29328 00001679 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 29329 0000167B 58                      	pop	ax			;int 19 handler
 29330 0000167C 8905                    	mov	[di],ax
 29331 0000167E 58                      	pop	ax
 29332 0000167F 894502                  	mov	[di+2],ax
 29333 00001682 1F                      	pop	ds
 29334                                  %endif
 29335 00001683 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 29336 00001686 268C5C02                	mov	[es:si+2],ds
 29337 0000168A C3                      	retn
 29338                                  
 29339                                  ; End of STACK initialization routine
 29340                                  ; ----------------------------------------------------------------------
 29341                                  
 29342                                  ; ----------------------------------------------------------------------
 29343                                  ;set the devmark for mem command.
 29344                                  ;in: [memhi] - the address to place devmark
 29345                                  ;    [memlo] = 0
 29346                                  ;    al = id for devmark_id
 29347                                  ;out: devmark established.
 29348                                  ;     the address saved in cs:[devmark_addr]
 29349                                  ;     [memhi] increase by 1.
 29350                                  ; ----------------------------------------------------------------------
 29351                                  
 29352                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 29353                                  ; (SYSINIT:1637h)
 29354                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 29355                                  ; (SYSINIT:176Ch)
 29356                                  
 29357                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 29358                                  
 29359                                  setdevmark:
 29360                                  
 29361                                  	; 04/09/2023
 29362                                  	;push	es
 29363                                  	;push	cx
 29364                                  
 29365 0000168B 2E8B0E[6403]            	mov	cx,[cs:memhi]
 29366 00001690 2E890E[6719]            	mov	[cs:devmark_addr],cx
 29367 00001695 8EC1                    	mov	es,cx
 29368                                  	; 25/10/2022
 29369                                  	;mov	[es:devmark.id],al
 29370 00001697 26A20000                	mov	[es:0],al
 29371 0000169B 41                      	inc	cx
 29372                                  	;mov	[es:devmark.seg],cx
 29373 0000169C 26890E0100              	mov	[es:1],cx
 29374                                  
 29375                                  	; 04/09/2023
 29376                                  	;pop	cx
 29377                                  	;pop	es
 29378                                  	
 29379 000016A1 2EFF06[6403]            	inc	word [cs:memhi]
 29380 000016A6 C3                      	retn
 29381                                  
 29382                                  ; ----------------------------------------------------------------------
 29383                                  ; SYSPRE.ASM - MSDOS 6.0 - 1992
 29384                                  ; ----------------------------------------------------------------------
 29385                                  ;; pre-load and final placement of dblspace.bin
 29386                                  ;
 29387                                  ; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 29388                                  ; ===========================================================
 29389                                  
 29390                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1964h)
 29391                                  ;;; --------------------------------------------------------------------
 29392 000016A7 [AB16]                  MagicDDNamePtr:	dw MagicDDName	; "\DBLSPACE.BIN"
 29393 000016A9 433A                    		db 'C:'
 29394 000016AB 5C44424C5350414345-     MagicDDName:	db '\DBLSPACE.BIN',0
 29394 000016B4 2E42494E00         
 29395 000016B9 433A5C535441434B45-     StackerName:	db 'C:\STACKER.BIN',0
 29395 000016C2 522E42494E00       
 29396                                  tiny_stub_start:
 29397 000016C8 FFFF                    		dw 0FFFFh	; phony device driver link
 29398 000016CA FFFF                    		dw 0FFFFh	; dw -1, -1
 29399 000016CC 0080                    		dw 8000h	; mark as character device for MEM display
 29400 000016CE 00000000                		dw 2 dup(0)	; strategy and interrupt
 29401 000016D2 44424C5342494E24        		db 'DBLSBIN$'	; magic default load
 29402                                  tiny_stub_end:			; (tiny_stub_end-tiny_stub_start = 18)
 29403                                  
 29404                                  ; =============== S U B R O U T I N E ==================================
 29405                                  
 29406                                  ; 08/04/2024 - Retro DOS v5.0
 29407                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1997h)
 29408                                  
 29409                                  ;***	MagicPreload - pre-load dblspace.bin
 29410                                  ;
 29411                                  ;	EXIT	ax = error code, 00 means none.
 29412                                  ;		ZF = true if ax == 0
 29413                                  
 29414                                  MagicPreload:
 29415                                  	; 13/04/2024 - Retro DOS v5.0
 29416                                  	; ds = cs
 29417                                  	;mov	byte [cs:setdevmarkflag],0 ; not for devmark
 29418 000016DA C606[6919]00            	mov	byte [setdevmarkflag],0
 29419 000016DF E81031                  	call	round
 29420 000016E2 0E                      	push	cs
 29421 000016E3 07                      	pop	es
 29422                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB
 29423                                  	; 13/04/2024
 29424 000016E4 C606[5124]00            	mov	byte [DeviceHi],0
 29425 000016E9 E8791E                  	call	InitDevLoad		; set up sub-arena, DevLoadAddr,
 29426                                  					;  DevLoadEnd, and DevEntry
 29427                                  					;  gets arena name from bpb_addr
 29428                                  	; 13/04/2024
 29429                                  	; ds = cs
 29430                                  
 29431                                  ;	check to make sure device driver fits our available space.
 29432                                  
 29433                                  	;mov	ax,[cs:DevLoadAddr]
 29434 000016EC A1[3524]                	mov	ax,[DevLoadAddr]
 29435                                  	;add	ax,[cs:DevSize]		; calculate seg after DD load
 29436 000016EF 0306[3324]              	add	ax,[DevSize]
 29437 000016F3 725E                    	jc	short pre_exit_err	; choke if overflows address space
 29438                                  	;cmp	ax,[cs:DevLoadEnd]	; does it overflow available space?
 29439 000016F5 3B06[3724]              	cmp	ax,[DevLoadEnd]
 29440 000016F9 7758                    	ja	short pre_exit_err
 29441                                  
 29442                                  _LoadDev:				; we're golden if not
 29443                                  	; 13/04/2024
 29444                                  	; ds = cs
 29445                                  	;push	cs
 29446                                  	;pop	ds
 29447                                  	;mov	dx,[cs:MagicDDNamePtr]
 29448 000016FB 8B16[A716]              	mov	dx,[MagicDDNamePtr]
 29449 000016FF E8A41F                  	call	ExecDev			; load device driver using exec call
 29450 00001702 724F                    	jb	short pre_exit_err
 29451                                  
 29452                                  	; 13/04/2024
 29453                                  	; ds = cs
 29454                                  	;les	bx,[cs:DevEntry]	; point to the Magic DD header
 29455 00001704 C41E[3924]              	les	bx,[DevEntry]
 29456 00001708 26817F122C2E            	cmp	word [es:bx+12h],2E2Ch	; is it our stamp? ; ',.'
 29457 0000170E 7543                    	jnz	short pre_exit_err
 29458                                  	;mov	word [cs:MagicBackdoor],14h ; save the backdoor entry.
 29459                                  	;		  		; (initial IP -EXE header offset 20-)
 29460                                  	;mov	[cs:MagicBackdoor+2],es
 29461 00001710 C706[9003]1400          	mov	word [MagicBackdoor],14h
 29462 00001716 8C06[9203]              	mov	[MagicBackdoor+2],es
 29463                                  	
 29464 0000171A 0E                      	push	cs
 29465 0000171B 07                      	pop	es
 29466 0000171C BB[6F03]                	mov	bx,packet
 29467                                  	
 29468                                  	;mov	word [cs:break_addr],0
 29469                                  	;mov	ax,[cs:DevLoadEnd]
 29470                                  	;mov	[cs:break_addr+2],ax
 29471                                  	;mov	al,[cs:drivenumber]	; pass drive number to DBLSPACE as if
 29472                                  	;mov	[cs:devdrivenum],al	; it is a normal block device driver
 29473 0000171F C706[7D03]0000          	mov	word [break_addr],0
 29474 00001725 A1[3724]                	mov	ax,[DevLoadEnd]
 29475 00001728 A3[7F03]                	mov	[break_addr+2],ax
 29476 0000172B A0[8503]                	mov	al,[drivenumber]	; pass drive number to DBLSPACE as if
 29477 0000172E A2[8503]                	mov	[devdrivenum],al	; it is a normal block device driver
 29478                                  
 29479 00001731 B80A00                  	mov	ax,10			; DS_INTERNAL_REVISION
 29480                                  			  		; tell it what revision we expect
 29481                                  	;call	far [cs:MagicBackdoor]	; first time call is init entry point
 29482 00001734 FF1E[9003]              	call	far [MagicBackdoor]
 29483                                  			  		; with a standard device driver
 29484                                  			  		; init packet at es:bx
 29485 00001738 731D                    	jnb	short no_driver_version_fail ; skip if not a version failure
 29486 0000173A B80600                  	mov	ax,6			; DS_INTERNAL_REVISION_6 ; (Stacker ?)
 29487                                  			  		; tell it what revision we expect
 29488                                  	;call	far [cs:MagicBackdoor]
 29489 0000173D FF1E[9003]              	call	far [MagicBackdoor]
 29490 00001741 7314                    	jnb	short no_driver_version_fail
 29491                                  
 29492                                  ;	In this case, we're going to display a message
 29493                                  
 29494                                  	;push	cs
 29495                                  	;pop	ds
 29496                                  	; 13/04/2024
 29497                                  	; ds = cs
 29498 00001743 BA[DA53]                	mov	dx,baddblspace		; "Required system component is not instal"...
 29499 00001746 E80B33                  	call	print			; display the message
 29500                                  
 29501                                  ;	point backdoor call back to safe far return
 29502                                  
 29503                                  fail_driver_load:
 29504                                  	;mov	[cs:MagicBackdoor+2],cs
 29505                                  	;mov	word [cs:MagicBackdoor],NullBackdoor
 29506 00001749 8C0E[9203]              	mov	[MagicBackdoor+2],cs
 29507 0000174D C706[9003][9403]        	mov	word [MagicBackdoor],NullBackdoor
 29508                                  pre_exit_err:
 29509 00001753 B84000                  	mov	ax,40h			; SYSPRE_BADFILE_ERROR
 29510                                  			  		; (problem loading dblspace.bin)
 29511 00001756 C3                      	retn
 29512                                  
 29513                                  no_driver_version_fail:
 29514 00001757 09C0                    	or	ax,ax			; error code returned?
 29515 00001759 75EE                    	jnz	short fail_driver_load
 29516                                  
 29517                                  magic_is_resident:
 29518                                  	; 13/04/2024
 29519                                  	; ds = cs
 29520                                  	;mov	ax,[cs:break_addr]
 29521 0000175B A1[7D03]                	mov	ax,[break_addr]
 29522 0000175E E8B4FB                  	call	ParaRound	 	; convert to paragraphs
 29523                                  	;add	ax,[cs:break_addr+2]
 29524                                  	;mov	[cs:DevBrkAddr+2],ax
 29525                                  	;mov	word [cs:DevBrkAddr],0	; store normalized end here
 29526 00001761 0306[7F03]              	add	ax,[break_addr+2]
 29527 00001765 A3[3F24]                	mov	[DevBrkAddr+2],ax
 29528 00001768 C706[3D24]0000          	mov	word [DevBrkAddr],0
 29529 0000176E BB0400                  	mov	bx,4			; inquire how many paragraphs it wants
 29530                                  	;call	far [cs:MagicBackdoor]
 29531 00001771 FF1E[9003]              	call	far [MagicBackdoor]
 29532                                  	;mov	bx,[cs:ALLOCLIM]	; get top of free memory
 29533 00001775 8B1E[A502]              	mov	bx,[ALLOCLIM]
 29534 00001779 29C3                    	sub	bx,ax			; see how much we'll lower it
 29535                                  	;cmp	bx,[cs:DevBrkAddr+2]	; is there that much room free?
 29536 0000177B 3B1E[3F24]              	cmp	bx,[DevBrkAddr+2]
 29537 0000177F 7212                    	jb	short cant_move_driver
 29538                                  	;;sub	[cs:ALLOCLIM],ax	; (mov [cs:ALLOCLIM],bx)
 29539                                  	;mov	[cs:ALLOCLIM],bx ; Retro DOS v5.0 ; 08/04/2024
 29540                                  	; 13/04/2024
 29541 00001781 891E[A502]              	mov	[ALLOCLIM],bx 
 29542                                  	;mov	es,[cs:ALLOCLIM]
 29543 00001785 8E06[A502]              	mov	es,[ALLOCLIM]
 29544 00001789 BB0600                  	mov	bx,6			; tell the driver to move itself
 29545                                  	;call	far [cs:MagicBackdoor]
 29546 0000178C FF1E[9003]              	call	far [MagicBackdoor]
 29547                                  	;mov	[cs:DevBrkAddr+2],ax	; save end of low stub
 29548 00001790 A3[3F24]                	mov	[DevBrkAddr+2],ax	; save end of low stub
 29549                                  
 29550                                  cant_move_driver:
 29551                                  	;mov	ax,[cs:DevBrkAddr+2]	; get terminate segment
 29552 00001793 A1[3F24]                	mov	ax,[DevBrkAddr+2]
 29553                                  	;cmp	ax,[cs:DevLoadEnd]	; terminate size TOO big?
 29554 00001796 3B06[3724]              	cmp	ax,[DevLoadEnd]
 29555 0000179A 77B7                    	ja	short pre_exit_err	; error out if so
 29556                                  
 29557                                  ;------ deal with block device drivers
 29558                                  
 29559                                  _isblock:				; if no units found,erase the device
 29560                                  	; 13/04/2024
 29561                                  	; ds = cs
 29562                                  	;mov	al,[cs:unitcount]
 29563 0000179C A0[7C03]                	mov	al,[unitcount]
 29564 0000179F 08C0                    	or	al,al
 29565 000017A1 74B0                    	jz	short pre_exit_err
 29566 000017A3 30E4                    	xor	ah,ah
 29567                                  	;lds	si,[cs:DevEntry]	; set ds:si to header
 29568 000017A5 C536[3924]              	lds	si,[DevEntry]
 29569 000017A9 88440A                  	mov	[si+10],al		; mov [si+SYSDEV.NAME],al
 29570                                  			 		; number of units in name field
 29571                                  			  		; device drivers are *supposed*
 29572                                  			  		; to do this for themselves.
 29573 000017AC 89C1                    	mov	cx,ax
 29574 000017AE 2EC43E[6D02]            	les	di,[cs:DOSINFO]		; es:di point to dos info
 29575 000017B3 268A6520                	mov	ah,[es:di+20h]		; [es:di+SYSI_NUMIO]
 29576                                  			  		; get number of devices
 29577 000017B7 88E2                    	mov	dl,ah
 29578 000017B9 00C4                    	add	ah,al			; check for too many devices
 29579 000017BB 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 29580 000017BE 7793                    	ja	short pre_exit_err
 29581 000017C0 2E800E[6919]02          	or	byte [cs:setdevmarkflag],2
 29582 000017C6 E83D1F                  	call	DevSetBreak
 29583                                  	;jnc	short _ok_block
 29584                                  	;jmp	pre_exit_err
 29585                                  	; 13/04/2024
 29586 000017C9 7288                    	jc	short pre_exit_err  ; ds <> cs
 29587                                  
 29588                                  _ok_block:
 29589 000017CB 26886520                	mov	[es:di+20h],ah		; [es:di+SYSI_NUMIO] ; update the amount
 29590                                  
 29591 000017CF 2EC51E[8103]            	lds	bx,[cs:bpb_addr]	; point to bpb array (*)
 29592 000017D4 30F6                    	xor	dh,dh
 29593                                  
 29594                                  _perunit:
 29595 000017D6 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 29596 000017DB 26C46E00                	les	bp,[es:bp+0]		; [es:bp.sysi_dpb]
 29597                                  			  		; get first dpb
 29598                                  			  		; [es:bp+SysInitvars.SYSI_DPB] ; [es:bp+0]
 29599                                  _scandpb:
 29600 000017DF 26837E19FF              	cmp	word [es:bp+19h],0FFFFh ; -1 ; [es:bp.dpb_next_dpb]
 29601 000017E4 7406                    	jz	short _foundpb
 29602 000017E6 26C46E19                	les	bp,[es:bp+19h]		; les bp,[es:bp.dpb_next_dpb]
 29603                                  			  		; [es:bp+DPB.NEXT_DPB]
 29604 000017EA EBF3                    	jmp	short _scandpb
 29605                                  
 29606                                  ;	We've found the end of the DPB chain. Now extend it.
 29607                                  
 29608                                  _foundpb:
 29609 000017EC 2EA1[3D24]              	mov	ax,[cs:DevBrkAddr]
 29610 000017F0 26894619                	mov	[es:bp+19h],ax		; [es:bp.dpb_next_dpb] ; DPB.NEXT_DPB
 29611 000017F4 2EA1[3F24]              	mov	ax,[cs:DevBrkAddr+2]
 29612 000017F8 2689461B                	mov	[es:bp+1Bh],ax		; [es:bp.dpb_next_dpb+2] ; DPB.NEXT_DPB+2
 29613 000017FC 2EC42E[3D24]            	les	bp,[cs:DevBrkAddr]
 29614 00001801 26C74619FFFF            	mov	word [es:bp+19h],0FFFFh ; -1
 29615 00001807 26C64618FF              	mov	byte [es:bp+18h],0FFh	; [es:bp.dpb_first_access],-1
 29616                                  			  		; DPB.FIRST_ACCESS
 29617 0000180C 2E8306[3D24]3D          	add	word [cs:DevBrkAddr],61 ; DPBSIZ ; 3Dh
 29618 00001812 E8D01E                  	call	RoundBreakAddr
 29619 00001815 8B37                    	mov	si,[bx]	  		; ds:si points to bpb (*)
 29620                                  			 		; (mov si,[bx] ..and then.. add bx,2)
 29621                                  			  		; Note: If unit count > 1,bx points to a BPB in the BPB array,
 29622                                  			  		; the array address is in [bpb_addr] (*)
 29623                                  			  		; Erdogan Tan - 07/07/2023
 29624 00001817 26885600                	mov	[es:bp+0],dl   		; mov word [es:bp.dpb_drive],dx
 29625                                  			  		; [es:bp+DPB.DRIVE],dl
 29626 0000181B 26887601                	mov	[es:bp+1],dh   		; [es:bp+DPB.UNIT],dh
 29627 0000181F 52                      	push	dx
 29628 00001820 51                      	push	cx
 29629 00001821 BA5241                  	mov	dx,4152h		; DX = signature 4152h ('AR') for FAT32 extended BPB/DPB
 29630 00001824 31C9                    	xor	cx,cx	; 0
 29631 00001826 26894E1D                	mov	[es:bp+1Dh],cx		; DPB.NEXT_FREE ; last allocated cluster #
 29632 0000182A 394C0B                  	cmp	[si+0Bh],cx		; BPB.fatsecs16 ; [si+A_BPB.BPB_SECTORSPERFAT]
 29633 0000182D 7514                    	jnz	short _setdpb		; FAT DPB (33 bytes)
 29634                                  			  		; FAT32 DPB (61 bytes)
 29635 0000182F 26894E39                	mov	[es:bp+39h],cx		; DPB.FAT32_NXTFREE = 0
 29636 00001833 26894E3B                	mov	[es:bp+3Bh],cx		; DPB.FAT32_NXTFREE+2 = 0
 29637 00001837 49                      	dec	cx			; 0FFFFh ; -1
 29638 00001838 26894E1F                	mov	[es:bp+1Fh],cx		; DPB.FREE_CNT (-1 = unknown)
 29639 0000183C 26894E21                	mov	[es:bp+21h],cx		; DPB.FREE_CNT+2 (-1 = unknown)
 29640 00001840 B95845                  	mov	cx,4558h		; CX = signature 4558h ('EX') for FAT32 extended BPB/DPB
 29641                                  
 29642                                  _setdpb:
 29643 00001843 B453                    	mov	ah,53h		; SETDPB ; hidden system call
 29644 00001845 CD21                    	int	21h		; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 29645                                  			  	; DS:SI -> BPB (BIOS Parameter Block)
 29646                                  			  	; ES:BP -> buffer for DOS Drive Parameter Block
 29647                                  			  	; (if CX=4558h & DX=4152h,FAT32 Extended DPB will be set)
 29648 00001847 59                      	pop	cx
 29649 00001848 5A                      	pop	dx
 29650 00001849 268B4602                	mov	ax,[es:bp+2]		; [es:bp.dpb_sector_size]  ; [es:bp+DPB.SECTOR_SIZE]
 29651 0000184D 06                      	push	es
 29652 0000184E 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 29653 00001853 263B4510                	cmp	ax,[es:di+10h]		; [es:di.sysi_maxsec] ; [es:di+SysInitvars.SYSI_MAXSEC]
 29654 00001857 07                      	pop	es
 29655 00001858 7604                    	jbe	short _iblk_1
 29656                                  	; 13/04/2024
 29657                                  	; ds <> cs
 29658 0000185A B84000                  	mov	ax,40h			; SYSPRE_BADFILE_ERROR ; (pre_exit_err)
 29659                                  					; (problem loading dblspace.bin)
 29660 0000185D C3                      	retn
 29661                                  
 29662                                  _iblk_1:
 29663 0000185E 1E                      	push	ds
 29664 0000185F 2EC506[3924]            	lds	ax,[cs:DevEntry]
 29665 00001864 26894613                	mov	[es:bp+13h],ax		; [es:bp+DPB.DRIVER_ADDR]
 29666 00001868 268C5E15                	mov	[es:bp+15h],ds		; [es:bp+DPB.DRIVER_ADDR+2]
 29667 0000186C 1F                      	pop	ds
 29668 0000186D FEC2                    	inc	dl			; increment drive number
 29669 0000186F FEC6                    	inc	dh			; increment unit number
 29670 00001871 43                      	inc	bx
 29671 00001872 43                      	inc	bx			; point to next BPB
 29672                                  					; (in the BPB array) (*) -add bx,2-
 29673 00001873 49                      	dec	cx			; loop _foundpb
 29674 00001874 7403                    	jz	short _linkit
 29675 00001876 E973FF                  	jmp	_foundpb
 29676                                  
 29677                                  _linkit:
 29678 00001879 0E                      	push	cs
 29679 0000187A 1F                      	pop	ds
 29680 0000187B E825F5                  	call	TempCDS			; set cds for new drives
 29681                                  	; 13/04/2024
 29682                                  	; (DS may not be same with CS here)
 29683 0000187E 2EC43E[6D02]            	les	di,[cs:DOSINFO]		; es:di = dos table (SysInitVars)
 29684 00001883 268B4522                	mov	ax,[es:di+22h]		; [es:di+SYSI_DEV] ; dx:cx = head of list
 29685 00001887 268B5D24                	mov	bx,[es:di+24h]		; [es:di+SYSI_DEV+2]
 29686 0000188B 2EC536[3924]            	lds	si,[cs:DevEntry]	; ds:si = device location
 29687 00001890 8904                    	mov	[si],ax			; link in the driver
 29688 00001892 895C02                  	mov	[si+2],bx
 29689 00001895 26897522                	mov	[es:di+22h],si		; [es:di+SYSI_DEV] ; set head of list in dos
 29690 00001899 268C5D24                	mov	[es:di+24h],ds		; [es:di+SYSI_DEV+2]
 29691 0000189D E8881E                  	call	DevBreak		; mark successful install
 29692                                  	; 13/04/2024
 29693                                  	; ds = cs
 29694                                  	;mov	cx,[cs:DevBrkAddr+2]	; pass it a work buffer
 29695                                  	;mov	dx,[cs:ALLOCLIM]	; address in cx (segment)
 29696 000018A0 8B0E[3F24]              	mov	cx,[DevBrkAddr+2]
 29697 000018A4 8B16[A502]              	mov	dx,[ALLOCLIM]
 29698 000018A8 29CA                    	sub	dx,cx			; for len dx (paragraphs)
 29699 000018AA B80055                  	mov	ax,5500h		; we're shuffle aware,but don't move
 29700                                  					; any drives at this point.
 29701 000018AD BB0200                  	mov	bx,2			; switch what we can now
 29702                                  	;call	far [cs:MagicBackdoor]
 29703 000018B0 FF1E[9003]              	call	far [MagicBackdoor]
 29704                                  pre_exit:				; no errors!
 29705 000018B4 31C0                    	xor	ax,ax			; zf=1
 29706                                  no_magic:	; 13/04/2024
 29707 000018B6 C3                      	retn
 29708                                  
 29709                                  ; =============== S U B R O U T I N E ==================================
 29710                                  
 29711                                  ; 08/04/2024 - Retro DOS v5.0
 29712                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1B9Fh)
 29713                                  
 29714                                  ;***	MagicPostload -- called to clean up and make sure Magic is final placed
 29715                                  
 29716                                  MagicPostload:
 29717                                  	; 13/04/3024
 29718                                  	; ds = cs
 29719 000018B7 E89C00                  	call	get_dblspace_version	; is it there?
 29720 000018BA 75FA                    	jnz	short no_magic	     	; done if not
 29721 000018BC F7C20080                	test	dx,8000h		; is it already permanent?
 29722 000018C0 74F4                    	jz	short no_magic		; no,done if so (not in final position)
 29723 000018C2 BBFFFF                  	mov	bx,0FFFFh ; -1		; how much space does it want?
 29724 000018C5 B8114A                  	mov	ax,4A11h		; multMagicdrv
 29725                                  					; DBLSPACE.BIN - GET RELOCATION SIZE
 29726 000018C8 CD2F                    	int	2Fh			; get paragraphs into ax
 29727 000018CA 40                      	inc	ax			; extra 2 paragraphs for the stub
 29728 000018CB 40                      	inc	ax			; ((tiny_stub_end-tiny_stub_start)+15)/16
 29729                                  					; (18+15)/16 = 2
 29730                                  	;mov	[cs:DevSize],ax		; store that (**)
 29731                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB
 29732                                  	;mov	[cs:bpb_addr+2],cs   	; pass name so that
 29733                                  	;				; arena header can be set
 29734                                  	;mov	word [cs:bpb_addr],MagicDDName ; "\DBLSPACE.BIN"
 29735                                  	; 13/04/2024
 29736                                  	; ds = cs
 29737 000018CC A3[3324]                	mov	[DevSize],ax
 29738 000018CF C606[5124]00            	mov	byte [DeviceHi],0
 29739 000018D4 8C0E[8303]              	mov	[bpb_addr+2],cs
 29740 000018D8 C706[8103][AB16]        	mov	word [bpb_addr],MagicDDName
 29741                                  
 29742 000018DE E8112F                  	call	round			; normalize memhi:memlo
 29743 000018E1 E8811C                  	call	InitDevLoad		; set up sub-arena,DevLoadAddr,
 29744                                  			  		; DevLoadEnd,and DevEntry
 29745                                  					; gets arena name from bpb_addr
 29746                                  	; 13/04/2024
 29747                                  	; ds = cs
 29748                                  	;mov	es,[cs:DevLoadAddr]	; (**) (InitDevload sets this)
 29749 000018E4 8E06[3524]              	mov	es,[DevLoadAddr]
 29750                                  
 29751                                  ;	First, move a little header in place so that this looks
 29752                                  ;	to the mem command like a legitimate driver load. Otherwise,
 29753                                  ;	it will display garbage for the device name
 29754                                  
 29755 000018E8 31FF                    	xor	di,di			; move a little header in place
 29756                                  					; so that this looks to the mem command
 29757                                  					; like a legitimate driver load
 29758 000018EA BE[C816]                	mov	si,tiny_stub_start
 29759                                  	;mov	cx,18			; (tiny_stub_end-tiny_stub_start)
 29760 000018ED B91200                  	mov	cx,tiny_stub_end-tiny_stub_start
 29761 000018F0 F3A4                    	rep movsb			; move it!
 29762 000018F2 8CC0                    	mov	ax,es			; advance es appropriately
 29763 000018F4 40                      	inc	ax			; add ax,((tiny_stub_end-tiny_stub_start)+15)/16
 29764 000018F5 40                      	inc	ax
 29765 000018F6 8EC0                    	mov	es,ax
 29766 000018F8 BBFEFF                  	mov	bx,0FFFEh ; -2		; final placement!
 29767 000018FB B8114A                  	mov	ax,4A11h		; multMagicdrv
 29768 000018FE CD2F                    	int	2Fh			; DBLSPACE.BIN - RELOCATE
 29769                                  					; es = segment to which to relocate DBLSPACE.BIN
 29770                                  	;mov	ax,[cs:DevLoadAddr] ; (**)
 29771                                  	;add	ax,[cs:DevSize]		; calculate seg after DD load
 29772                                  	;mov	[cs:DevBrkAddr+2],ax	; save as ending address!
 29773                                  	;mov	word [cs:DevBrkAddr],0
 29774                                  	; 13/04/2024
 29775                                  	; ds = cs
 29776 00001900 A1[3524]                	mov	ax,[DevLoadAddr]
 29777 00001903 0306[3324]              	add	ax,[DevSize]
 29778 00001907 A3[3F24]                	mov	[DevBrkAddr+2],ax
 29779 0000190A C706[3D24]0000          	mov	word [DevBrkAddr],0
 29780                                  
 29781 00001910 E8F31D                  	call	DevSetBreak		; go ahead and alloc mem for device
 29782                                  	;call	DevBreak
 29783                                  ;no_magic:
 29784                                  	;retn
 29785                                  	; 13/04/2024 - Retro DOS v5.0
 29786 00001913 E9121E                  	jmp	DevBreak
 29787                                  
 29788                                  ; =============== S U B R O U T I N E ==================================
 29789                                  
 29790                                  ; 08/04/2024 - Retro DOS v5.0
 29791                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1C08h)
 29792                                  
 29793                                  ;***	MagicSetCdss -- disable CDSs for still unmounted DblSpace drives
 29794                                  ;
 29795                                  ;	entry:
 29796                                  ;	   CDSs are now persistent and in their final place
 29797                                  
 29798                                  MagicSetCdss:
 29799                                  	; 13/04/2024 - Retro DOS v5.0
 29800                                  	; ds = cs
 29801 00001916 E83D00                  	call	get_dblspace_version	; is it there?
 29802 00001919 753A                    	jnz	short magic_set_exit	; done if not
 29803                                  					; cl = first DblSpace drive in ASCII
 29804                                  					; ch = number of DblSpace drive letters
 29805 0000191B 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to DOS data area (SysInitVars)
 29806 00001920 C57416                  	lds	si,[si+16h]		; lds si,[si+SYSI_CDS] ; fetch CDSs
 29807 00001923 B458                    	mov	ah,88			; curdirLen
 29808 00001925 80E941                  	sub	cl,'A'			; make it zero based.
 29809 00001928 88C8                    	mov	al,cl			; get first DblSpace drive letter
 29810 0000192A F6E4                    	mul	ah			; find first DblSpace CDS
 29811 0000192C 01C6                    	add	si,ax			; cds pointer
 29812 0000192E 88CA                    	mov	dl,cl			; save for drive testing loop
 29813 00001930 88E9                    	mov	cl,ch			; get DblSpace drive count into cx
 29814 00001932 30ED                    	xor	ch,ch
 29815                                  
 29816                                  ;	We know cx > 0, or else the driver wouldn't have stayed resident
 29817                                  
 29818                                  magic_set_cdss_1:
 29819 00001934 51                      	push	cx
 29820 00001935 52                      	push	dx
 29821 00001936 1E                      	push	ds
 29822 00001937 56                      	push	si
 29823 00001938 B8114A                  	mov	ax,4A11h		; multMagicdrv
 29824 0000193B BB0100                  	mov	bx,1			; MD_DRIVE_MAP ; inquire drive map
 29825 0000193E CD2F                    	int	2Fh			; DBLSPACE.BIN - "GetDriveMapping"
 29826                                  					; see if this is an unused DblSpace drive
 29827 00001940 5E                      	pop	si
 29828 00001941 1F                      	pop	ds
 29829 00001942 5A                      	pop	dx
 29830 00001943 59                      	pop	cx
 29831 00001944 38DA                    	cmp	dl,bl			; if mapped to itself,it is vacant
 29832 00001946 7504                    	jnz	short magic_set_cdss_2	; skip if used
 29833 00001948 806444BF                	and	byte [si+44h],0BFh 	; Retro DOS v5.0 ; 08/04/2024
 29834                                  	;and	word [si+43h],0BFFFh
 29835                                  					; reset the bit in flags (curdir_inuse bit)
 29836                                  					; [si+curdir_list.cdir_flags],~curdir_inuse ; word
 29837                                  					; (.. [si+1+curdir_list.cdir_flags],0BFh ; byte)
 29838                                  magic_set_cdss_2:
 29839 0000194C 83C658                  	add	si,88			; curdirLen
 29840 0000194F FEC2                    	inc	dl			; next drive
 29841 00001951 E2E1                    	loop	magic_set_cdss_1
 29842                                  	; 13/04/2024
 29843 00001953 0E                      	push	cs
 29844 00001954 1F                      	pop	ds
 29845                                  magic_set_exit:
 29846 00001955 C3                      	retn
 29847                                  
 29848                                  ; =============== S U B R O U T I N E ==================================
 29849                                  
 29850                                  ; 08/04/2024 - Retro DOS v5.0
 29851                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1C47h)
 29852                                  
 29853                                  get_dblspace_version:
 29854 00001956 B8114A                  	mov	ax,4A11h 	; multMagicdrv
 29855                                  				; DBLSPACE.BIN - "GetVersion" - INSTALLATION CHECK
 29856                                  			 	; (BX = 0)
 29857 00001959 31DB                    	xor	bx,bx	 	; MD_VERSION = 0
 29858 0000195B CD2F                    	int	2Fh	 	; Return:
 29859                                  			 	;  AX = 0000h (successful)
 29860                                  			 	;  BX = 444Dh ("DM")
 29861                                  			 	;  CL = first drive letter used by DBLSPACE (41h = A:)
 29862                                  			 	;  CH = number of drive letters used by DBLSPACE
 29863                                  			 	;  DX = internal DBLSPACE.BIN version number (bits 14-0)
 29864                                  			 	;  bit 15 set if DBLSPACE.BIN has not yet been relocated
 29865                                  			 	;  to final position in memory (i.e. DBLSPACE.SYS /MOVE)
 29866 0000195D 09C0                    	or	ax,ax	 	; ax = 0 (successful,zf=1)
 29867 0000195F C3                      	retn
 29868                                  
 29869                                  ; ----------------------------------------------------------------------
 29870                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 29871                                  ; ----------------------------------------------------------------------
 29872                                  ; 27/03/2019 - Retro DOS v4.0
 29873                                  
 29874                                  ;MULTI_CONFIG	equ 1
 29875                                  
 29876                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 29877                                                                          ; allocation strategy call
 29878                                  
 29879                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 29880                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 29881                                  
 29882                                  default_filenum equ 8
 29883                                  
 29884                                  ;stacksw	equ true		; include switchable hardware stacks
 29885                                  
 29886                                  ; external variable defined in ibmbio module for multi-track
 29887                                  
 29888                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 29889                                  					; it on after handling config.sys file as a
 29890                                  					; default value,if multrk_flag = multrk_off1.
 29891                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 29892                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 29893                                  
 29894                                  ; if stacksw
 29895                                  
 29896                                  ; internal stack parameters
 29897                                  
 29898                                  ;entrysize	equ 8
 29899                                  
 29900                                  ;mincount	equ 8
 29901                                  ;defaultcount	equ 9
 29902                                  ;maxcount	equ 64
 29903                                  
 29904                                  ;minsize 	equ 32
 29905                                  ;defaultsize	equ 128
 29906                                  ;maxsize 	equ 512
 29907                                  
 29908                                  DOS_FLAG_OFFSET	equ 86h
 29909                                  
 29910                                  ;ifdef MULTI_CONFIG
 29911                                  ;
 29912                                  ;   config_envlen must immediately precede config_wrkseg, because they
 29913                                  ;   may be loaded as a dword ptr
 29914                                  
 29915                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29916                                  ; 25/10/2022
 29917 00001960 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 29918                                                 				;  a scratch env, this is its length
 29919 00001962 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 29920                                                     			;  segment of work area
 29921                                  
 29922 00001964 00                      config_cmd:	db  0  			; current config cmd
 29923                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 29924 00001965 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 29925                                  
 29926                                  ;endif ; MULTI_CONFIG
 29927                                  
 29928 00001966 00                      multdeviceflag:	db  0
 29929                                  
 29930 00001967 0000                    devmark_addr:	dw  0			;segment address for devmark.
 29931                                  
 29932 00001969 00                      setdevmarkflag: db  0			;flag used for devmark
 29933                                  
 29934                                  ; 30/12/2022
 29935                                  ; 12/12/2022
 29936 0000196A 00                      driver_units:	db  0			;total unitcount for driver
 29937                                  
 29938                                  ; 12/12/2022
 29939                                  ;ems_stub_installed:
 29940                                  ;		db  0
 29941                                  
 29942                                  ; 12/12/2022	
 29943                                  ;align 2
 29944                                  
 29945                                  badparm_ptr:	; label	dword
 29946 0000196B 0000                    badparm_off:	dw  0
 29947 0000196D 0000                    badparm_seg:	dw  0
 29948                                  
 29949                                  ;******************************************************************************
 29950                                  ;take care of config.sys file.
 29951                                  ;system parser data and code.
 29952                                  ;******************************************************************************
 29953                                  
 29954                                  ;*******************************************************************
 29955                                  ; parser options set for msbio sysconf module
 29956                                  ;*******************************************************************
 29957                                  ;
 29958                                  ;**** default assemble swiches definition **************************
 29959                                  
 29960                                  ;farsw	equ 0		; near call expected
 29961                                  ;datesw	equ 0		; check date format
 29962                                  ;timesw	equ 0		; check time format
 29963                                  ;filesw	equ 1		; check file specification
 29964                                  ;capsw	equ 0		; perform caps if specified
 29965                                  ;cmpxsw	equ 0		; check complex list
 29966                                  ;numsw	equ 1		; check numeric value
 29967                                  ;keysw	equ 0		; support keywords
 29968                                  ;swsw	equ 1		; support switches
 29969                                  ;val1sw	equ 1		; support value definition 1
 29970                                  ;val2sw	equ 0		; support value definition 2
 29971                                  ;val3sw	equ 1		; support value definition 3
 29972                                  ;drvsw	equ 1		; support drive only format
 29973                                  ;qussw	equ 0		; support quoted string format
 29974                                  
 29975                                  ; psdata_seg equ cs
 29976                                  
 29977                                  	;.xlist
 29978                                  	;include parse.asm		;together with psdata.inc
 29979                                  	;.list
 29980                                  
 29981                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 29982                                  ; ======================================================================
 29983                                  ; 27/03/2019 - Retro DOS v4.0
 29984                                  
 29985                                  ; 30/03/2019
 29986                                  ; VERSION.INC (MSDOS 6.0) 
 29987                                  ; Set DBCS Blank constant
 29988                                  
 29989                                  ; ifndef DBCS
 29990                                  DB_SPACE EQU 2020h
 29991                                  DB_SP_HI EQU 20h
 29992                                  DB_SP_LO EQU 20h
 29993                                  ; else
 29994                                  
 29995                                  ;*******************************************************************
 29996                                  ; Parser include file
 29997                                  ;*******************************************************************
 29998                                  
 29999                                  ;**** Equation field
 30000                                  ;-------- Character code definition
 30001                                  
 30002                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 30003                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 30004                                  _$P_Period	   equ	"."             ;AN020;
 30005                                  _$P_Slash	   equ	"/"             ;AN020;
 30006                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 30007                                  _$P_Comma	   equ	","             ;AN000;
 30008                                  _$P_Switch	   equ	"/"             ;AN000;
 30009                                  _$P_Keyword	   equ	"="             ;AN000;
 30010                                  _$P_Colon	   equ	":"             ;AN000;
 30011                                  _$P_Plus 	   equ	"+"             ;AN000;
 30012                                  _$P_Minus	   equ	"-"             ;AN000;
 30013                                  _$P_Rparen	   equ	")"             ;AN000;
 30014                                  _$P_Lparen	   equ	"("             ;AN000;
 30015                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 30016                                  _$P_DQuote	   equ	'"'             ;AN000;
 30017                                  _$P_NULL 	   equ	0		;AN000;
 30018                                  _$P_TAB		   equ	9		;AN000;
 30019                                  _$P_CR		   equ	0Dh		;AN000;
 30020                                  _$P_LF		   equ	0Ah		;AN000;
 30021                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 30022                                  
 30023                                  ;-------- Masks
 30024                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 30025                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 30026                                  
 30027                                  ;-------- DOS function call related equs
 30028                                  
 30029                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 30030                                  					; by this call, following information
 30031                                  struc _$P_CDI	
 30032 00000000 ????                     .DateF: resw 1
 30033 00000002 ??????????               .Money: resb 5
 30034 00000007 ????                     .1000:	 resb 2
 30035 00000009 ????                     .Dec:	 resb 2
 30036 0000000B ????                     .DateS: resb 2
 30037 0000000D ????                     .TimeS: resb 2
 30038 0000000F ??                          	 resb 1
 30039 00000010 ??                      	 resb 1
 30040 00000011 ??                       .TimeF: resb 1	 
 30041 00000012 ????????                	 resw 2
 30042 00000016 ????                    	 resb 2
 30043 00000018 <res Ah>                	 resw 5
 30044                                   .size:
 30045                                  endstruc
 30046                                  
 30047                                  _$P_Date_MDY	   equ	0		;AN000;
 30048                                  _$P_Date_DMY	   equ	1		;AN000;
 30049                                  _$P_Date_YMD	   equ	2		;AN000;
 30050                                  ;-------------
 30051                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 30052                                  					;AN000; DS:SI will points to DBCS EV
 30053                                  ;-------------
 30054                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 30055                                  					;AN000; following parameters are set
 30056                                  					;AN000; to get casemap table.
 30057                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 30058                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 30059                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 30060                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 30061                                  					; By this call following information
 30062                                  					; is returned.
 30063                                  struc _$P_DOS_TBL
 30064 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 30065 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 30066 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 30067                                  endstruc
 30068                                  
 30069                                  ; ----------------------------------------------------------------------------
 30070                                  ; PARMS 	LABEL	BYTE
 30071                                  ;		DW	PARMSX
 30072                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 30073                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 30074                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 30075                                  ;					; TYPICAL ARE ";", "="
 30076                                  ;					; "," & WHITESPACE ALWAYS
 30077                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 30078                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 30079                                  ; ----------------------------------------------------------------------------
 30080                                  
 30081                                  ;-------------------------------- PARMS block structure
 30082                                  struc _$P_PARMS_Blk
 30083 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 30084 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 30085 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 30086                                  endstruc
 30087                                  
 30088                                  _$P_Len_PARMS	   equ	4		;AN000;
 30089                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 30090                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 30091                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 30092                                  
 30093                                  ; ----------------------------------------------------------------------------
 30094                                  ; PARMSX	LABEL	BYTE
 30095                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 30096                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 30097                                  ;		:			; REPEATS maxp-1 TIMES
 30098                                  ;		DB	maxs		; # OF SWITCHES
 30099                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 30100                                  ;		:			; REPEATS maxs-1 TIMES
 30101                                  ;		DB	maxk		; # OF KEYWORD
 30102                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 30103                                  ;		:			; REPEATS maxk-1 TIMES
 30104                                  ; ----------------------------------------------------------------------------
 30105                                  
 30106                                  ;-------------------------------- PARMSX block structure
 30107                                  struc _$P_PARMSX_Blk		;AN000;
 30108 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 30109 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 30110 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 30111                                  endstruc
 30112                                  
 30113                                  ; ----------------------------------------------------------------------------
 30114                                  ; << Control field definition  >>
 30115                                  ;
 30116                                  ;
 30117                                  ;CONTROL   LABEL   BYTE
 30118                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 30119                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 30120                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 30121                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 30122                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 30123                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 30124                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 30125                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 30126                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 30127                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 30128                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 30129                                  ;				   ; 0002H=REPEATS ALLOWED
 30130                                  ;				   ; 0001H=OPTIONAL
 30131                                  ;	   DW	   FUNCTION_FLAGS
 30132                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 30133                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 30134                                  ;				   ; 0010H=REMOVE ":" AT END
 30135                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 30136                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 30137                                  ;	   DW	   VALUES	   ; VALUE LISTS
 30138                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 30139                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 30140                                  ;	   :
 30141                                  ;
 30142                                  ;Note:
 30143                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 30144                                  ;      DATE bit simalteniously.
 30145                                  ;
 30146                                  ;      The parser examins each bit along with the following priority.
 30147                                  ;
 30148                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 30149                                  ;      FILE SPEC -> SIMPLE STRING.
 30150                                  ;
 30151                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 30152                                  ;      in the result buffer is capitalized.
 30153                                  ;
 30154                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 30155                                  ;
 30156                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 30157                                  ;      switch, for example, '/A', then STRING points to;
 30158                                  ;
 30159                                  ;			DB    1 	; number of following synonyms
 30160                                  ;			DB   '/A',0
 30161                                  ;
 30162                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 30163                                  ;
 30164                                  ;			DB    1 	; number of following synonyms
 30165                                  ;			DB   'CODEPAGE=',0
 30166                                  ;
 30167                                  ;    - "..." must consist of upper case characters only because the parser
 30168                                  ;      performs pattern matching after converting input to upper case (by
 30169                                  ;      using the current country upper case table)
 30170                                  ;
 30171                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 30172                                  ;      example /A and /B, the format will be;
 30173                                  ;
 30174                                  ;			DB    2 	; number of following synonyms
 30175                                  ;			DB    '/A',0
 30176                                  ;			DB    '/B',0
 30177                                  ; ----------------------------------------------------------------------------
 30178                                  
 30179                                  ;**** Match_Flags
 30180                                  
 30181                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 30182                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 30183                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 30184                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 30185                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 30186                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 30187                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 30188                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 30189                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 30190                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 30191                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 30192                                  _$P_Optional	   equ	0001h		;AN000; Optional
 30193                                  
 30194                                  ;**** Function flags
 30195                                  
 30196                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 30197                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 30198                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 30199                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 30200                                  
 30201                                  ;-------------------------------- Control block structure
 30202                                  struc _$P_Control_Blk
 30203 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 30204 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 30205 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 30206 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 30207 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 30208 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 30209                                  endstruc
 30210                                  
 30211                                  ; ----------------------------------------------------------------------------
 30212                                  ; << Value List Definition >>
 30213                                  ;
 30214                                  ;VALUES 	LABEL	BYTE
 30215                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 30216                                  ;	     +-
 30217                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 30218                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 30219                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 30220                                  ;	     |	:
 30221                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 30222                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 30223                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 30224                                  ;	     |	:
 30225                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 30226                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 30227                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 30228                                  ;	     +-	:
 30229                                  ;
 30230                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 30231                                  ;
 30232                                  ;Note:
 30233                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 30234                                  ;      when no choice lists are provided.
 30235                                  ;
 30236                                  ;    - STRING must consist of upper case characters only because the parser
 30237                                  ;      performs pattern matching after converting input to upper case (by
 30238                                  ;      using the current country upper case table)
 30239                                  ; ----------------------------------------------------------------------------
 30240                                  
 30241                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 30242                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 30243                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 30244                                  _$P_nval_String	   equ	3		;AN000; string list ID
 30245                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 30246                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 30247                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 30248                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 30249                                  
 30250                                  struc _$P_Val_List
 30251 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 30252 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 30253 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 30254 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 30255 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 30256                                  endstruc
 30257                                  
 30258                                  ; ----------------------------------------------------------------------------
 30259                                  ; << Result Buffer Definition  >>
 30260                                  ;
 30261                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 30262                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 30263                                  ;						;	1=NUMBER, 2=LIST INDEX,
 30264                                  ;						;	3=STRING, 4=COMPLEX,
 30265                                  ;						;	5=FILESPEC, 6=DRIVE
 30266                                  ;						;	7=DATE, 8=TIME
 30267                                  ;						;	9=QUOTED STRING
 30268                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 30269                                  ;
 30270                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 30271                                  ;
 30272                                  ;            +-
 30273                                  ;	    | DD	n			; VALUE IF NUMBER
 30274                                  ;	    | or
 30275                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 30276                                  ;	    |					; (ES presents Segment address)
 30277                                  ;	    | or
 30278                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 30279                                  ;	    | or
 30280                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 30281                                  ;	    | or
 30282                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 30283                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 30284                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 30285                                  ;	    | or
 30286                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 30287                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 30288                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 30289                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 30290                                  ;	    +-
 30291                                  ;
 30292                                  ;
 30293                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 30294                                  ;      list.
 30295                                  ;
 30296                                  ;      YEAR: If the input value for the year is less than 100, parser
 30297                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 30298                                  ;	     the year value, he returns 1987.
 30299                                  ; ----------------------------------------------------------------------------
 30300                                  
 30301                                  ;-------------------------------- Result block structure
 30302                                  struc _$P_Result_Blk
 30303 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 30304 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 30305 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 30306 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 30307                                  endstruc
 30308                                  
 30309                                  ;--------------------------------
 30310                                  ;**** values for the type field in the result block
 30311                                  
 30312                                  _$P_EOL		   equ	0		;AN000; End of line
 30313                                  _$P_Number	   equ	1		;AN000; Number
 30314                                  _$P_List_Idx	   equ	2		;AN000; List Index
 30315                                  _$P_String	   equ	3		;AN000; String
 30316                                  _$P_Complex	   equ	4		;AN000; Complex
 30317                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 30318                                  _$P_Drive	   equ	6		;AN000; Drive
 30319                                  _$P_Date_F	   equ	7		;AN000; Date
 30320                                  _$P_Time_F	   equ	8		;AN000; Time
 30321                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 30322                                  
 30323                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 30324                                  
 30325                                  ;**** Return code
 30326                                  ;
 30327                                  ; following return code will be returned in the AX register.
 30328                                  
 30329                                  _$P_No_Error	   equ	0		;AN000; No error
 30330                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 30331                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 30332                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 30333                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 30334                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 30335                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 30336                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 30337                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 30338                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 30339                                  
 30340                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 30341                                  
 30342                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 30343                                  
 30344                                  ; 14/04/2024 - Retro DOS v5.0
 30345                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:1C62h
 30346                                  
 30347                                  ;********************** Local Data *************************************
 30348 0000196F 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 30349 00001971 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 30350 00001973 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 30351 00001975 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 30352 00001977 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 30353 00001978 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 30354 0000197A 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 30355 0000197C 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 30356                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 30357                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 30358                                  
 30359                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 30360                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 30361                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 30362                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 30363                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 30364                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 30365                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 30366                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 30367                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 30368                                  
 30369                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 30370                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 30371                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 30372                                  
 30373 0000197E 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 30374 00001980 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 30375 00001982 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 30376 00001984 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 30377                                  
 30378 00001986 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 30379                                  _$P_STRING_BUF_END equ	$		;AN000;
 30380                                  
 30381                                  ; 25/10/2022
 30382                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 30383                                  
 30384 00001A06 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 30385 00001A07 0000                    		   dw	0		;AN000; offset	of char case map table
 30386 00001A09 0000                    		   dw	0		;AN000; segment of char case map table
 30387                                  ; 25/10/2022
 30388                                  ;IF CAPSW
 30389                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 30390                                  ;		   dw	0		;AN000; offset	of file case map table
 30391                                  ;		   dw	0		;AN000; segment of file case map table
 30392                                  ;ENDIF
 30393                                  
 30394                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 30395                                  ;
 30396                                  
 30397                                  ;M029
 30398                                  ;!!!WARNING!!!
 30399                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 30400                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 30401                                  ;changes need to be made in SYSPARSE
 30402                                  
 30403                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 30404                                  
 30405                                  ; 25/10/2022
 30406                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 30407                                  
 30408 00001A0B 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 30409                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 30410                                  
 30411                                  ;ENDIF					;AN000;(of FileSW)
 30412                                  
 30413                                  ; delimiter parsing
 30414                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 30415                                  _$P_period_only	   equ	02h		;AN032; check only for period
 30416                                  
 30417                                  ;filespec error flag
 30418 00001A14 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 30419                                  					;AN033;  was detected.
 30420                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 30421                                  
 30422                                  
 30423                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 30424                                  ; ======================================================================
 30425                                  ; 27/03/2019 - Retro DOS v4.0
 30426                                  
 30427                                  ;***********************************************************************
 30428                                  ; SysParse;
 30429                                  ;
 30430                                  ;  Function : Parser Entry
 30431                                  ;
 30432                                  ;  Input: DS:SI -> command line
 30433                                  ;	  ES:DI -> parameter block
 30434                                  ;	  cs -> psdata.inc
 30435                                  ;	  CX = operand ordinal
 30436                                  ;
 30437                                  ;	  Note:  ES is the segment containing all the control blocks defined
 30438                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 30439                                  ;		 is in DS.
 30440                                  ;
 30441                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 30442                                  ;		    invalid value list. But this parser does NOT implement
 30443                                  ;		    this feature. Therefore CY always zero.
 30444                                  ;
 30445                                  ;	   CY = 0   AX = return code
 30446                                  ;		    BL = terminated delimiter code
 30447                                  ;		    CX = new operand ordinal
 30448                                  ;		    SI = set past scaned operand
 30449                                  ;		    DX = selected result buffer
 30450                                  ;
 30451                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 30452                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 30453                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 30454                                  ;
 30455                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 30456                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 30457                                  ;
 30458                                  ;-------- Modification History -----------------------------------------
 30459                                  ;
 30460                                  ;  4/04/87 : Created by K. K,
 30461                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 30462                                  ;	   : JMP SHORT assemble error (tm02)
 30463                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 30464                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 30465                                  ;	     DateSW equ 1)	      (tm04)
 30466                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 30467                                  ;				      (tm05) in PSDATA.INC
 30468                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 30469                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 30470                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 30471                                  ;	     value-list block	      (tm07)
 30472                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 30473                                  ;	     switch (keyword) or not. If there is, backup si for next call
 30474                                  ;	     (tm08)
 30475                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 30476                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 30477                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 30478                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 30479                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 30480                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 30481                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 30482                                  ;					  (tm12)
 30483                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 30484                                  ;					  (tm13)
 30485                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 30486                                  ;					  (tm14)
 30487                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 30488                                  ;					  (tm15)
 30489                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 30490                                  
 30491                                  ;  7/24/87 : Quoted strings being returned with quotes.
 30492                                  
 30493                                  ;  7/28/87 : Kerry S (;AN018;)
 30494                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 30495                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 30496                                  ;	     affected: _$P_Chk_SW_Control.
 30497                                  
 30498                                  ;  7/29/87 : Kerry S (;AN019;)
 30499                                  ;	     Now allow the optional bit in match flags for switches.  This
 30500                                  ;	     allows the switch to be encountered with a value or without a
 30501                                  ;	     value and no error is returned.
 30502                                  ;
 30503                                  
 30504                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 30505                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 30506                                  ;	     within a date response, instead of checking just for the one
 30507                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 30508                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 30509                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 30510                                  
 30511                                  ;  9/1/87  : Kerry S (;AN021)
 30512                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 30513                                  ;	     the command line with the string in the control block the
 30514                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 30515                                  ;	     on the command line and assuming a match.	This allowed a shorter
 30516                                  ;	     string on the command line than in the synonym list in the control
 30517                                  ;	     block.  I put in a test for a null in the control block so the
 30518                                  ;	     string in the control block must be the same length as the string
 30519                                  ;	     preceeding the colon or equal on the command line.
 30520                                  
 30521                                  ;  8/28/87 : Kerry S (;AN022;)
 30522                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 30523                                  ;	     problems for people who included it themselves in a segment other
 30524                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 30525                                  ;	     segment.
 30526                                  
 30527                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 30528                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 30529                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 30530                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 30531                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 30532                                  ;	     BL be used if TIME is being parsed.
 30533                                  
 30534                                  ;  9/24/87 : Ed K
 30535                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 30536                                  ;	     invocations with their normally expanded code; made comments
 30537                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 30538                                  
 30539                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 30540                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 30541                                  ;	     pointed to by non-existant CONTROL.
 30542                                  
 30543                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 30544                                  ;	     A quoted text string can be framed only by double quote.  Remove
 30545                                  ;	     support to frame quoted text string with single quote.
 30546                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 30547                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 30548                                  ;	     single quote in PROC prologues are left as is for history reasons.
 30549                                  
 30550                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 30551                                  ;	     quote chars within a quoted string is supposed to be reported as
 30552                                  ;	     one quote character, but is reported as two quotes.  This changed
 30553                                  ;	     two instructions in PROC _$P_Quoted_Str.
 30554                                  
 30555                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 30556                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 30557                                  
 30558                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 30559                                  
 30560                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 30561                                  ;	     psdata buffer should have cs.
 30562                                  
 30563                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 30564                                  ;	     positional missing.
 30565                                  
 30566                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 30567                                  ;	     as a line delimiter, should use carriage return.
 30568                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 30569                                  
 30570                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 30571                                  
 30572                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 30573                                  ;	     endless loop since SI is returned still pointing to start
 30574                                  ;	     of that parm.
 30575                                  
 30576                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 30577                                  ;	     Vector to returned string has CS instead of cs, but
 30578                                  ;	     when tried to fix it on previous version, changed similar
 30579                                  ;	     but wrong place.
 30580                                  
 30581                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 30582                                  ;	     delimiters between hours, minutes, seconds for time. And period
 30583                                  ;	     and comma are valid delimiters between seconds and 100th second.
 30584                                  
 30585                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 30586                                  ;	     in a filespec, then flag an error.
 30587                                  
 30588                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 30589                                  ;	     indexed off of the cs equate instead of the DS register.
 30590                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 30591                                  ;  -->	     local parser data. Why were some references to local data changed
 30592                                  ;	     to do this before, but not all ?????
 30593                                  
 30594                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 30595                                  
 30596                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 30597                                  ;
 30598                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 30599                                  
 30600                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 30601                                  
 30602                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 30603                                  ;	     separator in TIME before hundredths field.
 30604                                  ;
 30605                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 30606                                  ;			strings as keywords.
 30607                                  ;
 30608                                  ;***********************************************************************
 30609                                  
 30610                                  ;IF FarSW				;AN000;(Check if need far return)
 30611                                  ;SysParse proc far			;AN000;
 30612                                  ;ELSE					;AN000;
 30613                                  ;SysParse proc near			;AN000;
 30614                                  ;ENDIF					;AN000;(of FarSW)
 30615                                  
 30616                                  ; 27/03/2019 - Retro DOS v4.0
 30617                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 30618                                  
 30619                                  ; 25/10/2022 - Retro DOS v4.0
 30620                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 30621                                  
 30622                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 30623                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 30624                                  
 30625                                  SysParse:
 30626                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 30627                                  	; dx = 0
 30628 00001A15 1E                      	push	ds ; *!*
 30629 00001A16 0E                      	push	cs
 30630 00001A17 1F                      	pop	ds 
 30631                                  
 30632                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 30633                                  	;cld				;AN000; confirm forward direction
 30634                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 30635                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 30636                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 30637                                  	;
 30638                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 30639                                  
 30640                                  	; 06/09/2023
 30641 00001A18 8916[7C19]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 30642 00001A1C FC                      	cld				;AN000; confirm forward direction
 30643 00001A1D 890E[6F19]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 30644 00001A21 8916[7119]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 30645 00001A25 8916[8419]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 30646 00001A29 8916[7519]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 30647                                  
 30648                                  ;M029 -- Begin changes
 30649                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 30650                                  ;entry to SysParse. This is in the non-checksum region and any program that
 30651                                  ;corrupts this table but does not corrupt the checksum region will leave
 30652                                  ;command.com parsing in an inconsistent state.
 30653                                  ; NB: The special characters string has been hardcoded here. If any change
 30654                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 30655                                  
 30656                                  ;IF FileSW + DrvSW
 30657                                  	; 14/04/2024 (NASM syntax BugFix) .. '][' (MASM) -> '[]' (NASM)
 30658                                  	
 30659                                  	;mov	word [cs:_$P_FileSp_Char], '[]'
 30660                                  	;mov	word [cs:_$P_FileSp_Char+2], '|<'
 30661                                  	;mov	word [cs:_$P_FileSp_Char+4], '>+'
 30662                                  	;mov 	word [cs:_$P_FileSp_Char+6], '=;'
 30663                                  
 30664                                  	; 14/04/2024
 30665                                  	; 06/09/2023
 30666 00001A2D C706[0B1A]5B5D          	mov	word [_$P_FileSp_Char], '[]'	; mov word [_$P_FileSp_Char],5D5Bh
 30667 00001A33 C706[0D1A]7C3C          	mov	word [_$P_FileSp_Char+2], '|<'	; 3C7Ch
 30668 00001A39 C706[0F1A]3E2B          	mov	word [_$P_FileSp_Char+4], '>+'	; 2B3Eh
 30669 00001A3F C706[111A]3D3B          	mov 	word [_$P_FileSp_Char+6], '=;'	; 3B3Dh
 30670                                  ;ENDIF
 30671                                  	; 06/09/2023
 30672 00001A45 1F                      	pop	ds ; *!*
 30673                                  
 30674                                  ;M029 -- End of changes
 30675                                  
 30676 00001A46 E87806                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 30677 00001A49 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 30678                                  ;--------------------------- End of Line
 30679 00001A4B B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 30680 00001A4E 53                      	push	bx			;AN000;
 30681                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 30682                                  					;AN000; Get the PARMSX address to
 30683 00001A4F 268B1D                  	mov	bx,[es:di]
 30684                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 30685                                  					;AN000; check ORDINAL to see if the minimum
 30686 00001A52 263A0F                  	cmp	cl,[es:bx]	
 30687 00001A55 7303                    	jae	short _$P_Fin		;AN000; positional found.
 30688                                  
 30689 00001A57 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 30690                                  _$P_Fin: 				;AN000;
 30691 00001A5A 5B                      	pop	bx			;AN000;
 30692 00001A5B E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 30693                                  ;---------------------------
 30694                                  _$P_Start:				;AN000;
 30695 00001A5E 2E8936[7E19]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 30696 00001A63 53                      	push	bx			;AN000; quoted string or file spec.
 30697 00001A64 57                      	push	di			;AN000;
 30698 00001A65 55                      	push	bp			;AN000;
 30699                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 30700                                  	; 02/11/2022
 30701                                  	;lea	bx,[_$P_STRING_BUF]
 30702                                  	; 07/09/2023
 30703 00001A66 BB[8619]                	mov	bx,_$P_STRING_BUF
 30704 00001A69 2EF606[7D19]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 30705 00001A6F 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 30706                                  
 30707                                  _$P_Pack_Loop:				;AN000;
 30708 00001A71 AC                      	lodsb				;AN000; Pick a operand from buffer
 30709 00001A72 E8F106                  	call	_$P_Chk_Switch		;AN000; Check switch character
 30710 00001A75 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 30711                                  
 30712 00001A77 E86906                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 30713 00001A7A 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 30714                                  
 30715 00001A7C E89906                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 30716 00001A7F 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 30717                                  
 30718 00001A81 2EF606[7D19]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 30719                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 30720 00001A87 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 30721                                  
 30722 00001A89 E83506                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 30723 00001A8C EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 30724                                  
 30725                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 30726 00001A8E 2EF606[7D19]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 30727 00001A94 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 30728                                  
 30729 00001A96 4E                      	dec	si			;AN000; (tm08)
 30730 00001A97 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 30731                                  
 30732                                  _$P_PL01:				;AN000;
 30733 00001A99 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 30734 00001A9C 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 30735 00001A9E 7506                    	jne	short _$P_PL00 		;AN000; then
 30736                                  
 30737 00001AA0 2E800E[7D19]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 30738                                  _$P_PL00:				;AN000;
 30739 00001AA6 43                      	inc	bx			;AN000; ready to see next byte
 30740 00001AA7 E8D506                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 30741 00001AAA 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 30742                                  
 30743 00001AAC AC                      	lodsb				;AN000; if yes, store
 30744 00001AAD 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 30745 00001AB0 43                      	inc	bx			;AN000; update pointer
 30746 00001AB1 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 30747                                  
 30748                                  _$P_Pack_End_BY_EOL:			;AN000;
 30749 00001AB3 4E                      	dec	si			;AN000; backup si pointer
 30750                                  _$P_Pack_End:				;AN000;
 30751 00001AB4 2E8936[7319]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 30752                                  	; 07/09/2023
 30753                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 30754 00001AB9 30E4                    	xor	ah,ah ; 0 ; *
 30755 00001ABB 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 30756                                  	;
 30757 00001ABE 2E891E[8219]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 30758                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 30759 00001AC3 268B1D                  	mov	bx,[es:di]
 30760                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 30761                                  	; 02/11/2022
 30762                                  	;lea	si,[_$P_STRING_BUF]
 30763                                  	; 07/09/2023
 30764 00001AC6 BE[8619]                	mov	si,_$P_STRING_BUF
 30765 00001AC9 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 30766 00001ACD 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 30767                                  
 30768 00001ACF 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 30769 00001AD3 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 30770                                  
 30771 00001AD5 2EF606[7D19]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 30772 00001ADB 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 30773                                  
 30774                                  _$P_Positional_Manager:			;AN000; else process as positional
 30775 00001ADD 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 30776                                  	; 07/09/2023
 30777                                  	;xor	ah,ah			;AN000; ax = maxp
 30778 00001AE1 2E3906[6F19]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 30779 00001AE6 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 30780                                  
 30781 00001AE8 2EA1[6F19]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 30782 00001AEC D1E0                    	shl	ax,1			;AN000; ax = ax*2
 30783 00001AEE 43                      	inc	bx			;AC035; add '2' to
 30784 00001AEF 43                      	inc	bx			;AC035;  BX reg
 30785                                  					;AN000; now bx points to 1st CONTROL
 30786 00001AF0 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 30787 00001AF2 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 30788 00001AF5 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 30789 00001AF8 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 30790                                  
 30791                                  _$P_Too_Many_Error:			;AN000;
 30792 00001AFA 2EC706[7119]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 30793 00001B01 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 30794                                  
 30795                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 30796                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 30797                                  get_maxp:
 30798                                  	;mov	al,[es:bx+1]
 30799 00001B03 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 30800                                  	; 07/09/2023
 30801                                  	; ah=0 ; *
 30802                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 30803 00001B07 30ED                    	xor	ch,ch ; **
 30804 00001B09 40                      	inc	ax			;AN000;
 30805 00001B0A D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 30806 00001B0C 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 30807 00001B0E C3                      	retn
 30808                                  
 30809                                  _$P_SW_Manager:				;AN000;
 30810                                  	; 07/09/2023
 30811                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 30812                                  	;xor	ah,ah			;AN000; ax = maxp
 30813                                  	;inc	ax			;AN000;
 30814                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 30815                                  	;add	bx,ax			;AN000; now bx points to maxs
 30816 00001B0F E8F1FF                  	call	get_maxp ; 07/09/2023
 30817                                  
 30818 00001B12 268A0F                  	mov	cl,[es:bx]		;AN000;
 30819                                  	; 07/09/2023
 30820                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 30821                                  	;or	cx,cx			;AN000; at least one switch ?
 30822                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 30823                                  	; 07/07/2023
 30824 00001B15 E30F                    	jcxz	_$P_SW_Not_Found	; no
 30825                                  
 30826 00001B17 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 30827                                  
 30828                                  _$P_SW_Mgr_Loop: 			;AN000;
 30829 00001B18 53                      	push	bx			;AN000;
 30830 00001B19 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 30831 00001B1C E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 30832 00001B1F 5B                      	pop	bx			;AN000;
 30833 00001B20 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 30834                                  
 30835 00001B22 43                      	inc	bx			;AC035; add '2' to
 30836 00001B23 43                      	inc	bx			;AC035;  BX reg
 30837                                  					;AN000; else bx points to the next CONTROL
 30838 00001B24 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 30839                                  
 30840                                  _$P_SW_Not_Found:			;AN000;
 30841 00001B26 2EC706[7119]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 30842 00001B2D EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 30843                                  
 30844                                  _$P_Key_Manager: 			;AN000;
 30845                                  	; 07/09/2023
 30846                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 30847                                  	;xor	ah,ah			;AN000; ax = maxp
 30848                                  	;inc	ax			;AN000;
 30849                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 30850                                  	;add	bx,ax			;AN000; now bx points to maxs
 30851 00001B2F E8D1FF                  	call	get_maxp ; 07/09/2023
 30852                                  	
 30853 00001B32 268A07                  	mov	al,[es:bx]		;AN000;
 30854 00001B35 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 30855 00001B37 D1E0                    	shl	ax,1			;AN000;
 30856 00001B39 40                      	inc	ax			;AN000; ax = ax*2+1
 30857 00001B3A 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 30858 00001B3C 268A0F                  	mov	cl,[es:bx]		;AN000;
 30859                                  	; 07/09/2023
 30860                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 30861                                  	;or	cx,cx			;AN000; at least one keyword ?
 30862                                  	;jz	short _$P_Key_Not_Found	;AN000;
 30863                                  	; 07/07/2023
 30864 00001B3F E305                    	jcxz	_$P_Key_Not_Found	; no
 30865                                  
 30866 00001B41 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 30867                                  
 30868                                  _$P_Key_Mgr_Loop:			;AN000;
 30869                                  	; 07/09/2023
 30870                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 30871                                  	; (always returns with cf=1)
 30872                                  	;push	bx			;AN000;
 30873                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 30874                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 30875                                  	;pop	bx			;AN000;
 30876                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 30877                                  	; 07/09/2023
 30878                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 30879                                  
 30880 00001B42 43                      	inc	bx			;AC035; add '2' to
 30881 00001B43 43                      	inc	bx			;AC035;  BX reg
 30882                                  					;AN000; else bx points to the next CONTROL
 30883 00001B44 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 30884                                  
 30885                                  _$P_Key_Not_Found:			;AN000;
 30886 00001B46 2EC706[7119]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 30887                                  _$P_Return_to_Caller:			;AN000;
 30888 00001B4D 5D                      	pop	bp			;AN000;
 30889 00001B4E 5F                      	pop	di			;AN000;
 30890 00001B4F 5B                      	pop	bx			;AN000;
 30891 00001B50 2E8B0E[6F19]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 30892 00001B55 2EA1[7119]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 30893 00001B59 2E8B36[7319]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 30894 00001B5E 2E8B16[7519]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 30895 00001B63 2E8A1E[7719]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 30896                                  _$P_Single_Exit: 			;AN000;
 30897 00001B68 F8                      	clc				;AN000;
 30898 00001B69 C3                      	retn				;AN000;
 30899                                  
 30900                                  ;***********************************************************************
 30901                                  ; _$P_Chk_Pos_Control
 30902                                  ;
 30903                                  ; Function: Parse CONTROL block for a positional
 30904                                  ;
 30905                                  ; Input:     ES:BX -> CONTROL block
 30906                                  ;	     cs:SI -> _$P_STRING_BUF
 30907                                  ;
 30908                                  ; Output:    None
 30909                                  ;
 30910                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 30911                                  ;
 30912                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 30913                                  ;***********************************************************************
 30914                                  
 30915                                  _$P_Chk_Pos_Control:
 30916 00001B6A 50                      	push	ax			;AN000;
 30917                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 30918 00001B6B 268B07                  	mov	ax,[es:bx]
 30919                                  	; 12/12/2022
 30920 00001B6E A802                    	test	al,_$P_Repeat
 30921                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 30922 00001B70 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 30923                                  
 30924 00001B72 2EFF06[6F19]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 30925                                  _$P_CPC00:				;AN000;
 30926 00001B77 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 30927 00001B7B 7517                    	jne	short _$P_CPC01		;AN000;
 30928                                  
 30929                                  	; 12/12/2022
 30930 00001B7D A801                    	test	al,_$P_Optional
 30931                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 30932 00001B7F 7509                    	jnz	short _$P_CPC02		;AN000;
 30933                                  
 30934 00001B81 2EC706[7119]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 30935 00001B88 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 30936                                  
 30937                                  _$P_CPC02:				;AN000;
 30938 00001B8A 50                      	push	ax			;AN000;
 30939                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 30940                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 30941                                  	; 07/07/2023
 30942 00001B8B B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 30943 00001B8E E89600                  	call	_$P_Fill_Result		;AN000;
 30944 00001B91 58                      	pop	ax			;AN000;
 30945 00001B92 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 30946                                  
 30947                                  _$P_CPC01:				;AN000;
 30948 00001B94 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 30949                                  _$P_CPC_Exit:				;AN000;
 30950 00001B97 58                      	pop	ax			;AN000;
 30951 00001B98 C3                      	retn				;AN000;
 30952                                  
 30953                                  ;***********************************************************************
 30954                                  ; _$P_Chk_Key_Control
 30955                                  ;
 30956                                  ; Function: Parse CONTROL block for a keyword
 30957                                  ;
 30958                                  ; Input:     ES:BX -> CONTROL block
 30959                                  ;	     cs:SI -> _$P_STRING_BUF
 30960                                  ;
 30961                                  ; Output:    CY = 1 : not match
 30962                                  ;
 30963                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 30964                                  ;
 30965                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 30966                                  ;***********************************************************************
 30967                                  
 30968                                  ; 07/09/2023
 30969                                  ;_$P_Chk_Key_Control:
 30970                                  ;	stc				;AN000; this logic works when the KeySW
 30971                                  ;	retn				;AN000; is reset.
 30972                                  
 30973                                  ;***********************************************************************
 30974                                  ; _$P_Search_KEYorSW:
 30975                                  ;
 30976                                  ; Function: Seach specified keyword or switch from CONTROL
 30977                                  ;
 30978                                  ; Input:     ES:BX -> CONTROL block
 30979                                  ;	     cs:SI -> _$P_STRING_BUF
 30980                                  ;
 30981                                  ; Output:    CY = 1 : not match
 30982                                  ;
 30983                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 30984                                  ;***********************************************************************
 30985                                  
 30986                                  	; 25/10/2022 - Retro DOS v4.0
 30987                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 30988                                  
 30989                                  _$P_Search_KEYorSW:			;AN000;
 30990 00001B99 55                      	push	bp			;AN000;
 30991 00001B9A 51                      	push	cx			;AN000;
 30992 00001B9B 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 30993 00001B9F 30ED                    	xor	ch,ch			;AN000; and set it to cx
 30994                                  	;or	cx,cx			;AN000; No synonyms specified ?
 30995                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 30996                                  	; 07/07/2023
 30997 00001BA1 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 30998                                  
 30999                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 31000                                  	; 25/10/2022
 31001 00001BA3 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 31002                                  	;lea	bp,[bx+9]
 31003                                  _$P_KEYorSW_Loop:			;AN000;
 31004 00001BA6 E8B503                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 31005 00001BA9 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 31006                                  
 31007 00001BAB E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 31008 00001BAE E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 31009                                  _$P_KEYorSW_Not_Found:			;AN000;
 31010 00001BB0 F9                      	stc				;AN000; indicate not found in synonym list
 31011 00001BB1 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 31012                                  
 31013                                  _$P_KEYorSW_Found:			;AN000;
 31014 00001BB3 2E892E[8419]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 31015 00001BB8 F8                      	clc				;AN000; indicate found
 31016                                  _$P_KEYorSW_Exit:			;AN000;
 31017 00001BB9 59                      	pop	cx			;AN000;
 31018 00001BBA 5D                      	pop	bp			;AN000;
 31019 00001BBB C3                      	retn				;AN000;
 31020                                   
 31021                                  ;***********************************************************************
 31022                                  ; _$P_MoveBP_NUL
 31023                                  ;***********************************************************************
 31024                                  
 31025                                  _$P_MoveBP_NUL:
 31026                                  _$P_MBP_Loop:				;AN000;
 31027                                  	; 11/12/2022
 31028 00001BBC 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 31029                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 31030                                  	; (SYSINIT:18DBh)
 31031                                   	;cmp     byte [es:bp+0],0
 31032 00001BC1 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 31033                                  
 31034 00001BC3 45                      	inc	bp			;AN000; until
 31035 00001BC4 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 31036                                  
 31037                                  _$P_MBP_Exit:				;AN000;
 31038 00001BC6 45                      	inc	bp			;AN000; bp points to next to NULL
 31039 00001BC7 C3                      	retn				;AN000;
 31040                                  
 31041                                  ;***********************************************************************
 31042                                  ; _$P_Chk_SW_Control
 31043                                  ;
 31044                                  ; Function: Parse CONTROL block for a switch
 31045                                  ;
 31046                                  ; Input:     ES:BX -> CONTROL block
 31047                                  ;	     cs:SI -> _$P_STRING_BUF
 31048                                  ;
 31049                                  ; Output:    CY = 1 : not match
 31050                                  ;
 31051                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 31052                                  ;
 31053                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 31054                                  ;***********************************************************************
 31055                                  
 31056                                  _$P_Chk_SW_Control:
 31057                                  
 31058                                  ;IF SwSW				;AN000;(Check if switch is supported)
 31059                                  	;or	byte [cs:_$P_Flags+1],10h
 31060 00001BC8 2E800E[7D19]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 31061 00001BCE E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 31062 00001BD1 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 31063                                  
 31064                                  	;and	[cs:_$P_Flags+],0EFh
 31065 00001BD3 2E8026[7D19]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 31066                                  					;AC034; reset the indicator previously set
 31067 00001BD9 50                      	push	ax			;AN000; 	      /switch:
 31068 00001BDA 2EA1[8019]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 31069 00001BDE 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 31070 00001BE0 2E0106[7E19]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 31071 00001BE5 58                      	pop	ax			;AN000;
 31072                                  
 31073 00001BE6 2E8B36[8019]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 31074 00001BEB 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 31075 00001BEF 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 31076                                  
 31077 00001BF1 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 31078 00001BF6 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 31079                                  
 31080 00001BF8 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 31081 00001BFF EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 31082                                  
 31083                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 31084                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 31085 00001C01 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 31086 00001C05 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 31087                                  
 31088                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 31089                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 31090                                  	;test	word [es:bx],1
 31091                                  	; 12/12/2022
 31092                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 31093 00001C07 26F60701                	test	byte [es:bx],_$P_Optional
 31094 00001C0B 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 31095                                  
 31096 00001C0D 2EC706[7119]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 31097 00001C14 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 31098                                  
 31099                                  _$P_CSW00:				;AN000;
 31100 00001C16 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 31101 00001C19 F8                      	clc				;AN000; indicate match
 31102                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 31103                                  	; 12/12/2022
 31104 00001C1A C3                      	retn
 31105                                  
 31106                                  _$P_Chk_SW_Err0: 			;AN000;
 31107 00001C1B F9                      	stc				;AN000; not found in switch synonym list
 31108                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 31109                                  	; 12/12/2022
 31110 00001C1C C3                      	retn	
 31111                                  
 31112                                  _$P_Chk_SW_Exit: 			;AN000;
 31113 00001C1D 50                      	push	ax			;AN000;
 31114                                  	;mov	al,_$P_String		;AN000;
 31115                                  	;mov	ah,_$P_No_Tag		;AN000;
 31116                                  	; 07/07/2023
 31117 00001C1E B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 31118 00001C21 E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 31119 00001C24 58                      	pop	ax			;AN000;
 31120 00001C25 F8                      	clc				;AN000;
 31121                                  _$P_Chk_SW_Single_Exit:			;AN000;
 31122 00001C26 C3                      	retn				;AN000;
 31123                                  ;ELSE					;AN000;(of IF SwSW)
 31124                                  ;	stc				;AN000; this logic works when the SwSW
 31125                                  ;	retn				;AN000; is reset.
 31126                                  
 31127                                  ;***********************************************************************
 31128                                  ; _$P_Fill_Result
 31129                                  ;
 31130                                  ; Function: Fill the result buffer
 31131                                  ;
 31132                                  ; Input:    AH = Item tag
 31133                                  ;	    AL = type
 31134                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 31135                                  ;		  AL = 2: DX has index(offset) into value list
 31136                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 31137                                  ;		  AL = 7: DX has year, CL has month and CH has date
 31138                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 31139                                  ;			  amd CH has hundredths
 31140                                  ;		  AL = else: cs:SI points to returned string buffer
 31141                                  ;	    ES:BX -> CONTROL block
 31142                                  ;
 31143                                  ; Output:   None
 31144                                  ;
 31145                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 31146                                  ;
 31147                                  ; Vars: _$P_DX(W)
 31148                                  ;***********************************************************************
 31149                                  
 31150                                  _$P_Fill_Result:
 31151 00001C27 57                      	push	di			;AN000;
 31152 00001C28 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 31153                                  					;AN000; di points to result buffer
 31154 00001C2C 2E893E[7519]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 31155                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 31156                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 31157                                  	; 07/09/2023
 31158                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 31159 00001C31 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 31160                                  
 31161 00001C34 50                      	push	ax			;AN000;
 31162 00001C35 2EA1[8419]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 31163 00001C39 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 31164                                  					;AN000;   then set it to the result
 31165 00001C3D 58                      	pop	ax			;AN000;
 31166                                  _$P_RLT04:				;AN000;
 31167 00001C3E 3C01                    	cmp	al,_$P_Number		;AN000; if number
 31168 00001C40 750A                    	jne	short _$P_RLT00		;AN000;
 31169                                  
 31170                                  _$P_RLT02:				;AN000;
 31171 00001C42 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 31172 00001C46 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 31173 00001C4A EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 31174                                  
 31175                                  _$P_RLT00:				;AN000;
 31176 00001C4C 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 31177 00001C4E 7506                    	jne	short _$P_RLT01		;AN000;
 31178                                  
 31179 00001C50 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 31180                                  					;AN000; then store list index
 31181 00001C54 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 31182                                  
 31183                                  _$P_RLT01:				;AN000;
 31184 00001C56 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 31185 00001C58 74E8                    	je	short _$P_RLT02		;AN000;
 31186                                  
 31187 00001C5A 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 31188 00001C5C 74E4                    	je	short _$P_RLT02		;AN000;
 31189                                  
 31190 00001C5E 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 31191 00001C60 7506                    	jne	short _$P_RLT03		;AN000;
 31192                                  
 31193 00001C62 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 31194 00001C66 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 31195                                  
 31196                                  _$P_RLT03:				;AN000;
 31197 00001C68 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 31198 00001C6A 750F                    	jne	short _$P_RLT05		;AN000;
 31199                                  
 31200 00001C6C 2EA1[7E19]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 31201 00001C70 40                      	inc	ax			;AN000; skip left Parentheses
 31202 00001C71 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 31203 00001C75 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 31204 00001C79 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 31205                                  
 31206                                  _$P_RLT05:				;AN000;
 31207                                  ;------------------------  AL = 3, 5, or 9
 31208 00001C7B 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 31209                                  					;AN000; store offset of STRING_BUF
 31210 00001C7F 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 31211                                  					;AN031; store segment of STRING_BUF
 31212 00001C83 50                      	push	ax			;AN000;
 31213 00001C84 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 31214                                  					;AN000; need CAPS by file table?
 31215 00001C89 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 31216                                  
 31217 00001C8B B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 31218 00001C8D EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 31219                                  
 31220                                  _$P_RLT_CAP00:				;AN000;
 31221 00001C8F 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 31222                                  					;AN000; need CAPS by char table ?
 31223 00001C94 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 31224                                  
 31225 00001C96 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 31226                                  _$P_RLT_CAP02:				;AN000;
 31227 00001C98 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 31228                                  _$P_RLT_CAP01:				;AN000;
 31229 00001C9B 58                      	pop	ax			;AN000;
 31230 00001C9C 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 31231                                  					;AN000; removing colon at end ?
 31232 00001CA1 7403                    	jz	short _$P_RLT_Exit	;AN000;
 31233                                  
 31234 00001CA3 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 31235                                  _$P_RLT_Exit:				;AN000;
 31236 00001CA6 5F                      	pop	di			;AN000;
 31237 00001CA7 C3                      	retn				;AN000;
 31238                                  
 31239                                  ;***********************************************************************
 31240                                  ; _$P_Check_Match_Flags
 31241                                  ;
 31242                                  ; Function:  Check the mutch_flags and make the exit code and set the
 31243                                  ;	     result buffer
 31244                                  ;
 31245                                  ;	    Check for types in this order:
 31246                                  ;		Complex
 31247                                  ;		Date
 31248                                  ;		Time
 31249                                  ;		Drive
 31250                                  ;		Filespec
 31251                                  ;		Quoted String
 31252                                  ;		Simple String
 31253                                  ;
 31254                                  ; Input:     cs:SI -> _$P_STRING_BUF
 31255                                  ;	     ES:BX -> CONTROL block
 31256                                  ;
 31257                                  ; Output:    None
 31258                                  ;
 31259                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 31260                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 31261                                  ;	     _$P_Drive_Format
 31262                                  ;***********************************************************************
 31263                                  
 31264                                  	; 25/10/2022 - Retro DOS v4.0
 31265                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 31266                                  
 31267                                  	; 14/04/2024 - Retro DOS v5.0
 31268                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1FC3h)
 31269                                  
 31270                                  	; 12/12/2022
 31271                                  _$P_Check_Match_Flags:
 31272 00001CA8 2EC606[141A]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 31273                                  					;AN033;AC034;; clear filespec error flag.
 31274 00001CAE 50                      	push	ax			;AN000;
 31275                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 31276 00001CAF 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 31277 00001CB2 09C0                    	or	ax,ax			;AC035; test ax for zero
 31278 00001CB4 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 31279 00001CB6 50                      	push	ax			;AN000; (tm12)
 31280 00001CB7 53                      	push	bx			;AN000; (tm12)
 31281 00001CB8 52                      	push	dx			;AN000; (tm12)
 31282 00001CB9 57                      	push	di			;AN000; (tm12)
 31283 00001CBA 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 31284                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 31285                                  	;mov	al,_$P_String		;AN000; (tm12)
 31286                                  	; 07/07/2023
 31287 00001CC1 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 31288 00001CC4 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 31289 00001CC7 5F                      	pop	di			;AN000; (tm12)
 31290 00001CC8 5A                      	pop	dx			;AN000; (tm12)
 31291 00001CC9 5B                      	pop	bx			;AN000; (tm12)
 31292 00001CCA 58                      	pop	ax			;AN000; (tm12)
 31293                                  	; 12/12/2022
 31294                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 31295                                  	; 12/12/2022
 31296                                  ;_$P_Mat: 				;AN000; (tm12)
 31297                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 31298                                  _$P_Bridge:
 31299 00001CCB EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 31300                                  	
 31301                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31302                                  	; (SYSINIT:19F9h)
 31303                                  	; 12/12/2022
 31304                                  	;nop	; db 90h
 31305                                  
 31306                                  ; 12/12/2022
 31307                                  _$P_Mat:
 31308                                  _$P_Match03:				;AN000;
 31309                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 31310                                  	; 07/07/2023
 31311 00001CCD F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 31312 00001CD0 7412                    	jz	short _$P_Match04	;AN000;
 31313                                  
 31314 00001CD2 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31315 00001CD9 E81E01                  	call	_$P_Value		;AN000; do process
 31316 00001CDC 2E833E[7119]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 31317 00001CE2 7557                    	jne	short _$P_Match_Exit	;AN000;
 31318                                  _$P_Match04:				;AN000;
 31319                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 31320                                  	; 07/07/2023
 31321 00001CE4 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 31322 00001CE7 7412                    	jz	short _$P_Match05	;AN000;
 31323                                  
 31324 00001CE9 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31325 00001CF0 E8E300                  	call	_$P_SValue		;AN000; do process
 31326 00001CF3 2E833E[7119]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 31327 00001CF9 7540                    	jne	short _$P_Match_Exit	;AN000;
 31328                                  _$P_Match05:				;AN000;
 31329                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 31330                                  	; 07/07/2023
 31331 00001CFB F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 31332 00001CFE 7415                    	jz	short _$P_Match06	;AN000;
 31333                                  
 31334 00001D00 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31335 00001D07 E8F202                  	call	_$P_File_Format		;AN000; 1st, call file format
 31336 00001D0A E87203                  	call	_$P_Drive_Format	;AN000; check drive format, next
 31337 00001D0D 2E833E[7119]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 31338 00001D13 7526                    	jne	short _$P_Match_Exit	;AN000;
 31339                                  _$P_Match06:				;AN000;
 31340                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 31341                                  	; 07/07/2023
 31342 00001D15 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 31343 00001D18 7412                    	jz	short _$P_Match07	;AN000;
 31344                                  
 31345 00001D1A 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31346 00001D21 E8D802                  	call	_$P_File_Format		;AN000; do process
 31347 00001D24 2E833E[7119]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 31348 00001D2A 750F                    	jne	short _$P_Match_Exit	;AN000;
 31349                                  _$P_Match07:				;AN000;
 31350                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 31351                                  	; 07/07/2023
 31352 00001D2C F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 31353 00001D2F 740A                    	jz	short _$P_Match09	;AN000;
 31354                                  
 31355 00001D31 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 31356 00001D38 E8BA01                  	call	_$P_Simple_String	;AN000; do process
 31357                                  _$P_Match09:				;AN000;
 31358                                  _$P_Match_Exit:				;AN000;
 31359 00001D3B 2E833E[141A]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 31360 00001D41 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 31361 00001D43 2E833E[7119]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 31362 00001D49 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 31363 00001D4B 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 31364                                  _$P_Match2_Exit: 			;AN033;
 31365 00001D52 58                      	pop	ax			;AN000;
 31366 00001D53 C3                      	retn				;AN000;
 31367                                  
 31368                                  ;***********************************************************************
 31369                                  ; _$P_Remove_Colon;
 31370                                  ;
 31371                                  ; Function: Remove colon at end
 31372                                  ;
 31373                                  ; Input:    cs:SI points to string buffer to be examineed
 31374                                  ;
 31375                                  ; Output:   None
 31376                                  ;
 31377                                  ; Use:	_$P_Chk_DBCS
 31378                                  ;***********************************************************************
 31379                                  
 31380                                  _$P_Remove_Colon:
 31381 00001D54 50                      	push	ax			;AN000;
 31382 00001D55 56                      	push	si			;AN000;
 31383                                  _$P_RCOL_Loop:				;AN000;
 31384 00001D56 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31385 00001D59 08C0                    	or	al,al			;AN000; end of string ?
 31386 00001D5B 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 31387                                  
 31388 00001D5D 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 31389 00001D5F 750D                    	jne	short _$P_RCOL00	;AN000;
 31390                                  
 31391 00001D61 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 31392 00001D66 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 31393                                  
 31394 00001D68 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 31395 00001D6C EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 31396                                  
 31397                                  _$P_RCOL00:				;AN000;
 31398 00001D6E E80E04                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 31399 00001D71 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 31400                                  
 31401 00001D73 46                      	inc	si			;AN000; if yes, skip trailing byte
 31402                                  _$P_RCOL01:				;AN000;
 31403 00001D74 46                      	inc	si			;AN000; si points to next byte
 31404 00001D75 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 31405                                  
 31406                                  _$P_RCOL_Exit:				;AN000;
 31407 00001D77 5E                      	pop	si			;AN000;
 31408 00001D78 58                      	pop	ax			;AN000;
 31409 00001D79 C3                      	retn				;AN000;
 31410                                  
 31411                                  ;***********************************************************************
 31412                                  ; _$P_Do_CAPS_String;
 31413                                  ;
 31414                                  ; Function: Perform capitalization along with the file case map table
 31415                                  ;	    or character case map table.
 31416                                  ;
 31417                                  ; Input:    AL = 2 : Use character table
 31418                                  ;	    AL = 4 : Use file table
 31419                                  ;	    cs:SI points to string buffer to be capitalized
 31420                                  ;
 31421                                  ; Output:   None
 31422                                  ;
 31423                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 31424                                  ;***********************************************************************
 31425                                  
 31426                                  _$P_Do_CAPS_String:
 31427 00001D7A 56                      	push	si			;AN000;
 31428 00001D7B 52                      	push	dx			;AN000;
 31429 00001D7C 88C2                    	mov	dl,al			;AN000; save info id
 31430                                  
 31431                                  _$P_DCS_Loop:				;AN000;
 31432 00001D7E 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 31433 00001D81 E8FB03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 31434 00001D84 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 31435                                  
 31436 00001D86 08C0                    	or	al,al			;AN000; end of string ?
 31437 00001D88 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 31438                                  
 31439 00001D8A E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 31440 00001D8D 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 31441 00001D90 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 31442                                  _$P_DCS00:				;AN000;
 31443 00001D92 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 31444                                  _$P_DCS01:				;AN000;
 31445 00001D93 46                      	inc	si			;AN000; si point to next byte
 31446 00001D94 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 31447                                  _$P_DCS_Exit:				;AN000;
 31448 00001D96 5A                      	pop	dx			;AN000;
 31449 00001D97 5E                      	pop	si			;AN000;
 31450 00001D98 C3                      	retn
 31451                                  
 31452                                  ;***********************************************************************
 31453                                  ; _$P_Do_CAPS_Char;
 31454                                  ;
 31455                                  ; Function: Perform capitalization along with the file case map table
 31456                                  ;	    or character case map table.
 31457                                  ;
 31458                                  ; Input:    DL = 2 : Use character table
 31459                                  ;	    DL = 4 : Use file table
 31460                                  ;	    AL = character to be capitalized
 31461                                  ;
 31462                                  ; Output:   None
 31463                                  ;
 31464                                  ; Use:	INT 21h /w AH=65h
 31465                                  ;***********************************************************************
 31466                                  
 31467                                  _$P_Do_CAPS_Char:
 31468 00001D99 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 31469 00001D9B 730B                    	jae	short _$P_DCC_Go	;AN000;
 31470                                  
 31471 00001D9D 3C61                    	cmp	al,"a"                  ;AN000; if no,
 31472 00001D9F 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 31473                                  
 31474 00001DA1 3C7A                    	cmp	al,"z"                  ;AN000;
 31475 00001DA3 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 31476                                  
 31477 00001DA5 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 31478                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 31479                                  	; 07/07/2023
 31480 00001DA7 C3                      	retn
 31481                                  
 31482                                  _$P_DCC_Go:				;AN000;
 31483 00001DA8 53                      	push	bx			;AN000;
 31484 00001DA9 06                      	push	es			;AN000;
 31485 00001DAA 57                      	push	di			;AN000;
 31486                                  
 31487                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 31488                                  	;lea	di,[_$P_Char_CAP_Ptr]
 31489                                  	; 07/09/2023
 31490 00001DAB BF[061A]                	mov	di,_$P_Char_CAP_Ptr
 31491                                  _$P_DCC00:				;AN000;
 31492 00001DAE 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 31493 00001DB1 7415                    	je	short _$P_DCC01		;AN000; if no,
 31494                                  
 31495                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 31496                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 31497                                  ; call, regardless of what base register is currently be defined as cs.
 31498                                  
 31499 00001DB3 50                      	push	ax			;AN000; get CAPS table thru DOS call
 31500 00001DB4 51                      	push	cx			;AN000;
 31501 00001DB5 52                      	push	dx			;AN000;
 31502                                  
 31503 00001DB6 0E                      	push	cs			;AC036; pass current base seg into
 31504                                  					;(Note: this used to push CS.  BUG...
 31505 00001DB7 07                      	pop	es			;AN000;   ES reg, required for
 31506                                  					;get extended country information
 31507                                  	;mov	al,dl ; function	;AN000; upper case table
 31508                                  	; 07/07/2023
 31509 00001DB8 92                      	xchg	ax,dx
 31510 00001DB9 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 31511 00001DBB BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 31512 00001DBE B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 31513                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 31514                                  	; 07/07/2023
 31515 00001DC1 89DA                    	mov	dx,bx ; 0FFFFh
 31516                                  					;DI already set to point to buffer
 31517 00001DC3 CD21                    	int	21h			;AN000; es:di point to buffer that
 31518                                  					;now has been filled in with info
 31519 00001DC5 5A                      	pop	dx			;AN000;
 31520 00001DC6 59                      	pop	cx			;AN000;
 31521 00001DC7 58                      	pop	ax			;AN000;
 31522                                  
 31523                                  _$P_DCC01:				;AN000;
 31524                                  
 31525                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 31526                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 31527                                  ; regardless of which base reg is currently the cs reg.
 31528                                  
 31529                                  	; 14/04/2024
 31530                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 31531                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 31532                                  	; 07/07/2023
 31533 00001DC8 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 31534 00001DCC 43                      	inc	bx			;AC035; add '2' to
 31535 00001DCD 43                      	inc	bx			;AC035;  BX reg
 31536                                  					;AN000; skip length field
 31537 00001DCE 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 31538                                  	;xlat	es:[bx] 		;AN000; perform case map
 31539 00001DD0 26                      	es
 31540 00001DD1 D7                      	xlat
 31541 00001DD2 5F                      	pop	di			;AN000;
 31542 00001DD3 07                      	pop	es			;AN000;
 31543 00001DD4 5B                      	pop	bx			;AN000;
 31544                                  _$P_CAPS_Ret:				;AN000;
 31545 00001DD5 C3                      	retn				;AN000;
 31546                                  
 31547                                  ;***********************************************************************
 31548                                  ; _$P_Value / _$P_SValue
 31549                                  ;
 31550                                  ; Function:  Make 32bit value from cs:SI and see value list
 31551                                  ;	     and make result buffer.
 31552                                  ;	     _$P_SValue is an entry point for the signed value
 31553                                  ;	     and this will simply call _$P_Value after the handling
 31554                                  ;	     of the sign character, "+" or "-"
 31555                                  ;
 31556                                  ; Input:     cs:SI -> _$P_STRING_BUF
 31557                                  ;	     ES:BX -> CONTROL block
 31558                                  ;
 31559                                  ; Output:    None
 31560                                  ;
 31561                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 31562                                  ;
 31563                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 31564                                  ;***********************************************************************
 31565                                  
 31566                                  	; 26/10/2022 - Retro DOS v4.0
 31567                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 31568                                  
 31569                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31570                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 31571                                  _$P_SValue:				;AN000; when signed value here
 31572 00001DD6 50                      	push	ax			;AN000;
 31573 00001DD7 2E800E[7D19]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 31574 00001DDD 2E8026[7D19]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 31575                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 31576 00001DE3 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 31577 00001DE6 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 31578 00001DE8 740A                    	je	short _$P_SVal00	;AN000;
 31579                                  
 31580 00001DEA 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 31581 00001DEC 7507                    	jne	short _$P_Sval01	;AN000; else
 31582                                  
 31583 00001DEE 2E800E[7D19]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 31584                                  _$P_SVal00:				;AN000;
 31585 00001DF4 46                      	inc	si			;AN000; skip sign char
 31586                                  _$P_Sval01:				;AN000;
 31587 00001DF5 E80200                  	call	_$P_Value		;AN000; and process value
 31588 00001DF8 58                      	pop	ax			;AN000;
 31589 00001DF9 C3                      	retn
 31590                                  
 31591                                  ;***********************************************************************
 31592                                  
 31593                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31594                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 31595                                  
 31596                                  	; 26/10/2022
 31597                                  _$P_Value:				;AN000;
 31598 00001DFA 50                      	push	ax			;AN000;
 31599 00001DFB 51                      	push	cx			;AN000;
 31600 00001DFC 52                      	push	dx			;AN000;
 31601 00001DFD 56                      	push	si			;AN000;
 31602 00001DFE 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 31603 00001E00 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 31604 00001E02 53                      	push	bx			;AN000; save control pointer
 31605                                  _$P_Value_Loop:				;AN000;
 31606 00001E03 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31607 00001E06 08C0                    	or	al,al			;AN000; end of line ?
 31608 00001E08 7438                    	jz	short _$P_Value00	;AN000;
 31609                                  
 31610 00001E0A E8DC00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 31611 00001E0D 722F                    	jc	short _$P_Value_Err0	;AN000;
 31612                                  
 31613 00001E0F 30E4                    	xor	ah,ah			;AN000;
 31614 00001E11 89C5                    	mov	bp,ax			;AN000; save binary number
 31615                                  
 31616                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31617                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 31618                                  ;				Erdogan Tan - July 2023
 31619                                  %if 0
 31620                                  	shl	dx,1			;AN000; to have 2*x
 31621                                  	rcl	cx,1			;AN000; shift left w/ carry
 31622                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31623                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31624                                  
 31625                                  	mov	bx,dx			;AN000; save low(2*x)
 31626                                  	mov	ax,cx			;AN000; save high(2*x)
 31627                                  	shl	dx,1			;AN000; to have 4*x
 31628                                  	rcl	cx,1			;AN000; shift left w/ carry
 31629                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31630                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31631                                  
 31632                                  	shl	dx,1			;AN000; to have 8*x
 31633                                  	rcl	cx,1			;AN000; shift left w/ carry
 31634                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31635                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31636                                  
 31637                                  	add	dx,bx			;AN000; now have 10*x
 31638                                  	adc	cx,ax			;AN000; 32bit ADD
 31639                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31640                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31641                                  
 31642                                  	add	dx,bp			;AN000; Add the current one degree decimal
 31643                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 31644                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 31645                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 31646                                  
 31647                                  	inc	si			;AN000; update pointer
 31648                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 31649                                  ;_$P_Value_Err0:
 31650                                  %endif
 31651                                  ;****
 31652                                  %if 1
 31653                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31654                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 31655                                  
 31656                                  	; 14/04/2024 - Retro DOS v5.0
 31657                                  	;xor	ah,ah
 31658                                  	;mov	bp,ax			; save binary number
 31659                                  	
 31660 00001E13 E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 31661 00001E16 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 31662 00001E18 89C8                    	mov	ax,cx
 31663 00001E1A E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 31664 00001E1D E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 31665 00001E20 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 31666 00001E22 11C1                    	adc	cx,ax
 31667 00001E24 E80F00                  	call	_$P_Value_Chk_Add_OVF
 31668 00001E27 01EA                    	add	dx,bp			; Add the current one degree decimal
 31669                                  					; if carry, add 1 to high 16bit
 31670 00001E29 83D100                  	adc	cx,0
 31671 00001E2C E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 31672                                  					; then error, exit (without return here)
 31673 00001E2F 46                      	inc	si			; update pointer
 31674 00001E30 EBD1                    	jmp	short _$P_Value_Loop
 31675                                  
 31676                                  _$P_Value_2x_OVF:
 31677 00001E32 D1E2                    	shl	dx,1 			; to have 2*x
 31678 00001E34 D1D1                    	rcl	cx,1			; shift left w/ carry
 31679                                  _$P_Value_Chk_Add_OVF:
 31680 00001E36 E89E00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 31681 00001E39 7201                    	jc	short _$P_Value_OVF
 31682 00001E3B C3                      	retn
 31683                                  _$P_Value_OVF:
 31684 00001E3C 44                      	inc	sp 			; skip "call" return address to the caller
 31685 00001E3D 44                      	inc	sp
 31686                                  
 31687                                  ;_$P_Value_Err0:	
 31688                                  %endif
 31689                                  ;****
 31690                                  
 31691                                  _$P_Value_Err0:				;AN000;
 31692 00001E3E 5B                      	pop	bx			;AN000;
 31693 00001E3F E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 31694                                  ;
 31695                                  _$P_Value00:				;AN000;
 31696 00001E42 5B                      	pop	bx			;AN000; restore control pointer
 31697 00001E43 2EF606[7D19]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 31698 00001E49 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 31699                                  
 31700 00001E4B F7D1                    	not	cx			;AN000; +
 31701 00001E4D F7D2                    	not	dx			;AN000; |- Make 2's complement
 31702 00001E4F 83C201                  	add	dx,1			;AN000; |
 31703 00001E52 83D100                  	adc	cx,0			;AN000; +
 31704                                  
 31705                                  _$P_Value01:				;AN000; / nval = 0
 31706 00001E55 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 31707 00001E59 268A04                  	mov	al,[es:si]		;AN000; get nval
 31708                                  	; 07/09/2023
 31709                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 31710                                  	;;*jne	short _$P_Value02	;AN000;
 31711                                  	;;* 07/07/2023
 31712                                  	;je	short _$P_Value05
 31713                                  	; 07/09/2023
 31714 00001E5C 08C0                    	or	al,al
 31715 00001E5E 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 31716                                  
 31717                                  	;mov	al,_$P_Number		;AN000; Set type
 31718                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31719                                  	; 07/07/2023
 31720                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 31721                                  	;*jmp	short _$P_Value_Exit	;AN000;
 31722                                  
 31723                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 31724                                  	; (SYSINIT:1BA5h)
 31725                                  	; 12/12/2022
 31726                                  	;nop	; db  90h
 31727                                  
 31728                                  _$P_Value02:				;AN000; / nval = 1
 31729                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 31730                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 31731                                  ;(tm07) jne	short _$P_Value03	;AN000;
 31732                                  
 31733 00001E60 46                      	inc	si			;AN000;
 31734 00001E61 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 31735                                  	
 31736                                  	; 07/09/2023
 31737                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 31738                                  	;je	short _$P_Value03	;AN000; (tm07)
 31739 00001E64 08C0                    	or	al,al
 31740 00001E66 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 31741                                  
 31742 00001E68 46                      	inc	si			;AN000; si points to 1st item_tag
 31743                                  _$P_Val02_Loop:				;AN000;
 31744 00001E69 2EF606[7D19]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 31745 00001E6F 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 31746                                  
 31747 00001E71 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 31748 00001E75 7234                    	jb	short _$P_Val02_Next	;AN000;
 31749 00001E77 7706                    	ja	short _$P_Val_In	;AN000;
 31750                                  
 31751 00001E79 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 31752 00001E7D 722C                    	jb	short _$P_Val02_Next	;AN000;
 31753                                  
 31754                                  _$P_Val_In:				;AN000;
 31755 00001E7F 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 31756 00001E83 7726                    	ja	short _$P_Val02_Next	;AN000;
 31757 00001E85 7237                    	jb	short _$P_Val_Found	;AN000;
 31758                                  
 31759 00001E87 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 31760 00001E8B 771E                    	ja	short _$P_Val02_Next	;AN000;
 31761                                  
 31762 00001E8D EB2F                    	jmp	short _$P_Val_Found	;AN000;
 31763                                  
 31764                                  _$P_Val02_Sign:				;AN000;
 31765 00001E8F 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 31766 00001E93 7C16                    	jl	short _$P_Val02_Next	;AN000;
 31767 00001E95 7F06                    	jg	short _$P_SVal_In	;AN000;
 31768                                  
 31769 00001E97 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 31770 00001E9B 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 31771                                  
 31772                                  _$P_SVal_In:				;AN000;
 31773 00001E9D 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 31774 00001EA1 7F08                    	jg	short _$P_Val02_Next	;AN000;
 31775                                  
 31776 00001EA3 7C19                    	jl	short _$P_Val_Found	;AN000;
 31777                                  
 31778 00001EA5 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 31779                                  	;jg	short _$P_Val02_Next	;AN000;
 31780                                  	;jmp	short _$P_Val_Found	;AN000;
 31781                                  	; 07/07/2023
 31782 00001EA9 7E13                    	jng	short _$P_Val_Found
 31783                                  
 31784                                  _$P_Val02_Next:				;AN000;
 31785 00001EAB 83C609                  	add	si,_$P_Len_Range 	;AN000;
 31786 00001EAE FEC8                    	dec	al			;AN000; loop nrng times in AL
 31787 00001EB0 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 31788                                  					; / Not found
 31789 00001EB2 2EC706[7119]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 31790                                  	;mov	al,_$P_Number		;AN000;
 31791                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31792                                  _$P_Value05:		;* 07/07/2023
 31793                                  	; 07/07/2023
 31794 00001EB9 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 31795 00001EBC EB11                    	jmp	short _$P_Value_Exit	;AN000;
 31796                                  
 31797                                  _$P_Val_Found:				;AN000;
 31798 00001EBE B001                    	mov	al,_$P_Number		;AN000;
 31799 00001EC0 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 31800 00001EC3 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 31801                                  
 31802                                  _$P_Value03:				;AN000; / nval = 2
 31803                                  
 31804                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 31805                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 31806                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 31807                                  ;(tm07) inc	si			;AN000;
 31808                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 31809                                  ;	mov	ah,$P_Len_Range 	;AN000;
 31810                                  ;	mul	ah			;AN000;  Skip nrng field
 31811                                  ;	inc	ax			;AN000;
 31812                                  ;	add	si,ax			;AN000; si points to nnval
 31813                                  ;	mov	al,es:[si]		;AN000; get nnval
 31814                                  ;	inc	si			;AN000; si points to 1st item_tag
 31815                                  ;$P_Val03_Loop:				;AN000;
 31816                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 31817                                  ;	jne	$P_Val03_Next		;AN000;
 31818                                  ;
 31819                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 31820                                  ;	je	$P_Val_Found		;AN000;
 31821                                  ;
 31822                                  ;$P_Val03_Next:				;AN000;
 31823                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 31824                                  ;	dec	al			;AN000; loop nval times in AL
 31825                                  ;	jne	$P_Val03_Loop		;AN000;
 31826                                  ;					;AN000; / Not found
 31827                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 31828                                  ;	mov	al,$P_Number		;AN000;
 31829                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31830                                  ;	jmp	short $P_Value_Exit	;AN000;
 31831                                  ;
 31832                                  ;ENDIF					;AN000;(of Val2SW)
 31833                                  ;$P_Value04:
 31834                                  
 31835                                  _$P_Value_Err:				;AN000;
 31836 00001EC5 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 31837                                  	;mov	al,_$P_String		;AN000; Set type
 31838                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31839                                  	; 07/09/2023
 31840                                  	; 07/07/2023
 31841 00001ECC B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 31842                                  _$P_Value_Exit:				;AN000;
 31843 00001ECF E855FD                  	call	_$P_Fill_Result		;AN000;
 31844 00001ED2 5E                      	pop	si			;AN000;
 31845 00001ED3 5A                      	pop	dx			;AN000;
 31846 00001ED4 59                      	pop	cx			;AN000;
 31847 00001ED5 58                      	pop	ax			;AN000;
 31848 00001ED6 C3                      	retn				;AN000;
 31849                                  
 31850                                  ; 28/03/2019 - Retro DOS v4.0
 31851                                  
 31852                                  ;***********************************************************************
 31853                                  ; _$P_Check_OVF
 31854                                  ;
 31855                                  ; Function:  Check if overflow is occurred with consideration of
 31856                                  ;	     signed or un-signed numeric value
 31857                                  ;
 31858                                  ; Input:     Flag register
 31859                                  ;
 31860                                  ; Output:    CY = 1  :	Overflow
 31861                                  ;
 31862                                  ; Vars:     _$P_Flags(R)
 31863                                  ;***********************************************************************
 31864                                  
 31865                                  	; 26/10/2022
 31866                                  _$P_Check_OVF:
 31867 00001ED7 9C                      	pushf				;AN000;
 31868 00001ED8 2EF606[7D19]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 31869 00001EDE 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 31870                                  
 31871 00001EE0 9D                      	popf				;AN000; by the CY bit
 31872 00001EE1 C3                      	retn				;AN000;
 31873                                  
 31874                                  _$P_COVF:				;AN000;
 31875 00001EE2 9D                      	popf				;AN000; else,
 31876 00001EE3 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 31877                                  
 31878 00001EE5 F8                      	clc				;AN000; indicate it with CY bit
 31879 00001EE6 C3                      	retn				;AN000; CY=0 means no overflow
 31880                                  
 31881                                  _$P_COVF00:				;AN000;
 31882 00001EE7 F9                      	stc				;AN000; and CY=1 means overflow
 31883 00001EE8 C3                      	retn				;AN000;
 31884                                  
 31885                                  ;***********************************************************************
 31886                                  ; _$P_0099;
 31887                                  ;
 31888                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 31889                                  ;
 31890                                  ; Input:     AL = character code
 31891                                  ;
 31892                                  ; Output:    CY = 1 : AL is not number
 31893                                  ;	     CY = 0 : AL contains binary value
 31894                                  ;***********************************************************************
 31895                                  
 31896                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31897                                  %if 0
 31898                                  _$P_0099:
 31899                                  	cmp	al,"0"                  ;AN000;
 31900                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 31901                                  	; 12/12/2022
 31902                                  	jb	short _$P_0099Err2  ; cf=1
 31903                                  
 31904                                  	cmp	al,"9"                  ;AN000;
 31905                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 31906                                  
 31907                                  	sub	al,"0"                  ;AN000; make char -> bin
 31908                                  	; 12/12/2022
 31909                                  	; cf=0	
 31910                                  	;clc				;AN000; indicate no error
 31911                                  	retn				;AN000;
 31912                                  
 31913                                  _$P_0099Err:				;AN000;
 31914                                  	stc				;AN000; indicate error
 31915                                  _$P_0099Err2: ; 12/12/2022	
 31916                                  	retn				;AN000;
 31917                                  %endif
 31918                                  
 31919                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31920                                  %if 1
 31921                                  _$P_0099:
 31922 00001EE9 3C30                    	cmp	al,"0"                  ; cmp al,30h
 31923 00001EEB 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 31924 00001EED 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 31925 00001EEF F5                      	cmc				; cf=0 -> cf=1
 31926 00001EF0 7202                    	jb	short _$P_0099Err
 31927 00001EF2 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 31928                                  	; cf=0
 31929                                  _$P_0099Err:	; cf=1
 31930 00001EF4 C3                      	retn
 31931                                  %endif
 31932                                  
 31933                                  ;***********************************************************************
 31934                                  ; _$P_Simple_String
 31935                                  ;
 31936                                  ; Function:  See value list for the simple string
 31937                                  ;	     and make result buffer.
 31938                                  ;
 31939                                  ; Input:     cs:SI -> _$P_STRING_BUF
 31940                                  ;	     ES:BX -> CONTROL block
 31941                                  ;
 31942                                  ; Output:    None
 31943                                  ;
 31944                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 31945                                  ;
 31946                                  ; Vars: _$P_RC(W)
 31947                                  ;***********************************************************************
 31948                                  
 31949                                  _$P_Simple_String:
 31950 00001EF5 50                      	push	ax			;AN000;
 31951 00001EF6 53                      	push	bx			;AN000;
 31952 00001EF7 52                      	push	dx			;AN000;
 31953 00001EF8 57                      	push	di			;AN000;
 31954 00001EF9 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 31955 00001EFD 268A05                  	mov	al,[es:di]		;AN000; get nval
 31956 00001F00 08C0                    	or	al,al			;AN000; no value list ?
 31957 00001F02 7504                    	jnz	short _$P_Sim00		;AN000; then
 31958                                  
 31959 00001F04 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31960 00001F06 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 31961                                  
 31962                                  _$P_Sim00:				;AN000;
 31963                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 31964 00001F08 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 31965 00001F0A 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 31966                                  
 31967 00001F0C 47                      	inc	di			;AN000;
 31968 00001F0D 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 31969 00001F10 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 31970 00001F12 F6E4                    	mul	ah			;AN000; Skip nrng field
 31971 00001F14 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 31972 00001F15 01C7                    	add	di,ax			;AN000; di points to nnval
 31973 00001F17 268A05                  	mov	al,[es:di]		;AN000; get nnval
 31974 00001F1A B405                    	mov	ah,_$P_Len_Value 	;AN000;
 31975 00001F1C F6E4                    	mul	ah			;AN000; Skip nnval field
 31976 00001F1E 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 31977 00001F1F 01C7                    	add	di,ax			;AN000; di points to nstrval
 31978 00001F21 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 31979 00001F24 47                      	inc	di			;AC035; add '2' to
 31980 00001F25 47                      	inc	di			;AC035;  DI reg
 31981                                  					;AN000; di points to 1st string in list
 31982                                  _$P_Sim_Loop:				;AN000;
 31983 00001F26 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 31984 00001F29 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 31985 00001F2C 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 31986                                  
 31987 00001F2E 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 31988 00001F31 FEC8                    	dec	al			;AN000; loop nstval times in AL
 31989 00001F33 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 31990                                  					;AN000; / Not found
 31991 00001F35 2EC706[7119]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 31992 00001F3C B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 31993 00001F3E EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 31994                                  
 31995                                  _$P_Sim_Found:				;AN000;
 31996 00001F40 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 31997 00001F44 B002                    	mov	al,_$P_List_Idx		;AN000;
 31998 00001F46 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 31999 00001F49 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 32000                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 32001                                  _$P_Sim01:				;AN000;
 32002 00001F4B 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 32003 00001F52 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 32004                                  _$P_Sim_Exit:				;AN000;
 32005 00001F54 B003                    	mov	al,_$P_String		;AN000; Set type
 32006                                  _$P_Sim_Exit0:				;AN000;
 32007 00001F56 E8CEFC                  	call	_$P_Fill_Result		;AN000;
 32008 00001F59 5F                      	pop	di			;AN000;
 32009 00001F5A 5A                      	pop	dx			;AN000;
 32010 00001F5B 5B                      	pop	bx			;AN000;
 32011 00001F5C 58                      	pop	ax			;AN000;
 32012 00001F5D C3                      	retn				;AN000;
 32013                                  
 32014                                  ;***********************************************************************
 32015                                  ; _$P_String_Comp:
 32016                                  ;
 32017                                  ; Function:  Compare two string
 32018                                  ;
 32019                                  ; Input:     cs:SI -> 1st string
 32020                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 32021                                  ;	     ES:BX -> CONTROL block
 32022                                  ;
 32023                                  ; Output:    CY = 1 if not match
 32024                                  ;
 32025                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 32026                                  ;
 32027                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 32028                                  ;***********************************************************************
 32029                                  
 32030                                  _$P_String_Comp:
 32031 00001F5E 50                      	push	ax			;AN000;
 32032 00001F5F 55                      	push	bp			;AN000;
 32033 00001F60 52                      	push	dx			;AN000;
 32034 00001F61 56                      	push	si			;AN000;
 32035 00001F62 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 32036                                  _$P_SCOM_Loop:				;AN000;
 32037 00001F64 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 32038 00001F67 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 32039 00001F6A 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 32040                                  
 32041 00001F6C E82AFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 32042                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 32043 00001F6F 2EF606[7D19]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 32044 00001F75 740D                    	jz	short _$P_SCOM04	;AN000;
 32045                                  
 32046 00001F77 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 32047 00001F79 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 32048                                  
 32049 00001F7B 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 32050 00001F80 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 32051                                  
 32052 00001F82 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 32053                                  
 32054                                  _$P_SCOM04:				;AN000;
 32055 00001F84 2EF606[7D19]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 32056 00001F8A 740E                    	jz	short _$P_SCOM03	;AN000;
 32057                                  
 32058 00001F8C 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 32059 00001F8E 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 32060                                  
 32061                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32062                                  	;cmp	byte [es:bp+0],_$P_NULL
 32063                                  	; 11/12/2022
 32064 00001F90 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 32065 00001F95 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 32066                                  
 32067                                  _$P_SCOM05:				;AN000;   found a match
 32068 00001F97 46                      	inc	si			;AN000; si points to just after "=" or ":"
 32069 00001F98 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 32070                                  
 32071                                  _$P_SCOM03:				;AN000;
 32072                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 32073                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32074                                  	;cmp	al,[es:bp+0]
 32075                                  	; 11/12/2022
 32076 00001F9A 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 32077 00001F9E 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 32078                                  
 32079 00001FA0 08C0                    	or	al,al			;AN000; end of line
 32080 00001FA2 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 32081                                  
 32082                                  	; 12/12/2022
 32083                                  	;inc	si			;AN000; update operand pointer
 32084                                  	;inc	bp			;AN000;    and synonym pointer
 32085                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32086 00001FA4 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 32087                                  
 32088                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 32089                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32090                                  	;cmp	al,[es:bp+0]
 32091                                  	; 11/12/2022
 32092 00001FA6 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 32093 00001FAA 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 32094                                  
 32095 00001FAC 46                      	inc	si			;AN000; else, load next byte
 32096 00001FAD 2E8A04                  	mov	al,[cs:si]		;AN000; and
 32097 00001FB0 45                      	inc	bp			;AN000;
 32098                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32099                                  	;cmp	al,[es:bp+0]
 32100                                  	; 11/12/2022
 32101 00001FB1 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 32102 00001FB5 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 32103                                  
 32104                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32105                                  	; 12/12/2022
 32106                                  _$P_SCOM01:
 32107 00001FB7 46                      	inc	si			;AN000; else update operand pointer
 32108 00001FB8 45                      	inc	bp			;AN000; 		and synonym pointer
 32109                                  ;_$P_SCOM01:				;AN000;
 32110 00001FB9 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 32111                                  
 32112                                  _$P_SCOM_Differ0:			;AN000;
 32113                                  ;IF SwSW				;AN000;(tm10)
 32114 00001FBB 2EF606[7D19]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 32115 00001FC1 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 32116                                  
 32117                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32118                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 32119                                  	; 12/12/2022
 32120 00001FC3 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 32121 00001FC8 7407                    	jz	short _$P_not_applicable ;AN000;(tm10)
 32122                                  
 32123                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32124                                  	;cmp	byte [es:bp+0],_$P_NULL
 32125                                  	; 11/12/2022
 32126 00001FCA 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 32127                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 32128 00001FCF 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 32129                                  
 32130                                  _$P_not_applicable:			;AN000;(tm10)
 32131                                  ;ENDIF					;AN000;(tm10)
 32132                                  
 32133                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 32134                                  					;AN000; ignore colon option specified ?
 32135                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 32136                                  	; 12/12/2022
 32137 00001FD1 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 32138                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32139                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 32140 00001FD5 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 32141                                  
 32142 00001FD7 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 32143 00001FD9 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 32144                                  
 32145                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32146                                  	;cmp	byte [es:bp+0],_$P_NULL
 32147                                  	; 11/12/2022
 32148 00001FDB 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 32149 00001FE0 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 32150                                  
 32151 00001FE2 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 32152                                  
 32153                                  _$P_SCOM02:				;AN000;
 32154 00001FE4 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 32155 00001FE6 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 32156                                  
 32157                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32158                                  	;cmp	byte [es:bp+0],_$P_Colon
 32159                                  	; 11/12/2022
 32160 00001FE8 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 32161 00001FED 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 32162                                  
 32163                                  _$P_SCOM_Differ: 			;AN000;
 32164 00001FEF F9                      	stc				;AN000; indicate not found
 32165 00001FF0 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 32166                                  
 32167                                  _$P_SCOM_Same:				;AN000;
 32168                                  	; 12/12/2022
 32169                                  	; cf=0
 32170 00001FF2 2E8936[8019]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 32171                                  	; 12/12/2022
 32172                                  	;clc				;AN000; indicate found
 32173                                  _$P_SCOM_Exit:				;AN000;
 32174 00001FF7 5E                      	pop	si			;AN000;
 32175 00001FF8 5A                      	pop	dx			;AN000;
 32176 00001FF9 5D                      	pop	bp			;AN000;
 32177 00001FFA 58                      	pop	ax			;AN000;
 32178 00001FFB C3                      	retn
 32179                                  
 32180                                  ; 30/03/2019
 32181                                  
 32182                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 32183                                  
 32184                                  ;***********************************************************************
 32185                                  ; _$P_File_Format;
 32186                                  ;
 32187                                  ; Function:  Check if the input string is valid file spec format.
 32188                                  ;	     And set the result buffer.
 32189                                  ;
 32190                                  ; Input:     cs:SI -> _$P_STRING_BUF
 32191                                  ;	     ES:BX -> CONTROL block
 32192                                  ;
 32193                                  ; Output:    None
 32194                                  ;
 32195                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 32196                                  ;
 32197                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 32198                                  ;	_$P_SaveSI_Cmpx(R)
 32199                                  ;***********************************************************************
 32200                                  
 32201                                  _$P_File_Format:
 32202 00001FFC 50                      	push	ax			;AN000;
 32203 00001FFD 57                      	push	di			;AN000;
 32204 00001FFE 56                      	push	si			;AN000;
 32205 00001FFF 2E8B3E[7E19]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 32206                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 32207 00002004 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 32208 00002007 08C0                    	or	al,al			;AN000; end of line ?
 32209 00002009 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 32210                                  
 32211 0000200B E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 32212 0000200E 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 32213                                  
 32214 00002010 2EC606[141A]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 32215                                  					;AN033;AC034;; set error flag- bad char.
 32216 00002016 5E                      	pop	si			;AN033;
 32217 00002017 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 32218 0000201B 5F                      	pop	di			;AN033;
 32219 0000201C EB3E                    	jmp	short _$P_FileF02	;AN033;
 32220                                  
 32221                                  _$P_FileF_Err:				;AN000;
 32222 0000201E 5E                      	pop	si			;AN000;
 32223 0000201F 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 32224 00002023 5F                      	pop	di			;AN000;
 32225                                  
 32226                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 32227                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 32228                                  	; 12/12/2022
 32229 00002024 26F60701                	test	byte [es:bx],_$P_Optional
 32230                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32231                                  	;test	word [es:bx],_$P_Optional
 32232 00002028 7532                    	jnz	short _$P_FileF02	;AN000;
 32233                                  
 32234 0000202A 2EC706[7119]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 32235 00002031 EB29                    	jmp	short _$P_FileF02	;AN000;
 32236                                  
 32237                                  _$P_FileF03:				;AN000;
 32238 00002033 58                      	pop	ax			;AN000; discard save si
 32239 00002034 56                      	push	si			;AN000; save new si
 32240                                  _$P_FileF_Loop1: 			;AN000;
 32241 00002035 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 32242 00002038 08C0                    	or	al,al			;AN000; end of line ?
 32243 0000203A 741E                    	jz	short _$P_FileF_RLT	;AN000;
 32244                                  
 32245 0000203C E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 32246 0000203F 740B                    	je	short _$P_FileF00	;AN000;
 32247                                  
 32248 00002041 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 32249 00002044 7302                    	jnc	short _$P_FileF01	;AN000;
 32250 00002046 47                      	inc	di			;AN000; if yes, skip next byte
 32251 00002047 46                      	inc	si			;AN000;
 32252                                  _$P_FileF01:				;AN000;
 32253 00002048 47                      	inc	di			;AN000;
 32254 00002049 46                      	inc	si			;AN000;
 32255 0000204A EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 32256                                  ;
 32257                                  _$P_FileF00:				;AN000;
 32258 0000204C 2EA2[7719]              	mov	[cs:_$P_Terminator],al	;AC034;
 32259 00002050 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 32260 00002054 47                      	inc	di			;AN000;
 32261 00002055 2E893E[7319]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 32262                                  _$P_FileF_RLT:				;AN000;
 32263 0000205A 5E                      	pop	si			;AN000;
 32264 0000205B 5F                      	pop	di			;AN000;
 32265                                  _$P_FileF02:				;AN000;
 32266 0000205C 58                      	pop	ax			;AN000; (tm14)
 32267                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 32268                                  	; 08/07/2023
 32269 0000205D F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 32270 00002060 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 32271                                  
 32272 00002062 50                      	push	ax			;AN000; (tm14)
 32273                                  	;mov	ah,_$P_No_Tag		;AN000; set
 32274                                  	;mov	al,_$P_File_Spec 	;AN000; result
 32275                                  	; 08/07/2023
 32276 00002063 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 32277                                  					      ; set result
 32278 00002066 E8BEFB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 32279 00002069 58                      	pop	ax			;AN000;
 32280                                  
 32281                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 32282 0000206A C3                      	retn				;AN000;
 32283                                  
 32284                                  ;***********************************************************************
 32285                                  ; _$P_FileSp_Chk
 32286                                  ;
 32287                                  ; Function:  Check if the input byte is one of file special characters
 32288                                  ;
 32289                                  ; Input:     cs:SI -> _$P_STRING_BUF
 32290                                  ;	     AL = character code to be examineed
 32291                                  ;
 32292                                  ; Output:    ZF = 1 , AL is one of special characters
 32293                                  ;***********************************************************************
 32294                                  
 32295                                  _$P_FileSp_Chk:
 32296 0000206B 53                      	push	bx			;AN000;
 32297 0000206C 51                      	push	cx			;AN000;
 32298                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 32299                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 32300                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 32301                                  	; 07/09/2023
 32302 0000206D BB[0B1A]                	mov	bx,_$P_FileSp_Char
 32303 00002070 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 32304                                  _$P_FileSp_Loop: 			;AN000;
 32305 00002073 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 32306 00002076 7404                    	je	short _$P_FileSp_Exit	;AN000;
 32307                                  
 32308 00002078 43                      	inc	bx			;AN000;
 32309 00002079 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 32310                                  
 32311 0000207B 41                      	inc	cx			;AN000; reset ZF
 32312                                  _$P_FileSp_Exit: 			;AN000;
 32313 0000207C 59                      	pop	cx			;AN000;
 32314 0000207D 5B                      	pop	bx			;AN000;
 32315 0000207E C3                      	retn
 32316                                  
 32317                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 32318                                  
 32319                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 32320                                  
 32321                                  ;***********************************************************************
 32322                                  ; _$P_Drive_Format;
 32323                                  ;
 32324                                  ; Function:  Check if the input string is valid drive only format.
 32325                                  ;	     And set the result buffer.
 32326                                  ;
 32327                                  ; Input:     cs:SI -> _$P_STRING_BUF
 32328                                  ;	     ES:BX -> CONTROL block
 32329                                  ;
 32330                                  ; Output:    None
 32331                                  ;
 32332                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 32333                                  ;
 32334                                  ; Vars: _$P_RC(W)
 32335                                  ;***********************************************************************
 32336                                  
 32337                                  _$P_Drive_Format:
 32338 0000207F 50                      	push	ax			;AN000;
 32339 00002080 52                      	push	dx			;AN000;
 32340 00002081 2E8A04                  	mov	al,[cs:si]		;AN000;
 32341 00002084 08C0                    	or	al,al			;AN000; if null string
 32342 00002086 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 32343                                  
 32344 00002088 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 32345 0000208B 722A                    	jc	short _$P_Drv_Err	;AN000;
 32346                                  
 32347 0000208D 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 32348 00002092 740D                    	je	short _$P_DrvF00	;AN000;
 32349                                  
 32350                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 32351                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 32352                                  	; 12/12/2022
 32353 00002094 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 32354                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32355                                  	;test	word [es:bx],_$P_Ig_Colon
 32356 00002098 741D                    	jz	short _$P_Drv_Err	;AN000;
 32357                                  
 32358 0000209A 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 32359 0000209F 7516                    	jne	short _$P_Drv_Err	;AN000;
 32360                                  
 32361                                  _$P_DrvF00:				;AN000;
 32362 000020A1 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 32363 000020A3 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 32364 000020A5 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 32365                                  
 32366 000020A7 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 32367 000020A9 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 32368                                  
 32369 000020AB 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 32370 000020AD 88C2                    	mov	dl,al			;AN000; set
 32371                                  	;mov	ah,_$P_No_Tag		;AN000; result
 32372                                  	;mov	al,_$P_Drive		;AN000; buffer
 32373                                  	; 08/07/2023
 32374 000020AF B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 32375                                  					      ; set result buffer
 32376 000020B2 E872FB                  	call	_$P_Fill_Result		;AN000; to drive
 32377 000020B5 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 32378                                  
 32379                                  _$P_Drv_Err:				;AN000;
 32380 000020B7 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 32381                                  _$P_Drv_Exit:				;AN000;
 32382 000020BE 5A                      	pop	dx			;AN000;
 32383 000020BF 58                      	pop	ax			;AN000;
 32384 000020C0 C3                      	retn				;AN000;
 32385                                  
 32386                                  ;ENDIF					;AN000;(of DrvSW)
 32387                                  
 32388                                  ;***********************************************************************
 32389                                  ; _$P_Skip_Delim;
 32390                                  ;
 32391                                  ; Function: Skip delimiters specified in the PARMS list, white space
 32392                                  ;	    and comma.
 32393                                  ;
 32394                                  ; Input:    DS:SI -> Command String
 32395                                  ;	    ES:DI -> Parameter List
 32396                                  ;
 32397                                  ; Output:   CY = 1 if the end of line encounterd
 32398                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 32399                                  ;	    AL = Last examineed character
 32400                                  ;
 32401                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 32402                                  ;
 32403                                  ; Vars:     _$P_Flags(R)
 32404                                  ;***********************************************************************
 32405                                  
 32406                                  _$P_Skip_Delim:
 32407                                  _$P_Skip_Delim_Loop:			;AN000;
 32408 000020C1 AC                      	lodsb				;AN000;
 32409 000020C2 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 32410 000020C5 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 32411                                  
 32412 000020C7 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 32413 000020CA 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 32414                                  
 32415 000020CC 2EF606[7D19]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 32416 000020D2 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 32417                                  
 32418 000020D4 2EF606[7D19]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 32419                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 32420                                  	; 08/07/2023
 32421                                  	; cf=0
 32422 000020DA 7505                    	jnz	short _$P_Skip_Delim_Exit
 32423 000020DC C3                      	retn
 32424                                  
 32425                                  	;dec	si			;AN000; backup si for next call (tm08)
 32426                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 32427                                  	; 12/12/2022
 32428                                  	; cf=0
 32429                                  	; 08/07/2023
 32430                                  	;jmp	short _$P_Skip_Delim_Exit
 32431                                  
 32432                                  _$P_Skip_Delim_CY:			;AN000;
 32433 000020DD F9                      	stc				;AN000; indicate EOL
 32434 000020DE EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 32435                                  
 32436                                  _$P_Skip_Delim_NCY:			;AN000;
 32437 000020E0 F8                      	clc				;AN000; indicate non delim
 32438                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 32439 000020E1 4E                      	dec	si			;AN000;  backup index pointer
 32440                                  	; 08/07/2023
 32441                                  	; 12/12/2022
 32442                                  ;_$P_Exit_At_Extra:	 ; cf=0
 32443 000020E2 C3                      	retn				;AN000;
 32444                                  
 32445                                  	; 12/12/2022
 32446                                  ;_$P_Exit_At_Extra:			;AN000;
 32447                                  	;clc				;AN000; indicate extra delim
 32448                                  	;retn				;AN000;
 32449                                  
 32450                                  ;***********************************************************************
 32451                                  ; _$P_Chk_EOL;
 32452                                  ;
 32453                                  ; Function: Check if AL is one of End of Line characters.
 32454                                  ;
 32455                                  ; Input:    AL = character code
 32456                                  ;	    ES:DI -> Parameter List
 32457                                  ;
 32458                                  ; Output:   ZF = 1 if one of End of Line characters
 32459                                  ;**********************************************************************
 32460                                  
 32461                                  _$P_Chk_EOL:
 32462 000020E3 53                      	push	bx			;AN000;
 32463 000020E4 51                      	push	cx			;AN000;
 32464 000020E5 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 32465 000020E7 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 32466 000020E9 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 32467 000020EB 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 32468                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 32469 000020ED 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 32470 000020EF 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 32471                                  ;ENDIF					;AN028;
 32472 000020F1 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 32473                                  					;AN000; EOL character specified ?
 32474 000020F6 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 32475 000020F8 31DB                    	xor	bx,bx			;AN000;
 32476 000020FA 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 32477                                  					;AN000; get length of delimiter list
 32478 000020FE 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 32479                                  	; 08/07/2023
 32480 00002101 31C9                    	xor	cx,cx ; *
 32481 00002103 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 32482 00002107 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 32483                                  	; 08/07/2023
 32484                                  	;;xor	cx,cx			;AN000; Get number of extra character
 32485                                  	;xor	ch,ch ; *
 32486 00002109 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 32487                                  _$P_Chk_EOL_Loop:			;AN000;
 32488 0000210C 43                      	inc	bx			;AN000;
 32489 0000210D 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 32490 00002110 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 32491 00002112 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 32492                                  	; 08/07/2023
 32493                                  	; cx=0
 32494                                  _$P_Chk_EOL_NZ:				;AN000;
 32495                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 32496                                  	; 08/07/2023
 32497 00002114 41                      	inc	cx  ; zf=0  (cx=1) ; *
 32498                                  _$P_Chk_EOL_Exit:			;AN000;
 32499 00002115 59                      	pop	cx			;AN000;
 32500 00002116 5B                      	pop	bx			;AN000;
 32501 00002117 C3                      	retn
 32502                                  
 32503                                  ;***********************************************************************
 32504                                  ; _$P_Chk_Delim;
 32505                                  ;
 32506                                  ; Function: Check if AL is one of delimiter characters.
 32507                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 32508                                  ;	    blanks.
 32509                                  ;
 32510                                  ; Input:    AL = character code
 32511                                  ;	    DS:SI -> Next Character
 32512                                  ;	    ES:DI -> Parameter List
 32513                                  ;
 32514                                  ; Output:   ZF = 1 if one of delimiter characters
 32515                                  ;	    SI points to the next character
 32516                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 32517                                  ;***********************************************************************
 32518                                  
 32519                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32520                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 32521                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 32522                                  
 32523                                  _$P_Chk_Delim:
 32524 00002118 53                      	push	bx			;AN000;
 32525 00002119 51                      	push	cx			;AN000;
 32526 0000211A 2EC606[7719]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 32527                                  					;AC034; Assume terminated by space
 32528                                  	;and	byte [cs:_$P_Flags20,0DFh
 32529 00002120 2E8026[7D19]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 32530 00002126 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 32531 00002128 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 32532                                  
 32533 0000212A 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 32534 0000212C 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 32535                                  
 32536 0000212E 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 32537 00002130 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 32538                                  
 32539                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 32540                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 32541                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32542                                  ;_$P_Chk_Delim00:
 32543                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 32544                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 32545                                  %if 0
 32546                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32547                                  _$P_Chk_Delim00: 			;AN000;
 32548                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 32549                                  	jne	short _$P_Chk_Delim01	;AN000;
 32550                                  
 32551                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 32552                                  	jne	short _$P_Chk_Delim01	;AN000;
 32553                                  
 32554                                  	mov	al,_$P_Space		;AN000;
 32555                                  	inc	si			;AN000; make si point to next character
 32556                                  	cmp	al,al			;AN000; Set ZF
 32557                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 32558                                  %endif
 32559                                  
 32560                                  _$P_Chk_Delim01: 			;AN000;
 32561 00002132 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 32562                                  					;AN000; delimiter character specified ?
 32563 00002137 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 32564                                  
 32565                                  	;xor	cx,cx			;AN000;
 32566 00002139 30ED                    	xor	ch,ch
 32567                                  	;mov	cl,[es:di+3]
 32568 0000213B 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 32569                                  					;AN000; get length of delimiter list
 32570                                  	;or	cx,cx			;AN000; No extra Delim character ?
 32571                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 32572                                  	; 08/07/2023
 32573 0000213F E30B                    	jcxz	_$P_Chk_Delim_NZ
 32574                                  
 32575 00002141 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 32576                                  _$P_Chk_Delim_Loop:			;AN000;
 32577 00002144 43                      	inc	bx			;AN000;
 32578 00002145 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 32579 00002148 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 32580                                  
 32581 0000214A E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 32582                                  
 32583                                  _$P_Chk_Delim_NZ:			;AN000;
 32584                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 32585                                  	; 08/07/2023
 32586                                  	; cx=0 here
 32587 0000214C 41                      	inc	cx ; cx=1, zf=0
 32588                                  _$P_Chk_Delim_Exit:			;AN000;
 32589                                  _$P_ChkDfin:				;AN000;
 32590 0000214D 59                      	pop	cx			;AN000;
 32591 0000214E 5B                      	pop	bx			;AN000;
 32592 0000214F C3                      	retn				;AN000;
 32593                                  
 32594                                  _$P_Chk_Delim_Exit0:			;AN000;
 32595 00002150 2EA2[7719]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 32596 00002154 2EF606[7D19]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 32597 0000215A 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 32598                                  
 32599 0000215C 2E800E[7D19]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 32600                                  					;AC034; flag terminated extra delimiter or comma
 32601                                  _$P_No_Set_Extra:			;AN027;
 32602 00002162 38C0                    	cmp	al,al			;AN000; set ZF
 32603 00002164 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 32604                                  
 32605                                  ;***********************************************************************
 32606                                  ; _$P_Chk_Switch;
 32607                                  ;
 32608                                  ; Function: Check if AL is the switch character not in first position of
 32609                                  ;	    _$P_STRING_BUF
 32610                                  ;
 32611                                  ; Input:    AL = character code
 32612                                  ;	    BX = current pointer within _$P_String_Buf
 32613                                  ;	    SI =>next char on command line (following the one in AL)
 32614                                  ;
 32615                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 32616                                  ;		 position, and has no chance of being part of a date string,
 32617                                  ;		 i.e. should be treated as a delimiter.
 32618                                  
 32619                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 32620                                  ;		 position, or is a slash but may be part of a date string, i.e.
 32621                                  ;		 should not be treated as a delimiter.
 32622                                  ;
 32623                                  ; Vars:  _$P_Terminator(W)
 32624                                  
 32625                                  ; Use:	 _$P_0099
 32626                                  ;***********************************************************************
 32627                                  
 32628                                  _$P_Chk_Switch:
 32629                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 32630                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 32631                                  	; 08/07/2023
 32632 00002166 BD[8619]                	mov	bp,_$P_STRING_BUF
 32633                                  
 32634                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 32635 00002169 39EB                    	cmp	bx,bp			;AN000;
 32636 0000216B 7406                    	je	short _$P_STRUC_L2	;AN000;
 32637                                  
 32638                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 32639 0000216D 3C2F                    	cmp	al,_$P_Switch		;AN000;
 32640 0000216F 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 32641                                  
 32642 00002171 F9                      	stc				;AN020;not in first position and is slash
 32643                                  	;jmp     short _$P_STRUC_L1	;AN000;
 32644                                  	; 12/12/2022
 32645 00002172 C3                      	retn
 32646                                  
 32647                                  ; 12/12/2022
 32648                                  ;_$P_STRUC_L5:				;AN000;
 32649                                  ;	CLC				;AN020;not a slash
 32650                                  ;;	    .ENDIF			;AN020;
 32651                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 32652                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 32653                                  
 32654                                  _$P_STRUC_L2:				;AN000;
 32655                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 32656 00002173 3C2F                    	cmp     al,_$P_Switch		;AN000;
 32657 00002175 7506                    	jne	short _$P_STRUC_L12	;AN000;
 32658                                  
 32659 00002177 2E800E[7D19]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 32660                                  ;	.ENDIF				;AN020;
 32661                                  
 32662                                  	; 12/12/2022
 32663                                  	; cf=0
 32664                                  	;retn
 32665                                  
 32666                                  _$P_STRUC_L5:
 32667                                  	; 12/12/2022
 32668                                  _$P_STRUC_L12:				;AN000;
 32669 0000217D F8                      	clc				;AN020;CF=0 indicating first char
 32670                                  ;	.ENDIF				;AN020;
 32671                                  _$P_STRUC_L1:				;AN000;
 32672 0000217E C3                      	retn				;AN000;
 32673                                  
 32674                                  ;**************************************************************************
 32675                                  ; _$P_Chk_DBCS:
 32676                                  ;
 32677                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 32678                                  ;
 32679                                  ;  Input:
 32680                                  ;	  AL	= Code to be examineed
 32681                                  ;
 32682                                  ;  Output:
 32683                                  ;	  If CF is on then a lead byte of DBCS
 32684                                  ;
 32685                                  ; Use: INT 21h w/AH=63
 32686                                  ;
 32687                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 32688                                  ;***************************************************************************
 32689                                  
 32690                                  _$P_Chk_DBCS:
 32691 0000217F 1E                      	push	ds			;AN000;
 32692 00002180 56                      	push	si			;AN000;
 32693 00002181 53                      	push	bx			;AN000; (tm11)
 32694                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 32695                                  	;jne	short _$P_DBCS00	;AN000;
 32696                                  	; 08/07/2023
 32697 00002182 2E8B36[7A19]            	mov	si,[cs:_$P_DBCSEV_SEG]
 32698 00002187 21F6                    	and	si,si ; 0 ?
 32699 00002189 7525                    	jnz	short _$P_DBCS00 ; already set
 32700 0000218B 50                      	push	ax			;AN000;
 32701 0000218C 1E                      	push	ds			;AN000; (tm11)
 32702 0000218D 51                      	push	cx			;AN000;
 32703 0000218E 52                      	push	dx			;AN000;
 32704 0000218F 57                      	push	di			;AN000;
 32705 00002190 55                      	push	bp			;AN000;
 32706 00002191 06                      	push	es			;AN000;
 32707                                  	; si = 0 ; 08/07/2023
 32708                                  	;xor	si,si			;AN000;
 32709 00002192 8EDE                    	mov	ds,si ; 0		;AN000;
 32710 00002194 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 32711 00002197 CD21                    	int	21h			;AN000;
 32712                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 32713 00002199 8CDB                    	mov	bx,ds			;AN000; (tm11)
 32714 0000219B 09DB                    	or	bx,bx			;AN000; (tm11)
 32715 0000219D 07                      	pop	es			;AN000;
 32716 0000219E 5D                      	pop	bp			;AN000;
 32717 0000219F 5F                      	pop	di			;AN000;
 32718 000021A0 5A                      	pop	dx			;AN000;
 32719 000021A1 59                      	pop	cx			;AN000;
 32720 000021A2 1F                      	pop	ds			;AN000; (tm11)
 32721 000021A3 58                      	pop	ax			;AN000;
 32722 000021A4 7424                    	jz	short _$P_NON_DBCS	;AN000;
 32723                                  _$P_DBCS02:				;AN000;
 32724 000021A6 2E8936[7819]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 32725 000021AB 2E891E[7A19]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 32726                                  _$P_DBCS00:				;AN000;
 32727                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 32728                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 32729                                  	; 08/07/2023
 32730 000021B0 2EC536[7819]            	lds	si,[cs:_$P_DBCSEV_OFF]
 32731                                  _$P_DBCS_LOOP:				;AN000;
 32732 000021B5 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 32733 000021B8 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 32734 000021BA 3A04                    	cmp	al,[si] 		;AN000;
 32735 000021BC 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 32736 000021BE 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 32737 000021C1 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 32738 000021C3 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 32739 000021C4 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 32740                                  _$P_DBCS01:				;AN000;
 32741 000021C6 46                      	inc	si			;AC035; add '2' to
 32742 000021C7 46                      	inc	si			;AC035;  SI reg
 32743                                  					;AN000; get next vector
 32744 000021C8 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 32745                                  _$P_NON_DBCS:				;AN000;
 32746                                  	; 12/12/2022
 32747                                  	; cf=0
 32748                                  	;clc				;AN000; indicate SBCS
 32749                                  _$P_DBCS_EXIT:				;AN000;
 32750 000021CA 5B                      	pop	bx			;AN000; (tm11)
 32751 000021CB 5E                      	pop	si			;AN000;
 32752 000021CC 1F                      	pop	ds			;AN000;
 32753 000021CD C3                      	retn				;AN000;
 32754                                  
 32755                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 32756                                  ; ======================================================================
 32757                                  ; 27/03/2019 - Retro DOS v4.0
 32758                                  
 32759                                  ;control block definitions for parser.
 32760                                  ;-----------------------------------------------------------------------
 32761                                  ; buffer = [n | n,m] {/e}
 32762                                  
 32763                                  ; 30/03/2019
 32764                                  
 32765                                  struc p_parms
 32766 00000000 ????                    	resw	1	; dw ?
 32767 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 32768 00000003 ??                      	resb	1	; db 1	; length is 1
 32769 00000004 ??                      	resb 	1	; db ';' ; delimiter
 32770                                  .size:
 32771                                  endstruc
 32772                                  
 32773                                  struc p_pos
 32774 00000000 ????                    	resw	1	; dw ?	; numeric value??
 32775 00000002 ????                    	resw	1	; dw ?	; function
 32776 00000004 ????                    	resw	1	; dw ?	; result value buffer
 32777                                  
 32778                                  ; note: by defining result_val before this structure, we could remove
 32779                                  ;  the "result_val" from every structure invocation
 32780                                  
 32781 00000006 ????                    	resw	1	; dw ?	; value list
 32782 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 32783                                  .size:
 32784                                  endstruc
 32785                                  
 32786                                  struc	p_range
 32787 00000000 ??                      	resb	1	; db 1	; range definition
 32788 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 32789 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 32790 00000003 ????????                	resd	1	; dd ?	; numeric min
 32791 00000007 ????????                	resd	1	; dd ?	; numeric max
 32792                                  .size:
 32793                                  endstruc
 32794                                  
 32795                                  ;-----------------------------------------------------------------------
 32796                                  
 32797                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32798                                  	; (SYSINIT:1F48h)
 32799                                  
 32800                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32801                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 32802                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 32803                                  
 32804                                  ; buffer = [n | n,m] {/e}
 32805                                  
 32806                                  ;buf_parms p_parms <buf_parmsx>
 32807                                  buf_parms: 
 32808 000021CE [D321]                  	dw	buf_parmsx
 32809 000021D0 01                      	db	1	; an extra delimiter list
 32810 000021D1 01                      	db	1	; length is 1
 32811 000021D2 3B                      	db	';'	; delimiter
 32812                                  
 32813                                  buf_parmsx:
 32814 000021D3 0102[DD21][F121]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 32815 000021D9 01                      	db	1			; one switch
 32816 000021DA [0522]                  	dw	sw_x_ctrl
 32817 000021DC 00                      	db	0			; no keywords
 32818                                  
 32819                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 32820                                  buf_pos1:
 32821 000021DD 0080                    	dw	8000h	; numeric value??
 32822 000021DF 0000                    	dw	0	; function
 32823 000021E1 [1722]                  	dw	result_val ; result value buffer	
 32824 000021E3 [E621]                  	dw	buf_range_1 ; value list
 32825 000021E5 00                      	db	0  	; no switches/keywords
 32826                                  
 32827                                  ;buf_range_1 p_range <,,,1,99>		; M050
 32828                                  buf_range_1:
 32829 000021E6 01                      	db	1	; range definition
 32830 000021E7 01                      	db	1	; 1 definition of range
 32831 000021E8 01                      	db	1	; item tag for this range
 32832 000021E9 01000000                	dd	1	; numeric min
 32833 000021ED 63000000                	dd	99	; numeric max
 32834                                  
 32835                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 32836                                  buf_pos2:
 32837 000021F1 0180                    	dw	8001h
 32838 000021F3 0000                    	dw	0
 32839 000021F5 [1722]                  	dw	result_val	
 32840 000021F7 [FA21]                  	dw	buf_range_2
 32841 000021F9 00                      	db	0
 32842                                  
 32843                                  ;buf_range_2 p_range <,,,0,8>
 32844                                  buf_range_2:
 32845 000021FA 01                      	db	1
 32846 000021FB 01                      	db	1
 32847 000021FC 01                      	db	1
 32848 000021FD 00000000                	dd	0
 32849 00002201 08000000                	dd	8
 32850                                  
 32851                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 32852                                  sw_x_ctrl:
 32853 00002205 0000                    	dw	0
 32854 00002207 0000                    	dw	0
 32855 00002209 [1722]                  	dw	result_val	
 32856 0000220B [1622]                  	dw	noval
 32857 0000220D 01                      	db	1	; 1 switch
 32858                                  	
 32859                                  switch_x:
 32860 0000220E 2F5800                  	db	'/X',0		; M016
 32861                                  
 32862                                  p_buffers:
 32863 00002211 0000                    	dw	0	; local variables
 32864                                  p_h_buffers:
 32865 00002213 0000                    	dw	0
 32866                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32867                                  p_buffer_slash_x:
 32868 00002215 00                      	db	0 ; 31/03/2019
 32869                                  
 32870                                  ;-- common definitions -------------------------------------------------
 32871                                  
 32872 00002216 00                      noval:	db	0
 32873                                  
 32874                                  result_val: 	;label	byte
 32875 00002217 00                      	db	0		; type returned
 32876                                  result_val_itag:
 32877 00002218 00                      	db	0		; item tag returned
 32878                                  result_val_swoff:
 32879 00002219 0000                    	dw	0		; es:offset of the switch defined
 32880                                  rv_byte:	;label	byte
 32881 0000221B 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 32882                                  
 32883                                  ;-----------------------------------------------------------------------
 32884                                  
 32885                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32886                                  	; (SYSINIT:1F99h)
 32887                                  
 32888                                  ; break = [ on | off ]
 32889                                  
 32890                                  ;brk_parms p_parms  <brk_parmsx>
 32891                                  brk_parms:
 32892 0000221F [2422]                  	dw	brk_parmsx
 32893 00002221 01                      	db	1	; an extra delimiter list
 32894 00002222 01                      	db	1	; length is 1
 32895 00002223 3B                      	db	';'	; delimiter
 32896                                  
 32897                                  brk_parmsx:
 32898 00002224 0101[2A22]              	dw	101h,brk_pos	; min,max = 1 positional
 32899 00002228 00                      	db	0		; no switches
 32900 00002229 00                      	db	0		; no keywords
 32901                                  
 32902                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 32903                                  brk_pos:
 32904 0000222A 0020                    	dw	2000h
 32905 0000222C 0000                    	dw	0
 32906 0000222E [1722]                  	dw	result_val	
 32907 00002230 [3322]                  	dw	on_off_string
 32908 00002232 00                      	db	0
 32909                                  
 32910                                  on_off_string:	;label	byte
 32911 00002233 03                      	db	3		; signals that there is a string choice
 32912 00002234 00                      	db	0		; no range definition
 32913 00002235 00                      	db	0		; no numeric values choice
 32914 00002236 02                      	db	2		; 2 strings for choice
 32915 00002237 01                      	db	1		; the 1st string tag
 32916 00002238 [3D22]                  	dw	on_string
 32917 0000223A 02                      	db	2		; the 2nd string tag
 32918 0000223B [4022]                  	dw	off_string
 32919                                  
 32920                                  on_string:
 32921 0000223D 4F4E00                  	db	"ON",0
 32922                                  off_string:
 32923 00002240 4F464600                	db	"OFF",0
 32924                                  
 32925                                  p_ctrl_break:
 32926 00002244 00                      	db	0	; local variable
 32927                                  
 32928                                  ;-----------------------------------------------------------------------
 32929                                  
 32930                                  	; 27/10/2022
 32931                                  
 32932                                  ; country = n {m {path}}
 32933                                  ; or
 32934                                  ; country = n,,path
 32935                                  
 32936                                  ;cntry_parms p_parms <cntry_parmsx>
 32937                                  cntry_parms:
 32938 00002245 [4A22]                  	dw	cntry_parmsx
 32939 00002247 01                      	db	1
 32940 00002248 01                      	db	1
 32941 00002249 3B                      	db	';'
 32942                                  	
 32943                                  cntry_parmsx:
 32944 0000224A 0103[5422][6822]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 32944 00002250 [7122]             
 32945 00002252 00                      	db	0		; no switches
 32946 00002253 00                      	db	0		; no keywords
 32947                                  
 32948                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 32949                                  cntry_pos1:
 32950 00002254 0080                    	dw	8000h
 32951 00002256 0000                    	dw	0
 32952 00002258 [1722]                  	dw	result_val	
 32953 0000225A [5D22]                  	dw	cc_range
 32954 0000225C 00                      	db	0
 32955                                  
 32956                                  ;cc_range p_range <,,,1,999>
 32957                                  cc_range:
 32958 0000225D 01                      	db	1
 32959 0000225E 01                      	db	1
 32960 0000225F 01                      	db	1
 32961 00002260 01000000                	dd	1
 32962 00002264 E7030000                	dd	999
 32963                                  
 32964                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 32965                                  cntry_pos2:
 32966 00002268 0180                    	dw	8001h
 32967 0000226A 0000                    	dw	0
 32968 0000226C [1722]                  	dw	result_val	
 32969 0000226E [5D22]                  	dw	cc_range
 32970 00002270 00                      	db	0
 32971                                  
 32972                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 32973                                  cntry_pos3:
 32974 00002271 0102                    	dw	201h
 32975 00002273 0000                    	dw	0
 32976 00002275 [1722]                  	dw	result_val	
 32977 00002277 [1622]                  	dw	noval
 32978 00002279 00                      	db	0	
 32979                                  
 32980                                  p_cntry_code:
 32981 0000227A 0000                    	dw	0	; local variable
 32982                                  p_code_page:
 32983 0000227C 0000                    	dw	0	; local variable
 32984                                  
 32985                                  ;-----------------------------------------------------------------------
 32986                                  
 32987                                  	; 27/10/2022
 32988                                  
 32989                                  ; files = n
 32990                                  
 32991                                  ;files_parms p_parms <files_parmsx>
 32992                                  files_parms:
 32993 0000227E [8322]                  	dw	files_parmsx
 32994 00002280 01                      	db	1
 32995 00002281 01                      	db	1
 32996 00002282 3B                      	db	';'
 32997                                  
 32998                                  files_parmsx:
 32999 00002283 0101[8922]              	dw	101h,files_pos	; min,max 1 positional
 33000 00002287 00                      	db	0		; no switches
 33001 00002288 00                      	db	0		; no keywords
 33002                                  
 33003                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 33004                                  files_pos:
 33005 00002289 0080                    	dw	8000h
 33006 0000228B 0000                    	dw	0
 33007 0000228D [1722]                  	dw	result_val	
 33008 0000228F [9222]                  	dw	files_range
 33009 00002291 00                      	db	0
 33010                                  
 33011                                  ;files_range p_range <,,,8,255>
 33012                                  files_range:
 33013 00002292 01                      	db	1
 33014 00002293 01                      	db	1
 33015 00002294 01                      	db	1
 33016 00002295 08000000                	dd	8
 33017 00002299 FF000000                	dd	255
 33018                                  
 33019                                  p_files:
 33020 0000229D 00                      	db	0		; local variable
 33021                                  
 33022                                  ;-----------------------------------------------------------------------
 33023                                  
 33024                                  	; 27/10/2022
 33025                                  
 33026                                  ; fcbs = n,m
 33027                                  
 33028                                  ;fcbs_parms p_parms <fcbs_parmsx>
 33029                                  fcbs_parms:
 33030 0000229E [A322]                  	dw	fcbs_parmsx
 33031 000022A0 01                      	db	1
 33032 000022A1 01                      	db	1
 33033 000022A2 3B                      	db	';'
 33034                                  
 33035                                  fcbs_parmsx:
 33036 000022A3 0102[AB22][BF22]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 33037 000022A9 00                      	db	0		; no switches
 33038 000022AA 00                      	db	0		; no keywords
 33039                                  
 33040                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 33041                                  fcbs_pos_1:
 33042 000022AB 0080                    	dw	8000h
 33043 000022AD 0000                    	dw	0
 33044 000022AF [1722]                  	dw	result_val	
 33045 000022B1 [B422]                  	dw	fcbs_range
 33046 000022B3 00                      	db	0
 33047                                  
 33048                                  ;fcbs_range p_range <,,,1,255>
 33049                                  fcbs_range:
 33050 000022B4 01                      	db	1
 33051 000022B5 01                      	db	1
 33052 000022B6 01                      	db	1
 33053 000022B7 01000000                	dd	1
 33054 000022BB FF000000                	dd	255
 33055                                  
 33056                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 33057                                  fcbs_pos_2:
 33058 000022BF 0080                    	dw	8000h
 33059 000022C1 0000                    	dw	0
 33060 000022C3 [1722]                  	dw	result_val	
 33061 000022C5 [C822]                  	dw	fcbs_keep_range
 33062 000022C7 00                      	db	0
 33063                                  
 33064                                  ;fcbs_keep_range p_range <,,,0,255>
 33065                                  fcbs_keep_range:
 33066 000022C8 01                      	db	1
 33067 000022C9 01                      	db	1
 33068 000022CA 01                      	db	1
 33069 000022CB 00000000                	dd	0
 33070 000022CF FF000000                	dd	255
 33071                                  
 33072 000022D3 00                      p_fcbs:	db	0		; local variable
 33073 000022D4 00                      p_keep:	db	0		; local variable
 33074                                  
 33075                                  ;-----------------------------------------------------------------------
 33076                                  
 33077                                  	; 27/10/2022
 33078                                  
 33079                                  ; lastdrive = x
 33080                                  
 33081                                  ;ldrv_parms p_parms <ldrv_parmsx>
 33082                                  ldrv_parms:
 33083 000022D5 [DA22]                  	dw	ldrv_parmsx
 33084 000022D7 01                      	db	1
 33085 000022D8 01                      	db	1
 33086 000022D9 3B                      	db	';'
 33087                                  
 33088                                  ldrv_parmsx:
 33089 000022DA 0101[E022]              	dw	101h,ldrv_pos	; min,max = 1 positional
 33090 000022DE 00                      	db	0		; no switches
 33091 000022DF 00                      	db	0		; no keywords
 33092                                  
 33093                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 33094                                  ldrv_pos:				    ; remove colon at end
 33095 000022E0 1001                    	dw	110h
 33096 000022E2 1000                    	dw	10h
 33097 000022E4 [1722]                  	dw	result_val	
 33098 000022E6 [1622]                  	dw	noval
 33099 000022E8 00                      	db	0
 33100                                  	
 33101 000022E9 00                      p_ldrv:	db	0		; local variable
 33102                                  
 33103                                  ;-----------------------------------------------------------------------
 33104                                  
 33105                                  	; 27/10/2022
 33106                                  
 33107                                  ; stacks = n,m
 33108                                  
 33109                                  ;stks_parms p_parms <stks_parmsx>
 33110                                  stks_parms:
 33111 000022EA [EF22]                  	dw	stks_parmsx
 33112 000022EC 01                      	db	1
 33113 000022ED 01                      	db	1
 33114 000022EE 3B                      	db	';'
 33115                                  
 33116                                  stks_parmsx:
 33117 000022EF 0202[F722][0B23]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 33118 000022F5 00                      	db	0		; no switches
 33119 000022F6 00                      	db	0		; no keywords
 33120                                  
 33121                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 33122                                  stks_pos_1:
 33123 000022F7 0080                    	dw	8000h
 33124 000022F9 0000                    	dw	0
 33125 000022FB [1722]                  	dw	result_val	
 33126 000022FD [0023]                  	dw	stks_range
 33127 000022FF 00                      	db	0
 33128                                  
 33129                                  ;stks_range p_range <,,,0,64>
 33130                                  stks_range:
 33131 00002300 01                      	db	1
 33132 00002301 01                      	db	1
 33133 00002302 01                      	db	1
 33134 00002303 00000000                	dd	0
 33135 00002307 40000000                	dd	64
 33136                                  
 33137                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 33138                                  stks_pos_2:
 33139 0000230B 0080                    	dw	8000h
 33140 0000230D 0000                    	dw	0
 33141 0000230F [1722]                  	dw	result_val	
 33142 00002311 [1423]                  	dw	stk_size_range
 33143 00002313 00                      	db	0
 33144                                  
 33145                                  ;stk_size_range p_range <,,,0,512>
 33146                                  stk_size_range:
 33147 00002314 01                      	db	1
 33148 00002315 01                      	db	1
 33149 00002316 01                      	db	1
 33150 00002317 00000000                	dd	0
 33151 0000231B 00020000                	dd	512	
 33152                                  
 33153                                  p_stack_count:
 33154 0000231F 0000                    	dw	0	; local variable
 33155                                  p_stack_size:
 33156 00002321 0000                    	dw	0	; local variable
 33157                                  
 33158                                  ;-----------------------------------------------------------------------
 33159                                  
 33160                                  	; 27/10/2022
 33161                                  
 33162                                  ; multitrack = [ on | off ]
 33163                                  
 33164                                  ;mtrk_parms p_parms <mtrk_parmsx>
 33165                                  mtrk_parms:
 33166 00002323 [2823]                  	dw	mtrk_parmsx
 33167 00002325 01                      	db	1
 33168 00002326 01                      	db	1
 33169 00002327 3B                      	db	';'
 33170                                  
 33171                                  mtrk_parmsx:
 33172 00002328 0101[2E23]              	dw	101h,mtrk_pos	; min,max = 1 positional
 33173 0000232C 00                      	db	0		; no switches
 33174 0000232D 00                      	db	0		; no keywords
 33175                                  
 33176                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 33177                                  mtrk_pos:
 33178 0000232E 0020                    	dw	2000h
 33179 00002330 0000                    	dw	0
 33180 00002332 [1722]                  	dw	result_val	
 33181 00002334 [3322]                  	dw	on_off_string
 33182 00002336 00                      	db	0
 33183                                  
 33184 00002337 00                      p_mtrk:	db	0		; local variable
 33185                                  
 33186                                  ;-----------------------------------------------------------------------
 33187                                  
 33188                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33189                                  	; (SYSINIT:20B2h)
 33190                                  
 33191                                  ; switches=/k
 33192                                  
 33193                                  ;swit_parms p_parms <swit_parmsx>
 33194                                  swit_parms:
 33195 00002338 [3D23]                  	dw	swit_parmsx
 33196 0000233A 01                      	db	1
 33197 0000233B 01                      	db	1
 33198 0000233C 3B                      	db	';'
 33199                                  
 33200                                  swit_parmsx:
 33201 0000233D 0000                    	dw	0		; no positionals
 33202                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 33203                                  	;db	5               ; # of switches
 33204                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 33205 0000233F 06                      	db	6
 33206                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 33207                                  	;db	3
 33208 00002340 [4D23]                  	dw	swit_k_ctrl	; /k control
 33209                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 33210 00002342 [5923]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 33211 00002344 [6523]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 33212 00002346 [7123]                  	dw	swit_t_ctrl     ; /t control
 33213 00002348 [7D23]                  	dw	swit_w_ctrl     ; /w control
 33214                                  	; 14/04/2024 - Retro DOS v5.0 ; **
 33215 0000234A [8923]                  	dw	swit_i_ctrl	; /i control
 33216 0000234C 00                      	db	0		; no keywords
 33217                                  
 33218                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 33219                                  swit_k_ctrl:
 33220 0000234D 00000000[1722]-         	dw	0,0,result_val,noval
 33220 00002353 [1622]             
 33221 00002355 01                      	db	1
 33222 00002356 2F4B00                  swit_k:	db	'/K',0
 33223                                  
 33224                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 33225                                  ; (SYSINIT:220Ch) ; *
 33226                                  
 33227                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 33228                                  ;
 33229                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 33230                                  swit_n_ctrl: ; *
 33231 00002359 00000000[1722]-         	dw	0,0,result_val,noval
 33231 0000235F [1622]             
 33232 00002361 01                      	db	1
 33233 00002362 2F4E00                  swit_n: db	'/N',0
 33234                                  
 33235                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 33236                                  swit_f_ctrl: ; *
 33237 00002365 00000000[1722]-         	dw	0,0,result_val,noval
 33237 0000236B [1622]             
 33238 0000236D 01                      	db	1
 33239 0000236E 2F4600                  swit_f: db 	'/F',0
 33240                                  
 33241                                  	; 27/10/2022
 33242                                  
 33243                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 33244                                  swit_t_ctrl:
 33245 00002371 00000000[1722]-         	dw	0,0,result_val,noval
 33245 00002377 [1622]             
 33246 00002379 01                      	db	1
 33247 0000237A 2F5400                  swit_t:	db	'/T',0			   ;				M059
 33248                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 33249                                  swit_w_ctrl:
 33250 0000237D 00000000[1722]-         	dw	0,0,result_val,noval
 33250 00002383 [1622]             
 33251 00002385 01                      	db	1
 33252 00002386 2F5700                  swit_w:	db	'/W',0			   ;				M063
 33253                                  
 33254                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 33255                                  ;;;
 33256                                  ;swit_i_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 33257                                  swit_i_ctrl:
 33258 00002389 0000                    	dw	0
 33259 0000238B 0000                    	dw	0
 33260 0000238D [1722]                  	dw	result_val
 33261 0000238F [1622]                  	dw	noval
 33262 00002391 01                      	db	1
 33263 00002392 2F4900                  swit_i:	db	'/I',0
 33264                                  ;;;
 33265                                  
 33266                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 33267                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 33268                                  ;   in the above table to prevent the parsing code from complaining about them
 33269                                  
 33270 00002395 00                      p_swit_k:	db     0	; local variable
 33271 00002396 00                      p_swit_t:	db     0	; local variable			M059
 33272 00002397 00                      p_swit_w:	db     0	; local variable			M063
 33273                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 33274 00002398 00                      p_swit_i:	db     0
 33275                                  
 33276                                  ;-----------------------------------------------------------------------
 33277                                  
 33278                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33279                                  	; (SYSINIT:20E8h)
 33280                                  
 33281                                  ; DOS = [ high | low ]
 33282                                  
 33283                                  ;dos_parms p_parms  <dos_parmsx>
 33284                                  dos_parms:
 33285 00002399 [9E23]                  	dw	dos_parmsx
 33286 0000239B 01                      	db	1
 33287 0000239C 01                      	db	1
 33288 0000239D 3B                      	db	';'
 33289                                  dos_parmsx:
 33290 0000239E 01                      	db	1		; min parameters
 33291 0000239F 02                      	db	2		; max parameters
 33292 000023A0 [A623]                  	dw	dos_pos		; 
 33293 000023A2 [A623]                  	dw	dos_pos		; 
 33294 000023A4 00                      	db	0		; no switches
 33295 000023A5 00                      	db	0		; no keywords
 33296                                  
 33297                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 33298                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 33299                                  dos_pos:
 33300 000023A6 00200000[1722]-         	dw	2000h,0,result_val,dos_strings
 33300 000023AC [B823]             
 33301 000023AE 00                      	db	0
 33302 000023AF 00200000[1722]-         	dw	2000h,0,result_val,dos_strings
 33302 000023B5 [B823]             
 33303 000023B7 00                      	db	0	
 33304                                  
 33305                                  dos_strings:	;label	byte
 33306 000023B8 03                      	db	3		; signals that there is a string choice
 33307 000023B9 00                      	db	0		; no range definition
 33308 000023BA 00                      	db	0		; no numeric values choice
 33309 000023BB 04                      	db	4		; 4 strings for choice
 33310 000023BC 01                      	db	1		; the 1st string tag
 33311 000023BD [E623]                  	dw	hi_string
 33312 000023BF 02                      	db	2		; the 2nd string tag
 33313 000023C0 [EB23]                  	dw	lo_string
 33314 000023C2 03                      	db	3
 33315 000023C3 [EF23]                  	dw	umb_string
 33316 000023C5 04                      	db	4
 33317 000023C6 [F323]                  	dw	noumb_string
 33318                                  
 33319                                  ; 14/04/2024 - Retro DOS v5.0
 33320                                  ; (PCDOS 7.1 IBMDOS.COM - SYSINIT:273Eh)
 33321                                  ;;;
 33322                                  dosdata_parms:
 33323 000023C8 [CD23]                  	dw	dosdata_parmsx	; DOSDATA = UMB|NOUMB
 33324 000023CA 01                      	db	1
 33325 000023CB 01                      	db	1
 33326 000023CC 3B                      	db	';'
 33327                                  dosdata_parmsx:
 33328 000023CD 01                      	db	1
 33329 000023CE 01                      	db	1		; min,max = 1 positional
 33330 000023CF [D323]                  	dw	dosdata_pos
 33331 000023D1 00                      	db	0		; no switches
 33332 000023D2 00                      	db	0		; no keywords
 33333                                  
 33334                                  	; dosdata_pos p_pos <2000h,0,result_val,dosdata_strings>
 33335                                  dosdata_pos:
 33336 000023D3 0020                    	dw	2000h		; simple string
 33337 000023D5 0000                    	dw	0
 33338 000023D7 [1722]                  	dw	result_val
 33339 000023D9 [DC23]                  	dw	dosdata_strings
 33340 000023DB 00                      	db	0
 33341                                  dosdata_strings:
 33342 000023DC 03                      	db	3		; signals that there is a string choice
 33343 000023DD 00                      	db	0		; no range definition
 33344 000023DE 00                      	db	0		; no numeric values choice
 33345 000023DF 02                      	db	2		; 2 strings for choice
 33346 000023E0 01                      	db	1		; the 1st string tag
 33347 000023E1 [EF23]                  	dw	umb_string	; "UMB"
 33348 000023E3 02                      	db	2		; the 2nd string tag
 33349 000023E4 [F323]                  	dw	noumb_string	; "NOUMB"
 33350                                  ;;;
 33351                                  
 33352 000023E6 4849474800              hi_string:	db	"HIGH",0
 33353 000023EB 4C4F5700                lo_string:	db	"LOW",0
 33354 000023EF 554D4200                umb_string:	db	"UMB",0
 33355 000023F3 4E4F554D4200            noumb_string:	db	"NOUMB",0
 33356                                  
 33357                                  p_dos_hi:
 33358 000023F9 00                      	db	0	; local variable
 33359                                  			; BUGBUG : I dont know whether PARSER uses
 33360                                  			;          this variable or not
 33361                                  	; 14/04/2024 (PCDOS 7.1 IBMBIO.COM)
 33362 000023FA 00                      	db	0
 33363                                  
 33364                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33365                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33366                                  ;%if 0
 33367                                  
 33368                                  ;****************************************************************** RICHID ****
 33369                                  
 33370                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 33371                                  
 33372                                  ; 30/03/2019 - Retro DOS v4.0
 33373                                  ;------------------------------------------------------------------------------
 33374                                  
 33375                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 33376                                  ;
 33377                                  ;   Date:     May 14, 1992
 33378                                  ;
 33379                                  ;******************************************************************************
 33380                                  ;
 33381                                  ;   Modification log:
 33382                                  ;
 33383                                  ;     DATE    WHO      DESCRIPTION
 33384                                  ;   --------  -------  --------------------------------------------------------
 33385                                  ;   05/14/92  t-richj  Original
 33386                                  ;   06/21/92  t-richj  Final revisions before check-in
 33387                                  ;
 33388                                  ;******************************************************************************
 33389                                  ;
 33390                                  ; There are two primary definitions which need to be made, selectively, before
 33391                                  ; this include file should be used.  These are:
 33392                                  ;    HV_Extern - If this has been defined, variables for this module will be
 33393                                  ;                declared as external.  Otherwise, variables will be declared
 33394                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 33395                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 33396                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 33397                                  ;                (as only one module, sysconf.asm, includes this file).
 33398                                  ;    HV_LoadHigh - This should be defined when this module is going into
 33399                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 33400                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 33401                                  ;
 33402                                  ;******************************************************************************
 33403                                  
 33404                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 33405                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 33406                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 33407                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 33408                                  ; space problem (it's just such a nice round number, eh?).
 33409                                  
 33410                                  MAXUMB	equ	16
 33411                                  
 33412                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 33413                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 33414                                  
 33415                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 33416                                  SystemPSPOwner	equ	8
 33417                                  ;JapanPSPOwner	equ	9
 33418                                  
 33419                                  ; for LoadHigh and DeviceHigh:
 33420                                  ;
 33421                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 33422                                  ;	          UnHideUMBs().
 33423                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 33424                                  ;	           line.
 33425                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 33426                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 33427                                  ;	          given a command-line like "/L:3,500;4"
 33428                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 33429                                  ;	          matching its index number was specified on the command-line;
 33430                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 33431                                  ;	          will be set to 1.  All others will be set to 0.
 33432                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 33433                                  ;	          specified by the user for a UMB (in the above example, all
 33434                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 33435                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 33436                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 33437                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 33438                                  ;	           for details).
 33439                                  
 33440 000023FB 00                      fInHigh:  db	0
 33441 000023FC 00                      fUmbTiny: db	0
 33442 000023FD 0000                    SegLoad:  dw	0
 33443 000023FF 00                      UmbLoad:  db	0
 33444 00002400 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 33445 00002410 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 33446 00002430 00                      fm_umb:   db	0
 33447 00002431 00                      fm_strat: db	0
 33448 00002432 00                      fm_argc:  db	0	
 33449                                  
 33450                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 33451                                  ; UmbLoad is set to the UMB number given.
 33452                                  
 33453                                  UNSPECIFIED	equ	-1
 33454                                  
 33455                                  ;%endif ; 27/10/2022
 33456                                  
 33457                                  ;****************************************************************** RICHID ****
 33458                                  
 33459                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 33460                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 33461                                  
 33462                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33463                                  ; (SYSINIT:212Bh)	
 33464                                  
 33465                                  		;public	DevEntry
 33466                                  
 33467 00002433 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 33468 00002435 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 33469 00002437 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 33470 00002439 00000000                DevEntry:	dd	0	; Entry point to the device driver
 33471 0000243D 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 33472                                  ; 30/12/2022
 33473                                  ; 27/10/2022 
 33474 00002441 00                      ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 33475                                  ;
 33476 00002442 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 33477 00002443 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 33478 00002445 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 33479 00002447 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 33480                                  ;
 33481 00002449 00000000                DevXMSAddr:	dd	0
 33482                                  ;
 33483 0000244D 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 33484 0000244F 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 33485                                  ;
 33486 00002451 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 33487                                  				;  is being loaded into UMB
 33488 00002452 0000                    DevSizeOption:	dw	0	; SIZE= option
 33489                                  ;
 33490 00002454 00                      Int12Lied:	db	0	; did we trap int 12 ?
 33491 00002455 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 33492 00002457 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 33493                                  ;
 33494 0000245F 00                      FirstUMBLinked:	db	0
 33495 00002460 0000                    DevDOSData:	dw	0	; segment of DOS Data
 33496 00002462 00000000                DevCmdLine:	dd	0	; Current Command line
 33497 00002466 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 33498                                  				; to use the file name in the command line
 33499                                  ; 13/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 33500                                  ;	ifdef	dblspace_hooks
 33501 00002467 00                      MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 33502                                  ;	endif
 33503                                  
 33504                                  ; ===========================================================================
 33505                                  
 33506                                  ; 31/03/2019 - Retro DOS v4.0
 33507                                  
 33508                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33509                                  ; (SYSINIT:215Eh)
 33510                                  
 33511                                  ;----------------------------------------------------------------------------
 33512                                  ;
 33513                                  ; procedure : doconf
 33514                                  ;
 33515                                  ;             Config file is parsed initially with this routine. For the
 33516                                  ;             Subsequent passes 'multi_pass' entry is used .
 33517                                  ;
 33518                                  ;----------------------------------------------------------------------------
 33519                                  
 33520                                  	; 27/10/2022
 33521                                  doconf:
 33522 00002468 0E                      	push	cs
 33523 00002469 1F                      	pop	ds
 33524                                  
 33525 0000246A B80037                  	mov	ax,3700h
 33526                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 33527 0000246D CD21                    	int	21h
 33528 0000246F 8816[BC4B]              	mov	[command_line+1],dl	; set in default command line
 33529                                  
 33530                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 33531                                  ; 27/10/2022
 33532                                  ;;ifdef	MULTI_CONFIG
 33533                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 33534 00002473 8816[BA4B]              	mov	[def_swchr],dl ; 31/03/2019 
 33535                                  ;;endif	;MULTI_CONFIG
 33536                                  
 33537 00002477 BA[D14A]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 33538 0000247A B8003D                  	mov	ax,3D00h
 33539                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 33540 0000247D F9                      	stc				;in case of int 24
 33541 0000247E CD21                    	int	21h			;function request
 33542 00002480 7309                    	jnc	short noprob		; brif opened okay
 33543                                  
 33544                                  ; 31/12/2022
 33545                                  ; 27/10/2022
 33546                                  ;;ifdef	MULTI_CONFIG
 33547 00002482 E8A019                  	call	kbd_read		; we still want to give the guy
 33548                                  ;					; a chance to select clean boot!
 33549                                  ;;endif					; (ie, no autoexec.bat processing)
 33550 00002485 C606[CD02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 33551 0000248A C3                      	retn
 33552                                  noprob: 				;get file size (note < 64k!!)
 33553 0000248B 89C3                    	mov	bx,ax  ; File handle
 33554 0000248D 31C9                    	xor	cx,cx			; 0
 33555 0000248F 31D2                    	xor	dx,dx			; 0
 33556                                  	;mov	ax,4202h
 33557 00002491 B80242                  	mov	ax,(LSEEK<<8)|2
 33558 00002494 CD21                    	int	21h
 33559 00002496 A3[5603]                	mov	[count],ax		; dx:ax = file size ; 08/09/2023
 33560                                  					; 08/09/2023 - Erdogan Tan - Note:
 33561 00002499 31D2                    	xor	dx,dx			; dx already must be 0 here ; 08/09/2023
 33562                                  					; I am not removing 'xor dx,dx' here
 33563                                  					; for MSDOS compatibility.
 33564                                  					; ((Also PCDOS 7.1 has 'xor dx,dx' here))
 33565                                  					; (Error will be same if CONGIG.SYS file
 33566                                  					;  size > 64KB) 
 33567                                  	;mov	ax,4200h
 33568 0000249B B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 33569 0000249E CD21                    	int	21h
 33570                                  
 33571                                  	; 31/12/2022 - Retro DOS v4.2 
 33572 000024A0 8B16[A502]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 33573                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33574                                  	;mov	dx,[top_of_cdss] 
 33575                                  
 33576 000024A4 A1[5603]                	mov	ax,[count]
 33577 000024A7 A3[D002]                	mov	[config_size],ax	;save the size of config.sys file.
 33578 000024AA E868EE                  	call	ParaRound
 33579 000024AD 29C2                    	sub	dx,ax
 33580                                  
 33581                                  ; 31/12/2022
 33582                                  ; 27/10/2022
 33583                                  ;ifdef	MULTI_CONFIG
 33584                                  ;
 33585                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 33586                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 33587                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 33588                                  ;  we (may) add a variable to the environment that does not explicity appear
 33589                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 33590                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 33591                                  ;  of extra space, so here we account for it (the worst case of course is
 33592                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 33593                                  ;
 33594 000024AF 4A                      	dec	dx                      ;reserve 1 additional paragraph
 33595 000024B0 8916[6219]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 33596 000024B4 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 33597                                  ;;endif	;MULTI_CONFIG
 33598                                  
 33599 000024B6 83EA11                  	sub	dx,11h			;room for header
 33600                                  	
 33601                                  	; 31/12/2022
 33602 000024B9 8916[A502]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 33603 000024BD 8916[A302]              	mov	[CONFBOT],dx
 33604                                  	
 33605                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33606                                  	;mov	[top_of_cdss],dx
 33607                                  	;call    TempCDS 
 33608                                  	; 31/12/2022
 33609                                  	; 11/12/2022
 33610                                  	; ds <> cs 
 33611                                  	;mov	dx,[cs:top_of_cdss]
 33612                                  
 33613                                  	; 08/09/2023
 33614                                  	; ds = cs
 33615 000024C1 8B0E[5603]              	mov	cx,[count]
 33616                                  	
 33617 000024C5 8EDA                    	mov	ds,dx
 33618 000024C7 8EC2                    	mov	es,dx
 33619                                  
 33620 000024C9 31D2                    	xor	dx,dx
 33621                                  	; 08/09/2023
 33622                                  	;mov	cx,[cs:count]
 33623 000024CB B43F                    	mov	ah,3Fh
 33624                                  	;mov	ah,READ  ; 3Fh
 33625 000024CD F9                      	stc				;in case of int 24
 33626 000024CE CD21                    	int	21h			;function request
 33627 000024D0 9C                      	pushf
 33628                                  
 33629                                  ; find the eof mark in the file. if present,then trim length.
 33630                                  
 33631 000024D1 50                      	push	ax
 33632 000024D2 57                      	push	di
 33633 000024D3 51                      	push	cx
 33634 000024D4 B01A                    	mov	al,1Ah			; eof mark
 33635 000024D6 89D7                    	mov	di,dx			; point to buffer
 33636 000024D8 E305                    	jcxz	puteol			; no chars
 33637 000024DA F2AE                    	repnz	scasb			; find end
 33638 000024DC 7501                    	jnz	short puteol		; none found and count exhausted
 33639                                  
 33640                                  ; we found a 1a. back up
 33641                                  
 33642 000024DE 4F                      	dec	di			; backup past 1Ah
 33643                                  
 33644                                  ;  just for the halibut, stick in an extra eol
 33645                                  
 33646                                  puteol:
 33647 000024DF B00D                    	mov	al,cr ; 0Dh
 33648 000024E1 AA                      	stosb
 33649 000024E2 B00A                    	mov	al,lf  ;0Ah
 33650 000024E4 AA                      	stosb
 33651 000024E5 29D7                    	sub	di,dx			; difference moved
 33652                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33653                                  	;mov	[cs:count],di		; new count
 33654                                  
 33655                                  	; 11/12/2022	
 33656                                  	; 31/03/2019 - Retro DOS v4.0
 33657 000024E7 0E                      	push	cs
 33658 000024E8 1F                      	pop	ds
 33659                                  
 33660 000024E9 893E[5603]              	mov	[count],di		; new count
 33661                                  
 33662 000024ED 59                      	pop	cx
 33663 000024EE 5F                      	pop	di
 33664 000024EF 58                      	pop	ax
 33665                                  
 33666                                  	; 11/12/2022
 33667                                  	; 27/10/2022
 33668                                  	;push	cs
 33669                                  	;pop	ds
 33670                                  
 33671 000024F0 50                      	push	ax
 33672                                  	;mov	ah,CLOSE
 33673 000024F1 B43E                    	mov	ah,3Eh
 33674 000024F3 CD21                    	int	21h
 33675 000024F5 58                      	pop	ax
 33676 000024F6 9D                      	popf
 33677 000024F7 7204                    	jc	short conferr 		;if not we've got a problem
 33678 000024F9 39C1                    	cmp	cx,ax
 33679 000024FB 742C                    	jz	short getcom		;couldn't read the file
 33680                                  conferr:
 33681 000024FD BA[D14A]                	mov	dx,config		;want to print config error
 33682 00002500 E82525                  	call	badfil
 33683                                  	; 14/04/2024
 33684                                  endconv:	; 01/01/2023
 33685 00002503 C3                      	retn
 33686                                  
 33687                                  ;----------------------------------------------------------------------------
 33688                                  ;
 33689                                  ; entry : multi_pass
 33690                                  ;
 33691                                  ;             called to execute device=,install= commands
 33692                                  ;
 33693                                  ;----------------------------------------------------------------------------
 33694                                  
 33695                                  	; 27/10/2022
 33696                                  multi_pass:
 33697 00002504 0E                      	push	cs
 33698 00002505 1F                      	pop	ds
 33699                                  
 33700 00002506 803E[CD02]0A            	cmp	byte [multi_pass_id],10
 33701                                  ;jae_endconv:
 33702 0000250B 73F6                    	jae	short endconv 		; do nothing. just return.
 33703                                  
 33704                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33705 0000250D FF36[A302]              	push	word [CONFBOT]
 33706                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33707                                  	;push	word [top_of_cdss]
 33708 00002511 07                      	pop	es			; es -> confbot
 33709                                  
 33710 00002512 8B36[5803]              	mov	si,[org_count]
 33711 00002516 8936[5603]              	mov	[count],si		; set count
 33712 0000251A 31F6                    	xor	si,si ; 0
 33713 0000251C 8936[5A03]                      mov     [chrptr],si		; reset chrptr
 33714 00002520 8936[AF02]                      mov     [linecount],si		; reset linecount
 33715                                  
 33716 00002524 E88822                  	call	getchr
 33717 00002527 EB06                    	jmp	short conflp
 33718                                  
 33719                                  	; 14/04/2024
 33720                                  	; 01/01/2023
 33721                                  ;endconv:
 33722                                  	;retn	
 33723                                  
 33724                                  getcom:
 33725                                  	; 03/01/2023
 33726                                  	; ds = cs
 33727 00002529 E8C016                          call    organize                ; organize the file
 33728 0000252C E88022                  	call	getchr
 33729                                  conflp: 
 33730 0000252F 72D2                    	jc	short endconv
 33731                                  
 33732 00002531 FF06[AF02]                      inc     word [linecount]	; increase linecount
 33733                                  
 33734                                  	; 08/09/2023
 33735 00002535 30E4                    	xor	ah,ah ; 0
 33736                                  	;mov	byte [multdeviceflag],0	; reset multdeviceflag.
 33737                                  	;mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 33738 00002537 8826[6619]              	mov	[multdeviceflag],ah ; 0
 33739 0000253B 8826[6919]              	mov	[setdevmarkflag],ah ; 0
 33740                                  
 33741 0000253F 3C0A                    	cmp	al,lf			; linefeed?
 33742 00002541 7448                    	je	short blank_line	;  then ignore this line.
 33743                                  
 33744                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33745                                  ; (SYSINIT:23CCh)
 33746                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33747                                  ;%if 0
 33748                                  
 33749                                  ;ifdef	MULTI_CONFIG
 33750                                  
 33751                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 33752                                  ;   number immediately following it....
 33753                                  
 33754 00002543 A2[6419]                        mov     [config_cmd],al         ; save original command code
 33755                                  	;and	al,NOT CONFIG_OPTION_QUERY
 33756 00002546 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 33757                                  
 33758                                  	; 08/09/2023
 33759 00002548 3826[6519]              	cmp	[config_multi],ah ; 0
 33760                                  	;cmp	byte [config_multi],0	; is this a multi-config config.sys?
 33761 0000254C 7427                            je      short not_final		; no, line number is not embedded
 33762                                  
 33763 0000254E 50                              push    ax                      ;
 33764 0000254F E85D22                          call    getchr                  ; ignore end-of-image errors,
 33765 00002552 88C4                            mov     ah,al                   ; because if there's an error
 33766 00002554 E85822                          call    getchr                  ; fetching the line number that's
 33767 00002557 86C4                            xchg    al,ah                   ; supposed to be there, the next
 33768 00002559 A3[AF02]                        mov     [linecount],ax          ; getchr call will get the same error
 33769 0000255C 58                              pop     ax
 33770                                  ;
 33771                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 33772                                  ;   which to obtain its original program name, it grovels through all of
 33773                                  ;   memory to find the filename that was used to exec it; it wants to find
 33774                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 33775                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 33776                                  ;   immediately before the filename, but since we are now storing line # info
 33777                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 33778                                  ;   spot.
 33779                                  ;
 33780                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 33781                                  ;   over the line number info, since we no longer need that info anyway. This
 33782                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 33783                                  ;   retrieved.
 33784                                  ;
 33785 0000255D 803E[CD02]02                    cmp	byte [multi_pass_id],2	; final pass?
 33786 00002562 7211                            jb	short not_final		; no
 33787                                          ;test	word [install_flag],have_install_cmd
 33788 00002564 F606[CE02]01            	test	byte [install_flag],have_install_cmd ; 1
 33789 00002569 7407                            jz	short final		; no install cmds, so yes it is
 33790 0000256B 803E[CD02]03                    cmp	byte [multi_pass_id],3	; final pass?
 33791 00002570 7203                            jb	short not_final		; no
 33792                                  final:                                  ;
 33793 00002572 268804                  	mov	[es:si],al		; save backward-compatible command code
 33794                                  not_final:                              ;
 33795                                  ;endif
 33796                                  
 33797                                  ; 31/12/2022
 33798                                  ;%endif ; 27/10/2022
 33799                                  
 33800 00002575 88C4                    	mov	ah,al
 33801 00002577 E83522                  	call	getchr
 33802 0000257A 7314                    	jnc	short tryi
 33803                                  
 33804 0000257C 803E[CD02]02            	cmp	byte [multi_pass_id],2
 33805                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 33806                                  	; 27/10/2022
 33807 00002581 7380                    	jnb	short endconv	
 33808 00002583 E90009                  	jmp	badop
 33809                                  	
 33810                                  coff:	
 33811                                  	; 11/12/2022
 33812                                  	; ds = cs
 33813                                  	;push	cs
 33814                                  	;pop	ds
 33815 00002586 E81D22                  	call	newline
 33816 00002589 EBA4                    	jmp	short conflp	; 13/05/2019
 33817                                  
 33818                                  blank_line:
 33819 0000258B E82122                  	call	getchr
 33820 0000258E EB9F                    	jmp	short conflp
 33821                                  
 33822                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33823                                  ; 11/12/2022
 33824                                  ; (there is not a jump or call to here from anywhere!)
 33825                                  ;coff_p:
 33826                                  	;push	cs
 33827                                  	;pop	ds
 33828                                  
 33829                                  ;to handle install= commands,we are going to use multi-pass.
 33830                                  ;the first pass handles the other commands and only set install_flag when
 33831                                  ;it finds any install command. the second pass will only handle the
 33832                                  ;install= command.
 33833                                  
 33834                                  ;------------------------------------------------------------------------------
 33835                                  ;install command
 33836                                  ;------------------------------------------------------------------------------
 33837                                  
 33838                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33839                                  	; (SYSINIT:2250h)
 33840                                  tryi:
 33841 00002590 803E[CD02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 33842 00002595 7503                    	jne	short not_init_pass
 33843 00002597 E97F01                  	jmp	multi_try_doshi
 33844                                  not_init_pass:
 33845 0000259A 803E[CD02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 33846                                          ; 11/12/2022
 33847                                  	;je	short multi_pass_coff2	; now it is NOPs
 33848 0000259F 74E5                    	je	short coff
 33849                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33850                                  	;je	short multi_pass_coff	
 33851                                  					; This pass can be made use of if
 33852                                  					; we want do some config.sys process
 33853                                  					; after device drivers are loaded
 33854                                  					; and before install= commands
 33855                                  					; are processed
 33856                                  
 33857 000025A1 803E[CD02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 33858 000025A6 741D                    	je	short multi_try_i
 33859 000025A8 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 33860                                  	; 11/12/2022
 33861                                  	;je	short multi_pass_coff2
 33862 000025AB 74D9                    	je	short coff
 33863                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33864                                  	;je	short multi_pass_coff	
 33865                                  
 33866                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 33867                                  ;       but don't process them now.        
 33868                                          
 33869 000025AD 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 33870                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33871 000025B0 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 33872                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33873                                  	;jne	short tryb	
 33874                                  	
 33875                                  	;or	word [install_flag],have_install_cmd ; set the flag
 33876 000025B2 800E[CE02]01            	or	byte [install_flag],have_install_cmd ; 1
 33877                                  multi_pass_coff2:
 33878 000025B7 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 33879                                  
 33880                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33881                                  ; (SYSINIT:2448h)
 33882                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33883                                  ;%if 0
 33884                                  precheck_installhigh:
 33885 000025B9 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 33886 000025BC 756B                    	jne     short tryb		; carry on with normal processing
 33887                                  	;or	word [install_flag],have_install_cmd
 33888 000025BE 800E[CE02]01            	or	byte [install_flag],have_install_cmd ; 1
 33889 000025C3 EBC1                    	jmp	short coff
 33890                                  ;%endif ; 27/10/2022
 33891                                  
 33892                                  multi_try_i:
 33893 000025C5 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 33894                                  	; 31/12/2022 - Retro DOS v4.2
 33895 000025C8 750A                    	jne	short multi_try_n	; no, check for installhigh
 33896                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33897                                  	;jne	short multi_pass_filter
 33898                                  
 33899                                  ; 31/12/2022
 33900                                  ;%if 1 
 33901                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33902                                  ;%if 0
 33903                                  ;ifdef	MULTI_CONFIG
 33904 000025CA E84F20                  	call	query_user              ; query the user if config_cmd
 33905 000025CD 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 33906                                  ;endif
 33907                                  ;%endif ; 27/10/2022
 33908                                  
 33909 000025CF E8C7EC                  	call	do_install_exec 	;install it.
 33910 000025D2 EBB2                    	jmp	short coff		;to handle next install= command.
 33911                                  
 33912                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33913                                  ; (SYSINIT:2463h)
 33914                                  ;%if 1
 33915                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33916                                  ;%if 0
 33917                                  
 33918                                  multi_try_n:
 33919 000025D4 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 33920 000025D7 7537                            jne	short multi_pass_filter	; no. ignore this.
 33921                                  ;ifdef	MULTI_CONFIG
 33922 000025D9 E84020                          call    query_user              ; query the user if config_cmd
 33923 000025DC 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 33924                                  ;endif
 33925                                  
 33926                                  ;       The memory environment is in its normal DOS state, so do
 33927                                  ;       the standard calls to set the alloc strategy for loading high
 33928                                  
 33929 000025DE B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 33930 000025E1 CD21                    	int	21h			;get alloc strategy
 33931 000025E3 89C3                    	mov	bx,ax
 33932 000025E5 53                              push    bx                      ; save for the return
 33933                                  
 33934 000025E6 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 33935 000025EA B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 33936 000025ED CD21                    	int	21h			;set alloc strategy
 33937                                  
 33938 000025EF B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 33939 000025F2 CD21                            int     21h                     ; get link state
 33940 000025F4 30E4                            xor     ah,ah                   ; clear top byte
 33941 000025F6 50                              push    ax                      ; save for return
 33942                                  
 33943 000025F7 B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 33944 000025FA BB0100                  	mov	bx,1
 33945 000025FD CD21                    	int	21h			;link in UMBs
 33946                                  
 33947 000025FF E897EC                  	call	do_install_exec 	;install it.
 33948                                  
 33949 00002602 B80358                          mov     ax,(ALLOCOPER<<8)|3
 33950 00002605 5B                              pop     bx                      ; recover original link state
 33951 00002606 CD21                            int     21h
 33952 00002608 5B                              pop     bx                      ; recover original alloc strategy
 33953 00002609 B80158                          mov     ax,(ALLOCOPER<<8)|1
 33954 0000260C CD21                            int     21h
 33955                                  
 33956                                  	;jmp	short coff		;to handle next install= command.
 33957                                  	; 01/01/2023
 33958 0000260E EBA7                    	jmp	short multi_pass_coff2
 33959                                  
 33960                                  ;%endif ; 27/10/2022
 33961                                  
 33962                                  multi_pass_filter:
 33963 00002610 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 33964 00002613 740A                    	je	short multi_pass_adjust
 33965 00002615 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 33966 00002618 7405                    	je	short multi_pass_adjust
 33967 0000261A 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 33968 0000261D 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 33969                                  
 33970                                  multi_pass_adjust:			; these commands need to
 33971 0000261F FF0E[5A03]              	dec	word [chrptr]		;  adjust chrptr,count
 33972 00002623 FF06[5603]              	inc	word [count]		;  for newline proc.
 33973                                  
 33974                                  multi_pass_coff:
 33975                                  	; 11/12/2022
 33976                                  	;jmp	short coff		; to handle next install= commands.
 33977                                  	; 01/01/2023
 33978 00002627 EB8E                    	jmp	short multi_pass_coff2
 33979                                  
 33980                                  ;------------------------------------------------------------------------------
 33981                                  ; buffer command
 33982                                  ;------------------------------------------------------------------------------
 33983                                  
 33984                                  ;******************************************************************************
 33985                                  ;									      *
 33986                                  ; function: parse the parameters of buffers= command.			      *
 33987                                  ;									      *
 33988                                  ; input :								      *
 33989                                  ;	es:si -> parameters in command line.				      *
 33990                                  ; output:								      *
 33991                                  ;	buffers set							      *
 33992                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 33993                                  ;	h_buffers set if secondary buffer cache specified.		      *
 33994                                  ;									      *
 33995                                  ; subroutines to be called:						      *
 33996                                  ;	sysinit_parse							      *
 33997                                  ; logic:								      *
 33998                                  ; {									      *
 33999                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 34000                                  ;	set dx,cx to 0; 						      *
 34001                                  ;	reset buffer_slash_x;						      *
 34002                                  ;	while (end of command line)					      *
 34003                                  ;	{ sysinit_parse;						      *
 34004                                  ;	  if (no error) then						      *
 34005                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 34006                                  ;		    buffer_slash_x = 1					      *
 34007                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 34008                                  ;			  buffers = result_val._$P_picked_val;		      *
 34009                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 34010                                  ;	  else	{show error message;error exit} 			      *
 34011                                  ;	};								      *
 34012                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 34013                                  ; };									      *
 34014                                  ;									      *
 34015                                  ;******************************************************************************
 34016                                  
 34017                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34018                                  	; (SYSINIT:229Ch)
 34019                                  tryb:
 34020 00002629 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 34021 0000262C 755C                    	jne	short tryc
 34022                                  
 34023                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34024                                  ; (SYSINIT:24BFh)
 34025                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34026                                  ;%if 0
 34027                                  ;ifdef	MULTI_CONFIG
 34028 0000262E E8EB1F                  	call	query_user		; query the user if config_cmd
 34029 00002631 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 34030                                  ;endif
 34031                                  ;%endif ; 27/10/2022
 34032                                  
 34033                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34034                                  	; 18/12/2022
 34035 00002633 31C9                    	xor	cx,cx
 34036                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 34037 00002635 880E[1522]              	mov	[p_buffer_slash_x],cl ; 0
 34038                                  
 34039 00002639 BF[CE21]                	mov	di,buf_parms
 34040                                  	;xor	cx,cx	; 18/12/2022
 34041                                  	; 03/01/2023
 34042                                  	;mov	dx,cx
 34043                                  do7:
 34044 0000263C E82808                  	call	sysinit_parse
 34045 0000263F 7303                    	jnc	short if7		; parse error,
 34046                                  	;call	badparm_p		;  and show messages and end the search loop.
 34047                                  	;;jmp	short sr7
 34048                                  	; 31/12/2022
 34049                                  ;sr7:
 34050                                  	;jmp	coff
 34051                                  	; 03/01/2023
 34052 00002641 E91207                  	jmp	badparm_p_coff
 34053                                  if7:
 34054 00002644 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 34055 00002647 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 34056                                  	;cmp	word [result_val_swoff],switch_x
 34057 00002649 813E[1922][0E22]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 34058                                  	;jne	short if11
 34059                                  	; 31/12/2022
 34060 0000264F 74EB                    	je	short do7 ;je short en11
 34061                                  
 34062                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 34063                                  	;jmp	short en11 ; 31/12/2022
 34064                                  if11:
 34065                                  	;mov	ax,[rv_dword]
 34066 00002651 A1[1B22]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 34067 00002654 83F901                  	cmp	cx,1
 34068 00002657 7505                    	jne	short if13
 34069                                  
 34070 00002659 A3[1122]                	mov	[p_buffers],ax
 34071                                  	;jmp	short en11
 34072                                  	; 31/12/2022
 34073 0000265C EBDE                    	jmp	short do7
 34074                                  if13:
 34075 0000265E A3[1322]                	mov	[p_h_buffers],ax
 34076                                  en11:
 34077 00002661 EBD9                    	jmp	short do7
 34078                                  en7:
 34079 00002663 833E[1122]63            	cmp	word [p_buffers],99
 34080 00002668 760B                    	jbe	short if18
 34081                                  
 34082                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 34083                                  ;	jne	short if18
 34084                                  
 34085 0000266A E82508                  	call	badparm_p
 34086 0000266D C706[1322]0000          	mov	word [p_h_buffers],0
 34087 00002673 EB12                    	jmp	short sr7
 34088                                  if18:
 34089 00002675 A1[1122]                	mov	ax,[p_buffers]	; we don't have any problem.
 34090 00002678 A3[9902]                	mov	[buffers],ax	; now,let's set it really.
 34091                                  
 34092 0000267B A1[1322]                	mov	ax,[p_h_buffers]
 34093 0000267E A3[9B02]                	mov	[h_buffers],ax
 34094                                  
 34095                                  ;	mov	al,[p_buffer_slash_x]	; M016
 34096                                  ;	mov	[buffer_slash_x],al
 34097                                  
 34098 00002681 A1[AF02]                	mov	ax,[linecount]
 34099 00002684 A3[B902]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 34100                                  	; 31/12/2022
 34101                                  	;jmp	short sr7
 34102                                  	; 03/01/2023
 34103                                  sr7:
 34104 00002687 E9FCFE                  	jmp	coff
 34105                                  
 34106                                  ;------------------------------------------------------------------------------
 34107                                  ; break command
 34108                                  ;------------------------------------------------------------------------------
 34109                                  
 34110                                  ;****************************************************************************
 34111                                  ;									    *
 34112                                  ; function: parse the parameters of break = command.			    *
 34113                                  ;									    *
 34114                                  ; input :								    *
 34115                                  ;	es:si -> parameters in command line.				    *
 34116                                  ; output:								    *
 34117                                  ;	turn the control-c check on or off.				    *
 34118                                  ;									    *
 34119                                  ; subroutines to be called:						    *
 34120                                  ;	sysinit_parse							    *
 34121                                  ; logic:								    *
 34122                                  ; {									    *
 34123                                  ;	set di to brk_parms;						    *
 34124                                  ;	set dx,cx to 0; 						    *
 34125                                  ;	while (end of command line)					    *
 34126                                  ;	{ sysinit_parse;						    *
 34127                                  ;	  if (no error) then						    *
 34128                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 34129                                  ;		   set p_ctrl_break,on;					    *
 34130                                  ;	       else					  /*off 	 */ *
 34131                                  ;		   set p_ctrl_break,off;				    *
 34132                                  ;	  else {show message;error_exit};				    *
 34133                                  ;	};								    *
 34134                                  ;	if (no error) then						    *
 34135                                  ;	   dos function call to set ctrl_break check according to	    *
 34136                                  ; };									    *
 34137                                  ;									    *
 34138                                  ;****************************************************************************
 34139                                  
 34140                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34141                                  	; (SYSINIT:22FFh)
 34142                                  tryc:
 34143 0000268A 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 34144 0000268D 7539                    	jne	short trym
 34145                                  
 34146                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34147                                  ; (SYSINIT:2527h)
 34148                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34149                                  ;%if 0
 34150                                  ;ifdef	MULTI_CONFIG
 34151 0000268F E88A1F                  	call	query_user              ; query the user if config_cmd
 34152 00002692 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 34153                                  ;endif
 34154                                  ;%endif ; 27/10/2022
 34155                                  
 34156 00002694 BF[1F22]                	mov	di,brk_parms
 34157 00002697 31C9                    	xor	cx,cx
 34158                                  	; 03/01/2023
 34159                                  	;mov	dx,cx
 34160                                  do22:
 34161 00002699 E8CB07                  	call	sysinit_parse
 34162 0000269C 7303                    	jnc	short if22		; parse error
 34163                                  	;call	badparm_p		;  show message and end the search loop.
 34164                                  	;;jmp	short sr22
 34165                                  	; 31/12/2022
 34166                                  ;sr22:
 34167                                  	;jmp	coff
 34168                                  	; 03/01/2023
 34169 0000269E E9B506                  	jmp	badparm_p_coff
 34170                                  if22:
 34171 000026A1 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 34172 000026A4 7415                    	je	short en22		; then end the $endloop
 34173                                  
 34174                                  	;cmp	byte [result_val_itag],1
 34175 000026A6 803E[1822]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 34176 000026AB 7507                    	jne	short if26
 34177                                  
 34178 000026AD C606[4422]01            	mov	byte [p_ctrl_break],1	; turn it on
 34179                                  	;jmp	short en26
 34180                                  	; 31/12/2022
 34181 000026B2 EBE5                    	jmp	short do22
 34182                                  if26:
 34183 000026B4 C606[4422]00            	mov	byte [p_ctrl_break],0	; turn it off
 34184                                  en26:
 34185 000026B9 EBDE                    	jmp	short do22		; we actually set the ctrl break
 34186                                  en22:
 34187 000026BB B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 34188 000026BD B001                    	mov	al,1
 34189 000026BF 8A16[4422]              	mov	dl,[p_ctrl_break]
 34190 000026C3 CD21                    	int	21h
 34191                                  	; 31/12/2022
 34192                                  	;jmp	short sr22
 34193                                  	; 03/01/2023
 34194                                  sr22:
 34195 000026C5 E9BEFE                  	jmp	coff
 34196                                  
 34197                                  ;------------------------------------------------------------------------------
 34198                                  ; multitrack command
 34199                                  ;------------------------------------------------------------------------------
 34200                                  
 34201                                  ;******************************************************************************
 34202                                  ;									      *
 34203                                  ; function: parse the parameters of multitrack= command.		      *
 34204                                  ;									      *
 34205                                  ; input :								      *
 34206                                  ;	es:si -> parameters in command line.				      *
 34207                                  ; output:								      *
 34208                                  ;	turn multrk_flag on or off.					      *
 34209                                  ;									      *
 34210                                  ; subroutines to be called:						      *
 34211                                  ;	sysinit_parse							      *
 34212                                  ; logic:								      *
 34213                                  ; {									      *
 34214                                  ;	set di to brk_parms;						      *
 34215                                  ;	set dx,cx to 0; 						      *
 34216                                  ;	while (end of command line)					      *
 34217                                  ;	{ sysinit_parse;						      *
 34218                                  ;	  if (no error) then						      *
 34219                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 34220                                  ;		   set p_mtrk,on;					      *
 34221                                  ;	       else					  /*off 	 */   *
 34222                                  ;		   set p_mtrk,off;					      *
 34223                                  ;	  else {show message;error_exit};				      *
 34224                                  ;	};								      *
 34225                                  ;	if (no error) then						      *
 34226                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 34227                                  ;									      *
 34228                                  ; };									      *
 34229                                  ;									      *
 34230                                  ;******************************************************************************
 34231                                  
 34232                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34233                                  trym:
 34234 000026C8 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 34235 000026CB 7573                    	jne	short tryu
 34236                                  
 34237                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34238                                  ; (SYSINIT:2569h)
 34239                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34240                                  ;%if 0
 34241                                  ;ifdef	MULTI_CONFIG
 34242 000026CD E84C1F                  	call	query_user      ; query the user if config_cmd
 34243 000026D0 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 34244                                  ;endif
 34245                                  ;%endif	; 27/10/2022
 34246                                  
 34247 000026D2 BF[2323]                	mov	di,mtrk_parms
 34248 000026D5 31C9                    	xor	cx,cx
 34249                                  	; 03/01/2023
 34250                                  	;mov	dx,cx
 34251                                  do31:
 34252 000026D7 E88D07                  	call	sysinit_parse
 34253 000026DA 7303                    	jnc	short if31	; parse error
 34254                                  	;call	badparm_p	;  show message and end the search loop.
 34255                                  	;;jmp	short sr31
 34256                                  	; 31/12/2022
 34257                                  ;sr31:
 34258                                  	;jmp	coff
 34259                                  	; 03/01/2023
 34260 000026DC E97706                  	jmp	badparm_p_coff
 34261                                  if31:
 34262 000026DF 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34263 000026E2 7415                    	je	short en31	; then end the $endloop
 34264                                  
 34265                                  	;cmp	byte [result_val_itag],1
 34266 000026E4 803E[1822]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 34267 000026E9 7507                    	jne	short if35
 34268                                  
 34269 000026EB C606[3723]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 34270                                  	;jmp	short en35
 34271                                  	; 31/12/2022
 34272 000026F0 EBE5                    	jmp	short do31
 34273                                  if35:
 34274 000026F2 C606[3723]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 34275                                  en35:
 34276 000026F7 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 34277                                  en31:
 34278 000026F9 1E                      	push	ds
 34279                                  	;;mov	ax,Bios_Data ; 70h
 34280                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 34281                                  	; 21/10/2022
 34282 000026FA B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 34283 000026FD 8ED8                    	mov	ds,ax
 34284                                  
 34285 000026FF 2E803E[3723]00          	cmp	byte [cs:p_mtrk],0
 34286 00002705 7508                    	jne	short if39
 34287                                  
 34288 00002707 C706[A004]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 34289 0000270D EB06                    	jmp	short en39
 34290                                  if39:
 34291 0000270F C706[A004]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 34292                                  en39:
 34293 00002715 1F                      	pop	ds
 34294                                  	; 31/12/2022
 34295                                  	;jmp	short sr31
 34296                                  	; 03/01/2023
 34297                                  sr31:
 34298 00002716 E96DFE                  	jmp	coff
 34299                                  
 34300                                  ;----------------------------------------------------------------------------
 34301                                  ; DOS=HIGH/LOW command
 34302                                  ;----------------------------------------------------------------------------
 34303                                  
 34304                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34305                                  multi_try_doshi:
 34306 00002719 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 34307 0000271C 7403                    	je	short it_is_h
 34308                                  skip_it:
 34309 0000271E E9EFFE                  	jmp	multi_pass_filter
 34310                                  it_is_h:				; M003 - removed initing DevUMB
 34311                                  					;	 & runhigh
 34312                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34313                                  ; (SYSINIT:25C1h)
 34314                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34315                                  ;%if 0
 34316                                  ;ifdef	MULTI_CONFIG
 34317 00002721 E8F81E                  	call	query_user              ; query the user if config_cmd
 34318 00002724 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 34319                                  ;endif
 34320                                  ;%endif ; 27/10/2022
 34321                                  
 34322 00002726 BF[9923]                	mov	di,dos_parms
 34323 00002729 31C9                    	xor	cx,cx
 34324                                  	; 03/01/2023
 34325                                  	;mov	dx,cx
 34326                                  h_do_parse:
 34327 0000272B E83907                  	call	sysinit_parse
 34328 0000272E 7303                    	jnc	short h_parse_ok	; parse error
 34329                                  h_badparm:
 34330                                  	; 03/01/2023
 34331                                  	;call	badparm_p		; show message and end the search loop.
 34332                                  	;;jmp	short h_end
 34333                                  	; 11/12/2022
 34334                                  ;h_end:
 34335                                  	;jmp	coff
 34336                                  	; 03/01/2023
 34337 00002730 E92306                  	jmp	badparm_p_coff	
 34338                                  h_parse_ok:
 34339 00002733 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 34340 00002736 7405                    	je	short h_end		; then end the $endloop
 34341 00002738 E8AE07                  	call	ProcDOS
 34342 0000273B EBEE                    	jmp	short h_do_parse
 34343                                  	; 11/12/2022
 34344                                  	; 03/01/2023
 34345                                  h_end:
 34346 0000273D E946FE                  	jmp	coff
 34347                                  
 34348                                  ;-----------------------------------------------------------------------------
 34349                                  ; devicehigh command
 34350                                  ;-----------------------------------------------------------------------------
 34351                                  
 34352                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34353                                  tryu:
 34354 00002740 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 34355 00002743 7554                    	jne	short tryd
 34356                                  
 34357                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34358                                  ; (SYSINIT:25E9h)
 34359                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34360                                  ;%if 0
 34361                                  ;ifdef	MULTI_CONFIG
 34362 00002745 E8D41E                  	call	query_user              ; query the user if config_cmd
 34363 00002748 724F                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 34364                                  ;endif
 34365                                  ;%endif ; 28/10/2022
 34366                                  
 34367                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34368                                  ;%if 0
 34369                                  	; 01/01/2023
 34370                                  	; ds = cs
 34371                                  
 34372 0000274A E83108                  	call	InitVar
 34373 0000274D E80510                  	call	ParseSize		; process the size= option
 34374                                  	;jnc	short tryu_0
 34375                                  	; 31/12/2022
 34376 00002750 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 34377                                  
 34378                                  ;%endif ; 28/10/2022
 34379                                  
 34380                                  ; 31/12/2022
 34381                                  %if 0
 34382                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34383                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 34384                                  	;mov	[cs:badparm_seg], es
 34385                                  	; 11/12/2022
 34386                                  	; ds = cs
 34387                                  	mov	[badparm_off], si
 34388                                  	mov	[badparm_seg], es
 34389                                  
 34390                                  	; 31/12/2022
 34391                                  	;call	ParseSize
 34392                                  	;jnc	short tryu_2	; 28/10/2022
 34393                                  	
 34394                                  	;call	badparm_p
 34395                                  	;jmp	coff
 34396                                  	; 03/01/2023
 34397                                  	jmp	badparm_p_coff
 34398                                  %endif
 34399                                  
 34400                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34401                                  ; (SYSINIT:2606h)
 34402                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34403                                  ;%if 0
 34404                                  tryu_0:
 34405                                  	;mov	ax,[cs:DevSizeOption]
 34406                                  	; 31/12/2022
 34407 00002752 A1[5224]                	mov	ax,[DevSizeOption] ; ds = cs
 34408 00002755 09C0                    	or	ax,ax
 34409 00002757 7510                    	jnz	short tryu_2
 34410                                  
 34411 00002759 E8B408                  	call	ParseVar
 34412 0000275C 730B                    	jnc	short tryu_2
 34413                                  tryu_1:
 34414                                  	; 31/12/2022
 34415                                  	; ds = cs
 34416 0000275E 8936[6B19]              	mov	[badparm_off], si
 34417 00002762 8C06[6D19]              	mov	[badparm_seg], es
 34418                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 34419                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 34420                                  	
 34421                                  	;call	badparm_p		; so all we have to do is choke and
 34422                                  	;jmp	coff			; die, rather verbosely.
 34423                                  	; 03/01/2023
 34424 00002766 E9ED05                  	jmp	badparm_p_coff
 34425                                  
 34426                                  ;%endif ; 28/10/2022
 34427                                  
 34428                                  tryu_2:	
 34429 00002769 56                      	push	si
 34430 0000276A 06                      	push	es
 34431                                  
 34432                                  	; 08/09/2023 - Retro DOS 4.2 IO.SYS (Optimization)
 34433                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2623h
 34434                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:2B17h
 34435                                  tryu_3:
 34436 0000276B 268A04                  	mov	al,[es:si]
 34437 0000276E 3C0D                    	cmp	al,cr
 34438                                  	; 14/04/2024
 34439                                  	;je	short tryu_4
 34440                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 34441 00002770 740C                    	je	short tryu_5
 34442 00002772 3C0A                    	cmp	al,lf
 34443 00002774 740A                    	je	short tryu_4
 34444 00002776 E81120                  	call	delim
 34445 00002779 7405                    	jz	short tryu_4
 34446 0000277B 46                      	inc	si
 34447 0000277C EBED                    	jmp	short tryu_3
 34448                                  
 34449                                  	; 14/04/2024
 34450                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 34451                                  tryu_5:
 34452 0000277E B020                    	mov     al,20h ; ' '   ; blank instead of cr
 34453                                  
 34454                                  tryu_4:	
 34455                                  	; 11/12/2022
 34456                                  	; ds = cs
 34457 00002780 A2[6624]                	mov	[DevSavedDelim],al
 34458                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 34459                                  					;  it with null
 34460                                  	; 18/12/2022
 34461 00002783 29DB                    	sub	bx,bx
 34462 00002785 26881C                  	mov	[es:si],bl ; 0
 34463                                   	;mov	byte [es:si],0
 34464                                  
 34465 00002788 07                      	pop	es
 34466 00002789 5E                      	pop	si	; 14/04/2024
 34467                                  
 34468                                  ;------------------------------------------------------------------------------
 34469                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 34470                                  ;------------------------------------------------------------------------------
 34471                                  
 34472                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34473                                  ; (SYSINIT:2642h)
 34474                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34475                                  ;%if 0
 34476                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 34477                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 34478                                  %if 1
 34479                                  	; 01/01/2023
 34480                                  	; ds = cs
 34481 0000278A E8F00C                  	call	UmbTest			; See if UMBs are around...
 34482                                  	; 01/01/2023
 34483                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 34484                                  	
 34485                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 34486                                  	; 31/12/2022
 34487                                  	; ds = cs, bx = 0
 34488                                  	;mov	byte [DeviceHi],bl ; 0
 34489                                  	;jmp	short LoadDevice
 34490                                  	; 01/01/2023
 34491 0000278D 7222                    	jc	short LoadDevice ; bl = 0
 34492                                  %endif
 34493                                  ;%endif
 34494                                  ;------------------------------------------------------------------------------
 34495                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 34496                                  ;------------------------------------------------------------------------------
 34497                                  
 34498                                  NrmTst:
 34499                                  	; 11/12/2022
 34500                                  	; ds = cs
 34501                                  	;;mov	byte [cs:DeviceHi],0
 34502                                  	;mov	byte [DeviceHi],0
 34503                                  	; 18/12/2022
 34504                                  	; bx = 0
 34505 0000278F 381E[4224]              	cmp	[DevUMB],bl ; 0
 34506                                  	;cmp	byte [DevUMB],0
 34507                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 34508 00002793 741C                    	je	short LoadDevice	; no, we don't
 34509                                  	;mov	byte [cs:DeviceHi],1
 34510                                  	; 11/12/2022
 34511                                  	;mov	byte [DeviceHi],1
 34512                                  	; 18/12/2022
 34513 00002795 FEC3                    	inc	bl ; mov bl,1 ; (*)
 34514                                  	; 11/12/2022
 34515                                  	;jmp	short LoadDevice2	; 11/12/2022
 34516 00002797 EB18                    	jmp	short LoadDevice
 34517                                  
 34518                                  ;------------------------------------------------------------------------------
 34519                                  ; device command
 34520                                  ;------------------------------------------------------------------------------
 34521                                  
 34522                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34523                                  	; (SYSINIT:2665h)
 34524                                  
 34525                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34526                                  	; (SYSINIT:2401h)
 34527                                  tryd:
 34528                                  	; 11/12/2022
 34529                                  	;xor 	bx,bx ; 31/12/2022
 34530                                  	;
 34531 00002799 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 34532 0000279C 7403                    	je	short gotd
 34533                                  skip_it2:
 34534 0000279E E9FC02                  	jmp	tryq
 34535                                  gotd:
 34536                                  
 34537                                  ; 31/12/2022 - Retro DOS v4.2
 34538                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34539                                  ;%if 0
 34540                                  ;ifdef	MULTI_CONFIG
 34541 000027A1 E8781E                  	call	query_user              ; query the user if config_cmd
 34542 000027A4 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 34543                                  ;endif
 34544                                  ;%endif ; 28/10/2022
 34545                                  
 34546                                  	; 31/12/2022
 34547 000027A6 29DB                    	sub	bx,bx
 34548                                  	; bx = 0
 34549                                  	; 11/12/2022
 34550                                  	; ds = cs
 34551                                  	;mov	byte [DeviceHi],0
 34552                                  	;mov	word [DevSizeOption],0
 34553 000027A8 891E[5224]              	mov	[DevSizeOption],bx ; 0
 34554 000027AC C606[6624]20            	mov	byte [DevSavedDelim],' '
 34555                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 34556                                  	;mov	word [cs:DevSizeOption],0
 34557                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 34558                                  					;  be replaced with a ' '
 34559                                  LoadDevice:                             ; device= or devicehigh= command.
 34560                                  	; 11/12/2022
 34561                                  	;mov	byte [DeviceHi],0
 34562 000027B1 881E[5124]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 34563                                  LoadDevice2:
 34564                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 34565                                  	;
 34566                                  	;push    cs
 34567                                          ;pop     ds
 34568                                  	;
 34569                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 34570                                  	;mov	[bpb_addr+2],es
 34571                                  	;
 34572                                  	;mov	[DevCmdLine],si		; save it for ourself
 34573                                  	;mov	[DevCmdLine+2],es
 34574                                  	;
 34575                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 34576                                  
 34577                                  	; 11/12/2022
 34578                                  	; ds = cs
 34579                                  	;mov	bx,cs
 34580                                  	;mov	ds,bx
 34581                                  
 34582                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 34583 000027B5 8936[8103]              	mov	[bpb_addr],si
 34584                                  	;mov	[cs:bpb_addr+2],es
 34585 000027B9 8C06[8303]              	mov	[bpb_addr+2],es
 34586                                  
 34587                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 34588 000027BD 8936[6224]              	mov	[DevCmdLine],si
 34589                                  	;mov	[cs:DevCmdLine+2],es	
 34590 000027C1 8C06[6424]              	mov	[DevCmdLine+2],es
 34591                                  
 34592                                  	; 31/12/2022 - Retro DOS v4.2
 34593 000027C5 C606[6A19]00            	mov	byte [driver_units],0	; clear total block units for driver	
 34594                                  
 34595 000027CA E82520                  	call	round
 34596                                  	
 34597 000027CD E8910E                  	call	SizeDevice
 34598 000027D0 723F                    	jc	short BadFile
 34599                                  
 34600                                  	; 11/12/2022
 34601                                  	; ds = cs
 34602                                  
 34603                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 34604                                  
 34605                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34606                                  ; (SYSINIT:26A4h)
 34607                                  
 34608                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34609                                  ;%if 0
 34610 000027D2 C606[4124]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 34611                                  
 34612                                  	; 22/07/2023
 34613                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 34614 000027D7 800E[5124]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 34615                                  	; 10/07/2023
 34616                                  	;or	al,al
 34617 000027DC 741E                    	jz	short DevConvLoad	; the actual load.
 34618                                  
 34619                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 34620 000027DE A0[FF23]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 34621                                  
 34622 000027E1 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 34623 000027E3 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 34624                                  
 34625 000027E5 FE0E[4124]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 34626                                  
 34627 000027E9 E8590A                  	call	GetLoadSize		; Returns size of first UMB specified
 34628 000027EC 09C0                    	or	ax,ax
 34629 000027EE 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 34630                                  
 34631 000027F0 3B06[3324]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 34632 000027F4 7D06                    	jge	short DevConvLoad
 34633                                  tryd_1:
 34634 000027F6 A1[3324]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 34635 000027F9 E8550A                  	call	StoLoadSize		; minsize for load UMB.
 34636                                  
 34637                                  ;%endif ; 28/10/2022
 34638                                  
 34639                                  ; - End DeviceHigh primary logic changes --------------------------------------
 34640                                  
 34641                                  DevConvLoad:
 34642                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34643 000027FC E8660D                  	call	InitDevLoad
 34644                                  
 34645                                  	; 11/12/2022
 34646                                  	; ds = cs
 34647 000027FF A1[3524]                	mov	ax,[DevLoadAddr]
 34648 00002802 0306[3324]              	add	ax,[DevSize]
 34649 00002806 7206                    	jc	short NoMem
 34650 00002808 3906[3724]              	cmp	[DevLoadEnd],ax
 34651 0000280C 7315                    	jae	short LoadDev
 34652                                  	
 34653                                  	; 11/12/2022
 34654                                  	;mov	ax,[cs:DevLoadAddr]
 34655                                  	;add	ax,[cs:DevSize]
 34656                                  	;jc	short NoMem
 34657                                  	;cmp	[cs:DevLoadEnd],ax
 34658                                  	;jae	short LoadDev
 34659                                  NoMem:
 34660                                  	; 11/12/2022
 34661                                  	; ds = cs
 34662                                  	;jmp	mem_err
 34663 0000280E E92020                  	jmp	mem_err2
 34664                                  
 34665                                  BadFile:
 34666                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34667                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 34668                                  	;;cmp	byte [es:si],' '
 34669                                          ;;jae	short tryd_2
 34670                                  	; 31/12/2022	
 34671                                  	;cmp	byte [es:si],0Dh	; cr
 34672                                          ;jne	short tryd_2
 34673                                  	;jmp	badop
 34674                                  	; 31/12/2022
 34675                                  	; ds = cs
 34676                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34677                                  	; (SYSINIT:26E6h)
 34678 00002811 E8AE0E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 34679 00002814 26803C20                	cmp	byte [es:si],' ' 
 34680                                  	;cmp	byte [es:si],20h ; space
 34681 00002818 7303                    	jnb	short tryd_2
 34682 0000281A E96906                  	jmp	badop
 34683                                  tryd_2:
 34684 0000281D E80C22                  	call	badload
 34685 00002820 E963FD                  	jmp	coff
 34686                                  
 34687                                  LoadDev:
 34688 00002823 06                      	push	es
 34689 00002824 1F                      	pop	ds
 34690                                  
 34691 00002825 89F2                    	mov	dx,si			;ds:dx points to file name
 34692 00002827 E87C0E                  	call	ExecDev			; load device driver using exec call
 34693                                  badldreset:
 34694 0000282A 1E                      	push	ds
 34695 0000282B 07                      	pop	es			;es:si back to config.sys
 34696 0000282C 0E                      	push	cs
 34697 0000282D 1F                      	pop	ds			;ds back to sysinit
 34698 0000282E 72E1                    	jc	short BadFile
 34699                                  goodld:
 34700                                  	; 11/12/2022
 34701                                  	; ds = cs
 34702                                  
 34703 00002830 06                      	push	es ; +	; 31/12/2022
 34704 00002831 56                      	push	si ; ++
 34705 00002832 E89E0E                  	call	RemoveNull
 34706 00002835 06                      	push	es
 34707 00002836 56                      	push	si
 34708                                  
 34709 00002837 0E                      	push	cs
 34710 00002838 07                      	pop	es
 34711                                  
 34712 00002839 1E                      	push	ds ; **  ; ds = cs
 34713 0000283A 56                      	push	si
 34714                                  
 34715                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 34716                                  	; 31/12/2022
 34717                                  	; ds = cs
 34718 0000283B C536[3924]              	lds	si,[DevEntry]
 34719                                  
 34720                                  	;test	word [si+4],8000h
 34721                                  	; 11/12/2022
 34722 0000283F F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 34723                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 34724 00002843 7514                    	jnz	short got_device_com_cont   ; no.
 34725                                  
 34726 00002845 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 34727                                  	;cmp	byte [si+32],26
 34728 0000284A 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 34729 0000284E 7209                    	jb	short got_device_com_cont
 34730                                  
 34731 00002850 5E                      	pop	si
 34732 00002851 1F                      	pop	ds ; **
 34733                                  
 34734 00002852 5E                      	pop	si			; clear the stack
 34735 00002853 07                      	pop	es
 34736                                  
 34737                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34738                                  	;call	RetFromUM
 34739                                  	; 31/12/2022
 34740                                  	; ds = cs ; **
 34741 00002854 E86B0E                  	call	RetFromUM		; Do this before we leave
 34742                                  
 34743                                  	;jmp	short badnumblock
 34744                                  	; 31/12/2022
 34745 00002857 EB73                    	jmp	short badnumblock2  ; ds = cs
 34746                                  
 34747                                  got_device_com_cont:
 34748 00002859 5E                      	pop	si
 34749 0000285A 1F                      	pop	ds
 34750                                  
 34751                                  	; 11/12/2022
 34752                                  	; ds = cs
 34753                                  
 34754 0000285B E8AE06                  	call	LieInt12Mem
 34755 0000285E E80B07                  	call	UpdatePDB		; update the PSP:2 value M020
 34756                                  
 34757                                  	; 11/12/2022
 34758                                  	; ds = cs
 34759                                  	; 08/09/2023
 34760 00002861 31C0                    	xor	ax, ax ; 0
 34761 00002863 3806[6619]              	cmp	byte [multdeviceflag],al ; 0
 34762                                  	;cmp	byte [multdeviceflag],0
 34763                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 34764                                  					;  driver in the file ; M027
 34765 00002867 750B                    	jne	short skip_pass_limit	;		      ; M027
 34766                                  
 34767                                  	; 11/12/2022
 34768                                  	; ds = cs
 34769                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 34770                                  	;mov	bx,[cs:DevLoadEnd]
 34771                                  	;mov	[cs:break_addr+2],bx
 34772                                  
 34773                                  	;mov	word [break_addr],0
 34774                                  	; 08/09/2023
 34775 00002869 A3[7D03]                	mov	[break_addr],ax ; 0
 34776 0000286C 8B1E[3724]              	mov	bx,[DevLoadEnd]
 34777 00002870 891E[7F03]              	mov	[break_addr+2],bx
 34778                                  
 34779                                  skip_pass_limit:
 34780                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 34781                                  ;	number of installed devices (including DblSpace drives) where
 34782                                  ;	"drivenumber" is the number that the next block device will
 34783                                  ;	be assigned to. Because some naughty device drivers (like
 34784                                  ;	interlnk) look at the internal DOS variable instead of the
 34785                                  ;	value we pass it, we'll temporarily stick our value into
 34786                                  ;	DOS DATA while we're initializing the device drivers.
 34787                                  ;
 34788                                  ;	Note that this will make it impossible for this device
 34789                                  ;	driver to access the DblSpace drive letters, whether
 34790                                  ;	they are swapped-hosts or unswapped compressed drives,
 34791                                  ;	during its initialization phase.
 34792                                  
 34793                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34794                                  ; (SYSINIT:2752h)
 34795                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34796                                  ;%if 0
 34797                                  	; 31/12/2022
 34798                                  	;push	ds
 34799                                  	
 34800                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 34801                                  	; 31/12/2022
 34802                                  	; ds = cs
 34803                                  	; 08/09/2023
 34804                                  	;lds	bx,[DOSINFO]		; ds:bx -> sys_var
 34805                                  
 34806                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 34807                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 34808                                  	;mov	ah,al
 34809                                  
 34810                                  	; 08/09/2023
 34811                                  	; ds = cs
 34812 00002874 A0[8503]                	mov	al,[drivenumber]	; temporarily use this next drv value		
 34813 00002877 A2[8503]                	mov	[devdrivenum],al	; pass drive number in packet to driver
 34814 0000287A 88C4                    	mov	ah,al
 34815 0000287C C51E[6D02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 34816                                  
 34817 00002880 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 34818                                  	; 31/12/2022
 34819                                  	;pop	ds
 34820                                  	
 34821 00002883 50                      	push	ax			; save real sysi_numio/ncds in ax
 34822                                  
 34823                                  ;%endif ; 29/10/2022
 34824                                  
 34825                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34826                                  	; (SYSINIT:24B9h)
 34827                                  
 34828 00002884 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 34829 00002887 E8B01F                  	call	calldev 		; calldev (sdevstrat);
 34830 0000288A BB0800                  	mov	bx,SYSDEV.INT ; 8
 34831 0000288D E8AA1F                  	call	calldev 		; calldev (sdevint);
 34832                                  
 34833                                  	; 11/12/2022
 34834                                  	; ds <> cs (from calldev) ; 31/12/2022
 34835                                  
 34836                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34837                                  ; (SYSINIT:2773h)
 34838                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34839                                  ;%if 0
 34840 00002890 58                      	pop	ax			; get real sysi_numio value
 34841                                  	; 31/12/2022
 34842                                  	;push	ds
 34843 00002891 2EC51E[6D02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 34844 00002896 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 34845                                  	; 31/12/2022
 34846                                  	;pop	ds
 34847                                  
 34848                                  ;%endif ; 29/10/2022
 34849                                  
 34850                                  	; 11/12/2022
 34851 00002899 0E                      	push	cs
 34852 0000289A 1F                      	pop	ds
 34853                                  
 34854 0000289B E89C06                  	call	TrueInt12Mem
 34855                                  
 34856                                  	; 11/12/2022
 34857                                  	; ds = cs
 34858                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 34859                                  	;mov	[cs:DevBrkAddr],ax
 34860                                  	;mov	ax,[cs:break_addr+2]
 34861                                  	;mov	[cs:DevBrkAddr+2],ax
 34862 0000289E A1[7D03]                	mov	ax,[break_addr]	
 34863 000028A1 A3[3D24]                	mov	[DevBrkAddr],ax
 34864 000028A4 A1[7F03]                	mov	ax,[break_addr+2]
 34865 000028A7 A3[3F24]                	mov	[DevBrkAddr+2],ax
 34866                                  
 34867                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34868                                  	;call	RetFromUM		; There we go... all done.
 34869                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34870                                  	; (SYSINIT:2791h)
 34871 000028AA E8150E                  	call	RetFromUM		; There we go... all done.	
 34872                                  
 34873                                  	; 31/12/2022
 34874                                  	; ds = cs
 34875                                  
 34876                                  	; 11/12/2022
 34877 000028AD 803E[4224]00            	cmp	byte [DevUMB],0	
 34878                                  	;cmp	byte [cs:DevUMB],0
 34879 000028B2 7403                    	je	short tryd_3
 34880 000028B4 E80010                  	call	AllocUMB
 34881                                  	; 31/12/2022
 34882                                  	; ds = cs
 34883                                  tryd_3:
 34884                                  
 34885                                  ;ifndef ROMDOS
 34886                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 34887                                  
 34888                                  	; 11/12/2022
 34889                                  	; ds = cs
 34890                                  	
 34891                                  	;cmp	byte [cs:runhigh],0FFh
 34892 000028B7 803E[6C02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 34893 000028BC 7503                    	jne	short tryd_4
 34894                                  	
 34895                                  	; 11/12/2022
 34896                                  	; ds = cs
 34897 000028BE E8D7E1                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 34898                                  tryd_4:
 34899                                  ;endif ; ROMDOS
 34900                                  
 34901 000028C1 5E                      	pop	si
 34902 000028C2 1F                      	pop	ds
 34903 000028C3 C60400                  	mov	byte [si],0		; *p = 0;
 34904                                  
 34905 000028C6 0E                      	push	cs
 34906 000028C7 1F                      	pop	ds
 34907                                  
 34908 000028C8 EB1F                    	jmp	short was_device_com
 34909                                  
 34910                                  ;----------------------------------------------------------------------------
 34911                                  
 34912                                  ; 02/04/2019 - Retro DOS v4.0
 34913                                  
 34914                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34915                                  ; (SYSINIT:27B3h)
 34916                                  
 34917                                  badnumblock:
 34918 000028CA 0E                      	push	cs
 34919 000028CB 1F                      	pop	ds
 34920                                  badnumblock2:	; 31/12/2022 (ds=cs)
 34921 000028CC BA[7051]                	mov	dx,badblock
 34922 000028CF E88221                  	call	print
 34923                                  
 34924                                  ;------ fall thru -----------------------------------------------------------
 34925                                  
 34926                                  	; 31/12/2022 - Retro DOS v4.2
 34927                                  
 34928                                  erase_dev_do:				; modified to show message "error in config.sys..."
 34929                                  	
 34930                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 34931                                  				; (Note: 'call CheckDoubleSpace'
 34932                                  				; has been removed at 'erase_dev_do:' pos
 34933                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 34934                                  				; Erdogan Tan - 10/07/2023
 34935 000028D2 5E                      	pop	si ; ++
 34936 000028D3 07                      	pop	es ; + ; 31/12/2022
 34937                                  
 34938 000028D4 0E                      	push	cs
 34939 000028D5 1F                      	pop	ds
 34940                                  
 34941                                  skip1_resetmemhi:
 34942                                  	; 11/12/2022
 34943                                  	; ds = cs
 34944 000028D6 833E[8603]00            	cmp	word [configmsgflag],0
 34945                                  	;cmp	word [cs:configmsgflag],0
 34946 000028DB 7409                    	je	short no_error_line_msg
 34947                                  
 34948 000028DD E8DA05                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 34949                                  	; 11/12/2022
 34950                                  	; ds = cs
 34951                                  	;mov	word [cs:configmsgflag],0
 34952 000028E0 C706[8603]0000          	mov	word [configmsgflag],0	; set the default value again.
 34953                                  
 34954                                  no_error_line_msg:
 34955 000028E6 E99DFC                  	jmp	coff
 34956                                  
 34957                                  ;----------------------------------------------------------------------------
 34958                                  
 34959                                  was_device_com:
 34960                                  	; 14/12/2022
 34961                                  	; ds = cs
 34962 000028E9 A1[3F24]                	mov	ax,[DevBrkAddr+2]
 34963                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 34964 000028EC 3B06[3724]              	cmp	ax,[DevLoadEnd]
 34965                                  	;cmp	ax,[cs:DevLoadEnd]
 34966 000028F0 7605                    	jbe	short breakok
 34967                                  
 34968 000028F2 5E                      	pop	si
 34969 000028F3 07                      	pop	es
 34970 000028F4 E91AFF                  	jmp	BadFile
 34971                                  
 34972                                  breakok:
 34973                                  	; 14/12/2022
 34974                                  	; ds = cs
 34975 000028F7 C43E[6D02]              	les	di,[DOSINFO] 
 34976 000028FB C516[3924]              	lds	dx,[DevEntry]
 34977                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 34978 000028FF 89D6                    	mov	si,dx
 34979                                  
 34980                                  	; 14/11/2022
 34981                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 34982                                  
 34983                                  	; 14/12/2022
 34984                                  	; ds <> cs
 34985                                  	
 34986                                  	;mov	ax,[si+4]
 34987 00002901 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 34988                                  	; 12/12/2022
 34989 00002904 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 34990                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 34991 00002907 7426                    	jz	short isblock
 34992                                  
 34993                                  ;------ lets deal with character devices
 34994                                  
 34995 00002909 2E800E[6919]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 34996 0000290F E8F40D                  	call	DevSetBreak		;go ahead and alloc mem for device
 34997                                  jc_edd:
 34998 00002912 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 34999                                  
 35000                                  	; 12/12/2022
 35001 00002914 A801                    	test	al,ISCIN
 35002                                  	;test	ax,ISCIN ; 1		;is it a console in?
 35003 00002916 7408                    	jz	short tryclk
 35004                                  
 35005 00002918 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 35006 0000291C 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 35007                                  tryclk: 
 35008                                  	; 12/12/2022
 35009 00002920 A808                    	test	al,ISCLOCK
 35010                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 35011 00002922 7408                    	jz	short golink
 35012                                  
 35013 00002924 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 35014 00002928 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 35015                                  golink: 
 35016 0000292C E9DF00                  	jmp	linkit
 35017                                  
 35018                                  ;------ deal with block device drivers
 35019                                  
 35020                                  isblock:
 35021 0000292F 2EA0[7C03]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 35022 00002933 08C0                    	or	al,al
 35023 00002935 749B                    	jz	short erase_dev_do
 35024                                  	;mov	[si+10],al
 35025 00002937 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 35026                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35027                                  	;add	[cs:driver_units],al
 35028                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35029 0000293A 2E0006[6A19]            	add	[cs:driver_units],al	; keep total for all drivers in file
 35030                                  perdrv:
 35031 0000293F 98                      	cbw				; warning no device > 127 units
 35032 00002940 89C1                    	mov	cx,ax
 35033 00002942 88E6                    	mov	dh,ah
 35034                                  	;mov	dl,[es:di+32]
 35035 00002944 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 35036 00002948 88D4                    	mov	ah,dl
 35037 0000294A 00C4                    	add	ah,al			; check for too many devices
 35038 0000294C 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 35039 0000294F 7603                    	jbe	short ok_block
 35040 00002951 E976FF                  	jmp	badnumblock
 35041                                  
 35042                                  ok_block:
 35043 00002954 2E800E[6919]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 35044 0000295A E8A90D                  	call	DevSetBreak		; alloc the device
 35045 0000295D 72B3                    	jc	short jc_edd
 35046 0000295F 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 35047                                  
 35048 00002963 2E0006[8503]            	add	[cs:drivenumber],al	; remember amount for next device
 35049 00002968 2EC51E[8103]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 35050                                  perunit:
 35051 0000296D 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 35052                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 35053                                  	; 11/12/2022
 35054 00002972 26C46E00                	les	bp,[es:bp]
 35055                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35056                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 35057                                  scandpb:
 35058                                  	;cmp	word [es:bp+25],-1
 35059 00002976 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 35060 0000297B 7406                    	je	short foundpb
 35061                                  	;les	bp,[es:bp+25]
 35062 0000297D 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 35063 00002981 EBF3                    	jmp	short scandpb
 35064                                  foundpb:
 35065 00002983 2EA1[3D24]              	mov	ax,[cs:DevBrkAddr]
 35066 00002987 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 35067 0000298B 2EA1[3F24]              	mov	ax,[cs:DevBrkAddr+2]
 35068 0000298F 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 35069                                  
 35070 00002993 2EC42E[3D24]            	les	bp,[cs:DevBrkAddr]
 35071 00002998 2E8306[3D24]3D          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 35072                                  				; 08/09/2023
 35073                                  				; (61 in PCDOS 7.1 IBMBIO.COM)
 35074 0000299E E8440D                  	call	RoundBreakAddr
 35075                                  
 35076 000029A1 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 35077 000029A7 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 35078                                  
 35079 000029AC 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 35080 000029AE 43                      	inc	bx
 35081 000029AF 43                      	inc	bx			;point to next guy
 35082                                  	;mov	[es:bp+DPB.DRIVE],dx
 35083                                  	; 11/12/2022
 35084 000029B0 26895600                	mov	[es:bp],dx ; 13/05/2019
 35085                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35086                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 35087                                  
 35088                                  	; 13/04/2024 - Retro DOS v5.0
 35089                                  	; PCDOS 7.1 IBMBIO.COM
 35090                                  	;;;
 35091 000029B4 52                      	push	dx
 35092 000029B5 51                      	push	cx		; initialize FAT32 extended DPB parameters/fields
 35093 000029B6 BA5241                  	mov	dx,4152h	; 'AR' signature for FAT32 extended DPB
 35094 000029B9 31C9                    	xor	cx,cx	; 0
 35095                                  	;mov	[es:bp+1Dh],cx
 35096 000029BB 26894E1D                	mov	[es:bp+DPB.NEXT_FREE],cx ; last allocated cluster #
 35097                                  	;cmp	[si+0Bh],cx	; BPB.fatsecs16 
 35098 000029BF 394C0B                  	cmp	[si+A_BPB.SECTORSPERFAT],cx ; 0
 35099 000029C2 7514                    	jnz	short set_dpb	; FAT DPB (33 bytes)   -jnz-
 35100                                  				; FAT32 DPB (61 bytes) -jz-
 35101                                  	;mov	[es:bp+39h],cx
 35102 000029C4 26894E39                	mov	[es:bp+DPB.FAT32_NXTFREE],cx ; 0
 35103                                  	;mov	[es:bp+3Bh],cx
 35104 000029C8 26894E3B                	mov	[es:bp+DPB.FAT32_NXTFREE+2],cx ; 0
 35105 000029CC 49                      	dec	cx	; 0FFFFh ; -1
 35106                                  	;mov	[es:bp+1Fh],cx
 35107 000029CD 26894E1F                	mov	[es:bp+DPB.FREE_CNT],cx ; -1 = unknown
 35108                                  	;mov	[es:bp+21h],cx
 35109 000029D1 26894E21                	mov	[es:bp+DPB.FREE_CNT+2],cx ; -1 = unknown
 35110 000029D5 B95845                  	mov	cx,4558h       ; 'EX' signature for FAT32 extended DPB
 35111                                  set_dpb:
 35112                                  	;;;
 35113                                  
 35114 000029D8 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 35115 000029DA CD21                    	int	21h
 35116                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 35117                                  			; DS:SI -> BPB (BIOS Parameter Block)
 35118                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 35119                                  	; 13/04/2024
 35120                                  	;;;
 35121 000029DC 59                      	pop	cx
 35122 000029DD 5A                      	pop	dx
 35123                                  	;;;
 35124                                  
 35125                                  	;mov	ax,[es:bp+2]
 35126 000029DE 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 35127 000029E2 06                      	push	es
 35128 000029E3 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 35129                                  	;cmp	ax,[es:di+10h]
 35130 000029E8 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 35131 000029EC 07                      	pop	es
 35132                                  	; 13/04/2024
 35133                                  	;jna	short iblk_1
 35134                                  	;jmp	bad_bpb_size_sector
 35135                                  	; 29/10/2022
 35136 000029ED 777F                    	ja	short bad_bpb_size_sector
 35137                                  iblk_1:
 35138 000029EF 1E                      	push	ds
 35139 000029F0 52                      	push	dx
 35140                                  
 35141 000029F1 2EC516[3924]            	lds	dx,[cs:DevEntry]
 35142                                  	;mov	[es:bp+13h],dx
 35143 000029F6 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 35144                                  	;mov	[es:bp+15h],ds
 35145 000029FA 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 35146                                  
 35147 000029FE 5A                      	pop	dx
 35148 000029FF 1F                      	pop	ds
 35149                                  
 35150 00002A00 42                      	inc	dx
 35151 00002A01 FEC6                    	inc	dh
 35152                                  	;loop	perunit
 35153                                  	; 13/04/2024
 35154                                  	;;;
 35155 00002A03 49                      	dec	cx		; cx = cx - 1
 35156                                  				; cx = remain count from [cs:unitcount]
 35157 00002A04 7403                    	jz	short iblk_2	; cx = 0 -> done
 35158 00002A06 E964FF                  	jmp	perunit		; loop until cx is 0
 35159                                  iblk_2:
 35160                                  	;;;
 35161                                  	
 35162 00002A09 0E                      	push	cs
 35163 00002A0A 1F                      	pop	ds
 35164                                  
 35165 00002A0B E895E3                  	call	TempCDS 		; set cds for new drives
 35166                                  	; 31/12/2022
 35167                                  	; ds <> cs
 35168                                  linkit:
 35169 00002A0E 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 35170 00002A13 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 35171 00002A17 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 35172                                  
 35173 00002A1B 2EC536[3924]            	lds	si,[cs:DevEntry]	;ds:si = device location
 35174 00002A20 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 35175 00002A24 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 35176 00002A28 8B04                    	mov	ax,[si]			;get pointer to next device
 35177 00002A2A 2EA3[3924]              	mov	[cs:DevEntry],ax	;and save it
 35178                                  
 35179 00002A2E 890C                    	mov	[si],cx			;link in the driver
 35180 00002A30 895402                  	mov	[si+2],dx
 35181                                  enddev:
 35182 00002A33 5E                      	pop	si
 35183 00002A34 07                      	pop	es
 35184 00002A35 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 35185 00002A36 740B                    	jz	short coffj3
 35186                                  
 35187 00002A38 2EFE06[6619]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 35188 00002A3D E8E80C                  	call	DevBreak		; M009
 35189                                  	; 11/12/2022
 35190                                  	; ds = cs (DevBreak)
 35191                                  
 35192                                  	; 03/04/2019 - Retro DOS v4.0
 35193                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 35194 00002A40 E9EDFD                  	jmp	goodld			; otherwise pretend we loaded it in
 35195                                  coffj3: 
 35196                                  	; 18/12/2022
 35197                                  	; ax = 0
 35198 00002A43 2EA2[6619]              	mov	[cs:multdeviceflag],al ; 0
 35199                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 35200 00002A47 E8DE0C                  	call	DevBreak
 35201                                  	; 11/12/2022
 35202                                  	; ds = cs (DevBreak)
 35203                                  	
 35204                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35205                                  	; (SYSINIT:2919h)
 35206                                  	; 11/07/2023
 35207 00002A4A E80204                  	call	CheckProtmanArena
 35208                                  	
 35209                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 35210                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 35211                                  ;					;  created a bogus arena to try
 35212                                  ;					;  to protect some of its resident-
 35213                                  ;					;  init code.
 35214                                  	; 13/04/2024 - Retro DOS v5.0
 35215                                  	; PCDOS 7.1 IBMBIO.COM
 35216                                  	;;call	CheckDoubleSpace
 35217                                  	;jmp	coff
 35218                                  
 35219                                  ;----------------------------------------------------------------------------
 35220                                  
 35221                                  	; 13/04/2024 - Retro DOS v5.0
 35222                                  	; PCDOS 7.1 IBMBIO.COM
 35223                                  	;;;
 35224                                  
 35225                                  CheckDoubleSpace:
 35226                                  
 35227                                  ;;	ifdef	dblspace_hooks
 35228                                  
 35229                                  ;	Now check for two special MagicDrv cases:
 35230                                  ;
 35231                                  ;       a) the last driver load was MagicDrv final placement:
 35232                                  ;	   -> add number of MagicDrv reserved drives to drivenumber
 35233                                  ;
 35234                                  ;       b) MagicDrv is currently in temporary home:
 35235                                  ;          -> call it to give it a chance to mount and shuffle drives
 35236                                  
 35237                                  	;cmp	byte [cs:MagicHomeFlag],0 ; already home?
 35238                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 35239 00002A4D 2EF606[6724]01          	test	byte [cs:MagicHomeFlag],1 ; already home?
 35240 00002A53 7545                    	jnz	short no_more_magic_calls ;  nothing more to do if so
 35241                                  
 35242                                  ;	Now inquire of driver whether it is present, and final located
 35243                                  
 35244                                  	;mov	ax,multMagicdrv ; 4A11h
 35245                                  	;mov	bx,MD_VERSION ; 0
 35246                                  	;int	2fh			; ch = number of MagicDrv drive letters
 35247                                  	;or	ax,ax			; is it there?
 35248                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 35249                                  	;;;
 35250 00002A55 E8FEEE                  	call	get_dblspace_version ; is it there?
 35251                                  	;jnz	short no_more_magic_calls ; done if not
 35252 00002A58 750B                    	jnz	short set_magichomeflag
 35253                                  	;;;
 35254                                  
 35255 00002A5A F7C20080                	test	dx,8000h		; is it final placed?
 35256 00002A5E 751C                    	jnz	short magic_not_yet_home ;  skip if not
 35257                                  
 35258                                  ;	Okay, now the driver is final placed!  Set the flag so we
 35259                                  ;	don't keep checking it, and add its number of drive letters
 35260                                  ;	to drivenumber.
 35261                                  
 35262                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 35263                                  	;mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 35264 00002A60 2E002E[8503]            	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 35265                                  					;  the drive number we'll pass to the
 35266                                  					;  next loadable block device.
 35267                                  	;jmp	short no_more_magic_calls ; and finished.
 35268                                  
 35269                                  	;;;
 35270                                  set_magichomeflag:
 35271 00002A65 2EC606[6724]01          	mov	byte [cs:MagicHomeFlag],1 ; set the flag!
 35272 00002A6B E918FB                  	jmp	coff	
 35273                                  	;;;
 35274                                  
 35275                                  ; 03/04/2019 - Retro DOS v4.0
 35276                                  
 35277                                  bad_bpb_size_sector:
 35278 00002A6E 5E                      	pop	si
 35279 00002A6F 07                      	pop	es
 35280 00002A70 BA[9250]                	mov	dx,badsiz_pre
 35281 00002A73 BB[7050]                	mov	bx,crlfm
 35282 00002A76 E8B91F                  	call	prnerr
 35283                                  
 35284 00002A79 E90AFB                  	jmp	coff
 35285                                  
 35286                                  magic_not_yet_home:
 35287 00002A7C 06                      	push	es
 35288 00002A7D 56                      	push	si
 35289                                  
 35290 00002A7E 2E8B0E[6403]            	mov	cx,[cs:memhi]		; pass it a work buffer
 35291 00002A83 2E8B16[A502]            	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 35292 00002A88 29CA                    	sub	dx,cx			;   for len dx (paragraphs)
 35293                                  
 35294 00002A8A BB0200                  	mov	bx,2
 35295 00002A8D 2EA0[6A19]              	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 35296                                  					;   by this many units
 35297                                  
 35298                                  ;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 35299 00002A91 B455                    	mov	ah,55h			; backdoor won't shuffle unless it
 35300                                  					;  sees this, to prevent bad things
 35301                                  					;  from happening if people run the
 35302                                  					;  new driver with an old BIOS
 35303 00002A93 2EFF1E[9003]            	call	far [cs:MagicBackdoor]
 35304                                  
 35305 00002A98 5E                      	pop	si
 35306 00002A99 07                      	pop	es
 35307                                  
 35308                                  ;no_more_magic_calls:
 35309                                  ;
 35310                                  ;;	endif
 35311                                  ;	retn
 35312                                  
 35313                                  	; 13/04/2024
 35314                                  	;;;
 35315                                  no_more_magic_calls:
 35316 00002A9A E9E9FA                  	jmp	coff
 35317                                  	;;;
 35318                                  
 35319                                  ;------------------------------------------------------------------------------
 35320                                  ; country command
 35321                                  ;      the syntax is:
 35322                                  ;	country=country id {,codepage {,path}}
 35323                                  ;	country=country id {,,path}	:default codepage id in dos
 35324                                  ;------------------------------------------------------------------------------
 35325                                  
 35326                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 35327                                  	; (SYSINIT:2663h)
 35328                                  tryq:
 35329 00002A9D 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 35330 00002AA0 7403                    	je	short tryq_cont
 35331                                  skip_it3:
 35332 00002AA2 E90D01                  	jmp	tryf
 35333                                  tryq_cont:
 35334                                  
 35335                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35336                                  ; (SYSINIT:297Eh)
 35337                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35338                                  ;%if 0
 35339                                  ;ifdef	MULTI_CONFIG
 35340 00002AA5 E8741B                  	call	query_user		; query the user if config_cmd
 35341 00002AA8 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 35342                                  ;endif
 35343                                  ;%endif ; 02/11/2022
 35344                                  
 35345                                  	; 31/12/2022
 35346                                  	;xor	bx,bx
 35347 00002AAA 31C9                    	xor	cx,cx
 35348                                  	; 14/12/2022
 35349                                  	; ds = cs
 35350                                  	; bx = 0
 35351                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 35352                                  	;mov	word [cs:p_code_page],0
 35353                                  	; 31/12/2022
 35354                                  	; cx = 0
 35355                                  	;mov	[cntry_drv],bl ; 0
 35356                                  	;mov	[p_code_page],bx ; 0
 35357 00002AAC 880E[DD4A]              	mov	[cntry_drv],cl ; 0
 35358 00002AB0 890E[7C22]              	mov	[p_code_page],cx ; 0	
 35359                                  
 35360 00002AB4 BF[4522]                	mov	di,cntry_parms
 35361                                  	;xor	cx,cx	; 31/12/2022
 35362                                  	; 03/01/2023
 35363                                  	;mov	dx,cx
 35364                                  do52:
 35365 00002AB7 E8AD03                  	call	sysinit_parse
 35366 00002ABA 730B                    	jnc	short if52		; parse error,check error code and
 35367                                  
 35368 00002ABC E8E000                  	call	cntry_error		; show message and end the search loop.
 35369                                  	; 14/12/2022
 35370                                  	; ds = cs
 35371 00002ABF C706[7A22]FFFF          	mov	word [p_cntry_code],-1
 35372                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 35373 00002AC5 EB34                    	jmp	short sr52
 35374                                  if52:
 35375 00002AC7 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 35376 00002ACA 742F                    	jz	short sr52		; then end the search loop
 35377                                  
 35378                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 35379                                  	; 14/12/2022
 35380                                  	; ds = cs
 35381 00002ACC 803E[1722]01            	cmp	byte [result_val],_$P_Number	
 35382                                  	;cmp	byte [cs:result_val],_$P_Number
 35383 00002AD1 7512                    	jnz	short if56
 35384                                  
 35385                                  	;;mov	ax,[cs:rw_dword]
 35386                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35387                                  	; 14/12/2022
 35388 00002AD3 A1[1B22]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 35389 00002AD6 83F901                  	cmp	cx,1
 35390 00002AD9 7505                    	jne	short if57
 35391                                  
 35392                                  	;mov	[cs:p_cntry_code],ax
 35393                                  	; 14/12/2022
 35394 00002ADB A3[7A22]                	mov	[p_cntry_code],ax
 35395                                  
 35396                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35397                                  	;jmp	short en57
 35398                                  	; 12/12/2022
 35399                                  	;jmp	short en56
 35400 00002ADE EBD7                    	jmp	short do52
 35401                                  if57:
 35402                                  	;mov	[cs:p_code_page],ax
 35403                                  	; 14/12/2022
 35404                                  	; ds = cs
 35405 00002AE0 A3[7C22]                	mov	[p_code_page],ax
 35406                                  en57:
 35407                                  	;jmp	short en56		; path entered
 35408                                  	; 12/12/2022
 35409 00002AE3 EBD2                    	jmp	short do52
 35410                                  if56:
 35411 00002AE5 1E                      	push	ds
 35412 00002AE6 06                      	push	es
 35413 00002AE7 56                      	push	si
 35414 00002AE8 57                      	push	di
 35415                                  
 35416 00002AE9 0E                      	push	cs
 35417 00002AEA 07                      	pop	es
 35418                                  
 35419                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 35420                                  	; 14/12/2022
 35421 00002AEB C536[1B22]              	lds	si,[rv_dword]
 35422 00002AEF BF[DD4A]                	mov	di,cntry_drv
 35423 00002AF2 E82C1F                  	call	move_asciiz
 35424                                  
 35425 00002AF5 5F                      	pop	di
 35426 00002AF6 5E                      	pop	si
 35427 00002AF7 07                      	pop	es
 35428 00002AF8 1F                      	pop	ds
 35429                                  en56:
 35430 00002AF9 EBBC                    	jmp	short do52
 35431                                  sr52:
 35432                                  	; 14/12/2022
 35433                                  	; ds = cs
 35434 00002AFB 833E[7A22]FF            	cmp	word [p_cntry_code],-1
 35435                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 35436 00002B00 7509                    	jne	short tryq_open
 35437 00002B02 E981FA                  	jmp	coff
 35438                                  
 35439                                  tryqbad:				;"invalid country code or code page"
 35440 00002B05 F9                      	stc
 35441 00002B06 BA[D950]                	mov     dx,badcountry
 35442 00002B09 EB79                    	jmp     tryqchkerr
 35443                                  
 35444                                  tryq_open:
 35445                                  	; 14/12/2022
 35446                                  	; ds = cs
 35447 00002B0B 803E[DD4A]00            	cmp	byte [cntry_drv],0
 35448                                  	;cmp	byte [cs:cntry_drv],0
 35449 00002B10 7405                    	je	short tryq_def
 35450 00002B12 BA[DD4A]                	mov	dx,cntry_drv
 35451 00002B15 EB03                    	jmp	short tryq_openit
 35452                                  
 35453                                  tryq_def:
 35454 00002B17 BA[DF4A]                	mov	dx,cntry_root
 35455                                  tryq_openit:
 35456 00002B1A B8003D                  	mov	ax,3D00h		;open a file
 35457 00002B1D F9                      	stc
 35458 00002B1E CD21                    	int	21h
 35459 00002B20 7242                    	jc	short tryqfilebad	;open failure
 35460                                  
 35461                                  	; 14/12/2022
 35462                                  	; ds = cs
 35463 00002B22 A3[5C03]                	mov	[cntryfilehandle],ax
 35464                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 35465 00002B25 89C3                    	mov	bx,ax
 35466 00002B27 A1[7A22]                	mov	ax,[p_cntry_code]
 35467 00002B2A 8B16[7C22]              	mov	dx,[p_code_page]
 35468                                  	;mov	ax,[cs:p_cntry_code]
 35469                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 35470                                  	;mov	cx,[cs:memhi]
 35471 00002B2E 8B0E[6403]              	mov	cx,[memhi]
 35472 00002B32 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 35473                                  					;M023
 35474                                  	; 14/12/2022
 35475                                  	; ds = cs
 35476 00002B36 3B0E[A502]              	cmp	cx,[ALLOCLIM]
 35477                                  	;cmp	cx,[cs:ALLOCLIM]
 35478 00002B3A 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 35479                                  
 35480 00002B3C BE[DD4A]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 35481 00002B3F 803C00                  	cmp	byte [si],0 		;default path?
 35482 00002B42 7502                    	jne	short tryq_set_for_dos
 35483                                  
 35484 00002B44 46                      	inc	si
 35485 00002B45 46                      	inc	si			;ds:si -> cntry_root
 35486                                  
 35487                                  tryq_set_for_dos:
 35488                                  	; 14/12/2022
 35489                                  	; ds = cs
 35490 00002B46 C43E[7902]              	les	di,[sysi_country]
 35491                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 35492 00002B4A 57                      	push	di			;save di
 35493                                  	;add	di,8
 35494 00002B4B 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 35495 00002B4E E8D01E                  	call	move_asciiz		;set the path to country.sys in dos.
 35496 00002B51 5F                      	pop	di			;es:di -> country info tab again.
 35497                                  
 35498                                  	; 14/12/2022	
 35499 00002B52 8B0E[6403]              	mov	cx,[memhi]
 35500                                  	;mov	cx,[cs:memhi]
 35501 00002B56 8ED9                    	mov	ds,cx
 35502 00002B58 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 35503 00002B5A E8601D                  	call	setdoscountryinfo	;now do the job!!!
 35504                                  	; ds <> cs ; 14/12/2022
 35505 00002B5D 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 35506                                  
 35507 00002B5F 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 35508 00002B62 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 35509                                  
 35510                                  tryqfilebad:
 35511 00002B64 0E                      	push	cs
 35512 00002B65 07                      	pop	es
 35513 00002B66 2E803E[DD4A]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 35514 00002B6C 7405                    	je	short tryqdefbad
 35515                                  
 35516 00002B6E BE[DD4A]                	mov	si,cntry_drv
 35517 00002B71 EB03                    	jmp	short tryqbadload
 35518                                  
 35519                                  tryqdefbad:				;default file has been used.
 35520 00002B73 BE[DF4A]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 35521                                  tryqbadload:
 35522 00002B76 E8B31E                  	call	badload 		;ds will be restored to sysinit_seg
 35523                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35524                                  	; (SYSINIT:2A69h)
 35525 00002B79 8B0E[A302]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 35526                                  	;mov	cx,[cs:CONFBOT]
 35527                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35528                                  	;mov	cx,[cs:top_of_cdss]
 35529                                  	; 11/12/2022
 35530                                  	; ds = cs
 35531                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 35532 00002B7D 8EC1                    	mov	es,cx			;restore es -> confbot.
 35533 00002B7F EB13                    	jmp	short coffj4
 35534                                  
 35535                                  tryqmemory:
 35536 00002B81 BA[1C51]                	mov	dx,insufmemory
 35537                                  tryqchkerr:
 35538                                  	;mov	cx,[cs:CONFBOT]
 35539                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35540                                  	;mov	cx,[cs:top_of_cdss]
 35541                                  	; 12/12/2022
 35542 00002B84 0E                      	push	cs
 35543 00002B85 1F                      	pop	ds
 35544                                  	; 31/12/2022 - Retro DOS v4.2
 35545 00002B86 8B0E[A302]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 35546                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 35547 00002B8A 8EC1                    	mov	es,cx			;restore es -> confbot seg
 35548                                  	;push	cs
 35549                                  	;pop	ds			;restore ds to sysinit_seg
 35550 00002B8C 7306                    	jnc	short coffj4		;if no error,then exit
 35551                                  
 35552 00002B8E E8C31E                  	call	print			;else show error message
 35553 00002B91 E82603                  	call	error_line
 35554                                  coffj4:
 35555                                  	;mov	bx,[cs:cntryfilehandle]
 35556                                  	; 11/12/2022
 35557                                  	; ds = cs
 35558 00002B94 8B1E[5C03]              	mov	bx,[cntryfilehandle]
 35559 00002B98 B43E                    	mov	ah,3Eh
 35560 00002B9A CD21                    	int	21h			;close a file. don't care even if it fails.
 35561 00002B9C E9E7F9                  	jmp	coff
 35562                                  
 35563                                  ;--------------------------------------------
 35564                                  
 35565                                  cntry_error:
 35566                                  
 35567                                  ;function: show "invalid country code or code page" messages,or
 35568                                  ;		"error in country command" depending on the error code
 35569                                  ;		in ax returned by sysparse;
 35570                                  ;in:	ax - error code
 35571                                  ;	ds - sysinitseg
 35572                                  ;	es - confbot
 35573                                  ;out:	show message.  dx destroyed.
 35574                                  
 35575 00002B9F 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 35576 00002BA2 7505                    	jne	short if64
 35577 00002BA4 BA[D950]                	mov	dx,badcountry		;"invalid country code or code page"
 35578 00002BA7 EB03                    	jmp	short en64
 35579                                  if64:
 35580 00002BA9 BA[FF50]                	mov	dx,badcountrycom	;"error in contry command"
 35581                                  en64:
 35582 00002BAC E8A51E                  	call	print
 35583                                  	;call	error_line
 35584                                  	;retn
 35585                                  	; 11/12/2022
 35586 00002BAF E90803                  	jmp	error_line
 35587                                  
 35588                                  ;------------------------------------------------------------------------------
 35589                                  ; files command
 35590                                  ;------------------------------------------------------------------------------
 35591                                  
 35592                                  ;******************************************************************************
 35593                                  ; function: parse the parameters of files= command.			      *
 35594                                  ;									      *
 35595                                  ; input :								      *
 35596                                  ;	es:si -> parameters in command line.				      *
 35597                                  ; output:								      *
 35598                                  ;	variable files set.						      *
 35599                                  ;									      *
 35600                                  ; subroutines to be called:						      *
 35601                                  ;	sysinit_parse							      *
 35602                                  ; logic:								      *
 35603                                  ; {									      *
 35604                                  ;	set di points to files_parms;					      *
 35605                                  ;	set dx,cx to 0; 						      *
 35606                                  ;	while (end of command line)					      *
 35607                                  ;	{ sysinit_parse;						      *
 35608                                  ;	  if (no error) then						      *
 35609                                  ;	     files = result_val._$P_picked_val				      *
 35610                                  ;	  else								      *
 35611                                  ;	     error exit;						      *
 35612                                  ;	};								      *
 35613                                  ; };									      *
 35614                                  ;									      *
 35615                                  ;******************************************************************************
 35616                                  
 35617                                  tryf:
 35618 00002BB2 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 35619 00002BB5 7528                    	jne	short tryl
 35620                                  
 35621                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35622                                  ; (SYSINIT:2AABh)
 35623                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35624                                  ;%if 0
 35625                                  ;ifdef	MULTI_CONFIG
 35626 00002BB7 E8621A                  	call	query_user              ; query the user if config_cmd
 35627 00002BBA 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 35628                                  ;endif
 35629                                  ;%endif ; 30/10/2022
 35630                                  
 35631                                  	; 14/12/2022
 35632                                  	; ds = cs
 35633                                  
 35634 00002BBC BF[7E22]                	mov	di,files_parms
 35635 00002BBF 31C9                    	xor	cx,cx
 35636                                  	; 03/01/2023
 35637                                  	;mov	dx,cx
 35638                                  do67:
 35639 00002BC1 E8A302                  	call	sysinit_parse
 35640 00002BC4 7303                    	jnc	short if67		; parse error
 35641                                  	;call	badparm_p		;  and show messages and end the search loop.
 35642                                  	;jmp	short sr67
 35643                                  	; 03/01/2023
 35644 00002BC6 E98D01                  	jmp	badparm_p_coff
 35645                                  if67:
 35646 00002BC9 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 35647 00002BCC 7408                    	je	short en67		; then end the $endloop
 35648                                  
 35649                                  	; 14/12/2022
 35650                                  	; ds = cs
 35651                                  	;;mov	al,[cs:rv_dword]
 35652                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35653                                  	;mov	[cs:p_files],al		; save it temporarily
 35654                                  	;mov	al,[rv_dword]
 35655 00002BCE A0[1B22]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 35656 00002BD1 A2[9D22]                	mov	[p_files],al
 35657                                  
 35658 00002BD4 EBEB                    	jmp	short do67
 35659                                  en67:
 35660                                  	; 14/12/2022
 35661                                  	; ds = cs
 35662 00002BD6 A0[9D22]                	mov	al,[p_files]
 35663 00002BD9 A2[9F02]                	mov	[FILES],al	
 35664                                  	;mov	al,[cs:p_files]
 35665                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 35666                                  sr67:
 35667 00002BDC E9A7F9                  	jmp	coff
 35668                                  
 35669                                  ; 04/04/2019 - Retro DOS v4.0
 35670                                  
 35671                                  ;------------------------------------------------------------------------------
 35672                                  ; lastdrive command
 35673                                  ;------------------------------------------------------------------------------
 35674                                  
 35675                                  ;******************************************************************************
 35676                                  ; function: parse the parameters of lastdrive= command. 		      *
 35677                                  ;									      *
 35678                                  ; input :								      *
 35679                                  ;	es:si -> parameters in command line.				      *
 35680                                  ; output:								      *
 35681                                  ;	set the variable num_cds.					      *
 35682                                  ;									      *
 35683                                  ; subroutines to be called:						      *
 35684                                  ;	sysinit_parse							      *
 35685                                  ; logic:								      *
 35686                                  ; {									      *
 35687                                  ;	set di points to ldrv_parms;					      *
 35688                                  ;	set dx,cx to 0; 						      *
 35689                                  ;	while (end of command line)					      *
 35690                                  ;	{ sysinit_parse;						      *
 35691                                  ;	  if (no error) then						      *
 35692                                  ;	     set num_cds to the returned value; 			      *
 35693                                  ;	  else	/*error exit*/						      *
 35694                                  ;	     error exit;						      *
 35695                                  ;	};								      *
 35696                                  ; };									      *
 35697                                  ;									      *
 35698                                  ;******************************************************************************
 35699                                  
 35700                                  tryl:
 35701 00002BDF 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 35702 00002BE2 7528                    	jne	short tryp
 35703                                  
 35704                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35705                                  ; (SYSINIT:2AE0h)
 35706                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35707                                  ;%if 0
 35708 00002BE4 E8351A                  	call	query_user      ; query the user if config_cmd
 35709 00002BE7 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 35710                                  ;endif
 35711                                  ;%endif ; 30/10/2022
 35712                                  
 35713                                  	; 14/12/2022
 35714                                  	; ds = cs
 35715                                  
 35716 00002BE9 BF[D522]                	mov	di,ldrv_parms
 35717 00002BEC 31C9                    	xor	cx,cx
 35718                                  	; 03/01/2023
 35719                                  	;mov	dx,cx
 35720                                  do73:
 35721 00002BEE E87602                  	call	sysinit_parse
 35722 00002BF1 7303                    	jnc	short if73	; parse error
 35723                                  	;call	badparm_p	;  and show messages and end the search loop.
 35724                                  	;jmp	short sr73
 35725                                  	; 03/01/2023
 35726 00002BF3 E96001                  	jmp	badparm_p_coff
 35727                                  if73:
 35728 00002BF6 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 35729 00002BF9 7408                    	je	short en73	; then end the $endloop
 35730                                  
 35731                                  	; 14/12/2022
 35732                                  	; ds = cs
 35733                                  	;;mov	al,[cs:rv_dword]
 35734                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 35735                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 35736                                  
 35737                                  	;mov	al,[rv_dword]
 35738 00002BFB A0[1B22]                	mov	al,[rv_byte]
 35739 00002BFE A2[E922]                	mov	[p_ldrv],al
 35740                                  
 35741 00002C01 EBEB                    	jmp	short do73
 35742                                  en73:
 35743                                  	; 14/12/2022
 35744                                  	; ds = cs
 35745 00002C03 A0[E922]                	mov	al,[p_ldrv]
 35746 00002C06 A2[A202]                	mov	[NUM_CDS],al
 35747                                  	;mov	al,[cs:p_ldrv]
 35748                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 35749                                  sr73:
 35750 00002C09 E97AF9                  	jmp	coff
 35751                                  
 35752                                  ;--------------------------------------------------------------------------
 35753                                  ; setting drive parameters
 35754                                  ;--------------------------------------------------------------------------
 35755                                  
 35756                                  tryp:
 35757 00002C0C 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 35758 00002C0F 7516                    	jne	short tryk
 35759                                  
 35760                                  ; 31/12/2022 - Retro DOS v4.2
 35761                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35762                                  ;%if 0
 35763                                  ;ifdef	MULTI_CONFIG
 35764 00002C11 E8081A                  	call	query_user      ; query the user if config_cmd
 35765 00002C14 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 35766                                  ;endif
 35767                                  ;%endif ; 30/10/2022
 35768                                  
 35769 00002C16 E8EC0E                  	call	parseline
 35770 00002C19 7209                    	jc	short trypbad
 35771 00002C1B E8050E                  	call	setparms
 35772 00002C1E E8470E                  	call	diddleback
 35773                                  
 35774                                  ; No error check here, because setparms and diddleback have no error 
 35775                                  ; returns, and setparms as coded now can return with carry set. 
 35776                                  ;       jc	short trypbad
 35777                                  
 35778                                  	; 12/12/2022
 35779                                  	; cf = 0
 35780                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35781                                  	;jc	short trypbad
 35782                                  	
 35783 00002C21 E962F9                  	jmp	coff
 35784                                  trypbad:
 35785 00002C24 E95F02                  	jmp	badop
 35786                                  
 35787                                  ;--------------------------------------------------------------------------
 35788                                  ; setting internal stack parameters
 35789                                  ; stacks=m,n where
 35790                                  ;	m is the number of stacks (range 8 to 64,default 9)
 35791                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 35792                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 35793                                  ;	any combinations that are not within the specified limits will
 35794                                  ;	result in "unrecognized command" error.
 35795                                  ;--------------------------------------------------------------------------
 35796                                  
 35797                                  ;**************************************************************************
 35798                                  ;									  *
 35799                                  ; function: parse the parameters of stacks= command.			  *
 35800                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 35801                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 35802                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 35803                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 35804                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 35805                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 35806                                  ;	    (or if "0,0" pair has been entered.)			  *
 35807                                  ; input :								  *
 35808                                  ;	es:si -> parameters in command line.				  *
 35809                                  ; output:								  *
 35810                                  ;	set the variables stack_count,stack_size.			  *
 35811                                  ;									  *
 35812                                  ; subroutines to be called:						  *
 35813                                  ;	sysinit_parse							  *
 35814                                  ; logic:								  *
 35815                                  ; {									  *
 35816                                  ;	set di points to stks_parms;					  *
 35817                                  ;	set dx,cx to 0; 						  *
 35818                                  ;	while (end of command line)					  *
 35819                                  ;	{ sysinit_parse;						  *
 35820                                  ;	  if (no error) then						  *
 35821                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 35822                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 35823                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 35824                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 35825                                  ;	     }								  *
 35826                                  ;	  else	/*error exit*/						  *
 35827                                  ;	     error exit;						  *
 35828                                  ;	};								  *
 35829                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 35830                                  ;	if o.k.,then set stack_count,stack_size;			  *
 35831                                  ;	 else error_exit;						  *
 35832                                  ; };									  *
 35833                                  ;**************************************************************************
 35834                                  
 35835                                  tryk:
 35836                                          ;if      stacksw
 35837                                  
 35838 00002C27 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 35839 00002C2A 7402                    	je	short do_tryk
 35840                                  skip_it4:
 35841 00002C2C EB79                    	jmp	short trys	; 15/12/2022
 35842                                  do_tryk:
 35843                                  
 35844                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35845                                  ; (SYSINIT:2B33h)
 35846                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35847                                  ;%if 0
 35848                                  ;ifdef	MULTI_CONFIG
 35849 00002C2E E8EB19                         call	query_user              ; query the user if config_cmd
 35850 00002C31 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 35851                                  ;endif
 35852                                  ;%endif	; 30/10/2022
 35853                                  
 35854                                  	; 14/12/2022
 35855                                  	; ds = cs
 35856                                  
 35857 00002C33 BF[EA22]                	mov	di,stks_parms
 35858 00002C36 31C9                    	xor	cx,cx
 35859                                  	; 03/01/2023
 35860                                  	;mov	dx,cx
 35861                                  do79:
 35862 00002C38 E82C02                  	call	sysinit_parse
 35863 00002C3B 730B                    	jnc	short if79		; parse error
 35864                                  
 35865 00002C3D BA[8B51]                	mov	dx,badstack		; "invalid stack parameter"
 35866 00002C40 E8111E                  	call	print			;  and show messages and end the search loop.
 35867 00002C43 E87402                  	call	error_line
 35868                                  	;jmp	sr79
 35869                                  	; 11/12/2022
 35870 00002C46 EB39                    	jmp	short sr79
 35871                                  if79:
 35872 00002C48 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 35873 00002C4B 7412                    	je	short en79		; then end the $endloop
 35874                                  
 35875                                  	; 14/12/2022
 35876                                  	; ds = cs
 35877                                  
 35878                                  	;;mov	ax,[cs:rv_dword]
 35879                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35880                                  	;mov	ax,[rv_dword]
 35881 00002C4D A1[1B22]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 35882                                  
 35883 00002C50 83F901                  	cmp	cx,1
 35884 00002C53 7505                    	jne	short if83
 35885                                  
 35886                                  	; 14/12/2022
 35887                                  	;mov	[cs:p_stack_count],ax
 35888                                  	;jmp	short en83
 35889 00002C55 A3[1F23]                	mov	[p_stack_count],ax
 35890 00002C58 EBDE                    	jmp	short do79
 35891                                  if83:
 35892                                  	; 14/12/2022
 35893                                  	;mov	[cs:p_stack_size],ax
 35894 00002C5A A3[2123]                	mov	[p_stack_size],ax
 35895                                  en83:
 35896 00002C5D EBD9                    	jmp	short do79
 35897                                  en79:
 35898                                  	; 14/12/2022
 35899                                  	; ds = cs
 35900 00002C5F A1[1F23]                	mov	ax,[p_stack_count]
 35901 00002C62 09C0                    	or	ax,ax
 35902 00002C64 741E                    	jz	short if87		
 35903                                  
 35904                                  	; 14/12/2022
 35905                                  	;cmp	word [p_stack_count],0
 35906                                  	;;cmp	word [cs:p_stack_count],0
 35907                                  	;je	short if87
 35908                                  
 35909                                  	; 14/12/2022
 35910 00002C66 83F808                  	cmp	ax, mincount ; 8
 35911                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 35912                                  	; 15/12/2022
 35913 00002C69 721F                    	jb	short en87
 35914 00002C6B 833E[2123]20            	cmp	word [p_stack_size],minsize ; 32
 35915                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 35916                                  	; 15/12/2022
 35917 00002C70 7218                    	jb	short en87
 35918                                  if94:
 35919                                  	; 14/12/2022
 35920                                  	; ds = cs
 35921                                  	; ax = [p_stack_count]
 35922                                  	;mov	ax,[p_stack_count]
 35923                                  	;;mov	ax,[cs:p_stack_count]
 35924 00002C72 A3[8C02]                	mov	[stack_count],ax
 35925                                  	;mov	[cs:stack_count],ax
 35926                                  	;mov	ax,[cs:p_stack_size]
 35927 00002C75 A1[2123]                	mov	ax,[p_stack_size]
 35928                                  	;mov	[cs:stack_size],ax
 35929 00002C78 A3[8E02]                	mov	[stack_size],ax
 35930                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 35931 00002C7B C706[9002]FFFF          	mov	word [stack_addr],-1
 35932                                  sr79:
 35933 00002C81 E902F9                  	jmp	coff
 35934                                  
 35935                                  if87:
 35936                                  	; 14/12/2022
 35937 00002C84 3906[2123]              	cmp	[p_stack_size],ax ; 0
 35938 00002C88 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 35939                                  	;cmp	word [cs:p_stack_size],0
 35940                                  	;je	short if94
 35941                                  en87:
 35942                                  	; 15/12/2022
 35943                                  	; ([p_stack_count] is invalid, use default values)
 35944                                  	; 14/12/2022
 35945                                  	; ds = cs
 35946 00002C8A C706[8C02]0900          	mov	word [stack_count],defaultcount ; 9
 35947 00002C90 C706[8E02]8000          	mov	word [stack_size],defaultsize ; 128
 35948 00002C96 C706[9002]0000          	mov	word [stack_addr],0
 35949                                  	;mov	word [cs:stack_count],defaultcount ; 9
 35950                                  	;				; reset to default value.
 35951                                  	;mov	word [cs:stack_size],defaultsize ; 128
 35952                                  	;mov	word [cs:stack_addr],0
 35953                                  
 35954 00002C9C BA[8B51]                	mov	dx,badstack
 35955 00002C9F E8B21D                  	call	print
 35956 00002CA2 E81502                  	call	error_line
 35957 00002CA5 EBDA                    	jmp	short sr79
 35958                                  
 35959                                  ; 15/12/2022
 35960                                  %if 0
 35961                                  	mov	di,stks_parms
 35962                                  	xor	cx,cx
 35963                                  	; 03/01/2023
 35964                                  	;mov	dx,cx
 35965                                  do79:
 35966                                  	call	sysinit_parse
 35967                                  	jnc	short if79		; parse error
 35968                                  
 35969                                  	mov	dx,badstack		; "invalid stack parameter"
 35970                                  	call	print			;  and show messages and end the search loop.
 35971                                  	call	error_line
 35972                                  	;jmp	sr79
 35973                                  	; 11/12/2022
 35974                                  	jmp	short sr79
 35975                                  if79:
 35976                                  	cmp	ax,_$P_RC_EOL		; end of line?
 35977                                  	je	short en79		; then end the $endloop
 35978                                  
 35979                                  	;mov	ax,[cs:rv_dword]
 35980                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 35981                                  	cmp	cx,1
 35982                                  	jne	short if83
 35983                                  
 35984                                  	mov	[cs:p_stack_count],ax
 35985                                  	jmp	short en83
 35986                                  if83:
 35987                                  	mov	[cs:p_stack_size],ax
 35988                                  en83:
 35989                                  	jmp	short do79
 35990                                  en79:
 35991                                  	cmp	word [cs:p_stack_count],0
 35992                                  	je	short if87
 35993                                  
 35994                                  	cmp	word [cs:p_stack_count],mincount ; 8
 35995                                  	jb	short ll88
 35996                                  	cmp	word [cs:p_stack_size],minsize ; 32
 35997                                  	jnb	short if88
 35998                                  ll88:
 35999                                  	mov	word [cs:p_stack_count],-1 ; invalid
 36000                                  if88:
 36001                                  	jmp	short en87
 36002                                  
 36003                                  	; 11/12/2022
 36004                                  if94:
 36005                                  	mov	ax,[cs:p_stack_count]
 36006                                  	mov	[cs:stack_count],ax
 36007                                  	mov	ax,[cs:p_stack_size]
 36008                                  	mov	[cs:stack_size],ax
 36009                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 36010                                  sr79:
 36011                                  	jmp	coff
 36012                                  
 36013                                  if87:
 36014                                  	cmp	word [cs:p_stack_size],0
 36015                                  	je	short en87
 36016                                  	mov	word [cs:p_stack_count],-1 ; invalid
 36017                                  en87:
 36018                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 36019                                  	jne	short if94
 36020                                  
 36021                                  	mov	word [cs:stack_count],defaultcount ; 9
 36022                                  					; reset to default value.
 36023                                  	mov	word [cs:stack_size],defaultsize ; 128
 36024                                  	mov	word [cs:stack_addr],0
 36025                                  
 36026                                  	mov	dx,badstack
 36027                                  	call	print
 36028                                  	call	error_line
 36029                                  	jmp	short sr79
 36030                                  
 36031                                  %endif
 36032                                  
 36033                                  ; 11/12/2022
 36034                                  %if 0 
 36035                                  if94:
 36036                                  	mov	ax,[cs:p_stack_count]
 36037                                  	mov	[cs:stack_count],ax
 36038                                  	mov	ax,[cs:p_stack_size]
 36039                                  	mov	[cs:stack_size],ax
 36040                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 36041                                  sr79:
 36042                                  	jmp	coff
 36043                                  %endif
 36044                                  	;endif
 36045                                  
 36046                                  ;------------------------------------------------------------------------
 36047                                  ; shell command
 36048                                  ;------------------------------------------------------------------------
 36049                                  
 36050                                  trys:
 36051 00002CA7 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 36052 00002CAA 755A                    	jne	short tryx
 36053                                  
 36054                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36055                                  ; (SYSINIT:2BE1h)
 36056                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36057                                  ;%if 0
 36058                                  ;ifdef	MULTI_CONFIG
 36059 00002CAC E86D19                  	call	query_user              ; query the user if config_cmd
 36060 00002CAF 7255                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 36061                                  	; 14/04/2024
 36062                                  	; ds = cs
 36063                                  	;mov	byte [cs:newcmd],1
 36064 00002CB1 C606[2A4B]01            	mov	byte [newcmd],1
 36065                                  ;endif
 36066                                  ;%endif ; 30/10/2022
 36067                                  
 36068                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 36069                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36070                                  	;mov	byte [cs:command_line+1],0
 36071                                  	; 15/12/2022
 36072                                  	; ds = cs
 36073                                  	; 08/09/2023
 36074                                  	;mov	byte [command_line+1],0
 36075 00002CB6 C706[BB4B]0000          	mov	word [command_line],0	; zap length,first byte of command-line
 36076                                  
 36077 00002CBC BF[2E4B]                        mov     di,commnd+1		; we already have the first char
 36078 00002CBF 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 36079                                  storeshell:
 36080 00002CC2 E8EA1A                  	call	getchr
 36081 00002CC5 08C0                            or      al,al                   ; this is the normal case: "organize"
 36082 00002CC7 741C                            jz	short getshparms	; put a ZERO right after the filename
 36083                                  
 36084 00002CC9 3C20                            cmp     al," "                  ; this may happen if there are no args
 36085 00002CCB 7209                            jb	short endofshell	; I suppose...
 36086 00002CCD 8805                    	mov	[di],al
 36087 00002CCF 47                      	inc	di
 36088                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 36089                                          ;jb	short storeshell	; commnd (the filename)
 36090                                          ;jmp	short endofshell
 36091                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36092                                  	;jmp	short storeshell
 36093                                  	; 03/01/2023
 36094 00002CD0 81FF[6C4B]              	cmp	di,commnd+63		; this makes sure we don't overflow
 36095 00002CD4 72EC                            jb	short storeshell	; commnd (the filename)
 36096                                  	;jmp	short endofshell
 36097                                  
 36098                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36099                                  ;getshparms:
 36100                                  ;	mov     byte [di],0		; zero-terminate the filename
 36101                                  ;	mov     di,command_line+1	; prepare to process the command-line
 36102                                  ;
 36103                                  ;parmloop:
 36104                                  ;	call	getchr
 36105                                  ;	cmp	al," "
 36106                                  ;	jb	short endofparms
 36107                                  ;	mov	[di],al
 36108                                  ;	inc	di
 36109                                  ;	cmp     di,command_line+126
 36110                                  ;	jb	short parmloop
 36111                                  ;endofparms:
 36112                                  ;	mov     cx,di
 36113                                  ;	sub     cx,command_line+1
 36114                                  ;	mov     [cs:command_line],cl
 36115                                  ;
 36116                                  ;endofshell:
 36117                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 36118                                  ;					; the command-line as the case may be)
 36119                                  ;skipline:
 36120                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 36121                                  ;       je	short endofline		; the line: watch for ever-present LF
 36122                                  ;call	getchr
 36123                                  ;       jnc	short skipline		; keep it up as long as there are chars
 36124                                  ;
 36125                                  ;endofline:
 36126                                  ;       jmp     conflp
 36127                                  
 36128                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36129                                  endofshell:
 36130 00002CD6 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 36131                                  					; the command-line as the case may be)
 36132                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36133                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 36134                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 36135                                  	;call	getchr
 36136                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 36137 00002CD9 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 36138 00002CDB 7405                    	je	short endofline		; the line: watch for ever-present LF
 36139 00002CDD E8CF1A                  	call	getchr
 36140                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 36141                                  	; (SYSINIT:2C3Ah)
 36142 00002CE0 73F7                    	jnb	short skipline
 36143                                  	
 36144                                  endofline:
 36145 00002CE2 E94AF8                  	jmp     conflp
 36146                                  
 36147                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36148                                  getshparms:
 36149                                  	; 18/12/2022
 36150                                  	; al = 0
 36151 00002CE5 8805                    	mov	[di],al ; 0
 36152                                  	;mov	byte [di],0		; zero-terminate the filename
 36153 00002CE7 BF[BC4B]                	mov     di,command_line+1	; prepare to process the command-line
 36154                                  parmloop:
 36155 00002CEA E8C21A                  	call	getchr
 36156 00002CED 3C20                    	cmp	al," " ; 20h
 36157                                  	;jb	short endofshell
 36158                                  	; 03/01/2023
 36159 00002CEF 7209                    	jb	short endofparms
 36160                                  
 36161 00002CF1 8805                    	mov	[di],al
 36162 00002CF3 47                      	inc	di
 36163                                  	;jmp	short parmloop
 36164                                  	; 03/01/2023 - Retro DOS v4.2
 36165 00002CF4 81FF[394C]              	cmp     di,command_line+126
 36166 00002CF8 72F0                    	jb	short parmloop
 36167                                  
 36168                                  	; 03/01/2023 - Retro DOS v4.2
 36169                                  endofparms:
 36170 00002CFA 89F9                    	mov	cx,di
 36171 00002CFC 81E9[BC4B]              	sub	cx,command_line+1
 36172                                  	;mov	[cs:command_line],cl
 36173                                  	; 03/01/2023
 36174 00002D00 880E[BB4B]              	mov	[command_line],cl
 36175 00002D04 EBD0                    	jmp	short endofshell
 36176                                  
 36177                                  ;------------------------------------------------------------------------
 36178                                  ; fcbs command
 36179                                  ;------------------------------------------------------------------------
 36180                                  
 36181                                  ;************************************************************************
 36182                                  ; function: parse the parameters of fcbs= command.			*
 36183                                  ;									*
 36184                                  ; input :								*
 36185                                  ;	es:si -> parameters in command line.				*
 36186                                  ; output:								*
 36187                                  ;	set the variables fcbs,keep.					*
 36188                                  ;									*
 36189                                  ; subroutines to be called:						*
 36190                                  ;	sysinit_parse							*
 36191                                  ; logic:								*
 36192                                  ; {									*
 36193                                  ;	set di points to fcbs_parms;					*
 36194                                  ;	set dx,cx to 0; 						*
 36195                                  ;	while (end of command line)					*
 36196                                  ;	{ sysparse;							*
 36197                                  ;	  if (no error) then						*
 36198                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 36199                                  ;		   fcbs = result_val._$P_picked_val;			*
 36200                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 36201                                  ;		   keep = result_val._$P_picked_val;			*
 36202                                  ;	     }								*
 36203                                  ;	  else	/*error exit*/						*
 36204                                  ;	     error exit;						*
 36205                                  ;	};								*
 36206                                  ; };									*
 36207                                  ;************************************************************************
 36208                                  
 36209                                  tryx:
 36210 00002D06 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 36211                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36212 00002D09 7534                    	jne	short try1
 36213                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36214                                  	;jne	short tryy	; comment command
 36215                                  
 36216                                  ; 31/12/2022 - Retro DOS v4.2
 36217                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36218                                  ;%if 0
 36219                                  ;ifdef	MULTI_CONFIG
 36220 00002D0B E80E19                  	call	query_user      ; query the user if config_cmd
 36221 00002D0E 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 36222                                  ;endif
 36223                                  ;%endif ; 30/10/2022
 36224                                  
 36225 00002D10 BF[9E22]                	mov	di,fcbs_parms
 36226 00002D13 31C9                    	xor	cx,cx
 36227                                  	; 03/01/2023
 36228                                  	;mov	dx,cx
 36229                                  do98:
 36230 00002D15 E84F01                  	call	sysinit_parse
 36231                                          ; 03/01/2023
 36232                                  	;jnc	short if98	; parse error
 36233                                          ;call	badparm_p	;  and show messages and end the search loop.
 36234                                  	;jmp	short sr98
 36235                                  	;------------------------
 36236                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36237 00002D18 723C                    	jc	short badparm_p_coff
 36238                                  if98:
 36239 00002D1A 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 36240 00002D1D 7412                    	je	short en98	; then end the $endloop
 36241                                  
 36242                                  	;;mov	al,[cs:rv_dword]
 36243                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 36244                                  	; 15/12/2022
 36245                                  	; ds = cs
 36246 00002D1F A0[1B22]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 36247 00002D22 83F901                  	cmp	cx,1		; the first positional?
 36248 00002D25 7505                    	jne	short if102
 36249                                  	;mov	[cs:p_fcbs],al
 36250                                  	; 15/12/2022
 36251 00002D27 A2[D322]                	mov	[p_fcbs],al
 36252                                  	;jmp	short en102
 36253 00002D2A EBE9                    	jmp	short do98
 36254                                  if102:
 36255                                  	;mov	[cs:p_keep],al
 36256                                  	; 15/12/2022
 36257 00002D2C A2[D422]                	mov	[p_keep],al
 36258                                  en102:
 36259 00002D2F EBE4                    	jmp	short do98
 36260                                  en98:
 36261                                  	; 15/12/2022
 36262                                  	; ds = cs
 36263 00002D31 A0[D322]                	mov	al,[p_fcbs]
 36264 00002D34 A2[A002]                	mov	[FCBS],al
 36265 00002D37 C606[A102]00            	mov	byte [KEEP],0
 36266                                  	;mov	al,[cs:p_fcbs]	 ; M017
 36267                                  	;mov	[cs:FCBS],al	 ; M017
 36268                                  	;mov	byte [cs:KEEP],0 ; M017
 36269                                  sr98:
 36270 00002D3C E947F8                  	jmp	coff
 36271                                  
 36272                                  ; 31/12/2022 - Retro DOS v4.2
 36273                                  %if 0
 36274                                  
 36275                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36276                                  ;-------------------------------------------------------------------------
 36277                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 36278                                  ;		line number
 36279                                  ;-------------------------------------------------------------------------
 36280                                  
 36281                                  tryy:
 36282                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 36283                                  	jne	short try0
 36284                                  
 36285                                  donothing:
 36286                                  	; 15/12/2022
 36287                                  	; ds = cs
 36288                                  	dec	word [chrptr]
 36289                                  	inc	word [count]
 36290                                  	; 02/11/2022
 36291                                  	;dec	word [cs:chrptr]
 36292                                  	;inc	word [cs:count]
 36293                                  
 36294                                  	jmp	coff
 36295                                  
 36296                                  ;------------------------------------------------------------------------
 36297                                  ; rem command
 36298                                  ;------------------------------------------------------------------------
 36299                                  
 36300                                  try0:				; do nothing with this line.
 36301                                  	cmp     ah,CONFIG_REM ; '0'
 36302                                  	je	short donothing
 36303                                  
 36304                                  %endif
 36305                                  
 36306                                  ; 07/04/2019 - Retro DOS v4.0
 36307                                  
 36308                                  ;-----------------------------------------------------------------------
 36309                                  ; switches command
 36310                                  ;-----------------------------------------------------------------------
 36311                                  
 36312                                  ;***********************************************************************
 36313                                  ;								       *
 36314                                  ; function: parse the option switches specified.		       *
 36315                                  ; note - this command is intended for the future use also.	       *
 36316                                  ; when we need to set system data flag,use this command.	       *
 36317                                  ;								       *
 36318                                  ; input :							       *
 36319                                  ;	es:si -> parameters in command line.			       *
 36320                                  ; output:							       *
 36321                                  ;	p_swit_k set if /k option chosen.			       *
 36322                                  ;								       *
 36323                                  ; subroutines to be called:					       *
 36324                                  ;	sysinit_parse						       *
 36325                                  ; logic:							       *
 36326                                  ; {								       *
 36327                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 36328                                  ;	set dx,cx to 0; 					       *
 36329                                  ;	while (end of command line)				       *
 36330                                  ;	{ sysinit_parse;					       *
 36331                                  ;	  if (no error) then					       *
 36332                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 36333                                  ;		    p_swit_k = 1				       *
 36334                                  ;	       endif						       *
 36335                                  ;	  else {show error message;error exit}			       *
 36336                                  ;	};							       *
 36337                                  ; };								       *
 36338                                  ;								       *
 36339                                  ;***********************************************************************
 36340                                  
 36341                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 36342                                  
 36343                                  try1:
 36344 00002D3F 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 36345 00002D42 7403                    	je	short do_try1	; switches= command entered?
 36346                                  skip_it5:
 36347                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36348                                  	; (SYSINIT:2C8Ah)
 36349 00002D44 E98E00                  	jmp	tryv
 36350                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36351                                  	;jmp	tryz
 36352                                  
 36353                                  do_try1:
 36354                                  
 36355                                  ; 31/12/2022 - Retro DOS v4.2
 36356                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36357                                  ;%if 0
 36358                                  ;ifdef	MULTI_CONFIG
 36359 00002D47 E8D218                  	call	query_user      ; query the user if config_cmd
 36360 00002D4A 72F8                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 36361                                  ;endif
 36362                                  ;%endif ; 30/10/2022
 36363                                  
 36364 00002D4C BF[3823]                	mov	di,swit_parms
 36365 00002D4F 31C9                    	xor	cx,cx
 36366                                  	; 03/01/2023
 36367                                  	;mov	dx,cx
 36368                                  do110:
 36369 00002D51 E81301                  	call	sysinit_parse
 36370 00002D54 7306                    	jnc	short if110	; parse error
 36371                                  	;call	badparm_p	;  and show messages and end the search loop.
 36372                                  	;jmp	short sr110
 36373                                  	; -----------------------
 36374                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36375                                  badparm_p_coff:
 36376 00002D56 E83901                  	call	badparm_p
 36377 00002D59 E92AF8                  	jmp	coff
 36378                                  	;------------------------
 36379                                  if110:
 36380 00002D5C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 36381 00002D5F 743C                    	je	short en110	; then jmp to $endloop for semantic check
 36382                                  
 36383                                  	; 15/12/2022
 36384                                  	; ds = cs
 36385                                  	;;cmp	word [cs:result_val_swoff],swit_k
 36386                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 36387 00002D61 813E[1922][5623]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 36388 00002D67 7507                    	jne	short if115	;				;M059
 36389                                  	; 15/12/2022
 36390 00002D69 C606[9523]01            	mov	byte [p_swit_k],1
 36391                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 36392 00002D6E EBE1                    	jmp	short do110
 36393                                  if115:	
 36394                                  	; 15/12/2022							;M059
 36395                                  	;;cmp	word [cs:result_val_swoff],swit_t
 36396                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 36397 00002D70 813E[1922][7A23]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 36398                                  	;jne	short if116					;M059 M063
 36399                                  	; 14/04/2024
 36400                                  	;;;
 36401 00002D76 7507                    	jne	short if118  ; (PCDOS 7.1 IBMBIO.COM)
 36402                                  	;;; 
 36403                                  	; 15/12/2022
 36404 00002D78 C606[9623]01            	mov	byte [p_swit_t],1
 36405                                  	;mov	byte [cs:p_swit_t],1				;M059
 36406 00002D7D EBD2                    	jmp	short do110					;M059
 36407                                  
 36408                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 36409                                  	;;;
 36410                                  if118:
 36411                                  	;;cmp	word [cs:result_val_swoff],swit_i ; offset "/I"
 36412                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 36413 00002D7F 813E[1922][9223]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 36414 00002D85 7507                    	jne	short if116
 36415                                  	;mov	byte [cs:p_swit_i],1	; set the flag
 36416 00002D87 C606[9823]01            	mov	byte [p_swit_i],1
 36417 00002D8C EBC3                    	jmp     short do110
 36418                                  	;;;
 36419                                  if116:
 36420                                  	; 15/12/2022
 36421                                  	;;cmp	word [cs:result_val_swoff],swit_w
 36422                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 36423 00002D8E 813E[1922][8623]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 36424 00002D94 75BB                    	jne	short do110					;M063
 36425                                  	; 15/12/2022
 36426 00002D96 C606[9723]01            	mov	byte [p_swit_w],1
 36427                                  	;mov	byte [cs:p_swit_w],1				;M063
 36428 00002D9B EBB4                    	jmp	short do110					;M063
 36429                                  en110:
 36430                                  	; 15/12/2022
 36431                                  	; ds = cs
 36432 00002D9D 803E[9523]01            	cmp	byte [p_swit_k],1
 36433                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 36434 00002DA2 1E                      	push	ds
 36435                                  	;;mov	ax,Bios_Data
 36436                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 36437                                  	; 21/10/2022
 36438 00002DA3 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 36439 00002DA6 8ED8                    	mov	ds,ax
 36440 00002DA8 750A                    	jne	short if117
 36441                                  	; 14/04/2024
 36442 00002DAA C606[7E04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 36443                                  				; BIOSDATA:047Eh for PCDOS 7.1 IBMBIO.COM
 36444 00002DAF C606[7F04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 36445                                  				; BIOSDATA:047Fh for PCDOS 7.1 IBMBIO.COM
 36446                                  if117:
 36447                                  	; 15/12/2022
 36448                                  	; ds <> cs
 36449 00002DB4 2EA0[9623]              	mov	al,[cs:p_swit_t]				;M059
 36450 00002DB8 A2[8B04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 36451                                  		; 14/04/2024	; BIOSDATA:048Bh for PCDOS 7.1 IBMBIO.COM
 36452 00002DBB 2E803E[9723]00          	cmp	byte [cs:p_swit_w],0				;M063
 36453 00002DC1 740E                    	je	short skip_dos_flag				;M063
 36454 00002DC3 06                      	push	es
 36455 00002DC4 53                      	push	bx
 36456 00002DC5 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 36457 00002DC7 CD21                    	int	21h						;M063
 36458                                  			; DOS - 2+ internal - GET LIST OF LISTS
 36459                                  			; Return: ES:BX -> DOS list of lists
 36460                                  	;or	bytes [es:86h],2
 36461 00002DC9 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 36462 00002DCF 5B                      	pop	bx
 36463 00002DD0 07                      	pop	es
 36464                                  skip_dos_flag:							;M063
 36465 00002DD1 1F                      	pop	ds
 36466                                  sr110:
 36467 00002DD2 E9B1F7                  	jmp	coff
 36468                                  
 36469                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36470                                  ; (SYSINIT:2D14h)
 36471                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36472                                  ;%if 0
 36473                                  
 36474                                  tryv:
 36475                                  
 36476                                  ;ifdef	MULTI_CONFIG
 36477                                  ;------------------------------------------------------------------------
 36478                                  ; set command (as in "set var=value<cr/lf>")
 36479                                  ;------------------------------------------------------------------------
 36480                                  
 36481 00002DD5 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 36482 00002DD8 750F                    	jne	short tryn
 36483 00002DDA E83F18                  	call	query_user      ; query the user if config_cmd
 36484 00002DDD 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 36485 00002DDF E83614                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 36486 00002DE2 73EE                    	jnc	short sr110	; no error
 36487                                  err:    
 36488 00002DE4 E8D300                  	call	error_line      ; whoops, display error in line XXX
 36489 00002DE7 EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 36490                                  
 36491                                  ;------------------------------------------------------------------------
 36492                                  ; numlock command (as in "numlock=on|off")
 36493                                  ;------------------------------------------------------------------------
 36494                                  tryn:
 36495 00002DE9 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 36496                                  	;jne	short tryy
 36497                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 36498 00002DEC 750C                    	jne	short tryt
 36499                                  
 36500 00002DEE E82B18                  	call	query_user      ; query the user if config_cmd
 36501 00002DF1 7238                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 36502 00002DF3 E8B710                  	call	set_numlock
 36503 00002DF6 72EC                    	jc	short err
 36504 00002DF8 EBD8                    	jmp	short sr110	; all done
 36505                                  
 36506                                  ;endif	;MULTI_CONFIG
 36507                                  
 36508                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 36509                                  ;------------------------------------------------------------------------
 36510                                  ; dosdata command
 36511                                  ;------------------------------------------------------------------------
 36512                                  tryt:
 36513                                  	;cmp	ah,54h ; 'T'
 36514 00002DFA 80FC54                  	cmp	ah,CONFIG_DOSDATA ; 'T' ; PCDOS 7 new config cmd
 36515 00002DFD 752C                    	jne	short tryy
 36516                                  
 36517 00002DFF E81A18                  	call	query_user
 36518 00002E02 7227                    	jc	short tryy
 36519                                  
 36520 00002E04 BF[C823]                	mov	di,dosdata_parms
 36521 00002E07 31C9                    	xor	cx,cx
 36522                                  	; 14/04/2024 - Retro DOS v5.0
 36523                                  	;mov	dx,cx ; 0
 36524                                  do120:
 36525 00002E09 E85B00                  	call	sysinit_parse
 36526 00002E0C 7303                    	jnc	short if120
 36527                                  
 36528                                  	;call	badparm_p
 36529                                  	;jmp	short en120
 36530                                  	; 14/04/2024 - Retro DOS v5.0
 36531 00002E0E E945FF                  	jmp	badparm_p_coff
 36532                                  if120:
 36533                                  	;cmp	ax,0FFFFh
 36534 00002E11 83F8FF                  	cmp	ax,_$P_RC_EOL ; -1 ; end of line?
 36535 00002E14 7422                    	jz	short en120
 36536 00002E16 803E[1822]01            	cmp	byte [result_val_itag],1 ; tag 1 (UMB)
 36537                                  				; [result_val+_$P_Result_Blk.Item_Tag]
 36538 00002E1B 7507                     	jnz	short if121
 36539 00002E1D C606[6E03]01            	mov	byte [dosdata_umb],1 ; DOSDATA=UMB (1) NOUMB (0)
 36540                                  	;jmp	short sr120
 36541                                  	; 14/04/2024
 36542 00002E22 EBE5                    	jmp	short do120
 36543                                  if121:
 36544 00002E24 C606[6E03]00            	mov	byte [dosdata_umb],0 ; DOSDATA=UMB (1) NOUMB (0)
 36545                                  sr120:
 36546 00002E29 EBDE                    	jmp	short do120
 36547                                  	; 14/04/2024
 36548                                  ;en120:
 36549                                  	;jmp	coff
 36550                                  
 36551                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36552                                  ;-------------------------------------------------------------------------
 36553                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 36554                                  ;		line number
 36555                                  ;-------------------------------------------------------------------------
 36556                                  
 36557                                  	; 31/12/2022
 36558                                  tryy:
 36559 00002E2B 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 36560 00002E2E 750B                    	jne	short try0
 36561                                  
 36562                                  donothing:
 36563                                  	; 15/12/2022
 36564                                  	; ds = cs
 36565 00002E30 FF0E[5A03]              	dec	word [chrptr]
 36566 00002E34 FF06[5603]              	inc	word [count]
 36567                                  	; 02/11/2022
 36568                                  	;dec	word [cs:chrptr]
 36569                                  	;inc	word [cs:count]
 36570                                  en120:		; 14/04/2024
 36571 00002E38 E94BF7                  	jmp	coff
 36572                                  
 36573                                  ;------------------------------------------------------------------------
 36574                                  ; rem command
 36575                                  ;------------------------------------------------------------------------
 36576                                  
 36577                                  try0:				; do nothing with this line.
 36578 00002E3B 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 36579 00002E3E 74F0                    	je	short donothing
 36580                                  
 36581                                  ;%endif	; 30/10/2022
 36582                                  
 36583                                  ; 30/10/2022
 36584                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 36585                                  
 36586                                  ;------------------------------------------------------------------------
 36587                                  ; bogus command
 36588                                  ;------------------------------------------------------------------------
 36589                                  
 36590                                  tryz:
 36591 00002E40 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 36592                                  	; 31/12/2022
 36593 00002E43 74EB                    	je	short donothing
 36594                                  	; 02/11/2022
 36595                                  	;je	short tryz_donothing
 36596                                  
 36597 00002E45 FF0E[5A03]              	dec	word [chrptr]
 36598 00002E49 FF06[5603]              	inc	word [count]
 36599 00002E4D EB37                    	jmp	short badop
 36600                                  
 36601                                  ; 31/12/2022
 36602                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36603                                  ;tryz_donothing:
 36604                                  ;	jmp	donothing
 36605                                  
 36606                                  ; 07/04/2019 - Retro DOS v4.0
 36607                                  
 36608                                  ;------------------------------------------------------------------------------
 36609                                  
 36610                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36611                                  ; (SYSINIT:2D5Dh)
 36612                                  
 36613                                  ; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36614                                  
 36615                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36616                                  ;
 36617                                  ;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 36618                                  ;
 36619                                  ;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 36620                                  ;
 36621                                  CheckProtmanArena:
 36622                                  	; 08/09/2023
 36623                                  	; ds = cs
 36624 00002E4F 06                      	push	es
 36625                                  	;mov	ax,[cs:area]	; get our arena header
 36626 00002E50 A1[6803]                	mov	ax,[area] ; 08/09/2023
 36627 00002E53 48                      	dec	ax
 36628 00002E54 8EC0                    	mov	es,ax
 36629                                  	;add	ax,[es:ARENA.SIZE]
 36630 00002E56 2603060300              	add	ax,[es:3]	; find end of arena
 36631 00002E5B 40                      	inc	ax
 36632                                  	; 08/09/2023
 36633 00002E5C 3B06[A502]              	cmp	ax,[ALLOCLIM]
 36634                                  	;cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 36635 00002E60 7703                    	ja	short CheckProtmanDone
 36636                                  
 36637                                  	;mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 36638                                  	; 08/09/2023
 36639 00002E62 A3[A502]                	mov	[ALLOCLIM],ax
 36640                                  CheckProtmanDone:
 36641 00002E65 07                      	pop	es
 36642 00002E66 C3                      	retn
 36643                                  
 36644                                  ;------------------------------------------------------------------------------
 36645                                  
 36646                                  sysinit_parse:
 36647                                  
 36648                                  ;------------------------------------------------------------------------------
 36649                                  ;set up registers for sysparse
 36650                                  ;in)	es:si -> command line in confbot
 36651                                  ;	di -> offset of the parse control definition.
 36652                                  ;
 36653                                  ;out)	calls sysparse.
 36654                                  ;	carry will set if parse error.
 36655                                  ;	*** the caller should check the eol condition by looking at ax
 36656                                  ;	*** after each call.
 36657                                  ;	*** if no parameters are found,then ax will contain a error code.
 36658                                  ;	*** if the caller needs to look at the synomym@ of the result,
 36659                                  ;	***  the caller should use cs:@ instead of es:@.
 36660                                  ;	cx register should be set to 0 at the first time the caller calls this
 36661                                  ;	 procedure.
 36662                                  ;	ax - exit code
 36663                                  ;	bl - terminated delimeter code
 36664                                  ;	cx - new positional ordinal
 36665                                  ;	si - set to pase scanned operand
 36666                                  ;	dx - selected result buffer
 36667                                  ;------------------------------------------------------------------------------
 36668                                  
 36669                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36670                                  	; (SYSINIT:2D78h)
 36671                                  
 36672                                  	; 14/04/2024 - Retro DOS v5.0
 36673                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:32F3h)
 36674                                  
 36675                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36676                                  	; ds = cs
 36677 00002E67 8C06[6D19]              	mov	[badparm_seg],es	;save the pointer to the parm
 36678 00002E6B 8936[6B19]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 36679                                  
 36680                                  	; 24/10/2022
 36681 00002E6F 06                      	push	es			;save es,ds
 36682 00002E70 1E                      	push	ds
 36683                                  
 36684 00002E71 06                      	push	es
 36685 00002E72 1F                      	pop	ds			;now ds:si -> command line
 36686                                  
 36687 00002E73 0E                      	push	cs
 36688 00002E74 07                      	pop	es			;now es:di -> control definition
 36689                                  
 36690                                  	; 09/09/2023
 36691                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 36692                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 36693                                  	
 36694                                  	;mov	dx,0
 36695                                  	; 04/01/2023
 36696 00002E75 29D2                    	sub	dx,dx ; 0
 36697 00002E77 E89BEB                  	call	SysParse
 36698                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 36699                                  	; 06/09/2023
 36700 00002E7A 21C0                    	and	ax,ax
 36701                                  
 36702                                  ;**cas note: when zero true after cmp, carry clear
 36703                                  
 36704                                  	;je	short ll4
 36705                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 36706                                  	; 12/12/2022
 36707 00002E7C 7405                    	je	short en4 ; cf=0
 36708 00002E7E 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 36709                                  	;jne	short if4
 36710                                  	; 12/12/2022
 36711 00002E81 7400                    	je	short en4 ; cf=0
 36712                                  	; 06/09/2023
 36713                                  	; cf=1
 36714                                  
 36715                                  ; 12/12/2022
 36716                                  ;ll4:
 36717                                  ;	; 12/12/2022
 36718                                  ;	; cf=0
 36719                                  ;	;clc
 36720                                  ;	jmp	short en4
 36721                                  
 36722                                  if4:
 36723                                  	; 24/10/2022
 36724                                  	; 06/09/2023 (cf=1)
 36725                                  	;stc
 36726                                  en4:
 36727 00002E83 1F                      	pop	ds
 36728 00002E84 07                      	pop	es
 36729 00002E85 C3                      	retn
 36730                                  
 36731                                  ; 11/12/2022
 36732                                  %if 0
 36733                                  
 36734                                  ;----------------------------------------------------------------------------
 36735                                  ;
 36736                                  ; procedure : badop_p
 36737                                  ;
 36738                                  ;             same thing as badop,but will make sure to set ds register back
 36739                                  ;             to sysinitseg and return back to the caller.
 36740                                  ;
 36741                                  ;----------------------------------------------------------------------------
 36742                                  
 36743                                  badop_p:
 36744                                  	push	cs
 36745                                  	pop	ds		;set ds to configsys seg.
 36746                                  	mov	dx,badopm
 36747                                  	call	print
 36748                                          ;call	error_line
 36749                                  	;retn
 36750                                  	; 11/12/2022
 36751                                  	jmp	error_line
 36752                                  
 36753                                  %endif
 36754                                  
 36755                                  ;----------------------------------------------------------------------------
 36756                                  ;
 36757                                  ; label : badop
 36758                                  ;
 36759                                  ;----------------------------------------------------------------------------
 36760                                  
 36761                                  badop:	
 36762 00002E86 BA[4C50]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 36763 00002E89 E8C81B                  	call	print
 36764 00002E8C E82B00                  	call	error_line	;show "error in config.sys ..." .
 36765 00002E8F E9F4F6                  	jmp	coff
 36766                                  
 36767                                  ;----------------------------------------------------------------------------
 36768                                  ;
 36769                                  ; procedure : badparm_p
 36770                                  ;
 36771                                  ;             show "bad command or parameters - xxxxxx"
 36772                                  ;             in badparm_seg,badparm_off -> xxxxx
 36773                                  ;
 36774                                  ;----------------------------------------------------------------------------
 36775                                  
 36776                                  	; 24/10/2022
 36777                                  badparm_p:
 36778                                  	; 11/12/2022
 36779                                  	; ds = cs
 36780                                  	; 11/12/2022
 36781                                  	;push	ds ; *
 36782 00002E92 52                      	push	dx
 36783 00002E93 56                      	push	si
 36784                                  
 36785                                  	; 11/12/2022
 36786                                  	; ds = cs
 36787                                  	;push	cs
 36788                                  	;pop	ds
 36789                                  
 36790 00002E94 BA[7350]                	mov	dx,badparm
 36791 00002E97 E8BA1B                  	call	print			; "bad command or parameters - "
 36792 00002E9A C536[6B19]              	lds	si,[badparm_ptr]
 36793                                  
 36794                                  ;	print "xxxx" until cr.
 36795                                  
 36796                                  do1:
 36797 00002E9E 8A14                    	mov	dl,[si]			; get next character
 36798 00002EA0 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 36799 00002EA3 7407                    	je	short en1		; exit loop if so
 36800                                  
 36801 00002EA5 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 36802 00002EA7 CD21                    	int	21h			; display character
 36803 00002EA9 46                      	inc	si			; next character
 36804 00002EAA EBF2                    	jmp	short do1
 36805                                  en1:
 36806 00002EAC 0E                      	push	cs
 36807 00002EAD 1F                      	pop	ds
 36808                                  
 36809 00002EAE BA[7050]                	mov	dx,crlfm
 36810 00002EB1 E8A01B                  	call	print
 36811 00002EB4 E80300                  	call	error_line
 36812                                  
 36813 00002EB7 5E                      	pop	si
 36814 00002EB8 5A                      	pop	dx
 36815                                  	; 11/12/2022
 36816                                  	;pop	ds ; *
 36817                                  badparmp_ret:
 36818 00002EB9 C3                      	retn
 36819                                  
 36820                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36821                                  %if 0
 36822                                  
 36823                                  ;----------------------------------------------------------------------------
 36824                                  ;
 36825                                  ; procedure : getchr
 36826                                  ;
 36827                                  ;----------------------------------------------------------------------------
 36828                                  
 36829                                  	; 24/10/2022
 36830                                  getchr:
 36831                                  	; 12/12/2022
 36832                                  	;push	cx
 36833                                  	;mov	cx,[count]
 36834                                  	;jcxz	nochar
 36835                                  	; 12/12/2022
 36836                                  	cmp	word [count],1 
 36837                                  	jb	short nochar ; cf=1 ([count] = 0)
 36838                                  	
 36839                                  	mov	si,[chrptr]
 36840                                  	mov	al,[es:si]
 36841                                  	dec	word [count]
 36842                                  	inc	word [chrptr]
 36843                                  	; 12/12/202
 36844                                  	; cf=0
 36845                                  	;clc
 36846                                  ;get_ret:
 36847                                  	;pop	cx
 36848                                  	;retn
 36849                                  nochar: 
 36850                                  	; 12/12/2022
 36851                                  	; cf=1
 36852                                  	;stc
 36853                                  	;jmp	short get_ret
 36854                                  	
 36855                                  	retn
 36856                                  %endif
 36857                                  
 36858                                  ; 11/12/2022
 36859                                  %if 0
 36860                                  
 36861                                  ;----------------------------------------------------------------------------
 36862                                  ;
 36863                                  ; procedure : incorrect_order
 36864                                  ;
 36865                                  ;             show "incorrect order in config.sys ..." message.
 36866                                  ;
 36867                                  ;----------------------------------------------------------------------------
 36868                                  
 36869                                  incorrect_order:
 36870                                  	mov	dx,badorder
 36871                                  	call	print
 36872                                  	call	showlinenum
 36873                                  	retn
 36874                                  
 36875                                  %endif
 36876                                  
 36877                                  ;----------------------------------------------------------------------------
 36878                                  ;
 36879                                  ; procedure : error_line
 36880                                  ;
 36881                                  ;             show "error in config.sys ..." message.
 36882                                  ;
 36883                                  ;----------------------------------------------------------------------------
 36884                                  
 36885                                  	; 11/12/2022
 36886                                  	; 24/10/2022
 36887                                  error_line:
 36888                                  	; 11/12/2022
 36889                                  	; ds = cs
 36890                                  	;push	cs
 36891                                  	;pop	ds
 36892                                  
 36893 00002EBA BA[A851]                	mov	dx,errorcmd
 36894 00002EBD E8941B                  	call	print
 36895                                  	;call	showlinenum
 36896                                  	;retn
 36897                                  	; 11/12/2022
 36898                                  	;jmp	short shortlinemum
 36899                                  
 36900                                  ;----------------------------------------------------------------------------
 36901                                  ;
 36902                                  ; procedure : showlinenum
 36903                                  ;
 36904                                  ; convert the binary linecount to decimal ascii string in showcount
 36905                                  ; and display showcount at the current curser position.
 36906                                  ; in.) linecount
 36907                                  ;
 36908                                  ; out) the number is printed.
 36909                                  ;
 36910                                  ;----------------------------------------------------------------------------
 36911                                  
 36912                                  	; 11/12/2022
 36913                                  	; ds = cs
 36914                                  	; 24/10/2022
 36915                                  showlinenum:
 36916 00002EC0 06                      	push	es
 36917                                  	; 11/12/2022
 36918                                  	;push	ds
 36919 00002EC1 57                      	push	di
 36920                                  
 36921 00002EC2 0E                      	push	cs
 36922 00002EC3 07                      	pop	es		; es=cs
 36923                                  
 36924                                  	; 11/12/2022
 36925                                  	;push	cs
 36926                                  	;pop	ds
 36927                                  
 36928 00002EC4 BF[B502]                	mov	di,showcount+4	; di -> the least significant decimal field.
 36929 00002EC7 B90A00                  	mov	cx,10		; decimal divide factor
 36930                                  	;mov	ax,[cs:linecount]
 36931                                  	; 11/12/2022
 36932 00002ECA A1[AF02]                	mov	ax,[linecount]
 36933                                  sln_loop:
 36934                                  	; 11/12/2022
 36935 00002ECD 39C8                    	cmp	ax,cx ; < 10 ?
 36936                                  	;cmp	ax,10		; < 10?
 36937 00002ECF 720C                    	jb	short sln_last
 36938                                  
 36939 00002ED1 31D2                    	xor	dx,dx
 36940 00002ED3 F7F1                    	div	cx	; cx = 10
 36941 00002ED5 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 36942 00002ED8 8815                    	mov	[di],dl
 36943 00002EDA 4F                      	dec	di
 36944 00002EDB EBF0                    	jmp	short sln_loop
 36945                                  
 36946                                  sln_last:
 36947 00002EDD 0C30                    	or	al,30h	; "0"
 36948 00002EDF 8805                    	mov	[di],al
 36949 00002EE1 89FA                    	mov	dx,di
 36950 00002EE3 E86E1B                  	call	print		; show it.
 36951 00002EE6 5F                      	pop	di
 36952                                  	; 11/12/2022
 36953                                  	;pop	ds
 36954 00002EE7 07                      	pop	es
 36955 00002EE8 C3                      	retn
 36956                                  
 36957                                  ; 07/04/2019 - Retro DOS v4.0
 36958                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 36959                                  
 36960                                  ;----------------------------------------------------------------------------
 36961                                  ;
 36962                                  ; procedure : ProcDOS
 36963                                  ;
 36964                                  ;	Process the result of DOS= parsing
 36965                                  ;
 36966                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 36967                                  ;				= 2 for DOS=LOW
 36968                                  ;				= 3 for DOS=UMB
 36969                                  ;				= 4 for DOS=NOUMB
 36970                                  ;----------------------------------------------------------------------------
 36971                                  
 36972                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 36973                                  	; (SYTSINIT:2AB5h)
 36974                                  ProcDOS:
 36975                                  	; 01/01/2023
 36976                                  	; ds = cs
 36977 00002EE9 30E4                    	xor	ah,ah
 36978                                  	;;mov	al,[cs:result_val_itag]
 36979                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 36980                                  	; 01/01/2023
 36981 00002EEB A0[1822]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 36982 00002EEE 48                      	dec	ax
 36983 00002EEF 7415                    	jz	short pd_hi
 36984 00002EF1 48                      	dec	ax
 36985 00002EF2 740E                    	jz	short pd_lo
 36986 00002EF4 48                      	dec	ax
 36987 00002EF5 7405                    	jz	short pd_umb
 36988                                  	;;mov	byte [cs:DevUMB],0
 36989                                  	; 18/12/2022
 36990                                  	;mov	byte [cs:DevUMB],ah ; 0
 36991                                  	; 01/01/2023
 36992 00002EF7 8826[4224]              	mov	byte [DevUMB],ah ; 0
 36993 00002EFB C3                      	retn
 36994                                  pd_umb:
 36995                                  	; 01/01/2023
 36996 00002EFC C606[4224]FF            	mov	byte [DevUMB],0FFh
 36997                                  	;mov	byte [cs:DevUMB],0FFh
 36998 00002F01 C3                      	retn
 36999                                  pd_lo:
 37000                                  	; 01/01/2023
 37001 00002F02 A2[6C02]                	mov	[runhigh],al ; 0
 37002                                  	; 18/12/2022
 37003                                  	;mov	[cs:runhigh],al ; 0
 37004                                  	;;mov	byte [cs:runhigh],0
 37005 00002F05 C3                      	retn
 37006                                  pd_hi:
 37007                                  	; 01/01/2023
 37008 00002F06 C606[6C02]FF            	mov	byte [runhigh],0FFh
 37009                                  	;mov	byte [cs:runhigh],0FFh
 37010                                  limx:	; 11/12/2022
 37011 00002F0B C3                      	retn
 37012                                  
 37013                                  ;----------------------------------------------------------------------------
 37014                                  ;
 37015                                  ; procedure : LieInt12Mem
 37016                                  ;
 37017                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 37018                                  ;		alloclim set to the limit of low memory.
 37019                                  ;
 37020                                  ;	Output : none
 37021                                  ;
 37022                                  ;	Changes the ROM BIOS variable which stores the total low memory
 37023                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 37024                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 37025                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 37026                                  ;	converted into Ks and stored in 40:13h
 37027                                  ;
 37028                                  ;----------------------------------------------------------------------------
 37029                                  
 37030                                  LieInt12Mem:
 37031                                  	; 11/12/2022
 37032                                  	; ds = cs
 37033 00002F0C A1[A502]                	mov	ax,[ALLOCLIM]
 37034                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 37035                                  					; assuming that it is 3Com
 37036 00002F0F E84200                  	call	IsIt3Com		; Is it 3Com driver?
 37037 00002F12 740A                    	jz	short lim_set		; yes, lie to him differently
 37038                                  	; 13/05/2019
 37039                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 37040                                  	;je	short limx		; no, don't lie
 37041                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 37042                                  	; 11/12/2022
 37043                                  	; ds = cs
 37044 00002F14 803E[5124]00            	cmp	byte [DeviceHi],0
 37045 00002F19 74F0                    	je	short limx
 37046 00002F1B A1[3724]                	mov	ax,[DevLoadEnd]
 37047                                  lim_set:
 37048                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37049                                  	; 11/12/2022
 37050                                  	;call	SetInt12Mem
 37051                                  ;limx:
 37052                                  	;retn
 37053                                  	
 37054                                  	;jmp	short SetInt12Mem 
 37055                                  
 37056                                  ;----------------------------------------------------------------------------
 37057                                  ;
 37058                                  ; procedure : SetInt12Mem
 37059                                  ;
 37060                                  ;	Input : AX = Memory size to be set (in paras)
 37061                                  ;	Output : none
 37062                                  ;
 37063                                  ;	Sets the variable 40:13 to the memory size passed in AX
 37064                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 37065                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 37066                                  ;	restoring the value of 40:13
 37067                                  ;
 37068                                  ;----------------------------------------------------------------------------
 37069                                  
 37070                                  	; 01/11/2022
 37071                                  SetInt12Mem:
 37072 00002F1E 1E                      	push	ds
 37073 00002F1F BB4000                  	mov	bx,40h
 37074 00002F22 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 37075 00002F24 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 37076                                  	;mov	[cs:OldInt12Mem],bx	; save it
 37077 00002F28 B106                    	mov	cl,6
 37078 00002F2A D3E8                    	shr	ax,cl			; convert paras into Ks
 37079 00002F2C A31300                  	mov	[13h],ax		; Lie
 37080                                  	;mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 37081 00002F2F 1F                      	pop	ds
 37082                                  	; 14/04/2024
 37083                                  	; ds = cs
 37084 00002F30 891E[5524]              	mov	[OldInt12Mem],bx
 37085 00002F34 C606[5424]FF            	mov	byte [Int12Lied],0FFh
 37086                                  ;limx:
 37087 00002F39 C3                      	retn
 37088                                  
 37089                                  ;----------------------------------------------------------------------------
 37090                                  ;
 37091                                  ; procedure : TrueInt12Mem
 37092                                  ;
 37093                                  ;	Input : Int12Lied = 0 if we are not lying currently
 37094                                  ;			  = 0ffh if we are lying
 37095                                  ;		OldInt12Mem = Saved value of 40:13h
 37096                                  ;
 37097                                  ;	Output : none
 37098                                  ;
 37099                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 37100                                  ;	and resets the flag which indicates that we were lying
 37101                                  ;
 37102                                  ;----------------------------------------------------------------------------
 37103                                  
 37104                                  TrueInt12Mem:
 37105                                  	; 11/12/2022
 37106                                  	; ds = cs
 37107 00002F3A 803E[5424]00            	cmp	byte [Int12Lied],0
 37108                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 37109                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 37110                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 37111 00002F3F 7412                    	je	short timx		; no, we weren't
 37112                                  	; 18/12/2022
 37113 00002F41 B84000                  	mov	ax,40h
 37114 00002F44 8826[5424]              	mov	[Int12Lied],ah ; 0
 37115                                  	;mov	byte [Int12Lied],0
 37116                                  	;mov	byte [cs:Int12Lied],0
 37117 00002F48 1E                      	push	ds
 37118                                  	;mov	ax,40h
 37119 00002F49 8ED8                    	mov	ds,ax
 37120 00002F4B 2EA1[5524]              	mov	ax,[cs:OldInt12Mem]
 37121 00002F4F A31300                  	mov	[13h],ax		; restore INT 12 memory
 37122 00002F52 1F                      	pop	ds
 37123                                  timx:
 37124 00002F53 C3                      	retn
 37125                                  
 37126                                  ;----------------------------------------------------------------------------
 37127                                  ;
 37128                                  ; procedure : IsIt3Com?
 37129                                  ;
 37130                                  ;	Input : DevEntry = Seg:0 of device driver
 37131                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 37132                                  ;		 else Zero flag is reset
 37133                                  ;
 37134                                  ;----------------------------------------------------------------------------
 37135                                  
 37136                                  IsIt3Com:
 37137                                  	; 11/12/2022
 37138                                  	; ds = cs
 37139 00002F54 1E                      	push	ds
 37140 00002F55 06                      	push	es
 37141 00002F56 56                      	push	si
 37142                                  	; 11/12/2022
 37143 00002F57 C536[3924]              	lds	si,[DevEntry]
 37144                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 37145 00002F5B 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 37146 00002F5E 0E                      	push	cs
 37147 00002F5F 07                      	pop	es
 37148 00002F60 BF[5724]                	mov	di,ThreeComName
 37149 00002F63 B90800                  	mov	cx,8			; name length
 37150 00002F66 F3A6                    	rep	cmpsb
 37151 00002F68 5E                      	pop	si
 37152 00002F69 07                      	pop	es
 37153 00002F6A 1F                      	pop	ds
 37154 00002F6B C3                      	retn
 37155                                  
 37156                                  ;M020 : BEGIN
 37157                                  ;----------------------------------------------------------------------------
 37158                                  
 37159                                  UpdatePDB:
 37160 00002F6C 1E                      	push	ds
 37161 00002F6D B462                    	mov	ah,62h
 37162 00002F6F CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 37163 00002F71 8EDB                    	mov	ds,bx
 37164 00002F73 2E8B1E[A502]            	mov	bx,[cs:ALLOCLIM]
 37165                                  	;mov	[2],bx
 37166 00002F78 891E0200                	mov	[PDB.BLOCK_LEN],bx
 37167 00002F7C 1F                      	pop	ds
 37168 00002F7D C3                      	retn
 37169                                  
 37170                                  ; M020 : END
 37171                                  
 37172                                  ;----------------------------------------------------------------------------
 37173                                  
 37174                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37175                                  ;%if 0
 37176                                  
 37177                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37178                                  ; (SYSINIT:2EEEh)
 37179                                  
 37180                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 37181                                  ;include highexit.inc	; umb's, etc
 37182                                  
 37183                                  ; ----------------------------------------------------------------------
 37184                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 37185                                  ; ----------------------------------------------------------------------
 37186                                  ; 07/04/2019 - Retro DOS v4.0
 37187                                  
 37188                                  ;******************************************************************************
 37189                                  ;
 37190                                  ; This file contains routines needed to parse and implement user-given
 37191                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 37192                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 37193                                  ; the variables in highvar.inc, for use by the rest of the routines.
 37194                                  ;
 37195                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 37196                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 37197                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 37198                                  ;    DH/LH module opts
 37199                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 37200                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 37201                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 37202                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 37203                                  ; available during the load.
 37204                                  ;
 37205                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 37206                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 37207                                  ; upper-memory block which was not specified by the user... in addition, if
 37208                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 37209                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 37210                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 37211                                  ; free any UMBs so allocated.
 37212                                  ;
 37213                                  ; When a device driver loads, there is the additional problem of allocating its
 37214                                  ; initial load site; this should be restricted to the first UMB specified on
 37215                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 37216                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 37217                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 37218                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 37219                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 37220                                  ;
 37221                                  ;******************************************************************************
 37222                                  
 37223                                  SWTCH	equ	'/'		; Switch character
 37224                                  
 37225                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 37226                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 37227                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 37228                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 37229                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 37230                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 37231                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 37232                                  
 37233                                  CR	equ	0Dh		; Carriage Return
 37234                                  LF	equ	0Ah		; Line Feed
 37235                                  TAB	equ	09h		; Tab character (^I)
 37236                                  
 37237                                  ; -----------------------------------------------------------------------------
 37238                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 37239                                  ; -----------------------------------------------------------------------------
 37240                                  ; ENTRY:       None
 37241                                  ; EXIT:        Variables listed in highvar.inc are initialized
 37242                                  ; ERROR EXIT:  None
 37243                                  ; USES:        Flags, variables in highvar.inc
 37244                                  ; -----------------------------------------------------------------------------
 37245                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 37246                                  ; are largely ignored, but it is initialized nonetheless.
 37247                                  ; -----------------------------------------------------------------------------
 37248                                  
 37249                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37250                                  ; (SYSINIT:2EEEh)
 37251                                  
 37252                                  InitVar:
 37253                                  	; 01/01/2023
 37254                                  	; ds = cs
 37255                                  
 37256                                  	;pushreg <ax, cx, di, es>
 37257                                  	; 03/01/2023
 37258                                  	;push	ax
 37259                                  	;push	cx
 37260                                  	;push	di
 37261 00002F7E 06                      	push	es
 37262                                  
 37263                                  	;dataseg es			;Point ES into appropriate data segment
 37264 00002F7F 0E                      	push	cs
 37265 00002F80 07                      	pop	es
 37266                                  
 37267 00002F81 31C0                    	xor	ax,ax
 37268                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 37269                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 37270                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 37271                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 37272                                  	;				;Later is the # of the 1st spec'd UMB
 37273                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 37274                                  
 37275                                  	; 01/01/2023
 37276                                  	; ds = cs
 37277 00002F83 A2[FC23]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 37278 00002F86 A2[FB23]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 37279 00002F89 A3[FD23]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 37280 00002F8C C606[FF23]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 37281                                  					;Later is the # of the 1st spec'd UMB
 37282 00002F91 A2[3224]                	mov	[fm_argc], al		;Start with zero args having been read
 37283                                  
 37284 00002F94 FC                      	cld
 37285                                  
 37286 00002F95 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 37287 00002F98 BF[0024]                	mov	di,UmbUsed		;on the UmbUsed array,
 37288 00002F9B F3AA                    	rep	stosb			;	Store 0
 37289                                  
 37290                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 37291                                  	; 01/01/2033
 37292 00002F9D B110                    	mov	cl,MAXUMB ; 16
 37293 00002F9F BF[1024]                	mov	di,UmbSize		;on the UmbSize array,
 37294 00002FA2 F3AB                    	rep	stosw			;	Store 0
 37295                                  
 37296                                  	;normseg es			; Return ES
 37297                                  
 37298                                  	;popreg	<es, di, cx, ax>
 37299 00002FA4 07                      	pop	es
 37300                                  	; 03/01/2023
 37301                                  	;pop	di
 37302                                  	;pop	cx
 37303                                  	;pop	ax	 	
 37304                                  
 37305 00002FA5 C3                      	retn
 37306                                  
 37307                                  ; -----------------------------------------------------------------------------
 37308                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 37309                                  ; -----------------------------------------------------------------------------
 37310                                  ; ENTRY   : None
 37311                                  ; EXIT    : None
 37312                                  ; ERROR   : None
 37313                                  ; USES    : Flags, fm_umb, fm_strat
 37314                                  ; -----------------------------------------------------------------------------
 37315                                  
 37316                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37317                                  	; (SYSINIT:2F22h)
 37318                                  FixMem:
 37319                                  	; 01/01/2023
 37320                                  	;push	ax
 37321                                  	;push	bx
 37322                                  	;push	cx
 37323                                  	;push	dx
 37324 00002FA6 06                      	push	es
 37325                                  
 37326 00002FA7 E84900                  	call	fm_link		; Link in UMBs
 37327                                  
 37328 00002FAA E80002                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 37329 00002FAD 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 37330                                  
 37331 00002FAF 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 37332                                  
 37333                                  ; - Walk MCB Chain ------------------------------------------------------------
 37334                                  
 37335 00002FB1 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 37336 00002FB3 89D1                    	mov 	cx,dx		; in CX... and the last owner
 37337 00002FB5 42                      	inc	dx		; in dx as we go through the loop:
 37338                                  
 37339                                  ; ------------------------------------------
 37340                                  ; FM10--DX  = last MCB's owner's PSP address
 37341                                  ;       CX  = last MCB's address (segment)
 37342                                  ; ------------------------------------------
 37343                                  
 37344 00002FB6 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 37345 00002FBA 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 37346 00002FBF 09D3                    	or	bx,dx			; dx was owner of previous MCB
 37347 00002FC1 7516                    	jnz	short fm30		; If not both zero, don't cat.
 37348                                  
 37349                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 37350                                  
 37351 00002FC3 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 37352 00002FC8 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 37353 00002FCA 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 37354                                  
 37355 00002FCE 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 37356                                  	;add	bx,1			; And add one for the header
 37357                                  	; 11/07/2023
 37358 00002FD3 43                      	inc	bx
 37359 00002FD4 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 37360                                  
 37361                                  	; ---------------------------------------------------------------------
 37362                                  
 37363 00002FD9 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 37364 00002FDB 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 37365                                  
 37366 00002FE0 8CC3                    	mov	bx,es			; Move to the next MCB
 37367 00002FE2 26031E0300              	add	bx,[es:ARENA.SIZE]
 37368 00002FE7 43                      	inc	bx
 37369 00002FE8 8EC3                    	mov	es,bx
 37370                                  
 37371                                  	;cmp	al,'Z'
 37372 00002FEA 3C5A                    	cmp	al,arena_signature_end
 37373 00002FEC 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 37374                                  fmX:	
 37375 00002FEE E81300                  	call	fm_unlink		; Unlink UMBs
 37376                                  
 37377 00002FF1 07                      	pop	es
 37378                                  	; 01/01/2023
 37379                                  	;pop	dx
 37380                                  	;pop	cx
 37381                                  	;pop	bx
 37382                                  	;pop	ax
 37383                                  
 37384 00002FF2 C3                      	retn
 37385                                  
 37386                                  ; -----------------------------------------------------------------------------
 37387                                  ;*** fm_link - links UMBs not already linked in
 37388                                  ; -----------------------------------------------------------------------------
 37389                                  ; ENTRY:    None
 37390                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 37391                                  ; ERROR:    None
 37392                                  ; USES:     AX, BX, fm_umb
 37393                                  ; -----------------------------------------------------------------------------
 37394                                  
 37395                                  	; 01/01/2023 - Retro DOS v4.2
 37396                                  fm_link:
 37397 00002FF3 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 37398 00002FF6 CD21                    	int	21h			; Current link-state is now in al
 37399                                  
 37400                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 37401                                  	;
 37402                                  	;push	es
 37403                                  	;push	cs
 37404                                  	;pop	es
 37405                                  	;mov	[es:fm_umb],al
 37406                                  	;pop	es
 37407                                  	
 37408                                  	; 01/01/2023
 37409                                  	; ds = cs
 37410                                  	;mov	[cs:fm_umb],al
 37411 00002FF8 A2[3024]                	mov	[fm_umb],al
 37412                                  
 37413 00002FFB B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37414 00002FFE BB0100                  	mov	bx,1
 37415 00003001 CD21                    	int	21h
 37416 00003003 C3                      	retn
 37417                                  
 37418                                  ; -----------------------------------------------------------------------------
 37419                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 37420                                  ; -----------------------------------------------------------------------------
 37421                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37422                                  ; EXIT:     None
 37423                                  ; ERROR:    None
 37424                                  ; USES:     AX, BX
 37425                                  ; -----------------------------------------------------------------------------
 37426                                  
 37427                                  	; 01/01/2023 - Retro DOS v4.2
 37428                                  fm_unlink:
 37429 00003004 31DB                    	xor	bx,bx
 37430                                  	
 37431                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 37432                                  	;
 37433                                  	;push	ds
 37434                                  	;push	cs
 37435                                  	;pop	ds
 37436                                  	;mov	bl,[fm_umb]	
 37437                                  	;pop	ds
 37438                                  	
 37439                                  	; 01/01/2023
 37440                                  	; ds = cs
 37441                                  	;mov	bl,[cs:fm_umb]
 37442 00003006 8A1E[3024]              	mov	bl,[fm_umb]
 37443                                  
 37444 0000300A B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37445 0000300D CD21                    	int	21h			; so just use that, and call int 21h
 37446 0000300F C3                      	retn
 37447                                  
 37448                                  ; 08/04/2019 - Retro DOS v4.0
 37449                                  
 37450                                  ; -----------------------------------------------------------------------------
 37451                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 37452                                  ; laid out in highvar.inc
 37453                                  ; -----------------------------------------------------------------------------
 37454                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 37455                                  ; EXIT:     ES:SI points to first character in child program name
 37456                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 37457                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 37458                                  ; -----------------------------------------------------------------------------
 37459                                  ; Error codes (in AX if carry set on return):
 37460                                  ;
 37461                                  PV_InvArg	equ	1	; Invalid argument passed
 37462                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 37463                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 37464                                  ;
 37465                                  ; This routine exects ES:SI to point to a string much like the following:
 37466                                  ;    "/S/L:1,200;2 module options"
 37467                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 37468                                  ; required, though that's what this routine is supposed to parse.
 37469                                  ;
 37470                                  optS		equ	'S'	; /S
 37471                                  optL		equ	'L'	; /L:...
 37472                                  ;
 37473                                  ; -----------------------------------------------------------------------------
 37474                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 37475                                  ; a command-line for spawning a child process. For a typical LH command, say,
 37476                                  ;     lh /l:1,1000;2 print/d:lpt2
 37477                                  ; the arguments would look like (one per line):
 37478                                  ;     lh
 37479                                  ;     /l
 37480                                  ;     1
 37481                                  ;     1000
 37482                                  ;     2
 37483                                  ;     print
 37484                                  ;     /d
 37485                                  ;     :lpt2
 37486                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 37487                                  ; arg was the filename. So, inside this routine, we keep a running counter
 37488                                  ; of the number of arguments LH will need to skip in order to get to the
 37489                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 37490                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 37491                                  ; for:
 37492                                  ;    Each /L
 37493                                  ;    Each /S (there should be only one)
 37494                                  ;    Each UMB number (they follow ":" or ";")
 37495                                  ;    Each UMB size   (they follow ",")
 37496                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 37497                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 37498                                  ; -----------------------------------------------------------------------------
 37499                                  
 37500                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37501                                  	; (SYSINIT:2F9Fh)
 37502                                  
 37503                                  ParseVar:
 37504                                  	;pushreg <di, ds, es>
 37505                                  	; 01/01/2023
 37506                                  	;push	di ; * ; (not required) ; 01/01/2023
 37507 00003010 1E                      	push	ds
 37508 00003011 06                      	push	es
 37509                                  
 37510 00003012 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 37511 00003013 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 37512 00003014 FC                      	cld
 37513                                  
 37514                                  ; ------------------------------------------------
 37515                                  ; PV10--ES:SI = any whitespace on the command-line
 37516                                  ; ------------------------------------------------
 37517                                  
 37518 00003015 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 37519 00003016 E8A200                  	call	isWhite
 37520 00003019 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 37521                                  	;cmp	al,'/'
 37522 0000301B 3C2F                    	cmp	al,SWTCH
 37523 0000301D 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 37524                                  
 37525 0000301F 4E                      	dec	si		; Backup--it's now "odule options", and we need
 37526 00003020 F8                      	clc			; that "m" we just read (or whatever it is).
 37527 00003021 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 37528                                  
 37529 00003023 AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 37530                                  	;toUpper al		; So we make it upper-case, and...
 37531 00003024 24DF                    	and	al,0DFh
 37532                                  	;cmp	al,'S'
 37533 00003026 3C53                    	cmp	al,optS		; just read 'S'?
 37534 00003028 750D                    	jne	short pv30
 37535                                  
 37536                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 37537 0000302A 2EFE06[3224]            	inc	byte [cs:fm_argc] ; 19/04/2019
 37538                                  
 37539                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 37540                                  	;
 37541                                  	;push	es
 37542                                  	;push	cs
 37543                                  	;pop	es
 37544                                  	;mov	[es:fUmbTiny],1	
 37545                                  	;pop	es
 37546                                  
 37547 0000302F 2EC606[FC23]01          	mov	byte [cs:fUmbTiny],1
 37548                                  
 37549 00003035 EBDE                    	jmp	short pv10	; possibly even "/L...".
 37550                                  
 37551                                  pv30:	;cmp	al,'L'
 37552 00003037 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 37553 00003039 750D                    	jne	short pvE1		; switch!
 37554                                  
 37555                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 37556 0000303B 2EFE06[3224]            	inc	byte [cs:fm_argc] ; 19/04/2019
 37557                                  
 37558 00003040 E80E00                  	call	parseL
 37559 00003043 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 37560                                  
 37561 00003045 4E                      	dec	si		; Else, back up and exit.
 37562 00003046 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 37563                                  
 37564                                  pvE1:	;mov	ax,3
 37565 00003048 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 37566 0000304B 4E                      pvErr:	dec	si
 37567 0000304C 4E                      	dec	si
 37568 0000304D F9                      	stc
 37569                                  pvX:	;popreg	<es, ds, di>
 37570 0000304E 07                      	pop	es
 37571 0000304F 1F                      	pop	ds
 37572                                  	; 01/01/2023
 37573                                  	;pop	di ; * ; (not required) ; 01/01/2023
 37574 00003050 C3                      	retn
 37575                                  
 37576                                  ; -----------------------------------------------------------------------------
 37577                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 37578                                  ; -----------------------------------------------------------------------------
 37579                                  ; ENTRY:    ES:SI points to colon
 37580                                  ; EXIT:     ES:SI points to first character not parsed
 37581                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 37582                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 37583                                  ; -----------------------------------------------------------------------------
 37584                                  ; If the string here is terminated with anything other than whitespace or a
 37585                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 37586                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 37587                                  ; makes sure the app /L: is reported as being the culprit.
 37588                                  ; -----------------------------------------------------------------------------
 37589                                  
 37590                                  parseL:
 37591 00003051 AC                      	lodsb
 37592 00003052 3C3A                    	cmp	al,':'		; Make sure they did /L:
 37593 00003054 754E                    	jne	short plE1	; If they didn't, return with carry set.
 37594                                  
 37595                                  ; ------------------------------------------
 37596                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 37597                                  ; ------------------------------------------
 37598                                  
 37599 00003056 E8DB00                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 37600 00003059 724F                    	jc	short plE2	; And error if it's a bad number.
 37601 0000305B E89D01                  	call	convUMB		; Convert any address to a UMB number
 37602                                  
 37603 0000305E 88C1                    	mov	cl,al		; Remember the UMB number
 37604 00003060 E87600                  	call	stowUMB		; Mark this UMB # as used;
 37605 00003063 7245                    	jc	short plE2	; If it was already marked, it'll error
 37606                                  
 37607                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 37608 00003065 2EFE06[3224]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 37609                                  
 37610 0000306A AC                      	lodsb
 37611 0000306B 3C3B                    	cmp	al,';'		; Did "umb;" ?
 37612 0000306D 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 37613                                  
 37614 0000306F E84900                  	call	isWhite		; Did "umb " ?
 37615 00003072 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 37616                                  
 37617 00003074 E83900                  	call	isEOL		; Did "umb" ?
 37618 00003077 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 37619                                  
 37620                                  	;cmp	al,'/'
 37621 00003079 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 37622 0000307B 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 37623                                  
 37624 0000307D 3C2C                    	cmp	al,','		; Did "umb," ?
 37625 0000307F 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 37626                                  
 37627                                  ; --- Read a size -------------------------------------------------------------
 37628                                  
 37629 00003081 E8B000                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 37630 00003084 721E                    	jc	short plE1	; And error if it's a bad size.
 37631                                  
 37632 00003086 E81601                  	call	toPara		; Convert from bytes to paragraphs
 37633                                  
 37634 00003089 E8CE01                  	call	stowSiz		; CL still has the UMB number for this routine
 37635                                  
 37636                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 37637 0000308C 2EFE06[3224]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 37638                                  
 37639 00003091 AC                      	lodsb
 37640 00003092 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 37641 00003094 74C0                    	je	short pl10	;
 37642                                  
 37643 00003096 E82200                  	call	isWhite		; Did it end with whitespace?
 37644 00003099 7414                    	jz	short plX	; If so, we're done here--go back.
 37645                                  
 37646 0000309B E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 37647 0000309E 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 37648                                  
 37649                                  	;cmp	al,'/'
 37650 000030A0 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 37651 000030A2 740A                    	je	short plSwX	; If so, again, we're done here.
 37652                                  plE1:	
 37653                                  	;mov	ax,1
 37654 000030A4 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 37655 000030A7 4E                      	dec	si
 37656 000030A8 F9                      	stc
 37657 000030A9 C3                      	retn
 37658                                  
 37659                                  plE2:	;mov	ax,2
 37660 000030AA B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 37661                                  	; 12/12/2022
 37662                                  	; cf=1
 37663                                  	;stc
 37664 000030AD C3                      	retn
 37665                                  plSwX:	
 37666 000030AE 4E                      	dec	si		; If we hit a '/' character, back up one char
 37667                                  				; so the whitespace checker will see it too.
 37668                                  plX:	; 12/12/2022
 37669                                  	; cf=0
 37670                                  	;clc			; Then just return with carry clear, so
 37671 000030AF C3                      	retn			; ParseVar will go about its business.
 37672                                  
 37673                                  ; -----------------------------------------------------------------------------
 37674                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 37675                                  ; -----------------------------------------------------------------------------
 37676                                  ; ENTRY:    None
 37677                                  ; EXIT:     None
 37678                                  ; ERROR:    None
 37679                                  ; USES:     fm_argc, flags
 37680                                  ; -----------------------------------------------------------------------------
 37681                                  
 37682                                  ;incArgc:
 37683                                  	;push	ax
 37684                                  
 37685                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 37686                                  
 37687                                  	;mov	al,[cs:fm_argc]
 37688                                  
 37689                                  	;inc	al		; Increment it,
 37690                                  
 37691                                  	;;putdata fm_argc, al	; And store it right back.
 37692                                  
 37693                                  	;mov	[cs:fm_argc],al
 37694                                  
 37695                                  	;pop	ax
 37696                                  	;retn
 37697                                  
 37698                                  ; -----------------------------------------------------------------------------
 37699                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 37700                                  ; -----------------------------------------------------------------------------
 37701                                  ; ENTRY:    AL contains character to test
 37702                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 37703                                  ; ERROR:    None
 37704                                  ; USES:     ZF
 37705                                  ; -----------------------------------------------------------------------------
 37706                                  
 37707                                  isEOL:
 37708 000030B0 3C00                    	cmp	al,0		; Null-terminator
 37709 000030B2 7406                    	je	short ieX
 37710 000030B4 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 37711 000030B6 7402                    	je	short ieX
 37712 000030B8 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 37713                                  ieX:	
 37714 000030BA C3                      	retn
 37715                                  
 37716                                  ; -----------------------------------------------------------------------------
 37717                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 37718                                  ; -----------------------------------------------------------------------------
 37719                                  ; ENTRY:    AL contains character to test
 37720                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 37721                                  ; ERROR:    None
 37722                                  ; USES:     ZF
 37723                                  ; -----------------------------------------------------------------------------
 37724                                  
 37725                                  isWhite:
 37726 000030BB 3C20                    	cmp	al,' '		; Space
 37727 000030BD 7406                    	je	short iwX
 37728 000030BF 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 37729 000030C1 7402                    	je	short iwX
 37730 000030C3 3C09                    	cmp	al,tab ; 9	; Tab
 37731                                  iwX:	
 37732 000030C5 C3                      	retn
 37733                                  
 37734                                  ; -----------------------------------------------------------------------------
 37735                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 37736                                  ; -----------------------------------------------------------------------------
 37737                                  ; ENTRY:    AL contains UMB number
 37738                                  ; EXIT:     None
 37739                                  ; ERROR:    None
 37740                                  ; USES:     Flags, variables in highvar.inc
 37741                                  ; -----------------------------------------------------------------------------
 37742                                  
 37743                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37744                                  
 37745                                  unMarkUMB:
 37746                                  	; 02/01/2023
 37747                                  	;push	ax
 37748                                  	;push	bx
 37749                                  	;push	di
 37750                                  	;push	es
 37751                                  	;
 37752                                  	;push	cs
 37753                                  	;pop	es
 37754                                  
 37755 000030C6 30E4                    	xor	ah,ah
 37756 000030C8 89C3                    	mov	bx,ax
 37757                                  
 37758                                  	; 19/04/2019
 37759                                  	
 37760                                  	;;mov	byte [es:bx+UmbUsed],0
 37761                                  	;mov	[es:bx+UmbUsed],ah ; 0
 37762                                  	; 02/01/2023
 37763                                  	; ds= cs
 37764                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 37765 000030CA 88A7[0024]              	mov	[bx+UmbUsed],ah ; 0
 37766                                  
 37767 000030CE 3806[FF23]              	cmp	[UmbLoad],al
 37768                                  	;cmp	[cs:UmbLoad],al
 37769                                  	;;cmp	[es:UmbLoad],al
 37770 000030D2 7504                    	jne	short umu10
 37771                                  
 37772                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 37773                                  	;mov	[es:UmbLoad],ah ; 0
 37774                                  	; 02/01/2023
 37775                                  	; ds = cs
 37776                                  	;mov	[cs:UmbLoad],ah ; 0
 37777 000030D4 8826[FF23]              	mov	[UmbLoad],ah ; 0
 37778                                  umu10:	
 37779                                  	;pop	es
 37780                                  	;pop	di
 37781                                  	;pop	bx
 37782                                  	;pop	ax
 37783 000030D8 C3                      	retn
 37784                                  
 37785                                  ; -----------------------------------------------------------------------------
 37786                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 37787                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 37788                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 37789                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 37790                                  ; -----------------------------------------------------------------------------
 37791                                  ; ENTRY:    AL contains UMB number, as specified by the user
 37792                                  ; EXIT:     None
 37793                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 37794                                  ; USES:     AX, Flags, variables in highvar.inc
 37795                                  ; -----------------------------------------------------------------------------
 37796                                  
 37797                                  	; 01/01/2023 - Retro DOS v4.2
 37798                                  stowUMB:
 37799 000030D9 3C10                    	cmp	al,MAXUMB ; 16
 37800 000030DB 7202                    	jb	short su10
 37801 000030DD F9                      	stc
 37802 000030DE C3                      	retn			; Ooops-- UMB>=MAXUMB
 37803                                  su10:	
 37804                                  	; 01/01/2023
 37805                                  	;push	bx
 37806                                  	;push	di
 37807                                  	;push	si
 37808                                  	;push	ds
 37809                                  	;push	es
 37810                                  	;push	cs
 37811                                  	;pop	es
 37812                                  	;push	cs
 37813                                  	;pop	ds
 37814                                  
 37815                                  	; 01/01/2023
 37816                                  	; ds <> cs
 37817                                  	;cmp	byte [cs:UmbLoad],0FFh
 37818 000030DF 2E803E[FF23]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 37819                                  				; If this, we haven't been here before
 37820 000030E5 7504                    	jne	short su20
 37821 000030E7 2EA2[FF23]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 37822                                  
 37823                                  	;;cmp	byte [UmbLoad],0FFh
 37824                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 37825                                  	;jne	short su20
 37826                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 37827                                  su20:	
 37828 000030EB 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 37829 000030ED 740E                    	jz	short su30	; that we should do here.
 37830                                  
 37831                                  	;mov	bl,al
 37832                                  	;xor	bh,bh
 37833                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 37834                                  	; 01/01/2023
 37835 000030EF 30E4                    	xor	ah,ah
 37836 000030F1 89C3                    	mov	bx,ax
 37837 000030F3 B001                    	mov	al,1
 37838                                  
 37839                                  	;xchg	[es:bx+UmbUsed],al
 37840                                  	; 01/01/2023
 37841 000030F5 2E8687[0024]            	xchg	[cs:bx+UmbUsed],al
 37842                                  
 37843                                  	;or	al,al		; If it was already 1, then al==1... and that
 37844                                  	;jz	short su30	; means an error.
 37845                                  	;
 37846                                  	;stc			; OOOPS!  This one's been used before.  :(
 37847                                  	
 37848                                  	; 01/01/2023
 37849 000030FA 3C01                    	cmp	al,1
 37850 000030FC F5                      	cmc 	; if al > 0 -> cf = 1
 37851                                  su30:	
 37852                                  	; 01/01/2023
 37853                                  	;pop	es
 37854                                  	;pop	ds
 37855                                  	;pop	si
 37856                                  	;pop	di
 37857                                  	;pop	bx
 37858 000030FD C3                      	retn
 37859                                  
 37860                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37861                                  %if 0
 37862                                  ; -----------------------------------------------------------------------------
 37863                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 37864                                  ; -----------------------------------------------------------------------------
 37865                                  ; ENTRY:    CL contains UMB number, AX contains size
 37866                                  ; EXIT:     None
 37867                                  ; ERROR:    None
 37868                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 37869                                  ; -----------------------------------------------------------------------------
 37870                                  
 37871                                  ; 13/05/2019
 37872                                  
 37873                                  	; 01/01/2023 - Retro DOS v4.2
 37874                                  stowSiz:
 37875                                  	; 01/01/2023
 37876                                  	;push	bx
 37877                                  	;;push	di ; ?
 37878                                  	;push	es
 37879                                  
 37880                                  	;push	cs
 37881                                  	;pop	es	
 37882                                  
 37883                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 37884                                  	mov	bh,0			;     bx==UMB number, AX==size
 37885                                  	shl	bl,1			;     bx==offset into array, AX=size
 37886                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 37887                                  	; 01/01/2023
 37888                                  	mov	[cs:bx+UmbSize],ax	; Store the size
 37889                                  
 37890                                  	; 01/01/2023
 37891                                  	;pop	es
 37892                                  	;;pop	di ; ?
 37893                                  	;pop	bx
 37894                                  
 37895                                  	retn
 37896                                  %endif
 37897                                  
 37898                                  ; -----------------------------------------------------------------------------
 37899                                  ;*** toDigit - converts a character-digit to its binary counterpart
 37900                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 37901                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 37902                                  ; A-F are considered valid iff gnradix is 16.
 37903                                  ; -----------------------------------------------------------------------------
 37904                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 37905                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 37906                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 37907                                  ; USES:     CL, Flags
 37908                                  ; -----------------------------------------------------------------------------
 37909                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 37910                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 37911                                  ; will be 10 or 16.
 37912                                  ; -----------------------------------------------------------------------------
 37913                                  
 37914                                  gnradix:
 37915 000030FE 0000                    	dw	0		; Must be a word--16x16 multiplication
 37916                                  
 37917                                  toDigit:
 37918 00003100 2E833E[FE30]10          	cmp	word [cs:gnradix],16
 37919 00003106 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 37920                                  
 37921                                  toDigit_hex:
 37922 00003108 80F961                  	cmp	cl,'a'	; 61h
 37923 0000310B 7209                    	jb	short td10
 37924 0000310D 80F966                  	cmp	cl,'f'	; 66h
 37925 00003110 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 37926 00003112 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 37927                                  	;clc			; <- CLC is implicit from last SUB
 37928 00003115 C3                      	retn
 37929                                  td10:	
 37930 00003116 80F941                  	cmp	cl,'A'  ; 41h
 37931 00003119 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 37932 0000311B 80F946                  	cmp	cl,'F'	; 46h
 37933 0000311E 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 37934 00003120 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 37935                                  	;clc			; <- CLC is implicit from last SUB
 37936 00003123 C3                      	retn
 37937                                  toDigit_dec:
 37938                                  td20:	
 37939 00003124 80F930                  	cmp	cl,'0'		; If less than zero,
 37940                                  	;jb	short tdE	; Done.
 37941 00003127 720A                    	jb	short tdEr ; 08/04/2019
 37942 00003129 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 37943 0000312C 7704                    	ja	short tdE	; Done.
 37944 0000312E 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 37945                                  	;clc			; <- CLC is implicit from last SUB
 37946 00003131 C3                      	retn
 37947                                  tdE:	
 37948 00003132 F9                      	stc
 37949                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 37950 00003133 C3                      	retn
 37951                                  
 37952                                  ; -----------------------------------------------------------------------------
 37953                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 37954                                  ; -----------------------------------------------------------------------------
 37955                                  ; ENTRY:    ES:SI points to an ascii string to scan
 37956                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 37957                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 37958                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 37959                                  ; -----------------------------------------------------------------------------
 37960                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 37961                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 37962                                  ; will be 10 or 16.
 37963                                  ; -----------------------------------------------------------------------------
 37964                                  
 37965                                  ; 08/04/2019 - Retro DOS v4.0
 37966                                  
 37967                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37968                                  ; (SYSINIT:3109h)
 37969                                  
 37970                                  GetXNum:
 37971                                  	;pushreg <bx, cx, ds>
 37972                                  	; 01/01/2023
 37973                                  	;push	bx
 37974 00003134 51                      	push	cx ; *
 37975                                  	;push	ds
 37976                                  
 37977 00003135 FC                      	cld
 37978 00003136 31C0                    	xor	ax,ax
 37979 00003138 31DB                    	xor	bx,bx
 37980 0000313A 31C9                    	xor	cx,cx
 37981 0000313C 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 37982                                  
 37983 0000313E 2EC706[FE30]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 37984                                  
 37985 00003145 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 37986                                  	;call	toDigit
 37987 00003148 E8D9FF                  	call	toDigit_dec
 37988                                  	;jc	short gxnE		; If it's not a digit, leave now.
 37989                                  	; 01/01/2023
 37990 0000314B 7233                    	jc	short gxnX
 37991                                  
 37992 0000314D 08C9                    	or	cl,cl
 37993 0000314F 7517                    	jnz	short gxn20		; Doesn't have '0x'
 37994 00003151 268A4C01                	mov	cl,[es:si+1]
 37995 00003155 80F978                  	cmp	cl,'x'			; Either 'x'...
 37996 00003158 7405                    	je	short gxn10
 37997 0000315A 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 37998 0000315D 7509                    	jne	short gxn20
 37999                                  
 38000                                  gxn10:	
 38001 0000315F 2EC706[FE30]1000        	mov	word [cs:gnradix], 16
 38002 00003166 46                      	inc	si			; Since we read "0x", march over it.
 38003 00003167 46                      	inc	si
 38004                                  
 38005                                  ; ------------------------------------------------------
 38006                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 38007                                  ;        DX:AX = current total
 38008                                  ;        BX    = 0
 38009                                  ;        CH    = 0
 38010                                  ; ------------------------------------------------------
 38011                                  
 38012                                  gxn20:	
 38013 00003168 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 38014 0000316B 46                      	inc	si
 38015                                  
 38016 0000316C E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 38017 0000316F 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 38018                                  
 38019 00003171 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 38020 00003174 720A                    	jc	short gxnX	; (if it's too big, error out)
 38021                                  
 38022 00003176 01C8                    	add	ax,cx		; Add the digit
 38023 00003178 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 38024                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 38025                                  	;jmp	short gxn20
 38026 0000317A 73EC                    	jnc	short gxn20
 38027                                  gxnE:	
 38028                                  	;stc			; In this case, we need to set the carry
 38029 0000317C EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 38030                                  gxnQ:	
 38031 0000317E 4E                      	dec	si		; Don't read in the offensive character.
 38032 0000317F F8                      	clc			; And clear carry, so they know it's okay.
 38033                                  gxnX:	
 38034                                  	; 01/01/2023
 38035                                  	;pop	ds
 38036 00003180 59                      	pop	cx ; *
 38037                                  	;pop	bx
 38038 00003181 C3                      	retn
 38039                                  
 38040                                  ; -----------------------------------------------------------------------------
 38041                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 38042                                  ; -----------------------------------------------------------------------------
 38043                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 38044                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 38045                                  ; ERROR:   Carry set if number was too large
 38046                                  ; USES:    Flags, AX, DX
 38047                                  ; -----------------------------------------------------------------------------
 38048                                  
 38049                                  mul32:
 38050 00003182 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 38051 00003183 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 38052 00003185 2EF726[FE30]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 38053 0000318A 7211                    	jc	short m32E	; Too big?
 38054                                  
 38055 0000318C 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 38056 0000318E 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 38057                                  
 38058 0000318F 87D3                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 38059 00003191 2EF726[FE30]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 38060 00003196 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 38061 00003198 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 38062 0000319A 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 38063 0000319C C3                      	retn
 38064                                  m32E:	
 38065 0000319D 58                      	pop	ax
 38066 0000319E C3                      	retn
 38067                                  
 38068                                  ; -----------------------------------------------------------------------------
 38069                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 38070                                  ; -----------------------------------------------------------------------------
 38071                                  ; ENTRY:   DX:AX = the number to be divided
 38072                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 38073                                  ; ERROR:   None
 38074                                  ; USES:    Flags, AX, DX
 38075                                  ; -----------------------------------------------------------------------------
 38076                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 38077                                  ;       can't ensure a 386 host machine. Sorry.
 38078                                  ; -----------------------------------------------------------------------------
 38079                                  
 38080                                  	; 01/01/2023 - Retro DOS v4.2
 38081                                  toPara:
 38082 0000319F 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 38083                                  
 38084 000031A0 B104                    	mov	cl,4		;
 38085 000031A2 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 38086 000031A4 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 38087 000031A5 B10C                    	mov	cl,12
 38088 000031A7 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 38089 000031A9 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 38090                                  
 38091 000031AB 59                      	pop	cx
 38092 000031AC C3                      	retn
 38093                                  
 38094                                  ; -----------------------------------------------------------------------------
 38095                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 38096                                  ; -----------------------------------------------------------------------------
 38097                                  ; ENTRY:  Nothing
 38098                                  ; EXIT:   AX contains 0x9FFF for most systems
 38099                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 38100                                  ; USES:   Flags, AX
 38101                                  ; -----------------------------------------------------------------------------
 38102                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 38103                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 38104                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 38105                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 38106                                  ; -----------------------------------------------------------------------------
 38107                                  
 38108                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38109                                  UmbHead:
 38110                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 38111                                  
 38112                                  	;push	si ; ?
 38113                                  	;push	ds ; ? 
 38114                                  	;push	es
 38115                                  	;push	bx ; *	
 38116                                  
 38117                                  	; 09/04/2019
 38118                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 38119                                  
 38120 000031AD B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 38121 000031AF CD21                    	int	21h
 38122                                  
 38123 000031B1 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 38124                                  	
 38125                                  	; 01/01/2023
 38126 000031B5 83F8FF                  	cmp	ax,0FFFFh
 38127 000031B8 F5                      	cmc
 38128                                  	; if AX=0FFFFh -> CF=1
 38129 000031B9 C3                      	retn
 38130                                  
 38131                                  ; 01/01/2023
 38132                                  ;%if 0
 38133                                  ;	cmp	ax,0FFFFh
 38134                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 38135                                  ;
 38136                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 38137                                  ;	;jmp	short uhX
 38138                                  ;	; 12/12/2022
 38139                                  ;	retn
 38140                                  ;uhE:	
 38141                                  ;	stc
 38142                                  ;uhX:	
 38143                                  ;	;pop	bx ; *
 38144                                  ;	;pop	es
 38145                                  ;	;pop	ds ; ?
 38146                                  ;	;pop	si ; ?
 38147                                  ;	retn
 38148                                  ;%endif
 38149                                  
 38150                                  ; -----------------------------------------------------------------------------
 38151                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 38152                                  ; -----------------------------------------------------------------------------
 38153                                  ; ENTRY:  ES:0 should point to a valid MCB
 38154                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 38155                                  ; USES:   Flags
 38156                                  ; -----------------------------------------------------------------------------
 38157                                  
 38158                                  isSysMCB:
 38159                                  	;push	ax
 38160                                  
 38161                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 38162                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 38163                                  	;je	short ism10
 38164                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 38165                                  	;;je	short ism10
 38166                                  	;;jmp	short ismX		; Anything else isn't.
 38167                                  	;jne	short ismX
 38168 000031BA 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 38169 000031C0 7507                    	jne	short ismX 
 38170                                  ism10:	
 38171                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 38172                                  	;cmp	ax,'SC' ; 4353h
 38173 000031C2 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 38174                                  ismX:	
 38175                                  	;pop	ax
 38176 000031C9 C3                      	retn
 38177                                  
 38178                                  ; 09/04/2019 - Retro DOS v4.0
 38179                                  
 38180                                  ; -----------------------------------------------------------------------------
 38181                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 38182                                  ; -----------------------------------------------------------------------------
 38183                                  ; ENTRY:  AX contains a segment address
 38184                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 38185                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 38186                                  ; USES:   Flags, AX
 38187                                  ; -----------------------------------------------------------------------------
 38188                                  ; An address in the following areas is treated as:
 38189                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 38190                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 38191                                  ;      ...
 38192                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 38193                                  ; -----------------------------------------------------------------------------
 38194                                  
 38195                                  	; 01/01/2023 - Retro DOS v4.2
 38196                                  AddrToUmb:
 38197                                  	; 01/01/2023
 38198                                  	;push	cx
 38199                                  	;push	dx
 38200 000031CA 06                      	push	es
 38201                                  
 38202 000031CB 89C2                    	mov	dx,ax		; DX = address to search for
 38203                                  
 38204 000031CD E8DDFF                  	call	UmbHead		; AX = first segment
 38205 000031D0 7222                    	jc	short atuE	; If it couldn't get it, error out.
 38206                                  
 38207                                  	; 22/07/2023
 38208                                  	;mov	es,ax ; *	; ES = first UMB segment
 38209 000031D2 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 38210                                  
 38211                                  	; 22/07/2023
 38212                                  atu10:
 38213 000031D4 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 38214                                  ; ----------------------------------------
 38215                                  ; ATU10--ES - Current MCB address
 38216                                  ;        DX - Address given for conversion
 38217                                  ;        CX - Current UMB #
 38218                                  ; ----------------------------------------
 38219                                  
 38220                                  ;atu10:	
 38221                                  	;mov	ax,es ; * ; 18/07/2023
 38222 000031D6 39D0                            cmp	ax,dx		; Present segment >= given segment?
 38223 000031D8 731D                    	jae	short atuX	; Yep--done.
 38224                                  
 38225 000031DA E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 38226 000031DD 7501                    	jnz	short atu20
 38227                                  
 38228 000031DF 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 38229                                  atu20:	
 38230                                  	;mov	al,[es:ARENA.SIGNATURE]
 38231                                  	;cmp	al,arena_signature_end  ; 'Z'
 38232                                  	; 22/07/2023
 38233                                  	; ax = es
 38234                                  	;mov	ax,es ; **
 38235 000031E0 2603060300              	add	ax,[es:ARENA.SIZE]
 38236 000031E5 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 38237 000031EB 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 38238                                  
 38239                                  	;NextMCB es,ax
 38240                                  
 38241                                  	;mov	ax,es ; **
 38242                                  	;;add	ax,[es:3]
 38243                                  	;add	ax,[es:ARENA.SIZE]
 38244 000031ED 40                      	inc	ax
 38245                                  	; 22/07/2023
 38246                                  	;mov	es,ax ; *
 38247 000031EE EBE4                    	jmp	short atu10
 38248                                  
 38249                                  ; -----------------------------------------------------------------------------
 38250                                  ; if we get to atu30, they specified a number that was past the last MCB.
 38251                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 38252                                  ; -----------------------------------------------------------------------------
 38253                                  
 38254                                  atu30:	
 38255                                  	; 22/07/2023
 38256                                  	; ax = es + [es:ARENA.SIZE] 
 38257                                  	;mov	ax,es ; **
 38258                                  	;add	ax,[es:ARENA.SIZE] ; **
 38259 000031F0 39D0                    	cmp	ax,dx		; Present >= given?
 38260 000031F2 7303                    	jae	short atuX	; Yep! It _was_ inside.
 38261                                  atuE:	
 38262 000031F4 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 38263 000031F6 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 38264                                  atuX:	
 38265 000031F7 89C8                    	mov	ax,cx		; Return the UMB number in AX
 38266                                  	
 38267 000031F9 07                      	pop	es	
 38268                                  	; 01/01/2023
 38269                                  	;pop	dx
 38270                                  	;pop	cx
 38271 000031FA C3                      	retn
 38272                                  
 38273                                  ; -----------------------------------------------------------------------------
 38274                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 38275                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 38276                                  ; address rather than a UMB number... and use that address to look up a UMB.
 38277                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 38278                                  ; -----------------------------------------------------------------------------
 38279                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 38280                                  ; EXIT:   AX will contain a UMB number
 38281                                  ; ERROR:  None
 38282                                  ; USES:   Flags, AX
 38283                                  ; -----------------------------------------------------------------------------
 38284                                  
 38285                                  	; 01/01/2023 - Retro DOS v4.2
 38286                                  convUMB:
 38287 000031FB 2E833E[FE30]10          	cmp	word [cs:gnradix],16
 38288 00003201 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 38289 00003203 E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 38290                                  	;cmp	ax,0FFFFh
 38291                                  	;jne	short cu10
 38292                                  	;inc	ax		; If too high, ignore it (make it conventional)
 38293                                  	; 01/01/2023
 38294 00003206 40                      	inc	ax
 38295 00003207 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 38296 00003209 48                      	dec	ax
 38297                                  cu10:	
 38298 0000320A C3                      	retn
 38299                                  
 38300                                  ; 01/01/2023 - Retro DOS v4.2
 38301                                  ;%if 0
 38302                                  ;
 38303                                  ;; -----------------------------------------------------------------------------
 38304                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 38305                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 38306                                  ;; of the usual HIGH_FIRST. See the code.
 38307                                  ;; -----------------------------------------------------------------------------
 38308                                  ;; ENTRY:  None
 38309                                  ;; EXIT:   None
 38310                                  ;; ERROR:  None
 38311                                  ;; USES:   Flags, fm_umb, fm_strat
 38312                                  ;; -----------------------------------------------------------------------------
 38313                                  ;
 38314                                  ;setUMBs:
 38315                                  ;	push	ax
 38316                                  ;	push	bx
 38317                                  ;	call	fm_link
 38318                                  ;	pop	bx
 38319                                  ;	pop	ax
 38320                                  ;	retn
 38321                                  ;
 38322                                  ;%endif
 38323                                  
 38324                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 38325                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 38326                                  %if 0
 38327                                  
 38328                                  ; -----------------------------------------------------------------------------
 38329                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 38330                                  ; -----------------------------------------------------------------------------
 38331                                  ; ENTRY:  None
 38332                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 38333                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 38334                                  ; ERROR:  None
 38335                                  ; USES:   Flags, fm_strat, fm_umb
 38336                                  ; -----------------------------------------------------------------------------
 38337                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 38338                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 38339                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 38340                                  ; such that the load UMB is too small, and shouldn't be used.
 38341                                  ; -----------------------------------------------------------------------------
 38342                                  
 38343                                  loadLow:
 38344                                  	;push	ds
 38345                                  	;push	cs		; Point DS into appropriate data segment
 38346                                  	;pop	ds	
 38347                                  
 38348                                  	;mov	al,[UmbLoad]
 38349                                  	mov	al,[cs:UmbLoad]
 38350                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 38351                                  	jne	short ll10
 38352                                  
 38353                                  	stc
 38354                                  ll15:
 38355                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 38356                                  	;stc
 38357                                  	;jmp	short llX
 38358                                  	retn
 38359                                  ll10:	
 38360                                  	or	al,al		; AL=the load UMB: Is it == 0?
 38361                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 38362                                  
 38363                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 38364                                  	retn
 38365                                  
 38366                                  	;mov	al,1
 38367                                  	;clc
 38368                                  ;llX:
 38369                                  	;pop	ds		; Return DS to where it was
 38370                                  	;retn
 38371                                  
 38372                                  %endif
 38373                                  
 38374                                  ; -----------------------------------------------------------------------------
 38375                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 38376                                  ; -----------------------------------------------------------------------------
 38377                                  ; ENTRY:  None
 38378                                  ; EXIT:   None
 38379                                  ; ERROR:  None
 38380                                  ; USES:   Flags, fm_strat, fm_umb
 38381                                  ; -----------------------------------------------------------------------------
 38382                                  
 38383                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38384                                  	; (SYSINIT:322Fh)
 38385                                  HideUMBs:
 38386                                  	; 01/01/2023
 38387                                  	;push	ax
 38388                                  	;push	cx
 38389                                  	;push	ds
 38390 0000320B 06                      	push	es
 38391                                  
 38392                                  	; 01/01/2023
 38393                                  	; ds = cs
 38394                                  
 38395 0000320C E86E02                  	call	UmbTest		; See if we REALLY linked in anything...
 38396 0000320F 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 38397                                  
 38398 00003211 E892FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 38399                                  	
 38400                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 38401                                  	; 01/01/2023
 38402 00003214 E8DCFD                  	call	fm_link
 38403                                  
 38404                                  	;putdata fInHigh,1	; Remember that we're now running high
 38405                                  	;mov	byte [cs:fInHigh],1
 38406                                  	; 01/01/2023
 38407 00003217 C606[FB23]01            	mov	byte [fInHigh],1
 38408                                  
 38409                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 38410                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 38411                                  	; 01/01/2023
 38412 0000321C A0[FF23]                	mov	al,[UmbLoad]
 38413                                  
 38414 0000321F 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 38415 00003221 7420                    	je	short husX	; then we shouldn't do this loop:
 38416                                  
 38417 00003223 31C9                    	xor	cx,cx
 38418                                  
 38419                                  ; -----------------------------------------------
 38420                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 38421                                  ; -----------------------------------------------
 38422                                  
 38423 00003225 41                      hus10:	inc	cx		; For each UMB:
 38424                                  	; 01/01/2023
 38425 00003226 80F910                  	cmp	cl,MAXUMB
 38426                                  	;cmp	cx,MAXUMB ; 16
 38427 00003229 730E                    	jae	short hus20
 38428                                  
 38429 0000322B 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 38430 0000322D 06                      	push	es
 38431 0000322E E8A200                  	call	findUMB		; valid range of UMBs)
 38432 00003231 07                      	pop	es		; push/pop: trash what findumb finds. :-)
 38433 00003232 7205                    	jc	short hus20
 38434                                  	
 38435                                  	; 02/01/2023
 38436                                  	;push	cx ; *
 38437 00003234 E84F01                  	call	_hideUMB_	; hide what we need to hide.
 38438                                  	;pop	cx ; *
 38439                                  
 38440 00003237 EBEC                    	jmp	short hus10
 38441                                  hus20:	
 38442                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 38443                                  	; 01/01/2023
 38444                                  	; ds = cs
 38445                                  	;mov	al,[UmbLoad]
 38446                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 38447 00003239 800E[FF23]00            	or	byte [UmbLoad],0
 38448                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 38449 0000323E 7503                    	jnz	short husX	; If not, we're done.
 38450                                  
 38451 00003240 E86802                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 38452                                  husX:	
 38453 00003243 07                      	pop	es
 38454                                  	; 01/01/2023
 38455                                  	;pop	ds
 38456                                  	;pop	cx
 38457                                  	;pop	ax
 38458 00003244 C3                      	retn
 38459                                  
 38460                                  ; -----------------------------------------------------------------------------
 38461                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 38462                                  ; -----------------------------------------------------------------------------
 38463                                  ; ENTRY:  None
 38464                                  ; EXIT:   AL == load UMB
 38465                                  ; ERROR:  None
 38466                                  ; USES:   Flags, AX
 38467                                  ; -----------------------------------------------------------------------------
 38468                                  
 38469                                  ;GetLoadUMB:
 38470                                  ;	;getdata al, UmbLoad
 38471                                  ;	push	ds
 38472                                  ;	push	cs
 38473                                  ;	pop	ds
 38474                                  ;	mov	al,[UmLoad]
 38475                                  ;	pop	ds
 38476                                  ;	retn
 38477                                  
 38478                                  ; -----------------------------------------------------------------------------
 38479                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 38480                                  ; -----------------------------------------------------------------------------
 38481                                  ; ENTRY:  None
 38482                                  ; EXIT:   AX == load UMB minimum size
 38483                                  ; ERROR:  None
 38484                                  ; USES:   Flags, AX
 38485                                  ; -----------------------------------------------------------------------------
 38486                                  
 38487                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38488                                  %if 0
 38489                                  	; 01/01/2023 - Retro DOS v4.2
 38490                                  GetLoadSize:
 38491                                  	; 09/04/2019 - Retro DOS v4.0
 38492                                  	;mov	al,[cs:UmbLoad]
 38493                                  	; 01/01/2023
 38494                                  	; ds = cs
 38495                                  	mov	al,[UmbLoad] 
 38496                                  	;jmp	short GetSize
 38497                                  
 38498                                  	;push	bx
 38499                                  	;;push	si
 38500                                  	;push	ds
 38501                                  	;push	cs
 38502                                  	;pop	ds
 38503                                  
 38504                                  	;mov	al,[UmbLoad]
 38505                                  
 38506                                  	;xor	ah,ah			;    ax==UMB
 38507                                  	;mov	bx,UmbSize		;    bx==array
 38508                                  	;shl	al,1	                ;    ax==offset
 38509                                  	;;add	ax,bx			;    ax==element index
 38510                                  	;;mov	si,ax			; ds:si==element index
 38511                                  
 38512                                  	;;lodsw				;    hh
 38513                                  
 38514                                  	;add	bx,ax
 38515                                  	;mov	ax,[bx]
 38516                                  
 38517                                  	;pop	ds
 38518                                  	;;pop	si
 38519                                  	;pop	bx
 38520                                  	;retn
 38521                                  %endif
 38522                                  
 38523                                  ; -----------------------------------------------------------------------------
 38524                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 38525                                  ; -----------------------------------------------------------------------------
 38526                                  ; ENTRY:  AL == a UMB number
 38527                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 38528                                  ; ERROR:  None
 38529                                  ; USES:   Flags, AX
 38530                                  ; -----------------------------------------------------------------------------
 38531                                  
 38532                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38533                                  GetLoadSize:
 38534                                  	; ds = cs
 38535                                  	;mov	al,[UmbLoad]
 38536                                  	; al = [UmbLoad] 
 38537                                  	; ....
 38538                                  
 38539                                  	; 01/01/2023 - Retro DOS v4.2
 38540                                  GetSize:
 38541                                  	; 09/04/2019 - Retro DOS v4.0
 38542                                  
 38543                                  	;push	bx ; 01/01/2023
 38544                                  	;push	si
 38545                                  	;push	ds
 38546                                  	;push	cs
 38547                                  	;pop	ds
 38548                                  
 38549 00003245 30E4                    	xor	ah,ah			;    ax==UMB
 38550 00003247 BB[1024]                	mov	bx,UmbSize		;    bx==array
 38551 0000324A D0E0                    	shl	al,1	                ;    ax==offset
 38552                                  	;add	ax,bx			;    ax==element index
 38553                                  	;mov	si,ax			; ds:si==element index
 38554                                  
 38555                                  	;lodsw				;    ax==size
 38556                                  
 38557 0000324C 01C3                    	add	bx,ax
 38558                                  	; 01/01/2023
 38559                                  	; ds = cs
 38560 0000324E 8B07                    	mov	ax,[bx]
 38561                                  	;mov	ax,[cs:bx]
 38562                                  
 38563                                  	;pop	ds
 38564                                  	;pop	si
 38565                                  	;pop	bx ; 01/01/2023
 38566                                  sls10:	; 08/09/2023
 38567 00003250 C3                      	retn
 38568                                  
 38569                                  ; -----------------------------------------------------------------------------
 38570                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 38571                                  ; -----------------------------------------------------------------------------
 38572                                  ; ENTRY:   AL == new load UMB
 38573                                  ; EXIT:    None
 38574                                  ; ERROR:   None
 38575                                  ; USES:    Flags, AX
 38576                                  ; -----------------------------------------------------------------------------
 38577                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 38578                                  ;          time you would ever need this, so that's okay.
 38579                                  ; -----------------------------------------------------------------------------
 38580                                  
 38581                                  ; StoLoadUMB subroutine is not used anywhere
 38582                                  ; of PCDOS 7.1 IBMBIO.COM (& MSDOS 6.21 IO.SYS)
 38583                                  ; Erdogan Tan - 18/07/2023
 38584                                  
 38585                                  ;StoLoadUMB:
 38586                                  ;	;putdata UmbLoad, al
 38587                                  ;	push	es
 38588                                  ;	push	cs
 38589                                  ;	pop	es		; mov [cs:UmbLoad], al !!!! ; 08/09/2023
 38590                                  ;	mov	[es:UmbLoad],al
 38591                                  ;	pop	es
 38592                                  ;	retn
 38593                                  
 38594                                  ; -----------------------------------------------------------------------------
 38595                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 38596                                  ; -----------------------------------------------------------------------------
 38597                                  ; ENTRY:  AL == new load size
 38598                                  ; EXIT:   None
 38599                                  ; ERROR:  None
 38600                                  ; USES:   Flags, AX
 38601                                  ; -----------------------------------------------------------------------------
 38602                                  	; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) 
 38603                                  	; 01/01/2023 - Retro DOS v4.2
 38604                                  StoLoadSize:
 38605                                  	; 01/01/2023
 38606                                  	;push	dx
 38607                                  
 38608                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 38609                                  	;
 38610                                  	;push	ds
 38611                                  	;push	cs
 38612                                  	;pop	ds
 38613                                  	;mov	dl,[UmbLoad]
 38614                                  	;pop	ds	
 38615                                  
 38616                                  	; 08/09/2023
 38617                                  	; MSDOS 6.21 IO.SYS - SYSINIT:32B6h
 38618                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:3831h
 38619                                  
 38620                                  	;;mov	dl,[UmbLoad]		; BUG ! CL would/must be used here
 38621                                  					; instead of DL (*) ; 18/07/2023
 38622                                  	;mov	dl,[cs:UmbLoad] ; Retro DOS v4.0, v4.1, v4.2
 38623                                  	;cmp	dl,UNSPECIFIED ; 0FFh
 38624                                  	;je	short sls10
 38625                                  			
 38626                                  		; BUG ! stowSiz uses CL instead of DL !
 38627                                  		; (CL is set in ParseL which calls stowSiz)
 38628                                  		; (This BUG existing in PCDOS 7.1 IBMBIO.COM also)
 38629                                  		; Erdogan Tan - 18/07/2023
 38630                                  
 38631                                  	; 08/09/2023 (BugFix)
 38632                                  	;mov	cl,[cs:UmbLoad]
 38633                                  	; 08/09/2023 
 38634                                  	; ds = cs
 38635 00003251 8A0E[FF23]              	mov	cl,[UmbLoad]
 38636 00003255 80F9FF                  	cmp	cl,UNSPECIFIED ; 0FFh
 38637 00003258 74F6                    	je	short sls10 
 38638                                  
 38639                                  	; 08/09/2023
 38640                                  ;	call	stowSiz			; We've got a function to do just this
 38641                                  ;sls10:	
 38642                                  ;	; 01/01/2023
 38643                                  ;	;pop	dx
 38644                                  ;	retn
 38645                                  	
 38646                                  	; 08/09/2023
 38647                                  	;;jmp	stowSiz
 38648                                  	;jmp	short stowSiz
 38649                                  
 38650                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38651                                  %if 1
 38652                                  ; -----------------------------------------------------------------------------
 38653                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 38654                                  ; -----------------------------------------------------------------------------
 38655                                  ; ENTRY:    CL contains UMB number, AX contains size
 38656                                  ; EXIT:     None
 38657                                  ; ERROR:    None
 38658                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 38659                                  ; -----------------------------------------------------------------------------
 38660                                  
 38661                                  ; 13/05/2019
 38662                                  
 38663                                  	; 01/01/2023 - Retro DOS v4.2
 38664                                  stowSiz:
 38665                                  	; 01/01/2023
 38666                                  	;push	bx
 38667                                  	;;push	di ; ?
 38668                                  	;push	es
 38669                                  
 38670                                  	;push	cs
 38671                                  	;pop	es	
 38672                                  
 38673 0000325A 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 38674 0000325C B700                    	mov	bh,0			;     bx==UMB number, AX==size
 38675 0000325E D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 38676                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 38677                                  	; 01/01/2023
 38678 00003260 2E8987[1024]            	mov	[cs:bx+UmbSize],ax	; Store the size
 38679                                  
 38680                                  	; 01/01/2023
 38681                                  	;pop	es
 38682                                  	;;pop	di ; ?
 38683                                  	;pop	bx
 38684                                  
 38685 00003265 C3                      	retn
 38686                                  %endif
 38687                                  
 38688                                  ; -----------------------------------------------------------------------------
 38689                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 38690                                  ; -----------------------------------------------------------------------------
 38691                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 38692                                  ; EXIT:     None; free elements in UMB marked as hidden
 38693                                  ; ERROR:    None
 38694                                  ; USES:     Flags
 38695                                  ; -----------------------------------------------------------------------------
 38696                                  
 38697                                  	; 01/01/2023 - Retro DOS v4.2
 38698                                  hideUMB:
 38699                                  	; 02/01/2023
 38700 00003266 52                      	push	dx ; (*)
 38701                                  	; 01/01/2023
 38702                                  	;push	ax
 38703 00003267 06                      	push	es
 38704                                  
 38705 00003268 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 38706 0000326B 7224                    	jc	short huX
 38707                                  
 38708                                  ; ------------------------------------------------
 38709                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 38710                                  ;            we're not in the same UMB, so exit.
 38711                                  ; ------------------------------------------------
 38712                                  
 38713 0000326D E84AFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 38714 00003270 741F                    	jz	short huX	; If it is, we've finished the UMB.
 38715                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 38716 00003272 26830E010000            	or	word [es:ARENA.OWNER],0
 38717 00003278 7503                    	jnz	short hu20
 38718                                  
 38719 0000327A E81700                  	call	hideMCB
 38720                                  hu20:	
 38721                                  	;mov	al,[es:ARENA.SIGNATURE]
 38722                                  	;cmp	al,arena_signature_end  ;'Z'
 38723                                  	; 19/07/2023
 38724 0000327D 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 38725 00003283 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 38726                                  
 38727                                  	;NextMCB es,ax		; Go on forward.
 38728 00003285 8CC0                    	mov     ax,es
 38729                                  	;add	ax,[es:3]
 38730 00003287 2603060300              	add     ax,[es:ARENA.SIZE]
 38731 0000328C 40                      	inc     ax
 38732 0000328D 8EC0                    	mov     es,ax
 38733                                  
 38734 0000328F EBDC                    	jmp	short hu10
 38735                                  huX:	
 38736 00003291 07                      	pop	es
 38737                                  	; 01/01/2023
 38738                                  	;pop	ax
 38739                                  	; 02/01/2023
 38740 00003292 5A                      	pop	dx ; (*)
 38741 00003293 C3                      	retn
 38742                                  
 38743                                  ; 02/01/2023
 38744                                  %if 0
 38745                                  
 38746                                  ; -----------------------------------------------------------------------------
 38747                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 38748                                  ; -----------------------------------------------------------------------------
 38749                                  ; ENTRY:    None
 38750                                  ; EXIT:     ZF set if user DIDN'T specify /S
 38751                                  ; ERROR:    None
 38752                                  ; USES:     Flags
 38753                                  ; -----------------------------------------------------------------------------
 38754                                  
 38755                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38756                                  isTiny:
 38757                                  	; 02/01/2023
 38758                                  	;push	ax
 38759                                  
 38760                                  	;getdata al,fUmbTiny
 38761                                  	;
 38762                                  	;push	ds
 38763                                  	;push	cs
 38764                                  	;pop	ds
 38765                                  	;mov	al,[fUmbTiny]
 38766                                  	;pop	ds
 38767                                  
 38768                                  	; 09/09/2023
 38769                                  	;mov	al,[cs:fUmbTiny]
 38770                                  	; 02/01/2023
 38771                                  	; ds = cs
 38772                                  	mov	al,[fUmbTiny]
 38773                                  
 38774                                  	or	al,al
 38775                                  	; 02/01/2023
 38776                                  	;pop	ax
 38777                                  	retn
 38778                                  
 38779                                  %endif
 38780                                  
 38781                                  ; -----------------------------------------------------------------------------
 38782                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 38783                                  ; -----------------------------------------------------------------------------
 38784                                  ; ENTRY:    ES:0 should point to an MCB
 38785                                  ; EXIT:     ZF set if MCB is free, else !ZF
 38786                                  ; ERROR:    None
 38787                                  ; USES:     Flags
 38788                                  ; -----------------------------------------------------------------------------
 38789                                  
 38790                                  ;isFreeMCB:
 38791                                  ;	or	word [es:ARENA.OWNER],0
 38792                                  ;	retn
 38793                                  
 38794                                  ; -----------------------------------------------------------------------------
 38795                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 38796                                  ; -----------------------------------------------------------------------------
 38797                                  ; ENTRY:    ES:0 should point to an MCB
 38798                                  ; EXIT:     None; MCB marked as HIDDEN
 38799                                  ; ERROR:    None
 38800                                  ; USES:     None
 38801                                  ; -----------------------------------------------------------------------------
 38802                                  
 38803                                  hideMCB:
 38804 00003294 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 38805 0000329B 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 38806 000032A2 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 38807 000032A9 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 38808 000032B0 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 38809 000032B7 C3                      	retn
 38810                                  
 38811                                  ; -----------------------------------------------------------------------------
 38812                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 38813                                  ; -----------------------------------------------------------------------------
 38814                                  ; ENTRY:    ES:0 should point to an MCB
 38815                                  ; EXIT:     None; MCB marked as FREE
 38816                                  ; ERROR:    None
 38817                                  ; USES:     None
 38818                                  ; -----------------------------------------------------------------------------
 38819                                  
 38820                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38821                                  
 38822                                  unHideMCB:
 38823                                  	; 03/01/2023
 38824                                  	;push	ax
 38825 000032B8 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 38826 000032BF B82020                  	mov	ax,'  ' ; 2020h
 38827 000032C2 26A30800                	mov	[es:ARENA.NAME+0],ax
 38828 000032C6 26A30A00                	mov	[es:ARENA.NAME+2],ax
 38829 000032CA 26A30C00                	mov	[es:ARENA.NAME+4],ax
 38830 000032CE 26A30E00                	mov	[es:ARENA.NAME+6],ax
 38831                                  	; 03/01/2023
 38832                                  	;pop	ax
 38833 000032D2 C3                      	retn
 38834                                  
 38835                                  ; -----------------------------------------------------------------------------
 38836                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 38837                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 38838                                  ; -----------------------------------------------------------------------------
 38839                                  ; ENTRY:    AL should be to a valid UMB number
 38840                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 38841                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 38842                                  ; USES:     Flags, ES
 38843                                  ; -----------------------------------------------------------------------------
 38844                                  
 38845                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38846                                  	; (SYSINIT:3344h)
 38847                                  findUMB:
 38848                                  	; 01/01/2023
 38849                                  	;push	ax
 38850                                  	; 02/01/2023
 38851 000032D3 51                      	push	cx ; *
 38852                                  	;push	dx
 38853                                  
 38854 000032D4 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 38855                                  
 38856 000032D6 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 38857                                  
 38858 000032D8 E8D2FE                  	call	UmbHead		; Returns first UMB segment in AX
 38859                                  	; 22/07/2023
 38860                                  	;mov	es,ax ; *
 38861 000032DB 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 38862                                  
 38863                                  	; 22/07/2023
 38864                                  fu10:
 38865 000032DD 8EC0                    	mov	es,ax ; * ; **
 38866                                  ; ---------------------------------------------
 38867                                  ; FU10--CX - This UMB number; 0 == conventional
 38868                                  ;       DX - The UMB number they're looking for
 38869                                  ;       ES - The current MCB address
 38870                                  ; ---------------------------------------------
 38871                                  
 38872                                  ;fu10:	
 38873 000032DF 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 38874 000032E1 7417                    	je	short fuX	; searching for--so exit.
 38875                                  
 38876 000032E3 E8D4FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 38877 000032E6 7501                    	jnz	short fu20
 38878                                  
 38879 000032E8 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 38880                                  fu20:	
 38881                                  	;mov	al,[es:ARENA.SIGNATURE]
 38882                                  	;cmp	al,arena_signature_end ; 'Z'
 38883                                  	; 19/07/2023
 38884 000032E9 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 38885 000032EF 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 38886                                  
 38887                                  	;NextMCB es,ax		; Go on forward.
 38888                                  	; 22/07/2023
 38889                                  	; ax = es
 38890                                  	;mov	ax,es ; * ; 22/07/2023
 38891                                  	;add	ax,[es:3]
 38892 000032F1 2603060300              	add	ax,[es:ARENA.SIZE]
 38893 000032F6 40                      	inc	ax
 38894                                  	; 22/07/2023
 38895                                  	;mov	es,ax ; **
 38896 000032F7 EBE4                    	jmp	short fu10
 38897                                  fuE:	
 38898 000032F9 F9                      	stc
 38899                                  fuX:
 38900                                  	; 01/01/2023
 38901                                  	;pop	dx
 38902                                  	; 02/01/2023
 38903 000032FA 59                      	pop	cx ; *
 38904                                  	;pop	ax		; The address is already in ES.
 38905 000032FB C3                      	retn
 38906                                  
 38907                                  ; -----------------------------------------------------------------------------
 38908                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 38909                                  ; -----------------------------------------------------------------------------
 38910                                  ; ENTRY:    AL should be to a valid UMB number
 38911                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 38912                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 38913                                  ; USES:     Flags, ES
 38914                                  ; -----------------------------------------------------------------------------
 38915                                  
 38916                                  	; 01/01/2023 - Retro DOS v4.2
 38917                                  BigFree:
 38918                                  	; 01/01/2023
 38919                                  	;push	bx
 38920 000032FC 51                      	push	cx
 38921                                  
 38922 000032FD E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 38923 00003300 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 38924                                  
 38925 00003302 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 38926 00003304 31C9                    	xor	cx,cx			; Size of largest free MCB
 38927                                  
 38928                                  ; ---------------------------------------------
 38929                                  ; BF10--ES - Current MCB address
 38930                                  ;       BX - Address of largest free MCB so far
 38931                                  ;       CX - Size of largest free MCB so far
 38932                                  ; ---------------------------------------------
 38933                                  
 38934                                  bf10:	
 38935 00003306 E8B1FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 38936 00003309 7428                    	jz	short bf30
 38937                                  
 38938                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 38939 0000330B 26830E010000            	or	word [es:ARENA.OWNER],0
 38940 00003311 750C                    	jnz	short bf20
 38941                                  
 38942 00003313 26A10300                	mov	ax,[es:ARENA.SIZE]
 38943                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 38944 00003317 39C1                    	cmp	cx,ax
 38945                                  	;jg	short bf20		; Unless we're bigger,
 38946                                  	; 19/07/2023
 38947 00003319 7D04                    	jge	short bf20
 38948                                  
 38949 0000331B 8CC3                    	mov	bx,es			; Store this new element's address,
 38950                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 38951 0000331D 89C1                    	mov	cx,ax
 38952                                  
 38953                                  bf20:	
 38954                                  	;mov	al,[es:ARENA.SIGNATURE]
 38955                                  	;cmp	al,arena_signature_end	; 'Z'
 38956                                  	; 19/07/2023
 38957                                  	;cmp	byte [es:0],'Z'
 38958 0000331F 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 38959 00003325 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 38960                                  
 38961                                  	;NextMCB es,ax			; Go on forward.
 38962 00003327 8CC0                    	mov     ax,es
 38963                                  	;add	ax,[es:3]
 38964 00003329 2603060300              	add     ax,[es:ARENA.SIZE]
 38965 0000332E 40                      	inc     ax
 38966 0000332F 8EC0                    	mov     es,ax
 38967                                  
 38968 00003331 EBD3                    	jmp	short bf10
 38969                                  
 38970 00003333 8EC3                    bf30:	mov	es,bx			; Return the address
 38971 00003335 89C8                    	mov	ax,cx			; Return the size
 38972 00003337 09DB                    	or	bx,bx
 38973 00003339 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 38974                                  bfE:	
 38975 0000333B F9                      	stc
 38976                                  bfX:
 38977 0000333C 59                      	pop	cx
 38978                                  	; 01/01/2023
 38979                                  	;pop	bx
 38980 0000333D C3                      	retn
 38981                                  
 38982                                  ; -----------------------------------------------------------------------------
 38983                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 38984                                  ; -----------------------------------------------------------------------------
 38985                                  ; ENTRY:    AL should be to a valid UMB number
 38986                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 38987                                  ; ERROR:    None
 38988                                  ; USES:     Flags
 38989                                  ; -----------------------------------------------------------------------------
 38990                                  
 38991                                  	; 02/01/2023 - Retro DOS v4.2
 38992                                  
 38993                                  isSpecified:
 38994                                  	; 02/01/2023
 38995                                  	;push	ax
 38996                                  
 38997 0000333E 30FF                    	xor	bh,bh
 38998 00003340 88C3                    	mov	bl,al
 38999                                  
 39000                                  	;getdata al,DS:UmbUsed[bx]
 39001                                  	;
 39002                                  	;push	ds
 39003                                  	;push	cs
 39004                                  	;pop	ds
 39005                                  	;mov	al,[bx+UmbUsed]
 39006                                  	;pop	ds
 39007                                  	
 39008                                  	;mov	al,[cs:bx+UmbUsed]
 39009                                  	; 02/01/2023
 39010                                  	; ds = cs
 39011 00003342 8A87[0024]              	mov	al,[bx+UmbUsed]
 39012                                  
 39013 00003346 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 39014                                  
 39015                                  	; 09/09/2023
 39016                                  	; 02/01/2023
 39017                                  	;pop	ax
 39018                                  
 39019 00003348 C3                      	retn
 39020                                  
 39021                                  ; -----------------------------------------------------------------------------
 39022                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 39023                                  ; -----------------------------------------------------------------------------
 39024                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 39025                                  ; EXIT:     None; MCB broken if carry clear
 39026                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 39027                                  ; USES:     Flags
 39028                                  ; -----------------------------------------------------------------------------
 39029                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 39030                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 39031                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 39032                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 39033                                  ; minimum for performing a split.
 39034                                  ; -----------------------------------------------------------------------------
 39035                                  
 39036                                  MIN_SPLIT_SIZE	equ	20h
 39037                                  
 39038                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39039                                  
 39040                                  shrinkMCB:
 39041                                  	;pushreg <bx,cx,es>
 39042                                  	; 02/01/2023
 39043                                  	;push	bx
 39044 00003349 51                      	push	cx
 39045 0000334A 06                      	push	es
 39046                                  
 39047 0000334B 89C3                    	mov	bx,ax			; Move things around... and
 39048                                  	; 02/01/2023
 39049                                  	;mov	ax,es			; save this one for later.
 39050                                  
 39051 0000334D 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 39052                                  	; 02/01/2023
 39053 00003352 89C8                    	mov	ax,cx 
 39054                                  
 39055 00003354 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 39056                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 39057                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 39058                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 39059                                  	; 18/12/2022
 39060                                  	;cmp	cx,bx
 39061                                  	; 02/01/2023
 39062 00003357 39D8                    	cmp	ax,bx
 39063 00003359 7228                    	jb	short smE ; (*)
 39064                                  
 39065 0000335B 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 39066                                  	
 39067                                  	;mov	cx,[es:ARENA.SIZE]
 39068                                  	; 02/01/2023
 39069 00003360 8CC0                    	mov	ax,es
 39070                                  
 39071 00003362 26891E0300              	mov	[es:ARENA.SIZE],bx
 39072 00003367 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 39073                                  
 39074 0000336D 01D8                    	add	ax,bx
 39075 0000336F 40                      	inc	ax
 39076 00003370 8EC0                    	mov	es,ax			; Move to new arena area
 39077                                  
 39078 00003372 89C8                    	mov	ax,cx
 39079 00003374 29D8                    	sub	ax,bx
 39080                                  	; 12/12/2022
 39081                                  	; ax > 0
 39082 00003376 48                      	dec	ax			; And prepare the new size
 39083                                  
 39084                                  	; 18/12/2022
 39085 00003377 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 39086                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 39087 0000337C 26A30300                	mov	[es:ARENA.SIZE],ax
 39088                                  	;mov	ax,'  ' ; 2020h
 39089                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 39090                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 39091                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 39092                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 39093                                  
 39094                                  	; 18/12/2022
 39095 00003380 E8A801                  	call	freeMCB	; (**)
 39096                                  
 39097                                  	; 12/12/2022
 39098                                  	; cf=0
 39099                                  	;clc
 39100                                  	; 18/12/2022
 39101                                  	;jmp	short smX
 39102                                  smE:	
 39103                                  	; 18/12/2022
 39104                                  	; cf=1 (*)
 39105                                  	;stc
 39106                                  smX:	
 39107                                  	;popreg	<es,cx,bx>
 39108 00003383 07                      	pop	es
 39109 00003384 59                      	pop	cx
 39110                                  	; 02/01/2023
 39111                                  	;pop	bx
 39112 00003385 C3                      	retn
 39113                                  
 39114                                  ; -----------------------------------------------------------------------------
 39115                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 39116                                  ; -----------------------------------------------------------------------------
 39117                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 39118                                  ; EXIT:     None; UMB is hidden as necessary
 39119                                  ; ERROR:    None
 39120                                  ; USES:     Flags, AX, CX
 39121                                  ; -----------------------------------------------------------------------------
 39122                                  ; PRIMARY LOGIC:
 39123                                  ;
 39124                                  ; If the UMB is specified in the DH/LH statement, then:
 39125                                  ;    If the largest free segment is too small (check specified size), then:
 39126                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 39127                                  ;    Else, if largest free segment is LARGER than specified size, then:
 39128                                  ;       If /S was given on the command-line, then:
 39129                                  ;          Break that element into two pieces
 39130                                  ;          Set a flag that we're shrinking
 39131                                  ;       Endif
 39132                                  ;    Endif
 39133                                  ; Endif
 39134                                  ; If the UMB is NOT specified (or was removed by the above):
 39135                                  ;    Hide all free elements in the UMB
 39136                                  ;    If the flag that we're shrinking was set, then:
 39137                                  ;       UN-hide the lower portion of the shrunken UMB
 39138                                  ;    ENDIF
 39139                                  ; ENDIF
 39140                                  ; -----------------------------------------------------------------------------
 39141                                  
 39142                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39143                                  	; (SYSINIT:3426h)
 39144                                  _hideUMB_:
 39145                                  	; 02/01/2023
 39146                                  	; ds = cs
 39147                                  
 39148                                  	; 01/01/2023
 39149                                  	;push	bx
 39150                                  	;push	dx
 39151 00003386 06                      	push	es
 39152                                  
 39153 00003387 88C8                    	mov	al,cl
 39154 00003389 E8B2FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 39155 0000338C 742D                    	jz	short hu_20
 39156                                  
 39157 0000338E 88C8                    	mov	al,cl		; Retrieve the size of the largest
 39158 00003390 E869FF                  	call	BigFree		; free element in AX; put its address in ES
 39159 00003393 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 39160                                  
 39161 00003395 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 39162 00003396 88C8                    	mov	al,cl		; Retrieve the user's specified
 39163 00003398 E8AAFE                  	call	GetSize		; minimum size for this umb (into AX)
 39164 0000339B 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 39165                                  
 39166 0000339C 09C0                    	or	ax,ax		; If they didn't specify one,
 39167 0000339E 741B                    	jz	short hu_20	; Skip over all this.
 39168                                  
 39169 000033A0 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 39170 000033A2 7607                    	jbe	short hu_10
 39171                                  
 39172 000033A4 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 39173 000033A6 E81DFD                  	call	unMarkUMB
 39174 000033A9 EB10                    	jmp	short hu_20
 39175                                  hu_10:	
 39176                                  	;call	isTiny		; Returns ZF clear if user specified /S
 39177                                  	;jz	short hu_20
 39178                                  	; 02/01/2023
 39179                                  ;isTiny:
 39180                                  	;mov	al,[fUmbTiny] ; ds = cs
 39181                                  	;or	al,al
 39182 000033AB 800E[FC23]00            	or	byte [fUmbTiny],0
 39183 000033B0 7409                    	jz	short hu_20
 39184                                  
 39185 000033B2 E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 39186 000033B5 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 39187                                  
 39188 000033B7 8CC2                    	mov	dx,es
 39189 000033B9 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 39190                                  
 39191 000033BB 89C8                    hu_20:	mov	ax,cx
 39192 000033BD E87EFF                  	call	isSpecified	; If they specified this UMB, we're done...
 39193 000033C0 7510                    	jnz	short hu_X	; so leave.
 39194                                  
 39195 000033C2 31D2                    	xor	dx,dx
 39196                                  hu_30:	
 39197 000033C4 88C8                    	mov	al,cl
 39198                                  
 39199 000033C6 E89DFE                  	call	hideUMB		; Hides everything in UMB #al
 39200                                  
 39201 000033C9 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 39202 000033CB 7405                    	jz	short hu_X	; So we should leave.
 39203                                  
 39204 000033CD 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 39205 000033CF E8E6FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 39206                                  hu_X:	
 39207 000033D2 07                      	pop	es
 39208                                  	; 01/01/2023
 39209                                  	;pop	dx
 39210                                  	;pop	bx
 39211 000033D3 C3                      	retn
 39212                                  
 39213                                  ; -----------------------------------------------------------------------------
 39214                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 39215                                  ; -----------------------------------------------------------------------------
 39216                                  ; Entry:  None
 39217                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 39218                                  ; Error:  None
 39219                                  ; Uses:   Flags
 39220                                  ; -----------------------------------------------------------------------------
 39221                                  
 39222                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39223                                  UnFreeze:
 39224                                  	; 03/01/2023
 39225                                  	;push	ax
 39226 000033D4 06                      	push	es
 39227                                  
 39228 000033D5 E8D5FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 39229 000033D8 721C                    	jc	short ufX
 39230                                  
 39231                                  	; 22/07/2023
 39232                                  uf10:
 39233 000033DA 8EC0                    	mov	es,ax ; *
 39234                                  
 39235                                  ; ------------------------------
 39236                                  ; UF10--ES - Current MCB address
 39237                                  ; ------------------------------
 39238                                  
 39239                                  ;uf10:	
 39240 000033DC E81900                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 39241 000033DF 7505                    	jnz	short uf20
 39242 000033E1 E8D4FE                  	call	unHideMCB
 39243                                  	; 09/09/2023
 39244                                  	; ax <> es
 39245 000033E4 8CC0                    	mov	ax,es ; *
 39246                                  uf20:	
 39247                                  	;mov	al,[es:ARENA.SIGNATURE]
 39248                                  	;cmp	al,arena_signature_end ; 'Z'
 39249                                  	; 22/07/2023
 39250 000033E6 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39251 000033EC 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 39252                                  
 39253                                  	;NextMCB es,ax		; Go on forward.
 39254                                  	; 22/07/2023
 39255                                  	; ax = es
 39256                                  	;mov	ax,es ; *
 39257                                  	;add	ax,[es:3]
 39258 000033EE 2603060300              	add	ax,[es:ARENA.SIZE]
 39259 000033F3 40                      	inc	ax
 39260                                  	; 22/07/2023
 39261                                  	;mov	es,ax
 39262 000033F4 EBE4                    	jmp	short uf10
 39263                                  ufX:	
 39264 000033F6 07                      	pop	es
 39265                                  	; 03/01/2023
 39266                                  	;pop	ax
 39267 000033F7 C3                      	retn
 39268                                  
 39269                                  ; -----------------------------------------------------------------------------
 39270                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 39271                                  ; -----------------------------------------------------------------------------
 39272                                  ; ENTRY:    ES:0 should point to an MCB
 39273                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 39274                                  ; ERROR:    None
 39275                                  ; USES:     Flags
 39276                                  ; -----------------------------------------------------------------------------
 39277                                  
 39278                                  isFrozMCB:
 39279                                  	;push	ax
 39280                                  
 39281                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 39282                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 39283 000033F8 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 39284 000033FE 7522                    	jne	short ifmX
 39285                                  
 39286                                  	;mov	ax,[es:ARENA.NAME+0]
 39287                                  	;cmp	ax,'FR' ; 5246h
 39288 00003400 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 39289 00003407 7519                    	jne	short ifmX
 39290                                  	;mov	ax,[es:ARENA.NAME+2]
 39291                                  	;cmp	ax,'OZ' ; 5A4Fh
 39292 00003409 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 39293 00003410 7510                    	jne	short ifmX
 39294                                  	;mov	ax,[es:ARENA.NAME+4]
 39295                                  	;cmp	ax,'EN' ; 4E45h
 39296 00003412 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 39297 00003419 7507                    	jne	short ifmX
 39298                                  	;mov	ax,[es:ARENA.NAME+6]
 39299                                  	;cmp	ax,'  ' ; 2020h
 39300 0000341B 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 39301                                  ifmX:	
 39302                                  	;pop	ax
 39303 00003422 C3                      	retn
 39304                                  
 39305                                  ; -----------------------------------------------------------------------------
 39306                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 39307                                  ; -----------------------------------------------------------------------------
 39308                                  ; ENTRY:    ES:0 should point to an MCB
 39309                                  ; EXIT:     None; MCB frozen
 39310                                  ; ERROR:    None
 39311                                  ; USES:     None
 39312                                  ; -----------------------------------------------------------------------------
 39313                                  
 39314                                  frezMCB:
 39315 00003423 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 39316 0000342A 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 39317 00003431 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 39318 00003438 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 39319 0000343F 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 39320 00003446 C3                      	retn
 39321                                  
 39322                                  ; -----------------------------------------------------------------------------
 39323                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 39324                                  ; -----------------------------------------------------------------------------
 39325                                  ; Entry:  None
 39326                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 39327                                  ; Error:  None
 39328                                  ; Uses:   Flags
 39329                                  ; -----------------------------------------------------------------------------
 39330                                  
 39331                                  	; 01/01/2023 - Retro DOS v4.2  
 39332                                  FreezeUM:
 39333                                  	; 01/01/2023
 39334                                  	;push	ax
 39335                                  	;push	cx
 39336                                  	;push	dx
 39337 00003447 06                      	push	es
 39338                                  
 39339                                  	;;call	GetLoadUMB
 39340                                  	; 01/01/2023
 39341                                  	; ds = cs
 39342                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 39343 00003448 A0[FF23]                	mov	al,[UmbLoad] 	
 39344                                  
 39345 0000344B 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 39346 0000344D 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 39347                                  
 39348 0000344F E85BFD                  	call	UmbHead		; Returns first UMB segment in AX
 39349                                  	; 22/07/2023
 39350                                  	;mov	es,ax ; *
 39351 00003452 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 39352                                  
 39353                                  	; 22/07/2023
 39354                                  fum10:
 39355 00003454 8EC0                    	mov	es,ax ; *
 39356                                  
 39357                                  ; -----------------------------------------
 39358                                  ; FUM10--ES - Current MCB address
 39359                                  ;        CX - Current UMB number
 39360                                  ;        DX - UMB number to skip (load UMB)
 39361                                  ; -----------------------------------------
 39362                                  
 39363                                  ;fum10:	
 39364 00003456 E861FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 39365 00003459 7501                    	jnz	short fum20
 39366                                  
 39367 0000345B 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 39368                                  fum20:	
 39369 0000345C 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 39370 0000345E 740B                    	je	short fum30	; freeze anything... so skip that section.
 39371                                  
 39372                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 39373 00003460 26830E010000            	or	word [es:ARENA.OWNER],0
 39374 00003466 7503                    	jnz	short fum30	; either.
 39375                                  
 39376 00003468 E8B8FF                  	call	frezMCB
 39377                                  fum30:	
 39378                                  	;mov	al,[es:ARENA.SIGNATURE]
 39379                                  	;cmp	al,arena_signature_end ; 'Z'
 39380                                  	; 22/07/2023
 39381 0000346B 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39382 00003471 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 39383                                  
 39384                                  	;NextMCB es, ax		; Go on forward.
 39385                                  	; 22/07/2023
 39386                                  	; ax = es
 39387                                  	;mov	ax,es
 39388                                  	;add	ax,[es:3]
 39389 00003473 2603060300              	add	ax,[es:ARENA.SIZE]
 39390 00003478 40                      	inc	ax
 39391                                  	; 22/07/2023
 39392                                  	;mov	es,ax ; *
 39393 00003479 EBD9                    	jmp	short fum10
 39394                                  
 39395 0000347B 07                      fumX:	pop	es
 39396                                  	; 01/01/2023
 39397                                  	;pop	dx
 39398                                  	;pop	cx
 39399                                  	;pop	ax
 39400 0000347C C3                      	retn
 39401                                  
 39402                                  ; -----------------------------------------------------------------------------
 39403                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 39404                                  ; -----------------------------------------------------------------------------
 39405                                  ; ENTRY:    None
 39406                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 39407                                  ; ERROR:    None
 39408                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 39409                                  ; -----------------------------------------------------------------------------
 39410                                  
 39411                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39412                                  UmbTest:
 39413                                  	; 01/01/2023
 39414                                  	;push	ax
 39415 0000347D 53                      	push	bx ; *
 39416                                  	;push	ds
 39417 0000347E 06                      	push	es ; **
 39418                                  
 39419                                  	; 01/01/2023
 39420                                  	; ds = cs
 39421                                  
 39422 0000347F E871FB                  	call	fm_link			; Link in UMBs (if not already linked)
 39423 00003482 E80800                  	call	WalkMem			; Check to see if they're really linked
 39424 00003485 9C                      	pushf				; And remember what we found out
 39425 00003486 E87BFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 39426 00003489 9D                      	popf				; And restore what we found out.
 39427                                  
 39428 0000348A 07                      	pop	es ; **
 39429                                  	; 01/01/2023
 39430                                  	;pop	ds
 39431 0000348B 5B                      	pop	bx ; *
 39432                                  	;pop	ax
 39433 0000348C C3                      	retn
 39434                                  
 39435                                  ; -----------------------------------------------------------------------------
 39436                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 39437                                  ; -----------------------------------------------------------------------------
 39438                                  ; ENTRY:    None
 39439                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 39440                                  ; ERROR:    None
 39441                                  ; USES:     Flags
 39442                                  ; -----------------------------------------------------------------------------
 39443                                  
 39444                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39445                                  	; (SYSINIT:3541h)
 39446                                  
 39447                                  WalkMem:
 39448                                  	;push	ax ; ?
 39449                                  	;push	bx ; ?
 39450                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 39451                                  	;push	es ; ? no need to save contents of these registers ?
 39452                                  		   	
 39453 0000348D B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 39454 0000348F CD21                    	int	21h
 39455                                  
 39456 00003491 268B47FE                	mov	ax,[es:bx-2]
 39457                                  	; 22/07/2023
 39458                                  um10:
 39459 00003495 8EC0                    	mov	es,ax ; * ; **
 39460                                  
 39461                                  ; ------------------------------
 39462                                  ; UM10: ES = Current MCB pointer
 39463                                  ; ------------------------------
 39464                                  
 39465                                  ;um10:
 39466                                  	;mov	al,[es:ARENA.SIGNATURE]
 39467                                  	;cmp	al,arena_signature_end ; 'Z'
 39468                                  	; 22/07/2023
 39469 00003497 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39470 0000349D 7408                    	je	short um20		; If signature == 'Z', hay no more.
 39471                                  
 39472                                  	;NextMCB es,bx			; Move to the next MCB
 39473                                  
 39474                                  	;mov	bx,es
 39475                                  	;;add	bx,[es:3]
 39476                                  	;add	bx,[es:ARENA.SIZE]
 39477                                  	;inc	bx
 39478                                  	;mov	es,bx
 39479                                  	; 22/07/2023
 39480                                  	; ax = es
 39481                                  	;mov	ax,es ; *
 39482 0000349F 2603060300              	add	ax,[es:ARENA.SIZE]
 39483 000034A4 40                      	inc	ax
 39484                                  	;mov	es,ax ; **
 39485                                  	
 39486 000034A5 EBEE                    	jmp	short um10		; And restart the loop.
 39487                                  um20:	
 39488                                  	; 22/07/2023
 39489                                  	; ax = es
 39490                                  	;mov	ax,es
 39491                                  
 39492 000034A7 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 39493                                  
 39494                                  	;pop	es ; ?
 39495                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 39496                                  	;pop	bx ; ?
 39497                                  	;pop	ax ; ?
 39498                                  	
 39499 000034AA C3                      	retn
 39500                                  
 39501                                  ; -----------------------------------------------------------------------------
 39502                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 39503                                  ; -----------------------------------------------------------------------------
 39504                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 39505                                  ; EXIT:     None
 39506                                  ; ERROR:    None
 39507                                  ; USES:     AX, BX
 39508                                  ; -----------------------------------------------------------------------------
 39509                                  
 39510                                  	; 01/01/2023 - Retro DOS v4.2
 39511                                  hl_unlink:
 39512 000034AB 30FF                    	xor	bh,bh
 39513                                  
 39514                                  	;getdata bl,fm_umb		; Restore original link-state
 39515                                  	;
 39516                                  	;push	ds
 39517                                  	;push	cs
 39518                                  	;pop	ds
 39519                                  	;mov	bl,[fm_umb]
 39520                                  	;pop	ds
 39521                                  
 39522                                  	; 01/01/2023
 39523                                  	; ds = cs
 39524                                  	;mov	bl,[cs:fm_umb]
 39525 000034AD 8A1E[3024]              	mov	bl,[fm_umb]
 39526                                  
 39527 000034B1 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 39528 000034B4 CD21                    	int	21h
 39529 000034B6 C3                      	retn
 39530                                  
 39531                                  ; ----------------------------------------------------------------------
 39532                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 39533                                  ; ----------------------------------------------------------------------
 39534                                  ; 09/04/2019 - Retro DOS v4.0
 39535                                  
 39536                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 39537                                  ;   Date:     May 14, 1992
 39538                                  
 39539                                  ;   Modification log:
 39540                                  ;
 39541                                  ;     DATE    WHO      DESCRIPTION
 39542                                  ;   --------  -------  --------------------------------------------------------
 39543                                  ;   05/14/92  t-richj  Original
 39544                                  ;   06/21/92  t-richj  Final revisions before check-in
 39545                                  
 39546                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 39547                                  
 39548                                  ; -----------------------------------------------------------------------------
 39549                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 39550                                  ; -----------------------------------------------------------------------------
 39551                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 39552                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 39553                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 39554                                  ; ERROR:  None
 39555                                  ; USES:   fInHigh (from highvar.inc), carry flag
 39556                                  ; -----------------------------------------------------------------------------
 39557                                  
 39558                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39559                                  	; (SYSINIT:357Bh)
 39560                                  
 39561                                  UnHideUMBs:
 39562 000034B7 50                      	push	ax		; Save ax for what we're about to do
 39563                                  
 39564                                  ; -----------------------------------------------------------------------------
 39565                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 39566                                  ;    length of time. Those six constitute a check of whether or not we should
 39567                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 39568                                  ;    will destroy the current link-state and memory-allocation strategy after
 39569                                  ;    every command execution.
 39570                                  ; -----------------------------------------------------------------------------
 39571                                  
 39572                                  	;getdata al,fInHigh	; Get InHigh from data segment
 39573                                  	;
 39574                                  	;push	ds
 39575                                  	;push	cs
 39576                                  	;pop	ds
 39577                                  	;mov	al,[fInHigh]
 39578                                  	;pop	ds	
 39579                                  
 39580                                  	;mov	al,[cs:fInHigh]
 39581                                  	; 31/12/2022
 39582                                  	; ds = cs
 39583 000034B8 A0[FB23]                	mov	al,[fInHigh]	
 39584                                  
 39585 000034BB 08C0                    	or	al,al
 39586 000034BD 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 39587                                  
 39588 000034BF 58                      	pop	ax		; then there's nothing to do here... so
 39589 000034C0 F9                      	stc			; restore everything and return. Just like
 39590 000034C1 C3                      	retn			; that.
 39591                                  uhu10:	
 39592 000034C2 E88E00                  	call	linkumb		; Make sure UMBs are linked in.
 39593 000034C5 E81200                  	call	FreeUMBs
 39594                                  
 39595                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 39596                                  	;
 39597                                  	;push	es
 39598                                  	;push	cs
 39599                                  	;pop	es
 39600                                  	;mov	byte [es:fInHigh],0
 39601                                  	;pop	ds
 39602                                  
 39603                                  	; 31/12/2022
 39604                                  	; ds = cs	
 39605                                  	;mov	byte [cs:fInHigh],0
 39606 000034C8 C606[FB23]00            	mov	byte [fInHigh],0
 39607                                  
 39608                                  	;call	he_unlink	; Unlink UMBs
 39609                                  	; 31/12/2022
 39610                                  ;;he_unlink:
 39611 000034CD 30FF                    	xor	bh,bh
 39612                                  
 39613                                  	;getdata bl,fm_umb	; Restore original link-state
 39614                                  	;mov	bl,[cs:fm_umb]	
 39615 000034CF 8A1E[3024]              	mov	bl,[fm_umb]
 39616                                  
 39617 000034D3 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 39618 000034D6 CD21                    	int	21h
 39619                                  	;;retn
 39620                                  
 39621 000034D8 58                      	pop	ax
 39622                                  	; 12/12/2022
 39623                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 39624 000034D9 C3                      	retn
 39625                                  
 39626                                  ; 31/12/2022
 39627                                  ;%if 0
 39628                                  ;
 39629                                  ;; -----------------------------------------------------------------------------
 39630                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 39631                                  ;; -----------------------------------------------------------------------------
 39632                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 39633                                  ;; EXIT:     None
 39634                                  ;; ERROR:    None
 39635                                  ;; USES:     AX, BX
 39636                                  ;; -----------------------------------------------------------------------------
 39637                                  ;
 39638                                  ;he_unlink:
 39639                                  ;	xor	bh, bh
 39640                                  ;
 39641                                  ;	;getdata bl, fm_umb	; Restore original link-state
 39642                                  ;	mov	bl,[cs:fm_umb]	
 39643                                  ;
 39644                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 39645                                  ;	int	21h
 39646                                  ;	retn
 39647                                  ;
 39648                                  ;%endif
 39649                                  
 39650                                  ; -----------------------------------------------------------------------------
 39651                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 39652                                  ; -----------------------------------------------------------------------------
 39653                                  ; ENTRY:    None
 39654                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 39655                                  ; ERROR:    None (ignore CF)
 39656                                  ; USES:     Flags
 39657                                  ; -----------------------------------------------------------------------------
 39658                                  
 39659                                  FreeUMBs:
 39660 000034DA 50                      	push	ax
 39661 000034DB 06                      	push	es
 39662                                  
 39663 000034DC E86700                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 39664 000034DF 721C                    	jc	short fusX
 39665                                  fus10:
 39666 000034E1 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 39667                                  ;fus10:	
 39668 000034E3 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 39669 000034E6 7505                    	jnz	short fus20
 39670 000034E8 E84000                  	call	freeMCB
 39671                                  	; 09/09/2023
 39672                                  	; ax <> es
 39673 000034EB 8CC0                    	mov	ax,es
 39674                                  fus20:	   
 39675                                  	;mov	al,[es:ARENA.SIGNATURE]
 39676                                  	;cmp	al,arena_signature_end ; 'Z'
 39677                                  	; 22/07/2023
 39678 000034ED 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39679 000034F3 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 39680                                  	
 39681                                  	; 22/07/2023
 39682                                  	; ax = es
 39683                                  	;mov	ax,es
 39684 000034F5 2603060300              	add	ax,[es:ARENA.SIZE]
 39685 000034FA 40                      	inc	ax
 39686                                  	; 22/07/2023
 39687                                  	;mov	es,ax
 39688 000034FB EBE4                    	jmp	short fus10	; Go on forward.
 39689                                  fusX:	
 39690 000034FD 07                      	pop	es
 39691 000034FE 58                      	pop	ax
 39692 000034FF C3                      	retn
 39693                                  
 39694                                  ; -----------------------------------------------------------------------------
 39695                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 39696                                  ; -----------------------------------------------------------------------------
 39697                                  ; ENTRY:    ES:0 should point to an MCB
 39698                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 39699                                  ; ERROR:    None
 39700                                  ; USES:     Flags
 39701                                  ; -----------------------------------------------------------------------------
 39702                                  
 39703                                  isHideMCB:
 39704                                  	;push	ax
 39705                                  
 39706 00003500 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 39707 00003506 7522                    	jne	short ihm_x				; then check for HIDDEN
 39708                                  
 39709                                  	;mov	ax,[es:ARENA.NAME]
 39710                                  	;cmp	ax,'HI' ; 4948h
 39711 00003508 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 39712 0000350F 7519                    	jne	short ihm_x
 39713                                  	;mov	ax,[es:ARENA.NAME+2]
 39714                                  	;cmp	ax,'DD' ; 4444h
 39715 00003511 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 39716 00003518 7510                    	jne	short ihm_x
 39717                                  	;mov	ax,[es:ARENA.NAME+4]
 39718                                  	;cmp	ax,'EN' ; 4E45h
 39719 0000351A 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 39720 00003521 7507                    	jne	short ihm_x
 39721                                  	;mov	ax,[es:ARENA.NAME+6]
 39722                                  	;cmp	ax,'  ' ; 2020h
 39723 00003523 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 39724                                  ihm_x:	
 39725                                  	;pop	ax
 39726 0000352A C3                      	retn
 39727                                  
 39728                                  ; -----------------------------------------------------------------------------
 39729                                  ;*** freeMCB - marks as free the MCB at ES:0
 39730                                  ; -----------------------------------------------------------------------------
 39731                                  ; ENTRY:    ES:0 should point to an MCB
 39732                                  ; EXIT:     None; MCB free'd
 39733                                  ; ERROR:    None
 39734                                  ; USES:     AX
 39735                                  ; -----------------------------------------------------------------------------
 39736                                  
 39737                                  freeMCB:
 39738 0000352B 26C70601000000          	mov	word [es:ARENA.OWNER],0
 39739 00003532 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 39740 00003535 26A30800                	mov	[es:ARENA.NAME+0],ax
 39741 00003539 26A30A00                	mov	[es:ARENA.NAME+2],ax
 39742 0000353D 26A30C00                	mov	[es:ARENA.NAME+4],ax
 39743 00003541 26A30E00                	mov	[es:ARENA.NAME+6],ax
 39744 00003545 C3                      	retn
 39745                                  
 39746                                  ; -----------------------------------------------------------------------------
 39747                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 39748                                  ; -----------------------------------------------------------------------------
 39749                                  ; ENTRY:  Nothing
 39750                                  ; EXIT:   AX contains 0x9FFF for most systems
 39751                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 39752                                  ; USES:   Flags, AX
 39753                                  ; -----------------------------------------------------------------------------
 39754                                  
 39755                                  HeadUmb:
 39756                                  	; 13/05/2019
 39757                                  
 39758                                  	;push	si ; ?
 39759                                  	;push	ds ; ?
 39760                                  	;push	es
 39761                                  	;push	bx ; *
 39762                                  
 39763                                  	; 09/04/2019
 39764                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 39765                                  
 39766 00003546 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 39767 00003548 CD21                    	int	21h
 39768                                  			; DOS - 2+ internal - GET LIST OF LISTS
 39769                                  			; Return: ES:BX -> DOS list of lists
 39770                                  	;mov	ax,[es:8Ch]
 39771 0000354A 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 39772 0000354E 83F8FF                  	cmp	ax,0FFFFh
 39773                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 39774                                  
 39775                                  	;clc				; Else, it isn't.
 39776                                  	;jmp	short xhu_x
 39777                                  xhu_e:	
 39778                                  	;stc
 39779 00003551 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 39780                                  xhu_x:	
 39781                                  	;pop	bx ; *
 39782                                  	;pop	es	
 39783                                  	;pop	ds ; ?
 39784                                  	;pop	si ; ?
 39785 00003552 C3                      	retn
 39786                                  
 39787                                  ; -----------------------------------------------------------------------------
 39788                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 39789                                  ; -----------------------------------------------------------------------------
 39790                                  ; ENTRY:    None
 39791                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 39792                                  ; ERROR:    None
 39793                                  ; USES:     AX, BX, fm_umb
 39794                                  ; -----------------------------------------------------------------------------
 39795                                  
 39796                                  linkumb:
 39797 00003553 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 39798 00003556 CD21                    	int	21h			; Current link-state is now in al
 39799                                  
 39800 00003558 08C0                    	or	al,al			; BUGBUG: proper check?
 39801 0000355A 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 39802                                  
 39803 0000355C B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 39804 0000355F BB0100                  	mov	bx,1
 39805 00003562 CD21                    	int	21h
 39806                                  lumbX:
 39807 00003564 C3                      	retn
 39808                                  
 39809                                  ;%endif
 39810                                  
 39811                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39812                                  ; (SYSINIT:2B5Fh)
 39813                                  
 39814                                  ; ----------------------------------------------------------------------
 39815                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 39816                                  ; ----------------------------------------------------------------------
 39817                                  ; 09/04/2019 - Retro DOS v4.0
 39818                                  
 39819                                  ;----------------------------------------------------------------------------
 39820                                  ;
 39821                                  ; procedure : InitDevLoad
 39822                                  ;
 39823                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 39824                                  ;			 = 1 indicates load in UMB:
 39825                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 39826                                  ;		                    = 1 indicates a DOS 5-style load
 39827                                  ;		DevSize  = Size of the device driver file in paras
 39828                                  ;
 39829                                  ;	Output : none
 39830                                  ;
 39831                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 39832                                  ;	Also sets up a header for the Device driver entry for mem utility
 39833                                  ;
 39834                                  ;----------------------------------------------------------------------------
 39835                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 39836                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 39837                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 39838                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 39839                                  ;----------------------------------------------------------------------------
 39840                                  
 39841                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39842                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39843                                  	; (SYSINIT:364Ah)
 39844                                  InitDevLoad:
 39845                                  	; 01/01/2023
 39846                                  	;push	es ; *
 39847                                  
 39848                                  	; 11/12/2022
 39849                                  	; ds = cs
 39850 00003565 803E[5124]00            	cmp	byte [DeviceHi],0
 39851                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 39852                                  	;je	short InitForLo		; no, init for lo mem
 39853 0000356A 7439                    	je	short initforlo_x ; 09/04/2019
 39854                                  
 39855                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39856                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39857                                  ; %if 0
 39858                                  	; 01/01/2023
 39859 0000356C 803E[4124]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 39860                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 39861 00003571 7413                    	je	short InitForConv
 39862                                  
 39863                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 39864                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 39865                                  ; any areas left in upper-memory, except for elements in the load UMB...
 39866                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 39867                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 39868                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 39869                                  
 39870 00003573 E85904                  	call	ShrinkUMB		; Stop using the old device arena
 39871                                  
 39872 00003576 E892FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 39873 00003579 E8CBFE                  	call	FreezeUM		; Hide everything BUT the load area
 39874 0000357C E85700                  	call	GetUMBForDev		; And grab that load area as needed
 39875 0000357F 9C                      	pushf
 39876 00003580 E851FE                  	call	UnFreeze		; Then unhide everything frozen
 39877 00003583 9D                      	popf
 39878                                  	;jc	short InitForLo		; (if carry, it's loading low)
 39879                                  	;jmp	short InitForHi
 39880                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39881 00003584 EB0B                    	jmp	short idl0
 39882                                  
 39883                                  ;%endif ; 01/11/2022
 39884                                  
 39885                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39886                                  	; (SYSINIT:2B67h)
 39887                                  InitForConv:
 39888                                  	; 11/12/2022
 39889                                  	; ds = cs
 39890 00003586 E83700                  	call	SpaceInUMB		; Do we have space left in the
 39891                                  					;  current UMB ?
 39892 00003589 7308                    	jnc	short InitForHi		; yes, we have
 39893 0000358B E84104                  	call	ShrinkUMB		; shrink the current UMB in use
 39894 0000358E E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 39895                                  idl0: ; 06/07/2023
 39896 00003591 720D                    	jc	short InitForLo		; we didn't succeed, so load
 39897                                  					;  in low memory
 39898                                  InitForHi:
 39899                                  	; 11/12/2022
 39900                                  	; ds = cs
 39901                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 39902                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 39903                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 39904 00003593 A1[4724]                	mov	ax,[DevUMBFree]
 39905 00003596 8B16[4324]              	mov	dx,[DevUMBAddr]
 39906 0000359A 0316[4524]              	add	dx,[DevUMBSize]
 39907 0000359E EB0C                    	jmp	short idl1
 39908                                  
 39909                                  InitForLo:
 39910                                  	; 11/12/2022
 39911                                  	; ds = cs
 39912                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 39913 000035A0 C606[5124]00            	mov	byte [DeviceHi],0
 39914                                  initforlo_x:
 39915                                  	; 11/12/2022
 39916                                  	; ds = cs
 39917                                  					;  into UMB indicate that
 39918                                  					;  we are loading low
 39919                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 39920                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 39921 000035A5 A1[6403]                	mov	ax,[memhi]
 39922 000035A8 8B16[A502]              	mov	dx,[ALLOCLIM]
 39923                                  idl1:
 39924 000035AC E86600                  	call	DevSetMark		; setup a sub-arena for DD
 39925                                  	; 11/12/2022
 39926                                  	; ds = cs
 39927                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 39928                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 39929                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 39930                                  	;mov	[cs:DevEntry+2],ax
 39931 000035AF A3[3524]                	mov	[DevLoadAddr],ax
 39932 000035B2 8916[3724]              	mov	[DevLoadEnd],dx
 39933 000035B6 C706[3924]0000          	mov	word [DevEntry],0
 39934 000035BC A3[3B24]                	mov	[DevEntry+2],ax
 39935                                  	; 01/01/2023
 39936                                  	;pop	es ; *
 39937 000035BF C3                      	retn
 39938                                  
 39939                                  ;----------------------------------------------------------------------------
 39940                                  ;
 39941                                  ; procedure : SpaceInUMB?
 39942                                  ;
 39943                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 39944                                  ;	Output : Carry set if no space in UMB
 39945                                  ;		 Carry clear if Space is available for the device in
 39946                                  ;		   current UMB
 39947                                  ;
 39948                                  ;----------------------------------------------------------------------------
 39949                                  
 39950                                  SpaceInUMB:
 39951                                  	; 11/12/2022
 39952                                  	; ds = cs
 39953                                  	;mov	ax,[cs:DevUMBSize]
 39954                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 39955                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 39956 000035C0 A1[4524]                	mov	ax,[DevUMBSize]
 39957 000035C3 0306[4324]              	add	ax,[DevUMBAddr]		; End of UMB
 39958 000035C7 2B06[4724]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 39959                                  	; 11/12/2022
 39960                                  	;or	ax,ax			; Nospace ?
 39961                                  	;jnz	short spcinumb1
 39962                                  	;stc
 39963                                  	;retn
 39964                                  	; 11/12/2022
 39965 000035CB 83F801                  	cmp	ax,1
 39966 000035CE 7205                    	jb	short spcinumb2	; cf=1
 39967                                  spcinumb1:
 39968 000035D0 48                      	dec	ax			; space for sub-arena
 39969                                  	; 11/12/2022
 39970                                  	; ds = cs
 39971 000035D1 3B06[3324]              	cmp	ax,[DevSize]
 39972                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 39973                                  spcinumb2:
 39974 000035D5 C3                      	retn
 39975                                  
 39976                                  ;----------------------------------------------------------------------------
 39977                                  ;
 39978                                  ; procedure : PrepareMark
 39979                                  ;
 39980                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 39981                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 39982                                  ;
 39983                                  ;----------------------------------------------------------------------------
 39984                                  
 39985                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39986                                  ;
 39987                                  ;PrepareMark:
 39988                                  ;	push	ds
 39989                                  ;	mov	ds,ax
 39990                                  ;	mov	word [ARENA.OWNER],8
 39991                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 39992                                  ;	pop	ds
 39993                                  ;
 39994                                  ;	inc	ax
 39995                                  ;	mov	[cs:DevUMBAddr],ax
 39996                                  ;	mov	[cs:DevUMBFree],ax
 39997                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 39998                                  ;	retn
 39999                                  
 40000                                  ;----------------------------------------------------------------------------
 40001                                  ;
 40002                                  ; procedure : GetUMBForDev
 40003                                  ;
 40004                                  ;	Input : DevSize
 40005                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 40006                                  ;		 the device.
 40007                                  ;		 If success carry clear
 40008                                  ;
 40009                                  ;	Allocates the biggest UMB for loading devices and updates
 40010                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 40011                                  ;	UMB.
 40012                                  ;
 40013                                  ;	This routine relies on the fact that all of the low memory
 40014                                  ;	is allocated, and any DOS alloc calls should return memory
 40015                                  ;	from the UMB pool.
 40016                                  ;
 40017                                  ;----------------------------------------------------------------------------
 40018                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40019                                  	; (SYSINIT:2BC6h)
 40020                                  
 40021                                  GetUMBForDev:
 40022                                  	; 11/12/2022
 40023                                  	; ds = cs
 40024 000035D6 BBFFFF                  	mov	bx,0FFFFh
 40025 000035D9 B80048                  	mov	ax,4800h
 40026 000035DC CD21                    	int	21h
 40027                                  		; DOS - 2+ - ALLOCATE MEMORY
 40028                                  		; BX = number of 16-byte paragraphs desired
 40029                                  
 40030 000035DE 09DB                    	or	bx,bx
 40031                                  	;jz	short gufd_err
 40032                                  	; 09/09/2023
 40033 000035E0 742E                    	jz	short gufd_error ; bx = 0
 40034                                  
 40035 000035E2 4B                      	dec	bx
 40036                                  	; 11/12/2022
 40037                                  	; ds = cs
 40038 000035E3 391E[3324]              	cmp	[DevSize],bx
 40039                                  	;cmp	[cs:DevSize],bx
 40040 000035E7 7725                    	ja	short gufd_err
 40041                                  
 40042 000035E9 43                      	inc	bx
 40043                                  
 40044 000035EA B80048                  	mov	ax,4800h
 40045 000035ED CD21                    	int	21h
 40046 000035EF 721D                    	jc	short gufd_err
 40047                                  
 40048                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40049                                  	;dec	ax
 40050                                  	;call	PrepareMark
 40051                                  	;
 40052                                  PrepareMark:
 40053 000035F1 1E                      	push	ds
 40054 000035F2 48                      	dec	ax
 40055 000035F3 8ED8                    	mov	ds,ax
 40056 000035F5 C70601000800            	mov	word [ARENA.OWNER],8
 40057 000035FB C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 40058 00003601 40                      	inc	ax
 40059 00003602 1F                      	pop	ds
 40060                                  	; 11/12/2022
 40061                                  	; ds = cs
 40062                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 40063                                  	;mov	[cs:DevUMBAddr],ax
 40064                                  	;mov	[cs:DevUMBFree],ax
 40065                                  gufd_x:		; 09/09/2023
 40066 00003603 891E[4524]              	mov	[DevUMBSize],bx		; update the UMB Variables
 40067 00003607 A3[4324]                	mov	[DevUMBAddr],ax
 40068 0000360A A3[4724]                	mov	[DevUMBFree],ax
 40069                                  	;
 40070                                  	; 11/12/2022
 40071                                  	; cf=0
 40072                                  	;clc				; mark no error
 40073 0000360D C3                      	retn
 40074                                  
 40075                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40076                                  %if 1
 40077                                  gufd_err:
 40078 0000360E 31DB                    	xor	bx,bx ; 0
 40079                                  gufd_error:
 40080 00003610 31C0                    	xor	ax,ax ; 0
 40081 00003612 F9                      	stc	; cf=1
 40082 00003613 EBEE                    	jmp	short gufd_x	
 40083                                  %endif
 40084                                  
 40085                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40086                                  %if 0
 40087                                  gufd_err:
 40088                                  	xor	ax,ax ; 0
 40089                                  	; 11/12/2022
 40090                                  	; ds = cs
 40091                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 40092                                  	;mov	[cs:DevUMBAddr],ax
 40093                                  	;mov	[cs:DevUMBFree],ax
 40094                                  	mov	[DevUMBSize],ax		; erase the previous values
 40095                                  	mov	[DevUMBAddr],ax
 40096                                  	mov	[DevUMBFree],ax
 40097                                  	stc
 40098                                  	retn
 40099                                  %endif
 40100                                  
 40101                                  ;----------------------------------------------------------------------------
 40102                                  ;
 40103                                  ; procedure : DevSetMark
 40104                                  ;
 40105                                  ;	Input : AX - Free segment were device is going to be loaded
 40106                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 40107                                  ;
 40108                                  ;	Creates a sub-arena for the device driver
 40109                                  ;	puts 'D' marker in the sub-arena
 40110                                  ;	Put the owner of the sub-arena as (AX+1)
 40111                                  ;	Copies the file name into sub-arena name field
 40112                                  ;
 40113                                  ;	Size field of the sub-arena will be set only at succesful
 40114                                  ;	completion of Device load.
 40115                                  ;
 40116                                  ;----------------------------------------------------------------------------
 40117                                  
 40118                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40119                                  	; (SYSINIT:2C13h)
 40120                                  
 40121                                  DevSetMark:
 40122 00003615 06                      	push	es
 40123                                  	; 03/01/2023
 40124                                  	;push	di
 40125 00003616 1E                      	push	ds
 40126 00003617 56                      	push	si
 40127 00003618 8EC0                    	mov	es,ax
 40128 0000361A 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 40129 00003620 40                      	inc	ax
 40130 00003621 26A30100                	mov	[es:devmark.seg],ax
 40131                                  
 40132                                  ;-------------- Copy file name
 40133                                  
 40134 00003625 50                      	push	ax			; save load addr
 40135                                  
 40136                                  	; 09/09/2023
 40137                                  	; ds = cs
 40138                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 40139 00003626 C536[8103]              	lds	si,[bpb_addr]
 40140                                  
 40141 0000362A 89F7                    	mov	di,si
 40142 0000362C FC                      	cld
 40143                                  dsm_again:
 40144 0000362D AC                      	lodsb
 40145 0000362E 3C3A                    	cmp	al,':'
 40146 00003630 7504                    	jne	short isit_slash
 40147 00003632 89F7                    	mov	di,si
 40148 00003634 EBF7                    	jmp	short dsm_again
 40149                                  isit_slash:
 40150 00003636 3C5C                    	cmp	al, '\'
 40151 00003638 7504                    	jne	short isit_null
 40152 0000363A 89F7                    	mov	di,si
 40153 0000363C EBEF                    	jmp	short dsm_again
 40154                                  isit_null:
 40155 0000363E 08C0                    	or	al,al
 40156 00003640 75EB                    	jnz	short dsm_again
 40157 00003642 89FE                    	mov	si,di
 40158                                  
 40159 00003644 BF0800                  	mov	di,devmark.filename ; 8
 40160 00003647 B90800                  	mov	cx,8			; maximum 8 characters
 40161                                  dsm_next_char:
 40162 0000364A AC                      	lodsb
 40163 0000364B 08C0                    	or	al, al
 40164 0000364D 7407                    	jz	short blankout
 40165 0000364F 3C2E                    	cmp	al, '.'
 40166 00003651 7403                    	je	short blankout
 40167 00003653 AA                      	stosb
 40168 00003654 E2F4                    	loop	dsm_next_char
 40169                                  blankout:
 40170 00003656 E304                    	jcxz	dsm_exit
 40171 00003658 B020                    	mov	al, ' '
 40172 0000365A F3AA                    	rep	stosb			; blank out the rest
 40173                                  dsm_exit:
 40174 0000365C 58                      	pop	ax			; restore load addr
 40175 0000365D 5E                      	pop	si
 40176 0000365E 1F                      	pop	ds
 40177                                  	; 03/01/2023
 40178                                  	;pop	di
 40179 0000365F 07                      	pop	es
 40180 00003660 C3                      	retn
 40181                                  
 40182                                  ;----------------------------------------------------------------------------
 40183                                  ;
 40184                                  ; procedure : SizeDevice
 40185                                  ;
 40186                                  ;	Input : ES:SI - points to device file to be sized
 40187                                  ;
 40188                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 40189                                  ;
 40190                                  ;	Calculates the size of the device file in paras and stores it
 40191                                  ;	in DevSize
 40192                                  ;
 40193                                  ;----------------------------------------------------------------------------
 40194                                  
 40195                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40196                                  SizeDevice:
 40197                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40198                                  	; 11/12/2022 ; *
 40199 00003661 1E                      	push	ds ; *
 40200 00003662 06                      	push	es
 40201 00003663 1F                      	pop	ds
 40202 00003664 89F2                    	mov	dx,si			; ds:dx -> file name
 40203 00003666 B8003D                  	mov	ax,3D00h		; open
 40204 00003669 CD21                    	int	21h
 40205 0000366B 7237                    	jc	short sd_err		; open failed
 40206                                  
 40207 0000366D 89C3                    	mov	bx,ax			; BX - file handle
 40208 0000366F B80242                  	mov	ax,4202h		; seek
 40209 00003672 31C9                    	xor	cx,cx
 40210 00003674 89CA                    	mov	dx,cx			; to end of file
 40211 00003676 CD21                    	int	21h
 40212 00003678 7223                    	jc	short sd_close		; did seek fail (impossible)
 40213 0000367A 83C00F                  	add	ax,15			; para convert
 40214 0000367D 83D200                  	adc	dx,0
 40215 00003680 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 40216                                  	;jz	short szdev1		; no
 40217                                  	; 22/07/2023
 40218 00003684 7409                    	jz	short sd_ctp
 40219 00003686 2EC706[3324]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 40220                                  					; assuming that we fail later
 40221 0000368D EB0E                    	jmp	short sd_close
 40222                                  sd_ctp:	
 40223                                  	; 22/07/2023
 40224                                  ;szdev1:
 40225 0000368F B104                    	mov	cl,4			; convert it to paras
 40226 00003691 D3E8                    	shr	ax,cl
 40227 00003693 B10C                    	mov	cl,12
 40228 00003695 D3E2                    	shl	dx,cl
 40229 00003697 09D0                    	or	ax,dx ; * ; cf=0
 40230                                  	;
 40231                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 40232                                  	; MSDOS 6.21 IO.SYS - SYSINIT:37A6h 
 40233                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40234                                  	;cmp	ax,[cs:DevSizeOption]
 40235                                  	;ja	short szdev2
 40236                                  	;mov	ax,[cs:DevSizeOption]
 40237                                  	; 12/12/2022
 40238                                  	;clc
 40239                                  ;szdev2:
 40240 00003699 2EA3[3324]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 40241                                  	; 22/07/2023
 40242                                  	;clc ; cf=0 ; *	; CLC is not needed here
 40243                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 40244                                  
 40245                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40246                                  	; 12/12/2022
 40247                                  	; cf=0
 40248                                  	;clc
 40249                                  sd_close:
 40250 0000369D 9C                      	pushf				; let close not spoil our
 40251                                  					;  carry flag
 40252 0000369E B8003E                  	mov	ax,3E00h		; close
 40253 000036A1 CD21                    	int	21h			; we are not checking for err
 40254 000036A3 9D                      	popf
 40255                                  sd_err:
 40256                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40257                                  	; 11/12/2022 ; *
 40258 000036A4 1F                      	pop     ds ; *
 40259 000036A5 C3                      	retn
 40260                                  
 40261                                  ;----------------------------------------------------------------------------
 40262                                  ;
 40263                                  ; procedure : ExecDev
 40264                                  ;
 40265                                  ;	Input : ds:dx -> device to be executed
 40266                                  ;		DevLoadAddr - contains where device has to be loaded
 40267                                  ;
 40268                                  ;	Output : Carry if error
 40269                                  ;		 Carry clear if no error
 40270                                  ;
 40271                                  ;	Loads a device driver using the 4b03h function call
 40272                                  ;
 40273                                  ;----------------------------------------------------------------------------
 40274                                  
 40275                                  	; 01/11/2022
 40276                                  ExecDev:
 40277 000036A6 2E8B1E[3524]            	mov	bx,[cs:DevLoadAddr]
 40278 000036AB 2E891E[4D24]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 40279                                  					;  block for exec with
 40280                                  					;  load address
 40281 000036B0 2E891E[4F24]            	mov	[cs:DevExecReloc],bx
 40282 000036B5 8CCB                    	mov	bx,cs
 40283 000036B7 8EC3                    	mov	es,bx
 40284 000036B9 BB[4D24]                	mov	bx,DevExecAddr		; es:bx points to parameters
 40285                                  	;mov	al,3	; (load program only)
 40286                                  	;mov	ah,EXEC ; 4Bh
 40287                                  	; 04/07/2023
 40288 000036BC B8034B                  	mov	ax,(EXEC<<8)|03h
 40289 000036BF CD21                    	int	21h			; load in the device driver
 40290                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 40291                                  		; DS:DX -> ASCIZ filename
 40292                                  		; ES:BX -> parameter block
 40293                                  		; AL = subfunction 
 40294 000036C1 C3                      	retn
 40295                                  
 40296                                  ;----------------------------------------------------------------------------
 40297                                  ;
 40298                                  ; procedure : RetFromUM
 40299                                  ;
 40300                                  ;	Input : None
 40301                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 40302                                  ;		 ConvLoad clear if did.
 40303                                  ;
 40304                                  ;	Prepares memory for more devices after returning from loading one
 40305                                  ;	using the DOS 6 options (/L:... etc).
 40306                                  ;
 40307                                  ;----------------------------------------------------------------------------
 40308                                  
 40309                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40310                                  ;  (SYSINIT:37D1h)
 40311                                  
 40312                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40313                                  ;%if 0
 40314                                  RetFromUM:
 40315                                  	; 31/12/2022
 40316                                  	; ds = cs
 40317 000036C2 9C                      	pushf
 40318                                  	;mov	byte [cs:ConvLoad],1
 40319 000036C3 C606[4124]01            	mov	byte [ConvLoad],1
 40320 000036C8 E8ECFD                  	call	UnHideUMBs
 40321 000036CB 7204                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 40322                                  	; 31/12/2022
 40323                                  	; ds = cs
 40324                                  	;;mov	byte [cs:ConvLoad],0
 40325                                  	;mov	byte [ConvLoad],0
 40326                                  	; 09/09/2023
 40327 000036CD FE0E[4124]              	dec	byte [ConvLoad] ; -> 0
 40328                                  rfUM1:	
 40329 000036D1 9D                      	popf
 40330 000036D2 C3                      	retn
 40331                                  
 40332                                  ;%endif ; 01/11/2022
 40333                                  
 40334                                  ;----------------------------------------------------------------------------
 40335                                  ;
 40336                                  ; procedure : RemoveNull
 40337                                  ;
 40338                                  ;	Input : ES:SI points to a null terminated string
 40339                                  ;
 40340                                  ;	Output : none
 40341                                  ;
 40342                                  ;	Replaces the null at the end of a string with blank
 40343                                  ;
 40344                                  ;----------------------------------------------------------------------------
 40345                                  
 40346                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40347                                  	; (SYSINIT:2CCEh)
 40348                                  RemoveNull:
 40349                                  	; 11/12/2022
 40350                                  	; ds = cs
 40351                                  rn_next:
 40352 000036D3 268A1C                  	mov	bl,[es:si]
 40353 000036D6 08DB                    	or	bl,bl			; null ?
 40354 000036D8 7403                    	jz	short rn_gotnull
 40355 000036DA 46                      	inc	si			; advance the pointer
 40356 000036DB EBF6                    	jmp	short rn_next
 40357                                  rn_gotnull:
 40358                                  	; 11/12/2022
 40359 000036DD 8A1E[6624]              	mov	bl,[DevSavedDelim]
 40360                                  	;mov	bl,[cs:DevSavedDelim]
 40361 000036E1 26881C                  	mov	[es:si],bl		; replace null with blank
 40362                                  	; 02/11/2022
 40363                                  ; 11/12/2022
 40364                                  rba_ok:		; 10/04/2019
 40365 000036E4 C3                      	retn
 40366                                  
 40367                                  ;----------------------------------------------------------------------------
 40368                                  ;
 40369                                  ; procedure : RoundBreakAddr
 40370                                  ;
 40371                                  ;	Input : DevBrkAddr
 40372                                  ;	Output : DevBrkAddr
 40373                                  ;
 40374                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 40375                                  ;
 40376                                  ;----------------------------------------------------------------------------
 40377                                  
 40378                                  RoundBreakAddr:
 40379 000036E5 2EA1[3D24]              	mov	ax,[cs:DevBrkAddr]
 40380 000036E9 E829DC                  	call	ParaRound
 40381 000036EC 2E0106[3F24]            	add	[cs:DevBrkAddr+2],ax
 40382 000036F1 2EC706[3D24]0000        	mov	word [cs:DevBrkAddr],0
 40383 000036F8 2EA1[3724]              	mov	ax,[cs:DevLoadEnd]
 40384 000036FC 2E3906[3F24]            	cmp	[cs:DevBrkAddr+2],ax
 40385 00003701 76E1                    	jbe	short rba_ok
 40386 00003703 E92911                  	jmp	mem_err
 40387                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40388                                  	; 11/12/2022
 40389                                  ;rba_ok:
 40390                                  ;	retn
 40391                                  
 40392                                  ;----------------------------------------------------------------------------
 40393                                  ;
 40394                                  ; procedure : DevSetBreak
 40395                                  ;
 40396                                  ;	Input : DevBrkAddr
 40397                                  ;	Output : Carry set if Device returned Init failed
 40398                                  ;		 Else carry clear
 40399                                  ;
 40400                                  ;----------------------------------------------------------------------------
 40401                                  
 40402                                  DevSetBreak:
 40403 00003706 50                      	push	ax
 40404                                  
 40405 00003707 2EA1[3F24]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 40406 0000370B 2E803E[6619]00          	cmp	byte [cs:multdeviceflag],0
 40407 00003711 750F                    	jne	short set_break_continue ;do not check it.
 40408 00003713 2E3B06[3524]            	cmp	ax,[cs:DevLoadAddr]
 40409 00003718 7508                    	jne	short set_break_continue ;if not same, then o.k.
 40410                                  
 40411                                  	;cmp	word [cs:DevBrkAddr],0
 40412                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 40413                                  	; 12/12/2022
 40414 0000371A 2E833E[3D24]01          	cmp	word [cs:DevBrkAddr],1
 40415 00003720 7204                    	jb	short break_failed
 40416                                  
 40417                                  set_break_continue:
 40418 00003722 E8C0FF                  	call	RoundBreakAddr
 40419                                  	; 12/12/2022
 40420 00003725 F8                      	clc
 40421                                  break_failed:
 40422 00003726 58                      	pop	ax
 40423                                  	;clc
 40424 00003727 C3                      	retn
 40425                                  
 40426                                  	; 12/12/2022
 40427                                  ;break_failed:
 40428                                  	;pop	ax
 40429                                  	;stc
 40430                                  	;retn
 40431                                  
 40432                                  ;----------------------------------------------------------------------------
 40433                                  ;
 40434                                  ; procedure : DevBreak
 40435                                  ;
 40436                                  ;	Input : DevLoadAddr & DevBrkAddr
 40437                                  ;	Output : none
 40438                                  ;
 40439                                  ;	Marks a succesful install of a device driver
 40440                                  ;	Sets device size field in sub-arena &
 40441                                  ;	Updates Free ptr in UMB or adjusts memhi
 40442                                  ;
 40443                                  ;----------------------------------------------------------------------------
 40444                                  
 40445                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40446                                  DevBreak:
 40447                                  	;push	ds ; 11/12/2022
 40448                                  
 40449                                  	; 11/12/2022
 40450 00003728 0E                      	push	cs
 40451 00003729 1F                      	pop	ds
 40452                                  	;mov	ax,[cs:DevLoadAddr]
 40453                                  	;mov	bx,[cs:DevBrkAddr+2]
 40454 0000372A A1[3524]                	mov	ax,[DevLoadAddr]
 40455 0000372D 8B1E[3F24]              	mov	bx,[DevBrkAddr+2]
 40456                                  	; 11/12/2022
 40457 00003731 1E                      	push	ds
 40458                                  
 40459 00003732 48                      	dec	ax			; seg of sub-arena
 40460 00003733 8ED8                    	mov	ds,ax
 40461 00003735 40                      	inc	ax			; Back to Device segment
 40462 00003736 29D8                    	sub	ax,bx
 40463 00003738 F7D8                    	neg	ax			; size of device in paras
 40464 0000373A A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 40465                                  	
 40466                                  	; 11/12/2022
 40467 0000373D 1F                      	pop	ds
 40468                                  	; ds = cs
 40469                                   	
 40470 0000373E 803E[5124]00            	cmp	byte [DeviceHi],0
 40471                                  	;cmp	byte [cs:DeviceHi],0
 40472 00003743 7405                    	je	short db_lo
 40473                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 40474                                  	;jmp	short db_exit
 40475                                  	; 11/12/2022
 40476 00003745 891E[4724]              	mov	[DevUMBFree],bx
 40477 00003749 C3                      	retn	
 40478                                  db_lo:
 40479                                  	; 11/12/2022
 40480                                  	; ds = cs
 40481                                  	;mov	[cs:memhi],bx
 40482                                  	;mov	word [cs:memlo],0
 40483 0000374A 891E[6403]              	mov	[memhi],bx
 40484 0000374E C706[6203]0000          	mov	word [memlo],0 ; 18/12/2022
 40485                                  db_exit:
 40486                                  	;pop	ds ; 11/12/2022
 40487                                  sd_ret:		; 09/09/2023
 40488 00003754 C3                      	retn
 40489                                  
 40490                                  ; 10/04/2019 - Retro DOS v4.0
 40491                                  
 40492                                  ;----------------------------------------------------------------------------
 40493                                  ;
 40494                                  ; procedure : ParseSize
 40495                                  ;
 40496                                  ;	Parses the command line for SIZE= command
 40497                                  ;
 40498                                  ;	ES:SI = command line to parsed
 40499                                  ;
 40500                                  ;	returns ptr to command line after SIZE= option in ES:SI
 40501                                  ;	updates the DevSizeOption variable with value supplied
 40502                                  ;	in SIZE=option
 40503                                  ;	Returns carry if the SIZE option was invalid
 40504                                  ;
 40505                                  ;----------------------------------------------------------------------------
 40506                                  
 40507                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40508                                  	; (SYSINIT:2D5Ah)
 40509                                  
 40510                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) ((&BugFix))
 40511                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 40512                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 40513                                  ParseSize:
 40514                                  	;push	bx
 40515                                  	;mov	bx,si
 40516                                  
 40517                                  	; 09/09/2023
 40518 00003755 56                      	push	si ; * ; mov bx,si
 40519                                  
 40520                                  	; 11/12/2022
 40521                                  	; ds = cs
 40522                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 40523                                  	;mov	[cs:DevCmdLine],si
 40524                                  	;mov	[cs:DevCmdLine+2],es
 40525 00003756 C706[5224]0000          	mov	word [DevSizeOption],0 ; init the value
 40526 0000375C 8936[6224]              	mov	[DevCmdLine],si
 40527 00003760 8C06[6424]              	mov	[DevCmdLine+2],es	
 40528 00003764 E82400                  	call	SkipDelim
 40529 00003767 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 40530 0000376C 7528                    	jne	short ps_no_size
 40531 0000376E 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 40532 00003774 7520                    	jne	short ps_no_size
 40533 00003776 268A4404                	mov	al,[es:si+4]
 40534 0000377A E80D10                  	call	delim
 40535                                  	;jne	short ps_no_size
 40536                                  	; 22/07/2023
 40537 0000377D 7518                    	jne	short ps_no_size_2 ; cf=0 here
 40538 0000377F 83C605                  	add	si,5
 40539 00003782 E81400                  	call	GetHexNum
 40540 00003785 7210                    	jc	short ps_err
 40541                                  	; 11/12/2022
 40542                                  	; ds = cs
 40543                                  	;mov	[cs:DevSizeOption],ax
 40544 00003787 A3[5224]                	mov	[DevSizeOption],ax
 40545                                  	
 40546                                  	; 09/09/2023
 40547 0000378A 58                      	pop	ax  ; * (discard previous si value on top of stack)
 40548                                  
 40549                                  ;	call	SkipDelim ; **
 40550                                  ;	
 40551                                  ;	; 22/07/2023
 40552                                  ;;ps_no_size_2:
 40553                                  ;	; cf = 0
 40554                                  ;	retn
 40555                                  
 40556                                  	; 09/09/2023
 40557                                  	;jmp	short SkipDelim
 40558                                  
 40559                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40560                                  %if 1
 40561                                  	; 01/11/2022
 40562                                  SkipDelim:
 40563                                  sd_next_char:
 40564 0000378B 268A04                  	mov	al,[es:si]
 40565 0000378E E8F90F                  	call	delim
 40566 00003791 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 40567 00003793 46                      	inc	si
 40568 00003794 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 40569                                  	; 11/12/2022
 40570                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40571                                  ;sd_ret:
 40572                                  	;retn
 40573                                  %endif
 40574                                  
 40575                                  	;;;call	SkipDelim ; **
 40576                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40577                                  	;mov	bx,si
 40578                                  ps_no_size:
 40579                                  	;mov	si,bx
 40580                                  	;pop	bx
 40581 00003796 F8                      	clc	; cf=0
 40582                                  	;retn
 40583                                  	; 11/12/2022
 40584                                  ps_err:		; cf=1
 40585                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 40586                                  	; 09/09/2023
 40587 00003797 5E                      	pop	si ; * ; mov si,bx
 40588                                  ;sd_ret:	; cf=?
 40589 00003798 C3                      	retn
 40590                                  
 40591                                  ;ps_err:
 40592                                  	; 02/11/2022
 40593                                  	;pop	bx
 40594                                  	;stc
 40595                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40596                                  	; 11/12/2022
 40597                                  	; cf=1
 40598                                  	;stc
 40599                                  	; 11/12/2022
 40600                                  ;sd_ret: 
 40601                                  	; 22/07/2023
 40602                                  	; 12/04/2019
 40603                                  	;retn
 40604                                  
 40605                                  ; 12/04/2019 - Retro DOS v4.0
 40606                                  
 40607                                  ;----------------------------------------------------------------------------
 40608                                  ;
 40609                                  ; procedure : SkipDelim
 40610                                  ;
 40611                                  ;	Skips delimiters in the string pointed to by ES:SI
 40612                                  ;	Returns ptr to first non-delimiter character in ES:SI
 40613                                  ;
 40614                                  ;----------------------------------------------------------------------------
 40615                                  
 40616                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40617                                  %if 0
 40618                                  	; 01/11/2022
 40619                                  SkipDelim:
 40620                                  sd_next_char:
 40621                                  	mov	al,[es:si]
 40622                                  	call	delim
 40623                                  	jnz	short sd_ret
 40624                                  	inc	si
 40625                                  	jmp	short sd_next_char ; 01/11/2022
 40626                                  	; 11/12/2022
 40627                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40628                                  ;sd_ret:
 40629                                  	;retn
 40630                                  %endif
 40631                                  
 40632                                  ;----------------------------------------------------------------------------
 40633                                  ;
 40634                                  ; procedure : GetHexNum
 40635                                  ;
 40636                                  ;	Converts an ascii string terminated by a delimiter into binary.
 40637                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 40638                                  ;
 40639                                  ;	Returns in AX the number number of paras equivalent to the
 40640                                  ;	hex number of bytes specified by the hexadecimal string.
 40641                                  ;
 40642                                  ;	Returns carry in case it encountered a non-hex character or
 40643                                  ;	if it encountered crlf
 40644                                  ;
 40645                                  ;----------------------------------------------------------------------------
 40646                                  
 40647                                  ; 13/05/2019
 40648                                  
 40649                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40650                                  	; (SYSINIT:38C5h)
 40651                                  
 40652                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40653                                  	; (SYSINIT:2DA5h)
 40654                                  GetHexNum:
 40655 00003799 31C0                    	xor	ax,ax
 40656 0000379B 31D2                    	xor	dx,dx
 40657                                  ghn_next:
 40658 0000379D 268A1C                  	mov	bl,[es:si]
 40659 000037A0 80FB0D                  	cmp	bl,cr  ; 0Dh
 40660 000037A3 7436                    	je	short ghn_err
 40661 000037A5 80FB0A                  	cmp	bl,lf  ; 0Ah
 40662 000037A8 7431                    	je	short ghn_err
 40663 000037AA 50                      	push	ax
 40664 000037AB 88D8                    	mov	al,bl
 40665 000037AD E8DA0F                  	call	delim
 40666 000037B0 58                      	pop	ax
 40667                                  	; 03/01/2023
 40668 000037B1 B90400                  	mov	cx,4
 40669 000037B4 7410                    	jz	short ghn_into_paras
 40670 000037B6 E82400                  	call	GetNibble
 40671                                  	;jc	short ghn_err
 40672                                  	; 11/12/2022
 40673 000037B9 7221                    	jc	short ghn_ret ; cf=1
 40674                                  	; 03/01/2023
 40675                                  	;mov	cx,4
 40676                                  ghn_shift1:
 40677 000037BB D1E0                    	shl	ax,1
 40678 000037BD D1D2                    	rcl	dx,1
 40679 000037BF E2FA                    	loop	ghn_shift1
 40680 000037C1 08D8                    	or	al,bl
 40681 000037C3 46                      	inc	si
 40682 000037C4 EBD7                    	jmp	short ghn_next
 40683                                  ghn_into_paras:
 40684 000037C6 83C00F                  	add	ax,15
 40685 000037C9 83D200                  	adc	dx,0
 40686 000037CC F7C2F0FF                	test	dx,0FFF0h
 40687 000037D0 7509                    	jnz	short ghn_err
 40688                                  	; 03/01/2023
 40689                                  	;mov	cx,4
 40690                                  ghn_shift2:
 40691 000037D2 F8                      	clc
 40692 000037D3 D1DA                    	rcr	dx,1
 40693 000037D5 D1D8                    	rcr	ax,1
 40694 000037D7 E2F9                    	loop	ghn_shift2
 40695 000037D9 F8                      	clc
 40696 000037DA C3                      	retn
 40697                                  	; 11/12/2022
 40698                                  ghn_err:
 40699                                  gnib_err:
 40700 000037DB F9                      	stc
 40701                                  ghn_ret:
 40702                                  gnib_ret:
 40703 000037DC C3                      	retn
 40704                                  
 40705                                  ;----------------------------------------------------------------------------
 40706                                  ;
 40707                                  ; procedure : GetNibble
 40708                                  ;
 40709                                  ;	Convert one nibble (hex digit) in BL into binary
 40710                                  ;
 40711                                  ;	Returns binary value in BL
 40712                                  ;
 40713                                  ;	Returns carry if BL contains non-hex digit
 40714                                  ;
 40715                                  ;----------------------------------------------------------------------------
 40716                                  
 40717                                  GetNibble:
 40718 000037DD 80FB30                  	cmp	bl,'0'
 40719                                  	;jb	short gnib_err
 40720                                  	; 11/12/2022
 40721 000037E0 72FA                    	jb	short gnib_ret ; cf=1
 40722 000037E2 80FB39                  	cmp	bl,'9'
 40723 000037E5 7704                    	ja	short is_it_hex
 40724 000037E7 80EB30                  	sub	bl,'0'		; clc
 40725 000037EA C3                      	retn
 40726                                  is_it_hex:
 40727 000037EB 80FB41                  	cmp	bl,'A'
 40728                                  	;jb	short gnib_err
 40729                                  	; 11/12/2022
 40730 000037EE 72EC                    	jb	short gnib_ret ; cf=1
 40731 000037F0 80FB46                  	cmp	bl,'F'
 40732 000037F3 77E6                    	ja	short gnib_err ; 11/12/2022
 40733 000037F5 80EB37                  	sub	bl,'A'- 10	; clc
 40734 000037F8 C3                      	retn
 40735                                  
 40736                                  	; 11/12/2022
 40737                                  ;gnib_err:
 40738                                  ;	stc
 40739                                  ;gnib_ret:
 40740                                  ;	retn
 40741                                  
 40742                                  ;============================================================================
 40743                                  
 40744                                  ; 12/04/2019 - Retro DOS v4.0
 40745                                  
 40746                                  ; umb.inc (MSDOS 6.0, 1991)
 40747                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 40748                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 40749                                  
 40750                                  XMM_REQUEST_UMB	equ 10h
 40751                                  XMM_RELEASE_UMB	equ 11h
 40752                                  
 40753                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40754                                  
 40755                                  ;---------------------------------------------------------------------------
 40756                                  ;
 40757                                  ; Procedure Name	: umb_insert
 40758                                  ;
 40759                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 40760                                  ;			: BX = seg address of UMB to be linked in
 40761                                  ;			: DX = size of UMB to be linked in paras
 40762                                  ;			; DS = data
 40763                                  ;
 40764                                  ; Outputs		: links the UMB into the arena chain
 40765                                  ;
 40766                                  ; Uses			: AX, CX, ES, DX, BX
 40767                                  ;
 40768                                  ;---------------------------------------------------------------------------
 40769                                  
 40770                                  umb_insert:
 40771 000037F9 1E                      	push	ds
 40772                                  
 40773                                  	; 31/12/2022
 40774                                  	; ds = cs
 40775                                  
 40776                                  	;mov	ds,[cs:DevDOSData]
 40777 000037FA 8E1E[6024]              	mov	ds,[DevDOSData] ; 31/12/2022 
 40778                                  	;mov	ds,[8Ch]
 40779 000037FE 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 40780 00003802 8CD8                    	mov	ax,ds
 40781 00003804 8EC0                    	mov	es,ax
 40782                                  ui_next:
 40783 00003806 39D8                    	cmp	ax,bx			; Q: is current block above
 40784                                  					;    new block
 40785 00003808 770F                    	ja	short ui_insert		; Y: insert it
 40786                                  					; Q: is current block the
 40787                                  					;    last
 40788 0000380A 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 40789 00003810 745C                    	je	short ui_append		; Y: append new block to chain
 40790                                  					; N: get next block
 40791 00003812 8ED8                    	mov	ds,ax			; M005
 40792                                  	;call	get_next		; ax = es = next block
 40793 00003814 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 40794 00003817 EBED                    	jmp	short ui_next
 40795                                  
 40796                                  ui_insert:
 40797 00003819 8CD9                    	mov	cx,ds			; ds = previous arena
 40798 0000381B 41                      	inc	cx			; top of previous block
 40799                                  
 40800 0000381C 29D9                    	sub	cx,bx
 40801 0000381E F7D9                    	neg	cx			; cx = size of used block
 40802                                  	;mov	byte [0],'M'
 40803 00003820 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 40804                                  	;mov	word [1],8
 40805 00003825 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 40806                                  	;mov	[3],cx
 40807 0000382B 890E0300                	mov	[ARENA.SIZE],cx	
 40808                                  	;mov	word [8],4353h ; 'SC'
 40809 0000382F C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 40810                                  
 40811                                  ; prepare the arena at start of new block
 40812                                  
 40813 00003835 8EC3                    	mov	es,bx
 40814 00003837 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 40815 0000383D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 40816                                  					; mark as free
 40817 00003844 83EA02                  	sub	dx,2			; make room for arena at
 40818                                  					; start & end of new block
 40819 00003847 2689160300              	mov	[es:ARENA.SIZE],dx
 40820                                  
 40821                                  ; prepare arena at end of new block
 40822                                  	
 40823 0000384C 01D3                    	add	bx,dx
 40824 0000384E 43                      	inc	bx
 40825 0000384F 8EC3                    	mov	es,bx			; es=arena at top of new block
 40826 00003851 43                      	inc	bx			; bx=top of new block
 40827                                  
 40828                                  					; ax contains arena just above
 40829                                  					; this block
 40830 00003852 29D8                    	sub	ax,bx			; ax = size of used block
 40831                                  	
 40832 00003854 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 40833 0000385A 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 40834 00003861 26A30300                	mov	[es:ARENA.SIZE],ax	
 40835 00003865 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 40836                                  
 40837 0000386C EB47                    	jmp	short ui_done
 40838                                  
 40839                                  ui_append:
 40840                                  					; es = arena of last block	
 40841 0000386E 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 40842 00003873 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 40843                                  					; going to rsrv on top of this 
 40844                                  					; block for the next arena.
 40845                                  	; 13/05/2019
 40846 00003879 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 40847                                  
 40848 0000387F 89C1                    	mov	cx,ax			; cx=top of prev block-1
 40849 00003881 40                      	inc	ax
 40850 00003882 29D8                    	sub	ax,bx			; ax=top of prev block - 
 40851                                  					;    seg. address of new block
 40852 00003884 F7D8                    	neg	ax
 40853                                  
 40854 00003886 8EC1                    	mov	es,cx			; ds = arena of unused block
 40855                                  
 40856 00003888 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 40857 0000388E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 40858 00003895 26A30300                	mov	[es:ARENA.SIZE],ax	
 40859 00003899 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 40860                                  
 40861                                  ; prepare the arena at start of new block
 40862 000038A0 8EC3                    	mov	es,bx
 40863 000038A2 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 40864 000038A8 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 40865                                  					; mark as free
 40866 000038AF 4A                      	dec	dx			; make room for arena
 40867 000038B0 2689160300              	mov	[es:ARENA.SIZE],dx	
 40868                                  ui_done:
 40869                                  uc_done: ; 31/12/2022 ; *!
 40870 000038B5 1F                      	pop	ds
 40871                                  	; ds = cs ; 31/12/2022
 40872                                  ;uc_done:	; 18/12/2022
 40873                                  au_exit:	; 09/09/2023
 40874 000038B6 C3                      	retn
 40875                                  
 40876                                  ;----------------------------------------------------------------------------
 40877                                  ;
 40878                                  ; procedure : AllocUMB
 40879                                  ;
 40880                                  ;	Allocate all UMBs and link it to DOS arena chain
 40881                                  ;
 40882                                  ;----------------------------------------------------------------------------
 40883                                  
 40884                                  AllocUMB:
 40885                                  	; 31/12/2022
 40886                                  	; ds = cs
 40887 000038B7 E84700                  	call	InitAllocUMB		; link in the first UMB
 40888 000038BA 72FA                    	jc	short au_exit		; quit on error
 40889                                  au_next:
 40890 000038BC E87000                  	call	umb_allocate		; allocate
 40891 000038BF 7205                    	jc	short au_coalesce
 40892 000038C1 E835FF                  	call	umb_insert		; & insert till no UMBs
 40893 000038C4 EBF6                    	jmp	short au_next
 40894                                  au_coalesce:
 40895                                  	; 09/09/2023
 40896                                  ;	call	umb_coalesce		; coalesce all UMBs
 40897                                  ;au_exit:
 40898                                  ;	; 31/12/2022
 40899                                  ;	; ds = cs
 40900                                  ;	retn
 40901                                  
 40902                                  	; 09/09/2023
 40903                                  	;jmp	short umb_coalesce
 40904                                  
 40905                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40906                                  
 40907                                  ; 13/04/2019 - Retro DOS v4.0
 40908                                  
 40909                                  ;----------------------------------------------------------------------------
 40910                                  ;
 40911                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 40912                                  ;
 40913                                  ;	Coalesce adds the block following the argument to the argument block,
 40914                                  ;	if it's free. Coalesce is usually used to join free blocks, but
 40915                                  ;	some callers (such as $setblock) use it to join a free block to it's
 40916                                  ;	preceeding allocated block.
 40917                                  ;
 40918                                  ;	EXIT	'C' clear if OK
 40919                                  ;		  (ds) unchanged, this block updated
 40920                                  ;		  (ax) = address of next block, IF not at end
 40921                                  ;		'C' set if arena trashed
 40922                                  ;	USES	cx, di, ds, es
 40923                                  ;
 40924                                  ;----------------------------------------------------------------------------
 40925                                  
 40926                                  umb_coalesce:
 40927                                  	; 31/12/2022
 40928                                  	; ds = cs
 40929 000038C6 1E                      	push	ds ; *!
 40930                                  
 40931 000038C7 31FF                    	xor	di, di
 40932                                  
 40933                                  	;mov	es,[cs:DevDOSData]
 40934                                  	; 31/12/2022
 40935 000038C9 8E06[6024]              	mov	es,[DevDOSData]
 40936 000038CD 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 40937                                  uc_nextfree:
 40938 000038D2 8CC0                    	mov	ax,es
 40939 000038D4 8ED8                    	mov	ds,ax
 40940                                  	;cmp	[es:1],di
 40941 000038D6 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 40942 000038DB 7407                    	je	short uc_again		; Y: try to coalesce with next block
 40943                                  					; N: get next arena
 40944 000038DD E86B00                  	call	get_next		; es, ax = next arena
 40945 000038E0 72D3                    	jc	short uc_done	; *!
 40946 000038E2 EBEE                    	jmp	short uc_nextfree
 40947                                  uc_again:
 40948 000038E4 E86400                  	call	get_next		; es, ax = next arena
 40949 000038E7 72CC                    	jc	short uc_done	; *!
 40950                                  uc_check:
 40951 000038E9 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 40952 000038EE 75E2                    	jne	short uc_nextfree	; N: get next free arena
 40953                                  					; Y: coalesce
 40954 000038F0 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 40955 000038F5 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 40956                                  	;add	[3],cx
 40957 000038F6 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 40958 000038FA 268A0D                  	mov     cl,[es:di]              ; move up signature
 40959 000038FD 880D                    	mov     [di],cl
 40960 000038FF EBE3                    	jmp     short uc_again		; try again
 40961                                  
 40962                                  	; 18/12/2022
 40963                                  ;uc_done:
 40964                                  	;retn
 40965                                  
 40966                                  ;----------------------------------------------------------------------------
 40967                                  ;
 40968                                  ; procedure : InitAllocUMB
 40969                                  ;
 40970                                  ;----------------------------------------------------------------------------
 40971                                  
 40972                                  InitAllocUMB:
 40973                                  	; 31/12/2022
 40974                                  	; ds = cs
 40975 00003901 E8D6D2                  	call	IsXMSLoaded
 40976 00003904 7527                    	jnz	short iau_err		; quit on no XMS driver
 40977 00003906 B452                    	mov	ah,52h
 40978 00003908 CD21                    	int	21h			; get DOS DATA seg
 40979                                  	; 31/12/2022
 40980                                  	; ds = cs
 40981                                  	;mov	[cs:DevDOSData],es	; & save it for later
 40982 0000390A 8C06[6024]              	mov	[DevDOSData],es		; & save it for later
 40983 0000390E B81043                  	mov	ax,4310h
 40984 00003911 CD2F                    	int	2Fh
 40985                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 40986                                  	;mov	[cs:DevXMSAddr+2],es
 40987 00003913 891E[4924]              	mov	[DevXMSAddr],bx		; get XMS driver address
 40988 00003917 8C06[4B24]              	mov	[DevXMSAddr+2],es	
 40989                                  	; 31/12/2022
 40990 0000391B 803E[5F24]00            	cmp	byte [FirstUMBLinked],0 
 40991                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 40992                                  	;jne	short ia_1		; quit if we already did it
 40993                                  	; 12/12/2022
 40994 00003920 770A                    	ja	short ia_1 ; cf=0
 40995 00003922 E83900                  	call	LinkFirstUMB		; else link the first UMB
 40996                                  	;jc	short iau_err
 40997                                  	; 12/12/2022
 40998 00003925 7207                    	jc	short iau_err2  ; cf=1
 40999                                  	; 31/12/2022
 41000                                  	; ds = cs
 41001 00003927 C606[5F24]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 41002                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 41003                                  ia_1:
 41004                                  	; 12/12/2022
 41005                                  	; cf=0
 41006                                  	;clc
 41007 0000392C C3                      	retn
 41008                                  iau_err:
 41009 0000392D F9                      	stc
 41010                                  iau_err2:
 41011 0000392E C3                      	retn
 41012                                  
 41013                                  ;-------------------------------------------------------------------------
 41014                                  ;
 41015                                  ; Procedure Name	: umb_allocate
 41016                                  ;
 41017                                  ; Inputs		: DS = data
 41018                                  ;
 41019                                  ; Outputs		: if UMB available
 41020                                  ;				Allocates the largest available UMB and 
 41021                                  ;			  	BX = segment of allocated block
 41022                                  ;				DX = size of allocated block
 41023                                  ;				NC
 41024                                  ;			  else 
 41025                                  ;				CY
 41026                                  ;
 41027                                  ; Uses			: BX, DX
 41028                                  ;
 41029                                  ;-------------------------------------------------------------------------
 41030                                  
 41031                                  umb_allocate:
 41032                                  	; 31/12/2022
 41033                                  	; ds = cs
 41034 0000392F 50                      	push	ax
 41035 00003930 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 41036 00003932 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 41037                                  					;   possible
 41038                                  	; 31/12/2022
 41039 00003935 FF1E[4924]              	call	far [DevXMSAddr]
 41040                                  	;call	far [cs:DevXMSAddr]
 41041                                  					; dx now contains the size of
 41042                                  					; the largest UMB
 41043 00003939 09D2                    	or	dx,dx
 41044 0000393B 740B                    	jz	short ua_err
 41045                                  	
 41046 0000393D B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 41047                                  
 41048                                  	; 31/12/2022
 41049 0000393F FF1E[4924]              	call	far [DevXMSAddr]
 41050                                  	;call	far [cs:DevXMSAddr]
 41051                                  
 41052 00003943 83F801                  	cmp	ax,1			; Q: was the reqst successful
 41053                                  	;jne	short ua_err		; N: error
 41054                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 41055 00003946 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 41056                                  ua_err:
 41057 00003948 F9                      	stc	
 41058                                  
 41059                                  	;clc
 41060                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41061                                  	; 12/12/2022
 41062                                  	; cf=0
 41063                                  	;clc 
 41064                                  ua_done:
 41065 00003949 58                      	pop	ax
 41066 0000394A C3                      	retn
 41067                                  	; 27/07/2023
 41068                                  ;ua_err:
 41069                                  	;stc
 41070                                  	;jmp	short ua_done
 41071                                  
 41072                                  ;----------------------------------------------------------------------------
 41073                                  ;
 41074                                  ;**	get_next - Find Next item in Arena
 41075                                  ;
 41076                                  ;	ENTRY	dS - pointer to block head
 41077                                  ;	EXIT	AX,ES - pointers to next head
 41078                                  ;		'C' set if arena damaged
 41079                                  ;
 41080                                  ;----------------------------------------------------------------------------
 41081                                  
 41082                                  	; 01/11/2022
 41083                                  get_next:
 41084 0000394B 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 41085 00003950 740A                    	je	short gn_err
 41086                                  _get_next_:
 41087 00003952 8CD8                    	mov     ax,ds                   ; ax=current block
 41088 00003954 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 41089 00003958 40                      	inc     ax                      ; remember that header!
 41090 00003959 8EC0                    	mov	es,ax
 41091                                  	;clc
 41092                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41093                                  	; 11/12/2022
 41094                                  	; cf=0
 41095                                  	;clc
 41096 0000395B C3                      	retn
 41097                                  gn_err:
 41098 0000395C F9                      	stc
 41099                                  	; 11/12/2022	
 41100                                  lfu_err:	 ; cf=1
 41101 0000395D C3                      	retn
 41102                                  
 41103                                  ;----------------------------------------------------------------------------
 41104                                  ;
 41105                                  ; procedure : LinkFirstUMB
 41106                                  ;
 41107                                  ;----------------------------------------------------------------------------
 41108                                  
 41109                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 41110                                  	; (SYSINIT:2F81h)
 41111                                  LinkFirstUMB:
 41112                                  	; 31/12/2022
 41113                                  	; ds = cs
 41114 0000395E E8CEFF                  	call	umb_allocate
 41115 00003961 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 41116                                  
 41117                                  ; bx = segment of allocated UMB
 41118                                  ; dx = size of UMB
 41119                                  
 41120                                  	; 31/12/2022
 41121                                  	; ds = cs
 41122                                  
 41123 00003963 CD12                    	int	12h			; ax = size of memory
 41124 00003965 B106                    	mov	cl,6
 41125 00003967 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 41126                                  
 41127 00003969 89C1                    	mov	cx,ax			; cx = size in paras
 41128 0000396B 29D8                    	sub	ax,bx			; ax = - size of unused block
 41129                                  
 41130 0000396D F7D8                    	neg	ax
 41131                                  
 41132                                  	;sub	cx,1			; cx = first umb_arena
 41133                                  	; 09/09/2023
 41134 0000396F 49                      	dec	cx
 41135 00003970 8EC1                    	mov	es,cx			; es = first umb_arena
 41136                                  	
 41137 00003972 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 41138 00003978 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 41139                                  					
 41140 0000397F 26A30300                	mov	[es:ARENA.SIZE],ax	
 41141 00003983 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 41142                                  
 41143                                  ; put in the arena for the first UMB
 41144                                  
 41145 0000398A 8EC3                    	mov	es,bx			; es has first free umb seg
 41146 0000398C 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 41147 00003992 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 41148                                  					; mark as free 
 41149 00003999 4A                      	dec	dx			; make room for arena
 41150 0000399A 2689160300              	mov	[es:ARENA.SIZE],dx	
 41151                                  
 41152                                  	;mov	es,[cs:DevDOSData]
 41153                                  	; 31/12/2022
 41154 0000399F 8E06[6024]              	mov	es,[DevDOSData] ; ds = cs
 41155 000039A3 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 41156 000039A6 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 41157                                  					;  data segment with the arena
 41158                                  					;  just below Top of Mem
 41159                                  
 41160                                  ; we must now scan the arena chain and update the size of the last arena
 41161                                  
 41162 000039A9 BF2400                  	mov	di,DOS_ARENA ; 24h
 41163 000039AC 268E05                  	mov	es,[es:di]		; es = start arena
 41164 000039AF 31FF                    	xor	di,di
 41165                                  ;scan_next
 41166                                  ; 09/12/2022
 41167                                  scannext:
 41168 000039B1 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 41169 000039B5 740C                    	je	short got_last
 41170                                  	
 41171 000039B7 8CC0                    	mov	ax,es
 41172 000039B9 2603060300              	add	ax,[es:ARENA.SIZE]
 41173 000039BE 40                      	inc	ax
 41174 000039BF 8EC0                    	mov	es,ax
 41175                                  	;jmp	short scan_next
 41176                                  	; 09/12/2022
 41177 000039C1 EBEE                    	jmp	short scannext
 41178                                  got_last:
 41179                                  	;sub	word [es:ARENA.SIZE],1
 41180                                  	; 09/09/2023
 41181 000039C3 26FF0E0300              	dec	word [es:ARENA.SIZE]
 41182                                  
 41183 000039C8 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 41184                                  	;clc
 41185                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41186                                  	; 11/12/2022
 41187                                  	; cf=0
 41188                                  	;clc
 41189 000039CE C3                      	retn
 41190                                  
 41191                                  ; 11/12/2022
 41192                                  ;;lfu_err:
 41193                                  ;	;stc
 41194                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41195                                  ;	; 11/12/2022
 41196                                  ;	; cf=1
 41197                                  ;	;stc
 41198                                  ;	retn
 41199                                  
 41200                                  ;----------------------------------------------------------------------------
 41201                                  ;
 41202                                  ; procedure : ShrinkUMB
 41203                                  ;
 41204                                  ;	Shrinks the current UMB in use, so that the unused portions
 41205                                  ;	of the UMB is given back to the DOS free mem pool
 41206                                  ;
 41207                                  ;----------------------------------------------------------------------------
 41208                                  
 41209                                  ShrinkUMB:
 41210                                  	; 12/12/2022
 41211                                  	; ds = cs
 41212 000039CF 833E[4324]00            	cmp	word [DevUMBAddr],0
 41213                                  	;cmp	word [cs:DevUMBAddr],0
 41214 000039D4 741F                    	je	short su_exit
 41215 000039D6 06                      	push	es
 41216                                  	; 01/01/2023
 41217                                  	;push	bx
 41218                                  	; 12/12/2022
 41219                                  	;mov	bx,[cs:DevUMBFree]
 41220                                  	;sub	bx,[cs:DevUMBAddr]
 41221                                  	;mov	es,[cs:DevUMBAddr]
 41222 000039D7 8B1E[4724]              	mov	bx,[DevUMBFree]
 41223 000039DB 2B1E[4324]              	sub	bx,[DevUMBAddr]
 41224 000039DF 8E06[4324]              	mov	es,[DevUMBAddr]
 41225                                  	
 41226 000039E3 B8004A                  	mov	ax,4A00h
 41227 000039E6 CD21                    	int	21h
 41228                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 41229                                  		; ES = segment address of block to change
 41230                                  		; BX = new size in paragraphs
 41231 000039E8 8CC0                    	mov	ax,es
 41232 000039EA 48                      	dec	ax
 41233 000039EB 8EC0                    	mov	es,ax
 41234 000039ED 26C70601000800          	mov	word [es:ARENA.OWNER],8
 41235                                  	; 01/01/2023
 41236                                  	;pop	bx
 41237 000039F4 07                      	pop	es
 41238                                  su_exit:
 41239 000039F5 C3                      	retn
 41240                                  
 41241                                  ;----------------------------------------------------------------------------
 41242                                  ;
 41243                                  ; procedure : UnlinkUMB
 41244                                  ;
 41245                                  ;	Unlinks the UMBs from the DOS arena chain
 41246                                  ;
 41247                                  ;----------------------------------------------------------------------------
 41248                                  
 41249                                  UnlinkUMB:
 41250                                  	; 12/12/2022
 41251                                  	; ds = cs
 41252 000039F6 1E                      	push	ds
 41253 000039F7 06                      	push	es
 41254                                  	; 12/12/2022
 41255 000039F8 803E[5F24]00            	cmp	byte [FirstUMBLinked],0
 41256                                  	;cmp	byte [cs:FirstUMBLinked],0
 41257 000039FD 7420                    	je	short ulu_x		; nothing to unlink
 41258                                  	; 12/12/2022
 41259 000039FF 8E06[6024]              	mov	es,[DevDOSData]
 41260                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 41261 00003A03 268E1E2400              	mov	ds,[es:DOS_ARENA]
 41262 00003A08 268B3E8C00              	mov	di,[es:UMB_ARENA]
 41263                                  ulu_next:
 41264 00003A0D E83BFF                  	call	get_next
 41265 00003A10 720D                    	jc	short ulu_x
 41266 00003A12 39C7                    	cmp	di,ax			; is the next one UMB ?
 41267 00003A14 7404                    	je	short ulu_found
 41268 00003A16 8ED8                    	mov	ds,ax
 41269 00003A18 EBF3                    	jmp	short ulu_next
 41270                                  ulu_found:
 41271                                  	;mov	byte [0],'Z'
 41272 00003A1A C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 41273                                  ulu_x:
 41274 00003A1F 07                      	pop	es
 41275 00003A20 1F                      	pop	ds
 41276 00003A21 C3                      	retn
 41277                                  
 41278                                  ; ----------------------------------------------------------------------
 41279                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 41280                                  ; ----------------------------------------------------------------------
 41281                                  ; 14/04/2019 - Retro DOS v4.0
 41282                                  
 41283                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 41284                                  ;
 41285                                  ; Summary:
 41286                                  ;
 41287                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 41288                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 41289                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 41290                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 41291                                  ;   and/or config.inc for the full list.
 41292                                  ;
 41293                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 41294                                  ;   configuration support. blockname is either MENU, which contains one
 41295                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 41296                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 41297                                  ;   INCLUDE allows the current block to name another block for inclusion
 41298                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 41299                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 41300                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 41301                                  ;
 41302                                  ; Example:
 41303                                  ;
 41304                                  ;   [menu]
 41305                                  ;   menuitem=misc,Miscellaneous
 41306                                  ;   menuitem=network,Network Configuration
 41307                                  ;   menudefault=network,15
 41308                                  ;
 41309                                  ;   [network]
 41310                                  ;   include misc
 41311                                  ;   device=foo
 41312                                  ;
 41313                                  ;   [misc]
 41314                                  ;   device=bar
 41315                                  ;   include alternate
 41316                                  ;
 41317                                  ;   [alternate]
 41318                                  ;   device=tar
 41319                                  ;
 41320                                  ;
 41321                                  ;   When the menu is displayed
 41322                                  ;
 41323                                  ;    1. Miscellaneous
 41324                                  ;    2. Network Configuration
 41325                                  ;
 41326                                  ;   #2 is highlighted as the default option, and will be automatically
 41327                                  ;   selected after 15 seconds. It will invoke the following lines in the
 41328                                  ;   following order:
 41329                                  ;
 41330                                  ;       DEVICE=BAR
 41331                                  ;       DEVICE=TAR
 41332                                  ;       DEVICE=FOO
 41333                                  ;
 41334                                  
 41335                                  ;MULTI_CONFIG equ 1
 41336                                  
 41337                                  ; the following depend on the positions of the various letters in switchlist
 41338                                  
 41339                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 41340                                  
 41341                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 41342                                  flagdrive	equ 00001000b ; 8 
 41343                                  flagcyln	equ 00010000b ; 16
 41344                                  flagseclim	equ 00100000b ; 32
 41345                                  flagheads	equ 01000000b ; 64
 41346                                  flagff		equ 10000000b ; 128
 41347                                  
 41348                                  ;----------------------------------------------------------------------------
 41349                                  ; 19/04/2019 - Retro DOS v4.0
 41350                                  
 41351                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 41352                                  
 41353                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 41354                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 41355                                  
 41356 00003A22 00                      insert_blank:	db 	0
 41357                                  
 41358                                  ;----------------------------------------------------------------------------
 41359                                  ;
 41360                                  ; procedure : setparms
 41361                                  ;
 41362                                  ; the following set of routines is used to parse the drivparm = command in
 41363                                  ; the config.sys file to change the default drive parameters.
 41364                                  ;
 41365                                  ;----------------------------------------------------------------------------
 41366                                  
 41367                                  setparms:
 41368 00003A23 1E                      	push	ds
 41369 00003A24 50                      	push	ax
 41370 00003A25 53                      	push	bx
 41371 00003A26 51                      	push	cx
 41372 00003A27 52                      	push	dx
 41373                                  
 41374 00003A28 0E                      	push	cs
 41375 00003A29 1F                      	pop	ds
 41376                                  
 41377 00003A2A 31DB                    	xor	bx,bx
 41378 00003A2C 8A1E[1D4F]              	mov	bl,[drive]
 41379                                  	; 18/12/2022
 41380 00003A30 43                      	inc	bx
 41381                                  	;inc	bl			; get it correct for ioctl call
 41382                                  					; (1=a,2=b...)
 41383 00003A31 BA[BF4D]                	mov	dx,deviceparameters
 41384                                  	;mov	ah,IOCTL ; 44h
 41385                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 41386                                  	; 04/07/2023
 41387 00003A34 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 41388                                  	;mov	ch,RAWIO ; 8
 41389                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 41390                                  	; 04/07/2023
 41391 00003A37 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 41392 00003A3A CD21                    	int	21h
 41393                                  
 41394                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 41395 00003A3C 8A26[1E4F]              	mov	ah,[switches]
 41396                                  	;mov	al,[deviceparameters+20]
 41397 00003A40 A0[D34D]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 41398 00003A43 8A0E[1D4F]              	mov	cl,[drive]
 41399                                  ;
 41400                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41401                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 41402                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 41403                                  ;	; 21/10/2022
 41404                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 41405                                  ;	;mov	ds,ax			; set Bios_Data segment
 41406                                  ;
 41407                                  ;	; 27/07/2023
 41408                                  ;	;;test	word [cs:switches],flagec35 ; 4
 41409                                  ;	;test	byte [cs:switches],flagec35
 41410                                  ;	;jz	short not_ec35
 41411                                  ;
 41412                                  ;	; 27/07/2023
 41413                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41414                                  ;	;;test	word [switches],flagec35 ; 4
 41415                                  ;	; 12/12/2022
 41416                                  ;	;test	byte [switches],flagec35 ; 4
 41417                                  ;	;jz	short eot_ok
 41418                                  ;	
 41419                                  	;mov	cl,[cs:drive]		; which drive was this for?
 41420                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41421                                  	;mov	cl,[drive]
 41422                                  	; 27/07/2023
 41423                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 41424                                  	;mov	ds,ax
 41425                                  
 41426 00003A47 BA7000                  	mov	dx,DOSBIODATASEG
 41427 00003A4A 8EDA                    	mov	ds,dx
 41428                                  
 41429 00003A4C F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 41430 00003A4F 7408                    	jz	short not_ec35
 41431                                  
 41432                                  	;mov	al,1			; assume drive 0
 41433                                  	;shl	al,cl			; set proper bit depending on drive
 41434                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 41435                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 41436                                  	; 27/07/2023
 41437 00003A51 B401                    	mov	ah,1
 41438 00003A53 D2E4                    	shl	ah,cl
 41439 00003A55 0826[A204]              	or	[ec35_flag],ah
 41440                                  
 41441                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 41442                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 41443                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41444                                  not_ec35:
 41445                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 41446                                  ;	sectors per track than any old ones.
 41447                                  
 41448                                  	; 27/07/2023
 41449                                  	;;mov	al,[cs:deviceparameters+20]
 41450                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 41451                                  	
 41452                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 41453 00003A59 3A06[2C01]              	cmp	al,[eot]
 41454 00003A5D 7603                    	jbe	short eot_ok
 41455 00003A5F A2[2C01]                	mov	[eot],al
 41456                                  eot_ok:
 41457 00003A62 5A                      	pop	dx			; fix up all the registers
 41458 00003A63 59                      	pop	cx
 41459 00003A64 5B                      	pop	bx
 41460 00003A65 58                      	pop	ax
 41461 00003A66 1F                      	pop	ds ; 13/05/2019
 41462 00003A67 C3                      	retn
 41463                                  
 41464                                  ;----------------------------------------------------------------------------
 41465                                  ;
 41466                                  ; procedure : diddleback
 41467                                  ;
 41468                                  ; replace default values for further drivparm commands
 41469                                  ;
 41470                                  ;----------------------------------------------------------------------------
 41471                                  
 41472                                  diddleback:
 41473 00003A68 1E                      	push	ds
 41474 00003A69 0E                      	push	cs
 41475 00003A6A 1F                      	pop	ds
 41476                                  	;mov	word [deviceparameters+4],80
 41477 00003A6B C706[C34D]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 41478                                  	;mov	byte [deviceparameters+1],2
 41479 00003A71 C606[C04D]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 41480                                  	;mov	word [deviceparameters+2],0
 41481 00003A76 C706[C14D]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 41482 00003A7C C706[1E4F]0000          	mov	word [switches],0	    ; zero all switches
 41483 00003A82 1F                      	pop	ds
 41484 00003A83 C3                      	retn
 41485                                  
 41486                                  ; 03/01/2023
 41487                                  %if 0
 41488                                  
 41489                                  ; 15/04/2019 - Retro DOS v4.0
 41490                                  
 41491                                  ;----------------------------------------------------------------------------
 41492                                  ;
 41493                                  ; procedure : parseline
 41494                                  ;
 41495                                  ; entry point is parseline. al contains the first character in command line.
 41496                                  ;
 41497                                  ;----------------------------------------------------------------------------
 41498                                  
 41499                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41500                                  	; (SYSINIT:3EDFh)
 41501                                  
 41502                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 41503                                  	; (SYSINIT:30ACh)
 41504                                  parseline:
 41505                                  	; 03/01/2023
 41506                                  	; ds = cs ; *
 41507                                  
 41508                                  	;push	ds ; *
 41509                                  
 41510                                  	;push	cs ; *
 41511                                  	;pop	ds ; *
 41512                                  
 41513                                  nextswtch:
 41514                                  	cmp	al,cr			; carriage return?
 41515                                  	je	short done_line
 41516                                  	cmp	al,lf			; linefeed?
 41517                                  	je	short put_back		; put it back and done
 41518                                  
 41519                                  ; anything less or equal to a space is ignored.
 41520                                  
 41521                                  	cmp	al,' '                  ; space?
 41522                                  	jbe	short getnext		; skip over space
 41523                                  	cmp	al,'/'
 41524                                  	je	short getparm
 41525                                  	stc				; mark error invalid-character-in-input
 41526                                  	;jmp	short exitpl
 41527                                  	; 03/01/2023
 41528                                  swterr:
 41529                                  	retn
 41530                                  
 41531                                  getparm:
 41532                                  	call	check_switch
 41533                                  	mov	[switches],bx		; save switches read so far
 41534                                  	jc	short swterr
 41535                                  getnext:
 41536                                  	call	getchr
 41537                                  	;jc	short done_line
 41538                                  	;jmp	short nextswtch
 41539                                  	; 03/01/2023
 41540                                  	jnc	short nextswtch
 41541                                  ;swterr:
 41542                                  	;jmp	short exitpl		; exit if error
 41543                                  
 41544                                  done_line:
 41545                                  	; 12/12/2022
 41546                                  	test	byte [switches],flagdrive ; 8
 41547                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 41548                                  	jnz	short okay
 41549                                  	stc				; mark error no-drive-specified
 41550                                  	;jmp	short exitpl
 41551                                  	; 03/01/2023
 41552                                  	retn
 41553                                  
 41554                                  okay:
 41555                                  	mov	ax,[switches]
 41556                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 41557                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 41558                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 41559                                  	;clc			    ; everything is fine
 41560                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41561                                  	; 12/12/2022
 41562                                  	; cf=0
 41563                                  	;clc
 41564                                  	;call	setdeviceparameters
 41565                                  	; 03/01/2023
 41566                                  	jmp	setdeviceparameters
 41567                                  ;exitpl:
 41568                                  	; 03/01/2023
 41569                                  	; ds = cs
 41570                                  	;pop	ds ; *
 41571                                  	retn
 41572                                  put_back:
 41573                                  	inc	word [count]		; one more char to scan
 41574                                  	dec	word [chrptr]		; back up over linefeed
 41575                                  	jmp	short done_line
 41576                                  
 41577                                  %endif
 41578                                  
 41579                                  ;----------------------------------------------------------------------------
 41580                                  ;
 41581                                  ; procedure : check_switch
 41582                                  ;
 41583                                  ; processes a switch in the input. it ensures that the switch is valid, and
 41584                                  ; gets the number, if any required, following the switch. the switch and the
 41585                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 41586                                  ; error.
 41587                                  ;
 41588                                  ;----------------------------------------------------------------------------
 41589                                  
 41590                                  ; 09/09/2023
 41591                                  
 41592                                  err_swtch:
 41593 00003A84 31CB                    	xor	bx,cx			; remove this switch from the records
 41594                                  err_check:
 41595 00003A86 F9                      	stc
 41596                                  err_chk:
 41597                                  done_swtch:	; 09/09/2023 (cf=0)
 41598 00003A87 C3                      	retn
 41599                                  
 41600                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 41601                                  
 41602                                  check_switch:
 41603 00003A88 E8240D                  	call	getchr
 41604                                  	;jc	short err_check
 41605 00003A8B 72FA                    	jc	short err_chk
 41606 00003A8D 24DF                            and     al,0DFh                 ; convert it to upper case
 41607 00003A8F 3C41                    	cmp	al,'A'
 41608                                  	;jb	short err_check
 41609 00003A91 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 41610 00003A93 3C5A                    	cmp	al,'Z'
 41611 00003A95 77EF                    	ja	short err_check
 41612                                  
 41613 00003A97 06                      	push	es
 41614                                  
 41615 00003A98 0E                      	push	cs
 41616 00003A99 07                      	pop	es
 41617                                  
 41618                                  	;mov	cl,[switchlist]		; get number of valid switches
 41619                                  	;mov	ch,0
 41620                                  	;mov	di,1+switchlist		; point to string of valid switches
 41621                                  	; 09/09/2023
 41622 00003A9A BF[4250]                	mov	di,switchlist
 41623 00003A9D 8A0D                    	mov	cl,[di]
 41624 00003A9F B500                    	mov	ch,0
 41625 00003AA1 47                      	inc	di	; 1+switchlist
 41626                                  
 41627 00003AA2 F2AE                    	repne	scasb
 41628                                  
 41629 00003AA4 07                      	pop	es
 41630 00003AA5 75DF                    	jnz	short err_check
 41631                                  
 41632 00003AA7 B80100                  	mov	ax,1
 41633 00003AAA D3E0                    	shl	ax,cl			; set bit to indicate switch
 41634 00003AAC 8B1E[1E4F]              	mov	bx,[switches]		; get switches so far
 41635 00003AB0 09C3                    	or	bx,ax			; save this with other switches
 41636 00003AB2 89C1                    	mov	cx,ax
 41637                                  	; 12/12/2022
 41638 00003AB4 A8F8                    	test	al,switchnum ; 0F8h
 41639                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 41640 00003AB6 74CF                    	jz	short done_swtch
 41641                                  
 41642 00003AB8 E8F40C                  	call	getchr
 41643 00003ABB 72C7                    	jc	short err_swtch
 41644                                  
 41645 00003ABD 3C3A                    	cmp	al,':'
 41646 00003ABF 75C3                    	jne	short err_swtch
 41647                                  
 41648 00003AC1 E8EB0C                  	call	getchr
 41649 00003AC4 53                      	push	bx			; preserve switches
 41650                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41651                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 41652                                  	; 12/12/2022
 41653                                  	; ds = cs
 41654 00003AC5 C606[AE02]20            	mov	byte [sepchr],' '
 41655 00003ACA E8980D                  	call	getnum
 41656                                  	;mov	byte [cs:sepchr],0
 41657                                  	; 12/12/2022
 41658 00003ACD C606[AE02]00            	mov	byte [sepchr],0
 41659 00003AD2 5B                      	pop	bx			; restore switches
 41660                                  
 41661                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 41662                                  ; not check for carry set here. if there is an error, it will be detected
 41663                                  ; further on (hopefully).
 41664                                  
 41665                                  	; 09/09/2023
 41666                                  	;call	process_num
 41667                                  	;jmp	short process_num
 41668                                  
 41669                                  ;done_swtch:
 41670                                  ;	;clc
 41671                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41672                                  ;	; 12/12/2022
 41673                                  ;	; cf=0
 41674                                  ;	;clc
 41675                                  ;	retn
 41676                                  
 41677                                  ;----------------------------------------------------------------------------
 41678                                  ;
 41679                                  ; procedure : process_num
 41680                                  ;
 41681                                  ; this routine takes the switch just input, and the number following (if any),
 41682                                  ; and sets the value in the appropriate variable. if the number input is zero
 41683                                  ; then it does nothing - it assumes the default value that is present in the
 41684                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 41685                                  ;
 41686                                  ;----------------------------------------------------------------------------
 41687                                  
 41688                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 41689                                  	; (SYSINIT:3156h)
 41690                                  process_num:
 41691 00003AD3 850E[1E4F]              	test	[switches],cx		; if this switch has been done before,
 41692 00003AD7 752B                    	jnz	short done_ret		; ignore this one.
 41693                                  	; 12/12/2022
 41694 00003AD9 F6C108                  	test	cl,flagdrive ; 8
 41695                                  	;test	cx,flagdrive ; 8
 41696 00003ADC 7404                    	jz	short try_f
 41697 00003ADE A2[1D4F]                	mov	byte [drive],al
 41698                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41699                                  	;jmp	short done_ret
 41700                                  	; 12/12/2022
 41701                                  	; cf=0
 41702 00003AE1 C3                      	retn	; 13/05/2019
 41703                                  try_f:
 41704                                  	; 12/12/2022
 41705 00003AE2 F6C180                  	test	cl,flagff ; 80h
 41706                                  	;test	cx,flagff ; 80h
 41707 00003AE5 7404                    	jz	short try_t
 41708                                  
 41709                                  ; ensure that we do not get bogus form factors that are not supported
 41710                                  
 41711                                  	;mov	[deviceparameters+1],al
 41712 00003AE7 A2[C04D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 41713                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41714                                  	;jmp	short done_ret
 41715                                  	; 12/12/2022
 41716                                  	; cf=0
 41717 00003AEA C3                      	retn	; 13/05/2019
 41718                                  try_t:
 41719 00003AEB 09C0                    	or	ax,ax
 41720 00003AED 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 41721                                  	; 12/12/2022
 41722 00003AEF F6C110                  	test	cl,flagcyln ; 10h
 41723                                  	;test	cx,flagcyln ; 10h
 41724 00003AF2 7404                    	jz	short try_s
 41725                                  
 41726                                  	;mov	[deviceparameters+4],ax
 41727 00003AF4 A3[C34D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 41728                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41729                                  	;jmp	short done_ret
 41730                                  	; 12/12/2022
 41731                                  	; cf=0
 41732 00003AF7 C3                      	retn	; 13/05/2019
 41733                                  try_s:
 41734                                  	; 12/12/2022
 41735 00003AF8 F6C120                  	test	cl,flagseclim ; 20h
 41736                                  	;test	cx,flagseclim ; 20h
 41737 00003AFB 7404                    	jz	short try_h
 41738 00003AFD A3[1B4F]                	mov	[slim],ax
 41739                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41740                                  	;jmp	short done_ret
 41741                                  	; 12/12/2022
 41742                                  	; cf=0
 41743 00003B00 C3                      	retn	; 13/05/2019
 41744                                  
 41745                                  ; must be for number of heads
 41746                                  
 41747                                  try_h:
 41748 00003B01 A3[194F]                	mov	[hlim],ax
 41749                                  done_ret:
 41750                                  	;clc
 41751                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41752                                  	; 12/12/2022
 41753                                  	; cf=0 (test instruction resets cf)
 41754                                  	;clc
 41755 00003B04 C3                      	retn
 41756                                  
 41757                                  
 41758                                  ; 16/04/2024 - Retro DOS v5.0
 41759                                  ; 03/01/2023 - Retro DOS v4.2
 41760                                  %if 1
 41761                                  
 41762                                  ; 15/04/2019 - Retro DOS v4.0
 41763                                  
 41764                                  ;----------------------------------------------------------------------------
 41765                                  ;
 41766                                  ; procedure : parseline
 41767                                  ;
 41768                                  ; entry point is parseline. al contains the first character in command line.
 41769                                  ;
 41770                                  ;----------------------------------------------------------------------------
 41771                                  
 41772                                  	; 16/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 41773                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4151h)
 41774                                  
 41775                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41776                                  	; (SYSINIT:3EDFh)
 41777                                  
 41778                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 41779                                  	; (SYSINIT:30ACh)
 41780                                  
 41781                                  parseline:
 41782                                  	; 03/01/2023
 41783                                  	; ds = cs ; *
 41784                                  
 41785                                  	;push	ds ; *
 41786                                  
 41787                                  	;push	cs ; *
 41788                                  	;pop	ds ; *
 41789                                  
 41790                                  nextswtch:
 41791 00003B05 3C0D                    	cmp	al,cr			; carriage return?
 41792 00003B07 741C                    	je	short done_line
 41793 00003B09 3C0A                    	cmp	al,lf			; linefeed?
 41794 00003B0B 7421                    	je	short put_back		; put it back and done
 41795                                  
 41796                                  ; anything less or equal to a space is ignored.
 41797                                  
 41798 00003B0D 3C20                    	cmp	al,' '                  ; space?
 41799 00003B0F 760F                    	jbe	short getnext		; skip over space
 41800 00003B11 3C2F                    	cmp	al,'/'
 41801 00003B13 7402                    	je	short getparm
 41802 00003B15 F9                      	stc				; mark error invalid-character-in-input
 41803                                  	;jmp	short exitpl
 41804                                  	; 03/01/2023
 41805                                  swterr:
 41806 00003B16 C3                      	retn
 41807                                  
 41808                                  getparm:
 41809 00003B17 E86EFF                  	call	check_switch
 41810 00003B1A 891E[1E4F]              	mov	[switches],bx		; save switches read so far
 41811 00003B1E 72F6                    	jc	short swterr
 41812                                  getnext:
 41813 00003B20 E88C0C                  	call	getchr
 41814                                  	;jc	short done_line
 41815                                  	;jmp	short nextswtch
 41816                                  	; 03/01/2023
 41817 00003B23 73E0                    	jnc	short nextswtch
 41818                                  ;swterr:
 41819                                  	;jmp	short exitpl		; exit if error
 41820                                  
 41821                                  done_line:
 41822                                  	; 12/12/2022
 41823 00003B25 F606[1E4F]08            	test	byte [switches],flagdrive ; 8
 41824                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 41825 00003B2A 750C                    	jnz	short okay
 41826 00003B2C F9                      	stc				; mark error no-drive-specified
 41827                                  	;jmp	short exitpl
 41828                                  	; 03/01/2023
 41829 00003B2D C3                      	retn
 41830                                  
 41831                                  ;exitpl:
 41832                                  	; 03/01/2023
 41833                                  	; ds = cs
 41834                                  	;;pop	ds ; *
 41835                                  	;retn
 41836                                  
 41837                                  put_back:
 41838 00003B2E FF06[5603]              	inc	word [count]		; one more char to scan
 41839 00003B32 FF0E[5A03]              	dec	word [chrptr]		; back up over linefeed
 41840 00003B36 EBED                    	jmp	short done_line
 41841                                  
 41842                                  okay:
 41843 00003B38 A1[1E4F]                	mov	ax,[switches]
 41844 00003B3B 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 41845 00003B3E A3[C14D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 41846                                  	; 16/04/2024
 41847                                  	;mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 41848                                  	;;;
 41849 00003B41 C706[1B4E]0000          	mov	word [deviceparameters+92],0 ; PCDOS 7.1 IBMBIO.COM	
 41850                                  	;;;
 41851                                  	;clc			    ; everything is fine
 41852                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41853                                  	; 12/12/2022
 41854                                  	; cf=0
 41855                                  	;clc
 41856                                  	;call	setdeviceparameters
 41857                                  	; 03/01/2023
 41858                                  	;jmp	short setdeviceparameters
 41859                                  
 41860                                  %endif
 41861                                  
 41862                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 41863                                  
 41864                                  ;----------------------------------------------------------------------------
 41865                                  ;
 41866                                  ; procedure : setdeviceparameters
 41867                                  ;
 41868                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 41869                                  ; system based on the form factor. it is assumed that the bpbs for the
 41870                                  ; various form factors are present in the bpbtable. for hard files,
 41871                                  ; the recommended bpb is the same as the bpb on the drive.
 41872                                  ; no attempt is made to preserve registers since we are going to jump to
 41873                                  ; sysinit straight after this routine.
 41874                                  ;
 41875                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 41876                                  ;	  we always return no carry
 41877                                  ;
 41878                                  ;	note:  there is a routine by the same name in msdioctl.asm
 41879                                  ;
 41880                                  ;----------------------------------------------------------------------------
 41881                                  
 41882                                  ; 15/04/2019 - Retro DOS v4.0
 41883                                  
 41884                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 41885                                  
 41886                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 41887                                  	; (SYSINIT:3FC4h)
 41888                                  
 41889                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 41890                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4236h)
 41891                                  
 41892                                  setdeviceparameters:
 41893                                  	; 03/01/2023
 41894                                  	; ds = cs
 41895                                  
 41896 00003B47 06                      	push	es
 41897                                  
 41898 00003B48 0E                      	push	cs
 41899 00003B49 07                      	pop	es
 41900                                  
 41901 00003B4A 31DB                    	xor	bx,bx
 41902 00003B4C 8A1E[C04D]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 41903 00003B50 80FB00                  	cmp	bl,DEV_5INCH ; 0
 41904 00003B53 7506                    	jne	short got_80
 41905                                  
 41906 00003B55 C706[C34D]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 41907                                  							; 48 tpi=40 cyl
 41908                                  got_80:
 41909 00003B5B D1E3                    	shl	bx,1			; get index into bpb table
 41910 00003B5D 8BB7[2E50]              	mov	si,[bpbtable+bx]	; get address of bpb
 41911                                  
 41912                                  	;mov	di,deviceparameters+7	
 41913                                  	; 02/11/2022
 41914 00003B61 BF[C64D]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 41915 00003B64 B93B00                  	mov	cx,A_BPB.size ; 31
 41916                                  	; 09/09/2023
 41917                                  	;mov	cx,59 ; PCDOS 7.1 IBMBIO.COM A_BPB.size
 41918 00003B67 FC                      	cld
 41919                                  	;repe	movsb
 41920                                  	; 02/11/2022
 41921 00003B68 F3A4                    	rep	movsb
 41922                                  
 41923 00003B6A 07                      	pop	es
 41924                                  
 41925                                  	; 12/12/2022
 41926 00003B6B F606[1E4F]20            	test	byte [switches],flagseclim ; 20h
 41927                                  	;test	word [switches],flagseclim ; 20h
 41928 00003B70 7406                    	jz	short see_heads
 41929                                  
 41930 00003B72 A1[1B4F]                	mov	ax,[slim]
 41931                                  	;mov	[deviceparameters+20],ax
 41932 00003B75 A3[D34D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],ax
 41933                                  
 41934                                  see_heads:
 41935                                  	; 12/12/2022
 41936 00003B78 F606[1E4F]40            	test	byte [switches],flagheads ; 40h
 41937                                  	;test	word [switches],flagheads ; 40h
 41938 00003B7D 7406                    	jz	short heads_not_altered
 41939                                  
 41940 00003B7F A1[194F]                	mov	ax,[hlim]
 41941                                  	;mov	[deviceparameters+22],ax	
 41942 00003B82 A3[D54D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax
 41943                                  
 41944                                  heads_not_altered:
 41945                                  
 41946                                  ; set up correct media descriptor byte and sectors/cluster
 41947                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 41948                                  
 41949                                  	;mov	byte [deviceparameters+9],2
 41950                                  	; 02/11/2022
 41951                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],2
 41952                                  	; 03/01/2023
 41953 00003B85 B80200                  	mov	ax,2	
 41954 00003B88 A2[C84D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 2
 41955                                  
 41956 00003B8B B3F0                    	mov	bl,0F0h			; get default mediabyte
 41957                                  
 41958                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 41959                                  
 41960                                  	;mov	bh,[deviceparameters+17]
 41961                                  	; 02/11/2022
 41962 00003B8D 8A3E[D04D]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR]
 41963                                  	
 41964                                  	; 03/01/2023
 41965                                  	; ax = 2
 41966 00003B91 3906[D54D]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax ; >2 heads?
 41967                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],2 ; >2 heads?
 41968 00003B95 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 41969                                  
 41970 00003B97 7524                    	jne	short only_one_head	; one head, do one head stuff
 41971                                  
 41972                                  ;	two head drives will use the mediadescriptor from the bpb
 41973                                  
 41974 00003B99 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 41975                                  
 41976                                  ;	two sided drives have two special cases to look for. One is
 41977                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 41978                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 41979                                  ;	   one sector/cluster.
 41980                                  
 41981                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 41982                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 41983                                  ;	   type of 2 headed drive is all set.
 41984                                  
 41985 00003B9B 833E[D34D]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],18
 41986 00003BA0 7509                    	jne	short not_144m
 41987 00003BA2 833E[C34D]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 41988 00003BA7 7502                    	jne	short not_144m
 41989                                  
 41990                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 41991                                  
 41992 00003BA9 EB24                    	jmp	short got_one_secperclus_drive
 41993                                  
 41994                                  ;	check for 320K
 41995                                  
 41996                                  not_144m:
 41997 00003BAB 833E[C34D]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 41998 00003BB0 7521                    	jne	short got_correct_mediad
 41999 00003BB2 833E[D34D]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 42000 00003BB7 751A                    	jne	short got_correct_mediad
 42001                                  
 42002 00003BB9 B3FC                    	mov	bl,0FCh
 42003 00003BBB EB16                    	jmp	short got_correct_mediad
 42004                                  
 42005                                  only_one_head:
 42006                                  
 42007                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 42008                                  
 42009 00003BBD 803E[C04D]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 42010 00003BC2 740B                    	je	short got_one_secperclus_drive
 42011                                  
 42012                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 42013                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 42014                                  ;	  besides 8 will be considered 0fch
 42015                                  
 42016 00003BC4 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 42017 00003BC6 833E[D34D]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 42018                                  	; 12/12/2022
 42019 00003BCB 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 42020                                  
 42021 00003BCD B3FE                    	mov	bl,0FEh			; 160K mediaid
 42022                                  
 42023                                  ;	we've either got a one sided drive, or a 1.44M drive
 42024                                  ;	  either case we'll use 1 sector per cluster instead of 2
 42025                                  
 42026                                  got_one_secperclus_drive:
 42027                                  	; 03/01/2023
 42028                                  	; ax = 2
 42029 00003BCF 48                      	dec	ax  ; ax = 1
 42030 00003BD0 A2[C84D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 1
 42031                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],1
 42032                                  
 42033                                  got_correct_mediad:
 42034 00003BD3 881E[D04D]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR],bl
 42035                                  
 42036                                  ;	 Calculate the correct number of Total Sectors on medium
 42037                                  
 42038 00003BD7 A1[C34D]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 42039 00003BDA F726[D54D]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS]
 42040 00003BDE F726[D34D]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 42041 00003BE2 A3[CE4D]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS],ax
 42042 00003BE5 F8                      	clc				; we currently return no errors
 42043                                  
 42044 00003BE6 C3                      	retn
 42045                                  
 42046                                  ;	M047 -- end rewritten routine
 42047                                  
 42048                                  ;----------------------------------------------------------------------------
 42049                                  ;
 42050                                  ; procedure : organize
 42051                                  ;
 42052                                  ;----------------------------------------------------------------------------
 42053                                  
 42054                                  ; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 42055                                  %if 1
 42056                                  end_commd_line:
 42057 00003BE7 AA                      	stosb				; store line feed char in buffer for the linecount.
 42058                                  	;mov	byte [cs:com_level],0	; reset the command level.
 42059                                  	; 03/01/2023
 42060                                  	; ds = cs
 42061                                  	;mov	byte [com_level],0
 42062                                  	;jmp	short org1
 42063                                  	; 09/09/2023
 42064 00003BE8 EB0E                    	jmp	short org0
 42065                                  nochar1:
 42066 00003BEA F9                      	stc
 42067 00003BEB C3                      	retn
 42068                                  %endif
 42069                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42070                                  	; (SYSINIT:3234h)
 42071                                  
 42072                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42073                                  	; (SYSINIT:4067h)
 42074                                  
 42075                                  	; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 42076                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:42D9h)
 42077                                  
 42078                                  organize:
 42079                                  	; 03/01/2023
 42080                                  	; ds = cs
 42081 00003BEC 8B0E[5603]              	mov	cx,[count]
 42082                                  	;mov	cx,[cs:count]
 42083 00003BF0 E3F8                    	jcxz	nochar1
 42084                                  
 42085                                  ;ifndef	MULTI_CONFIG
 42086                                  ;
 42087                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 42088                                  ;;   because we the case of values in SET commands preserved
 42089                                  ;
 42090                                  ;	call	mapcase
 42091                                  ;endif
 42092                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42093                                  	; 03/01/2023 - Retro DOS v4.2
 42094                                  	;call	mapcase
 42095                                  
 42096 00003BF2 31F6                    	xor	si,si
 42097 00003BF4 89F7                    	mov	di,si
 42098 00003BF6 31C0                    	xor	ax,ax
 42099                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 42100                                  	;;mov	byte [cs:com_level],0
 42101                                  	; 12/12/2022
 42102                                  	;mov	[cs:com_level],al ; 0
 42103                                  	; 03/01/2023
 42104                                  	; ds = cs
 42105                                  	; 09/09/2023
 42106                                  	;mov	[com_level],al ; 0
 42107                                  org0:
 42108 00003BF8 C606[5003]00            	mov	byte [com_level],0 ; 09/09/2023
 42109                                  org1:
 42110 00003BFD E8EF01                  	call	skip_comment
 42111 00003C00 74E5                    	jz	short end_commd_line	; found a comment string and skipped.
 42112 00003C02 E8D001                  	call	get2			; not a comment string. then get a char.
 42113 00003C05 3C0A                    	cmp	al,lf ; 0Ah
 42114 00003C07 74DE                    	je	short end_commd_line	; starts with a blank line.
 42115 00003C09 3C20                    	cmp	al,' ' ; 20h
 42116 00003C0B 76F0                    	jbe	short org1		; skip leading control characters
 42117                                  	; 09/09/2023
 42118                                  	;jmp	short findit
 42119                                  
 42120                                  ; 09/09/2023
 42121                                  %if 0
 42122                                  end_commd_line:
 42123                                  	stosb				; store line feed char in buffer for the linecount.
 42124                                  	;mov	byte [cs:com_level],0	; reset the command level.
 42125                                  	; 03/01/2023
 42126                                  	; ds = cs
 42127                                  	mov	byte [com_level],0
 42128                                  	jmp	short org1
 42129                                  
 42130                                  nochar1:
 42131                                  	stc
 42132                                  	retn
 42133                                  %endif
 42134                                  
 42135                                  findit:
 42136 00003C0D 51                      	push	cx
 42137 00003C0E 56                      	push	si
 42138 00003C0F 57                      	push	di
 42139 00003C10 89F5                    	mov	bp,si
 42140 00003C12 4D                      	dec	bp
 42141 00003C13 BE[D24C]                        mov     si,comtab		; prepare to search command table
 42142 00003C16 B500                    	mov	ch,0
 42143                                  findcom:
 42144 00003C18 89EF                    	mov	di,bp
 42145 00003C1A 8A0C                    	mov	cl,[si]
 42146 00003C1C 46                      	inc	si
 42147 00003C1D E345                    	jcxz	nocom
 42148                                  
 42149                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42150                                  
 42151                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42152                                  
 42153                                  ;ifdef	MULTI_CONFIG
 42154                                  
 42155                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 42156                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 42157                                  ;   anything in particular)
 42158                                  
 42159 00003C1F 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 42160 00003C23 7430                    	je	short semicolon
 42161                                  loopcom:
 42162                                  	;mov	al,[es:di]
 42163                                  	;inc	di
 42164                                  	;and	al,~20h ; 0DFh		; force upper case
 42165                                  	;inc	si                      ; compare to byte @es:di
 42166                                  	;cmp	al,[si-1]
 42167                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42168 00003C25 268A25                  	mov	ah,[es:di]
 42169 00003C28 47                      	inc	di
 42170 00003C29 80E4DF                  	and	ah,~20h ; 0DFh		
 42171 00003C2C AC                      	lodsb			; mov al,[si]
 42172                                  				; inc si
 42173                                  	;cmp	al,ah
 42174                                  	;loope	loopcom
 42175                                  	; 28/07/2023
 42176 00003C2D 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 42177 00003C2F E1F4                    	loopz	loopcom
 42178                                  ;else
 42179                                  ;	repe	cmpsb
 42180                                  ;endif
 42181                                  	; 02/11/2022
 42182                                  	; 03/01/2023 - Retro DOS v4.2
 42183                                  	;repe	cmpsb
 42184                                  
 42185                                  	; 28/07/2023
 42186                                  	;lahf
 42187 00003C31 01CE                            add     si,cx                   ; bump to next position without affecting flags
 42188                                  	;sahf
 42189 00003C33 AC                              lodsb                           ; get indicator letter
 42190                                  	;jnz	short findcom
 42191                                          ; 28/07/2023
 42192 00003C34 08E4                    	or	ah,ah			; (*)
 42193 00003C36 75E0                    	jnz	short findcom		
 42194                                  	
 42195 00003C38 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 42196 00003C3C 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 42197 00003C3E 26803D0A                	cmp	byte [es:di],lf
 42198 00003C42 741B                    	je	short gotcom0
 42199                                  
 42200                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42201                                  
 42202                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42203                                  
 42204                                  ;ifdef	MULTI_CONFIG
 42205                                  
 42206                                  ; Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 42207                                  
 42208 00003C44 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 42209 00003C46 7417                    	je	short gotcom0
 42210                                  ;endif
 42211 00003C48 50                      	push	ax
 42212 00003C49 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 42213                                  
 42214                                  ;ifdef	MULTI_CONFIG
 42215                                  
 42216                                  ;   If keyword is *immediately* followed by a question mark (?), then
 42217                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 42218                                  ;   stored in the CONFIG.SYS memory image.
 42219                                  
 42220 00003C4C 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 42221 00003C4E 7509                    	jne	short no_query		; no
 42222 00003C50 58                      	pop	ax                      ; yes, so retrieve the original code
 42223                                  	;or	al,80h ; 03/01/2023
 42224 00003C51 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 42225 00003C53 EB0A                    	jmp	short gotcom0           ;
 42226                                  semicolon:
 42227 00003C55 B030                    	mov	al,CONFIG_REM ; '0'
 42228 00003C57 EB06                    	jmp	short gotcom0
 42229                                  no_query:
 42230                                  ;endif  ;MULTI_CONFIG
 42231                                  
 42232                                  	; 02/11/2022
 42233                                  	; 03/01/2023 - Retro DOS v4.2
 42234                                  	;push	ax
 42235                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 42236                                  
 42237 00003C59 E82E0B                  	call	delim
 42238                                  no_delim:
 42239 00003C5C 58                      	pop	ax
 42240 00003C5D 75B9                    	jnz	short findcom
 42241                                  gotcom0:
 42242 00003C5F 5F                      	pop	di
 42243 00003C60 5E                      	pop	si
 42244 00003C61 59                      	pop	cx
 42245 00003C62 EB10                    	jmp	short gotcom
 42246                                  nocom:
 42247 00003C64 5F                      	pop	di
 42248 00003C65 5E                      	pop	si
 42249 00003C66 59                      	pop	cx
 42250 00003C67 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 42251 00003C69 AA                      	stosb				; save indicator char.
 42252                                  _skipline:
 42253 00003C6A E86801                  	call	get2
 42254 00003C6D 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 42255 00003C6F 75F9                            jne     short _skipline
 42256                                  	;jmp	short end_commd_line	; handle next command line
 42257                                  	; 09/09/2023
 42258 00003C71 E973FF                  	jmp	end_commd_line
 42259                                  gotcom:
 42260 00003C74 AA                              stosb                           ; save indicator char in buffer
 42261                                  
 42262                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42263                                  
 42264                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42265                                  
 42266                                  ;ifdef	MULTI_CONFIG
 42267                                  
 42268                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 42269                                  ;   it screws up the direct comparisons below.
 42270                                  
 42271 00003C75 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 42272                                  ;endif
 42273                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 42274                                  	; 03/01/2023
 42275                                  	; ds = cs
 42276 00003C77 A2[5403]                	mov	[cmd_indicator],al	; save it for the future use.
 42277                                  
 42278                                  ;ifdef	MULTI_CONFIG
 42279                                  
 42280                                  ;   There is no whitespace/delimiter between the "begin block" character
 42281                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 42282                                  ;   skipping code
 42283                                  
 42284 00003C7A 3C5B                    	cmp	al,CONFIG_BEGIN
 42285 00003C7C 7455                    	je	short org31
 42286 00003C7E 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 42287 00003C80 740F                    	je	short no_mapcase
 42288 00003C82 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 42289 00003C84 740B                    	je	short no_mapcase
 42290 00003C86 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 42291 00003C88 7407                    	je	short no_mapcase
 42292 00003C8A 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 42293 00003C8C 7403                    	je	short no_mapcase
 42294 00003C8E E8350B                  	call	mapcase			; map case of rest of line to UPPER
 42295                                  no_mapcase:
 42296                                  ;endif
 42297                                  	;; 02/11/2022
 42298                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 42299                                  	;; 03/01/2023
 42300                                  	;; ds = cs
 42301                                  	;mov	[cmd_indicator],al
 42302                                  org2:	
 42303 00003C91 E84101                  	call    get2                    ; skip the command name until delimiter
 42304 00003C94 3C0A                            cmp     al,lf 	    ; 0Ah
 42305 00003C96 740F                    	je	short org21
 42306 00003C98 3C0D                    	cmp	al,cr 	    ; 0Dh	
 42307 00003C9A 740B                    	je	short org21
 42308                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42309                                  	; 03/01/2023 - Retro DOS v4.2
 42310 00003C9C 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 42311 00003C9E 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 42312                                  
 42313 00003CA0 E8E70A                  	call	delim
 42314 00003CA3 75EC                            jnz	short org2
 42315 00003CA5 EB02                    	jmp	short org3
 42316                                  org21:					;if cr or lf then
 42317 00003CA7 4E                      	dec	si			; undo si, cx register
 42318 00003CA8 41                      	inc	cx			;  and continue
 42319                                  org3:	
 42320                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 42321                                  	;je	short get_cmt_token
 42322                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42323                                  	; 03/01/2023 - Retro DOS v4.2	
 42324                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 42325                                  	;je	short org_file
 42326                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 42327                                  	;je	short org_file
 42328                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 42329                                  	;je	short org_file
 42330                                  	; 02/11/2022
 42331                                  	; 03/01/2023 - Retro DOS v4.2
 42332                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 42333                                  	;;je	short org_file
 42334                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 42335                                  	;je	short org_file
 42336                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 42337                                  	;je	short org_switch
 42338                                  
 42339                                  	; 03/01/2023
 42340                                  	; ds = cs
 42341                                  
 42342 00003CA9 803E[5403]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 42343 00003CAE 745D                    	je	short get_cmt_token
 42344                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42345                                  	; 03/01/2023 - Retro DOS v4.2	
 42346 00003CB0 803E[5403]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 42347 00003CB5 7430                    	je	short org_file
 42348 00003CB7 803E[5403]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 42349 00003CBC 7429                    	je	short org_file
 42350 00003CBE 803E[5403]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 42351 00003CC3 7422                    	je	short org_file
 42352                                  	; 02/11/2022
 42353                                  	; 03/01/2023 - Retro DOS v4.2
 42354                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 42355                                  	;je	short org_file
 42356 00003CC5 803E[5403]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 42357 00003CCA 741B                    	je	short org_file
 42358 00003CCC 803E[5403]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 42359 00003CD1 7403                    	je	short org_switch
 42360                                  	
 42361                                  org31:
 42362 00003CD3 E99500                  	jmp	org4
 42363                                  
 42364                                  org_switch:
 42365 00003CD6 E81601                  	call	skip_comment
 42366 00003CD9 7472                    	jz	short end_commd_line_brdg
 42367                                  
 42368 00003CDB E8F700                  	call	get2
 42369 00003CDE E8B10A                  	call	org_delim
 42370 00003CE1 74F3                    	jz	short org_switch
 42371                                  
 42372 00003CE3 AA                      	stosb
 42373 00003CE4 E99300                  	jmp	org5
 42374                                  
 42375                                  org_file:			; get the filename and put 0 at end
 42376 00003CE7 E80501                  	call	skip_comment
 42377 00003CEA 7464                    	jz	short org_put_zero
 42378                                  
 42379 00003CEC E8E600                  	call	get2		; not a comment
 42380 00003CEF E8980A                  	call	delim
 42381 00003CF2 74F3                    	jz	short org_file	; skip the possible delimiters
 42382                                  
 42383 00003CF4 AA                      	stosb			; copy the first non delim char found in buffer
 42384                                  
 42385                                  org_copy_file:
 42386 00003CF5 E8F700                  	call	skip_comment	; comment char in the filename?
 42387 00003CF8 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 42388                                  
 42389 00003CFA E8D800                  	call	get2
 42390 00003CFD 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 42391 00003CFF 7457                    	je	short end_file_slash ; this will be the special case.
 42392                                  
 42393 00003D01 AA                      	stosb			; save the char. in buffer
 42394 00003D02 E8850A                  	call	delim
 42395 00003D05 7459                    	jz	short end_copy_file
 42396                                  
 42397 00003D07 3C20                    	cmp	al, ' '
 42398 00003D09 77EA                    	ja	short org_copy_file ; keep copying
 42399 00003D0B EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 42400                                  
 42401                                  get_cmt_token:			; get the token. just max. 2 char.
 42402 00003D0D E8C500                  	call	get2
 42403 00003D10 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 42404 00003D12 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 42405 00003D14 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 42406 00003D16 74F5                    	je	short get_cmt_token ;  character.)
 42407 00003D18 3C3D                    	cmp	al,'='		; = is special in this case.
 42408 00003D1A 74F1                    	je	short get_cmt_token
 42409 00003D1C 3C0D                    	cmp	al,cr
 42410 00003D1E 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 42411 00003D20 3C0A                    	cmp	al,lf
 42412 00003D22 7422                    	je	short get_cmt_end
 42413                                  
 42414                                  	; 03/01/2023
 42415                                  	; ds = cs
 42416                                  	;mov	[cs:cmmt1],al	; store it
 42417                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 42418 00003D24 A2[5203]                	mov	[cmmt1],al	; store it
 42419 00003D27 C606[5103]01            	mov	byte [cmmt],1	; 1 char. so far.
 42420 00003D2C E8A600                  	call	get2
 42421 00003D2F 3C20                    	cmp	al,' ' ; 20h
 42422 00003D31 7413                    	je	short get_cmt_end
 42423 00003D33 3C09                    	cmp	al,tab ; 9
 42424 00003D35 740F                    	je	short get_cmt_end
 42425 00003D37 3C0D                    	cmp	al,cr  ; 0Dh
 42426 00003D39 740B                    	je	short get_cmt_end
 42427 00003D3B 3C0A                    	cmp	al,lf  ; 0Ah
 42428 00003D3D 740E                    	je	short end_commd_line_brdg
 42429                                  
 42430                                  	;mov	[cs:cmmt2],al
 42431                                  	;inc	byte [cs:cmmt]
 42432                                  	; 03/01/2023
 42433 00003D3F A2[5303]                	mov	[cmmt2],al
 42434 00003D42 FE06[5103]              	inc	byte [cmmt]
 42435                                  
 42436                                  get_cmt_end:
 42437 00003D46 E88C00                  	call	get2
 42438 00003D49 3C0A                    	cmp	al,lf
 42439 00003D4B 75F9                    	jne	short get_cmt_end	; skip it.
 42440                                  end_commd_line_brdg: 
 42441 00003D4D E997FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 42442                                  
 42443                                  org_put_zero:				; make the filename in front of
 42444 00003D50 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 42445 00003D54 47                      	inc	di
 42446 00003D55 E98FFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 42447                                  
 42448                                  end_file_slash: 			; al = "/" option char.
 42449 00003D58 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 42450 00003D5C 47                      	inc	di			; and
 42451 00003D5D AA                      	stosb				; store "/" after that.
 42452 00003D5E EB1A                    	jmp	short org5		; continue with the rest of the line
 42453                                  
 42454                                  end_copy_file:
 42455 00003D60 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 42456 00003D65 3C0A                    	cmp	al,lf
 42457 00003D67 74E4                    	je	short end_commd_line_brdg
 42458 00003D69 EB0F                    	jmp	short org5
 42459                                  
 42460                                  org4:					; org4 skips all delimiters after the command name except for '/'
 42461 00003D6B E88100                  	call	skip_comment
 42462 00003D6E 74DD                    	jz	short end_commd_line_brdg
 42463                                  
 42464 00003D70 E86200                  	call	get2
 42465 00003D73 E81C0A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 42466 00003D76 74F3                    	jz	short org4
 42467 00003D78 EB08                    	jmp	short org51
 42468                                  
 42469                                  org5:					; rest of the line
 42470 00003D7A E87200                  	call	skip_comment		; comment?
 42471 00003D7D 74CE                    	jz	short end_commd_line_brdg
 42472 00003D7F E85300                  	call	get2			; not a comment.
 42473                                  
 42474                                  org51:
 42475 00003D82 AA                      	stosb				; copy the character
 42476 00003D83 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 42477 00003D85 743A                    	je	short at_quote
 42478 00003D87 3C20                    	cmp	al,' '  ; 20h
 42479 00003D89 77EF                    	ja	short org5
 42480                                  
 42481                                  	; 09/09/2023
 42482                                  	; (Note: PCDOS 7.1 IBMBIO.COM does not contain M051 modification)
 42483                                  
 42484                                  					; M051 - Start
 42485                                  	; 03/01/2023
 42486                                  	; ds = cs
 42487 00003D8B 803E[5403]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 42488                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 42489 00003D90 7514                    	jne	short not_dh		; N: 
 42490 00003D92 3C0A                    	cmp	al,lf			; Q: is this line feed
 42491 00003D94 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 42492 00003D96 3C0D                    	cmp	al,cr			; Q: is this a cr
 42493 00003D98 75E0                    	jne	short org5		; N: 
 42494 00003D9A 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 42495 00003D9F AA                      	stosb				; put cr after blank
 42496 00003DA0 FE06[223A]              	inc	byte [insert_blank]
 42497                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 42498                                  					; inserted
 42499 00003DA4 EBD4                    	jmp	short org5
 42500                                  not_dh:					; M051 - End
 42501                                  
 42502 00003DA6 3C0A                    	cmp	al,lf			; line feed?
 42503 00003DA8 740F                    	je	short org1_brdg		; handles the next command line.
 42504 00003DAA EBCE                    	jmp	short org5		; handles next char in this line.
 42505                                  
 42506                                  org_dhlf:				; M051 - Start
 42507                                  	; 03/01/2023
 42508                                  	; ds = cs
 42509 00003DAC 803E[223A]01            	cmp	byte [insert_blank],1
 42510                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 42511 00003DB1 7406                    	je	short org1_brdg		; Y:
 42512 00003DB3 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 42513 00003DB8 AA                      	stosb				; put lf after blank
 42514                                  					; M051 - End
 42515                                  org1_brdg:
 42516 00003DB9 C606[223A]00            	mov	byte [insert_blank],0 
 42517                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 42518                                  					; M051: devicehigh
 42519 00003DBE E93CFE                  	jmp	org1
 42520                                  
 42521                                  at_quote:
 42522 00003DC1 803E[5003]00            	cmp	byte [com_level],0
 42523                                  	;cmp	byte [cs:com_level],0
 42524 00003DC6 7407                    	je	short up_level
 42525                                  	;mov	byte [cs:com_level],0	; reset it.
 42526 00003DC8 C606[5003]00            	mov	byte [com_level],0
 42527 00003DCD EBAB                    	jmp	short org5
 42528                                  
 42529                                  up_level:
 42530                                  	;inc	byte [cs:com_level]	; set it.
 42531 00003DCF FE06[5003]              	inc	byte [com_level]
 42532 00003DD3 EBA5                    	jmp	short org5
 42533                                  
 42534                                  ;----------------------------------------------------------------------------
 42535                                  ;
 42536                                  ; procedure : get2
 42537                                  ;
 42538                                  ;----------------------------------------------------------------------------
 42539                                  
 42540                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42541                                  	; (SYSINIT:33FAh)
 42542                                  
 42543                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42544                                  	; (SYSINIT:4270h)
 42545                                  get2:
 42546 00003DD5 E304                    	jcxz	noget
 42547                                  	;
 42548                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42549                                  	;;lods	byte ptr es:[si]
 42550                                  	; 12/12/2022
 42551 00003DD7 26                      	es	
 42552 00003DD8 AC                      	lodsb
 42553                                  	;mov	al, [es:si]
 42554                                  	;inc	si
 42555                                  	;
 42556 00003DD9 49                      	dec	cx
 42557 00003DDA C3                      	retn
 42558                                  noget:
 42559 00003DDB 59                      	pop	cx
 42560                                  	; 03/01/2023
 42561                                  	; ds = cs
 42562                                  	;mov	[cs:count],di ; 13/05/2019
 42563                                  	;mov	[cs:org_count],di
 42564 00003DDC 893E[5603]              	mov	[count],di
 42565 00003DE0 893E[5803]              	mov	[org_count],di
 42566 00003DE4 31F6                    	xor	si,si
 42567                                  	;mov	[cs:chrptr],si
 42568 00003DE6 8936[5A03]              	mov	[chrptr],si
 42569                                  
 42570                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42571                                  
 42572                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42573                                  
 42574                                  ;ifndef MULTI_CONFIG
 42575                                  ;	retn
 42576                                  ;else
 42577                                  
 42578                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 42579                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 42580                                  ;   and the new boot menu stuff...
 42581                                  
 42582 00003DEA 89F9                    	mov     cx,di
 42583 00003DEC E9E300                  	jmp     menu_check
 42584                                  
 42585                                  ;endif
 42586                                  	; 02/11/2022
 42587                                  	; 03/01/2023 - Retro DOS v4.2
 42588                                  	;retn
 42589                                  
 42590                                  ;----------------------------------------------------------------------------
 42591                                  ;
 42592                                  ; procedure : skip_comment
 42593                                  ;
 42594                                  ;skip the commented string until lf, if current es:si-> a comment string.
 42595                                  ;in) es:si-> string
 42596                                  ;	 cx -> length.
 42597                                  ;out) zero flag not set if not found a comment string.
 42598                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 42599                                  ;	  the line feed character at this moment when return.
 42600                                  ;	  ax register destroyed.
 42601                                  ;	  if found, si, cx register adjusted accordingly.
 42602                                  ;
 42603                                  ;----------------------------------------------------------------------------
 42604                                  
 42605                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42606                                  	; (SYSINIT:428Dh)
 42607                                  
 42608                                  skip_comment:
 42609 00003DEF E3EA                    	jcxz	noget		; get out of the organize routine.
 42610                                  
 42611                                  	; 03/01/2023
 42612                                  	; ds = cs	
 42613                                  
 42614 00003DF1 803E[5003]00            	cmp	byte [com_level],0
 42615                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 42616 00003DF6 752C                    	jne	short no_commt	 ; (not inside quotations)
 42617                                  
 42618 00003DF8 803E[5103]01            	cmp	byte [cmmt],1
 42619                                  	;cmp	byte [cs:cmmt],1
 42620 00003DFD 7225                    	jb	short no_commt
 42621                                  
 42622 00003DFF 268A04                  	mov	al,[es:si]
 42623                                  	
 42624 00003E02 3806[5203]              	cmp	[cmmt1],al
 42625                                  	;cmp	[cs:cmmt1],al
 42626 00003E06 751C                    	jne	short no_commt
 42627                                  
 42628 00003E08 803E[5103]02            	cmp	byte [cmmt],2
 42629                                  	;cmp	byte [cs:cmmt],2
 42630 00003E0D 750A                    	jne	short skip_cmmt
 42631                                  
 42632 00003E0F 268A4401                	mov	al,[es:si+1]
 42633                                  	
 42634 00003E13 3806[5303]              	cmp	[cmmt2],al
 42635                                  	;cmp	[cs:cmmt2],al
 42636 00003E17 750B                    	jne	short no_commt
 42637                                  skip_cmmt:
 42638 00003E19 E3C0                    	jcxz	noget		; get out of organize routine.
 42639 00003E1B 268A04                  	mov	al,[es:si]
 42640 00003E1E 46                      	inc	si
 42641 00003E1F 49                      	dec	cx
 42642 00003E20 3C0A                    	cmp	al,lf		; line feed?
 42643 00003E22 75F5                    	jne	short skip_cmmt
 42644                                  no_commt:
 42645 00003E24 C3                      	retn
 42646                                  
 42647                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42648                                  ; (SYSINIT:42C8h)
 42649                                  
 42650                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42651                                  ;%if 0
 42652                                  
 42653                                  ;ifdef	MULTI_CONFIG
 42654                                  
 42655                                  ;----------------------------------------------------------------------------
 42656                                  ;
 42657                                  ;   kbd_read: wait for keystroke
 42658                                  ;
 42659                                  ;   INPUT
 42660                                  ;       DS == CS == sysinitseg
 42661                                  ;
 42662                                  ;   OUTPUT
 42663                                  ;       Carry SET to clean boot, CLEAR otherwise
 42664                                  ;
 42665                                  ;   OTHER REGS USED
 42666                                  ;       All
 42667                                  ;
 42668                                  ;   HISTORY
 42669                                  ;       Created 16-Nov-1992 by JeffPar
 42670                                  ;
 42671                                  ;----------------------------------------------------------------------------
 42672                                  
 42673                                  kbd_read:
 42674 00003E25 F606[814C]02                    test    byte [bDisableUI],2
 42675 00003E2A 7520                            jnz     short kbd_nodelay
 42676                                  
 42677 00003E2C 1E                              push    ds              ; the bios timer tick count is incremented
 42678 00003E2D 29C0                            sub     ax,ax           ; 18.2 times per second;
 42679 00003E2F 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 42680                                  	;mov	dx,[046Ch]	; get initial value
 42681                                  kbd_loop:
 42682 00003E31 B401                            mov     ah,1            ;
 42683 00003E33 CD16                            int     16h             ; peek the keyboard
 42684 00003E35 7514                            jnz	short kbd_loopdone ; something's there, get out
 42685 00003E37 B402                            mov     ah,2            ; peek the shift states
 42686 00003E39 CD16                            int     16h             ;
 42687 00003E3B A803                            test    al,03h          ; either right or left shift key bits set?
 42688 00003E3D 750C                            jnz	short kbd_loopdone ; yes
 42689 00003E3F A16C04                          mov     ax,[046Ch]	;
 42690                                  	;sub	ax,dx           ; get difference
 42691                                  	; 15/04/2019 - Retro DOS v4.0
 42692 00003E42 2E2B06[8C03]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 42693                                  
 42694 00003E47 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 42695 00003E49 72E6                            jb	short kbd_loop	; not yet
 42696                                  kbd_loopdone:
 42697 00003E4B 1F                              pop     ds              ; delay complete!
 42698                                  kbd_nodelay:
 42699 00003E4C 29DB                            sub     bx,bx           ; assume clean boot
 42700 00003E4E B402                            mov     ah,2            ; peek the shift states
 42701 00003E50 CD16                            int     16h             ;
 42702 00003E52 A803                            test    al,03h          ; either right or left shift key bits set?
 42703 00003E54 7407                            jz      short kbd_notshift ; no
 42704 00003E56 43                              inc     bx              ; yes
 42705 00003E57 43                              inc     bx
 42706                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 42707 00003E58 800E[854C]04            	or	byte [bQueryOpt],4
 42708                                  kbd_notshift:                   ;
 42709 00003E5D B401                            mov     ah,1            ; peek the keyboard
 42710 00003E5F CD16                            int     16h             ;
 42711 00003E61 743E                            jz	short kbd_test	; no key present
 42712 00003E63 08C0                            or      al,al           ; is it a function key?
 42713 00003E65 753A                            jnz	short kbd_test	; no
 42714                                  
 42715                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 42716 00003E67 80FC62                          cmp     ah,62h          ; CTRL F5
 42717 00003E6A 7405                            je	short kbd_cfg_bypass
 42718                                  	
 42719 00003E6C 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 42720 00003E6F 750D                            jne	short kbd_notf5	; no
 42721                                  kbd_cfg_bypass:
 42722 00003E71 BA[FC51]                        mov     dx,_$CleanMsg
 42723 00003E74 E8DD0B                          call    print
 42724                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 42725 00003E77 800E[854C]04            	or	byte [bQueryOpt],4 
 42726 00003E7C EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 42727                                  kbd_notf5:
 42728                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 42729 00003E7E 80FC65                          cmp     ah,65h          ; CTRL F8
 42730 00003E81 7405                            je	short kbd_cfg_confirm
 42731                                  
 42732 00003E83 80FC42                          cmp     ah,42h          ; F8 function key?
 42733 00003E86 7523                            jne	short kbd_exit	; no
 42734                                  kbd_cfg_confirm:
 42735 00003E88 BA[3A52]                        mov     dx,_$InterMsg
 42736 00003E8B E8C60B                          call    print           ;
 42737 00003E8E B301                            mov     bl,1            ; yes, interactive-boot option enabled
 42738 00003E90 881E[854C]                      mov     [bQueryOpt],bl  ; change default setting
 42739                                  kbd_eat:                        ;
 42740 00003E94 B400                            mov     ah,0            ;
 42741 00003E96 CD16                            int     16h             ; eat the key we assumed was a signal
 42742 00003E98 C606[8B4C]FF                    mov	byte [secElapsed],-1
 42743 00003E9D 09DB                            or      bx,bx           ;
 42744 00003E9F 7405                            jz	short kbd_clean	;
 42745                                  kbd_test:                       ;
 42746 00003EA1 80FB02                          cmp     bl,2            ;
 42747 00003EA4 7205                            jb	short kbd_exit	;
 42748                                  kbd_clean:                      ;
 42749 00003EA6 E86E08                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 42750 00003EA9 F9                              stc                     ; set carry to indicate abort
 42751 00003EAA C3                              retn			;
 42752                                  kbd_exit:                       ;
 42753 00003EAB F8                              clc                     ; clear carry to indicate success
 42754 00003EAC C3                              retn			;
 42755                                  
 42756                                  ;----------------------------------------------------------------------------
 42757                                  ;
 42758                                  ;   set_numlock: set numlock LED
 42759                                  ;
 42760                                  ;   INPUT
 42761                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 42762                                  ;
 42763                                  ;   OUTPUT
 42764                                  ;       None
 42765                                  ;
 42766                                  ;   OTHER REGS USED
 42767                                  ;       None
 42768                                  ;
 42769                                  ;   HISTORY
 42770                                  ;       Created 16-Nov-1992 by JeffPar
 42771                                  ;
 42772                                  ;----------------------------------------------------------------------------
 42773                                  
 42774                                  	; 04/01/2023 - Retro DOS v4.2
 42775                                  
 42776                                  set_numlock:
 42777                                          ; 04/01/2023
 42778                                  	;push	ax
 42779 00003EAD 1E                              push    ds
 42780 00003EAE 29C0                            sub     ax,ax
 42781 00003EB0 8ED8                            mov     ds,ax
 42782 00003EB2 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 42783 00003EB5 2E3B06[C451]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 42784 00003EBA 7507                            jne	short not_off	; no
 42785 00003EBC 80261704DF                      and     byte [0417h],~20h ; 0DFh
 42786 00003EC1 EB0D                            jmp     short set_done
 42787                                  not_off:
 42788 00003EC3 2E3B06[C251]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 42789 00003EC8 F9                              stc
 42790 00003EC9 7505                            jne	short set_done	; no
 42791 00003ECB 800E170420                      or      byte [0417h],20h
 42792                                  set_done:
 42793 00003ED0 1F                              pop     ds
 42794                                  	; 04/01/2023
 42795                                  	;pop	ax
 42796 00003ED1 C3                              retn
 42797                                  
 42798                                  ; 16/04/2019 - Retro DOS v4.0
 42799                                  
 42800                                  ;----------------------------------------------------------------------------
 42801                                  ;
 42802                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 42803                                  ;
 42804                                  ;   INPUT
 42805                                  ;       CX == "organized" config.sys memory image length
 42806                                  ;    ES:SI -> "organized" config.sys memory image
 42807                                  ;       DS == CS == sysinitseg
 42808                                  ;
 42809                                  ;   OUTPUT
 42810                                  ;       Same as above; the idea is that menu_check simply transforms
 42811                                  ;       a block-structured config.sys image into a conventional image,
 42812                                  ;       based on the user's block selection and any other boot-time options
 42813                                  ;       the user may have employed...
 42814                                  ;
 42815                                  ;   OTHER REGS USED
 42816                                  ;       All
 42817                                  ;
 42818                                  ;   NOTES
 42819                                  ;       [count] and [org_count] are set to the new config.sys image length
 42820                                  ;
 42821                                  ;   HISTORY
 42822                                  ;       Created 16-Mar-1992 by JeffPar
 42823                                  ;
 42824                                  ;----------------------------------------------------------------------------
 42825                                  
 42826                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42827                                  	; (SYSINIT:4378h)
 42828                                  
 42829                                  menu_check:
 42830                                  
 42831                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 42832                                  ;   disable clean/interactive boot options
 42833                                  
 42834 00003ED2 51                              push    cx              ;
 42835 00003ED3 56                              push    si              ;
 42836 00003ED4 29DB                            sub     bx,bx           ; remains ZERO until first block
 42837                                  swchk_loop:                     ;
 42838 00003ED6 E83507                          call    get_char        ; get first char of current line
 42839 00003ED9 724C                            jc	short swchk_end	; hit eof
 42840 00003EDB 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 42841 00003EDD 7503                            jne	short swchk_next1 ;
 42842 00003EDF 43                              inc     bx              ; remember that we've seen a block
 42843 00003EE0 EB40                            jmp     short swchk_nextline
 42844                                  swchk_next1:                    ;
 42845 00003EE2 3C4E                            cmp     al,CONFIG_NUMLOCK
 42846 00003EE4 750E                            jne	short swchk_next2 ;
 42847 00003EE6 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 42848 00003EE8 7538                            jnz	short swchk_nextline ; before the first block
 42849 00003EEA E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 42850 00003EED 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 42851 00003EF2 EB2E                            jmp     short swchk_nextline
 42852                                  swchk_next2:                    ;
 42853 00003EF4 3C31                            cmp     al,CONFIG_SWITCHES
 42854 00003EF6 752A                            jne	short swchk_nextline ; this line ain't it
 42855                                  swchk_scan:                     ;
 42856 00003EF8 E81307                          call    get_char        ; look for /N or /F
 42857                                  swchk_scan1:                    ;
 42858 00003EFB 3C0A                            cmp     al,LF           ; end of line?
 42859 00003EFD 7423                            je	short swchk_nextline ; yes
 42860 00003EFF 3C2F                            cmp     al,'/'          ; switch-char?
 42861 00003F01 75F5                            jne	short swchk_scan ; no
 42862 00003F03 E80807                          call    get_char        ;
 42863 00003F06 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 42864 00003F08 3A06[6323]                      cmp     al,[swit_n+1]	; 'N'
 42865 00003F0C 7507                            jne	short swchk_scan2 ; no
 42866 00003F0E 800E[814C]01                    or      byte [bDisableUI],1
 42867 00003F13 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 42868                                  swchk_scan2:                    ;
 42869 00003F15 3A06[6F23]                      cmp     al,[swit_f+1]	; 'F'
 42870 00003F19 75E0                            jne	short swchk_scan1 ; no
 42871 00003F1B 800E[814C]02                    or      byte [bDisableUI],2
 42872 00003F20 EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 42873                                  swchk_nextline:                 ;
 42874 00003F22 E8C306                          call    skip_opt_line   ;
 42875 00003F25 EBAF                            jmp     short swchk_loop ;
 42876                                  swchk_end:                      ;
 42877 00003F27 5E                              pop     si              ;
 42878 00003F28 59                              pop     cx              ;
 42879                                  
 42880                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 42881                                  ;   the DisableUI flag is still clear
 42882                                  
 42883 00003F29 F606[814C]01                    test    byte [bDisableUI],1
 42884 00003F2E 7508                            jnz	short menu_search
 42885                                  ;
 42886                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 42887                                  ;   there is anything at all in the keyboard buffer
 42888                                  ;
 42889 00003F30 E8F2FE                          call    kbd_read
 42890 00003F33 7303                            jnc	short menu_search
 42891 00003F35 E9EE01                          jmp	menu_abort
 42892                                  
 42893                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 42894                                  
 42895                                  menu_search:
 42896 00003F38 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 42897 00003F3A BF[C64C]                        mov     di,szMenu	;
 42898 00003F3D E80304                          call    find_block      ; find the MENU block
 42899 00003F40 7337                            jnc	short menu_found ;
 42900 00003F42 C606[BE4C]00                    mov     byte [szBoot],0
 42901 00003F47 E90C02                          jmp	no_selection ; not found
 42902                                  
 42903                                  ;   Process the requested menu color(s)
 42904                                  
 42905                                  menu_color:
 42906 00003F4A 51                      	push	cx              ;
 42907 00003F4B 52                      	push	dx              ;
 42908                                  	;;mov	dx,0007h        ; default color setting
 42909                                  	; 10/09/2023
 42910                                  	;mov	dl,7 ; !*!
 42911 00003F4C E89E06                  	call	get_number	; get first number
 42912 00003F4F 80E30F                  	and	bl,0Fh  ; !**!	; first # is foreground color (for low nibble)
 42913 00003F52 88DD                    	mov	ch,bl           ; save it in CH
 42914                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 42915                                  	; (high nibble of dl is 0)
 42916                                  	;and	dl,0F0h	; !*!	; (low nibble of dl would be zero)
 42917                                  	;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 42918 00003F54 88DA                    	mov	dl,bl	; 14/08/2023
 42919 00003F56 E83108                  	call	delim           ; did we hit a delimiter
 42920 00003F59 750E                    	jne	short check_color ; no, all done
 42921 00003F5B E88F06                  	call	get_number	; get next number
 42922 00003F5E 80E30F                  	and	bl,0Fh		; second # is background color (for high nibble)
 42923 00003F61 88DE                    	mov	dh,bl           ; save it in DH
 42924                                  	; 10/09/2023
 42925                                  	;and	dl,0Fh	; !**!	;
 42926 00003F63 B104                    	mov	cl,4            ;
 42927 00003F65 D2E3                    	shl	bl,cl           ;
 42928 00003F67 08DA                    	or	dl,bl           ;
 42929                                  check_color:
 42930 00003F69 38F5                    	cmp	ch,dh           ; are foreground/background the same?
 42931 00003F6B 7503                    	jne	short set_color	; no
 42932 00003F6D 80F208                  	xor	dl,08h          ; yes, so modify the fgnd intensity
 42933                                  set_color:
 42934 00003F70 8816[7C4C]              	mov	[bMenuColor],dl ;
 42935 00003F74 5A                      	pop	dx              ;
 42936 00003F75 59                      	pop	cx              ;
 42937 00003F76 E9A900                  	jmp	menu_nextitem
 42938                                  
 42939                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 42940                                  ;   above is there simply to alleviate short jump problems)
 42941                                  
 42942                                  menu_found:
 42943 00003F79 C606[864C]01                    mov     byte [bDefBlock],1
 42944                                          ;mov	word [offDefBlock],0
 42945 00003F7E C606[8A4C]FF                    mov     byte [secTimeOut],-1
 42946 00003F83 8026[854C]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 42947                                  	; 10/09/2023
 42948 00003F88 29D2                    	sub	dx,dx
 42949 00003F8A 8916[884C]              	mov	[offDefBlock],dx ; 0
 42950                                  
 42951 00003F8E E85706                          call    skip_opt_line   ; skip to next line
 42952                                  	; 10/09/2023
 42953                                  	;sub	dx,dx		; initialize total block count (0 => none yet)
 42954                                  
 42955                                  ;   Process the menu block now
 42956                                  
 42957                                  menu_process:
 42958 00003F91 E87A06                          call    get_char        ; get first char of current line
 42959 00003F94 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 42960 00003F96 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42961 00003F98 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 42962 00003F9A 7428                            je	short to_menu_getdefault
 42963 00003F9C 3C4F                            cmp     al,CONFIG_SUBMENU
 42964 00003F9E 744D                            je	short menu_item	; go process sub-menu
 42965 00003FA0 3C45                            cmp     al,CONFIG_MENUITEM
 42966 00003FA2 7449                            je	short menu_item	; go process menu item
 42967 00003FA4 3C41                            cmp     al,CONFIG_MENUDEFAULT
 42968 00003FA6 741E                            je	short menu_default ; go process menu default
 42969 00003FA8 3C52                            cmp     al,CONFIG_MENUCOLOR
 42970 00003FAA 749E                            je	short menu_color ; go process menu color
 42971 00003FAC 3C4E                            cmp     al,CONFIG_NUMLOCK
 42972 00003FAE 740F                            je	short menu_numlock ;
 42973 00003FB0 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 42974 00003FB2 746E                            je	short menu_nextitem ;
 42975 00003FB4 E8C307                          call    any_delim       ; allow blank lines and such
 42976 00003FB7 7469                            je	short menu_nextitem ;
 42977 00003FB9 F9                              stc                     ;
 42978 00003FBA E82607                          call    print_error     ; non-MENU command!
 42979 00003FBD EB63                            jmp     short menu_nextitem
 42980                                  menu_numlock:
 42981 00003FBF E8EBFE                          call    set_numlock
 42982 00003FC2 EB5E                            jmp     short menu_nextitem
 42983                                  to_menu_getdefault:
 42984 00003FC4 EB62                            jmp     short menu_getdefault
 42985                                  
 42986                                  ;   Save the offset of the default block name, we'll need it later
 42987                                  
 42988                                  menu_default:
 42989 00003FC6 8936[884C]                      mov     [offDefBlock],si; save address of default block name
 42990 00003FCA 803E[8B4C]00                    cmp     byte [secElapsed],0
 42991 00003FCF 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 42992 00003FD1 E8EA05                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 42993 00003FD4 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 42994 00003FD6 E8FB05                          call    skip_delim      ; something is typed
 42995 00003FD9 7247                            jc	short menu_nextitem ;
 42996 00003FDB 89DE                            mov     si,bx           ;
 42997 00003FDD E80D06                          call    get_number      ; get number (of seconds for timeout)
 42998 00003FE0 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 42999                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 43000 00003FE3 7602                            jna	short timeout_ok ; 01/08/2023
 43001 00003FE5 B35A                    	mov     bl,90           ;  display function can handle)
 43002                                  timeout_ok:                    ;
 43003 00003FE7 881E[8A4C]                      mov     [secTimeOut],bl ;
 43004                                  timeout_skip:
 43005 00003FEB EB35                            jmp     short menu_nextitem
 43006                                  
 43007                                  ;   Verify that this is a valid menu item by searching for the named block
 43008                                  
 43009                                  menu_item:
 43010                                  	;cmp	dl,9	; 04/01/2023
 43011 00003FED 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 43012 00003FF0 7330                            jae	short menu_nextitem ;
 43013 00003FF2 89F7                            mov     di,si           ; DS:DI -> block name to search for
 43014 00003FF4 E83303                          call    srch_block      ;
 43015 00003FF7 7406                            je	short menu_itemfound ;
 43016 00003FF9 F9                              stc                     ;
 43017 00003FFA E8E606                          call    print_error     ; print error and pause
 43018 00003FFD EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 43019                                  
 43020                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 43021                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 43022                                  ;   and CX are unmodified
 43023                                  
 43024                                  menu_itemfound:
 43025 00003FFF 42                              inc     dx              ; otherwise, increment total block count
 43026 00004000 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 43027 00004002 8887[8C4C]                      mov	[abBlockType+bx],al
 43028 00004006 01DB                            add     bx,bx           ; of recorded block names and descriptions
 43029                                  
 43030                                  ;   There should be a description immediately following the block name on
 43031                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 43032                                  ;   description...
 43033                                  
 43034 00004008 89B7[964C]                      mov     [aoffBlockName+bx],si
 43035 0000400C 89B7[AA4C]                      mov     [aoffBlockDesc+bx],si
 43036 00004010 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 43037 00004012 E8A905                          call    skip_token      ;
 43038 00004015 720B                            jc	short menu_nextitem ; hit eol/eof
 43039 00004017 E8BA05                          call    skip_delim      ;
 43040 0000401A 7206                            jc	short menu_nextitem ; hit eol/eof
 43041 0000401C 87DF                            xchg    bx,di           ;
 43042 0000401E 89BF[AA4C]                      mov     [aoffBlockDesc+bx],di
 43043                                  
 43044                                  menu_nextitem:
 43045 00004022 E8C305                          call    skip_opt_line   ;
 43046 00004025 E969FF                          jmp     menu_process    ; go back for more lines
 43047                                  
 43048                                  ;   Display menu items now, after determining which one is default
 43049                                  
 43050                                  menu_getdefault:
 43051 00004028 08D2                            or      dl,dl           ; where there any valid blocks at all?
 43052 0000402A 7505                            jnz	short menu_valid ; yes
 43053 0000402C 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 43054 0000402E E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 43055                                  menu_valid:
 43056 00004031 29DB                            sub     bx,bx           ;
 43057 00004033 8816[874C]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 43058 00004037 8B3E[884C]                      mov     di,[offDefBlock];
 43059 0000403B 09FF                            or      di,di           ; does a default block exist?
 43060 0000403D 741C                            jz	short menu_nodefault ; no
 43061 0000403F 43                              inc     bx              ; yes, walk name table, looking for default
 43062                                  menu_chkdefault:
 43063 00004040 53                              push    bx              ;
 43064 00004041 01DB                            add     bx,bx           ;
 43065 00004043 8BB7[964C]                      mov     si,[aoffBlockName+bx]
 43066 00004047 B98000                          mov     cx,128          ; arbitrary maximum length of a name
 43067 0000404A 1E                              push    ds              ;
 43068 0000404B 06                              push    es              ;
 43069 0000404C 1F                              pop     ds              ;
 43070 0000404D E81A03                          call    comp_names      ; is this block the same as the default?
 43071 00004050 1F                              pop     ds              ;
 43072 00004051 5B                              pop     bx              ;
 43073 00004052 7409                            je	short menu_setdefault ; yes
 43074 00004054 43                              inc     bx              ;
 43075 00004055 3A1E[874C]                      cmp     bl,[bMaxBlock]  ; all done searching?
 43076 00004059 76E5                            jbe	short menu_chkdefault ; not yet
 43077                                  menu_nodefault:
 43078 0000405B B301                            mov     bl,1            ; if no default, force default to #1
 43079                                  menu_setdefault:
 43080 0000405D 881E[864C]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 43081                                  
 43082                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 43083                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 43084                                  ;   supposed to skip menu display and run with the specified default block;
 43085                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 43086                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 43087                                  ;   with no timeout)
 43088                                  
 43089 00004061 803E[8A4C]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 43090 00004066 750A                            jne	short menu_display ; no
 43091 00004068 F606[854C]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 43092 0000406D 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 43093 0000406F E9C700                          jmp     not_topmenu	;
 43094                                  
 43095                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 43096                                  
 43097                                  menu_display:
 43098 00004072 B40F                            mov     ah,0Fh          ; get current video mode
 43099 00004074 CD10                            int     10h             ;
 43100 00004076 B400                            mov     ah,00h          ; just re-select that mode
 43101 00004078 CD10                            int     10h             ;
 43102 0000407A 06                              push    es              ;
 43103 0000407B B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 43104 0000407E 8EC0                            mov     es,ax           ; and save the current (default) video page
 43105 00004080 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 43106 00004084 A3[834C]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 43107 00004087 26A06200                        mov     al,[es:0062h]   ;
 43108 0000408B A2[824C]                        mov     [bCRTPage],al   ;
 43109 0000408E A1[7D4C]                        mov     ax,[bMenuPage]	; select new page for menu
 43110 00004091 CD10                            int     10h             ;
 43111 00004093 B80006                          mov     ax,0600h        ; clear entire screen
 43112 00004096 8A3E[7C4C]                      mov     bh,[bMenuColor] ; using this color
 43113 0000409A 29C9                            sub     cx,cx           ; upper left row/col
 43114                                          ;mov	dl,[es:CRT_Cols] 
 43115 0000409C 268A164A00                      mov	dl,[es:4Ah]
 43116 000040A1 FECA                    	dec     dl              ;
 43117                                          ;mov	dh,[es:CRT_Rows];
 43118 000040A3 268A368400                      mov	dh,[es:84h]
 43119 000040A8 08F6                    	or      dh,dh           ; # of rows valid?
 43120 000040AA 7504                            jnz	short menu_clear ; hopefully
 43121 000040AC 8A36[804C]                      mov     dh,[bLastRow]   ; no, use a default
 43122                                  menu_clear:
 43123 000040B0 CD10                            int     10h             ; clear the screen using the req. attribute
 43124 000040B2 07                              pop     es              ;
 43125 000040B3 8836[804C]                      mov     [bLastRow],dh   ; save DH
 43126 000040B7 BA[7752]                        mov     dx,_$MenuHeader
 43127 000040BA E89709                          call    print           ; cursor now on row 3 (numbered from 0)
 43128                                  
 43129 000040BD F606[814C]01                    test    byte [bDisableUI],1
 43130 000040C2 751F                            jnz     short menu_nostatus
 43131 000040C4 8A3E[7D4C]                      mov     bh,[bMenuPage]  ;
 43132 000040C8 8A36[804C]                      mov     dh,[bLastRow]   ; restore DH
 43133 000040CC B200                            mov     dl,0            ; print the status line on row DH, col 0,
 43134 000040CE B402                            mov     ah,02h          ; now that we can trash the cursor position
 43135 000040D0 CD10                            int     10h             ;
 43136 000040D2 BA[C352]                        mov     dx,_$StatusLine
 43137 000040D5 E87C09                          call    print           ;
 43138 000040D8 B403                            mov     ah,3            ; get cursor position
 43139 000040DA CD10                            int     10h             ;
 43140 000040DC 80EA02                          sub     dl,2            ;
 43141 000040DF 8816[7F4C]                      mov     [bLastCol],dl   ; save column where status char will go
 43142                                  
 43143                                  menu_nostatus:
 43144 000040E3 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 43145                                  menu_disploop:
 43146 000040E6 E8B002                          call    print_item	; print item #BL
 43147 000040E9 43                              inc     bx              ; why "inc bx"? because it's a 1-byte opcode
 43148 000040EA 3A1E[874C]                      cmp     bl,[bMaxBlock]  ; all done?
 43149 000040EE 76F6                            jbe	short menu_disploop ; not yet
 43150                                  
 43151                                  ;   Set cursor position to just below the menu items
 43152                                  
 43153 000040F0 B200                            mov     dl,0            ; select column
 43154 000040F2 88DE                            mov     dh,bl           ;
 43155 000040F4 80C604                          add     dh,4            ; select row below menu
 43156 000040F7 8A3E[7D4C]                      mov     bh,[bMenuPage]  ;
 43157 000040FB B402                            mov     ah,02h          ; set cursor position beneath the block list
 43158 000040FD CD10                            int     10h             ;
 43159                                  
 43160 000040FF BA[B052]                        mov     dx,_$MenuPrmpt
 43161 00004102 E84F09                          call    print           ;
 43162 00004105 E82903                          call    select_item     ; make a selection, return # in BX
 43163 00004108 BA[7050]                        mov     dx,crlfm	
 43164 0000410B E84609                          call    print           ;
 43165 0000410E FF36[814C]                      push    word [bDisableUI]
 43166 00004112 800E[814C]01                    or      byte [bDisableUI],1
 43167 00004117 E86704                          call    show_status     ; clear the status line now
 43168 0000411A 8F06[814C]                      pop     word [bDisableUI]
 43169                                  
 43170                                  ;   Now begins the "re-organization" process...
 43171                                  
 43172                                  menu_autoselect:
 43173 0000411E 83FBFF                          cmp     bx,-1 ; 0FFFFh	; clean boot requested?
 43174 00004121 7508                            jne	short normal_boot ; no
 43175 00004123 E8F105                          call    disable_autoexec; basically, add a /D to the command.com line
 43176                                  menu_abort:
 43177 00004126 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 43178 00004128 E9E400                          jmp	menu_exit	;
 43179                                  
 43180                                  normal_boot:
 43181 0000412B 83FBFE                          cmp     bx,-2 ; 0FFFEh	; back to top-level menu?
 43182 0000412E 7509                            jne	short not_topmenu ; no
 43183 00004130 8B0E[5603]                      mov     cx,[count]      ; yes, start all over
 43184 00004134 29F6                            sub     si,si           ;
 43185 00004136 E9FFFD                          jmp     menu_search
 43186                                  
 43187                                  not_topmenu:
 43188 00004139 80BF[8C4C]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 43189 0000413E 7510                            jne	short not_submenu
 43190 00004140 01DB                            add     bx,bx           ;
 43191 00004142 8BBF[964C]                      mov     di,[aoffBlockName+bx]
 43192 00004146 E8E101                          call    srch_block      ; THIS CANNOT FAIL!
 43193 00004149 89FE                            mov     si,di           ;
 43194 0000414B 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 43195 0000414D E929FE                          jmp     menu_found
 43196                                  
 43197                                  not_submenu:
 43198 00004150 01DB                            add     bx,bx           ; get BX -> name of selected block
 43199 00004152 8B9F[964C]                      mov     bx,[aoffBlockName+bx]
 43200                                  
 43201                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 43202                                  ;   the offset relative to ES of the block name to be processed (along with
 43203                                  ;   all the "common" lines of course)
 43204                                  
 43205                                  no_selection:
 43206 00004156 891E[884C]                      mov     [offDefBlock],bx; save selection
 43207 0000415A 8B0E[5603]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 43208 0000415E 29F6                            sub     si,si           ;
 43209 00004160 1E                              push    ds              ;
 43210 00004161 8E1E[6219]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 43211 00004165 29FF                            sub     di,di           ;
 43212                                  
 43213                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 43214                                  ;
 43215                                  ;   Work our way through the config.sys image again, this time copying
 43216                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 43217                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 43218                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 43219                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 43220                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 43221                                  ;
 43222                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 43223                                  ;   stack we're running on, then we should check it inside copy_block
 43224                                  
 43225                                  copyblock_loop:
 43226 00004167 53                              push    bx              ; save selected block name
 43227 00004168 E82F01                          call    copy_block      ; process (named or common) block
 43228 0000416B 5B                              pop     bx              ;
 43229 0000416C 7232                            jc	short move_config ; hit eof
 43230                                  
 43231                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 43232                                  
 43233                                  copyblock_begin:
 43234                                  
 43235                                  ; 10/09/2023
 43236                                  %if 0
 43237                                          push    ax              ;
 43238                                          push    cx              ;
 43239                                          push    si              ;
 43240                                          push    di              ; always do "common" blocks
 43241                                          mov     di,szCommon
 43242                                          push    ds              ;
 43243                                          push    cs              ;
 43244                                          pop     ds              ;
 43245                                          call    comp_names      ;
 43246                                          pop     ds              ;
 43247                                          pop     di              ;
 43248                                          pop     si              ;
 43249                                          pop     cx              ;
 43250                                          pop     ax              ;
 43251                                          je	short copyblock_check
 43252                                  %endif
 43253                                  	; 10/09/2023
 43254 0000416E 57                      	push	di
 43255 0000416F BF[CB4C]                	mov	di,szCommon	; always do "common" blocks
 43256 00004172 E81602                  	call	comp_names_x	; (comp_names_safe)
 43257 00004175 5F                      	pop	di
 43258 00004176 740F                    	je	short copyblock_check
 43259                                  
 43260 00004178 09DB                            or      bx,bx           ; is there a block name to check?
 43261 0000417A 7414                            jz	short copyblock_skip ; no
 43262 0000417C 57                              push    di              ;
 43263 0000417D 89DF                            mov     di,bx           ; check block against given block name
 43264 0000417F 1E                              push    ds              ;
 43265 00004180 06                              push    es              ;
 43266 00004181 1F                              pop     ds              ;
 43267 00004182 E8E501                          call    comp_names      ; is this the block we really want to do?
 43268 00004185 1F                              pop     ds              ;
 43269 00004186 5F                              pop     di              ;
 43270                                  copyblock_check:
 43271 00004187 7217                            jc	short move_config ; hit eof
 43272 00004189 7505                            jne	short copyblock_skip ;
 43273 0000418B E85A04                          call    skip_opt_line   ;
 43274 0000418E EBD7                            jmp	short copyblock_loop
 43275                                  
 43276                                  copyblock_skip:                 ;
 43277 00004190 E85504                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 43278 00004193 E87804                          call    get_char        ;
 43279 00004196 7208                            jc	short move_config ; hit eof
 43280 00004198 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 43281 0000419A 3C5B                            cmp     al,CONFIG_BEGIN ;
 43282 0000419C 74D0                            je	short copyblock_begin
 43283 0000419E EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 43284                                  ;
 43285                                  ;   To create as little risk to the rest of SysInit as little as possible,
 43286                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 43287                                  ;   copy the new config.sys image to "confbot"
 43288                                  ;
 43289                                  move_config:
 43290 000041A0 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 43291 000041A2 51                              push    cx              ;
 43292                                  ;
 43293                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 43294                                  ;   since the configuration name only currently exists in the "confbot" area
 43295                                  ;
 43296                                   	;mov	cx,7
 43297 000041A3 B90700                  	mov     cx,szMenu-szBoot-1
 43298 000041A6 BE[BE4C]                        mov     si,szBoot	; first copy the CONFIG= part
 43299 000041A9 47                              inc     di              ; skip a byte, in case absolutely nothing
 43300                                                                  ; was copied to the workspace, because we always
 43301                                                                  ; zero the first byte of the workspace (below)
 43302                                  copy_boot: 
 43303                                  	;lods    byte ptr cs:[si];
 43304 000041AA 2E                              cs
 43305 000041AB AC                      	lodsb
 43306 000041AC 8805                    	mov     [di],al         ;
 43307 000041AE 47                              inc     di              ;
 43308 000041AF E2F9                            loop    copy_boot       ;
 43309                                  
 43310 000041B1 06                              push    es              ; then copy the configuration name
 43311                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 43312                                  	; 04/01/2023
 43313 000041B2 B179                    	mov	cl,128-7
 43314 000041B4 2E8B36[884C]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 43315 000041B9 09F6                            or      si,si           ; valid?
 43316 000041BB 7505                            jnz	short l1	; yes
 43317 000041BD 0E                              push    cs              ;
 43318 000041BE 07                              pop     es              ;
 43319 000041BF BE[CB4C]                        mov     si,szCommon
 43320 000041C2 268A04                  l1:     mov     al,[es:si]      ;
 43321 000041C5 E8B205                          call    any_delim       ;
 43322 000041C8 7406                            je	short l2	;
 43323 000041CA 8805                            mov     [di],al         ;
 43324 000041CC 46                              inc     si              ;
 43325 000041CD 47                              inc     di              ;
 43326 000041CE E2F2                            loop    l1              ;
 43327 000041D0 C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 43328 000041D3 07                              pop     es              ;
 43329                                  
 43330                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 43331                                  
 43332 000041D4 29FF                            sub     di,di           ;
 43333 000041D6 2E893E[6019]                    mov     [cs:config_envlen],di
 43334 000041DB 29F6                            sub     si,si           ;
 43335 000041DD 59                              pop     cx              ; recover the size of "config_wrkseg"
 43336                                  
 43337 000041DE 51                              push    cx              ;
 43338 000041DF F3A4                            rep     movsb           ; moved!
 43339 000041E1 59                              pop     cx              ;
 43340 000041E2 8CD8                            mov     ax,ds           ;
 43341 000041E4 1F                              pop     ds              ;
 43342                                  
 43343                                  ;   Now that the config_wrkseg is available once again, we shall
 43344                                  ;   use it to create an environment. The first thing to go in will be
 43345                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 43346                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 43347                                  ;   is empty.
 43348                                  
 43349 000041E5 06                              push    es              ;
 43350 000041E6 8EC0                            mov     es,ax           ;
 43351 000041E8 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 43352 000041E9 26C606000000                    mov     byte [es:0],0	;empty the environment block
 43353 000041EF E82600                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 43354 000041F2 07                              pop     es
 43355                                  
 43356                                  ;   Before returning, restore the default video page setting but do NOT
 43357                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 43358                                  ;   displayed on a different page, then it's because we don't want to see
 43359                                  ;   all the device driver/TSR goop (which goes to the default page)
 43360                                  
 43361                                  menu_done:
 43362 000041F3 803E[7D4C]00                    cmp     byte [bMenuPage],0
 43363 000041F8 7415                            je	short menu_exit	;
 43364 000041FA 06                              push    es              ;
 43365 000041FB B84000                          mov     ax,40h          ;
 43366 000041FE 8EC0                            mov     es,ax           ;
 43367 00004200 A1[834C]                        mov     ax,[wCRTStart]  ;
 43368 00004203 26A34E00                        mov     [es:004Eh],ax   ;
 43369 00004207 A0[824C]                        mov     al,[bCRTPage]   ;
 43370 0000420A 26A26200                        mov     [es:0062h],al   ;
 43371 0000420E 07                              pop     es              ;
 43372                                  menu_exit:
 43373 0000420F 890E[5603]                      mov     [count],cx      ; set new counts
 43374 00004213 890E[5803]                      mov     [org_count],cx  ;
 43375                                          ; 10/09/2023 (*) - Erdogan Tan
 43376                                  	; MSDOS 6.21 IO.SYS - SYSINIT:46D3h
 43377                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:491Ah
 43378                                  	;sub	si,si           ; always return ES:SI pointing to config.sys
 43379 00004217 C3                      	retn
 43380                                  
 43381                                  ; (*) NOTE: MSDOS 6.0 source code (SYSINIT2.ASM) contains 'sub si,si' at this
 43382                                  ;	position (then 'retn' just after it)
 43383                                  ;	but MSDOS 6.21 and PCDOS 7.1 SYSINITs contain only 'retn' here.
 43384                                  
 43385                                  ;----------------------------------------------------------------------------
 43386                                  ;
 43387                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 43388                                  ;
 43389                                  ;   INPUT
 43390                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 43391                                  ;
 43392                                  ;   OUTPUT
 43393                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 43394                                  ;       carry set if error (eg, missing =); clear otherwise
 43395                                  ;
 43396                                  ;   OTHER REGS USED
 43397                                  ;       None
 43398                                  ;
 43399                                  ;   NOTES
 43400                                  ;       None
 43401                                  ;
 43402                                  ;   HISTORY
 43403                                  ;       Created 29-Mar-1992 by JeffPar
 43404                                  ;
 43405                                  ;----------------------------------------------------------------------------
 43406                                  
 43407                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43408                                  	; (SYSINIT:46D4h)
 43409                                  
 43410                                  copy_envvar:
 43411 00004218 51                              push    cx              ;
 43412 00004219 56                              push    si              ;
 43413 0000421A 1E                              push    ds              ;
 43414 0000421B 06                              push    es              ;
 43415 0000421C 06                              push    es              ;
 43416 0000421D 8E06[6219]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 43417 00004221 1F                              pop     ds                 ; DS:SI to point to envvar
 43418                                  
 43419                                  ;   Have to calculate the length of the variable name (and if we hit
 43420                                  ;   the end of the line before we hit '=', then it's curtains for this
 43421                                  ;   config.sys line)
 43422                                  ;
 43423                                  ;   The check for NULL is important because copy_envvar is also used to copy
 43424                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 43425                                  ;   menu block existed (in order to prevent the creation of an environment)
 43426                                  
 43427 00004222 29C9                            sub     cx,cx           ;
 43428                                  copy_varlen:                    ;
 43429 00004224 AC                              lodsb                   ;
 43430 00004225 08C0                            or      al,al           ; NULL?
 43431                                          ;stc	; 10/09/2023 (x)
 43432 00004227 746B                            jz	short copy_envexit ; yes, abort
 43433 00004229 3C0D                            cmp     al,cr           ;
 43434                                          ;stc	; 10/09/2023 (x)
 43435 0000422B 7467                            je	short copy_envexit
 43436 0000422D 3C0A                            cmp     al,lf           ;
 43437                                          ;stc	; 10/09/2023 (x)
 43438 0000422F 7463                            je	short copy_envexit
 43439 00004231 41                              inc     cx              ;
 43440 00004232 3C3D                            cmp     al,'='          ;
 43441 00004234 75EE                            jne	short copy_varlen
 43442 00004236 B000                            mov     al,0            ;
 43443 00004238 8A24                            mov     ah,[si]         ; save char after '='
 43444 0000423A 29CE                            sub     si,cx           ; back up to given varname
 43445 0000423C 49                              dec     cx              ; CX == # of bytes in varname
 43446 0000423D 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 43447                                  copy_varsrch:
 43448 0000423F 263805                          cmp     byte [es:di],al
 43449 00004242 7425                            je	short copy_envprep ; search failed, just copy var
 43450 00004244 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 43451 00004246 51                              push    cx              ;
 43452 00004247 56                              push    si              ;
 43453 00004248 F3A6                            repe    cmpsb           ;
 43454 0000424A 5E                              pop     si              ;
 43455 0000424B 59                              pop     cx              ;
 43456 0000424C 7531                            jne	short copy_varnext ; no match, skip to next varname
 43457 0000424E 26803D3D                        cmp     byte [es:di],'='
 43458 00004252 752B                            jne     short copy_varnext ; no match, there's more characters
 43459                                  
 43460                                  ;   Previous occurrence of variable has been found; determine the
 43461                                  ;   entire length and then destroy it
 43462                                  
 43463 00004254 B9FFFF                          mov     cx,-1           ;
 43464 00004257 F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 43465 00004259 56                              push    si              ;
 43466 0000425A 89FE                            mov     si,di           ;
 43467 0000425C 89DF                            mov     di,bx           ;
 43468 0000425E 2E8B0E[6019]                    mov     cx,[cs:config_envlen]
 43469 00004263 29F1                            sub     cx,si           ; destroy variable now
 43470                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 43471                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 43472                                  
 43473 00004265 F3                      	rep	; 0F3h
 43474 00004266 26                      	es	; 26h
 43475 00004267 A4                      	movsb	; 0A4h
 43476                                  
 43477 00004268 5E                      	pop     si
 43478                                  copy_envprep:
 43479 00004269 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 43480 0000426C 741D                            je	short copy_envdel ; then just exit with variable deleted
 43481 0000426E 80FC0A                          cmp     ah,lf           ;
 43482 00004271 7418                            je	short copy_envdel
 43483                                          ;jmp	short copy_envloop
 43484                                  	; 04/01/2023
 43485                                  copy_envloop:                  ;
 43486 00004273 AC                      	lodsb                   ;
 43487 00004274 3C0D                    	cmp	al,cr           ;
 43488 00004276 7410                    	je	short copy_envdone
 43489 00004278 3C0A                    	cmp	al,lf           ;
 43490 0000427A 740C                    	je	short copy_envdone
 43491 0000427C AA                      	stosb                   ;
 43492 0000427D EBF4                    	jmp	short copy_envloop
 43493                                  
 43494                                  copy_varnext:                   ;
 43495 0000427F 51                              push    cx              ;
 43496 00004280 B9FFFF                          mov     cx,-1           ;
 43497 00004283 F2AE                            repne   scasb           ;
 43498 00004285 59                              pop     cx              ;
 43499 00004286 EBB7                            jmp	short copy_varsrch
 43500                                  
 43501                                  	; 04/01/2023
 43502                                  ;copy_envloop:                  ;
 43503                                  ;	lodsb                   ;
 43504                                  ;	cmp	al,cr           ;
 43505                                  ;	je	short copy_envdone
 43506                                  ;	cmp	al,lf           ;
 43507                                  ;	je	short copy_envdone
 43508                                  ;	stosb                   ;
 43509                                  ;	jmp	short copy_envloop
 43510                                  
 43511                                  copy_envdone:                   ;
 43512 00004288 28C0                            sub     al,al           ; do SUB to clear carry as well
 43513 0000428A AA                              stosb                   ; always null-terminate these puppies
 43514                                  copy_envdel:                    ;
 43515 0000428B 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 43516 0000428E 2E893E[6019]                    mov     [cs:config_envlen],di
 43517                                  	; 10/09/2023 (x) - Erdogan Tan
 43518 00004293 F9                      	stc ; in order to clear carry flag via cmc (compact code trick!)
 43519                                  copy_envexit:                   ;
 43520 00004294 F5                      	cmc ; (x) ; reverse carry flag status (je -> cf=1)
 43521 00004295 07                              pop     es              ;
 43522 00004296 1F                              pop     ds              ;
 43523 00004297 5E                              pop     si              ;
 43524 00004298 59                              pop     cx              ;
 43525                                  
 43526                                  copy_done:	; 18/12/2022
 43527 00004299 C3                              retn
 43528                                  
 43529                                  ;----------------------------------------------------------------------------
 43530                                  ;
 43531                                  ;   copy_block:  copy the current block to the new config.sys workspace
 43532                                  ;
 43533                                  ;   INPUT
 43534                                  ;       CX == remaining bytes in "organized" config.sys memory image
 43535                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 43536                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 43537                                  ;             config.sys image) where the current block is to be copied
 43538                                  ;
 43539                                  ;   OUTPUT
 43540                                  ;       Same as above
 43541                                  ;       AL also equals the last character read from the organized image
 43542                                  ;
 43543                                  ;   OTHER REGS USED
 43544                                  ;       All
 43545                                  ;
 43546                                  ;   NOTES
 43547                                  ;       None
 43548                                  ;
 43549                                  ;   HISTORY
 43550                                  ;       Created 16-Mar-1992 by JeffPar
 43551                                  ;
 43552                                  ;----------------------------------------------------------------------------
 43553                                  
 43554                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43555                                  	; (SYSINIT:4759h)
 43556                                  
 43557                                  copy_block:
 43558 0000429A E87103                          call    get_char        ; check for include
 43559 0000429D 72FA                            jc	short copy_done	;
 43560 0000429F 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 43561 000042A1 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 43562 000042A3 74F4                            je	short copy_done ;
 43563                                  
 43564 000042A5 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 43565 000042A7 88E0                            mov     al,ah           ; AL == the original line code
 43566 000042A9 753A                            jne	short copy_line	; not an "include" line
 43567                                  
 43568                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 43569                                  ;   never try to include the block again (no infinite include loops please),
 43570                                  ;   then search for the named block and call copy_block again.
 43571                                  
 43572 000042AB 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 43573 000042B0 57                              push    di              ;
 43574                                  
 43575 000042B1 BF[C64C]                        mov     di,szMenu
 43576 000042B4 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 43577 000042B7 7426                            je	short copy_skip	;
 43578                                  
 43579 000042B9 BF[CB4C]                        mov     di,szCommon
 43580 000042BC E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 43581 000042BF 741E                            je	short copy_skip	;
 43582                                  
 43583 000042C1 89F7                            mov     di,si           ; try to find the block
 43584 000042C3 E86400                          call    srch_block      ;
 43585 000042C6 89FA                            mov     dx,di           ;
 43586                                  	; 10/09/2023
 43587                                  	;pop    di              ;
 43588 000042C8 7514                            jne	short copy_error ; no such block
 43589 000042CA 5F                      	pop	di  ; 10/09/2023
 43590 000042CB 51                              push    cx              ;
 43591 000042CC 89D9                            mov     cx,bx           ;
 43592 000042CE 56                              push    si              ;
 43593 000042CF 4A                              dec     dx              ;
 43594 000042D0 89D6                            mov     si,dx           ;
 43595 000042D2 E80E03                          call    skip_line       ; skip the rest of the "block name" line
 43596 000042D5 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 43597 000042D8 5E                              pop     si              ;
 43598 000042D9 59                              pop     cx              ;
 43599 000042DA 28C0                            sub     al,al           ; force skip_opt_line to skip...
 43600 000042DC EB2B                            jmp     short copy_nextline
 43601                                  
 43602                                  copy_error:
 43603                                  	; 10/09/2023
 43604 000042DE F8                      	clc
 43605                                  copy_skip:
 43606 000042DF 5F                              pop     di
 43607                                  ;copy_error:
 43608                                  	; 10/09/2023 (cf=0)
 43609                                  	;clc                    ;
 43610 000042E0 E80004                          call    print_error     ; note that carry is clear, no pause
 43611 000042E3 EB24                            jmp     short copy_nextline
 43612                                  
 43613                                  ;   Copy the line at ES:SI to the current location at DS:DI
 43614                                  
 43615                                  copy_line:
 43616 000042E5 8805                            mov     [di],al         ;
 43617 000042E7 47                              inc     di              ;
 43618 000042E8 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 43619 000042EA 721D                            jb	short copy_nextline ; no
 43620 000042EC 2E803E[6519]00                  cmp     byte [cs:config_multi],0
 43621 000042F2 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 43622 000042F4 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 43623 000042F7 891D                            mov     [di],bx         ; stash it immediately following the line code
 43624 000042F9 47                              inc     di              ;
 43625 000042FA 47                              inc     di              ;
 43626 000042FB EB08                            jmp     short copy_next ;
 43627                                  copy_loop:                      ;
 43628 000042FD E80E03                          call    get_char        ;
 43629 00004300 7297                            jc	short copy_done ; end of file
 43630 00004302 8805                            mov     [di],al         ;
 43631 00004304 47                              inc     di              ;
 43632                                  copy_next:
 43633 00004305 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 43634 00004307 75F4                            jne	short copy_loop	; nope
 43635                                  
 43636                                  copy_nextline:
 43637 00004309 E8DC02                          call    skip_opt_line   ;
 43638 0000430C EB8C                            jmp     short copy_block
 43639                                  
 43640                                  	; 18/12/2022
 43641                                  ;copy_done:
 43642                                          ;retn
 43643                                  
 43644                                  ;----------------------------------------------------------------------------
 43645                                  ;
 43646                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 43647                                  ;
 43648                                  ;   INPUT
 43649                                  ;    ES:SI -> some line in the config.sys memory image
 43650                                  ;
 43651                                  ;   OUTPUT
 43652                                  ;       BX == line # (relative to 1)
 43653                                  ;
 43654                                  ;   OTHER REGS USED
 43655                                  ;       DX
 43656                                  ;
 43657                                  ;   NOTES
 43658                                  ;       None
 43659                                  ;
 43660                                  ;   HISTORY
 43661                                  ;       Created 16-Mar-1992 by JeffPar
 43662                                  ;
 43663                                  ;----------------------------------------------------------------------------
 43664                                  
 43665                                  get_linenum:
 43666 0000430E 50                              push    ax              ;
 43667 0000430F 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 43668 00004311 51                              push    cx              ;
 43669 00004312 89F2                            mov     dx,si           ; DX == the offset we're looking for
 43670 00004314 56                              push    si              ;
 43671 00004315 2E8B0E[5603]                    mov     cx,[cs:count]   ;
 43672 0000431A 29F6                            sub     si,si           ; prepare to scan entire file
 43673                                  get_linenum_loop:               ;
 43674 0000431C E8C402                          call    skip_line       ;
 43675 0000431F 7205                            jc	short get_linenum_done
 43676 00004321 43                              inc     bx              ;
 43677 00004322 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 43678 00004324 72F6                            jb	short get_linenum_loop ; no
 43679                                  get_linenum_done:               ;
 43680 00004326 5E                              pop     si              ;
 43681 00004327 59                              pop     cx              ;
 43682 00004328 58                              pop     ax              ;
 43683 00004329 C3                              retn
 43684                                  
 43685                                  ;----------------------------------------------------------------------------
 43686                                  ;
 43687                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 43688                                  ;
 43689                                  ;   INPUT
 43690                                  ;       ES -> config.sys image
 43691                                  ;    ES:DI -> block name to find
 43692                                  ;
 43693                                  ;   OUTPUT
 43694                                  ;       ZF flag set, if found
 43695                                  ;    ES:DI -> just past the name in the block heading, if found
 43696                                  ;       BX == # bytes remaining from that point, if found
 43697                                  ;
 43698                                  ;   OTHER REGS USED
 43699                                  ;       None
 43700                                  ;
 43701                                  ;   NOTES
 43702                                  ;       This differs from "find_block" in that it searches the ENTIRE
 43703                                  ;       config.sys image, not merely the remaining portion, and that it
 43704                                  ;       takes a pointer to block name that is *elsewhere* in the image
 43705                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 43706                                  ;
 43707                                  ;   HISTORY
 43708                                  ;       Created 16-Mar-1992 by JeffPar
 43709                                  ;
 43710                                  ;----------------------------------------------------------------------------
 43711                                  
 43712                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 43713 0000432A 50                              push    ax              ;
 43714 0000432B 51                              push    cx              ;
 43715 0000432C 2E8B0E[5603]                    mov     cx,[cs:count]   ;
 43716 00004331 56                              push    si              ;
 43717 00004332 29F6                            sub     si,si           ;
 43718 00004334 1E                              push    ds              ;
 43719 00004335 06                              push    es              ;
 43720 00004336 1F                              pop     ds              ;
 43721 00004337 E80900                          call    find_block      ;
 43722 0000433A 89F7                            mov     di,si           ;
 43723 0000433C 89CB                            mov     bx,cx           ;
 43724 0000433E 1F                              pop     ds              ;
 43725 0000433F 5E                              pop     si              ;
 43726 00004340 59                              pop     cx              ;
 43727 00004341 58                              pop     ax              ;
 43728                                  find_exit: ; 16/04/2019
 43729 00004342 C3                              retn			;
 43730                                  
 43731                                  ;----------------------------------------------------------------------------
 43732                                  ;
 43733                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 43734                                  ;
 43735                                  ;   INPUT
 43736                                  ;    DS:DI -> block name to find
 43737                                  ;    ES:SI -> remainder of config.sys image
 43738                                  ;       CX == remaining size of config.sys image
 43739                                  ;
 43740                                  ;   OUTPUT
 43741                                  ;       ZF flag set, if found (also, CF set if EOF)
 43742                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 43743                                  ;       CX == # bytes remaining from that point
 43744                                  ;
 43745                                  ;   OTHER REGS USED
 43746                                  ;       AX
 43747                                  ;
 43748                                  ;   NOTES
 43749                                  ;       This differs from "srch_block" in that it searches only the
 43750                                  ;       remaining portion of the config.sys image and leaves SI and CX
 43751                                  ;       pointing to where the search left off, and that it takes a pointer
 43752                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 43753                                  ;
 43754                                  ;   HISTORY
 43755                                  ;       Created 16-Mar-1992 by JeffPar
 43756                                  ;
 43757                                  ;----------------------------------------------------------------------------
 43758                                  
 43759                                  find_block:
 43760 00004343 E8C802                          call    get_char        ; get line code
 43761 00004346 72FA                            jc	short find_exit	; end of file
 43762 00004348 247F                            and     al,~CONFIG_OPTION_QUERY
 43763 0000434A 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 43764 0000434C 740C                            je	short check_line ; no
 43765 0000434E 3C4A                            cmp     al,CONFIG_INCLUDE
 43766 00004350 7513                            jne	short next_line	;
 43767 00004352 2E800E[6519]01                  or	byte [cs:config_multi],1
 43768 00004358 EB0B                            jmp     short next_line ;
 43769                                  check_line:
 43770 0000435A 2E800E[6519]01                  or      byte [cs:config_multi],1
 43771 00004360 E80700                          call    comp_names      ; compare block names
 43772 00004363 76DD                            jbe	short find_exit	; end of file, or names matched
 43773                                  next_line:
 43774 00004365 E88002                          call    skip_opt_line   ; no, so skip to next line
 43775 00004368 EBD9                            jmp	short find_block  ;
 43776                                  ;find_exit:
 43777                                  ;	retn
 43778                                  
 43779                                  ;----------------------------------------------------------------------------
 43780                                  ;
 43781                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 43782                                  ;
 43783                                  ;   INPUT
 43784                                  ;    DS:DI -> keyword to compare
 43785                                  ;    ES:SI -> position in config.sys
 43786                                  ;       CX == remaining bytes in config.sys
 43787                                  ;
 43788                                  ;   OUTPUT
 43789                                  ;       ZF flag set, if match (also, CF set if EOF)
 43790                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 43791                                  ;       CX == # bytes remaining from that point
 43792                                  ;
 43793                                  ;   OTHER REGS USED
 43794                                  ;       AX
 43795                                  ;
 43796                                  ;   NOTES
 43797                                  ;       None
 43798                                  ;
 43799                                  ;   HISTORY
 43800                                  ;       Created 16-Mar-1992 by JeffPar
 43801                                  ;
 43802                                  ;----------------------------------------------------------------------------
 43803                                  
 43804                                  comp_names:
 43805 0000436A 57                              push    di              ;
 43806                                  comp_loop:                      ;
 43807 0000436B E8A002                          call    get_char        ;
 43808 0000436E 7210                            jc	short comp_exit	;
 43809 00004370 E80704                          call    any_delim       ; is next character a delimiter?
 43810 00004373 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 43811 00004375 740B                            je	short comp_almost ; yes, it *could* be a match
 43812 00004377 47                              inc     di              ;
 43813 00004378 25DFDF                          and     ax,~2020h ; 0DFDFh 
 43814                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 43815 0000437B 38E0                            cmp     al,ah           ; match?
 43816 0000437D 74EC                            je	short comp_loop ; yes, keep looking at the characters
 43817 0000437F F8                              clc                     ; prevent erroneous eof indication: clear carry
 43818                                  comp_exit:                      ;
 43819 00004380 5F                              pop     di              ;
 43820 00004381 C3                              retn			;
 43821                                  comp_almost:                    ;
 43822 00004382 86C4                            xchg    al,ah           ; we don't know for sure if it's a match
 43823 00004384 E8F303                          call    any_delim       ; until we verify that the second string has
 43824 00004387 86C4                            xchg    al,ah           ; been exhausted also...
 43825 00004389 EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 43826                                  
 43827                                  ;----------------------------------------------------------------------------
 43828                                  
 43829                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43830                                  comp_names_x:
 43831                                  	;
 43832                                  comp_names_safe:
 43833 0000438B 50                              push    ax
 43834 0000438C 51                              push    cx
 43835 0000438D 56                              push	si
 43836 0000438E 1E                              push    ds
 43837 0000438F 0E                              push    cs
 43838 00004390 1F                              pop     ds
 43839 00004391 E8D6FF                          call    comp_names
 43840 00004394 1F                              pop     ds
 43841 00004395 5E                      	pop	si
 43842 00004396 59                              pop     cx
 43843 00004397 58                              pop     ax
 43844 00004398 C3                              retn
 43845                                  
 43846                                  ;----------------------------------------------------------------------------
 43847                                  ;
 43848                                  ;   print_item:  display menu item #BL
 43849                                  ;
 43850                                  ;   INPUT
 43851                                  ;       BL == menu item # to display
 43852                                  ;
 43853                                  ;   OUTPUT
 43854                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 43855                                  ;
 43856                                  ;   OTHER REGS USED
 43857                                  ;       None
 43858                                  ;
 43859                                  ;   NOTES
 43860                                  ;       This function saves/restores the current cursor position, so you
 43861                                  ;       needn't worry about it.
 43862                                  ;
 43863                                  ;   HISTORY
 43864                                  ;       Created 16-Mar-1992 by JeffPar
 43865                                  ;
 43866                                  ;----------------------------------------------------------------------------
 43867                                  
 43868                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43869                                  	; (SYSINIT:485Ah)
 43870                                  
 43871                                  print_item:		; prints menu item #BL (1 to N)
 43872 00004399 50                              push    ax              ;
 43873 0000439A 53                              push    bx              ;
 43874 0000439B 51                              push    cx              ;
 43875 0000439C 52                              push    dx              ;
 43876 0000439D 56                              push    si              ;
 43877 0000439E B403                            mov     ah,03h          ; get cursor position
 43878 000043A0 8A3E[7D4C]                      mov     bh,[bMenuPage]  ; always page zero
 43879 000043A4 CD10                            int     10h             ; DH/DL = row/column
 43880 000043A6 52                              push    dx              ; save it
 43881 000043A7 B402                            mov     ah,02h          ; set cursor position
 43882 000043A9 88DE                            mov     dh,bl           ;
 43883 000043AB 80C603                          add     dh,3            ;
 43884 000043AE B205                            mov     dl,5            ;
 43885 000043B0 CD10                            int     10h             ; set cursor position for correct row/col
 43886 000043B2 88D8                            mov     al,bl           ;
 43887 000043B4 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 43888 000043B6 8A26[7C4C]                      mov     ah,[bMenuColor] ; normal attribute
 43889 000043BA 3A1E[864C]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 43890 000043BE 7510                            jne	short print_other ; no
 43891 000043C0 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 43892 000043C3 88E5                            mov     ch,ah           ;
 43893 000043C5 B104                            mov     cl,4            ;
 43894 000043C7 D2C5                            rol     ch,cl           ;
 43895 000043C9 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 43896 000043CB 7503                            jne	short print_other ; no
 43897 000043CD 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 43898                                  print_other:                    ;
 43899 000043D0 B700                            mov     bh,0            ;
 43900 000043D2 01DB                            add     bx,bx           ;
 43901 000043D4 8BBF[AA4C]                      mov     di,[aoffBlockDesc+bx]
 43902 000043D8 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 43903 000043DA 8A3E[7D4C]                      mov     bh,[bMenuPage]  ; get correct video page #
 43904 000043DE B409                            mov     ah,09h          ; write char/attr
 43905 000043E0 B90100                          mov     cx,1            ;
 43906 000043E3 CD10                            int     10h             ;
 43907 000043E5 FEC2                            inc     dl              ; increment column
 43908 000043E7 B402                            mov     ah,02h          ;
 43909 000043E9 CD10                            int     10h             ;
 43910                                          ;mov	ax,0900h+'.'    ;
 43911 000043EB B82E09                          mov	ax,092Eh
 43912 000043EE CD10                    	int     10h             ; display '.'
 43913 000043F0 FEC2                            inc     dl              ; increment column
 43914 000043F2 B402                            mov     ah,02h          ;
 43915 000043F4 CD10                            int     10h             ;
 43916                                          ;mov	ax,0900h+' '    ;
 43917 000043F6 B82009                          mov	ax,0920h
 43918 000043F9 CD10                    	int     10h             ; display ' '
 43919 000043FB FEC2                            inc     dl              ; increment column
 43920 000043FD B402                            mov     ah,02h          ;
 43921 000043FF CD10                            int     10h             ;
 43922 00004401 06                              push    es              ;
 43923                                  print_loop:                     ;
 43924 00004402 268A05                          mov     al,[es:di]	; get a character of the description
 43925 00004405 47                              inc     di              ;
 43926 00004406 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 43927 00004408 7502                            jne	short print_nontab ;
 43928 0000440A B020                            mov     al,' '          ;
 43929                                  print_nontab:                   ;
 43930 0000440C 3C20                            cmp     al,' '          ;
 43931 0000440E 7215                            jb	short print_done ; stop at the 1st character < space
 43932 00004410 3C24                            cmp     al,'$'          ;
 43933 00004412 7411                            je	short print_done ; also stop on $
 43934 00004414 B409                            mov     ah,09h          ; display function #
 43935 00004416 CD10                            int     10h             ;
 43936 00004418 FEC2                            inc     dl              ; increment column
 43937 0000441A 80FA4E                          cmp     dl,78           ; far enough?
 43938 0000441D 7306                            jae	short print_done ; yes
 43939 0000441F B402                            mov     ah,02h          ;
 43940 00004421 CD10                            int     10h             ;
 43941 00004423 EBDD                            jmp	short  print_loop
 43942                                  print_done:                     ;
 43943 00004425 07                              pop     es              ;
 43944 00004426 5A                              pop     dx              ;
 43945 00004427 B402                            mov     ah,02h          ;
 43946 00004429 CD10                            int     10h             ; restore previous row/col
 43947 0000442B 5E                              pop     si              ;
 43948 0000442C 5A                              pop     dx              ;
 43949 0000442D 59                              pop     cx              ;
 43950 0000442E 5B                              pop     bx              ;
 43951 0000442F 58                              pop     ax              ;
 43952 00004430 C3                              retn			;
 43953                                  
 43954                                  ;----------------------------------------------------------------------------
 43955                                  ;
 43956                                  ;   select_item:  wait for user to select menu item, with time-out
 43957                                  ;
 43958                                  ;   INPUT
 43959                                  ;       None
 43960                                  ;
 43961                                  ;   OUTPUT
 43962                                  ;       BX == menu item # (1-N), or -1 for clean boot
 43963                                  ;       Selected menu item highlighted
 43964                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 43965                                  ;
 43966                                  ;   OTHER REGS USED
 43967                                  ;       None
 43968                                  ;
 43969                                  ;   NOTES
 43970                                  ;       None
 43971                                  ;
 43972                                  ;   HISTORY
 43973                                  ;       Created 16-Mar-1992 by JeffPar
 43974                                  ;
 43975                                  ;----------------------------------------------------------------------------
 43976                                  
 43977                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 43978 00004431 8A1E[864C]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 43979 00004435 88D8                            mov     al,bl           ;
 43980 00004437 E83701                          call    disp_num        ;
 43981 0000443A E84401                          call    show_status     ; display current interactive status
 43982 0000443D 803E[8A4C]FF                    cmp     byte [secTimeOut],-1
 43983 00004442 7452                            je	short input_key	; no time-out, just go to input
 43984 00004444 B42C                            mov     ah,GET_TIME ; 2Ch
 43985 00004446 CD21                            int     21h             ;
 43986 00004448 88F7                            mov     bh,dh           ; BH = initial # of seconds
 43987                                  check_time:
 43988 0000444A A0[8A4C]                        mov     al,[secTimeOut] ;
 43989 0000444D 2A06[8B4C]                      sub     al,[secElapsed] ;
 43990 00004451 730D                            jae	short show_time	;
 43991 00004453 800E[854C]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 43992 00004458 C606[8B4C]00                    mov     byte [secElapsed],0
 43993 0000445D E9F600                          jmp	select_done	; time's up!
 43994                                  show_time:
 43995 00004460 53                              push    bx              ;
 43996 00004461 88C3                            mov     bl,al           ; save # in BL
 43997 00004463 8A3E[7D4C]                      mov     bh,[bMenuPage]  ;
 43998 00004467 B403                            mov     ah,03h          ; get cursor position
 43999 00004469 CD10                            int     10h             ;
 44000 0000446B 52                              push    dx              ;
 44001 0000446C 80C208                  	add	dl,8		; move cursor to the right
 44002 0000446F B402                            mov     ah,02h          ; set cursor position
 44003 00004471 CD10                            int     10h             ;
 44004 00004473 BA[2753]                        mov     dx,_$TimeOut
 44005 00004476 E8DB05                          call    print           ; print the "Time remaining: " prompt
 44006 00004479 88D8                            mov     al,bl           ; recover # from BL
 44007 0000447B 98                              cbw                     ; this works because AL is always <= 90
 44008 0000447C B10A                            mov     cl,10           ;
 44009 0000447E F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 44010 00004480 88E1                            mov     cl,ah           ;
 44011 00004482 0430                            add     al,'0'          ;
 44012 00004484 B40E                            mov     ah,0Eh          ;
 44013 00004486 CD10                            int     10h             ; write TTY tens digit
 44014 00004488 88C8                            mov     al,cl           ;
 44015 0000448A 0430                            add     al,'0'          ;
 44016 0000448C B40E                            mov     ah,0Eh          ;
 44017 0000448E CD10                            int     10h             ; write TTY ones digit
 44018 00004490 5A                              pop     dx
 44019 00004491 B402                            mov     ah,02h          ; set cursor position back to where it was
 44020 00004493 CD10                            int     10h             ;
 44021 00004495 5B                              pop     bx              ;
 44022                                  input_key:
 44023 00004496 B406                            mov     ah,RAW_CON_IO ; 6
 44024 00004498 B2FF                            mov     dl,0FFh         ; input request
 44025 0000449A CD21                            int     21h             ;
 44026 0000449C 751F                            jnz	short got_key	;
 44027 0000449E 803E[8A4C]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 44028 000044A3 74F1                            je	short input_key	; no, just go back to input
 44029 000044A5 B42C                            mov     ah,GET_TIME     ;
 44030 000044A7 CD21                            int     21h             ; DH = seconds
 44031 000044A9 88F4                            mov     ah,dh           ;
 44032 000044AB 28FE                            sub     dh,bh           ; should generally be zero or one
 44033 000044AD 88E7                            mov     bh,ah           ;
 44034 000044AF 7302                            jnc	short got_time	;
 44035 000044B1 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 44036                                  got_time:
 44037 000044B3 08F6                            or      dh,dh           ; any change?
 44038 000044B5 74DF                            jz	short input_key	; no
 44039 000044B7 0036[8B4C]                      add     [secElapsed],dh ;
 44040 000044BB EB8D                            jmp	short check_time ;
 44041                                  got_key:
 44042 000044BD 50                              push    ax              ;
 44043 000044BE B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 44044 000044C1 8706[8A4C]                      xchg    [secTimeOut],ax
 44045 000044C5 3CFF                            cmp     al,-1           ; was time-out already disabled?
 44046 000044C7 740E                            je	short timeout_disabled ; yes
 44047 000044C9 53                              push    bx              ; let's disable # seconds display
 44048 000044CA B8200A                          mov     ax,0A20h        ; write multiple spaces
 44049 000044CD 8B1E[7C4C]                      mov     bx,[bMenuColor]
 44050 000044D1 B95000                          mov     cx,80           ; 80 of them, to be safe
 44051 000044D4 CD10                            int     10h             ; to completely obliterate # seconds display
 44052 000044D6 5B                              pop     bx   		;
 44053                                  
 44054                                  timeout_disabled:
 44055 000044D7 58                              pop     ax              ;
 44056 000044D8 08C0                            or      al,al           ; extended key pressed?
 44057 000044DA 755A                            jnz	short normal_key ; no
 44058 000044DC CD21                            int     21h             ; get the next part of the key then
 44059 000044DE 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 44060                                  
 44061 000044E0 3C48                            cmp     al,48h          ; up arrow?
 44062 000044E2 7510                            jne	short not_up	; no
 44063 000044E4 80FB01                          cmp     bl,1            ; are we as up as up can get?
 44064 000044E7 76AD                            jbe	short input_key	; yes, ignore it
 44065 000044E9 FE0E[864C]                      dec     byte [bDefBlock] ;
 44066 000044ED E8A9FE                          call    print_item      ; re-print the current item
 44067 000044F0 FECB                            dec     bl              ; and then print the new current item
 44068 000044F2 EB12                            jmp     short print1
 44069                                  not_up:
 44070 000044F4 3C50                            cmp     al,50h          ; down arrow?
 44071 000044F6 7518                            jne	short not_down	; no
 44072 000044F8 3A1E[874C]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 44073 000044FC 7310                            jae	short to_input_key ; yes, ignore it
 44074 000044FE FE06[864C]                      inc     byte [bDefBlock] ;
 44075 00004502 E894FE                          call    print_item      ; re-print the current item
 44076 00004505 43                              inc     bx              ; and then print the new current item
 44077                                  print1: 
 44078 00004506 88D8                    	mov     al,bl           ;
 44079                                  print2: 
 44080 00004508 E88EFE                  	call    print_item      ;
 44081 0000450B E86300                          call    disp_num        ;
 44082                                  to_input_key:
 44083 0000450E EB86                            jmp	short input_key ; 10/09/2023
 44084                                  not_down:
 44085 00004510 F606[814C]01                    test    byte [bDisableUI],1
 44086 00004515 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 44087 00004517 3C42                            cmp     al,42h          ; F8 function key?
 44088 00004519 750B                            jne	short not_f8	; no
 44089 0000451B 8036[854C]01                    xor     byte [bQueryOpt],1
 44090 00004520 E85E00                          call    show_status     ;
 44091 00004523 E970FF                          jmp     input_key	;
 44092                                  not_f8:
 44093 00004526 3C3F                            cmp     al,3Fh          ; F5 function key?
 44094 00004528 75E4                            jne	short to_input_key ; no
 44095                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44096                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 44097                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 44098 0000452A 800E[854C]04            	or	byte [bQueryOpt],4 ; no more queries
 44099 0000452F BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 44100 00004532 B020                            mov     al,' '          ; don't want to display anything really;
 44101 00004534 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 44102                                  
 44103                                  normal_key:
 44104 00004536 3C0D                            cmp     al,0Dh          ; Enter?
 44105 00004538 741C                            je	short select_done ; yes
 44106 0000453A 3C08                            cmp     al,08h          ; backspace?
 44107 0000453C 7504                            jne	short not_backspace ; no
 44108 0000453E BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 44109 00004541 C3                              retn			;
 44110                                  not_backspace:
 44111 00004542 2C30                            sub     al,'0'          ; is greater than '0'?
 44112 00004544 76C8                            jbe	short to_input_key ; no
 44113 00004546 3A06[874C]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 44114 0000454A 77C2                            ja	short to_input_key ; no
 44115 0000454C A2[864C]                        mov	[bDefBlock],al  ;
 44116 0000454F E847FE                          call    print_item      ; redisplay the current selection
 44117 00004552 88C3                            mov     bl,al           ; set new selection
 44118 00004554 EBB2                            jmp	short print2
 44119                                  
 44120                                  select_done:
 44121 00004556 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 44122 00004558 88D8                            mov     al,bl           ;
 44123 0000455A 0430                            add     al,'0'          ; convert it into a digit, then display it
 44124                                  
 44125                                  	; fall into disp_input
 44126                                  
 44127                                  ; 16/04/2019 - Retro DOS v4.0
 44128                                  
 44129                                  ;----------------------------------------------------------------------------
 44130                                  ;
 44131                                  ;   disp_input:  display a single character + cr/lf
 44132                                  ;
 44133                                  ;   INPUT
 44134                                  ;       AL == character to display
 44135                                  ;
 44136                                  ;   OUTPUT
 44137                                  ;       None
 44138                                  ;
 44139                                  ;   OTHER REGS USED
 44140                                  ;       None
 44141                                  ;
 44142                                  ;   NOTES
 44143                                  ;       This function is used not only for the menu input selection but
 44144                                  ;       also for the interactive line prompting (the y/n/a thing).
 44145                                  ;
 44146                                  ;   HISTORY
 44147                                  ;       Created 16-Mar-1992 by JeffPar
 44148                                  ;
 44149                                  ;----------------------------------------------------------------------------
 44150                                  
 44151                                  
 44152                                  disp_input:
 44153 0000455C 50                      	push	ax
 44154                                  	;cmp	al,' '
 44155                                  	;jae	short disp_ok
 44156                                  	;mov	al,' '
 44157                                  	; 10/09/2023 - Retro DOS v4.2 IO:SYS (Optimization)
 44158 0000455D B220                    	mov	dl,' ' ; 20h
 44159 0000455F 38D0                    	cmp	al,dl
 44160 00004561 7602                    	jna	short disp_input_ok
 44161                                  disp_ok:
 44162 00004563 88C2                    	mov	dl,al
 44163                                  disp_input_ok:
 44164 00004565 B402                    	mov	ah,STD_CON_OUTPUT ; 2
 44165 00004567 CD21                    	int	21h
 44166 00004569 BA[7050]                	mov	dx,crlfm
 44167 0000456C E8E504                  	call	print
 44168 0000456F 58                      	pop	ax
 44169 00004570 C3                      	retn
 44170                                  
 44171                                  ;----------------------------------------------------------------------------
 44172                                  
 44173                                  disp_num:
 44174 00004571 53                              push    bx
 44175 00004572 0430                            add     al,'0'
 44176 00004574 B40A                            mov     ah,0Ah
 44177 00004576 8B1E[7C4C]                      mov     bx,[bMenuColor]
 44178 0000457A B90100                          mov     cx,1
 44179 0000457D CD10                            int     10h
 44180 0000457F 5B                              pop     bx
 44181 00004580 C3                              retn
 44182                                  
 44183                                  ;----------------------------------------------------------------------------
 44184                                  ;
 44185                                  ;   show_status:  display current interactive mode setting (on/off/none)
 44186                                  ;
 44187                                  ;   INPUT
 44188                                  ;       None
 44189                                  ;
 44190                                  ;   OUTPUT
 44191                                  ;       None
 44192                                  ;
 44193                                  ;   OTHER REGS USED
 44194                                  ;       None
 44195                                  ;
 44196                                  ;   NOTES
 44197                                  ;       None
 44198                                  ;
 44199                                  ;   HISTORY
 44200                                  ;       Created 16-Mar-1992 by JeffPar
 44201                                  ;
 44202                                  ;----------------------------------------------------------------------------
 44203                                  
 44204                                  show_status:
 44205 00004581 53                              push    bx              ; BL = video page #
 44206 00004582 8B1E[7C4C]                      mov     bx,[bMenuColor]
 44207 00004586 B403                            mov     ah,03h          ; get cursor position
 44208 00004588 CD10                            int     10h             ;
 44209 0000458A 52                              push    dx              ; save it
 44210 0000458B B402                            mov     ah,02h          ; set cursor position
 44211 0000458D 8B16[7F4C]                      mov     dx,[bLastCol]   ; set correct row/col
 44212 00004591 F606[814C]01                    test    byte [bDisableUI],1
 44213 00004596 740C                            jz	short show_onoff ; just show on/off
 44214 00004598 B200                            mov     dl,0            ;
 44215 0000459A CD10                            int     10h             ;
 44216 0000459C B8200A                          mov     ax,0A20h        ; write multiple spaces
 44217 0000459F B95000                          mov     cx,80           ; 80 of them, to be exact
 44218                                  	; 10/09/2023
 44219                                  	;int	10h             ; to obliterate the status line
 44220 000045A2 EB11                            jmp     short show_done ;
 44221                                  show_onoff: 
 44222 000045A4 CD10                            int     10h
 44223                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 44224                                  		; AL = character, BH = display page - alpha mode
 44225                                  		; BL = color of character (graphics mode, PCjr only)
 44226                                  		; CX = number of times to write character
 44227                                  
 44228 000045A6 A0[2353]                        mov     al,[_$NO]	; assume OFF
 44229 000045A9 803E[854C]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 44230 000045AE 7503                            jne	short show_noton ; no
 44231 000045B0 A0[1F53]                        mov     al,[_$YES]	; yes
 44232                                  show_noton:                     ;
 44233 000045B3 B40E                            mov     ah,0Eh          ; write TTY
 44234                                  show_done:	; 10/09/2023
 44235 000045B5 CD10                            int     10h             ;
 44236                                  ;show_done:                     ;
 44237 000045B7 5A                              pop     dx              ;
 44238 000045B8 B402                            mov     ah,02h          ;
 44239 000045BA CD10                            int     10h             ; restore original cursor position
 44240 000045BC 5B                              pop     bx              ;
 44241 000045BD C3                              retn			;
 44242                                  
 44243                                  ; 16/04/2019 - Retro DOS v4.0
 44244                                  
 44245                                  ;----------------------------------------------------------------------------
 44246                                  ;
 44247                                  ;   skip_token: advances ES:SI/CX past the current token
 44248                                  ;
 44249                                  ;   INPUT
 44250                                  ;    ES:SI -> position in config.sys
 44251                                  ;       CX == remaining bytes in config.sys
 44252                                  ;
 44253                                  ;   OUTPUT
 44254                                  ;       CF set if EOL/EOF hit
 44255                                  ;       AL == 1st char of delimiter
 44256                                  ;    ES:SI -> just past the delimiter
 44257                                  ;       CX == # bytes remaining from that point
 44258                                  ;
 44259                                  ;   OTHER REGS USED
 44260                                  ;       AX
 44261                                  ;
 44262                                  ;   NOTES
 44263                                  ;       None
 44264                                  ;
 44265                                  ;   HISTORY
 44266                                  ;       Created 16-Mar-1992 by JeffPar
 44267                                  ;
 44268                                  ;----------------------------------------------------------------------------
 44269                                  
 44270                                  skip_token:
 44271 000045BE E84D00                          call    get_char
 44272 000045C1 7210                            jc	short skip_token_done
 44273 000045C3 E8B401                          call    any_delim
 44274 000045C6 75F6                            jne	short skip_token
 44275                                  skip_check_eol:
 44276 000045C8 3C0D                            cmp     al,cr ; 0Dh
 44277 000045CA 7406                            je	short skip_token_eol
 44278 000045CC 3C0A                            cmp     al,lf ; 0Ah
 44279 000045CE 7402                            je	short skip_token_eol
 44280 000045D0 F8                              clc
 44281                                          ;jmp	short skip_token_done
 44282 000045D1 C3                      	retn
 44283                                  skip_token_eol:
 44284 000045D2 F9                              stc
 44285                                  skip_token_done:
 44286 000045D3 C3                              retn
 44287                                  
 44288                                  ;----------------------------------------------------------------------------
 44289                                  ;
 44290                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 44291                                  ;
 44292                                  ;   INPUT
 44293                                  ;    ES:SI -> position in config.sys
 44294                                  ;       CX == remaining bytes in config.sys
 44295                                  ;
 44296                                  ;   OUTPUT
 44297                                  ;       CF set if EOF hit
 44298                                  ;       AL == 1st char of token
 44299                                  ;    ES:SI -> just past the token
 44300                                  ;       CX == # bytes remaining from that point
 44301                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 44302                                  ;
 44303                                  ;   OTHER REGS USED
 44304                                  ;       AX
 44305                                  ;
 44306                                  ;   NOTES
 44307                                  ;       None
 44308                                  ;
 44309                                  ;   HISTORY
 44310                                  ;       Created 16-Mar-1992 by JeffPar
 44311                                  ;
 44312                                  ;----------------------------------------------------------------------------
 44313                                  
 44314                                  skip_delim:	; returns carry set if eol/eof
 44315 000045D4 E83700                          call    get_char        ;
 44316 000045D7 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 44317 000045DA 72F7                            jc	short skip_token_done ;
 44318 000045DC E8AB01                          call    delim           ;
 44319 000045DF 74F3                            je	short skip_delim ;
 44320 000045E1 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 44321                                  
 44322                                  ;----------------------------------------------------------------------------
 44323                                  ;
 44324                                  ;   skip_opt_line: same as skip_line provided AL != LF
 44325                                  ;
 44326                                  ;   INPUT
 44327                                  ;       AL == last character read
 44328                                  ;    ES:SI -> position in config.sys
 44329                                  ;       CX == remaining bytes in config.sys
 44330                                  ;
 44331                                  ;   OUTPUT
 44332                                  ;       CF set if EOF hit
 44333                                  ;       AL == 1st char of new line
 44334                                  ;    ES:SI -> just past 1st char of new line
 44335                                  ;       CX == # bytes remaining from that point
 44336                                  ;
 44337                                  ;   OTHER REGS USED
 44338                                  ;       AX
 44339                                  ;
 44340                                  ;   NOTES
 44341                                  ;       In other words, the purpose here is to skip to the next line,
 44342                                  ;       unless ES:SI is already sitting at the front of the next line (which
 44343                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 44344                                  ;
 44345                                  ;   HISTORY
 44346                                  ;       Created 16-Mar-1992 by JeffPar
 44347                                  ;
 44348                                  ;----------------------------------------------------------------------------
 44349                                  
 44350                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44351                                  ;skip_opt_line:
 44352                                  ;	cmp     al,lf ; 0Ah
 44353                                  ;	je	short skip_line_done
 44354                                       
 44355                                  	; fall into skip_line
 44356                                  
 44357                                  ;----------------------------------------------------------------------------
 44358                                  ;
 44359                                  ;   skip_line: skip to the next line
 44360                                  ;
 44361                                  ;   INPUT
 44362                                  ;    ES:SI -> position in config.sys
 44363                                  ;       CX == remaining bytes in config.sys
 44364                                  ;
 44365                                  ;   OUTPUT
 44366                                  ;       CF set if EOF hit
 44367                                  ;    ES:SI -> just past 1st char of new line
 44368                                  ;       CX == # bytes remaining from that point
 44369                                  ;
 44370                                  ;   OTHER REGS USED
 44371                                  ;       AX
 44372                                  ;
 44373                                  ;   NOTES
 44374                                  ;       None
 44375                                  ;
 44376                                  ;   HISTORY
 44377                                  ;       Created 16-Mar-1992 by JeffPar
 44378                                  ;
 44379                                  ;----------------------------------------------------------------------------
 44380                                  
 44381                                  skip_line:
 44382 000045E3 E82800                          call    get_char
 44383 000045E6 7204                            jc	short skip_line_done
 44384                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44385 000045E8 3C0A                            cmp     al,lf ; 0Ah
 44386 000045EA 75F7                            jne	short skip_line
 44387                                  skip_line_done:
 44388                                  num_done:	; 18/12/2022
 44389 000045EC C3                              retn
 44390                                  
 44391                                  ;----------------------------------------------------------------------------
 44392                                  ;
 44393                                  ;   get_number: return binary equivalent of numeric string
 44394                                  ;
 44395                                  ;   INPUT
 44396                                  ;    ES:SI -> position in config.sys
 44397                                  ;       CX == remaining bytes in config.sys
 44398                                  ;
 44399                                  ;   OUTPUT
 44400                                  ;       AL == non-digit encountered
 44401                                  ;       BX == binary #
 44402                                  ;    ES:SI -> just past 1st non-digit
 44403                                  ;       CX == # bytes remaining from that point
 44404                                  ;
 44405                                  ;   OTHER REGS USED
 44406                                  ;       AX
 44407                                  ;
 44408                                  ;   NOTES
 44409                                  ;       None
 44410                                  ;
 44411                                  ;   HISTORY
 44412                                  ;       Created 16-Mar-1992 by JeffPar
 44413                                  ;
 44414                                  ;----------------------------------------------------------------------------
 44415                                  
 44416                                  ; 13/05/2019
 44417                                  
 44418                                  get_number:
 44419 000045ED 29DB                            sub     bx,bx           ; BX = result
 44420                                  num_loop:
 44421 000045EF E81C00                          call    get_char        ;
 44422 000045F2 72F8                            jc	short num_done	;
 44423 000045F4 3C30                            cmp     al,'0'          ; convert to value
 44424 000045F6 72F4                            jb	short num_done	; no more number
 44425 000045F8 3C39                            cmp     al,'9'          ;
 44426 000045FA 77F0                            ja	short num_done	;
 44427 000045FC 50                              push    ax              ;
 44428 000045FD B80A00                          mov     ax,10           ;
 44429 00004600 52                              push    dx              ;
 44430 00004601 F7E3                            mul     bx              ;
 44431 00004603 5A                              pop     dx              ;
 44432 00004604 89C3                            mov     bx,ax           ;
 44433 00004606 58                              pop     ax              ;
 44434 00004607 2C30                            sub     al,'0'          ;
 44435 00004609 98                              cbw                     ;
 44436 0000460A 01C3                            add     bx,ax           ;
 44437 0000460C EBE1                            jmp	short num_loop	;
 44438                                  
 44439                                  	; 18/12/2022
 44440                                  ;num_done:
 44441                                          ;retn
 44442                                  
 44443                                  ;----------------------------------------------------------------------------
 44444                                  ;
 44445                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 44446                                  ;
 44447                                  ;   INPUT
 44448                                  ;    ES:SI -> position in config.sys
 44449                                  ;       CX == remaining bytes in config.sys
 44450                                  ;
 44451                                  ;   OUTPUT
 44452                                  ;       AL == next character
 44453                                  ;    ES:SI -> just past next character
 44454                                  ;       CX == # bytes remaining from that point
 44455                                  ;
 44456                                  ;   OTHER REGS USED
 44457                                  ;       AX
 44458                                  ;
 44459                                  ;   NOTES
 44460                                  ;       None
 44461                                  ;
 44462                                  ;   HISTORY
 44463                                  ;       Created 16-Mar-1992 by JeffPar
 44464                                  ;
 44465                                  ;----------------------------------------------------------------------------
 44466                                  
 44467                                  get_char:
 44468 0000460E 83E901                          sub     cx,1            ; use SUB to set carry,zero
 44469 00004611 7205                            jb	short get_fail	; out of data
 44470                                          ;lods	byte ptr es:[si] ;
 44471 00004613 26                      	es	
 44472 00004614 AC                      	lodsb
 44473 00004615 88C4                            mov     ah,al           ;
 44474 00004617 C3                              retn			;
 44475                                  get_fail:                       ; restore CX to zero
 44476 00004618 B90000                          mov     cx,0            ; leave carry set, zero not set
 44477                                  nearby_ret:
 44478 0000461B C3                              retn
 44479                                  
 44480                                  ;----------------------------------------------------------------------------
 44481                                  ;
 44482                                  ;   query_user: ask user whether to execute current config.sys command
 44483                                  ;
 44484                                  ;   INPUT
 44485                                  ;       AL == current command code
 44486                                  ;    ES:SI -> current command line in config.sys
 44487                                  ;    config_cmd == current command code, but with QUERY bit intact
 44488                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 44489                                  ;
 44490                                  ;   OUTPUT
 44491                                  ;       CF set if command should be ignored (it is also REM'ed out)
 44492                                  ;
 44493                                  ;   OTHER REGS USED
 44494                                  ;       BX, CX, DX, DI
 44495                                  ;
 44496                                  ;   NOTES
 44497                                  ;       None
 44498                                  ;
 44499                                  ;   HISTORY
 44500                                  ;       Created 16-Mar-1992 by JeffPar
 44501                                  ;
 44502                                  ;----------------------------------------------------------------------------
 44503                                  
 44504                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 44505                                  	; (SYSINIT:4AE5h)
 44506                                  
 44507                                  	; 12/12/2022
 44508                                  query_user:
 44509 0000461C F606[854C]04                    test    byte [bQueryOpt],4	; answer no to everything?
 44510                                  	; 01/01/2023
 44511 00004621 7403                    	jz	short qu_1		;
 44512 00004623 E9B900                  	jmp	skip_all
 44513                                  	; 12/12/2022
 44514                                  	;;jmp	short skip_all		;
 44515                                  	;jnz	short skip_all
 44516                                  qu_1:
 44517 00004626 F606[854C]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 44518 0000462B 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 44519 0000462D 50                              push    ax                      ;
 44520 0000462E A0[6419]                        mov     al,[config_cmd]         ;
 44521 00004631 F606[854C]01                    test    byte [bQueryOpt],1	; query every command?
 44522 00004636 7506                            jnz	short query_all		; yes
 44523 00004638 A880                            test    al,CONFIG_OPTION_QUERY  ;
 44524                                  	; 01/01/2023
 44525 0000463A 7502                    	jnz	short query_all		;
 44526                                  	; 12/12/2022
 44527                                  	;;jmp	short do_cmd		;
 44528                                  	;jz	short do_cmd ; cf=0
 44529                                  
 44530                                  	; 01/01/2023
 44531 0000463C 58                      	pop	ax
 44532 0000463D C3                      	retn
 44533                                  
 44534                                  query_all:
 44535                                  
 44536                                  ;   Search for the command code (AL) in "comtab", and then print
 44537                                  ;   out the corresponding keyword, followed by the rest of the actual
 44538                                  ;   line pointed to by ES:SI
 44539                                  
 44540 0000463E 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 44541 0000463F BA[8253]                        mov     dx,_$AutoPrmpt    	;
 44542 00004642 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 44543 00004644 7450                            jz	short generic_prompt	; config_cmd must have been 0
 44544                                  
 44545 00004646 88C6                            mov     dh,al                   ; save config_cmd in DH
 44546 00004648 29DB                            sub     bx,bx                   ;
 44547 0000464A BF[D24C]                        mov     di,comtab		;
 44548                                  find_match:                             ;
 44549 0000464D 8A1D                            mov     bl,[di]                 ; get size of current keyword
 44550 0000464F 08DB                            or      bl,bl                   ;
 44551 00004651 7425                            jz	short line_print	; end of table
 44552 00004653 47                              inc     di                      ;
 44553 00004654 3A01                            cmp     al,[di+bx]              ; match?
 44554 00004656 7405                            je	short cmd_match		; yes
 44555 00004658 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 44556                                  	; 13/05/2019	
 44557 0000465B EBF0                            jmp	short find_match	; loop
 44558                                  cmd_match:                              ;
 44559 0000465D 8A4DFF                          mov     cl,[di-1]               ;
 44560 00004660 B500                            mov	ch,0                    ;
 44561 00004662 B402                            mov     ah,STD_CON_OUTPUT ; 2
 44562                                  cmd_print:                              ;
 44563 00004664 8A05                            mov     al,[di]                 ;
 44564 00004666 47                              inc     di                      ;
 44565 00004667 88C2                            mov     dl,al                   ;
 44566 00004669 CD21                            int     21h                     ;
 44567 0000466B E2F7                            loop    cmd_print               ;
 44568 0000466D B23D                            mov     dl,'='                  ;
 44569 0000466F 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 44570 00004672 7502                            jne	short cmd_notset	;
 44571 00004674 B220                            mov     dl,' '                  ;
 44572                                  cmd_notset:
 44573 00004676 CD21                            int     21h                     ; '=' looks funny on SET commands
 44574                                  line_print:                             ;
 44575                                  	;lods	byte ptr es:[si]        ;
 44576 00004678 26                              es
 44577 00004679 AC                      	lodsb
 44578 0000467A 08C0                    	or      al,al                   ;
 44579 0000467C 7502                            jnz	short non_null		;
 44580 0000467E B020                            mov     al,' '                  ;
 44581                                  non_null:                               ;
 44582 00004680 3C20                            cmp     al,' '                  ; control code?
 44583 00004682 720F                            jb	short prompt_user	; yes, assume end of line
 44584 00004684 7505                            jne	short non_space		;
 44585                                          ; 10/09/2023
 44586 00004686 263804                  	cmp	[es:si],al ; 20h
 44587                                  	;cmp	byte [es:si],' '	;
 44588 00004689 7208                            jb	short prompt_user	;
 44589                                  non_space:                              ;
 44590 0000468B 88C2                            mov     dl,al                   ;
 44591 0000468D B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 44592 0000468F CD21                            int     21h                     ;
 44593 00004691 EBE5                            jmp	short line_print	;
 44594                                  
 44595                                  prompt_user:                            ;
 44596 00004693 BA[1353]                        mov     dx,_$InterPrmpt		;
 44597                                  
 44598                                  generic_prompt:
 44599 00004696 E8BB03                          call    print                   ;
 44600                                  input_loop:                             ;
 44601 00004699 B400                            mov     ah,0                    ; read a key
 44602 0000469B CD16                            int     16h                     ;
 44603 0000469D 08C0                            or      al,al                   ; is it a function key?
 44604 0000469F 750F                            jnz	short not_func		; no
 44605 000046A1 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 44606 000046A4 75F3                            jne	short input_loop	; no
 44607 000046A6 A0[2353]                        mov     al,[_$NO]                  ;
 44608 000046A9 800E[854C]04                    or      byte [bQueryOpt],4	; no more queries
 44609 000046AE EB21                            jmp     short legal_char        ;
 44610                                  not_func:
 44611 000046B0 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 44612 000046B2 3A06[2353]                      cmp     al,[_$NO]		; verify character is legal
 44613 000046B6 7419                            je	short legal_char	;
 44614 000046B8 3A06[1F53]                      cmp     al,[_$YES]		;
 44615 000046BC 7413                            je	short legal_char	;
 44616 000046BE 803E[6419]00                    cmp     byte [config_cmd],0	;
 44617 000046C3 74D4                            je	short input_loop	; don't allow Esc on this query
 44618 000046C5 3C1B                            cmp     al,1Bh                  ; Esc?
 44619 000046C7 75D0                            jne	short input_loop	;
 44620 000046C9 800E[854C]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 44621 000046CE A0[1F53]                        mov     al,[_$YES]
 44622                                  legal_char:                             ;
 44623 000046D1 E888FE                          call    disp_input              ;
 44624 000046D4 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 44625                                  
 44626 000046D5 3A06[2353]                      cmp     al,[_$NO]		; process line?
 44627 000046D9 7403                            je	short skip_cmd		; no
 44628                                  	; 12/12/2022
 44629 000046DB F8                      	clc
 44630                                  do_cmd:
 44631 000046DC 58                      	pop     ax			;
 44632                                  	; 12/12/2022
 44633                                  	; cf=0
 44634                                  	;clc				; just do the command
 44635 000046DD C3                      	retn
 44636                                  
 44637                                  skip_cmd:
 44638 000046DE 58                      	pop     ax			;
 44639                                  skip_all:
 44640 000046DF B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 44641 000046E1 F9                      	stc
 44642 000046E2 C3                      	retn
 44643                                  
 44644                                  ;----------------------------------------------------------------------------
 44645                                  ;
 44646                                  ;   print_error: displays multi-config error conditions
 44647                                  ;
 44648                                  ;   INPUT
 44649                                  ;    Carry set to pause, clear to not
 44650                                  ;    ES:SI -> current command line in config.sys
 44651                                  ;
 44652                                  ;   OUTPUT
 44653                                  ;       None
 44654                                  ;
 44655                                  ;   OTHER REGS USED
 44656                                  ;       None
 44657                                  ;
 44658                                  ;   NOTES
 44659                                  ;       None
 44660                                  ;
 44661                                  ;   HISTORY
 44662                                  ;       Created 16-Mar-1992 by JeffPar
 44663                                  ;
 44664                                  ;----------------------------------------------------------------------------
 44665                                  
 44666                                  print_error:
 44667 000046E3 50                              push    ax
 44668 000046E4 53                              push    bx
 44669 000046E5 51                              push    cx
 44670 000046E6 52                              push    dx
 44671 000046E7 1E                              push    ds
 44672 000046E8 0E                              push    cs
 44673 000046E9 1F                              pop     ds
 44674 000046EA 9C                              pushf
 44675 000046EB E820FC                          call    get_linenum
 44676 000046EE 891E[AF02]                      mov     [linecount],bx
 44677 000046F2 E8C5E7                          call    error_line
 44678 000046F5 9D                              popf
 44679 000046F6 7319                            jnc	short pe_ret
 44680 000046F8 BA[DD51]                        mov     dx,_$PauseMsg
 44681 000046FB E85603                          call    print
 44682 000046FE B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 44683 00004701 CD21                            int     21h			; wait for a key
 44684 00004703 08C0                            or      al,al			; extended key?
 44685 00004705 7504                            jnz	short pe_1		; no
 44686 00004707 B407                            mov     ah,07h			; yes
 44687 00004709 CD21                            int     21h			; eat it too
 44688                                  pe_1:     
 44689 0000470B BA[7050]                	mov     dx,crlfm
 44690 0000470E E84303                          call    print
 44691                                  pe_ret: 
 44692 00004711 1F                      	pop     ds
 44693 00004712 5A                              pop     dx
 44694 00004713 59                              pop     cx
 44695 00004714 5B                              pop     bx
 44696 00004715 58                              pop     ax
 44697 00004716 C3                      	retn
 44698                                  
 44699                                  ;----------------------------------------------------------------------------
 44700                                  
 44701                                  ;   This function is very simple: it merely prepends a "/D" to the
 44702                                  ;   command-line for the shell; this (undocumented) switch disables
 44703                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 44704                                  ;   displayed when there's no AUTOEXEC.BAT.
 44705                                  
 44706                                  disable_autoexec:
 44707                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 44708                                  	; 17/04/2019 - Retro DOS v4.0
 44709                                  
 44710 00004717 F606[854C]04            	test	byte [bQueryOpt],4
 44711 0000471C 7443                    	jz	short disable_exit
 44712 0000471E F606[7B4C]01            	test	byte [dae_flag],1
 44713 00004723 753C                    	jnz	short disable_exit
 44714 00004725 800E[7B4C]01            	or	byte [dae_flag],1
 44715                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 44716 0000472A 810E[854C]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 44717 00004730 BA4420                  	mov     dx,'D ' ; 2044h
 44718                                  dae_1:
 44719                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44720 00004733 A0[BA4B]                        mov	al,[def_swchr]
 44721                                  	;mov	al,[command_line-1]     ; get default switchchar
 44722 00004736 08C0                            or      al,al                   ; anything there?
 44723 00004738 7427                            jz	short disable_exit	; no, disable_autoexec already called
 44724 0000473A 8A1E[BB4B]                      mov     bl,[command_line]       ;
 44725 0000473E B700                            mov     bh,0                    ; BX == command-line length
 44726 00004740 89D9                            mov     cx,bx                   ;
 44727 00004742 80C303                          add     bl,3                    ;
 44728 00004745 80FB7E                          cmp     bl,126                  ;
 44729 00004748 7717                            ja	short disable_exit	;
 44730 0000474A 881E[BB4B]                      mov     [command_line],bl       ; update length
 44731 0000474E 81C3[BC4B]                      add     bx,command_line+1	; make sure we move the NULL too
 44732 00004752 41                              inc     cx                      ; (just for consistency sake)
 44733                                  disable_loop:                           ;
 44734 00004753 8A67FD                          mov     ah,[bx-3]               ;
 44735 00004756 8827                            mov     [bx],ah                 ;
 44736 00004758 4B                              dec     bx                      ;
 44737 00004759 E2F8                            loop    disable_loop            ;
 44738 0000475B 8847FE                          mov     [bx-2],al               ;
 44739                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 44740 0000475E 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 44741                                          ;mov	byte [command_line-1],0 ;
 44742                                  disable_exit:                           ;
 44743 00004761 C3                              retn
 44744                                  
 44745                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 44746 00004762 803E[854C]01            	cmp     byte [bQueryOpt],1
 44747 00004767 75F8                    	jnz     short disable_exit
 44748 00004769 F606[7B4C]02            	test	byte [dae_flag],2
 44749 0000476E 75F1                    	jnz     short disable_exit
 44750 00004770 800E[7B4C]02            	or      byte [dae_flag],2
 44751                                  	;mov	dx,' Y' ; (MASM syntax) ; 2059h
 44752                                  	; 10/09/2023 (BugFix)
 44753 00004775 BA5920                  	mov	dx,'Y ' ; (NASM syntax) ; 2059h
 44754 00004778 EBB9                    	jmp     short dae_1
 44755                                  
 44756                                  ;endif  ;MULTI_CONFIG
 44757                                  
 44758                                  ;%endif	; 02/11/2022
 44759                                  
 44760                                  
 44761                                  ; 19/04/2019 - Retro DOS v4.0
 44762                                  
 44763                                  ;----------------------------------------------------------------------------
 44764                                  ;
 44765                                  ; procedure : delim
 44766                                  ;
 44767                                  ;----------------------------------------------------------------------------
 44768                                  
 44769                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44770                                  ; (SYSINIT:4C45h)
 44771                                  
 44772                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44773                                  ;%if 0
 44774                                  ;;ifdef	MULTI_CONFIG
 44775                                  ;
 44776                                  any_delim:
 44777 0000477A 3C0D                    	cmp	al,cr
 44778 0000477C 7427                    	je	short delim_ret
 44779 0000477E 3C0A                    	cmp	al,lf
 44780 00004780 7423                    	je	short delim_ret
 44781 00004782 3C5B                    	cmp	al,'['
 44782 00004784 741F                    	je	short delim_ret
 44783 00004786 3C5D                    	cmp	al,']'
 44784 00004788 741B                    	je	short delim_ret
 44785                                  ;
 44786                                  ;;endif ;MULTI_CONFIG
 44787                                  ;%endif ; 02/11/2022
 44788                                  
 44789                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 44790                                  	; (SYSINIT:3450h)	
 44791                                  delim:
 44792 0000478A 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 44793 0000478C 7417                    	je	short delim_ret
 44794                                  
 44795 0000478E 3C00                    	cmp	al,0		; special case for sysinit!!!
 44796 00004790 7413                    	je	short delim_ret
 44797                                  
 44798                                  org_delim:			; used by organize routine except for getting
 44799 00004792 3C20                    	cmp	al,' '          ; the filename.
 44800 00004794 740F                    	je	short delim_ret
 44801 00004796 3C09                            cmp     al,tab ; 9
 44802 00004798 740B                    	je	short delim_ret
 44803 0000479A 3C3D                    	cmp	al,'='
 44804 0000479C 7407                    	je	short delim_ret
 44805 0000479E 3C2C                    	cmp	al,','
 44806 000047A0 7403                    	je	short delim_ret
 44807 000047A2 3C3B                    	cmp	al,';'
 44808                                  
 44809                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44810                                  
 44811                                  ; 04/01/2023 - Retro DOS v4.2
 44812                                  ;ifdef	MULTI_CONFIG
 44813                                  ;   Make sure there's no chance of a false EOF indication
 44814 000047A4 F8                      	clc
 44815                                  ;endif
 44816                                  	; 02/11/2022
 44817                                  delim_ret:
 44818                                  	; 04/01/2023
 44819                                  	; cf = 0
 44820                                  nl_ret:	; 10/09/2023
 44821 000047A5 C3                      	retn
 44822                                  
 44823                                  ;----------------------------------------------------------------------------
 44824                                  ;
 44825                                  ; procedure : newline
 44826                                  ;
 44827                                  ;  newline returns with first character of next line
 44828                                  ;
 44829                                  ;----------------------------------------------------------------------------
 44830                                  
 44831                                  newline:
 44832 000047A6 E80600                  	call	getchr			;skip non-control characters
 44833 000047A9 72FA                    	jc	short nl_ret
 44834 000047AB 3C0A                    	cmp	al,lf			;look for line feed
 44835 000047AD 75F7                    	jne	short newline
 44836                                  
 44837                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 44838                                  	;call	getchr
 44839                                  ;nl_ret:
 44840                                  	;retn
 44841                                  	; 10/09/2023
 44842                                  	;jmp	short getchr
 44843                                  
 44844                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 44845                                  %if 1
 44846                                  
 44847                                  ;----------------------------------------------------------------------------
 44848                                  ;
 44849                                  ; procedure : getchr
 44850                                  ;
 44851                                  ;----------------------------------------------------------------------------
 44852                                  
 44853                                  	; 24/10/2022
 44854                                  getchr:
 44855                                  	; 12/12/2022
 44856                                  	;push	cx
 44857                                  	;mov	cx,[count]
 44858                                  	;jcxz	nochar
 44859                                  	; 12/12/2022
 44860 000047AF 833E[5603]01            	cmp	word [count],1 
 44861 000047B4 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 44862                                  	
 44863 000047B6 8B36[5A03]              	mov	si,[chrptr]
 44864 000047BA 268A04                  	mov	al,[es:si]
 44865 000047BD FF0E[5603]              	dec	word [count]
 44866 000047C1 FF06[5A03]              	inc	word [chrptr]
 44867                                  	; 12/12/202
 44868                                  	; cf=0
 44869                                  	;clc
 44870                                  ;get_ret:
 44871                                  	;pop	cx
 44872                                  	;retn
 44873                                  nochar: 
 44874                                  	; 12/12/2022
 44875                                  	; cf=1
 44876                                  	;stc
 44877                                  	;jmp	short get_ret
 44878                                  	
 44879 000047C5 C3                      	retn
 44880                                  %endif
 44881                                  
 44882                                  ;----------------------------------------------------------------------------
 44883                                  ; 
 44884                                  ; procedure : mapcase
 44885                                  ;
 44886                                  ;----------------------------------------------------------------------------
 44887                                  
 44888                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 44889                                  
 44890                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 44891                                  	; (SYSINIT:4C7Eh)
 44892                                  mapcase:
 44893 000047C6 51                      	push	cx
 44894 000047C7 56                      	push	si
 44895 000047C8 1E                      	push	ds
 44896                                  
 44897 000047C9 06                      	push	es
 44898 000047CA 1F                      	pop	ds
 44899                                  
 44900                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44901                                  
 44902                                  ; 04/01/2023 - Retro DOS 4.2
 44903                                  
 44904                                  ;ifdef	MULTI_CONFIG
 44905 000047CB 88C3                    	mov	bl,al			; same cmd code this line
 44906                                  ;else
 44907                                  ;	xor	si,si
 44908                                  ;endif
 44909                                  	; 02/11/2022
 44910                                  	; 04/01/2023 - Retro DOS 4.2
 44911                                  	;xor	si, si
 44912                                  
 44913                                  convloop:
 44914 000047CD AC                      	lodsb
 44915 000047CE 3C61                    	cmp	al,'a'
 44916 000047D0 7209                    	jb	short noconv
 44917 000047D2 3C7A                    	cmp	al,'z'
 44918 000047D4 7705                    	ja	short noconv
 44919 000047D6 2C20                    	sub	al,20h
 44920 000047D8 8844FF                  	mov	[si-1],al
 44921                                  noconv:
 44922                                  
 44923                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44924                                  
 44925                                  ; 04/01/2023 - Retro DOS 4.2
 44926                                  ;ifdef	MULTI_CONFIG
 44927                                  
 44928                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 44929                                  ;   upper-case a line at a time, after we've been able to figure out whether
 44930                                  ;   the line is a SET command or not (since we don't want to upper-case
 44931                                  ;   anything after the "=" in a SET)
 44932                                  ;
 44933 000047DB 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 44934 000047DE 7504                    	jne	short check_eol		; no, just check for end-of-line
 44935 000047E0 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 44936 000047E2 740A                    	je	short convdone		; yes
 44937                                  check_eol:
 44938 000047E4 3C0D                    	cmp	al,cr
 44939 000047E6 7406                    	je	short convdone
 44940 000047E8 3C0A                    	cmp	al,lf
 44941 000047EA 7402                    	je	short convdone
 44942                                  ;endif
 44943                                  	; 02/11/2022
 44944 000047EC E2DF                    	loop	convloop
 44945                                  convdone:
 44946 000047EE 1F                      	pop	ds
 44947 000047EF 5E                      	pop	si
 44948 000047F0 59                      	pop	cx
 44949 000047F1 C3                      	retn
 44950                                  
 44951                                  ;----------------------------------------------------------------------------
 44952                                  ;
 44953                                  ; procedure : round
 44954                                  ;
 44955                                  ; round the values in memlo and memhi to paragraph boundary.
 44956                                  ; perform bounds check.
 44957                                  ;
 44958                                  ;----------------------------------------------------------------------------
 44959                                  
 44960                                  round:
 44961                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 44962 000047F2 1E                      	push	ds
 44963 000047F3 0E                      	push	cs
 44964 000047F4 1F                      	pop	ds
 44965                                  
 44966 000047F5 50                      	push	ax
 44967                                  	;mov	ax,[cs:memlo]
 44968 000047F6 A1[6203]                	mov	ax,[memlo]
 44969                                  
 44970 000047F9 E819CB                  	call	ParaRound		; para round up
 44971                                  
 44972                                  	;add	[cs:memhi],ax
 44973 000047FC 0106[6403]              	add	[memhi],ax
 44974                                  	;mov	word [cs:memlo],0
 44975 00004800 C706[6203]0000          	mov	word [memlo],0
 44976                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 44977 00004806 A1[6403]                	mov	ax,[memhi]
 44978                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 44979 00004809 3B06[A502]              	cmp	ax,[ALLOCLIM]
 44980                                  	;jae	short mem_err
 44981                                  	; 13/04/2024
 44982 0000480D 7322                    	jae	short mem_err2 ; ds = cs
 44983                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 44984 0000480F F606[6919]02            	test	byte [setdevmarkflag],for_devmark ; 2
 44985 00004814 7416                    	jz	short skip_set_devmarksize
 44986 00004816 06                      	push	es
 44987 00004817 56                      	push	si
 44988                                  	;mov	si,[cs:devmark_addr]
 44989 00004818 8B36[6719]              	mov	si,[devmark_addr]
 44990 0000481C 8EC6                    	mov	es,si
 44991 0000481E 29F0                    	sub	ax,si
 44992 00004820 48                      	dec	ax
 44993                                  	;mov	[es:3],ax
 44994 00004821 26A30300                	mov	[es:devmark.size],ax	; paragraph
 44995                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 44996 00004825 8026[6919]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 44997 0000482A 5E                      	pop	si
 44998 0000482B 07                      	pop	es
 44999                                  skip_set_devmarksize:
 45000 0000482C 58                      	pop	ax
 45001                                  
 45002                                  	; 10/09/2023
 45003 0000482D 1F                      	pop	ds
 45004                                  
 45005                                  	; 11/12/2022
 45006                                  	; cf = 0
 45007                                  	; 02/11/2022
 45008                                  	;clc	; ? (not needed here)	; clear carry
 45009 0000482E C3                      	retn
 45010                                  
 45011                                  ;----------------------------------------------------------------------------
 45012                                  
 45013                                  mem_err:
 45014                                  	; 11/12/2022
 45015 0000482F 0E                      	push	cs
 45016 00004830 1F                      	pop	ds
 45017                                  mem_err2:
 45018 00004831 BA[4951]                	mov	dx,badmem
 45019                                  	;push	cs
 45020                                  	;pop	ds
 45021 00004834 E81D02                  	call	print
 45022 00004837 E914CB                  	jmp	stall
 45023                                  
 45024                                  ;----------------------------------------------------------------------------
 45025                                  ;
 45026                                  ; procedure : calldev
 45027                                  ;
 45028                                  ;----------------------------------------------------------------------------
 45029                                  
 45030                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 45031                                  	; (SYSINIT:34E0h)
 45032                                  
 45033                                  	; 13/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 45034                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4F3Eh)
 45035                                  
 45036                                  calldev:
 45037 0000483A 2E8E1E[3B24]            	mov	ds,[cs:DevEntry+2]
 45038 0000483F 2E031E[3924]            	add	bx,[cs:DevEntry]	; do a little relocation
 45039 00004844 8B07                    	mov	ax,[bx]
 45040                                  
 45041 00004846 2EFF36[3924]            	push	word [cs:DevEntry]
 45042 0000484B 2EA3[3924]              	mov	[cs:DevEntry],ax
 45043 0000484F BB[6F03]                	mov	bx,packet
 45044 00004852 2EFF1E[3924]            	call	far [cs:DevEntry]
 45045 00004857 2E8F06[3924]            	pop	word [cs:DevEntry]
 45046 0000485C C3                      	retn
 45047                                  
 45048                                  ;----------------------------------------------------------------------------
 45049                                  ;
 45050                                  ; procedure : todigit
 45051                                  ;
 45052                                  ;----------------------------------------------------------------------------
 45053                                  
 45054                                  todigit:
 45055 0000485D 2C30                    	sub	al,'0'
 45056                                  	;jb	short notdig  ; 02/11/2022
 45057                                  	; 12/12/2022
 45058 0000485F 7203                    	jb	short notdig2
 45059                                  	;cmp	al,9
 45060                                  	;ja	short notdig
 45061                                  	;clc
 45062                                  	;retn
 45063                                  	; 12/12/2022
 45064 00004861 3C0A                    	cmp	al,10
 45065 00004863 F5                      	cmc
 45066                                  notdig:
 45067                                  	;stc
 45068                                  notdig2:
 45069 00004864 C3                      	retn
 45070                                  
 45071                                  ;----------------------------------------------------------------------------
 45072                                  ;
 45073                                  ; procedure : getnum
 45074                                  ;
 45075                                  ; getnum parses a decimal number.
 45076                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 45077                                  ; error), if number is bad carry is set, zero is set, ax=0.
 45078                                  ;
 45079                                  ;----------------------------------------------------------------------------
 45080                                  
 45081                                  getnum:
 45082 00004865 53                      	push	bx
 45083 00004866 31DB                    	xor	bx,bx			; running count is zero
 45084                                  b2:
 45085 00004868 E8F2FF                  	call	todigit 		; do we have a digit ?
 45086 0000486B 7247                    	jc	short badnum		; no, bomb
 45087                                  
 45088 0000486D 93                      	xchg	ax,bx			; put total in ax
 45089 0000486E 53                      	push	bx			; save digit (0 to 9)
 45090                                  	;mov	bx,10			; base of arithmetic
 45091                                  	; 12/12/2022
 45092 0000486F B30A                    	mov	bl,10
 45093 00004871 F7E3                    	mul	bx			; shift by one decimal digit
 45094 00004873 5B                      	pop	bx			; get back digit (0 to 9)
 45095 00004874 00D8                    	add	al,bl			; get total
 45096 00004876 80D400                  	adc	ah,0			; make that 16 bits
 45097 00004879 7239                    	jc	short badnum		; too big a number
 45098                                  
 45099 0000487B 93                      	xchg	ax,bx			; stash total
 45100                                  
 45101 0000487C E830FF                  	call	getchr			;get next digit
 45102 0000487F 722D                    	jc	short b1		; no more characters
 45103 00004881 3C20                    	cmp	al,' ' 			; space?
 45104 00004883 741F                    	je	short b15		; then end of digits
 45105 00004885 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 45106 00004887 741B                    	je	short b15		; then end of digits.
 45107 00004889 3C09                    	cmp	al, tab ; 9		; tab
 45108 0000488B 7417                    	je	short b15
 45109 0000488D 2E3A06[AE02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 45110 00004892 7410                    	je	short b15
 45111 00004894 3C2F                    	cmp	al,'/'			; see if another switch follows
 45112                                  	; 12/12/2022
 45113                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45114                                  	;nop				; cas - remnant of old bad code
 45115                                  	;nop
 45116 00004896 740C                    	je	short b15
 45117 00004898 3C0A                    	cmp	al,lf			; line-feed?
 45118 0000489A 7408                    	je	short b15
 45119 0000489C 3C0D                    	cmp	al,cr			; carriage return?
 45120 0000489E 7404                    	je	short b15
 45121 000048A0 08C0                    	or	al,al			; end of line separator?
 45122 000048A2 75C4                    	jnz	short b2		; no, try as a valid char...
 45123                                  b15:
 45124 000048A4 2EFF06[5603]            	inc	word [cs:count]		; one more character to s...
 45125 000048A9 2EFF0E[5A03]            	dec	word [cs:chrptr]	; back up over separator
 45126                                  b1:
 45127 000048AE 89D8                    	mov	ax,bx			; get proper count
 45128 000048B0 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 45129 000048B2 5B                      	pop	bx
 45130 000048B3 C3                      	retn
 45131                                  badnum:
 45132                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45133                                  	;mov	byte [cs:sepchr],0
 45134 000048B4 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 45135                                  	; 12 /12/2022
 45136 000048B6 2EA2[AE02]              	mov	[cs:sepchr],al ; 0
 45137 000048BA 5B                      	pop	bx
 45138 000048BB F9                      	stc				; and carry set
 45139 000048BC C3                      	retn
 45140                                  
 45141                                  ;****************************************************************************
 45142                                  
 45143                                  setdoscountryinfo:
 45144                                  
 45145                                  ;----------------------------------------------------------------------------
 45146                                  ;input: es:di -> pointer to dos_country_cdpg_info
 45147                                  ;	ds:0  -> buffer.
 45148                                  ;	si = 0
 45149                                  ;	ax = country id
 45150                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 45151                                  ;	bx = file handle
 45152                                  ;	this routine can handle maximum 438 country_data entries.
 45153                                  ;
 45154                                  ;output: dos_country_cdpg_info set.
 45155                                  ;	 carry set if any file read failure or wrong information in the file.
 45156                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 45157                                  ;	 codepage_id in the file.
 45158                                  ;----------------------------------------------------------------------------
 45159                                  
 45160                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 45161                                  	; (SYSINIT:4D83h)
 45162                                  
 45163                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45164                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4FCAh)	
 45165                                  
 45166 000048BD 57                      	push	di
 45167 000048BE 50                      	push	ax
 45168 000048BF 52                      	push	dx
 45169                                  
 45170 000048C0 31C9                    	xor	cx,cx
 45171 000048C2 31D2                    	xor	dx,dx
 45172 000048C4 B80002                  	mov	ax,512			;read 512 bytes
 45173 000048C7 E84301                  	call	readincontrolbuffer	;read the file header
 45174 000048CA 724A                    	jc	short setdosdata_fail
 45175                                  
 45176 000048CC 06                      	push	es
 45177 000048CD 56                      	push	si
 45178                                  
 45179 000048CE 0E                      	push	cs
 45180 000048CF 07                      	pop	es
 45181                                  
 45182 000048D0 BF[204B]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 45183 000048D3 B90800                  	mov	cx,8			;length of the signature
 45184 000048D6 F3A6                    	repz	cmpsb
 45185                                  
 45186 000048D8 5E                      	pop	si
 45187 000048D9 07                      	pop	es
 45188 000048DA 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 45189                                  
 45190 000048DC 83C612                  	add	si,18			;si -> county info type
 45191 000048DF 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 45192 000048E2 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 45193                                  
 45194 000048E4 46                      	inc	si			;si -> file offset
 45195 000048E5 8B14                    	mov	dx,[si]			;get the info file offset.
 45196 000048E7 8B4C02                  	mov	cx,[si+2]
 45197 000048EA B80018                  	mov	ax,6144			;read 6144 bytes.
 45198 000048ED E81D01                  	call	readincontrolbuffer	;read info
 45199 000048F0 7224                    	jc	short setdosdata_fail
 45200                                  
 45201 000048F2 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 45202 000048F4 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 45203 000048F8 771C                    	ja	short setdosdata_fail
 45204                                  
 45205 000048FA 46                      	inc	si
 45206 000048FB 46                      	inc	si			;si -> entry information packet
 45207 000048FC 5A                      	pop	dx			;restore code page id
 45208 000048FD 58                      	pop	ax			;restore country id
 45209 000048FE 5F                      	pop	di
 45210                                  
 45211                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 45212 000048FF 3B4402                  	cmp	ax,[si+2]		;compare country_id
 45213 00004902 7509                    	jne	short setdoscntry_next
 45214                                  
 45215                                  	;cmp	dx,0			;no user specified code page ?
 45216                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 45217                                  	; 10/09/2023
 45218 00004904 09D2                    	or	dx,dx ; cmp dx,0
 45219 00004906 7413                    	jz	short setdoscntry_any_codepage
 45220 00004908 3B5404                  	cmp	dx,[si+4]		;compare code page id
 45221 0000490B 7411                    	je	short setdoscntry_got_it
 45222                                  
 45223                                  setdoscntry_next:
 45224 0000490D 0334                    	add	si,[si]			;next entry
 45225 0000490F 46                      	inc	si
 45226 00004910 46                      	inc	si			;take a word for size of entry itself
 45227 00004911 E2EC                    	loop	setdoscntry_find
 45228                                  
 45229                                  	;mov	cx,-1			;signals that bad country id entered.
 45230                                  	; 10/09/2023
 45231 00004913 49                      	dec	cx ; 0 -> -1
 45232                                  setdoscntry_fail:
 45233 00004914 F9                      	stc
 45234 00004915 C3                      	retn
 45235                                  
 45236                                  setdosdata_fail:
 45237 00004916 5E                      	pop	si
 45238 00004917 59                      	pop	cx
 45239 00004918 5F                      	pop	di
 45240 00004919 EBF9                    	jmp	short setdoscntry_fail
 45241                                  
 45242                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 45243 0000491B 8B5404                  	mov	dx,[si+4]
 45244                                  
 45245                                  setdoscntry_got_it:			;found the matching entry
 45246 0000491E 2E8916[284B]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 45247 00004923 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 45248 00004926 8B4C0C                  	mov	cx,[si+12]
 45249 00004929 B80002                  	mov	ax,512 			;read 512 bytes
 45250 0000492C E8DE00                  	call	readincontrolbuffer
 45251 0000492F 72E3                    	jc	short setdoscntry_fail
 45252                                  
 45253 00004931 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 45254 00004933 46                      	inc	si
 45255 00004934 46                      	inc	si			;si -> first entry
 45256                                  
 45257                                  setdoscntry_data:
 45258 00004935 57                      	push	di			;es:di -> dos_country_cdpg_info
 45259 00004936 51                      	push	cx			;save # of entry left
 45260 00004937 56                      	push	si			;si -> current entry in control buffer
 45261                                  
 45262 00004938 8A4402                  	mov	al,[si+2]		;get data entry id
 45263 0000493B E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 45264 0000493E 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 45265                                  
 45266 00004940 8B5404                  	mov	dx,[si+4]		;get offset of data
 45267 00004943 8B4C06                  	mov	cx,[si+6]
 45268 00004946 B80042                  	mov	ax,4200h
 45269 00004949 F9                      	stc
 45270 0000494A CD21                    	int	21h			;move pointer
 45271 0000494C 72C8                    	jc	short setdosdata_fail
 45272                                  
 45273 0000494E BA0002                  	mov	dx,512			;start of data buffer
 45274 00004951 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 45275 00004954 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 45276 00004956 F9                      	stc
 45277 00004957 CD21                    	int	21h			;read the country.sys data
 45278 00004959 72BB                    	jc	short setdosdata_fail 	;read failure
 45279                                  
 45280 0000495B 39C8                    	cmp	ax,cx
 45281 0000495D 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 45282                                  
 45283 0000495F 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 45284 00004962 8B4C06                  	mov	cx,[si+6]
 45285 00004965 B80042                  	mov	ax,4200h
 45286 00004968 F9                      	stc
 45287 00004969 CD21                    	int	21h			;move pointer back again
 45288 0000496B 72A9                    	jc	short setdosdata_fail
 45289                                  
 45290 0000496D 56                      	push	si
 45291 0000496E BE0802                  	mov	si,(512+8)		;get length of the data from the file
 45292 00004971 8B0C                    	mov	cx,[si]
 45293 00004973 5E                      	pop	si
 45294 00004974 BA0002                  	mov	dx,512			;start of data buffer
 45295 00004977 83C10A                  	add	cx,10			;signature + a word for the length itself
 45296 0000497A B43F                    	mov	ah,3Fh			;read the data from the file.
 45297 0000497C F9                      	stc
 45298 0000497D CD21                    	int	21h
 45299 0000497F 7295                    	jc	short setdosdata_fail
 45300                                  
 45301 00004981 39C8                    	cmp	ax,cx
 45302 00004983 7591                    	jne	short setdosdata_fail
 45303                                  
 45304 00004985 8A4402                  	mov	al,[si+2]		;save data id for future use.
 45305 00004988 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 45306 0000498B 8B0C                    	mov	cx,[si]			;get the length of the file
 45307 0000498D 41                      	inc	cx			;take care of a word for lenght of tab
 45308 0000498E 41                      	inc	cx			;itself.
 45309 0000498F 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 45310 00004993 7781                    	ja	short setdosdata_fail
 45311                                  
 45312                                  	;if	bugfix
 45313 00004995 E83100                  	call	setdbcs_before_copy
 45314                                  	;endif
 45315                                  
 45316 00004998 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 45317 0000499A 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 45318                                  
 45319 0000499C 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 45320                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 45321 000049A0 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 45322                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 45323                                  	
 45324 000049A4 57                      	push	di			;save di
 45325                                  
 45326                                  	;push	ax
 45327                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 45328                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 45329                                  	;pop	ax
 45330                                  	; 10/09/2023
 45331 000049A5 2EFF36[284B]            	push	word [cs:cntrycodepage_id]
 45332 000049AA 8F4404                  	pop	word [si+4]
 45333                                  
 45334                                  setdoscntry_mov:
 45335 000049AD F3A4                    	rep	movsb			;copy the table into dos
 45336 000049AF 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 45337 000049B1 7509                    	jne	short setdoscntry_data_next
 45338                                  
 45339 000049B3 5F                      	pop	di			;restore di
 45340 000049B4 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 45341                                  	;pop	word [es:di+26]		;restore
 45342 000049B8 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 45343                                  	;pop	word [es:di+24]
 45344                                  
 45345                                  setdoscntry_data_next:
 45346 000049BC 5E                      	pop	si			;restore control buffer pointer
 45347 000049BD 59                      	pop	cx			;restore # of entries left
 45348 000049BE 5F                      	pop	di			;restore pointer to dso_country_cdpg
 45349 000049BF 0334                    	add	si,[si]			;try to get the next entry
 45350 000049C1 46                      	inc	si
 45351 000049C2 46                      	inc	si			;take a word of entry length itself
 45352 000049C3 49                      	dec	cx
 45353                                  	; 10/09/2023
 45354 000049C4 741B                    	jz	short setdoscntry_ok 
 45355                                  	;cmp	cx,0
 45356                                  	;je	short setdoscntry_ok
 45357 000049C6 E96CFF                  	jmp	setdoscntry_data
 45358                                  
 45359                                  	; 18/12/2022
 45360                                  ;setdoscntry_ok:
 45361                                  	;retn
 45362                                  
 45363                                  ;----------------------------------------------------------------------------
 45364                                  	
 45365                                  	;if	bugfix
 45366                                  
 45367                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45368                                  
 45369                                  setdbcs_before_copy:
 45370 000049C9 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 45371 000049CB 7514                    	jne	short sdbcsbc		; jump if not
 45372                                  	
 45373                                  	; 10/09/2023
 45374 000049CD 50                      	push	ax
 45375 000049CE 31C0                    	xor	ax,ax
 45376 000049D0 263905                  	cmp	[es:di],ax ; 0
 45377 000049D3 740B                    	je	short sdbcsbc_pop
 45378                                  	
 45379                                  	;cmp	word [es:di],0		; zero byte data block?
 45380                                  	;je	short sdbcsbc		; jump if so
 45381                                  
 45382 000049D5 57                      	push	di
 45383                                  	; 10/09/2023
 45384                                  	;push	ax
 45385 000049D6 51                      	push	cx
 45386 000049D7 268B0D                  	mov	cx,[es:di]		; load block length
 45387                                  	;add	di,2			; points actual data
 45388 000049DA 47                      	inc	di
 45389 000049DB 47                      	inc	di
 45390                                  	;xor	al,al			; fill bytes
 45391 000049DC F3AA                    	rep	stosb			; clear data block
 45392 000049DE 59                      	pop	cx
 45393                                  	;pop	ax
 45394 000049DF 5F                      	pop	di
 45395                                  
 45396                                  sdbcsbc_pop:	; 10/09/2023
 45397 000049E0 58                      	pop	ax
 45398                                  sdbcsbc:
 45399                                  setdoscntry_ok:	; 18/12/2022
 45400 000049E1 C3                      	retn
 45401                                  
 45402                                  	;endif
 45403                                  
 45404                                  ;----------------------------------------------------------------------------
 45405                                  
 45406                                  getcountrydestination:
 45407                                  
 45408                                  ;----------------------------------------------------------------------------
 45409                                  ;get the destination address in the dos country info table.
 45410                                  ;
 45411                                  ;input: al - data id
 45412                                  ;	es:di -> dos_country_cdpg_info
 45413                                  ;on return:
 45414                                  ;	es:di -> destination address of the matching data id
 45415                                  ;	carry set if no matching data id found in dos.
 45416                                  ;----------------------------------------------------------------------------
 45417                                  
 45418                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 45419                                  	; (SYSINIT:4EB2h)
 45420                                  
 45421                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45422                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:50F9h)
 45423                                  
 45424 000049E2 51                      	push	cx
 45425                                  	;add	di,74
 45426 000049E3 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 45427                                  					;skip the reserved area, syscodepage etc.
 45428 000049E6 268B0D                  	mov	cx,[es:di]		;get the number of entries
 45429 000049E9 47                      	inc	di
 45430 000049EA 47                      	inc	di			;si -> the first start entry id
 45431                                  
 45432                                  getcntrydest:
 45433 000049EB 263805                  	cmp	byte [es:di],al
 45434 000049EE 7413                    	je	short getcntrydest_ok
 45435                                  
 45436 000049F0 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 45437 000049F4 7405                    	je	short getcntrydest_1
 45438                                  
 45439 000049F6 83C705                  	add	di,5			;next data id
 45440 000049F9 EB03                    	jmp	short getcntrydest_loop
 45441                                  
 45442                                  getcntrydest_1:
 45443                                  	;add	di,41
 45444 000049FB 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 45445                                  getcntrydest_loop:
 45446 000049FE E2EB                    	loop	getcntrydest
 45447 00004A00 F9                      	stc
 45448                                  	;jmp	short getcntrydest_exit
 45449                                  getcntrydest_exit:
 45450                                  	; 10/09/2023
 45451 00004A01 59                      	pop	cx
 45452 00004A02 C3                      	retn
 45453                                  
 45454                                  getcntrydest_ok:
 45455                                  	; 10/09/2023
 45456 00004A03 47                      	inc	di
 45457                                  
 45458                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 45459                                  ;	jne	short getcntrydest_ok1
 45460                                  ;
 45461                                  ;	;inc	di			;now di -> cccountryinfolen
 45462                                  ;	jmp	short getcntrydest_exit
 45463                                  
 45464                                  	; 10/09/2023
 45465 00004A04 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 45466 00004A06 74F9                    	je	short getcntrydest_exit
 45467                                  
 45468                                  getcntrydest_ok1:
 45469                                  	;les	di,[es:di+1]		;get the destination in es:di
 45470                                  	; 10/09/2023
 45471 00004A08 26C43D                  	les	di,[es:di]
 45472                                  ;getcntrydest_exit:
 45473 00004A0B 59                      	pop	cx
 45474 00004A0C C3                      	retn
 45475                                  
 45476                                  ;----------------------------------------------------------------------------
 45477                                  
 45478                                  readincontrolbuffer:
 45479                                  
 45480                                  ;----------------------------------------------------------------------------
 45481                                  ;move file pointer to cx:dx
 45482                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 45483                                  ;si will be set to 0 hence ds:si points to the control buffer.
 45484                                  ;
 45485                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 45486                                  ;	 be moved.
 45487                                  ;	 ax - # of bytes to read
 45488                                  ;	 bx - file handle
 45489                                  ;	 ds - buffer seg.
 45490                                  ;return: the control data information is read into ds:0 - ds:0200.
 45491                                  ;	 cx,dx value destroyed.
 45492                                  ;	 carry set if error in reading file.
 45493                                  ;----------------------------------------------------------------------------
 45494                                  
 45495 00004A0D 50                      	push	ax			;# of bytes to read
 45496 00004A0E B80042                  	mov	ax,4200h
 45497 00004A11 F9                      	stc
 45498 00004A12 CD21                    	int	21h			;move pointer
 45499 00004A14 59                      	pop	cx			;# of bytes to read
 45500 00004A15 7209                    	jc	short ricb_exit
 45501                                  
 45502 00004A17 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 45503 00004A19 31F6                    	xor	si,si
 45504 00004A1B B43F                    	mov	ah,3Fh			;read into the buffer
 45505 00004A1D F9                      	stc
 45506 00004A1E CD21                    	int	21h			;should be less than 1024 bytes.
 45507                                  ricb_exit:
 45508 00004A20 C3                      	retn
 45509                                  
 45510                                  ;----------------------------------------------------------------------------
 45511                                  
 45512                                  ;! set_country_path procedure is not called from anywhere !
 45513                                  ; Erdogan Tan - 04/08/2023
 45514                                  %if 0
 45515                                  
 45516                                  set_country_path:
 45517                                  
 45518                                  ;----------------------------------------------------------------------------
 45519                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 45520                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 45521                                  ;     assumes current directory is the root directory.
 45522                                  ;out: ds:di -> full path (cntry_drv).
 45523                                  ;     set the cntry_drv string from the country=,,path command.
 45524                                  ;     ds, es, si value saved.
 45525                                  ;----------------------------------------------------------------------------
 45526                                  
 45527                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 45528                                  	; (SYSINIT:4EF4h)
 45529                                  
 45530                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45531                                  	; (Retrodos v5.0 Pre-Works)
 45532                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:513Bh)
 45533                                  
 45534                                  	push	si
 45535                                  
 45536                                  	push	ds			;switch ds, es
 45537                                  	push	es
 45538                                  	pop	ds
 45539                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 45540                                  
 45541                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 45542                                  	jc	short scp_default_drv 	;no, use current default drive.
 45543                                  
 45544                                  	mov	al,[si]
 45545                                  	inc	si
 45546                                  	inc	si			;si -> next char after ":"
 45547                                  	jmp	short scp_setdrv
 45548                                  
 45549                                  scp_default_drv:
 45550                                  	mov	ah,19h
 45551                                  	int	21h
 45552                                  	add	al,"A"			;convert it to a character.
 45553                                  
 45554                                  scp_setdrv:
 45555                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 45556                                  	mov	di,cntry_path
 45557                                  	mov	al,[si]
 45558                                  	cmp	al, "\"
 45559                                  	je	short scp_root_dir
 45560                                  
 45561                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 45562                                  	;je	short scp_root_dir
 45563                                  	;jmp	short scp_path
 45564                                  	; 04/01/2023
 45565                                  	jne	short scp_path
 45566                                  
 45567                                  scp_root_dir:
 45568                                  	dec	di			;di -> cntry_root
 45569                                  scp_path:
 45570                                  	call	move_asciiz		;copy it
 45571                                  
 45572                                  	mov	di,cntry_drv
 45573                                  scpath_exit:
 45574                                  
 45575                                  	push	ds			;switch ds, es
 45576                                  	push	es
 45577                                  	pop	ds
 45578                                  	pop	es			;ds, es value restored
 45579                                  
 45580                                  	pop	si
 45581                                  	retn
 45582                                  
 45583                                  ;----------------------------------------------------------------------------
 45584                                  
 45585                                  chk_drive_letter:
 45586                                  
 45587                                  ;check if ds:[si] is a drive letter followed by ":".
 45588                                  ;assume that every alpha character is already converted to upper case.
 45589                                  ;carry set if not.
 45590                                  
 45591                                  	; 04/01/2023 - Retrodos v4.2
 45592                                  
 45593                                  	push	ax
 45594                                  	cmp	byte [si],"A"
 45595                                  	;jb	short cdletter_no
 45596                                  	jb	short cdletter_exit
 45597                                  	cmp	byte [si],"Z"
 45598                                  	ja	short cdletter_no
 45599                                  	cmp	byte [si+1],":"
 45600                                  	;jne	short cdletter_no
 45601                                  	;jmp	short cdletter_exit
 45602                                  	; 04/01/2023
 45603                                  	je	short cdletter_exit
 45604                                  
 45605                                  cdletter_no:
 45606                                  	stc
 45607                                  cdletter_exit:
 45608                                  	pop	ax
 45609                                  	retn
 45610                                  
 45611                                  %endif
 45612                                  
 45613                                  ;----------------------------------------------------------------------------
 45614                                  
 45615                                  move_asciiz:
 45616                                  
 45617                                  ;in: ds:si -> source es:di -> target
 45618                                  ;out: copy the string until 0.
 45619                                  ;assumes there exists a 0.
 45620                                  
 45621                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 45622                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:4F40h)
 45623                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5187h)
 45624                                  
 45625                                  masciiz_loop:
 45626                                  	; 10/09/2023
 45627 00004A21 F604FF                  	test	byte [si],0FFh
 45628 00004A24 A4                      	movsb
 45629                                  	;cmp	byte [si-1],0	; was it 0?
 45630                                  	;jne	short masciiz_loop
 45631 00004A25 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 45632 00004A27 C3                      	retn
 45633                                  
 45634                                  ;----------------------------------------------------------------------------
 45635                                  
 45636                                  ;	ds:dx points to string to output (asciz)
 45637                                  ;
 45638                                  ;	prints <badld_pre> <string> <badld_post>
 45639                                  
 45640                                  badfil:
 45641 00004A28 0E                      	push	cs
 45642 00004A29 07                      	pop	es
 45643                                  
 45644 00004A2A 89D6                    	mov	si,dx
 45645                                  badload:
 45646 00004A2C BA[B350]                	mov	dx,badld_pre	; want to print config error
 45647 00004A2F BB[7050]                	mov	bx,crlfm
 45648                                  prnerr:
 45649 00004A32 0E                      	push	cs
 45650 00004A33 1F                      	pop	ds ; *
 45651 00004A34 E81D00                  	call	print
 45652                                  prn1:
 45653 00004A37 268A14                  	mov	dl,[es:si]
 45654 00004A3A 08D2                    	or	dl,dl
 45655 00004A3C 7407                    	jz	short prn2
 45656 00004A3E B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 45657 00004A40 CD21                    	int	21h
 45658 00004A42 46                      	inc	si
 45659 00004A43 EBF2                    	jmp	short prn1
 45660                                  prn2:
 45661 00004A45 89DA                    	mov	dx,bx
 45662 00004A47 E80A00                  	call	print
 45663                                  	; 11/12/2022
 45664                                  	; ds = cs ; *
 45665 00004A4A 803E[5503]01            	cmp	byte [donotshownum],1
 45666                                  				; suppress line number when handling command.com
 45667                                  	;cmp	byte [cs:donotshownum],1 
 45668 00004A4F 7407                    	je	short prnexit
 45669                                  	
 45670                                  	; 18/12/2022
 45671                                  	;call	error_line
 45672 00004A51 E966E4                  	jmp	error_line
 45673                                  ;prnexit:
 45674                                  	;retn
 45675                                  
 45676                                  ;----------------------------------------------------------------------------
 45677                                  
 45678                                  print:
 45679 00004A54 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 45680 00004A56 CD21                    	int	21h
 45681                                  prnexit:	; 18/12/2022
 45682 00004A58 C3                      	retn
 45683                                  
 45684                                  ;----------------------------------------------------------------------------
 45685                                  
 45686                                  ;  open device pointed to by dx, al has access code
 45687                                  ;   if unable to open do a device open null device instead
 45688                                  
 45689                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 45690                                  	; (SYSINIT:3764h)
 45691                                  open_dev:
 45692 00004A59 E80500                  	call	open_file
 45693 00004A5C 7309                    	jnc	short open_dev3
 45694                                  
 45695                                  open_dev1:
 45696 00004A5E BA[C14A]                	mov	dx,nuldev
 45697                                  	; 18/12/2022
 45698                                  	;call	open_file
 45699                                  ;of_retn:
 45700                                  	;retn
 45701                                  	; 18/12/2022
 45702                                  	;jmp	short open_file
 45703                                  open_file:
 45704 00004A61 B43D                    	mov	ah,OPEN	; 3Dh
 45705 00004A63 F9                      	stc
 45706 00004A64 CD21                    	int	21h
 45707                                  of_retn:	; 18/12/2022
 45708 00004A66 C3                      	retn
 45709                                  
 45710                                  open_dev3:
 45711 00004A67 89C3                    	mov	bx,ax			; handle from open to bx
 45712                                  	;;xor	ax,ax			; get device info
 45713                                  	;;mov	ah,IOCTL ; 44h
 45714                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 45715                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45716                                  	;xor	ax,ax
 45717                                  	;mov	ah,44h	; IOCTL
 45718                                  	; 11/12/2022
 45719 00004A69 B80044                  	mov	ax,4400h ; IOCTL<<8 
 45720                                  
 45721 00004A6C CD21                    	int	21h
 45722                                  
 45723 00004A6E F6C280                  	test	dl,10000000b ; 80h
 45724 00004A71 75F3                    	jnz	short of_retn
 45725                                  
 45726 00004A73 B43E                    	mov	ah,CLOSE ; 3Eh
 45727 00004A75 CD21                    	int	21h
 45728 00004A77 EBE5                    	jmp	short open_dev1
 45729                                  
 45730                                  ;----------------------------------------------------------------------------
 45731                                  
 45732                                  ; 18/12/2022
 45733                                  %if 0
 45734                                  open_file:
 45735                                  	mov	ah,OPEN	; 3Dh
 45736                                  	stc
 45737                                  	int	21h
 45738                                  	retn
 45739                                  %endif
 45740                                  
 45741                                  ;----------------------------------------------------------------------------
 45742                                  
 45743                                  ; test int24. return back to dos with the fake user response of "fail"
 45744                                  
 45745                                  int24:
 45746 00004A79 B003                    	mov	al,3			; fail the system call
 45747 00004A7B CF                      	iret				; return back to dos.
 45748                                  
 45749                                  ; 19/04/2019 - Retro DOS v4.0
 45750                                  
 45751                                  ;----------------------------------------------------------------------------
 45752                                  ; DATA
 45753                                  ;----------------------------------------------------------------------------
 45754                                  
 45755                                  ;include copyrigh.inc			; copyright statement
 45756                                  
 45757                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 45758                                  
 45759                                  ;MsDosVersion6Copyr:
 45760                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 45761                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 45762                                  
 45763                                  ; 22/10/2022
 45764                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 45765                                  
 45766                                  ; 28/12/2022
 45767                                  %if 0
 45768                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45769                                  MsDosVersion5Copyr:
 45770                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 45771                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 45772                                  %endif
 45773                                  
 45774                                  ; 13/04/2024 - Retro DOS v5.0
 45775                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:51EAh	(IBMBIO.COM offset 42266)
 45776                                  %if 0
 45777                                  IBMDOSV71COPYR:
 45778                                  	db 'IBM DOS Version 7.1 (C)Copyright 1981-2002 IBM Corporation '
 45779                                  	db 'Licensed Material - Property of IBM All rights reserved '
 45780                                  %endif
 45781                                  
 45782                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45783                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 45784                                  ; 20/04/2019 - Retro DOS v4.0
 45785                                  ;BOOTMES:
 45786                                  ;	db      13
 45787                                  ;	db      10
 45788                                  ;	db      "MS-DOS version "
 45789                                  ;	db      MAJOR_VERSION + "0"
 45790                                  ;	db      "."
 45791                                  ;	db      (MINOR_VERSION / 10) + "0"
 45792                                  ;	db      (MINOR_VERSION % 10) + "0"
 45793                                  ;	db      13,10
 45794                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 45795                                  ;	; 22/10/2022
 45796                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 45797                                  ;	;
 45798                                  ;	db	0
 45799                                  
 45800                                  	; 01/01/2023 - Retro DOS v4.2
 45801                                  
 45802                                  	; 28/12/2022 - Retro DOS v4.1
 45803                                  ;MsDosVersion5Copyr:
 45804                                  ;  	db	13,10,"MS DOS Version 5.0"
 45805                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 45806                                  
 45807                                  	; 12/12/2022
 45808 00004A7C 00                      	db	0
 45809                                  ; 12/12/2022
 45810                                  BOOTMES:
 45811 00004A7D 0D0A                    	db	13,10
 45812                                  	;;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 45813                                  	; 28/12/2022
 45814                                  	;;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 45815                                  	; 01/01/2023
 45816                                  	;db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 45817                                  	; 30/12/2023
 45818 00004A7F 526574726F20444F53-     	db 	"Retro DOS v5.0 (Modified PCDOS 7.1) "
 45818 00004A88 2076352E3020284D6F-
 45818 00004A91 646966696564205043-
 45818 00004A9A 444F5320372E312920 
 45819                                  	
 45820 00004AA3 0D0A                    	db	13,10
 45821 00004AA5 6279204572646F6761-     	db	"by Erdogan Tan [2024] " ; 01/01/2024
 45821 00004AAE 6E2054616E205B3230-
 45821 00004AB7 32345D20           
 45822 00004ABB 0D0A                    	db	13,10
 45823 00004ABD 0D0A2400                	db	13,10,"$",0
 45824                                  
 45825 00004AC1 4E554C00                nuldev:	db	"NUL",0
 45826 00004AC5 434F4E00                condev:	db	"CON",0
 45827 00004AC9 41555800                auxdev:	db	"AUX",0
 45828 00004ACD 50524E00                prndev:	db	"PRN",0
 45829                                  
 45830                                  ;IFDEF	CONFIGPROC
 45831 00004AD1 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 45831 00004ADA 595300             
 45832                                  
 45833 00004ADD 413A                    cntry_drv:  db	"A:"
 45834 00004ADF 5C                      cntry_root: db	"\"
 45835 00004AE0 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 45835 00004AE9 595300             
 45836                                  	    ;db	52 dup (0)
 45837 00004AEC 00<rep 34h>             	    times 52 db 0	
 45838                                  
 45839                                  country_file_signature:
 45840 00004B20 FF434F554E545259        	db	0FFh,'COUNTRY'
 45841                                  
 45842                                  cntrycodepage_id: 
 45843 00004B28 0000                    	dw	0 	
 45844                                  
 45845                                  ;ENDIF ; CONFIGPROC
 45846                                  
 45847                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45848                                  ; (SYSINIT:5081h)
 45849                                  
 45850                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45851                                  ;ifdef	MULTI_CONFIG
 45852 00004B2A 00                      newcmd:  db	0			; non-zero if non-std shell specified
 45853 00004B2B 40                      tmplate: db	64                      ; must precede commnd
 45854                                  ;endif
 45855                                  
 45856                                  ;ifdef ROMEXEC
 45857                                  ;	db      7                       ; size of commnd line (excl. null)
 45858                                  ;commnd: db	"COMMAND",0
 45859                                  ;	db	56 dup (0)
 45860                                  ;else
 45861                                  	; 02/11/2022
 45862 00004B2C 0C                      	db	12                      ; size of commnd line (excl. null)
 45863 00004B2D 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 45863 00004B36 434F4D00           
 45864                                  	;db	51 dup (0)
 45865 00004B3A 00<rep 33h>             	times	51 db 0
 45866                                  ;endif
 45867                                  
 45868                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45869                                  ;ifdef	MULTI_CONFIG
 45870 00004B6D 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 45870 00004B76 434F4D00           
 45871 00004B7A 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 45872 00004B7E 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 45872 00004B87 4D4D414E442E434F4D-
 45872 00004B90 00                 
 45873 00004B91 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 45873 00004B9A 202F5000           
 45874 00004B9E 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 45874 00004BA7 414E442E434F4D00   
 45875 00004BAF 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 45875 00004BB8 5000               
 45876                                  def_swchr:	
 45877 00004BBA 00                      	 db	0			; default switchchar (referenced as command_line-1)
 45878                                  ;endif
 45879                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45880                                  command_line:
 45881 00004BBB 022F50                  	db	2,"/P"			; default command.com args
 45882                                  	;db	125 dup (0)
 45883 00004BBE 00<rep 7Dh>             	times	125 db 0
 45884                                  
 45885                                  pathstring:
 45886                                  	;db	64 dup (0)
 45887 00004C3B 00<rep 40h>             	times	64 db 0
 45888                                  
 45889                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 45890                                  ; (SYSINIT:51D3h)
 45891                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45892                                  ;%if 0
 45893                                  
 45894                                  dae_flag:
 45895 00004C7B 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 45896                                  
 45897                                  ;ifdef	MULTI_CONFIG
 45898                                  
 45899                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 45900                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 45901                                  
 45902                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 45903                                  
 45904 00004C7C 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 45905 00004C7D 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 45906 00004C7E 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 45907 00004C7F 00                      bLastCol:	db      0               ; ending column on status line
 45908 00004C80 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 45909 00004C81 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 45910                                                                          ; 2=disable default 2-second delay
 45911 00004C82 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 45912 00004C83 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 45913 00004C85 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 45914 00004C86 01                      bDefBlock:	db      1               ; default block #
 45915 00004C87 00                      bMaxBlock:	db      0               ; maxmimum block #
 45916 00004C88 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 45917 00004C8A FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 45918 00004C8B 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 45919 00004C8C 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 45920 00004C96 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 45921 00004CAA 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 45922                                  
 45923 00004CBE 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 45924 00004CC6 4D454E5500              szMenu:		db      "MENU",0
 45925 00004CCB 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 45926                                  
 45927                                  ;endif	;MULTI_CONFIG
 45928                                  
 45929                                  	; 10/09/2023
 45930                                  	; MSDOS 6.21 IO.SYS - SYSINIT:5229h 	
 45931                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:546Eh)
 45932                                  
 45933                                  comtab:	 ; label byte
 45934                                  
 45935                                  ;            cmd len    command         cmd code
 45936                                  ;            -------    -------         --------
 45937                                  
 45938                                  ;ifdef MULTI_CONFIG
 45939 00004CD2 015B5B                          db      1,      "[",            CONFIG_BEGIN
 45940                                  ;endif
 45941 00004CD5 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 45942 00004CDC 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 45943 00004CE5 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 45944 00004CEE 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 45945 00004CF7 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 45946 00004CFF 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 45946 00004D08 474855             
 45947 00004D0B 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 45948 00004D10 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 45948 00004D19 50                 
 45949 00004D1A 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 45950 00004D20 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 45951                                  ;ifdef MULTI_CONFIG
 45952 00004D27 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 45953                                  ;endif
 45954 00004D30 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 45955 00004D39 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 45955 00004D42 49474857           
 45956 00004D46 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 45956 00004D4F 454C               
 45957                                  ;ifdef MULTI_CONFIG
 45958 00004D51 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 45959 00004D5A 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 45959 00004D63 5252               
 45960 00004D65 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 45960 00004D6E 554C5441           
 45961 00004D72 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 45961 00004D7B 45                 
 45962                                  ;endif
 45963 00004D7C 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 45963 00004D85 434B4D             
 45964                                  ;ifdef MULTI_CONFIG
 45965 00004D88 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 45966                                  ;endif
 45967 00004D91 0352454D30                      db      3,      "REM",          CONFIG_REM
 45968                                  ;ifdef MULTI_CONFIG
 45969 00004D96 0353455456                      db      3,      "SET",          CONFIG_SET
 45970                                  ;endif
 45971 00004D9B 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 45972                                  ;if    STACKSW
 45973 00004DA2 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 45974                                  ;endif
 45975 00004DAA 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 45975 00004DB3 31                 
 45976 00004DB4 00                      	db	0
 45977                                  
 45978                                  	; 10/09/2023
 45979                                  ;aDosdata:  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5550h
 45980                                  	; 13/04/2024 - Retro DOS v5.0
 45981 00004DB5 07444F534441544154      	db	7,	"DOSDATA",	CONFIG_DOSDATA ; 'T'
 45982 00004DBE 00                      	db	0
 45983                                  
 45984                                  ;%endif ; 02/11/2022
 45985                                  
 45986                                  ; 01/01/2023 - Retro DOS v4.2
 45987                                  %if 0
 45988                                  
 45989                                  comtab:
 45990                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 45991                                  	; (SYSINIT:38EDh)
 45992                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 45993                                  	db      5,      "BREAK",        CONFIG_BREAK
 45994                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 45995                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 45996                                  	db      5,      "FILES",        CONFIG_FILES
 45997                                  	db      4,      "FCBS",         CONFIG_FCBS
 45998                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 45999                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 46000                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 46001                                  	db      6,      "STACKS",       CONFIG_STACKS
 46002                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 46003                                  	db      5,      "SHELL",        CONFIG_SHELL
 46004                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 46005                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 46006                                  	db      3,      "REM",          CONFIG_REM
 46007                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 46008                                  	db      3,      "DOS",          CONFIG_DOS
 46009                                  	db	0
 46010                                  
 46011                                  %endif
 46012                                  
 46013                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 46014                                  ; (SYSINIT:530Ch)
 46015                                  
 46016                                  ; 13/04/2024 - Retro DOS v5.0
 46017                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:555Ah)
 46018                                  
 46019                                  deviceparameters:	
 46020                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 46021                                  devp.specialfunc:	; deviceparameters +
 46022 00004DBF 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 46023                                  devp.devtype:
 46024 00004DC0 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 46025                                  devp.devattr:
 46026 00004DC1 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 46027                                  devp.cylinders:
 46028 00004DC3 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 46029                                  
 46030                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 46031                                  
 46032                                  	;times	286	db 0
 46033                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 46034 00004DC5 00                      	db	0
 46035                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 46036                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR
 46037 00004DC6 0000                    	dw	0
 46038                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER	
 46039 00004DC8 00                      	db	0	
 46040 00004DC9 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.RESERVEDSECTORS
 46041 00004DCB 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.NUMBEROFFATS
 46042 00004DCC 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.ROOTENTRIES
 46043                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS
 46044 00004DCE 0000                    	dw	0
 46045                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR
 46046 00004DD0 00                      	db	0
 46047 00004DD1 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERFAT
 46048                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK
 46049 00004DD3 0000                    	dw	0
 46050                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS
 46051 00004DD5 0000                    	dw	0	
 46052                                  
 46053                                  	; 13/04/2024 - Retro DOS v5.0
 46054                                  	; (PCDOS 7.1 IBMBIO.COM)
 46055 00004DD7 00<rep 44h>             	times	68 db 0	; PCDOS 7.1 (FAT32 BPB)
 46056                                  	;;times	14 db 0	; MSDOS 6.21
 46057                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HIDDENSECTORS
 46058                                  	;dw	0
 46059                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BIGTOTALSECTORS
 46060                                  	;dw	0
 46061                                  	;times	6 db 0	
 46062                                  
 46063                                  devp.trktblents:
 46064 00004E1B 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 46065                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 46066 00004E1D 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 46067                                  			; 63*4 bytes
 46068                                  
 46069                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 46070                                  ; (SYSINIT:5430h)
 46071                                  
 46072                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 46073                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:56B4h)
 46074                                  	
 46075 00004F19 0200                    hlim:	dw	2
 46076 00004F1B 0900                    slim:	dw	9
 46077                                  
 46078 00004F1D 00                      drive:	db	0
 46079                                  
 46080                                  switches:
 46081 00004F1E 0000                    	dw	0
 46082                                  
 46083                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 46084                                  ; (SYSINIT:5437h)
 46085                                  
 46086                                  ; the following are the recommended bpbs for the media that
 46087                                  ; we know of so far.
 46088                                  
 46089                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 46090                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 46091                                  
 46092                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 46093                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:56BBh	
 46094                                  
 46095                                  ; 48 tpi diskettes
 46096                                  
 46097 00004F20 0002                    bpb48t:	dw	512
 46098 00004F22 02                      	db	2
 46099 00004F23 0100                    	dw	1
 46100 00004F25 02                      	db	2
 46101 00004F26 7000                    	dw	112
 46102 00004F28 D002                    	dw	2*9*40 ; 720
 46103 00004F2A FD                      	db	0FDh
 46104 00004F2B 0200                    	dw	2
 46105 00004F2D 0900                    	dw	9
 46106 00004F2F 0200                    	dw	2
 46107 00004F31 00000000                	dd	0
 46108 00004F35 00000000                        dd      0
 46109                                  	; 27/12/2023
 46110 00004F39 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 46111 00004F55 90                      	db	90h	
 46112                                  
 46113                                  ; 96tpi diskettes
 46114                                  
 46115 00004F56 0002                    bpb96t:	dw	512
 46116 00004F58 01                      	db	1
 46117 00004F59 0100                    	dw	1
 46118 00004F5B 02                      	db	2
 46119 00004F5C E000                    	dw	224
 46120 00004F5E 6009                    	dw	2*15*80 ; 2400
 46121 00004F60 F9                      	db	0F9h
 46122 00004F61 0700                    	dw	7
 46123 00004F63 0F00                    	dw	15
 46124 00004F65 0200                    	dw	2
 46125 00004F67 00000000                	dd	0
 46126 00004F6B 00000000                        dd      0
 46127                                  	; 27/12/2023
 46128 00004F6F 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 46129 00004F8B 90                      	db	90h	
 46130                                  
 46131                                  ; 3 1/2 inch diskette bpb
 46132                                  
 46133 00004F8C 0002                    bpb35:	dw	512
 46134 00004F8E 02                      	db	2
 46135 00004F8F 0100                    	dw	1
 46136 00004F91 02                      	db	2
 46137 00004F92 7000                    	dw	112
 46138 00004F94 A005                    	dw	2*9*80 ; 1440
 46139 00004F96 F9                      	db	0F9h
 46140 00004F97 0300                    	dw	3
 46141 00004F99 0900                    	dw	9
 46142 00004F9B 0200                    	dw	2
 46143 00004F9D 00000000                	dd	0
 46144 00004FA1 00000000                        dd      0
 46145                                  	; 27/12/2023
 46146 00004FA5 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 46147 00004FC1 90                      	db	90h
 46148                                        
 46149 00004FC2 0002                    bpb35h:	dw	512
 46150 00004FC4 01                      	db	1
 46151 00004FC5 0100                    	dw	1
 46152 00004FC7 02                      	db	2
 46153 00004FC8 E000                    	dw	224
 46154 00004FCA 400B                    	dw	2*18*80 ; 2880
 46155 00004FCC F0                      	db	0F0h
 46156 00004FCD 0900                    	dw	9
 46157 00004FCF 1200                    	dw	18
 46158 00004FD1 0200                    	dw	2
 46159 00004FD3 00000000                	dd	0
 46160 00004FD7 00000000                        dd      0
 46161                                  	; 27/12/2023
 46162 00004FDB 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 46163 00004FF7 90                      	db	90h
 46164                                  
 46165                                  ; m037 - BEGIN
 46166                                  
 46167 00004FF8 0002                    bpb288:	dw	512
 46168 00004FFA 02                      	db	2
 46169 00004FFB 0100                    	dw	1
 46170 00004FFD 02                      	db	2
 46171 00004FFE F000                    	dw	240
 46172 00005000 8016                    	dw	2*36*80 ; 5760
 46173 00005002 F0                      	db	0F0h
 46174 00005003 0900                    	dw	9
 46175 00005005 2400                    	dw	36
 46176 00005007 0200                    	dw	2
 46177 00005009 00000000                	dd	0
 46178 0000500D 00000000                        dd      0
 46179                                  	; 27/12/2023
 46180 00005011 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 46181 0000502D 90                      	db	90h
 46182                                  
 46183                                  ; m037 - END
 46184                                  
 46185                                  ; 12/05/2019
 46186                                  
 46187                                  align 2
 46188                                  
 46189                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 46190                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 46191                                  
 46192                                  ; 13/04/2024 - Retro DOS v5.0
 46193                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5738h)
 46194                                  
 46195 0000502E [204F]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 46196 00005030 [564F]                  	    dw	    bpb96t		; 96tpi drives
 46197 00005032 [8C4F]                  	    dw	    bpb35		; 3.5" drives
 46198                                  ; the following are not supported, so default to 3.5" media layout
 46199 00005034 [8C4F]                  	    dw	    bpb35		; not used - 8" drives
 46200 00005036 [8C4F]                  	    dw	    bpb35		; not used - 8" drives
 46201 00005038 [8C4F]                  	    dw	    bpb35		; not used - hard files
 46202 0000503A [8C4F]                  	    dw	    bpb35		; not used - tape drives
 46203 0000503C [C24F]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 46204 0000503E [8C4F]                  	    dw	    bpb35		; ERIMO				m037
 46205 00005040 [F84F]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 46206                                  
 46207                                  switchlist: 
 46208 00005042 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 46209                                  
 46210                                  ;----------------------------------------------------------------------------
 46211                                  ; Messages
 46212                                  ;----------------------------------------------------------------------------
 46213                                  
 46214                                  ; 19/04/2019 - Retro DOS v4.0
 46215                                  
 46216                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 46217                                  
 46218 0000504B 00                      	db 	0
 46219                                  
 46220                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 46221                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 46222                                  
 46223                                  ; 13/04/2024
 46224                                  ; MSDOS 6.22 IO.SYS - SYSINIT:559Eh
 46225                                  
 46226                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 46227                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5756h
 46228                                  
 46229                                  badopm:
 46230 0000504C 0D0A                    	db	0Dh,0Ah 
 46231 0000504E 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 46231 00005057 7A656420636F6D6D61-
 46231 00005060 6E6420696E20434F4E-
 46231 00005069 4649472E535953     
 46232                                  crlfm:
 46233 00005070 0D0A24                  	db	0Dh,0Ah,'$'
 46234                                  badparm:
 46235 00005073 0D0A                    	db	0Dh,0Ah
 46236 00005075 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 46236 0000507E 6E64206F7220706172-
 46236 00005087 616D6574657273202D-
 46236 00005090 2024               
 46237                                  badsiz_pre:
 46238 00005092 0D0A                    	db	0Dh,0Ah
 46239 00005094 536563746F72207369-     	db	'Sector size too large in file $'
 46239 0000509D 7A6520746F6F206C61-
 46239 000050A6 72676520696E206669-
 46239 000050AF 6C652024           
 46240                                  badld_pre:
 46241 000050B3 0D0A                    	db	0Dh,0Ah
 46242 000050B5 426164206F72206D69-     	db	'Bad or missing $'
 46242 000050BE 7373696E672024     
 46243                                  badcom:
 46244 000050C5 436F6D6D616E642049-     	db	'Command Interpreter',0
 46244 000050CE 6E7465727072657465-
 46244 000050D7 7200               
 46245                                  badcountry:
 46246 000050D9 0D0A                    	db	0Dh,0Ah
 46247 000050DB 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 46247 000050E4 6F756E74727920636F-
 46247 000050ED 6465206F7220636F64-
 46247 000050F6 6520706167650D0A24 
 46248                                  badcountrycom:
 46249 000050FF 0D0A                    	db	0Dh,0Ah
 46250 00005101 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 46250 0000510A 434F554E5452592063-
 46250 00005113 6F6D6D616E640D0A24 
 46251                                  insufmemory:
 46252 0000511C 0D0A                    	db	0Dh,0Ah
 46253 0000511E 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 46253 00005127 656E74206D656D6F72-
 46253 00005130 7920666F7220434F55-
 46253 00005139 4E5452592E53595320-
 46253 00005142 66696C650D0A24     
 46254                                  badmem:
 46255 00005149 0D0A                    	db	0Dh,0Ah
 46256 0000514B 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 46256 00005154 74696F6E20746F6F20-
 46256 0000515D 6C6172676520666F72-
 46256 00005166 206D656D6F72790D0A-
 46256 0000516F 24                 
 46257                                  badblock:
 46258 00005170 0D0A                    	db	0Dh,0Ah
 46259 00005172 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 46259 0000517B 626C6F636B20646576-
 46259 00005184 696365730D0A24     
 46260                                  badstack:
 46261 0000518B 0D0A                    	db	0Dh,0Ah
 46262 0000518D 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 46262 00005196 5441434B2070617261-
 46262 0000519F 6D65746572730D0A24 
 46263                                  	; 18/12/2022
 46264                                  ;badorder:
 46265                                  	;db	0Dh,0Ah
 46266                                  	;db	'Incorrect order in CONFIG.SYS line $'
 46267                                  errorcmd:
 46268 000051A8 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 46268 000051B1 434F4E4649472E5359-
 46268 000051BA 53206C696E652024   
 46269                                  
 46270                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 46271                                  ; (SYSINIT:566Eh)
 46272                                  
 46273                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 46274                                  ;%if 0
 46275                                  
 46276 000051C2 4F4E                    OnOff:	db	'ON'
 46277 000051C4 4F4646                  OnOff2:	db	'OFF'
 46278                                  
 46279                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 46280                                  	; (SYSINIT:5673h)
 46281                                  ;StartMsg:
 46282                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 46283                                  ;	db	0Ah,0
 46284                                  
 46285                                  	; 17/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 46286                                  	; (SYSINIT:58F7h)
 46287                                  StartMsg:
 46288 000051C7 5374617274696E6720-     	db	'Starting PC DOS...',0Dh,0Ah
 46288 000051D0 504320444F532E2E2E-
 46288 000051D9 0D0A               
 46289 000051DB 0A00                    	db	0Ah,0
 46290                                  
 46291                                  _$PauseMsg:
 46292                                  	; 17/12/2023
 46293                                  	;db	'Press any key to continue . . .',0Dh,0Ah,'$'
 46294                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 46295 000051DD 507265737320616E79-     	db	'Press any key to continue...',0Dh,0Ah,'$'
 46295 000051E6 206B657920746F2063-
 46295 000051EF 6F6E74696E75652E2E-
 46295 000051F8 2E0D0A24           
 46296                                  _$CleanMsg:
 46297                                  	;db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 46298                                  	; 17/12/2023
 46299 000051FC 504320444F53206973-     	db	'PC DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 46299 00005205 20627970617373696E-
 46299 0000520E 6720796F757220434F-
 46299 00005217 4E4649472E53595320-
 46299 00005220 616E64204155544F45-
 46299 00005229 5845432E4241542066-
 46299 00005232 696C65732E0D0A24   
 46300                                  _$InterMsg:
 46301                                  	;db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 46302                                  	; 17/12/2023
 46303 0000523A 504320444F53207769-     	db	'PC DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 46303 00005243 6C6C2070726F6D7074-
 46303 0000524C 20796F7520746F2063-
 46303 00005255 6F6E6669726D206561-
 46303 0000525E 636820434F4E464947-
 46303 00005267 2E53595320636F6D6D-
 46303 00005270 616E642E0D0A24     
 46304                                  _$MenuHeader:
 46305 00005277 0D0A                    	db	0Dh,0Ah
 46306                                  	; 17/12/2023
 46307                                  	;db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 46308                                  	;db	'  '
 46309                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 46310                                  	;db 	0Dh,0Ah,'$'
 46311                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 46312 00005279 2020504320444F5320-     	db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 46312 00005282 372E31205374617274-
 46312 0000528B 7570204D656E750D0A 
 46313 00005294 2020                    	db	'  '
 46314 00005296 CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 46315 000052AD 0D0A24                  	db 	0Dh,0Ah,'$'
 46316                                  _$MenuPrmpt:
 46317 000052B0 2020456E7465722061-     	db	'  Enter a choice: $'
 46317 000052B9 2063686F6963653A20-
 46317 000052C2 24                 
 46318                                  _$StatusLine:
 46319 000052C3 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 46319 000052CC 207374617274757020-
 46319 000052D5 66696C65732046383D-
 46319 000052DE 436F6E6669726D2065-
 46319 000052E7 616368206C696E6520-
 46319 000052F0 6F6620434F4E464947-
 46319 000052F9 2E53595320         
 46320 000052FE 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 46320 00005307 5845432E424154205B-
 46320 00005310 205D24             
 46321                                  _$InterPrmpt:
 46322                                  	;db	' [Y,N]?$'
 46323                                  	; 13/04/2024
 46324                                  	; 04/08/2023
 46325 00005313 205B592C4E2C455343-     	db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 46325 0000531C 5D3F24             
 46326 0000531F 59455324                _$YES:	db	'YES$'
 46327 00005323 4E4F2024                _$NO:	db	'NO $'
 46328                                  _$TimeOut:
 46329 00005327 54696D652072656D61-     	db	'Time remaining: $'
 46329 00005330 696E696E673A2024   
 46330                                  badcomprmpt:
 46331                                  	;db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 46332                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 46333 00005338 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (for example, C:\COMMAND.COM)'
 46333 00005341 72656374206E616D65-
 46333 0000534A 206F6620436F6D6D61-
 46333 00005353 6E6420496E74657270-
 46333 0000535C 72657465722028666F-
 46333 00005365 72206578616D706C65-
 46333 0000536E 2C20433A5C434F4D4D-
 46333 00005377 414E442E434F4D29   
 46334 0000537F 0D0A24                  	db	0Dh,0Ah,'$'
 46335                                  _$AutoPrmpt:
 46336 00005382 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 46336 0000538B 55544F455845432E42-
 46336 00005394 4154205B592C4E5D3F-
 46336 0000539D 24                 
 46337                                  
 46338                                  ;%endif ; 02/11/2022
 46339                                  
 46340                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 46341                                  ; (SYSINIT:5840h)
 46342                                  
 46343                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 46344                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 46345                                  
 46346                                  TooManyDrivesMsg:
 46347 0000539E 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 46347 000053A7 4C6F676963616C2064-
 46347 000053B0 726976657320706173-
 46347 000053B9 74205A3A2065786973-
 46347 000053C2 7420616E642077696C-
 46347 000053CB 6C2062652069676E6F-
 46347 000053D4 7265640D0A24       
 46348                                  
 46349                                  ; MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 46350                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 46351                                  	;db	7 dup(0)
 46352                                  
 46353                                  	;times	7 db 0
 46354                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 46355                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 46356                                  	; 09/12/2022
 46357                                  	;times 4 db 0
 46358                                  
 46359                                  	; 08/04/2024 - Retro DOS v5.0
 46360                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5B0Bh
 46361                                  baddblspace:
 46362 000053DA 526571756972656420-     	db	'Required system component is not installed',0Dh,0Ah,'$',0
 46362 000053E3 73797374656D20636F-
 46362 000053EC 6D706F6E656E742069-
 46362 000053F5 73206E6F7420696E73-
 46362 000053FE 74616C6C65640D0A24-
 46362 00005407 00                 
 46363                                  	;db	7 dup(0)
 46364                                  
 46365                                  ;----------------------------------------------------------------------------
 46366                                  		; 09/12/2022
 46367                                  		;db 0
 46368                                  
 46369                                  number3div	equ ($-SYSINIT$)
 46370                                  number3mod	equ (number3div % 16)
 46371                                  
 46372                                  %if number3mod>0 & number3mod<16
 46373 00005408 00<rep 8h>              		times (16-number3mod) db 0
 46374                                  %endif
 46375                                  
 46376                                  ;----------------------------------------------------------------------------
 46377                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 46378                                  ;----------------------------------------------------------------------------
 46379                                  
 46380                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 46381                                  
 46382                                  ;----------------------------------------------------------------------------
 46383                                  ; 20/04/2019 - Retro DOS v4.0
 46384                                  
 46385                                  ; 09/12/2022
 46386                                  ;
 46387                                  ;bss_start:
 46388                                  ;
 46389                                  ;ABSOLUTE bss_start
 46390                                  ;
 46391                                  ;alignb 16
 46392                                  
 46393                                  SI_end:  ; SI_end equ $
 46394                                  
 46395                                  ;----------------------------------------------------------------------------
 46396                                  
 46397                                  ;sysinitseg	ends
 46398                                  
 46399                                  ; ***************************************************************************
 46400                                  
 46401                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 46402                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 46403                                  
 46404                                  SYSINITSIZE	equ SI_end - SYSINIT$
 46405                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 46406                                  
 46407                                  ;----------------------------------------------------------------------------
 46408                                  ; End of Retro DOS 5.0 (PCDOS 7.1) IBMBIO.COM src by Erdogan Tan -21/04/2024-
 46409                                  ;----------------------------------------------------------------------------
