     1                                  ; ****************************************************************************
     2                                  ; RD5FDIMG.ASM (RD5FDIMG.COM) - Retro DOS v5.0 Floppy Disk Image Formatting
     3                                  ;						  Utility for MSDOS/WINDOWS
     4                                  ; ----------------------------------------------------------------------------
     5                                  ; Only for 1.44MB (3.5") Floppy Disks
     6                                  ; ****************************************************************************
     7                                  ; Last Update: 20/04/2024
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Beginning: 11/02/2018
    10                                  ; ----------------------------------------------------------------------------
    11                                  ; Assembler: NASM version 2.15
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Retro DOS Operating System Project by ERDOGAN TAN (Beginning: 04/02/2018)
    14                                  ; ----------------------------------------------------------------------------
    15                                  ; Modified from 'rfdi1440.s'(RFDI1440.COM) src code by Erdogan Tan, 25/10/2023
    16                                  ; ****************************************************************************
    17                                  ; nasm rfdi5a0h.s -l rfdi5a0h.txt -o RD5FDIMG.COM
    18                                  
    19                                  ; RFDI5A0H.COM - Retro DOS v5.0 - 20/04/2024
    20                                  
    21                                  ; rfdi1440.s - Retro DOS v4.0-v4.2 - 25/10/2023
    22                                  
    23                                  bsDriveNumber   equ RETRODOS_FAT12_FDBS + 36
    24                                  bsVolumeID      equ RETRODOS_FAT12_FDBS + 39
    25                                  bsVolumeLabel   equ RETRODOS_FAT12_FDBS + 43
    26                                  
    27                                  ; DTA (PSP+80h= Offset 128)
    28                                  DTA_Attrib equ 149 ; PDP+21
    29                                  DTA_Time equ 150 ; PSP+22
    30                                  DTA_Date equ 152 ; PSP 24
    31                                  DTA_FileSize equ 154 ; PSP + 26
    32                                  DTA_FileName equ 158 ; PSP + 30
    33                                  
    34                                  [BITS 16]
    35                                  [ORG 100h]
    36                                  
    37                                  	;cli
    38                                  	;cld
    39                                  	;push	cs
    40                                  	;pop	ss
    41                                  	;mov	sp, 0FFFEh
    42                                  	;sti
    43                                  	
    44 00000000 BB[730B]                	mov	bx, SizeOfFile+100
    45 00000003 83C30F                          add	bx, 15
    46 00000006 D1EB                            shr	bx, 1
    47 00000008 D1EB                            shr	bx, 1
    48 0000000A D1EB                    	shr	bx, 1
    49 0000000C D1EB                    	shr	bx, 1
    50 0000000E B44A                            mov	ah, 4Ah ; modify memory allocation
    51                                          ;push	cs
    52                                          ;pop	es
    53 00000010 CD21                            int	21h
    54                                  
    55                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    56                                  ; get fd image file name
    57                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    58                                  
    59 00000012 BE8000                  	mov	si, 80h			; PSP command tail
    60 00000015 AC                       	lodsb
    61 00000016 08C0                    	or	al, al 			; command tail length
    62 00000018 0F84C700                	jz	R_17			; jump if zero
    63                                  R_01:
    64 0000001C AC                      	lodsb
    65 0000001D 3C20                    	cmp	al, ' '			; is it SPACE ?
    66 0000001F 74FB                    	je	short R_01
    67 00000021 0F82BE00                	jb	R_17
    68                                  	
    69                                  	; check fd image file name
    70                                  R_02:
    71 00000025 BF[660B]                       	mov	di, img_file_name
    72 00000028 AA                      	stosb
    73                                  R_03:
    74 00000029 AC                      	lodsb
    75                                  	;cmp	al, 0Dh ; ENTER (CR) key
    76 0000002A 3C20                    	cmp	al, 20h ; ' '
    77 0000002C 760C                    	jna	short R_04
    78 0000002E AA                      	stosb
    79 0000002F 81FF[720B]              	cmp	di, img_file_name + 12
    80 00000033 72F4                    	jb	short R_03
    81 00000035 803C20                  	cmp	byte [si], 20h 
    82 00000038 773F                    	ja	short R_11
    83                                  R_04:
    84                                  	;sub	al, al
    85                                  	;stosb
    86                                  
    87                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    88                                  ; File name capitalization
    89                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    90                                  
    91 0000003A BE[660B]                	mov	si, img_file_name
    92 0000003D 89F7                    	mov	di, si
    93 0000003F 89F3                    	mov	bx, si
    94                                  R_05:
    95 00000041 AC                      	lodsb
    96 00000042 3C61                    	cmp	al, 'a'
    97 00000044 730D                    	jnb	short R_07
    98 00000046 20C0                    	and	al, al
    99 00000048 7412                    	jz	short R_08
   100 0000004A 3C2E                    	cmp	al, '.'
   101 0000004C 7502                    	jne	short R_06
   102 0000004E 89FB                    	mov	bx, di ; dot position
   103                                  R_06:
   104 00000050 AA                      	stosb
   105 00000051 EBEE                    	jmp	short R_05
   106                                  R_07:
   107 00000053 3C7A                    	cmp	al, 'z'
   108 00000055 77F9                    	ja	short R_06
   109 00000057 24DF                    	and	al, 0DFh ; NOT 32
   110 00000059 AA                      	stosb
   111 0000005A EBE5                    	jmp	short R_05
   112                                  R_08:
   113 0000005C 8805                    	mov	[di], al
   114 0000005E 4F                      	dec	di
   115 0000005F 39FB                    	cmp	bx, di
   116 00000061 7316                    	jnb	short R_11
   117 00000063 29DF                    	sub	di, bx
   118 00000065 81EB[660B]              	sub	bx, img_file_name
   119 00000069 83FF03                  	cmp	di, 3
   120 0000006C 7606                    	jna	short R_09
   121 0000006E 21DB                    	and	bx, bx
   122 00000070 7507                    	jnz	short R_11
   123 00000072 EB0D                    	jmp	short R_10
   124                                  R_09:
   125 00000074 83FB08                  	cmp	bx, 8
   126 00000077 7608                    	jna	short R_10
   127                                  R_11:
   128 00000079 BE[DA05]                	mov	si, msg_inv_file_name
   129                                  R_12:	
   130 0000007C E8B201                  	call	print_msg
   131 0000007F EB57                    	jmp	short R_16
   132                                  
   133                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   134                                  ; Find image file
   135                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   136                                  	
   137                                  R_10:
   138 00000081 BA[660B]                	mov	dx, img_file_name
   139 00000084 B93F00                  	mov	cx, 3Fh ; File Attributes
   140 00000087 B44E                    	mov	ah, 4Eh ; MS-DOS Function = Find First File
   141 00000089 CD21                    	int	21h
   142 0000008B 726B                    	jc	R_20
   143                                  
   144                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   145                                  ; Check image file features
   146                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   147                                  
   148                                  R_14:
   149 0000008D BE9500                  	mov	si, DTA_Attrib
   150 00000090 8A04                    	mov	al, [si]
   151 00000092 241F                    	and	al, 1Fh ; directory, volume label, system, hidden, read only
   152 00000094 755D                    	jnz	short R_19
   153 00000096 BE9A00                  	mov	si, DTA_FileSize
   154 00000099 AD                      	lodsw
   155 0000009A 833C16                  	cmp	word [SI], 16h
   156 0000009D 7554                    	jne	short R_19
   157 0000009F 3D0080                  	cmp	ax, 8000h ; 1.44 MB floppy disk image (168000h bytes)
   158 000000A2 754F                    	jne	short R_19
   159                                  
   160                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   161                                  ; Overwrite question
   162                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   163                                  
   164 000000A4 BE[6606]                	mov	si, msg_overwrite_question1
   165 000000A7 E88701                  	call	print_msg
   166 000000AA BE9E00                  	mov	si, DTA_FileName
   167 000000AD E88101                  	call	print_msg
   168 000000B0 BE[8306]                	mov	si, msg_overwrite_question2
   169 000000B3 E87B01                  	call	print_msg
   170 000000B6 BE[8B06]                	mov	si, msg_yes_no
   171 000000B9 E87501                  	call	print_msg
   172                                  
   173                                  	; get answer
   174                                  R_15:
   175 000000BC 31C0                    	xor	ax, ax
   176 000000BE CD16                    	int	16h			; wait for keyboard command
   177 000000C0 3C03                    	cmp	al, 'C'-40h
   178 000000C2 7414                    	je	short R_16 ; Exit
   179 000000C4 3C1B                    	cmp	al, 27
   180 000000C6 7410                    	je	short R_16 ; Exit
   181 000000C8 24DF                    	and	al, 0DFh
   182 000000CA 3C59                    	cmp	al, 'Y'			; Yes?
   183 000000CC 741D                    	je	short R_18		; write
   184 000000CE 3C4E                    	cmp	al, 'N'			; No?
   185 000000D0 75EA                    	jne	short R_15
   186                                  					; no write (exit)  
   187 000000D2 BE[3507]                	mov	si, Msg_NO
   188 000000D5 E85901                  	call	print_msg
   189                                  
   190                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   191                                  ; Nextline & Exit
   192                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   193                                  
   194                                  R_16:
   195 000000D8 BE[2D07]                	mov	si, CRLF
   196 000000DB E85301                  	call	print_msg
   197 000000DE B8004C                  	mov	ax, 4C00h		; terminate
   198 000000E1 CD21                    	int	21h
   199                                  
   200                                  R_17:
   201 000000E3 BE[4705]                	mov	si, RetroDOS_Welcome
   202 000000E6 E84801                  	call	print_msg
   203 000000E9 EBED                    	jmp	short R_16 ; Exit
   204                                  
   205                                  R_18:
   206 000000EB BE[3007]                	mov	si, Msg_YES
   207 000000EE E84001                  	call	print_msg
   208 000000F1 EB10                    	jmp	short R_21
   209                                  
   210                                  R_19:
   211 000000F3 BE[1C06]                	mov	si, msg_inv_image_file
   212 000000F6 EB84                    	jmp	short R_12
   213                                  
   214                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   215                                  ; Create image file
   216                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   217                                  
   218                                  R_20:
   219                                  	; create a new fd image file
   220                                  	;mov	dx, img_file_name
   221 000000F8 B90000                  	mov	cx, 0 ; File Attributes
   222 000000FB B43C                    	mov	ah, 3Ch ; MS-DOS Function = Create File
   223 000000FD CD21                    	int	21h
   224 000000FF 0F8276FF                	jc	R_11
   225                                  
   226                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   227                                  ; writing root directory sectors
   228                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   229                                  
   230                                  R_21:
   231 00000103 BE[2D07]                	mov	si, CRLF
   232 00000106 E82801                  	call	print_msg
   233                                  
   234                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   235                                  ; Open image file for writing
   236                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   237                                  
   238 00000109 B002                    	mov	al, 2 ; open for reading and writing
   239                                  	;mov	dx, img_file_name
   240 0000010B B43D                    	mov	ah, 3Dh ; open file
   241 0000010D CD21                    	int	21h
   242 0000010F 0F8266FF                	jc	R_11
   243                                  
   244 00000113 A3[4505]                	mov	[img_file_handle], ax
   245                                  
   246 00000116 BE[B606]                	mov	si, Msg_Writing_Root_Dir
   247 00000119 E81501                  	call	print_msg
   248                                  
   249 0000011C B81300                  	mov	ax, 19  ; Root Directory Address
   250 0000011F BB[4D09]                	mov	bx, FDFORMAT_FATBUFFER_S9
   251                                  R_22:
   252 00000122 E81B01                  	call	write_fd_sector
   253 00000125 0F82E500                	jc	R_29
   254 00000129 40                      	inc	ax
   255 0000012A 83F820                   	cmp	ax, 32 ; 19+14 = 33 (14 sectors, 224 entries)
   256 0000012D 76F3                    	jna	short R_22
   257                                  
   258 0000012F BE[2907]                	mov	si, Msg_OK
   259 00000132 E8FC00                  	call	print_msg
   260                                  
   261                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   262                                  ; writing data sectors
   263                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   264                                  
   265 00000135 BE[D806]                	mov	si, Msg_Writing_Data_Sectors
   266 00000138 E8F600                  	call	print_msg
   267 0000013B B403                    	mov	ah, 3
   268 0000013D BB0700                  	mov	bx, 7
   269 00000140 CD10                    	int	10h ; Return Cursor Position
   270                                  	; DL = Column, DH= Line
   271 00000142 8916[F306]              	mov	[Cursor_Pos], dx
   272 00000146 B82100                  	mov	ax, 33  ; First Data Sector
   273                                  R_23:
   274 00000149 50                      	push	ax
   275 0000014A 40                      	inc	ax ; 1 based printing of 0 based sectors
   276 0000014B BE[F106]                	mov	si, Sector_Str + 3
   277 0000014E E81401                  	call	bin_to_decimal
   278 00000151 8B16[F306]              	mov	dx, [Cursor_Pos]
   279 00000155 B402                    	mov	ah, 2
   280 00000157 CD10                    	int	10h  ; Set Cursor Position
   281 00000159 E8D500                  	call	print_msg
   282 0000015C 58                      	pop	ax
   283 0000015D BB[4A07]                	mov	bx, FDFORMAT_SECBUFFER
   284 00000160 E8DD00                  	call	write_fd_sector
   285 00000163 0F82A700                	jc	R_29
   286                                  
   287 00000167 BB0700                  	mov	bx, 7
   288 0000016A 40                      	inc	ax
   289 0000016B 3D400B                  	cmp	ax, 2880
   290 0000016E 72D9                    	jb	short R_23
   291                                  
   292 00000170 BE[2607]                	mov	si, Msg_3dot_OK
   293 00000173 E8BB00                  	call	print_msg
   294                                  
   295                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   296                                  ; writing FAT sectors
   297                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   298                                  
   299 00000176 BE[F506]                	mov	si, Msg_Writing_FAT_Sectors
   300 00000179 E8B500                  	call	print_msg
   301 0000017C B80100                  	mov	ax, 1  ; FAT Beginning Address
   302 0000017F BB[4A09]                	mov	bx, FDFORMAT_FATBUFFER
   303 00000182 E8BB00                  	call	write_fd_sector
   304 00000185 0F828500                	jc	R_29
   305 00000189 BB[4D09]                	mov	bx, FDFORMAT_FATBUFFER_S9
   306                                  R_24:
   307 0000018C 40                      	inc	ax
   308 0000018D E8B000                  	call	write_fd_sector
   309 00000190 727C                     	jc	short R_29
   310 00000192 83F809                  	cmp	ax, 9
   311 00000195 72F5                    	jb	short R_24
   312 00000197 BB[4A09]                	mov	bx, FDFORMAT_FATBUFFER
   313 0000019A 40                      	inc	ax
   314 0000019B E8A200                  	call	write_fd_sector
   315 0000019E 726E                    	jc	short R_29
   316 000001A0 BB[4D09]                	mov	bx, FDFORMAT_FATBUFFER_S9
   317                                  R_25:
   318 000001A3 40                      	inc	ax 
   319 000001A4 E89900                          call	write_fd_sector
   320 000001A7 7265                    	jc	short R_29
   321 000001A9 83F812                  	cmp	ax, 18
   322 000001AC 72F5                    	jb	short R_25
   323                                  
   324 000001AE BE[2907]                	mov	si, Msg_OK
   325 000001B1 E87D00                  	call	print_msg
   326                                  
   327 000001B4 BE[1807]                	mov	si, Msg_Volume_Name
   328 000001B7 E87700                  	call	print_msg
   329 000001BA E8DD00                  	call	rw_char
   330 000001BD 7219                    	jc	short R_28
   331 000001BF 8A04                    	mov	al, [si]
   332 000001C1 3C20                    	cmp	al, 20h
   333 000001C3 7613                    	jna	short R_28
   334 000001C5 BF[5F03]                	mov	di, bsVolumeLabel
   335 000001C8 B90B00                  	mov	cx, 11
   336 000001CB 46                      	inc	si
   337 000001CC EB06                    	jmp	short R_27
   338                                  
   339                                  R_26:
   340 000001CE AC                      	lodsb
   341 000001CF 47                      	inc	di
   342 000001D0 3C20                    	cmp	al, 20h
   343 000001D2 7655                    	jna	short R_32
   344                                  R_27:
   345 000001D4 8805                    	mov 	[di], al
   346 000001D6 E2F6                    	loop	R_26
   347                                  
   348                                  R_28:
   349 000001D8 BE[9606]                	mov	si, Msg_Writing_Boot_Sector
   350 000001DB E85300                  	call	print_msg
   351                                  
   352 000001DE BE[5B03]                	mov	si, bsVolumeID
   353                                  
   354 000001E1 31C0                    	xor	ax, ax
   355 000001E3 CD1A                    	int	1Ah			; get time of day
   356 000001E5 8914                    	mov	[si], dx
   357 000001E7 894C02                  	mov	[si+2], cx		; set unique volume ID
   358                                  
   359 000001EA B402                    	mov	ah, 02h			; Return Current Time
   360 000001EC CD1A                    	int	1Ah
   361 000001EE 86E9                    	xchg	ch, cl
   362 000001F0 86F2                    	xchg	dh, dl
   363                                  
   364 000001F2 01D1                    	add	cx, dx  
   365 000001F4 014C02                  	add	[si+2], cx
   366                                                 
   367 000001F7 B404                    	mov	ah, 04h			; Return Current Date
   368 000001F9 CD1A                    	int	1Ah
   369 000001FB 86E9                    	xchg	ch,cl
   370 000001FD 86F2                    	xchg	dh,dl
   371                                  
   372 000001FF 01D1                    	add	cx, dx
   373 00000201 014C02                  	add	[si+2], cx
   374                                  
   375 00000204 31C0                    	xor	ax, ax ; Boot sector
   376 00000206 BB[3403]                	mov	bx, RETRODOS_FAT12_FDBS	; location of boot code
   377                                  
   378 00000209 E83400                  	call	write_fd_sector
   379 0000020C 7313                    	jnc	short R_30
   380                                  R_29:
   381 0000020E 88E0                    	mov	al, ah ;  error code
   382 00000210 E86700                  	call	bin_to_hex
   383 00000213 A3[4407]                	mov 	[error_code], ax
   384                                  
   385 00000216 BE[2D07]                	mov	si, CRLF
   386 00000219 E81500                  	call	print_msg
   387                                  
   388 0000021C BE[3907]                	mov	si, Msg_Error
   389 0000021F EB03                    	jmp	short R_31
   390                                  
   391                                  R_30:
   392 00000221 BE[2907]                	mov	si, Msg_OK
   393                                  R_31:
   394 00000224 E80A00                  	call	print_msg
   395                                  
   396 00000227 CD20                    	int	20h	; Exit
   397                                  
   398                                  R_32:
   399 00000229 C60520                  	mov	byte [di], 20h
   400 0000022C 47                      	inc	di
   401 0000022D E2FA                    	loop	R_32
   402 0000022F EBA7                    	jmp	short R_28
   403                                  
   404                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   405                                  ; Print messages
   406                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   407                                  
   408                                  print_msg:
   409                                  
   410                                  print_msg_LOOP:
   411 00000231 AC                      	lodsb                           ; Load byte at DS:SI to AL
   412 00000232 20C0                    	and     al, al
   413 00000234 7409                    	jz      short print_msg_OK
   414 00000236 B40E                    	mov	ah, 0Eh
   415 00000238 BB0700                  	mov     bx, 07h
   416 0000023B CD10                    	int	10h			; BIOS Service func ( ah ) = 0Eh
   417                                  					; Write char as TTY
   418                                  					; AL-char BH-page BL-color
   419 0000023D EBF2                    	jmp     short print_msg_LOOP           
   420                                  
   421                                  print_msg_OK:
   422 0000023F C3                      	retn
   423                                  
   424                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   425                                  ; Writing a block (sector) to floppy disk image file
   426                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   427                                  
   428                                  write_fd_sector:
   429                                  	; writing a block (sector) to floppy disk image file
   430                                  	; Only for 1.44 MB FAT12 Floppy Disks
   431                                  	; INPUT -> AX = Logical Block (Sector) Address
   432                                  	; ES:BX = Sector Buffer
   433                                  	; OUTPUT ->
   434                                  	; cf = 0 -> AX = Logical Block (Sector) Address
   435                                  	; cf = 1 -> AH = Error Number
   436                                  	;
   437 00000240 50                      	push	ax ; sector
   438 00000241 53                      	push	bx ; buffer
   439 00000242 BA0002                  	mov	dx, 512
   440 00000245 F7E2                    	mul	dx
   441 00000247 89D1                    	mov	cx, dx
   442 00000249 89C2                    	mov	dx, ax
   443 0000024B 28C0                    	sub	al, al ; specified offset is from the beginning of the file
   444 0000024D B442                    	mov	ah, 42h ; seek (move file pointer)
   445 0000024F 8B1E[4505]              	mov 	bx, [img_file_handle]
   446 00000253 CD21                    	int	21h
   447                                  	;mov	bx, [img_file_handle]
   448 00000255 B90002                  	mov	cx, 512
   449 00000258 5A                      	pop	dx  ; buffer address
   450 00000259 B440                    	mov	ah, 40h ; write to file
   451 0000025B CD21                    	int	21h
   452 0000025D 89D3                    	mov	bx, dx
   453 0000025F 7202                    	jc	short image_file_wr_err
   454 00000261 58                      	pop	ax ; sector
   455 00000262 C3                      	retn
   456                                  	
   457                                  image_file_wr_err:
   458 00000263 5A                      	pop	dx ; sector
   459 00000264 C3                      	retn
   460                                  	
   461                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   462                                  ; Convert byte to decimal number
   463                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   464                                  
   465                                  bin_to_decimal:
   466                                  	; INPUT: DS:SI = Target location
   467                                  	;        AX= Binary Number (Integer)
   468                                  	; OUTPUT: Decimal char at DS:SI
   469                                  	; SI decremented after every division
   470                                  	; till AX<10.
   471                                  	; CX, DX will be changed.
   472                                  	;
   473 00000265 B90A00                  	mov	cx, 10
   474                                  loc_btd_re_divide:
   475 00000268 31D2                    	xor	dx, dx
   476 0000026A F7F1                    	div	cx
   477 0000026C 80C230                  	add	dl,"0"
   478 0000026F 8814                    	mov	[si], dl
   479 00000271 83F800                  	cmp	ax, 0
   480 00000274 7603                    	jna	short pass_btd_re_divide
   481 00000276 4E                      	dec	si
   482 00000277 EBEF                    	jmp	short loc_btd_re_divide
   483                                  pass_btd_re_divide:
   484 00000279 C3                      	retn
   485                                  
   486                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   487                                  ; Convert byte to hexadecimal number
   488                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   489                                  
   490                                  bin_to_hex:
   491                                  	; INPUT ->
   492                                  	; 	AL = byte (binary number)
   493                                  	; OUTPUT ->
   494                                  	;	AX = hexadecimal string
   495                                  	;
   496 0000027A 6653                    	push	ebx
   497 0000027C 6631DB                  	xor	ebx, ebx
   498 0000027F 88C3                    	mov	bl, al
   499 00000281 C0EB04                  	shr	bl, 4
   500 00000284 678A9B[35050000]        	mov	bl, [ebx+hexchrs]
   501 0000028B 86D8                    	xchg	bl, al
   502 0000028D 80E30F                  	and	bl, 0Fh
   503 00000290 678AA3[35050000]        	mov	ah, [ebx+hexchrs]
   504 00000297 665B                    	pop	ebx	
   505 00000299 C3                      	retn
   506                                  
   507                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   508                                  ; Read & Write characters
   509                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   510                                  
   511                                  rw_char:
   512                                  	; OUTPUT -> DS:SI = Entered String (ASCIIZ)
   513 0000029A BE[0C07]                	mov     si, StrVolumeName
   514 0000029D BB0700                  	mov     bx, 7
   515 000002A0 B403                    	mov     ah, 3
   516 000002A2 CD10                    	int     10h
   517 000002A4 8916[F306]              	mov     [Cursor_Pos], dx
   518                                  read_next_char:
   519 000002A8 30E4                    	xor     ah, ah
   520 000002AA CD16                    	int     16h
   521 000002AC 20C0                    	and     al, al
   522 000002AE 7439                    	jz      short loc_arrow
   523 000002B0 3CE0                    	cmp     al, 0E0h
   524 000002B2 7435                    	je      short loc_arrow
   525 000002B4 3C08                    	cmp     al, 8
   526 000002B6 753D                    	jne     short char_return
   527                                  loc_back:
   528 000002B8 B403                    	mov     ah, 3
   529 000002BA CD10                    	int     10h
   530 000002BC 3A16[F306]              	cmp     dl, byte [Cursor_Pos]
   531 000002C0 761F                    	jna     short loc_beep
   532                                  prev_column:
   533 000002C2 FECA                    	dec     dl
   534                                  set_cursor_pos:
   535 000002C4 B402                    	mov     ah, 2
   536 000002C6 CD10                    	int     10h
   537 000002C8 88D3                    	mov     bl, dl
   538 000002CA 2A1E[F306]              	sub     bl, byte [Cursor_Pos]
   539 000002CE B90100                  	mov     cx,1
   540 000002D1 B409                    	mov     ah, 9
   541 000002D3 B020                    	mov     al, 20h
   542 000002D5 8800                    	mov     [si+bx], al
   543                                  loc_write_it:
   544 000002D7 B307                    	mov     bl, 7
   545 000002D9 CD10                    	int     10h
   546 000002DB 8B16[F306]              	mov     dx, [Cursor_Pos]
   547 000002DF EBC7                    	jmp     short read_next_char
   548                                  loc_beep:
   549 000002E1 B40E                    	mov     ah, 0Eh
   550 000002E3 B007                    	mov     al, 7
   551 000002E5 CD10                    	int     10h
   552 000002E7 EBBF                    	jmp     short read_next_char
   553                                  loc_arrow:    
   554 000002E9 80FC4B                  	cmp     ah, 4Bh
   555 000002EC 74CA                    	je      short loc_back
   556 000002EE 80FC53                  	cmp     ah, 53h
   557 000002F1 74C5                    	je      short loc_back
   558 000002F3 EBB3                    	jmp     short read_next_char
   559                                  char_return:
   560 000002F5 B403                    	mov     ah, 3
   561 000002F7 CD10                    	int     10h
   562                                  check_char_type:
   563 000002F9 3C20                    	cmp     al, 20h
   564 000002FB 7230                    	jb      short loc_escape
   565 000002FD 88D4                    	mov     ah, dl
   566 000002FF 2A26[F306]              	sub     ah, byte [Cursor_Pos]
   567 00000303 80FC0A                  	cmp     ah, 10
   568 00000306 77D9                    	ja      short loc_beep
   569 00000308 3C7A                    	cmp     al, "z"
   570 0000030A 779C                    	ja      short read_next_char
   571 0000030C 3C61                    	cmp     al, "a"
   572 0000030E 7202                    	jb      short pass_capitalize
   573 00000310 24DF                    	and     al, 0DFh
   574                                  pass_capitalize:
   575 00000312 88E3                    	mov     bl, ah  ; 30/07/2011
   576 00000314 30E4                    	xor     ah, ah
   577 00000316 8900                    	mov     [si+bx], ax
   578 00000318 B307                    	mov     bl, 7
   579 0000031A B40E                    	mov     ah, 0Eh
   580 0000031C CD10                    	int     10h
   581 0000031E EB88                    	jmp     short read_next_char
   582                                  pass_escape:
   583 00000320 3C0D                    	cmp     al, 0Dh
   584 00000322 7584                    	jne     short read_next_char
   585 00000324 B40E                    	mov     ah, 0Eh
   586 00000326 CD10                    	int     10h
   587 00000328 B00A                    	mov     al, 0Ah
   588 0000032A CD10                    	int     10h
   589 0000032C C3                      	retn
   590                                  loc_escape:
   591 0000032D 3C1B                    	cmp     al, 1Bh
   592 0000032F 75EF                    	jne     short pass_escape
   593 00000331 F9                      	stc
   594 00000332 C3                      	retn
   595                                  
   596                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   597                                  ;  Data
   598                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   599                                  
   600 00000333 00                      	db	0
   601                                  
   602                                  RETRODOS_FAT12_FDBS:
   603                                  	;incbin 'FDBS1440.BIN'	; 25/10/2023
   604 00000334 <bin 200h>              	incbin	'FDBS5A0H.BIN'	; 20/04/2024
   605                                  
   606 00000534 00                      	db	0
   607                                  
   608                                  hexchrs:
   609 00000535 303132333435363738-     	db	'0123456789ABCDEF'
   609 0000053E 39414243444546     
   610                                  
   611                                  img_file_handle:
   612 00000545 0000                    	dw	0
   613                                  
   614                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   615                                  ;  Messages
   616                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   617                                  
   618                                  RetroDOS_Welcome:
   619 00000547 0D0A                    	db	0Dh, 0Ah
   620 00000549 524554524F20444F53-     	db	'RETRO DOS v5 1.44MB FAT12 Floppy Disk Image Format Utility'
   620 00000552 20763520312E34344D-
   620 0000055B 422046415431322046-
   620 00000564 6C6F70707920446973-
   620 0000056D 6B20496D6167652046-
   620 00000576 6F726D617420557469-
   620 0000057F 6C697479           
   621                                  	;db	"v3.0.231025  (c) Erdogan TAN 2018-2023"
   622 00000583 52444644494D414745-     	db	"RDFDIMAGE v4.0.240420  (c) Erdogan TAN 2018-2024"
   622 0000058C 2076342E302E323430-
   622 00000595 343230202028632920-
   622 0000059E 4572646F67616E2054-
   622 000005A7 414E20323031382D32-
   622 000005B0 303234             
   623 000005B3 0D0A                    	db	0Dh,0Ah
   624 000005B5 0D0A                    	db	0Dh,0Ah
   625 000005B7 55736167653A207264-     	db	'Usage: rd5fdimg <image file name> '
   625 000005C0 356664696D67203C69-
   625 000005C9 6D6167652066696C65-
   625 000005D2 206E616D653E20     
   626 000005D9 00                      	db	0
   627                                  
   628                                  msg_inv_file_name: 
   629 000005DA 0D0A                    	db	0Dh, 0Ah
   630 000005DC 496E76616C69642066-     	db	"Invalid file name !", 0Dh, 0Ah
   630 000005E5 696C65206E616D6520-
   630 000005EE 210D0A             
   631 000005F1 2846696C65206E616D-     	db	"(File name must fit to 8.3 DOS format) !"
   631 000005FA 65206D757374206669-
   631 00000603 7420746F20382E3320-
   631 0000060C 444F5320666F726D61-
   631 00000615 74292021           
   632 00000619 0D0A00                  	db	0Dh, 0Ah, 0
   633                                  
   634                                  msg_inv_image_file:
   635 0000061C 0D0A                    	db	0Dh, 0Ah
   636 0000061E 496E76616C69642066-     	db	"Invalid floppy disk image file !", 0Dh, 0Ah
   636 00000627 6C6F70707920646973-
   636 00000630 6B20696D6167652066-
   636 00000639 696C6520210D0A     
   637 00000640 2846696C652073697A-     	db	"(File size must be 1474560 bytes) !"
   637 00000649 65206D757374206265-
   637 00000652 203134373435363020-
   637 0000065B 6279746573292021   
   638 00000663 0D0A00                  	db	0Dh, 0Ah, 0  
   639                                  
   640                                  msg_overwrite_question1:
   641 00000666 0D0A                    	db	0Dh, 0Ah
   642 00000668 446F20796F75207761-     	db	'Do you want to overwrite '
   642 00000671 6E7420746F206F7665-
   642 0000067A 72777269746520     
   643 00000681 27                      	db	27h
   644 00000682 00                      	db	0
   645                                  
   646                                  msg_overwrite_question2:
   647 00000683 27                      	db	27h
   648 00000684 2066696C6520            	db	' file '
   649 0000068A 00                      	db	0
   650                                  
   651                                  msg_yes_no:
   652 0000068B 285965732F4E6F293F-     	db	'(Yes/No)? ', 0
   652 00000694 2000               
   653                                  
   654                                  Msg_Writing_Boot_Sector:
   655 00000696 57726974696E672072-     	db	"Writing retrodos boot sector...", 0
   655 0000069F 6574726F646F732062-
   655 000006A8 6F6F7420736563746F-
   655 000006B1 722E2E2E00         
   656                                  
   657                                  Msg_Writing_Root_Dir:
   658 000006B6 57726974696E672072-     	db	"Writing root directory sectors...", 0
   658 000006BF 6F6F74206469726563-
   658 000006C8 746F72792073656374-
   658 000006D1 6F72732E2E2E00     
   659                                  
   660                                  Msg_Writing_Data_Sectors:
   661 000006D8 57726974696E672064-     	db	"Writing data sector: ", 0
   661 000006E1 61746120736563746F-
   661 000006EA 723A2000           
   662                                  
   663                                  Sector_Str:
   664 000006EE 3030303000              	db	"0000", 0
   665                                  Cursor_Pos:
   666 000006F3 0000                    	dw	0
   667                                  
   668                                  Msg_Writing_FAT_Sectors:
   669 000006F5 57726974696E672046-     	db	"Writing FAT sectors...", 0
   669 000006FE 415420736563746F72-
   669 00000707 732E2E2E00         
   670                                  
   671                                  StrVolumeName:
   672 0000070C 00<rep Ch>              	times 	12 db  0
   673                                  
   674                                  Msg_Volume_Name:
   675 00000718 566F6C756D65204E61-     	db	"Volume Name: ", 0
   675 00000721 6D653A2000         
   676                                  
   677                                  Msg_3dot_OK:
   678 00000726 2E2E2E                  	db	"..."
   679                                  Msg_OK:
   680 00000729 204F4B2E                	db	' OK.'
   681                                  CRLF:
   682 0000072D 0D0A00                  	db	0Dh, 0Ah, 0
   683                                  Msg_YES:
   684 00000730 2059455300              	db	' YES', 0
   685                                  Msg_NO:
   686 00000735 204E4F00                	db	' NO', 0
   687                                  
   688                                  Msg_Error:
   689 00000739 0D0A                    	db	0Dh, 0Ah
   690 0000073B 4572726F72202120        	db	'Error ! '
   691 00000743 28                      	db	'('
   692                                  error_code:
   693 00000744 3030                    	dw	3030h
   694 00000746 68                      	db	'h'
   695 00000747 2920                    	db	') '
   696 00000749 00                      	db	0
   697                                  
   698                                  FDFORMAT_SECBUFFER:
   699 0000074A F6<rep 200h>            	times	512 db 0F6h
   700                                  FDFORMAT_FATBUFFER:
   701 0000094A F0                      	db	0F0h
   702 0000094B FF                      	db	0FFh
   703 0000094C FF                      	db	0FFh
   704                                  FDFORMAT_FATBUFFER_S9:
   705 0000094D 00<rep 200h>            	times	512 db 0
   706                                  
   707                                  	;db	'(c) Erdogan TAN 2018-2023'
   708 00000B4D 286329204572646F67-     	db	'(c) Erdogan TAN 2018-2024'
   708 00000B56 616E2054414E203230-
   708 00000B5F 31382D32303234     
   709                                  
   710                                  img_file_name:  
   711 00000B66 00<rep Dh>              	times	13 db 0
   712                                  
   713                                  SizeOfFile equ $-100
