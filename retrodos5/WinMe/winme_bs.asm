

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-325F-7034-FF			    |
; |			Rico Baumgart, personal	license			    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7C2CD691F1F331653D7B043E28D38477
; Input	CRC32 :	C316C648

; ---------------------------------------------------------------------------
; File Name   :	C:\WinMe\winme_bs.img
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 0200h Loaded length: 0200h

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
WinMeBS		segment	byte public 'CODE' use16
		assume cs:WinMeBS
		;org 7C00h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

BS_jmpBoot:
		jmp	short bootcode
; ---------------------------------------------------------------------------
		db 90h
BS_OEMName	db 'MSWIN4.1'
BPB_BytsPerSec	dw 512
BPB_SecPerClus	db 1
BPB_RsvdSecCnt	dw 1
BPB_NumFATs	db 2
BPB_RootEntCnt	dw 224
BPB_TotSec16	dw 2880
BPB_Media	db 0F0h
BPB_FATSz16	dw 9
BPB_SecPerTrk	dw 18
BPB_NumHeads	dw 2
BPB_HiddSec	dd 0			; DATA XREF: WinMeBS:7C76r
BPB_TotSec32	dd 0
BS_DrvNum	db 0
BS_Reserved1	db 0
BS_BootSig	db 29h
BS_VolID	dd 0C4B0FDDh
BS_VolLab	db 'BOOTCD     '
BS_FilSysType	db 'FAT12   '
; ---------------------------------------------------------------------------

bootcode:				; CODE XREF: WinMeBS:BS_jmpBootj
		xor	cx, cx
		mov	ss, cx		; 0
		mov	sp, 7BFCh	; 7C00h-4
		push	ss
		pop	es
		mov	bp, 78h		; 1Eh*4	(INT 1Eh vector)
		lds	si, [bp+0]
		push	ds
		push	si
		push	ss
		push	bp
		mov	di, 522h	; new floppy dpt address
		mov	[bp+0],	di
		mov	[bp+2],	cx
		mov	cl, 11
		cld
		rep movsb
		push	es
		pop	ds
		mov	bp, 7C00h	; boot sector buffer address (MBR loads	here)
		mov	byte ptr [di-2], 0Fh ; safe head settle	time (15, max.)
		cmp	[bp+24h], cl	; drive	number = 0 ?
		jge	short bscode_3	; find and read	JO.SYS
		mov	ax, cx		; Hard disk (80h)
		cwd
		call	read_one_sector
		sub	bx, 58		; 700h - 3Ah
		mov	eax, ds:BPB_HiddSec

bscode_1:				; CODE XREF: WinMeBS:7C8Bj
		cmp	eax, [bx]	; MBR PTE offset 8 (partition start sector)
		mov	dl, [bx-4]	; PTE offset 4,	partition/fs ID
		jnz	short bscope_2	; not same
		or	dl, 2		; 0Ch -> 0Eh (0Eh -> 0Eh) LBA type
		mov	[bp+2],	dl	; BS offset 2 (default=90h)

bscope_2:				; CODE XREF: WinMeBS:7C80j
		add	bl, 10h		; next PT entry
		jnb	short bscode_1

bscode_3:				; CODE XREF: WinMeBS:7C6Bj
		xor	cx, cx		; JO.SYS
		inc	byte ptr ds:IO_SYS ; "IO      SYS"

bscode_4:				; CODE XREF: WinMeBS:7CEAj
		mov	al, [bp+10h]	; number of fats
		cbw
		mul	word ptr [bp+16h] ; fat	size (sectors)
		add	ax, [bp+1Ch]	; + hidden sectors
		adc	dx, [bp+1Eh]
		add	ax, [bp+0Eh]	; + reserved sector count
		adc	dx, cx		; cx = 0
		mov	si, [bp+11h]	; root dir entries
		pusha
		mov	[bp-4],	ax
		mov	[bp-2],	dx
		mov	ax, 32		; 32 bytes per entry
		mul	si
		mov	bx, [bp+0Bh]	; bytes	per sector
		add	ax, bx
		dec	ax		; round	up
		div	bx
		add	[bp-4],	ax	; result = start of data (file)	sectors
		adc	[bp-2],	cx	; cx = 0
		popa

bscode_5:				; CODE XREF: WinMeBS:7CE4j
		mov	di, 700h	; 0:700h (or 70h:0)
		call	read_one_sector
		jb	short bscode_11

bscode_6:				; CODE XREF: WinMeBS:7CE2j
		cmp	[di], ch
		jz	short bscode_7
		pusha
		mov	cl, 11
		mov	si, offset IO_SYS ; "IO	     SYS"
		repe cmpsb
		popa
		jz	short bscode_13
		dec	si
		jz	short bscode_7
		add	di, 32		; 2nd dir entry	name ('MSDOS   SYS')
		cmp	di, bx
		jb	short bscode_6
		jmp	short bscode_5
; ---------------------------------------------------------------------------

bscode_7:				; CODE XREF: WinMeBS:7CCDj
					; WinMeBS:7CDBj
		dec	byte ptr ds:IO_SYS ; "IO      SYS"
		jnp	short bscode_4
		mov	si, offset invsd_msg_ptr

bscode_8:				; CODE XREF: WinMeBS:7D07j
					; WinMeBS:7D0Cj
		lodsb
		cbw
		add	si, ax

bscode_9:				; CODE XREF: WinMeBS:7D02j
		lodsb
		cbw
		inc	ax
		jz	short bscode_10
		dec	ax
		jz	short bscode_12
		mov	ah, 0Eh
		mov	bx, 7
		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
					; AL = character, BH = display page (alpha modes)
					; BL = foreground color	(graphics modes)
		jmp	short bscode_9
; ---------------------------------------------------------------------------

bscode_10:				; CODE XREF: WinMeBS:7CF6j
		mov	si, offset rdpkey_msg_ptr
		jmp	short bscode_8
; ---------------------------------------------------------------------------

bscode_11:				; CODE XREF: WinMeBS:7CC9j
					; WinMeBS:7D30j
		mov	si, offset diskerr_msg_ptr
		jmp	short bscode_8
; ---------------------------------------------------------------------------

bscode_12:				; CODE XREF: WinMeBS:7CF9j
		int	16h		; KEYBOARD -
		pop	si
		pop	ds
		pop	large dword ptr	[si]
		int	19h		; DISK BOOT
					; causes reboot	of disk	system

bscode_13:				; CODE XREF: WinMeBS:7CD8j
		mov	si, offset one
		mov	di, [di+1Ah]	; first	cluster	of IO.SYS
		lea	ax, [di-2]	; ax = di-2
		mov	cl, [bp+0Dh]	; * sectors per	cluster
		mul	cx
		add	ax, [bp-4]	; + data area start address
		adc	dx, [bp-2]	; result = LBA of IO.SYS 1st cluster
		mov	cl, 4		; read 4 sectors (complete MSLOAD section)
		call	read_1st_cluster
		jb	short bscode_11
		jmp	far ptr	70h:200h ; jump	to IO.SYS offset 200h (MSLOAD section)
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR read_1st_cluster

disk_read:				; CODE XREF: read_1st_cluster+7j
		push	dx
		push	ax
		push	es
		push	bx
		push	1		; 1 sector
		push	10h
		xchg	ax, cx
		mov	ax, [bp+18h]	; sectors per track
		mov	ds:526h, al	; save spt value to disk parms table
		xchg	ax, si		; si = spt
		xchg	ax, dx		; 32 bit division (high	word at	1st)
		xor	dx, dx
		div	si
		xchg	ax, cx		; low word (at 2nd)
					; cx = high word of divison result
		div	si		; dx:ax/spt
		inc	dx		; sector number	is 1 based
		xchg	cx, dx
		div	word ptr [bp+1Ah] ; number of heads
		mov	dh, dl
		mov	ch, al		; cylinder (low	8 bit)
		ror	ah, 2
		or	cl, ah		; sector (6 bit) and cylinder high 2 bit
		mov	ax, 201h	; CHS read (1 sector)
		cmp	byte ptr [bp+2], 0Eh ; if it is	not a LBA type partition,
					; CHS read is forced
		jnz	short diskrd_1
		mov	ah, 42h		; LBA read
		mov	si, sp

diskrd_1:				; CODE XREF: read_1st_cluster-8Dj
		mov	dl, [bp+24h]
		int	13h		; DISK - IBM/MS	Extension - EXTENDED READ (DL -	drive, DS:SI - disk address packet)
		popa
		popa
		jb	short disk_rd3	; error
		inc	ax		; next disk sector address
		jnz	short diskrd_2
		inc	dx

diskrd_2:				; CODE XREF: read_1st_cluster-7Dj
		add	bx, [bp+0Bh]	; add bps (512 bytes) to buffer	addr
		dec	cx		; remain sectors to read
		jnz	short diskrd_4	; read next sector (of IO.SYS 1st cluster)

disk_rd3:				; CODE XREF: read_1st_cluster-80j
		retn
; END OF FUNCTION CHUNK	FOR read_1st_cluster
; ---------------------------------------------------------------------------
invsd_msg_ptr	db 3			; DATA XREF: WinMeBS:7CECo
diskerr_msg_ptr	db 24			; DATA XREF: WinMeBS:bscode_11o
one		db 1			; DATA XREF: WinMeBS:bscode_13o
rdpkey_msg_ptr	db 27h			; DATA XREF: WinMeBS:bscode_10o
		db 0Dh,0Ah
		db 'Invalid system disk'
		db 0FFh
		db 0Dh,0Ah
		db 'Disk I/O error'
		db 0FFh
		db 0Dh,0Ah
		db 'Replace the disk, and then press any key',0Dh,0Ah,0
		db 0
IO_SYS		db 'IO      SYS'        ; DATA XREF: WinMeBS:7C8Fw
					; WinMeBS:7CD2o ...
MSDOS_SYS	db 'MSDOS   SYS'
		dw 17Fh
		db 0

; =============== S U B	R O U T	I N E =======================================


read_one_sector	proc near		; CODE XREF: WinMeBS:7C70p
					; WinMeBS:7CC6p
		inc	cx		; cx = 1
read_one_sector	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


read_1st_cluster proc near		; CODE XREF: WinMeBS:7D2Dp

; FUNCTION CHUNK AT 7D37 SIZE 00000048 BYTES

		mov	bx, 700h	; buffer -> es:bx = 0:700h

diskrd_4:				; CODE XREF: read_1st_cluster-76j
		pusha			; push all registers except seg	segs
		push	large 0		; dd 0
		jmp	disk_read
read_1st_cluster endp ;	sp-analysis failed

; ---------------------------------------------------------------------------
		dw 0
		dw 0AA55h		; BS signature (magic word)
WinMeBS		ends			; (last	word of	BS, offset 510)


		end
