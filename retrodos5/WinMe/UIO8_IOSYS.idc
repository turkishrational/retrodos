//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
// |                            Freeware version                             |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 0);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	;
	add_segm_ex(0,0X3440,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0,"BIOSDATA");
	SegClass (0,"DATA");
	set_segm_type(0,3);
	add_segm_ex(0X3440,0X4790,0X344,0,1,2,ADDSEG_NOSREG);
	SegRename(0X3440,"DOSDATA");
	SegClass (0X3440,"DATA");
	set_segm_type(0X3440,3);
	add_segm_ex(0X4790,0X11A80,0X479,0,1,2,ADDSEG_NOSREG);
	SegRename(0X4790,"BIOSCODE");
	SegClass (0X4790,"CODE");
	set_segm_type(0X4790,2);
	add_segm_ex(0X11A80,0X1E450,0X11A8,0,1,2,ADDSEG_NOSREG);
	SegRename(0X11A80,"SYSINIT");
	SegClass (0X11A80,"CODE");
	set_segm_type(0X11A80,2);
	add_segm_ex(0X1E450,0X1E7E0,0X1E45,0,1,2,ADDSEG_NOSREG);
	SegRename(0X1E450,"DOSINIT");
	SegClass (0X1E450,"CODE");
	set_segm_type(0X1E450,2);
	add_segm_ex(0X1E7E0,0X43896,0X1E7E,0,1,2,ADDSEG_NOSREG);
	SegRename(0X1E7E0,"DOSCODE");
	SegClass (0X1E7E0,"CODE");
	set_segm_type(0X1E7E0,2);
	add_segm_ex(0X43896,0X43E00,0X4389,0,1,2,ADDSEG_NOSREG);
	SegRename(0X43896,"WINDATA");
	SegClass (0X43896,"DATA");
	set_segm_type(0X43896,3);
	set_inf_attr(INF_LOW_OFF, 0x0);
	set_inf_attr(INF_HIGH_OFF, 0x44600);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0,	E_PREV + 0,	"; File Name   : C:\\Users\\Erdo_an\\Desktop\\UIO8.SYS");
	update_extra_cmt		(0,	E_PREV + 1,	"; Format      : Binary file");
	update_extra_cmt		(0,	E_PREV + 2,	"; Base Address: 0000h Range: 0000h - 44600h Loaded length: 00044600h");
	create_insn	(0);
	create_word	(0X3);
	set_name	(0X3,	"DosDataSg");
	create_insn	(0X5);
	set_cmt	(0X8,	"flags",	0);
	create_byte	(0X8);
	set_name	(0X8,	"inHMA");
	create_byte	(0X9);
	set_name	(0X9,	"int19sem");
	create_byte	(0XC);
	set_name	(0XC,	"model_byte");
	create_byte	(0XD);
	set_name	(0XD,	"secondary_model_byte");
	create_word	(0XE);
	create_word	(0X10);
	create_word	(0X12);
	make_array	(0X12,	0X2);
	set_name	(0X12,	"ptrsav");
	set_cmt	(0X16,	"CONHeader",	0);
	create_word	(x=0X16);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X16,	"res_dev_list");
	create_word	(0X18);
	create_word	(0X1A);
	create_word	(x=0X1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X1E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X20,	0X28);
	set_name	(0X20,	"aCon");
	create_word	(0X28);
	set_name	(0X28,	"auxdev2");
	create_dword	(0X2A);
	create_word	(0X2E);
	create_word	(x=0X30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X32,	0X3A);
	set_name	(0X32,	"aAux");
	create_word	(x=0X3A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X3A,	"prndev2");
	create_word	(0X3C);
	create_word	(0X3E);
	create_word	(x=0X40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X42);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X44,	0X4C);
	set_name	(0X44,	"aPrn");
	create_dword	(0X4C);
	set_name	(0X4C,	"timdev");
	create_word	(0X50);
	create_word	(x=0X52);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X56,	0X5E);
	set_name	(0X56,	"aClock");
	create_word	(x=0X5E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X5E,	"dskdev");
	create_word	(0X60);
	create_word	(x=0X62);
	op_hex		(x,	0);
	create_word	(0X64);
	create_word	(x=0X66);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X68);
	set_name	(0X68,	"drvmax");
	create_byte	(0X69);
	set_name	(0X69,	"keyrd_func");
	create_word	(0X6A);
	set_name	(0X6A,	"com1dev");
	create_word	(0X6C);
	create_word	(0X6E);
	set_name	(0X6E,	"ds:006Eh");
	create_word	(x=0X70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X72);
	create_strlit	(0X74,	0X7C);
	set_name	(0X74,	"aCom1");
	create_word	(0X7C);
	create_word	(0X7E);
	create_word	(0X80);
	create_word	(x=0X82);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X86,	0X8E);
	set_name	(0X86,	"aLpt1");
	create_word	(0X8E);
	create_word	(0X90);
	create_word	(0X92);
	create_word	(x=0X94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X96);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X98,	0XA0);
	set_name	(0X98,	"aLpt2");
	create_word	(x=0XA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XA2);
	set_name	(0XA4,	"ds:00A4h");
	create_word	(x=0XA6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAA,	0XB2);
	set_name	(0XAA,	"aLpt3");
	create_byte	(0XB2);
	set_name	(0XB2,	"keysts_func");
	create_dword	(0XB4);
	set_name	(0XB4,	"Orig13");
	create_word	(x=0XB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XB8,	"com2dev");
	create_word	(0XBA);
	create_word	(0XBC);
	create_word	(x=0XBE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XC2,	0XCA);
	create_word	(x=0XCA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XCA,	"com3dev");
	create_word	(0XCC);
	create_word	(0XCE);
	create_word	(x=0XD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XD2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XD4,	0XDC);
	set_name	(0XD4,	"aCom3");
	create_word	(x=0XDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XDC,	"com4dev");
	create_word	(0XDE);
	create_word	(0XE0);
	create_word	(x=0XE2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0XE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XE6,	0XEE);
	set_name	(0XE6,	"aCom4");
	create_insn	(0XEE);
	set_name	(0XEE,	"tim_entry");
	set_name	(0XF3,	"dsk_entry");
	create_word	(x=0XF8);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_name	(0XF8,	"start_bds");
	set_cmt	(0XFA,	"SYSINIT segment",	0);
	create_word	(0XFA);
	set_name	(0XFA,	"start_bds_seg");
	create_dword	(0XFC);
	set_name	(0XFC,	"disksector");
	create_byte	(0X100);
	set_name	(0X100,	"RomVectors");
	create_dword	(0X101);
	set_name	(0X101,	"Old10");
	create_byte	(0X105);
	create_dword	(0X106);
	set_name	(0X106,	"Old13");
	create_byte	(0X10A);
	create_dword	(0X10B);
	set_name	(0X10B,	"Old15");
	create_byte	(0X10F);
	create_dword	(0X110);
	set_name	(0X110,	"Old19");
	create_byte	(0X114);
	create_dword	(0X115);
	set_name	(0X115,	"Old1B");
	create_byte	(0X119);
	create_dword	(0X11A);
	set_name	(0X11A,	"Old4Fh");
	create_byte	(0X11E);
	create_dword	(0X11F);
	set_name	(0X11F,	"Old8");
	create_byte	(0X123);
	create_dword	(0X124);
	set_name	(0X124,	"Old0F");
	create_byte	(0X128);
	create_dword	(0X129);
	set_name	(0X129,	"Old16");
	create_byte	(0X12D);
	set_name	(0X12D,	"harddrv");
	create_dword	(0X12E);
	set_name	(0X12E,	"cdev");
	create_word	(x=0X132);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(0X134);
	create_dword	(0X136);
	set_name	(0X136,	"i13x");
	create_dword	(0X13A);
	create_dword	(0X13E);
	create_dword	(0X142);
	create_dword	(0X146);
	create_dword	(0X14A);
	create_dword	(0X14E);
	create_dword	(0X152);
	create_dword	(0X156);
	create_dword	(0X15A);
	create_dword	(0X15E);
	set_name	(0X15E,	"Orig16");
	create_dword	(0X162);
	set_name	(0X162,	"Orig4F");
	create_word	(0X19E);
	create_insn	(0X1B8);
	create_insn	(0X1C4);
	create_insn	(0X262);
	set_name	(0X262,	"strategy");
	create_insn	(0X26D);
	set_name	(0X26D,	"himemsys_entry");
	create_byte	(0X271);
	create_insn	(0X272);
	set_name	(0X272,	"con_entry");
	create_insn	(x=0X277);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X277,	"prn0_entry");
	create_byte	(0X27C);
	create_byte	(0X27D);
	create_insn	(0X27E);
	set_name	(0X27E,	"prn1_entry");
	set_name	(0X285,	"prn2_entry");
	set_name	(0X28C,	"prn3_entry");
	set_name	(0X293,	"aux0_entry");
	create_byte	(0X298);
	create_insn	(0X299);
	set_name	(0X299,	"aux1_entry");
	create_byte	(0X29E);
	create_insn	(0X29F);
	set_name	(0X29F,	"aux2_entry");
	create_byte	(0X2A4);
	create_insn	(0X2A5);
	set_name	(0X2A5,	"aux3_entry");
	create_byte	(0X2AA);
	create_insn	(0X2AB);
	set_name	(0X2AB,	"cdev_entry");
	create_byte	(0X2B0);
	create_byte	(0X2B1);
	create_byte	(0X2B4);
	create_byte	(0X2B5);
	create_insn	(0X2B6);
	create_word	(x=0X2B7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X2B9);
	create_insn	(0X2BB);
	create_insn	(x=0X2C5);
	op_hex		(x,	1);
	create_insn	(x=0X2CF);
	op_hex		(x,	1);
	set_cmt	(0X2E5,	"Video status bits:\n0: retrace.  1=display is in vert or horiz retrace.\n1: 1=light pen is triggered; 0=armed\n2: 1=light pen switch is open; 0=closed\n3: 1=vertical sync pulse is occurring.",	0);
	create_insn	(x=0X2E6);
	op_hex		(x,	1);
	set_cmt	(0X2FA,	"Video status bits:\n0: retrace.  1=display is in vert or horiz retrace.\n1: 1=light pen is triggered; 0=armed\n2: 1=light pen switch is open; 0=closed\n3: 1=vertical sync pulse is occurring.",	0);
	create_insn	(x=0X2FB);
	op_hex		(x,	1);
	create_word	(0X32E);
	create_word	(0X330);
	create_word	(0X332);
	create_byte	(0X336);
	create_word	(0X33A);
	create_insn	(0X34A);
	create_byte	(0X34B);
	create_byte	(0X34C);
	create_insn	(0X34D);
	create_word	(0X350);
	create_byte	(0X352);
	create_insn	(0X355);
	set_cmt	(0X357,	"VGA video DAC state",	0);
	create_insn	(x=0X35D);
	op_hex		(x,	1);
	create_insn	(0X363);
	create_insn	(0X365);
	create_insn	(0X367);
	create_insn	(x=0X368);
	op_hex		(x,	1);
	create_insn	(0X36E);
	create_insn	(0X370);
	create_insn	(0X372);
	create_insn	(x=0X373);
	op_hex		(x,	1);
	create_insn	(0X379);
	create_insn	(0X37B);
	create_insn	(0X37D);
	create_insn	(x=0X37E);
	op_hex		(x,	1);
	create_insn	(0X385);
	set_cmt	(0X387,	"VGA video DAC PEL address",	0);
	create_insn	(x=0X38C);
	op_hex		(x,	1);
	create_insn	(0X392);
	create_insn	(0X394);
	create_insn	(0X396);
	create_insn	(x=0X397);
	op_hex		(x,	1);
	create_insn	(0X39D);
	create_insn	(0X39F);
	create_insn	(0X3A1);
	create_insn	(x=0X3A2);
	op_hex		(x,	1);
	create_insn	(0X3A8);
	create_insn	(0X3AA);
	create_insn	(0X3AC);
	create_insn	(x=0X3AD);
	op_hex		(x,	1);
	create_insn	(0X3B4);
	create_insn	(0X3B5);
	create_insn	(0X3C3);
	set_name	(0X3C3,	"block13");
	create_insn	(0X3C8);
	set_name	(0X3C8,	"int15");
	create_insn	(0X3CF);
	create_insn	(0X3D8);
	create_insn	(x=0X3E5);
	op_hex		(x,	1);
	create_insn	(0X3F9);
	set_name	(0X3F9,	"int16");
	create_insn	(x=0X3FB);
	op_hex		(x,	1);
	create_word	(0X40E);
	create_word	(0X413);
	create_insn	(0X416);
	create_insn	(0X41D);
	set_name	(0X41D,	"int19");
	set_cmt	(0X422,	"DISK BOOT\ncauses reboot of disk system",	0);
	create_insn	(x=0X422);
	op_hex		(x,	0);
	create_byte	(0X424);
	set_name	(0X424,	"altah");
	create_insn	(0X425);
	set_name	(0X425,	"int1B");
	set_name	(0X42B,	"_iret");
	create_insn	(0X42C);
	set_name	(0X42C,	"int29");
	create_insn	(0X431);
	create_insn	(0X436);
	create_insn	(0X439);
	create_insn	(0X43F);
	set_name	(0X43F,	"Jmp_far_Orig4F");
	create_word	(0X444);
	set_name	(0X444,	"daycnt2");
	create_word	(0X446);
	create_word	(0X448);
	create_word	(0X44A);
	create_word	(0X44C);
	create_word	(0X44E);
	create_word	(0X450);
	set_name	(0X450,	"himemsysdev");
	create_word	(0X452);
	create_word	(0X454);
	create_word	(x=0X456);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X458);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X45A,	0X462);
	set_name	(0X45A,	"aXmsxxxx0");
	create_byte	(0X462);
	create_dword	(0X46C);
	create_byte	(0X475);
	create_byte	(0X484);
	create_byte	(0X496);
	create_word	(0X4B8);
	create_word	(0X4BA);
	create_word	(0X4E5);
	set_name	(0X4E5,	"i13_ds");
	set_cmt	(0X4E7,	"get caller's ds register",	0);
	create_insn	(x=0X4E7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4E7,	"call_orig13");
	set_cmt	(0X4F0,	"call far [cs:Orig13]",	0);
	create_word	(0X500);
	set_name	(0X500,	"drvfat");
	create_word	(0X502);
	set_name	(0X502,	"boot_media_id");
	create_dword	(0X504);
	set_name	(0X504,	"msloader_bpb");
	create_byte	(0X508);
	set_name	(0X508,	"fbigfat");
	create_word	(0X509);
	set_name	(0X509,	"init_bootseg");
	create_byte	(0X50B);
	set_name	(0X50B,	"rom_drv_num");
	create_byte	(0X50C);
	set_name	(0X50C,	"FAT32_Partition");
	create_byte	(0X50D);
	set_name	(0X50D,	"backup_bs_read");
	create_byte	(0X50E);
	set_name	(0X50E,	"dsktnum");
	create_byte	(0X50F);
	create_byte	(0X510);
	create_word	(0X511);
	create_byte	(0X513);
	set_name	(0X513,	"fakefloppydrv");
	create_dword	(x=0X514);
	op_dec		(x,	0);
	set_name	(0X514,	"disktable2");
	create_word	(0X518);
	create_word	(x=0X51A);
	op_dec		(x,	0);
	create_word	(0X51C);
	create_dword	(0X51E);
	create_word	(0X522);
	create_word	(x=0X524);
	op_dec		(x,	0);
	create_word	(0X526);
	create_dword	(0X528);
	create_word	(0X52C);
	create_word	(x=0X52E);
	op_dec		(x,	0);
	create_word	(0X530);
	create_dword	(0X532);
	create_word	(0X536);
	create_word	(x=0X538);
	op_dec		(x,	0);
	create_word	(0X53A);
	create_dword	(0X53C);
	create_word	(0X540);
	create_word	(x=0X542);
	op_dec		(x,	0);
	create_word	(0X544);
	create_dword	(0X546);
	create_word	(0X54A);
	create_word	(x=0X54C);
	op_dec		(x,	0);
	create_word	(0X54E);
	create_dword	(0X550);
	create_word	(0X554);
	create_word	(x=0X556);
	op_dec		(x,	0);
	create_word	(0X558);
	create_dword	(0X55A);
	set_name	(0X55A,	"disktable3");
	create_word	(0X55E);
	create_word	(0X560);
	create_word	(0X562);
	create_dword	(0X564);
	create_word	(0X568);
	create_word	(0X56A);
	create_word	(0X56C);
	create_dword	(0X56E);
	create_dword	(0X572);
	create_word	(0X576);
	create_dword	(0X578);
	create_word	(0X57C);
	create_word	(0X57E);
	create_dword	(0X580);
	create_dword	(0X584);
	create_word	(0X588);
	create_word	(0X58A);
	create_word	(0X58C);
	set_name	(0X58C,	"SYSINITSEG");
	create_byte	(0X58E);
	set_name	(0X58E,	"rom_minidisk_num");
	create_byte	(0X58F);
	set_name	(0X58F,	"hnum");
	create_word	(x=0X590);
	op_hex		(x,	0);
	create_word	(0X592);
	set_name	(0X592,	"mini_hdlim");
	create_word	(0X594);
	set_name	(0X594,	"mini_seclim");
	set_cmt	(0X596,	"used for checking at rom bios   date.",	0);
	create_strlit	(0X596,	0X59F);
	set_name	(0X596,	"bios_date");
	create_byte	(0X59F);
	create_word	(0X5A0);
	set_name	(0X5A0,	"BPB48T");
	create_dword	(0X5A2);
	create_word	(x=0X5A6);
	op_dec		(x,	0);
	create_word	(x=0X5A8);
	op_dec		(x,	0);
	create_byte	(0X5AA);
	create_word	(0X5AB);
	create_word	(0X5AD);
	create_word	(0X5AF);
	create_word	(0X5B1);
	create_word	(0X5B3);
	create_word	(0X5B5);
	create_word	(0X5B7);
	create_dword	(0X5B9);
	make_array	(0X5B9,	0X7);
	create_byte	(0X5D5);
	create_word	(x=0X5D6);
	op_dec		(x,	0);
	set_name	(0X5D6,	"BPB96T");
	create_byte	(0X5D8);
	create_word	(0X5D9);
	create_byte	(0X5DB);
	create_word	(x=0X5DC);
	op_dec		(x,	0);
	create_word	(x=0X5DE);
	op_dec		(x,	0);
	create_byte	(0X5E0);
	create_word	(0X5E1);
	create_word	(x=0X5E3);
	op_dec		(x,	0);
	create_word	(0X5E5);
	create_word	(0X5E7);
	make_array	(0X5E7,	0X4);
	create_dword	(0X5EF);
	make_array	(0X5EF,	0X7);
	create_byte	(0X60B);
	create_word	(x=0X60C);
	op_dec		(x,	0);
	set_name	(0X60C,	"BPB35");
	create_word	(0X60E);
	create_byte	(0X610);
	create_word	(0X611);
	create_word	(x=0X614);
	op_dec		(x,	0);
	create_byte	(0X616);
	create_word	(0X617);
	create_word	(0X619);
	create_word	(0X61B);
	create_word	(0X61D);
	create_word	(0X61F);
	create_word	(0X621);
	create_word	(0X623);
	create_dword	(0X625);
	make_array	(0X625,	0X7);
	create_byte	(0X641);
	create_word	(x=0X642);
	op_dec		(x,	0);
	set_name	(0X642,	"BPB288");
	create_byte	(0X644);
	create_word	(0X645);
	create_byte	(0X647);
	create_word	(x=0X648);
	op_dec		(x,	0);
	create_word	(x=0X64A);
	op_dec		(x,	0);
	create_byte	(0X64C);
	create_word	(0X64D);
	create_word	(x=0X64F);
	op_dec		(x,	0);
	create_word	(0X651);
	create_word	(0X653);
	create_word	(0X655);
	create_word	(0X657);
	create_word	(0X659);
	create_dword	(0X65B);
	make_array	(0X65B,	0X7);
	create_byte	(0X677);
	create_word	(x=0X678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X678,	"bpb_table");
	create_word	(x=0X67A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X67C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X67E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X682);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X684);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X686);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X68A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X68C);
	set_name	(0X68C,	"single");
	create_byte	(0X68D);
	set_name	(0X68D,	"flp_drvs");
	create_word	(0X68E);
	set_name	(0X68E,	"bdata_ret_addr");
	set_cmt	(0X690,	"return address to the caller",	0);
	create_insn	(0X690);
	set_name	(0X690,	"call_bios_code");
	create_insn	(x=0X69B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0X69E,	"push Bios_Code segment",	0);
	set_cmt	(0X6A1,	"utility function offset",	0);
	create_insn	(0X6A3);
	set_name	(0X6A3,	"init");
	set_cmt	(0X6A5,	"0",	0);
	set_cmt	(0X6A7,	"\nMSLOADERSEG:000Ah, points to copy of BS BPB",	0);
	set_cmt	(0X6AC,	"MSLOADERSEG",	0);
	set_cmt	(0X6B1,	"0",	0);
	create_insn	(x=0X6C5);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(x=0X6C8);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_cmt	(0X6CC,	"0",	0);
	set_cmt	(0X6D0,	"- VIDEO - GET CURRENT VIDEO MODE\nReturn: AH = number of columns on screen\nAL = current video mode\nBH = current active display page",	0);
	create_insn	(x=0X6D0);
	op_hex		(x,	0);
	create_insn	(x=0X6D2);
	op_hex		(x,	1);
	set_cmt	(0X6D7,	"Win ME IO.SYS special table at 50h:3Ch",	0);
	create_insn	(x=0X6D7);
	op_hex		(x,	1);
	set_cmt	(0X6DA,	"memory size in KB, low word",	0);
	set_cmt	(0X6DE,	"memory size in KB, high word",	0);
	set_cmt	(0X6E2,	"1st 32 (hardware) interrupt vectors\nto 50h:40h",	0);
	create_insn	(x=0X6E2);
	op_dec		(x,	1);
	set_cmt	(0X6E8,	"write zero to (copied) INT 19h vector pos",	0);
	set_cmt	(0X6F2,	"copy INT 40h,41h,42h,43h vectors to 50h:0C0h",	0);
	set_cmt	(0X6FB,	"skip INT 44h and 45h",	0);
	set_cmt	(0X6FE,	"copy INT 46h vector to 50h:0D0h",	0);
	set_cmt	(0X700,	"skip INT vectors till INT 4Ah",	0);
	set_cmt	(0X703,	"copy INT 4Ah vector to 50h:0D4h",	0);
	create_word	(0X703);
	set_cmt	(0X705,	"skip 3 INT vectors",	0);
	set_cmt	(0X708,	"copy INT 4Eh vector to 50h:0D8h",	0);
	create_word	(0X708);
	set_cmt	(0X70A,	"INT 70h and 71h vectors",	0);
	set_cmt	(0X710,	"copy INT 70h and INT 71h vectors to 50h:0DCh",	0);
	set_cmt	(0X713,	"Interrupt Controller #2, 8259A",	0);
	create_insn	(x=0X713);
	op_hex		(x,	1);
	set_cmt	(0X715,	"IRQ 8-15 interrupt mask status (on bits = disabled IRQ)",	0);
	set_cmt	(0X717,	"Interrupt controller, 8259A.\nIRQ 0-7 interrupt mask status (on bits = disabled IRQ)",	0);
	create_insn	(x=0X717);
	op_hex		(x,	1);
	set_cmt	(0X719,	"save IRQ 0-15 interrupt status at 50h:0E4h (2 bytes)",	0);
	set_cmt	(0X71A,	"di = 0E6h",	0);
	create_insn	(x=0X71C);
	op_hex		(x,	1);
	set_cmt	(0X71F,	"cx = 170 (0AAh) bytes",	0);
	set_cmt	(0X721,	"cx = 85 words",	0);
	create_insn	(x=0X721);
	op_hex		(x,	1);
	set_cmt	(0X723,	"0",	0);
	set_cmt	(0X725,	"sum (checksum) of 50h:3Ch table",	0);
	set_name	(0X725,	"chsum_loop");
	set_cmt	(0X72D,	"save summing result (chksum value)",	0);
	create_insn	(x=0X733);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X736,	"interrupt number",	0);
	set_name	(0X736,	"next_int_");
	set_cmt	(0X739,	"vector address",	0);
	create_insn	(x=0X739);
	op_hex		(x,	1);
	set_cmt	(0X73E,	"xchange source with destination",	0);
	set_cmt	(0X740,	"save original int vectors (ds:si)\nto OldInt (RomVectors) table in BIOSDATA segment",	0);
	set_cmt	(0X746,	"save old13 in orig13 also",	0);
	create_insn	(x=0X752);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X758,	"set up int 13 for new action",	0);
	create_insn	(x=0X75C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X766);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X769);
	create_insn	(x=0X77B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X785,	"0",	0);
	set_cmt	(0X787,	"0",	0);
	set_cmt	(0X78A,	"0",	0);
	set_cmt	(0X78E,	"0",	0);
	set_cmt	(0X792,	"clear 50h:30h dword",	0);
	set_cmt	(0X794,	"clear 50h:34h dword",	0);
	create_insn	(x=0X796);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7AD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7B2,	"check INT 01h vector for 'JP' signature",	0);
	create_byte	(0X7B2);
	set_name	(0X7B2,	"chk_jp_sign");
	create_word	(0X7B4);
	create_word	(0X7B6);
	set_cmt	(0X7BA,	"'JP'\nINT 01h handler's start address - 2 contains 'JP'",	0);
	set_name	(0X7C0,	"chk_jp_1");
	set_cmt	(0X7C2,	"skip INT 01h, 03h replacement",	0);
	set_cmt	(0X7C4,	"set INT 01h hadler to cs:int01 ('iret')",	0);
	set_cmt	(0X7C6,	"cs",	0);
	set_cmt	(0X7C7,	"skip int 02h",	0);
	set_cmt	(0X7CB,	"int01",	0);
	set_cmt	(0X7CD,	"cs",	0);
	set_cmt	(0X7CE,	"ax = int01 (only 'iret' instruction)",	0);
	set_cmt	(0X7CF,	"int 04h vector",	0);
	set_name	(0X7CF,	"chk_jp_2");
	set_cmt	(0X7D2,	"int01 (iret)",	0);
	set_cmt	(0X7D4,	"cs",	0);
	set_cmt	(0X7DC,	"DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)\nDL = drive number\nReturn: CF set on error, AH = status code, BL = drive type\nDL = number of consecutive drives\nDH = maximum value for head number, ES:DI -> drive parameter",	0);
	create_insn	(x=0X7DC);
	op_hex		(x,	0);
	set_cmt	(0X7E0,	"EQUIPMENT DETERMINATION\nReturn: AX = equipment flag bits",	0);
	create_insn	(x=0X7E0);
	op_hex		(x,	0);
	set_cmt	(0X7E2,	"floppy disk(s) installed ?",	0);
	create_insn	(x=0X7E2);
	op_hex		(x,	1);
	set_cmt	(0X7E5,	"yes",	0);
	set_cmt	(0X7E7,	"0",	0);
	create_insn	(x=0X7EB);
	op_hex		(x,	1);
	set_name	(0X7EB,	"normalfloppydrv");
	set_cmt	(0X7EE,	"number of floppies installed less 1 (if bit 0 set)",	0);
	set_cmt	(0X7F2,	"number of floppies",	0);
	set_name	(0X7F2,	"save_fd_count");
	create_dword	(0X7F8);
	set_cmt	(0X802,	"al = 1",	0);
	create_word	(0X806);
	create_word	(0X808);
	create_insn	(x=0X80B);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_cmt	(0X811,	"make zero based",	0);
	create_insn	(0X811);
	set_name	(0X811,	"got_num_flp_drvs");
	set_cmt	(0X812,	"only look at bits 0 & 1",	0);
	create_insn	(x=0X812);
	op_hex		(x,	1);
	set_cmt	(0X815,	"zero means single drive system",	0);
	set_name	(0X818,	"settwodrive");
	set_name	(0X81D,	"notsingle");
	create_insn	(x=0X822);
	op_hex		(x,	1);
	set_name	(0X82C,	"gothrd");
	create_insn	(x=0X830);
	op_hex		(x,	1);
	set_cmt	(0X832,	"SYSTEM - GET CONFIGURATION\n (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)",	0);
	create_insn	(x=0X832);
	op_hex		(x,	0);
	set_cmt	(0X846,	"MEMORY SIZE - \nReturn: AX = number of contiguous 1K blocks of memory",	0);
	create_insn	(x=0X846);
	op_hex		(x,	0);
	set_name	(0X846,	"no_rom_system_conf");
	create_insn	(x=0X848);
	op_hex		(x,	1);
	create_word	(0X852);
	create_word	(0X854);
	create_word	(0X85A);
	create_word	(0X85C);
	create_dword	(0X85E);
	create_word	(0X862);
	create_insn	(x=0X864);
	op_hex		(x,	0);
	create_insn	(x=0X882);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8BA);
	op_hex		(x,	1);
	create_insn	(x=0X8C9);
	op_hex		(x,	1);
	set_name	(0X8C9,	"org_key");
	set_cmt	(0X8E9,	"DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)\nDL = drive number\nReturn: CF set on error, AH = status code, BL = drive type\nDL = number of consecutive drives\nDH = maximum value for head number, ES:DI -> drive parameter",	0);
	create_insn	(x=0X8E9);
	op_hex		(x,	0);
	create_insn	(0X920);
	create_insn	(0X929);
	set_cmt	(0X93E,	"DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)\nDL = drive number\nReturn: CF set on error, AH = status code, BL = drive type\nDL = number of consecutive drives\nDH = maximum value for head number, ES:DI -> drive parameter",	0);
	create_insn	(x=0X93E);
	op_hex		(x,	0);
	create_insn	(x=0X969);
	op_hex		(x,	1);
	create_insn	(x=0X971);
	op_hex		(x,	1);
	create_insn	(x=0X974);
	op_hex		(x,	1);
	create_insn	(0X97B);
	create_insn	(x=0X982);
	op_hex		(x,	1);
	create_insn	(x=0X98C);
	op_hex		(x,	1);
	set_cmt	(0X9AD,	"DISK - DISK - GET TYPE (AT,XT2,XT286,CONV,PS)\nDL = drive ID\nReturn: CF set on error, AH = disk type (3 = hard drive)\nCX:DX = number of sectors on the media",	0);
	create_insn	(x=0X9AD);
	op_hex		(x,	0);
	create_byte	(0X9B0);
	create_byte	(0X9B1);
	create_word	(0X9B2);
	create_word	(0X9B4);
	create_insn	(x=0X9B6);
	op_hex		(x,	1);
	create_insn	(x=0X9B9);
	op_hex		(x,	1);
	create_insn	(0X9D0);
	create_insn	(0X9F2);
	create_insn	(0X9F6);
	set_cmt	(0X9FB,	"DISK - DISK - GET TYPE (AT,XT2,XT286,CONV,PS)\nDL = drive ID\nReturn: CF set on error, AH = disk type (3 = hard drive)\nCX:DX = number of sectors on the media",	0);
	create_insn	(x=0X9FB);
	op_hex		(x,	0);
	create_insn	(x=0XA04);
	op_hex		(x,	1);
	create_insn	(x=0XA07);
	op_hex		(x,	1);
	create_insn	(x=0XA27);
	op_hex		(x,	1);
	create_insn	(x=0XA35);
	op_hex		(x,	1);
	create_insn	(x=0XA6B);
	op_hex		(x,	1);
	create_insn	(x=0XA70);
	op_hex		(x,	1);
	create_insn	(0XA7E);
	create_insn	(0XA83);
	set_name	(0XA83,	"done_drives");
	create_insn	(x=0XA88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XA88,	"dohard");
	create_insn	(x=0XA90);
	op_hex		(x,	1);
	set_name	(0XA92,	"dohard1");
	create_insn	(x=0XA93);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA97);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XAAA,	"hardfile_err");
	create_insn	(x=0XAB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAB8);
	op_hex		(x,	1);
	set_name	(0XABA,	"dohardx1");
	set_name	(0XABC,	"dohardx2");
	create_insn	(x=0XABE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0XACD);
	create_insn	(0XAD9);
	set_name	(0XAD9,	"dohardx4");
	create_insn	(x=0XAE1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XAEB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XAEB,	"configdone");
	create_insn	(x=0XAF3);
	op_hex		(x,	1);
	create_insn	(x=0XAF6);
	op_hex		(x,	1);
	create_insn	(x=0XAFA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XAFE,	"get drive and fat id",	0);
	create_insn	(x=0XAFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB01);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XB07);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XB10);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(x=0XB15);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XB15,	"remap");
	create_insn	(0XB2A);
	create_insn	(x=0XB3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB41);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_word	(0XB46);
	create_word	(0XB48);
	create_word	(0XB4A);
	create_word	(0XB4C);
	create_insn	(x=0XB55);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0XB62);
	create_word	(0XB63);
	create_insn	(x=0XB66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB6A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XB6F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB73);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(0XB78);
	set_name	(0XB78,	"getboot");
	set_cmt	(0XB7B,	"retry count",	0);
	set_cmt	(0XB83,	"offset 0",	0);
	set_cmt	(0XB88,	"head 0",	0);
	set_cmt	(0XB8D,	"DISK - READ SECTORS INTO MEMORY\nAL = number of sectors to read, CH = track, CL = sector\nDH = head, DL = drive, ES:BX -> buffer to fill\nReturn: CF set on error, AH = status, AL = number of sectors read",	0);
	create_insn	(x=0XB8D);
	op_hex		(x,	0);
	create_insn	(0XB9E);
	set_cmt	(0XBA4,	"DISK - RESET DISK SYSTEM\nDL = drive (if bit 7 is set both hard disks and floppy disks reset)",	0);
	create_insn	(x=0XBA4);
	op_hex		(x,	0);
	create_insn	(0XBA8);
	set_name	(0XBA8,	"sethard");
	set_cmt	(0XBAC,	"[es:di+BDS.drivelet]",	0);
	set_cmt	(0XBB0,	"[es:di+BDS.drivenum]",	0);
	set_cmt	(0XBB4,	"[es:di+BDS.flags], fnon_removable",	0);
	create_insn	(x=0XBB4);
	op_hex		(x,	1);
	set_cmt	(0XBB9,	"[es:di+BDS.formfactor], ffHardFile",	0);
	set_cmt	(0XBBE,	"assume 12 bit FAT",	0);
	create_insn	(x=0XBBE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XBC8,	"DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)\nDL = drive number\nReturn: CF set on error, AH = status code, BL = drive type\nDL = number of consecutive drives\nDH = maximum value for head number, ES:DI -> drive parameter",	0);
	create_insn	(x=0XBC8);
	op_hex		(x,	0);
	set_cmt	(0XBCC,	"[di+BDS.heads]",	0);
	set_cmt	(0XBD0,	"requested partition number\n(0 = first primary dos, active partition)",	0);
	set_cmt	(0XBD1,	"error if no hard disk",	0);
	create_insn	(x=0XBD5);
	op_hex		(x,	1);
	set_cmt	(0XBD8,	"[es:di+BDS.secpertrack]",	0);
	create_word	(0XBE5);
	create_insn	(0XBE7);
	set_cmt	(0XBF0,	"head 1",	0);
	set_cmt	(0XBF5,	"DISK - READ SECTORS INTO MEMORY\nAL = number of sectors to read, CH = track, CL = sector\nDH = head, DL = drive, ES:BX -> buffer to fill\nReturn: CF set on error, AH = status, AL = number of sectors read",	0);
	create_insn	(x=0XBF5);
	op_hex		(x,	0);
	set_cmt	(0XC08,	"near jump ?",	0);
	create_insn	(x=0XC08);
	op_hex		(x,	1);
	set_cmt	(0XC0B,	"yes",	0);
	set_cmt	(0XC0D,	"short jump ?",	0);
	create_insn	(x=0XC0D);
	op_hex		(x,	1);
	set_cmt	(0XC10,	"no",	0);
	set_cmt	(0XC12,	"nop after short jump ?",	0);
	create_insn	(x=0XC12);
	op_hex		(x,	1);
	set_cmt	(0XC16,	"no",	0);
	set_cmt	(0XC1E,	"BPB_FATSz16 ; 16 bit FAT sectors field",	0);
	set_cmt	(0XC22,	"FAT volume/fs",	0);
	set_cmt	(0XC24,	"check for FAT32 extended boot signature",	0);
	create_insn	(x=0XC24);
	op_hex		(x,	1);
	set_cmt	(0XC28,	"no, error",	0);
	set_cmt	(0XC2A,	"BPB_FATSz32 ; 32 bit FAT sectors",	0);
	set_cmt	(0XC2F,	"zero, error",	0);
	set_cmt	(0XC31,	"BPB_FATSz32 ; root dir's cluster number",	0);
	set_cmt	(0XC36,	"< 2, invalid, error",	0);
	set_cmt	(0XC38,	"BPB_FSVer ; File system version, must be 0",	0);
	set_cmt	(0XC3C,	"> 0, error",	0);
	set_cmt	(0XC3E,	"FAT32 partition/volume/fs = true",	0);
	set_cmt	(0XC43,	"fbigbig ; FAT32 flag",	0);
	create_insn	(x=0XC43);
	op_hex		(x,	1);
	set_cmt	(0XC4B,	"BS_BootSig",	0);
	create_insn	(x=0XC4B);
	op_hex		(x,	1);
	set_cmt	(0XC4F,	"invalid (dos) boot sector",	0);
	set_cmt	(0XC51,	"BPB_NumFATs",	0);
	set_cmt	(0XC57,	"BPB_Media",	0);
	create_insn	(x=0XC5A);
	op_hex		(x,	1);
	create_insn	(x=0XC5C);
	op_hex		(x,	1);
	set_cmt	(0XC60,	"BPB_BytsPerSec",	0);
	create_insn	(x=0XC60);
	op_dec		(x,	1);
	set_cmt	(0XC67,	"BPB_SecPerClus",	0);
	create_insn	(x=0XC6E);
	op_hex		(x,	1);
	set_cmt	(0XC74,	"BPB_BytsPerSec",	0);
	set_cmt	(0XC7B,	"BPB_TotSec16",	0);
	set_cmt	(0XC82,	"BPB_Media",	0);
	set_cmt	(0XC85,	"BPB_NumFATs",	0);
	set_cmt	(0XC89,	"BPB_HiddSec",	0);
	set_cmt	(0XC90,	"BPB_HiddSec+2",	0);
	set_cmt	(0XC9A,	"not a valid boot sector",	0);
	create_insn	(0XC9A);
	set_cmt	(0XC9E,	"partition table offset",	0);
	create_insn	(x=0XCA7);
	op_hex		(x,	1);
	set_cmt	(0XCAD,	"FAT12",	0);
	set_cmt	(0XCB2,	"FAT16",	0);
	set_cmt	(0XCB7,	"FAT16 big",	0);
	set_cmt	(0XCBC,	"FAT32 CHS",	0);
	set_cmt	(0XCC1,	"FAT16 LBA",	0);
	set_cmt	(0XCC6,	"FAT32 LBA",	0);
	create_insn	(x=0XCD1);
	op_dec		(x,	1);
	set_cmt	(0XCD4,	"end of partition table",	0);
	create_insn	(x=0XCE3);
	op_hex		(x,	1);
	set_cmt	(0XCE9,	"FAT12",	0);
	set_cmt	(0XCEE,	"FAT16 (<= 32MB)",	0);
	set_cmt	(0XCF3,	"FAT16 big (> 32MB)",	0);
	set_cmt	(0XCF8,	"FAT32 CHS",	0);
	set_cmt	(0XCFD,	"FAT16 LBA",	0);
	set_cmt	(0XD02,	"FAT32 LBA",	0);
	set_cmt	(0XD07,	"is this our target partition #?\n(0 = first primary dos or active partition)",	0);
	set_cmt	(0XD09,	"yes",	0);
	set_cmt	(0XD0B,	"count down",	0);
	set_cmt	(0XD0D,	"next pte",	0);
	create_insn	(x=0XD0D);
	op_dec		(x,	1);
	set_cmt	(0XD10,	"end of partition table",	0);
	set_cmt	(0XD16,	"error",	0);
	set_cmt	(0XD1A,	"FAT32 CHS",	0);
	create_insn	(0XD1A);
	set_cmt	(0XD24,	"FAT16 LBA",	0);
	set_cmt	(0XD29,	"FAT32 LBA",	0);
	set_cmt	(0XD33,	"fLBArw ; LBA r/w flag",	0);
	create_insn	(x=0XD33);
	op_hex		(x,	1);
	set_name	(0XD39,	"set2");
	set_cmt	(0XD3E,	"start sector (LBA) of the partition",	0);
	set_cmt	(0XD47,	"-1 for end sector calculation",	0);
	set_cmt	(0XD4A,	"start LBA + partition size in sectors",	0);
	set_cmt	(0XD52,	"ftoobig\nend sector num of the partition is too big",	0);
	create_insn	(x=0XD52);
	op_hex		(x,	1);
	set_cmt	(0XD58,	"start sector (LBA) of the partition",	0);
	set_cmt	(0XD5B,	"[di+BDS.hiddensectors]",	0);
	set_cmt	(0XD62,	"[di+BDS.hiddensectors+2]",	0);
	set_cmt	(0XD66,	"partition size (total sectors) hw",	0);
	set_cmt	(0XD69,	"partition size (total sectors) lw",	0);
	set_cmt	(0XD6C,	"[di+BDS.totalsecs16]",	0);
	set_cmt	(0XD72,	"[di+BDS.totalsecs32+2]",	0);
	set_cmt	(0XD76,	"[di+BDS.totalsecs32]",	0);
	set_cmt	(0XD7F,	"if partition size > 64",	0);
	create_insn	(x=0XD7F);
	op_dec		(x,	1);
	set_cmt	(0XD82,	"error",	0);
	set_cmt	(0XD8A,	"[es:di+BDS.hiddensecs+2]",	0);
	set_cmt	(0XD8E,	"[es:di+BDS.hiddensecs]",	0);
	set_cmt	(0XD92,	"fLBArw ; LBA read/write flag",	0);
	create_insn	(x=0XD92);
	op_hex		(x,	1);
	set_cmt	(0XDAB,	"[di+BDS.secpertrack]",	0);
	create_insn	(0XDAB);
	create_insn	(x=0XDB5);
	op_dec		(x,	1);
	create_byte	(0XDB9);
	create_word	(0XDBA);
	create_word	(0XDBC);
	set_cmt	(0XDC6,	"[di+BDS.heads]",	0);
	set_cmt	(0XDD2,	"if ax (cylinder number) > 1024",	0);
	create_insn	(x=0XDD2);
	op_dec		(x,	1);
	set_cmt	(0XDD8,	"error (out of CHS limit)",	0);
	set_cmt	(0XDDC,	"[di+BDS.bdsm_ismini] ; check for mini disk",	0);
	set_cmt	(0XDE3,	"[di+BDS.bdsm_hidden_trks] ; set the physical track number",	0);
	set_cmt	(0XDE7,	"move high two bits of cyl to high",	0);
	create_insn	(x=0XDE7);
	op_hex		(x,	1);
	set_cmt	(0XDEA,	"turn off remainder of bits",	0);
	create_insn	(x=0XDEA);
	op_hex		(x,	1);
	set_cmt	(0XDED,	" move two bits to correct spot",	0);
	set_cmt	(0XDEF,	"ch iscylinder (low 8 bits)\ncl is sector + 2 high bits of cylinder",	0);
	set_cmt	(0XDF1,	"dh is head",	0);
	set_cmt	(0XDF3,	"dl is drive number",	0);
	set_cmt	(0XDF9,	"for convenience,\nwe are going to read the logical boot sector\ninto cs:disksector area.",	0);
	set_cmt	(0XE01,	"DISK - READ SECTORS INTO MEMORY\nAL = number of sectors to read, CH = track, CL = sector\nDH = head, DL = drive, ES:BX -> buffer to fill\nReturn: CF set on error, AH = status, AL = number of sectors read",	0);
	create_insn	(x=0XE01);
	op_hex		(x,	0);
	set_cmt	(0XE0F,	"if not FAT32 partition/volume, read with error",	0);
	set_cmt	(0XE13,	"FAT32 backup boot sector already read ?",	0);
	set_cmt	(0XE1A,	"yes, read with error",	0);
	set_cmt	(0XE1E,	"TRUE",	0);
	set_cmt	(0XE24,	"[di+BDS.hiddensecs+2]",	0);
	set_cmt	(0XE28,	"[di+BDS.hiddensecs]",	0);
	set_cmt	(0XE2C,	"+ backup boot sector (BPB_BkBootSec) offset",	0);
	set_cmt	(0XE32,	"read backup boot sector",	0);
	create_insn	(0XE35);
	set_cmt	(0XE37,	"is it a near jump?",	0);
	create_insn	(x=0XE37);
	op_hex		(x,	1);
	set_cmt	(0XE3A,	"yes",	0);
	set_cmt	(0XE3C,	"is it a short jump?",	0);
	create_insn	(x=0XE3C);
	op_hex		(x,	1);
	set_cmt	(0XE3F,	"no",	0);
	set_cmt	(0XE41,	"yes, is the next one a nop?",	0);
	create_insn	(x=0XE41);
	op_hex		(x,	1);
	set_cmt	(0XE45,	"yes",	0);
	set_cmt	(0XE47,	"disksector+EXT_BOOT.BPB\npoint to the bpb in the boot record",	0);
	set_cmt	(0XE4A,	"[bx+EBPB.MEDIADESCRIPTOR]\nget the mediadescriptor byte",	0);
	set_cmt	(0XE4D,	"mask off low nibble",	0);
	create_insn	(x=0XE4D);
	op_hex		(x,	1);
	set_cmt	(0XE4F,	"is high nibble = 0Fh?",	0);
	create_insn	(x=0XE4F);
	op_hex		(x,	1);
	set_cmt	(0XE51,	"no, invalid boot record",	0);
	set_cmt	(0XE53,	"[bx+EBPB.BYTESPERSECTOR]",	0);
	create_insn	(x=0XE53);
	op_dec		(x,	1);
	set_cmt	(0XE57,	"invalidate non 512 byte sectors",	0);
	set_cmt	(0XE59,	"make sure the sectorspercluster\nis a power of 2",	0);
	set_cmt	(0XE5C,	"is it zero?",	0);
	set_cmt	(0XE5E,	"yes, invalid bs",	0);
	set_cmt	(0XE60,	"shift until first bit emerges",	0);
	create_insn	(x=0XE60);
	op_hex		(x,	1);
	set_cmt	(0XE68,	"FAT32 volume/fs ?",	0);
	set_cmt	(0XE6E,	"no",	0);
	set_cmt	(0XE70,	"backup booot sector already read ?",	0);
	set_cmt	(0XE78,	"read (FAT32 fs) backup boot sector",	0);
	create_insn	(0XE7A);
	set_cmt	(0XE7C,	"'2.' (NASM syntax)",	0);
	create_insn	(0XE8B);
	set_cmt	(0XE8E,	"'0.' (NASM syntax)",	0);
	create_insn	(x=0XE9A);
	op_hex		(x,	1);
	set_cmt	(0XEA1,	"'3.' (NASM syntax)",	0);
	create_insn	(0XEA1);
	create_insn	(x=0XEAC);
	op_dec		(x,	0);
	set_cmt	(0XEB4,	"BPB_FATSz16",	0);
	create_insn	(x=0XEB4);
	op_dec		(x,	0);
	set_cmt	(0XEBA,	"BS_BootSig (FAT32 boot sector)",	0);
	create_insn	(x=0XEBA);
	op_dec		(x,	0);
	op_hex		(x,	1);
	set_cmt	(0XEC0,	"BPB_NumFATs",	0);
	create_insn	(x=0XEC0);
	op_dec		(x,	0);
	set_cmt	(0XEC6,	"BPB_RootClus",	0);
	create_insn	(x=0XEC6);
	op_dec		(x,	0);
	set_cmt	(0XECD,	"BPB_FATSz32",	0);
	create_insn	(x=0XECD);
	op_dec		(x,	0);
	set_cmt	(0XED4,	"BPB_FSVer",	0);
	create_insn	(x=0XED4);
	op_dec		(x,	0);
	set_cmt	(0XEDA,	"is it FAT32 partition?",	0);
	set_cmt	(0XEE0,	"no",	0);
	set_cmt	(0XEE4,	"set FAT32 fs (volume) flag",	0);
	create_insn	(x=0XEE4);
	op_hex		(x,	1);
	set_cmt	(0XEEC,	"BS_BootSig ; FAT\nExtended boot signature (0x29)",	0);
	create_insn	(x=0XEEC);
	op_hex		(x,	1);
	set_cmt	(0XEF2,	"BPB.fats\n[disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]",	0);
	set_cmt	(0XEF6,	"a fat system.",	0);
	create_insn	(x=0XEF8);
	op_hex		(x,	1);
	set_cmt	(0XEFF,	"disksector+EXT_BOOT.BPB",	0);
	set_cmt	(0XF02,	"add di,BDS.BPB",	0);
	create_insn	(x=0XF2C);
	op_dec		(x,	1);
	create_insn	(x=0XF32);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0XF3B,	"disksector+EXT_BOOT.BPB",	0);
	create_insn	(0XF3B);
	set_name	(0XF3B,	"copybpb_fat");
	set_cmt	(0XF3E,	"BPB.totalsecs16",	0);
	set_cmt	(0XF47,	"BPB.totalsecs32",	0);
	set_cmt	(0XF50,	"[es:di+BDS.totalsecs32]",	0);
	set_cmt	(0XF5B,	"BPB_NumFATs",	0);
	set_cmt	(0XF5E,	"[es:di+BDS.fats] ; number of FATs",	0);
	set_cmt	(0XF62,	"BPB.resectors",	0);
	set_cmt	(0XF67,	"[es:di+BDS.resectors]\nreserved sectors",	0);
	set_cmt	(0XF6E,	"BPB_FATSz16",	0);
	set_cmt	(0XF71,	"[es:di+BDS.fatsecs] ; 16 bit fat sectors",	0);
	set_cmt	(0XF79,	"FAT32 volume/fs boot sector",	0);
	set_cmt	(0XF7B,	"BPB_FATSz32",	0);
	set_cmt	(0XF7E,	"[es:di+BDS.fatsecs32]",	0);
	set_cmt	(0XF81,	"copy from BPB_FATSz32 to BPB_FSInfo",	0);
	create_insn	(x=0XF81);
	op_dec		(x,	1);
	set_cmt	(0XF89,	"BPB.FATSz32",	0);
	set_cmt	(0XF90,	"BPB_NumFATs ; Number of FATs",	0);
	set_cmt	(0XFA1,	"root directory entries",	0);
	set_cmt	(0XFA6,	"[es:di+BDS.direntries]",	0);
	set_cmt	(0XFAA,	"BPB.fatsecs ; 16 bit fat sectors",	0);
	set_cmt	(0XFAE,	"FAT32 volume/fs",	0);
	create_insn	(x=0XFB0);
	op_dec		(x,	1);
	set_cmt	(0XFB4,	"result: bx = root directory sectors",	0);
	create_insn	(x=0XFB4);
	op_hex		(x,	1);
	set_cmt	(0XFB8,	"result: eax = data sectors\n       (for cluster count calculation)",	0);
	set_cmt	(0XFBC,	"BPB.secperclus",	0);
	set_cmt	(0XFC1,	"[es:di+BDS.secperclus]",	0);
	set_cmt	(0XFCB,	"FAT12 cluster number limit: 0FF6h",	0);
	set_cmt	(0XFD3,	"FAT16 cluster number limit: 0FFF6h",	0);
	set_cmt	(0XFDB,	"fbigbig",	0);
	create_insn	(x=0XFDB);
	op_hex		(x,	1);
	set_cmt	(0XFE3,	"toobig",	0);
	create_insn	(x=0XFE3);
	op_hex		(x,	1);
	set_cmt	(0XFEC,	"fbig",	0);
	create_insn	(x=0XFEC);
	op_hex		(x,	1);
	create_insn	(x=0XFF2);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0XFFB,	"[di+BDS.flags+1] ; unformatted_media\nSet unformatted media flag.",	0);
	create_insn	(x=0XFFB);
	op_hex		(x,	1);
	set_cmt	(0X1001,	"[es:di+BDS.totalsecs32]",	0);
	set_cmt	(0X1006,	"FAT default disk parms table",	0);
	create_insn	(x=0X1006);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1011,	"FAT32 default disk parms table",	0);
	create_insn	(x=0X1011);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101A);
	op_dec		(x,	1);
	set_cmt	(0X101F,	"fat size for fbigfat flag",	0);
	create_insn	(0X101F);
	set_cmt	(0X1023,	"(fbig flag, 40h or 0)",	0);
	set_cmt	(0X1028,	"ch = number of sectors per cluster\ncl = log base 2 of ch",	0);
	set_cmt	(0X102C,	"dx = number of root dir entries",	0);
	set_cmt	(0X1030,	"[es:di+BDS.direntries]\nsave number of (root) dir entries",	0);
	set_cmt	(0X1034,	"[es:di+BDS.totalsecs32]",	0);
	set_cmt	(0X1039,	"[es:di+BDS.secperclus]\nsave sectors per cluster",	0);
	set_cmt	(0X103D,	"[es:di+BDS.fatsiz] ; fat size flag\nfbig (40h, FAT16) + fbigbig (20h, FAT32)",	0);
	create_insn	(x=0X103D);
	op_hex		(x,	1);
	set_cmt	(0X1045,	"FAT12 volume/fs",	0);
	set_cmt	(0X1047,	"spc",	0);
	set_cmt	(0X1049,	"dec spc for cluster number round up",	0);
	set_cmt	(0X104C,	"result: bx = number of clusters (volume size)",	0);
	set_cmt	(0X104E,	"number of clusters in FAT",	0);
	set_cmt	(0X104F,	"clear bit 0 (make even number)",	0);
	create_insn	(x=0X104F);
	op_hex		(x,	1);
	create_insn	(x=0X1054);
	op_hex		(x,	1);
	set_cmt	(0X1056,	"bx = 1.5 * bx = number of FAT bytes\n(after make even cluster count -round down-)",	0);
	set_cmt	(0X1058,	"round up",	0);
	create_insn	(x=0X1058);
	op_dec		(x,	1);
	set_cmt	(0X105C,	"convert byte count to sector count",	0);
	create_insn	(x=0X105C);
	op_hex		(x,	1);
	set_cmt	(0X105E,	"[di+BDS.fatsecs]",	0);
	set_cmt	(0X1064,	"fbigbig (FAT32) flag",	0);
	create_insn	(x=0X1064);
	op_hex		(x,	1);
	set_cmt	(0X106C,	"[es:di+BDS.fats] ; number of FATs",	0);
	set_cmt	(0X1071,	"[es:di+BDS.resectors]\nset reserved sectors to 32 (FAT32 de facto)",	0);
	create_insn	(x=0X1071);
	op_dec		(x,	1);
	set_cmt	(0X1077,	"fbigbig (FAT32) flag",	0);
	create_insn	(x=0X1077);
	op_hex		(x,	1);
	set_cmt	(0X107F,	"[es:di+BDS.direntries]",	0);
	set_cmt	(0X1085,	"16 directory entries per sector\n(round up sector count by adding 15)",	0);
	create_insn	(x=0X1085);
	op_dec		(x,	1);
	set_cmt	(0X1089,	"(rounded) dir entries / 16",	0);
	create_insn	(x=0X1089);
	op_hex		(x,	1);
	set_cmt	(0X108D,	"\n; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)\n; 27/09/2022\n; (Microsoft FAT32 File System Specification,\n; December 2000, Page 21)\n; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)\n; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs\n; 8/8/2023 (Retro DOS v5.0)\n; If(FATType == FAT32)\n;   TmpVal2 = TmpVal2 / 2;\n; FATsz = (TmpVal1+(TmpVal2-1))/TmpVal2\n; 8/8/2023 (Retro DOS v5.0)\n; If(FATType == FAT32) {\n;   BPB_FATSz16 = 0;\n;   BPB_FATSz32 = FATSz;\n;} else {\n;   BPB_FATSz16 = LOWORD(FATSz);\n;/* there is no BPB_FATSz32 in a FAT16 BPB */\n;}",	0);
	set_cmt	(0X1090,	"[es:di+BDS.resectors]",	0);
	set_cmt	(0X1096,	"TmpVal1",	0);
	set_cmt	(0X1099,	"[es:di+BDS.fats]",	0);
	set_cmt	(0X109F,	"[es:di+BDS.secperclus]\nbx = TmpVal2",	0);
	set_cmt	(0X10A3,	"fbigbig (FAT32) flag",	0);
	create_insn	(x=0X10A3);
	op_hex		(x,	1);
	set_cmt	(0X10AB,	"If(FATType == FAT32) \n   TmpVal2 = TmpVal2 / 2;",	0);
	create_insn	(x=0X10AB);
	op_hex		(x,	1);
	set_cmt	(0X10AE,	"FATsz = (TmpVal1+(TmpVal2-1))/TmpVal2",	0);
	set_cmt	(0X10B9,	"ecx = 0",	0);
	set_cmt	(0X10BC,	"fbigbig (FAT32) flag",	0);
	create_insn	(x=0X10BC);
	op_hex		(x,	1);
	set_cmt	(0X10C2,	"not FAT32",	0);
	set_cmt	(0X10C4,	"eax = 0",	0);
	set_cmt	(0X10C6,	"[es:di+BDS.fatsecs] ; 16 bit fat secs",	0);
	set_cmt	(0X10CA,	"[es:di+BDS.fatsecs32]",	0);
	set_cmt	(0X10D4,	"[es:di+BDS.fatsiz] ; fat size flag\n\nset the default filesys_id,\n volume label, serial number",	0);
	create_insn	(x=0X10D8);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X10DE,	"[es:di+BDS.totalsecs32+2]",	0);
	set_cmt	(0X10E2,	"[es:di+BDS.totalsecs32]",	0);
	set_cmt	(0X10EB,	"[es:di+BDS.hiddensecs+2]",	0);
	set_cmt	(0X10F2,	"[es:di+BDS.hiddensecs]",	0);
	set_cmt	(0X10F8,	"[es:di+BDS.totalsecs32]",	0);
	set_cmt	(0X10FC,	"[es:di+BDS.totalsecs16]",	0);
	set_cmt	(0X110B,	"[es:di+BDS.fatsiz]\nset size of fat on media",	0);
	create_insn	(0X1115);
	set_name	(0X1115,	"cover_fdisk_bug");
	set_cmt	(0X1118,	"BPB_FATSz16",	0);
	set_cmt	(0X111C,	"nothing to do for FAT32 volume/fs",	0);
	set_cmt	(0X111E,	"[disksector+EXT_BOOT.SIG],\nEXT_BOOT_SIGNATURE",	0);
	create_insn	(x=0X111E);
	op_hex		(x,	1);
	set_cmt	(0X1124,	"'10' ; os2 1.0 = ibm 10.0",	0);
	set_cmt	(0X1131,	"disksector+EXT_BOOT.BPB",	0);
	set_cmt	(0X1134,	"[si+EBPB.TOTALSECTORS]",	0);
	set_cmt	(0X113D,	"[si+EBPB.HIDDENSECTORS]",	0);
	set_cmt	(0X1142,	"\nif carry set and ax=0",	0);
	set_cmt	(0X1144,	"0 -> 0FFFFh\nthen decrease BPB_TOTALSECTORS by 1",	0);
	set_cmt	(0X1147,	"[di+BDS.totalsecs32]",	0);
	set_cmt	(0X114C,	"[di+BDS.totalsecs32+2]",	0);
	create_insn	(0X115B);
	set_name	(0X115B,	"setdrvparms");
	create_insn	(x=0X115D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11A2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X11CF);
	op_hex		(x,	1);
	create_insn	(x=0X11DD);
	op_hex		(x,	1);
	create_insn	(x=0X11EE);
	op_hex		(x,	1);
	create_insn	(0X11FC);
	create_insn	(x=0X1212);
	op_hex		(x,	1);
	create_insn	(x=0X122C);
	op_hex		(x,	1);
	create_insn	(x=0X1231);
	op_hex		(x,	1);
	create_insn	(x=0X123F);
	op_hex		(x,	1);
	create_insn	(0X124D);
	create_insn	(x=0X1259);
	op_hex		(x,	1);
	create_insn	(x=0X125B);
	op_hex		(x,	1);
	create_insn	(0X125F);
	create_insn	(x=0X1283);
	op_hex		(x,	1);
	create_insn	(x=0X1285);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X12A1);
	create_insn	(0X12A2);
	set_name	(0X12A2,	"domini");
	create_insn	(x=0X12AB);
	op_hex		(x,	1);
	set_cmt	(0X12B4,	"DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)\nDL = drive number\nReturn: CF set on error, AH = status code, BL = drive type\nDL = number of consecutive drives\nDH = maximum value for head number, ES:DI -> drive parameter",	0);
	create_insn	(x=0X12B4);
	op_hex		(x,	0);
	create_insn	(x=0X12BF);
	op_hex		(x,	1);
	set_cmt	(0X12CC,	"read master boot record into\ninitbootsegment:bootbias",	0);
	create_word	(0X12DF);
	make_array	(0X12DF,	0X2);
	set_name	(0X12DF,	"ep_start_sector");
	create_word	(0X12E3);
	make_array	(0X12E3,	0X2);
	set_name	(0X12E3,	"ep_hidden_sectors");
	create_byte	(0X12E7);
	set_name	(0X12E7,	"lba_rd");
	set_cmt	(0X12E8,	"buffer offset",	0);
	create_insn	(0X12E8);
	set_name	(0X12E8,	"find_mini_partition");
	set_cmt	(0X12F3,	"EXTENDED DOS CHS",	0);
	set_name	(0X12F3,	"fmpnext");
	set_cmt	(0X12F8,	"EXTENDED DOS LBA",	0);
	create_insn	(x=0X12FD);
	op_dec		(x,	1);
	create_insn	(0X1309);
	set_name	(0X132B,	"fmpgot");
	create_insn	(x=0X1337);
	op_hex		(x,	1);
	create_insn	(x=0X136D);
	op_dec		(x,	1);
	set_cmt	(0X137D,	"set fLBArw flag ; LBA read/write ok/ready",	0);
	create_insn	(x=0X137D);
	op_hex		(x,	1);
	set_cmt	(0X13A5,	"[di+BDS.hiddensectors]",	0);
	set_cmt	(0X13A9,	"[di+BDS.hiddensectors+2]",	0);
	set_cmt	(0X13BB,	"cylinder",	0);
	create_insn	(0X13BB);
	set_cmt	(0X13BE,	"get higher bits of cyl",	0);
	create_insn	(x=0X13BE);
	op_hex		(x,	1);
	create_insn	(x=0X13C1);
	op_hex		(x,	1);
	set_cmt	(0X13C4,	"cyl byte",	0);
	set_cmt	(0X13C7,	"[di+BDS.bdsm_hidden_trks] ; set hidden trks",	0);
	set_cmt	(0X13CB,	"cylinder,cylinder/sector",	0);
	set_cmt	(0X13CE,	"head",	0);
	set_cmt	(0X13D9,	"buffer offset (bootbias)",	0);
	set_cmt	(0X13DE,	"DISK - READ SECTORS INTO MEMORY\nAL = number of sectors to read, CH = track, CL = sector\nDH = head, DL = drive, ES:BX -> buffer to fill\nReturn: CF set on error, AH = status, AL = number of sectors read",	0);
	create_insn	(x=0X13DE);
	op_hex		(x,	0);
	set_cmt	(0X13E8,	"install a mini disk.\nbx value saved.",	0);
	set_cmt	(0X13F0,	"-- install the bdsm into table",	0);
	create_insn	(0X13F6);
	create_word	(0X13F8);
	set_name	(0X13F8,	"_DAP_");
	create_word	(0X13FA);
	set_name	(0X13FA,	"_dap_scount");
	create_word	(0X13FC);
	set_name	(0X13FC,	"_dap_b_offset");
	create_word	(0X13FE);
	set_name	(0X13FE,	"_dap_b_segment");
	create_word	(0X1400);
	set_name	(0X1400,	"_dap_sector_lw");
	create_word	(0X1402);
	set_name	(0X1402,	"_dap_sector_hw");
	create_dword	(0X1404);
	set_name	(0X1404,	"_dap_sector_hd");
	create_insn	(0X1408);
	set_name	(0X1408,	"LBA_read");
	create_insn	(x=0X1427);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X142D,	"DISK - IBM/MS Extension\nEXTENDED READ (DL - drive, DS:SI - disk address packet)",	0);
	create_insn	(x=0X142D);
	op_hex		(x,	0);
	create_insn	(0X1431);
	set_name	(0X1431,	"setmini");
	set_cmt	(0X1435,	"false",	0);
	set_cmt	(0X1440,	"true",	0);
	create_insn	(0X1447);
	set_cmt	(0X1451,	"true",	0);
	create_insn	(x=0X1456);
	op_hex		(x,	1);
	create_insn	(0X145E);
	create_insn	(x=0X146D);
	op_dec		(x,	1);
	create_insn	(0X147C);
	create_insn	(x=0X147F);
	op_dec		(x,	1);
	set_name	(0X147F,	"dmax_check");
	create_insn	(x=0X148D);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(0X1495);
	set_name	(0X1495,	"xinstall_bds");
	set_cmt	(0X1496,	"get first bds",	0);
	set_cmt	(0X149B,	"is this the last one?",	0);
	set_cmt	(0X149F,	"skip ahead if so",	0);
	set_cmt	(0X14A1,	"chain through list",	0);
	set_cmt	(0X14A6,	"[si+BDS.link]",	0);
	create_insn	(0X14A6);
	set_cmt	(0X14A9,	"[si+BDS.link+2]",	0);
	set_cmt	(0X14AD,	"[di+BDS.link] ; null ptr",	0);
	set_cmt	(0X14B2,	"[di+BDS.link+2]",	0);
	set_cmt	(0X14BB,	"BDS.size = 150",	0);
	create_insn	(x=0X14BB);
	op_dec		(x,	1);
	create_insn	(0X14C4);
	create_insn	(x=0X14C6);
	op_hex		(x,	1);
	set_cmt	(0X14D7,	"DISK - IBM/MS Extension\nGET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)",	0);
	create_insn	(x=0X14D7);
	op_hex		(x,	0);
	create_insn	(x=0X14E6);
	op_hex		(x,	1);
	create_insn	(x=0X14ED);
	op_hex		(x,	1);
	create_insn	(x=0X14F1);
	op_hex		(x,	1);
	create_byte	(0X14F8);
	make_array	(0X14F8,	0X8);
	create_byte	(x=0X1500);
	make_array	(x,	0X1F40);
	op_dec		(x,	0);
	set_name	(0X1500,	"end_of_biosdata");
	create_word	(0X3440);
	create_word	(0X3442);
	set_name	(0X3442,	"no_bq");
	create_word	(0X3444);
	set_name	(0X3444,	"DataVersion");
	create_byte	(0X3446);
	make_array	(0X3446,	0X8);
	set_name	(0X3446,	"WinoldPatch1");
	create_word	(0X344E);
	set_name	(0X344E,	"MYNUM");
	create_word	(0X3450);
	set_name	(0X3450,	"FCBLRU");
	create_word	(0X3452);
	set_name	(0X3452,	"OpenLRU");
	create_dword	(0X3454);
	set_name	(0X3454,	"OEM_HANDLER");
	set_cmt	(0X3458,	"DOSCODE:LeaveDOS",	0);
	create_word	(x=0X3458);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X3458,	"LeaveAddr");
	create_word	(0X345A);
	set_name	(0X345A,	"RetryCount");
	create_word	(0X345C);
	set_name	(0X345C,	"RetryLoop");
	create_dword	(0X345E);
	set_name	(0X345E,	"LastBuffer");
	create_word	(0X3462);
	set_name	(0X3462,	"CONTPOS");
	create_word	(0X3464);
	set_name	(0X3464,	"arena_head");
	create_dword	(0X3466);
	set_name	(0X3466,	"DPBHEAD");
	create_word	(x=0X346A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X346A,	"SFT_ADDR");
	create_word	(0X346C);
	set_name	(0X346C,	"SFT_ADDR_seg");
	create_dword	(0X346E);
	set_name	(0X346E,	"BCLOCK");
	create_dword	(0X3472);
	set_name	(0X3472,	"BCON");
	create_word	(x=0X3476);
	op_dec		(x,	0);
	set_name	(0X3476,	"MAXSEC");
	create_dword	(0X3478);
	set_name	(0X3478,	"BUFFHEAD");
	create_dword	(0X347C);
	set_name	(0X347C,	"CDSADDR");
	create_dword	(0X3480);
	set_name	(0X3480,	"SFTFCB");
	create_word	(0X3484);
	set_name	(0X3484,	"KEEPCOUNT");
	create_byte	(0X3486);
	set_name	(0X3486,	"NUMIO");
	create_byte	(0X3487);
	set_name	(0X3487,	"CDSCOUNT");
	create_dword	(0X3488);
	set_name	(0X3488,	"NULDEV");
	create_word	(0X348C);
	create_word	(x=0X348E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X3490);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_strlit	(0X3492,	0X349A);
	create_byte	(0X349A);
	set_name	(0X349A,	"SPLICES");
	create_word	(0X349B);
	set_name	(0X349B,	"Special_Entries");
	create_dword	(0X349D);
	set_name	(0X349D,	"UU_IFS_DOS_CALL");
	create_word	(0X34A1);
	set_name	(0X34A1,	"ChkCopyProt");
	create_word	(0X34A3);
	create_word	(0X34A5);
	create_word	(0X34A7);
	create_byte	(0X34A9);
	set_name	(0X34A9,	"BOOTDRIVE");
	create_byte	(0X34AA);
	set_name	(0X34AA,	"DDMOVE");
	create_word	(0X34AB);
	set_name	(0X34AB,	"EXT_MEM_SIZE");
	create_dword	(0X34AD);
	set_name	(0X34AD,	"BufferQueue");
	create_word	(0X34B1);
	set_name	(0X34B1,	"DirtyBufferCount");
	create_dword	(0X34B3);
	set_name	(0X34B3,	"SC_CACHE_PTR");
	create_word	(0X34B7);
	set_name	(0X34B7,	"SC_CACHE_COUNT");
	create_byte	(0X34B9);
	set_name	(0X34B9,	"BuffInHMA");
	create_dword	(0X34BA);
	set_name	(0X34BA,	"LoMemBuff");
	create_word	(x=0X34BE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X34C0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_byte	(0X34C2);
	create_byte	(0X34C3);
	set_name	(0X34C3,	"IoStatFail");
	create_byte	(0X34C4);
	set_name	(0X34C4,	"ALLOCMSAVE");
	create_byte	(0X34C5);
	set_name	(0X34C5,	"A20OFF_COUNT");
	create_byte	(0X34C6);
	set_name	(0X34C6,	"DOS_FLAG");
	create_word	(0X34C7);
	set_name	(0X34C7,	"UNPACK_OFFSET");
	create_byte	(0X34C9);
	set_name	(0X34C9,	"UMBFLAG");
	create_word	(0X34CA);
	set_name	(0X34CA,	"SAVE_AX");
	create_word	(0X34CC);
	set_name	(0X34CC,	"UMB_HEAD");
	create_word	(0X34CE);
	set_name	(0X34CE,	"START_ARENA");
	create_dword	(x=0X34D0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X34D0,	"JShare");
	create_dword	(x=0X34D4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34D8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34DC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34E0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34E4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34E8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34EC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34F0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34F4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34F8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X34FC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X3500);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X3504);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(x=0X3508);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_dword	(0X350C);
	set_name	(0X350C,	"SFTABL");
	create_word	(0X3510);
	create_byte	(x=0X3512);
	make_array	(x,	0X127);
	op_dec		(x,	0);
	set_name	(0X3512,	"SFT0_SFTable");
	create_byte	(0X3639);
	set_name	(0X3639,	"CARPOS");
	create_byte	(0X363A);
	set_name	(0X363A,	"STARTPOS");
	create_byte	(x=0X363B);
	make_array	(x,	0X80);
	op_dec		(x,	0);
	set_name	(0X363B,	"INBUF");
	create_byte	(x=0X36BB);
	make_array	(x,	0X83);
	op_dec		(x,	0);
	set_name	(0X36BB,	"CONBUF");
	create_byte	(0X373E);
	set_name	(0X373E,	"PFLAG");
	create_byte	(0X373F);
	set_name	(0X373F,	"VDERFLG");
	create_byte	(0X3740);
	set_name	(0X3740,	"CHARCO");
	create_byte	(x=0X3741);
	op_chr		(x,	0);
	set_name	(0X3741,	"chSwitch");
	create_byte	(0X3742);
	set_name	(0X3742,	"AllocMethod");
	create_byte	(0X3743);
	set_name	(0X3743,	"fShare");
	create_byte	(0X3744);
	set_name	(0X3744,	"DIFFNAM");
	create_byte	(0X3745);
	make_array	(0X3745,	0X10);
	set_name	(0X3745,	"MYNAME");
	create_word	(x=0X3755);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X3755,	"CritPatch");
	create_word	(x=0X3757);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X3759);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X375B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X375D);
	create_byte	(0X375F);
	create_byte	(0X3760);
	set_name	(0X3760,	"ERRORMODE");
	create_byte	(0X3761);
	set_name	(0X3761,	"INDOS");
	create_byte	(0X3762);
	set_name	(0X3762,	"WPERR");
	create_byte	(0X3763);
	set_name	(0X3763,	"EXTERR_LOCUS");
	create_word	(0X3764);
	set_name	(0X3764,	"EXTERR");
	create_byte	(0X3766);
	set_name	(0X3766,	"EXTERR_ACTION");
	create_byte	(0X3767);
	set_name	(0X3767,	"EXTERR_CLASS");
	create_dword	(0X3768);
	set_name	(0X3768,	"EXTERRPT");
	create_dword	(0X376C);
	set_name	(0X376C,	"DMAADD");
	create_word	(0X3770);
	set_name	(0X3770,	"CurrentPDB");
	create_word	(0X3772);
	set_name	(0X3772,	"ConC_Spsave");
	create_word	(0X3774);
	set_name	(0X3774,	"exit_code");
	create_byte	(0X3776);
	set_name	(0X3776,	"CURDRV");
	create_byte	(0X3777);
	set_name	(0X3777,	"CNTCFLAG");
	create_byte	(0X3778);
	create_byte	(0X3779);
	create_word	(0X377A);
	set_name	(0X377A,	"USER_IN_AX");
	create_word	(0X377C);
	set_name	(0X377C,	"PROC_ID");
	create_word	(0X377E);
	set_name	(0X377E,	"USER_ID");
	create_word	(0X3780);
	set_name	(0X3780,	"FirstArena");
	create_word	(0X3782);
	set_name	(0X3782,	"BestArena");
	create_word	(0X3784);
	set_name	(0X3784,	"LastArena");
	create_word	(0X3786);
	set_name	(0X3786,	"ENDMEM");
	create_word	(0X3788);
	set_name	(0X3788,	"LASTENT");
	create_byte	(0X378A);
	set_name	(0X378A,	"FAILERR");
	create_byte	(0X378B);
	set_name	(0X378B,	"ALLOWED");
	create_byte	(0X378C);
	set_name	(0X378C,	"NoSetDir");
	create_byte	(0X378D);
	set_name	(0X378D,	"DidCTRLC");
	create_byte	(0X378E);
	set_name	(0X378E,	"SpaceFlag");
	create_byte	(0X378F);
	create_word	(0X3790);
	set_name	(0X3790,	"DAY");
	create_word	(0X3792);
	set_name	(0X3792,	"YEAR");
	create_word	(0X3794);
	set_name	(0X3794,	"DAYCNT");
	create_byte	(0X3796);
	set_name	(0X3796,	"WEEKDAY");
	create_byte	(0X3797);
	set_name	(0X3797,	"CONSWAP");
	create_byte	(0X3798);
	set_name	(0X3798,	"IDLEINT");
	create_byte	(0X3799);
	set_name	(0X3799,	"fAborting");
	set_cmt	(0X379A,	"offset DEVCALL",	0);
	create_byte	(0X379A);
	set_name	(0X379A,	"DEVCALL_REQLEN");
	create_byte	(0X379B);
	set_name	(0X379B,	"DEVCALL_REQUNIT");
	create_byte	(0X379C);
	set_name	(0X379C,	"DEVCALL_REQFUNC");
	create_word	(0X379D);
	set_name	(0X379D,	"DEVCALL_REQSTAT");
	create_byte	(0X379F);
	make_array	(0X379F,	0X8);
	create_byte	(0X37A7);
	set_name	(0X37A7,	"CALLUNIT");
	create_byte	(0X37A8);
	set_name	(0X37A8,	"CALLBR");
	create_byte	(0X37A9);
	set_name	(0X37A9,	"CALLVIDM");
	create_word	(0X37AA);
	set_name	(0X37AA,	"CALLXAD_2");
	create_word	(0X37AC);
	set_name	(0X37AC,	"CALLBPB");
	create_word	(0X37AE);
	set_name	(0X37AE,	"CALLSSEC");
	create_dword	(0X37B0);
	set_name	(0X37B0,	"CALLVIDRW");
	create_word	(0X37B4);
	make_array	(0X37B4,	0X2);
	set_name	(0X37B4,	"CALLNEWSC");
	create_word	(0X37B8);
	make_array	(0X37B8,	0X2);
	set_name	(0X37B8,	"CALLDEVAD");
	create_byte	(0X37BC);
	set_name	(0X37BC,	"IOCALL");
	create_byte	(0X37BD);
	set_name	(0X37BD,	"IOCALL_REQUNIT");
	create_byte	(0X37BE);
	set_name	(0X37BE,	"IOCALL_REQFUNC");
	create_word	(0X37BF);
	set_name	(0X37BF,	"IOCALL_REQSTAT");
	create_byte	(0X37C1);
	make_array	(0X37C1,	0X8);
	create_byte	(0X37C9);
	set_name	(0X37C9,	"IOMED");
	create_word	(0X37CA);
	make_array	(0X37CA,	0X2);
	set_name	(0X37CA,	"IOXAD");
	create_word	(0X37CE);
	set_name	(0X37CE,	"IOSCNT");
	create_word	(0X37D0);
	set_name	(0X37D0,	"IOSSEC");
	create_byte	(x=0X37D2);
	op_dec		(x,	0);
	set_name	(0X37D2,	"DSKSTCALL");
	create_byte	(0X37D3);
	create_byte	(0X37D4);
	set_name	(0X37D4,	"DSKSTCOM");
	create_word	(0X37D5);
	set_name	(0X37D5,	"DSKSTST");
	create_byte	(0X37D7);
	make_array	(0X37D7,	0X8);
	create_byte	(0X37DF);
	set_name	(0X37DF,	"DSKCHRET");
	create_word	(x=0X37E0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X37E0,	"DEVIOBUF_PTR");
	create_word	(0X37E2);
	set_name	(0X37E2,	"DOSSEG_INIT");
	create_word	(0X37E4);
	set_name	(0X37E4,	"DSKSTCNT");
	create_word	(0X37E6);
	create_byte	(0X37E8);
	set_name	(0X37E8,	"CreatePDB");
	create_dword	(0X37E9);
	set_name	(0X37E9,	"Lock_Buffer");
	create_dword	(0X37ED);
	create_byte	(0X37F1);
	create_word	(0X37F2);
	set_name	(0X37F2,	"USERNUM");
	create_word	(0X37F4);
	set_name	(0X37F4,	"USERNUM_2");
	create_word	(0X37F6);
	make_array	(0X37F6,	0X3);
	set_name	(0X37F6,	"TIMEBUF");
	create_word	(0X37FC);
	set_name	(0X37FC,	"DEVIOBUF");
	create_byte	(x=0X37FE);
	make_array	(x,	0X80);
	op_dec		(x,	0);
	set_name	(0X37FE,	"OPENBUF");
	create_byte	(x=0X387E);
	make_array	(x,	0X80);
	op_dec		(x,	0);
	set_name	(0X387E,	"RENBUF");
	create_byte	(x=0X38FE);
	make_array	(x,	0X35);
	op_dec		(x,	0);
	set_name	(0X38FE,	"SEARCHBUF");
	create_byte	(x=0X3933);
	make_array	(x,	0X58);
	op_dec		(x,	0);
	set_name	(0X3933,	"DUMMYCDS");
	create_byte	(x=0X398B);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	set_name	(0X398B,	"NAME1");
	create_byte	(x=0X3997);
	make_array	(x,	0XD);
	op_dec		(x,	0);
	set_name	(0X3997,	"NAME2");
	create_word	(0X39A4);
	set_name	(0X39A4,	"DESTSTART");
	create_byte	(0X39A6);
	make_array	(0X39A6,	0X5);
	create_byte	(0X39AB);
	set_name	(0X39AB,	"ATTRIB");
	create_byte	(0X39AC);
	set_name	(0X39AC,	"EXTFCB");
	create_byte	(0X39AD);
	set_name	(0X39AD,	"SATTRIB");
	create_byte	(0X39AE);
	set_name	(0X39AE,	"OPEN_ACCESS");
	create_byte	(0X39AF);
	set_name	(0X39AF,	"FOUNDDEL");
	create_byte	(0X39B0);
	set_name	(0X39B0,	"FOUND_DEV");
	create_byte	(0X39B1);
	set_name	(0X39B1,	"FSPLICE");
	create_byte	(0X39B2);
	set_name	(0X39B2,	"FSHARING");
	create_byte	(0X39B3);
	set_name	(0X39B3,	"SECCLUSPOS");
	create_byte	(0X39B4);
	set_name	(0X39B4,	"TRANS");
	create_byte	(0X39B5);
	set_name	(0X39B5,	"READOP");
	create_byte	(0X39B6);
	set_name	(0X39B6,	"THISDRV");
	create_byte	(0X39B7);
	set_name	(0X39B7,	"CLUSFAC");
	create_byte	(0X39B8);
	set_name	(0X39B8,	"CLUSSPLIT");
	create_byte	(0X39B9);
	set_name	(0X39B9,	"INSMODE");
	create_byte	(0X39BA);
	set_name	(0X39BA,	"CMETA");
	create_byte	(0X39BB);
	set_name	(0X39BB,	"VOLID");
	create_word	(0X39BC);
	set_name	(0X39BC,	"EXIT_TYPE");
	create_byte	(0X39BE);
	set_name	(0X39BE,	"CREATING");
	create_byte	(0X39BF);
	set_name	(0X39BF,	"DELALL");
	create_dword	(0X39C0);
	set_name	(0X39C0,	"EXITHOLD");
	create_word	(0X39C4);
	set_name	(0X39C4,	"USER_SP");
	create_word	(0X39C6);
	set_name	(0X39C6,	"USER_SS");
	create_word	(0X39C8);
	set_name	(0X39C8,	"CONTSTK");
	create_dword	(0X39CA);
	set_name	(0X39CA,	"THISDPB");
	create_word	(0X39CE);
	set_name	(0X39CE,	"CLUSSAVE");
	create_dword	(0X39D0);
	set_name	(0X39D0,	"CLUSSEC");
	create_word	(0X39D4);
	set_name	(0X39D4,	"PREREAD");
	create_word	(0X39D6);
	set_name	(0X39D6,	"FATBYT");
	create_word	(0X39D8);
	set_name	(0X39D8,	"FATBYTE");
	create_dword	(0X39DA);
	set_name	(0X39DA,	"DEVPT");
	create_dword	(0X39DE);
	set_name	(0X39DE,	"THISSFT");
	create_dword	(0X39E2);
	set_name	(0X39E2,	"THISCDS");
	create_dword	(0X39E6);
	set_name	(0X39E6,	"THISFCB");
	create_word	(0X39EA);
	set_name	(0X39EA,	"SFN");
	create_word	(0X39EC);
	set_name	(0X39EC,	"JFN");
	create_dword	(0X39EE);
	set_name	(0X39EE,	"PJFN");
	create_word	(0X39F2);
	set_name	(0X39F2,	"WFP_START");
	create_word	(0X39F4);
	set_name	(0X39F4,	"REN_WFP");
	create_word	(0X39F6);
	set_name	(0X39F6,	"CURR_DIR_END");
	create_word	(0X39F8);
	set_name	(0X39F8,	"NEXTADD");
	create_word	(0X39FA);
	set_name	(0X39FA,	"LASTPOS");
	create_word	(0X39FC);
	set_name	(0X39FC,	"CLUSNUM");
	create_dword	(0X39FE);
	set_name	(0X39FE,	"DIRSEC");
	create_word	(0X3A02);
	set_name	(0X3A02,	"DIRSTART");
	create_dword	(0X3A04);
	set_name	(0X3A04,	"SECPOS");
	create_dword	(0X3A08);
	set_name	(0X3A08,	"VALSEC");
	create_word	(0X3A0C);
	set_name	(0X3A0C,	"BYTSECPOS");
	create_dword	(0X3A0E);
	set_name	(0X3A0E,	"BYTPOS");
	create_word	(0X3A12);
	set_name	(0X3A12,	"BYTCNT1");
	create_word	(0X3A14);
	set_name	(0X3A14,	"BYTCNT2");
	create_word	(0X3A16);
	set_name	(0X3A16,	"SECCNT");
	create_word	(0X3A18);
	set_name	(0X3A18,	"ENTFREE");
	create_word	(0X3A1A);
	set_name	(0X3A1A,	"ENTLAST");
	create_word	(0X3A1C);
	set_name	(0X3A1C,	"NXTCLUSNUM");
	create_dword	(0X3A1E);
	set_name	(0X3A1E,	"GROWCNT");
	create_dword	(0X3A22);
	set_name	(0X3A22,	"CURBUF");
	create_word	(0X3A26);
	make_array	(0X3A26,	0X2);
	set_name	(0X3A26,	"CONSFT");
	create_word	(0X3A2A);
	set_name	(0X3A2A,	"SAVEBX");
	create_word	(0X3A2C);
	set_name	(0X3A2C,	"SAVEDS");
	create_word	(0X3A2E);
	set_name	(0X3A2E,	"RESTORE_TMP");
	create_word	(0X3A30);
	set_name	(0X3A30,	"NSS");
	create_word	(0X3A32);
	set_name	(0X3A32,	"NSP");
	create_word	(0X3A34);
	set_name	(0X3A34,	"EXTOPEN_FLAG");
	create_byte	(0X3A36);
	set_name	(0X3A36,	"EXTOPEN_ON");
	create_word	(0X3A37);
	set_name	(0X3A37,	"EXTOPEN_IO_MODE");
	create_word	(0X3A39);
	set_name	(0X3A39,	"SAVE_DI");
	create_word	(0X3A3B);
	set_name	(0X3A3B,	"SAVE_ES");
	create_word	(0X3A3D);
	set_name	(0X3A3D,	"SAVE_DX");
	create_word	(0X3A3F);
	set_name	(0X3A3F,	"SAVE_CX");
	create_word	(0X3A41);
	set_name	(0X3A41,	"SAVE_BX");
	create_word	(0X3A43);
	set_name	(0X3A43,	"SAVE_SI");
	create_word	(0X3A45);
	set_name	(0X3A45,	"SAVE_DS");
	create_word	(0X3A47);
	set_name	(0X3A47,	"HIGH_SECTOR");
	create_word	(x=0X3A49);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X3A49,	"OffsetMagicPatch");
	create_byte	(0X3A4B);
	set_name	(0X3A4B,	"DISK_FULL");
	create_word	(0X3A4C);
	set_name	(0X3A4C,	"TEMP_VAR");
	create_word	(0X3A4E);
	set_name	(0X3A4E,	"TEMP_VAR_2");
	create_byte	(0X3A50);
	set_name	(0X3A50,	"DrvErr");
	create_word	(0X3A51);
	set_name	(0X3A51,	"DOS34_FLAG");
	create_dword	(0X3A53);
	create_dword	(0X3A57);
	create_word	(0X3A5B);
	set_name	(0X3A5B,	"AbsRdWr_SS");
	create_word	(0X3A5D);
	set_name	(0X3A5D,	"AbsRdWr_SP");
	create_byte	(0X3A5F);
	create_byte	(x=0X3A60);
	make_array	(x,	0X180);
	op_dec		(x,	0);
	set_name	(0X3A60,	"RENAMEDMA");
	create_byte	(x=0X3BE0);
	make_array	(x,	0X180);
	op_dec		(x,	0);
	set_name	(0X3BE0,	"AUXSTACK");
	create_byte	(x=0X3D60);
	make_array	(x,	0X180);
	op_dec		(x,	0);
	set_name	(0X3D60,	"DSKSTACK");
	create_byte	(0X3EE0);
	set_name	(0X3EE0,	"PRINTER_FLAG");
	create_byte	(0X3EE1);
	set_name	(0X3EE1,	"VOLCHNG_FLAG");
	create_byte	(0X3EE2);
	set_name	(0X3EE2,	"VIRTUAL_OPEN");
	create_word	(0X3EE3);
	set_name	(0X3EE3,	"LNE_COUNT");
	create_dword	(0X3EE5);
	set_name	(0X3EE5,	"LNE_DIRSTART");
	create_dword	(0X3EE9);
	set_name	(0X3EE9,	"LNE_DIRSECTOR");
	create_dword	(0X3EED);
	set_name	(0X3EED,	"LNE_CLUSTER");
	create_word	(0X3EF1);
	set_name	(0X3EF1,	"LNE_LASTENT");
	create_word	(0X3EF3);
	set_name	(0X3EF3,	"ENTLAST_PREV");
	create_byte	(x=0X3EF5);
	make_array	(x,	0X12);
	op_dec		(x,	0);
	set_name	(0X3EF5,	"SRC_LNE");
	create_byte	(x=0X3F07);
	make_array	(x,	0X12);
	op_dec		(x,	0);
	set_name	(0X3F07,	"DEST_LNE");
	create_byte	(0X3F19);
	set_name	(0X3F19,	"absdrw_extd");
	create_word	(0X3F1A);
	set_name	(0X3F1A,	"DIRSTART_HW");
	create_word	(0X3F1C);
	set_name	(0X3F1C,	"CLUSNUM_HW");
	create_word	(0X3F1E);
	set_name	(0X3F1E,	"NXTCLUSNUM_HW");
	create_word	(0X3F20);
	set_name	(0X3F20,	"LASTPOS_HW");
	create_word	(0X3F22);
	set_name	(0X3F22,	"FATBYT_HW");
	create_word	(0X3F24);
	set_name	(0X3F24,	"DESTSTART_HW");
	create_word	(0X3F26);
	set_name	(0X3F26,	"CLUSTNUM_HW");
	create_word	(0X3F28);
	set_name	(0X3F28,	"CLUSDATA_HW");
	create_word	(0X3F2A);
	set_name	(0X3F2A,	"CCONTENT_HW");
	create_word	(0X3F2C);
	set_name	(0X3F2C,	"ROOTCLUST_HW");
	create_word	(0X3F2E);
	set_name	(0X3F2E,	"CCOUNT_HW");
	create_word	(0X3F30);
	set_name	(0X3F30,	"CLUSTERS_HW");
	create_word	(0X3F32);
	create_word	(0X3F34);
	create_byte	(0X3F36);
	create_byte	(0X3F37);
	set_name	(0X3F37,	"SWAP_END");
	create_word	(x=0X3F38);
	op_dec		(x,	0);
	set_name	(0X3F38,	"UCASE_TAB");
	create_byte	(0X3F3A);
	make_array	(0X3F3A,	0X80);
	set_name	(0X3F3A,	"UCASE_TAB_2");
	create_word	(0X3FBA);
	set_name	(0X3FBA,	"FILE_UCASE_TAB");
	create_byte	(0X3FBC);
	make_array	(0X3FBC,	0X80);
	set_name	(0X3FBC,	"FILE_UCASE_TAB_2");
	create_word	(x=0X403C);
	op_dec		(x,	0);
	set_name	(0X403C,	"COLLATE_TAB");
	create_byte	(x=0X403E);
	make_array	(x,	0X20);
	op_dec		(x,	0);
	create_strlit	(0X405E,	0X40BD);
	create_byte	(x=0X40BD);
	op_dec		(x,	0);
	create_strlit	(0X40BE,	0X40E4);
	create_byte	(x=0X40E4);
	op_dec		(x,	0);
	create_byte	(x=0X40E5);
	op_dec		(x,	0);
	create_byte	(x=0X40E6);
	op_chr		(x,	0);
	create_byte	(x=0X40E7);
	make_array	(x,	0X4);
	op_dec		(x,	0);
	create_strlit	(0X40EB,	0X40EE);
	create_byte	(x=0X40EE);
	make_array	(x,	0X31);
	op_dec		(x,	0);
	create_byte	(x=0X411F);
	op_chr		(x,	0);
	create_byte	(x=0X4120);
	make_array	(x,	0X1E);
	op_dec		(x,	0);
	create_byte	(x=0X413E);
	make_array	(x,	0X14);
	op_dec		(x,	0);
	set_name	(0X413E,	"DBCS_TAB");
	set_cmt	(0X4152,	"MSMAJORV",	0);
	create_byte	(x=0X4152);
	op_hex		(x,	0);
	set_name	(0X4152,	"MSVERSION");
	set_cmt	(0X4153,	"MSMINORV",	0);
	create_byte	(0X4153);
	create_byte	(x=0X4154);
	make_array	(x,	0X2);
	op_dec		(x,	0);
	set_name	(0X4154,	"YRTAB");
	create_byte	(x=0X4156);
	make_array	(x,	0X2);
	op_dec		(x,	0);
	create_byte	(x=0X4158);
	make_array	(x,	0X2);
	op_dec		(x,	0);
	create_byte	(x=0X415A);
	make_array	(x,	0X2);
	op_dec		(x,	0);
	create_byte	(x=0X415C);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	set_name	(0X415C,	"MONTAB");
	create_word	(x=0X4168);
	op_dec		(x,	0);
	set_name	(0X4168,	"FILE_CHAR_TAB");
	create_byte	(x=0X416A);
	make_array	(x,	0X3);
	op_dec		(x,	0);
	create_byte	(0X416D);
	make_array	(0X416D,	0X3);
	create_byte	(x=0X4170);
	make_array	(x,	0X2);
	op_dec		(x,	0);
	create_strlit	(0X4172,	0X4180);
	create_byte	(x=0X4180);
	make_array	(x,	0X18);
	op_dec		(x,	0);
	create_word	(x=0X4198);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X4198,	"SysInitTable");
	create_word	(0X419A);
	create_word	(x=0X419C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X419E);
	create_byte	(0X41A0);
	make_array	(0X41A0,	0X3);
	create_word	(0X41A3);
	set_name	(0X41A3,	"TEMPSEG");
	create_byte	(0X41A5);
	set_name	(0X41A5,	"redir_patch");
	create_word	(0X41A6);
	set_name	(0X41A6,	"FixExePatch");
	create_insn	(0X41A8);
	set_name	(0X41A8,	"MAP_CASE");
	set_cmt	(0X41B0,	"UCASE_TAB+2",	0);
	create_insn	(x=0X41B0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X41B8,	"L_RET");
	create_byte	(x=0X41B9);
	make_array	(x,	0X22);
	op_dec		(x,	0);
	create_word	(x=0X41DB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X41DB,	"USER_SP_2F");
	create_word	(x=0X41DD);
	make_array	(x,	0XE);
	op_dec		(x,	0);
	set_name	(0X41DD,	"FAKE_STACK_2F");
	create_byte	(0X41F9);
	set_name	(0X41F9,	"SCAN_FLAG");
	create_word	(0X41FA);
	set_name	(0X41FA,	"DATE_FLAG");
	create_word	(0X41FC);
	set_name	(0X41FC,	"AbsDskErr");
	create_strlit	(0X41FE,	0X4209);
	set_name	(0X41FE,	"NO_NAME_ID");
	create_byte	(0X4209);
	create_insn	(x=0X420A);
	op_hex		(x,	1);
	set_name	(0X420A,	"SNULDEV");
	set_name	(0X4210,	"INULDEV");
	create_byte	(0X4211);
	create_byte	(0X4212);
	make_array	(0X4212,	0X5);
	create_byte	(0X421B);
	make_array	(0X421B,	0X80);
	set_name	(0X421B,	"ERR_TABLE_21");
	create_byte	(0X429B);
	make_array	(0X429B,	0X50);
	set_name	(0X429B,	"ERR_TABLE_24");
	create_byte	(0X42EB);
	make_array	(0X42EB,	0X10);
	set_name	(0X42EB,	"ErrMap24");
	create_word	(0X42FB);
	set_name	(0X42FB,	"SPECIAL_VERSION");
	create_word	(0X42FD);
	set_name	(0X42FD,	"OLD_FIRSTCLUS");
	create_word	(0X42FF);
	set_name	(0X42FF,	"exec_init_SP");
	create_word	(0X4301);
	set_name	(0X4301,	"exec_init_SS");
	create_word	(0X4303);
	set_name	(0X4303,	"exec_init_IP");
	create_word	(0X4305);
	set_name	(0X4305,	"exec_init_CS");
	create_word	(0X4307);
	set_name	(0X4307,	"exec_signature");
	create_word	(0X4309);
	set_name	(0X4309,	"exec_len_mod_512");
	create_word	(0X430B);
	set_name	(0X430B,	"exec_pages");
	create_word	(0X430D);
	set_name	(0X430D,	"exec_rle_count");
	create_word	(0X430F);
	set_name	(0X430F,	"exec_par_dir");
	create_word	(0X4311);
	set_name	(0X4311,	"exec_min_BSS");
	create_word	(0X4313);
	set_name	(0X4313,	"exec_max_BSS");
	create_word	(0X4315);
	set_name	(0X4315,	"exec_SS");
	create_word	(0X4317);
	set_name	(0X4317,	"exec_SP");
	create_word	(0X4319);
	set_name	(0X4319,	"exec_chksum");
	create_word	(0X431B);
	set_name	(0X431B,	"exec_IP");
	create_word	(0X431D);
	set_name	(0X431D,	"exec_CS");
	create_word	(0X431F);
	set_name	(0X431F,	"exec_rle_table");
	create_byte	(0X4321);
	make_array	(0X4321,	0X2);
	set_name	(0X4321,	"Win386_Info");
	create_dword	(0X4323);
	create_dword	(0X4327);
	set_name	(0X4327,	"Win386_Inf_Virt_Dev_Ptr");
	create_dword	(0X432B);
	create_word	(x=0X432F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X432F,	"Instance_Data_Ptr");
	create_word	(0X4331);
	set_name	(0X4331,	"Instance_Table_Seg");
	create_word	(x=0X4333);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X4335);
	set_name	(0X4335,	"Unknown_Table_Seg");
	create_word	(x=0X4337);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X4337,	"Instance_Table");
	create_word	(0X4339);
	set_name	(0X4339,	"CONTPOS_seg");
	create_word	(0X433B);
	create_word	(x=0X433D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X433F);
	create_word	(0X4341);
	create_word	(x=0X4343);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X4345);
	create_word	(0X4347);
	create_word	(x=0X4349);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X434B);
	create_word	(0X434D);
	create_word	(x=0X434F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X4351);
	create_word	(0X4353);
	create_word	(x=0X4355);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X4357);
	create_word	(0X4359);
	create_word	(x=0X435B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X435D);
	create_word	(0X435F);
	set_name	(0X435F,	"UMB_HEAD_parm");
	create_word	(x=0X4361);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X4363);
	create_word	(0X4365);
	create_word	(x=0X4367);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X4369);
	create_word	(0X436B);
	create_word	(x=0X436D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X436F);
	create_word	(0X4371);
	create_word	(0X4373);
	create_word	(0X4375);
	create_word	(0X4377);
	create_word	(0X4379);
	create_word	(0X437B);
	create_word	(0X437D);
	set_name	(0X437D,	"Unknown_Table");
	create_word	(0X437F);
	set_name	(0X437F,	"Unknown_Table_2");
	create_word	(x=0X4381);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4383);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X4385);
	create_word	(x=0X4387);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X4387,	"Unknown1_Ptr");
	create_word	(0X4389);
	create_word	(0X438B);
	create_byte	(0X438D);
	set_name	(0X438D,	"Win386_DOSVars");
	create_byte	(0X438E);
	create_word	(x=0X438F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4391);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4393);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4395);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4397);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4399);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_byte	(0X439B);
	make_array	(0X439B,	0X2);
	set_name	(0X439B,	"IsWin386");
	set_cmt	(0X439D,	"Patch for Sidekick",	0);
	create_byte	(0X439D);
	make_array	(0X439D,	0X6);
	create_byte	(0X43A3);
	make_array	(0X43A3,	0X2);
	create_byte	(0X43A5);
	make_array	(0X43A5,	0X5);
	create_byte	(0X43AA);
	make_array	(0X43AA,	0X2);
	set_cmt	(0X43AC,	"Patch for PortOfEntry",	0);
	create_byte	(0X43AC);
	make_array	(0X43AC,	0X5);
	create_byte	(0X43B1);
	make_array	(0X43B1,	0X2);
	create_byte	(0X43B3);
	make_array	(0X43B3,	0X3);
	create_dword	(0X43B6);
	set_name	(0X43B6,	"LocalSFT");
	create_word	(0X43BA);
	create_word	(0X43BC);
	create_insn	(0X43BE);
	set_name	(0X43BE,	"RatBugCode");
	set_name	(0X43C3,	"rbc_loop");
	create_byte	(0X43C7);
	make_array	(0X43C7,	0X68);
	create_byte	(0X442F);
	make_array	(0X442F,	0X35);
	create_word	(0X4464);
	create_byte	(0X4466);
	make_array	(0X4466,	0XC9);
	create_byte	(0X452F);
	make_array	(0X452F,	0X5C);
	create_word	(0X458B);
	set_name	(0X458B,	"UNKNOWN1");
	create_byte	(0X458D);
	make_array	(0X458D,	0XA2);
	create_byte	(0X462F);
	make_array	(0X462F,	0X35);
	create_word	(0X4664);
	create_word	(0X4666);
	create_word	(0X4668);
	create_byte	(0X466A);
	make_array	(0X466A,	0X8);
	set_name	(0X466A,	"COUNTRY_CDPG");
	create_strlit	(0X4672,	0X467F);
	set_name	(0X4672,	"aCountry_sys");
	create_byte	(x=0X467F);
	make_array	(x,	0X33);
	op_dec		(x,	0);
	create_word	(x=0X46B2);
	op_dec		(x,	0);
	create_word	(0X46B4);
	create_byte	(0X46B6);
	create_word	(x=0X46B7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X46B9);
	create_byte	(0X46BB);
	create_word	(x=0X46BC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X46BE);
	create_byte	(0X46C0);
	create_word	(x=0X46C1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X46C3);
	create_byte	(0X46C5);
	create_word	(x=0X46C6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X46C8);
	create_byte	(0X46CA);
	create_word	(x=0X46CB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(0X46CD);
	create_byte	(0X46CF);
	create_word	(x=0X46D0);
	op_dec		(x,	0);
	create_word	(0X46D2);
	create_word	(x=0X46D4);
	op_dec		(x,	0);
	create_word	(0X46D6);
	create_strlit	(0X46D8,	0X46DD);
	create_strlit	(0X46DD,	0X46DF);
	create_strlit	(0X46DF,	0X46E1);
	create_strlit	(0X46E1,	0X46E3);
	create_strlit	(0X46E3,	0X46E5);
	create_byte	(0X46E5);
	create_byte	(0X46E6);
	create_byte	(0X46E7);
	create_word	(x=0X46E8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X46EA,	"DOSDATA segment",	0);
	create_word	(0X46EA);
	create_strlit	(0X46EC,	0X46EE);
	create_word	(0X46EE);
	make_array	(0X46EE,	0X5);
	create_byte	(0X46F8);
	set_name	(0X46F8,	"INDOS_FLAG");
	create_byte	(0X46F9);
	set_name	(0X46F9,	"DEVIO_IN_PROGRESS");
	create_strlit	(0X46FA,	0X46FE);
	set_name	(0X46FA,	"_ENU");
	create_strlit	(0X46FE,	0X4702);
	set_name	(0X46FE,	"_USA");
	create_strlit	(0X4702,	0X4704);
	set_name	(0X4702,	"_US");
	create_word	(0X4704);
	create_byte	(0X4706);
	create_byte	(0X4707);
	create_word	(0X4708);
	create_strlit	(0X470A,	0X470D);
	set_name	(0X470A,	"_AM");
	create_strlit	(0X470D,	0X4710);
	set_name	(0X470D,	"_PM");
	create_strlit	(0X4710,	0X4734);
	set_name	(0X4710,	"_MMDDYY");
	create_byte	(0X4734);
	set_name	(0X4734,	"ecritdisk_c");
	create_byte	(0X4735);
	create_byte	(0X4736);
	set_name	(0X4736,	"crit_sess_extr");
	create_byte	(0X4737);
	set_cmt	(0X4738,	"db 'c:\\wina20.386',0 (PCDOS 7.1 DOSDATA:12F8h)",	0);
	create_byte	(0X4738);
	make_array	(0X4738,	0X8);
	set_name	(0X4738,	"VxDpath");
	create_byte	(0X4740);
	make_array	(0X4740,	0X4);
	set_name	(0X4740,	"dosdata_1300h");
	create_word	(0X4744);
	make_array	(0X4744,	0X2);
	set_name	(0X4744,	"crit_sess_ptr");
	create_byte	(x=0X4748);
	make_array	(x,	0X1A);
	op_dec		(x,	0);
	set_name	(0X4748,	"drive_flags");
	create_byte	(0X4762);
	make_array	(0X4762,	0X6);
	create_dword	(0X4768);
	create_word	(0X476C);
	create_word	(x=0X476E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4770);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4772);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_word	(x=0X4774);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_dword	(0X4776);
	create_dword	(0X477A);
	set_name	(0X477A,	"_divov_");
	create_insn	(0X477E);
	set_name	(0X477E,	"MagicPatch");
	create_byte	(0X477F);
	create_byte	(0X4780);
	create_byte	(0X4781);
	create_byte	(0X4782);
	create_byte	(0X4783);
	create_byte	(x=0X4784);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	create_dword	(0X4790);
	create_word	(0X4798);
	create_dword	(0X47A2);
	create_word	(0X47AE);
	make_array	(0X47AE,	0X2);
	create_insn	(0X47D0);
	set_name	(0X47D0,	"bc_cmderr");
	create_insn	(x=0X47D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X47D2,	"bc_err_cnt");
	create_insn	(x=0X47D6);
	op_dec		(x,	0);
	create_insn	(x=0X47DA);
	op_hex		(x,	1);
	create_insn	(0X47DE);
	create_word	(0X47E4);
	set_name	(0X47E4,	"BIOSDATAWORD");
	create_byte	(x=0X47E6);
	make_array	(x,	0X74);
	op_dec		(x,	0);
	create_insn	(0X485C);
	set_name	(0X485C,	"jmp_DIVOV");
	create_byte	(0X485F);
	make_array	(0X485F,	0X6);
	create_insn	(0X4865);
	set_name	(0X4865,	"chardev_entry");
	set_cmt	(0X486F,	"get return address (dispatch table)",	0);
	set_cmt	(0X4872,	"point to the device dispatch table",	0);
	create_insn	(x=0X4874);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X48C6);
	op_hex		(x,	1);
	create_insn	(x=0X48E4);
	op_hex		(x,	1);
	set_name	(0X48E7,	"addr_of_bcretf");
	create_byte	(0X48E8);
	set_name	(0X48E8,	"i19_lst");
	create_dword	(0X48E9);
	set_name	(0X48E9,	"int19old02");
	create_byte	(0X48ED);
	create_dword	(0X48EE);
	create_byte	(0X48F2);
	create_dword	(0X48F3);
	create_byte	(0X48F7);
	create_dword	(0X48F8);
	create_byte	(0X48FC);
	create_dword	(0X48FD);
	create_byte	(0X4901);
	create_dword	(0X4902);
	create_byte	(0X4906);
	create_dword	(0X4907);
	create_byte	(0X490B);
	create_dword	(0X490C);
	set_name	(0X490C,	"int19old0E");
	create_byte	(0X4910);
	create_dword	(0X4911);
	create_byte	(0X4915);
	create_dword	(0X4916);
	create_byte	(0X491A);
	create_dword	(0X491B);
	create_byte	(0X491F);
	create_dword	(0X4920);
	create_byte	(0X4924);
	create_dword	(0X4925);
	create_byte	(0X4929);
	create_dword	(0X492A);
	set_name	(0X492A,	"int19old77");
	create_insn	(0X492E);
	create_insn	(x=0X4933);
	op_hex		(x,	1);
	create_insn	(0X493B);
	create_insn	(x=0X4975);
	op_dec		(x,	1);
	create_insn	(x=0X4983);
	op_dec		(x,	1);
	create_insn	(x=0X4987);
	op_dec		(x,	1);
	create_insn	(x=0X499B);
	op_dec		(x,	1);
	create_insn	(x=0X49A8);
	op_hex		(x,	1);
	create_insn	(x=0X49AB);
	op_dec		(x,	1);
	set_cmt	(0X49BC,	"- VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\nAL = character, BH = display page (alpha modes)\nBL = foreground color (graphics modes)",	0);
	create_insn	(x=0X49BC);
	op_hex		(x,	0);
	create_insn	(x=0X49C7);
	op_dec		(x,	1);
	create_insn	(x=0X49CF);
	op_hex		(x,	1);
	create_insn	(0X49D3);
	create_insn	(0X49D7);
	create_byte	(0X49DB);
	create_insn	(0X49DC);
	create_insn	(x=0X49E8);
	op_hex		(x,	1);
	create_insn	(0X49EE);
	create_insn	(x=0X49F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4A1D);
	op_dec		(x,	1);
	create_insn	(x=0X4A37);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X4A40);
	op_hex		(x,	1);
	create_insn	(x=0X4A4B);
	op_dec		(x,	1);
	create_word	(x=0X4A97);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4A99);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4A9B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4A9D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4A9F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X4AA1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X4AA3);
	create_insn	(0X4AA5);
	create_insn	(x=0X4AB2);
	op_hex		(x,	1);
	create_insn	(x=0X4AB7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X4ABE);
	op_dec		(x,	1);
	create_insn	(x=0X4AC2);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X4ACC,	"iret",	0);
	create_insn	(x=0X4ACC);
	op_hex		(x,	1);
	create_insn	(x=0X4AD1);
	op_hex		(x,	1);
	create_insn	(0X4AE3);
	create_insn	(x=0X4AF8);
	op_hex		(x,	1);
	create_insn	(0X4AFE);
	create_insn	(0X4B0C);
	create_insn	(x=0X4B19);
	op_hex		(x,	1);
	create_insn	(x=0X4B1E);
	op_hex		(x,	1);
	create_insn	(0X4B3F);
	create_insn	(0X4B44);
	create_insn	(0X4B52);
	create_insn	(x=0X4B5F);
	op_dec		(x,	1);
	create_byte	(0X4B6C);
	make_array	(0X4B6C,	0X3F);
	create_byte	(0X4BAB);
	make_array	(0X4BAB,	0X9);
	create_byte	(0X4BB4);
	make_array	(0X4BB4,	0X22);
	create_byte	(0X4BDA);
	make_array	(0X4BDA,	0X6);
	create_byte	(0X4BE0);
	make_array	(0X4BE0,	0X12);
	create_byte	(0X4BF2);
	create_byte	(0X4BF3);
	make_array	(0X4BF3,	0X21);
	create_byte	(0X4C14);
	create_word	(0X4C18);
	create_byte	(0X4C1A);
	make_array	(0X4C1A,	0X27);
	create_byte	(0X4C41);
	make_array	(0X4C41,	0X34);
	create_byte	(0X4C75);
	make_array	(0X4C75,	0X4);
	create_byte	(0X4C79);
	make_array	(0X4C79,	0X48);
	create_byte	(0X4CC1);
	make_array	(0X4CC1,	0X16);
	create_byte	(0X4CD7);
	make_array	(0X4CD7,	0X27);
	create_byte	(0X4CFE);
	make_array	(0X4CFE,	0X16);
	create_dword	(0X4D2E);
	create_byte	(0X4D62);
	make_array	(0X4D62,	0XA);
	create_word	(0X4D6C);
	create_word	(0X4D6E);
	create_byte	(0X4D70);
	create_insn	(0X4D71);
	create_insn	(x=0X4D81);
	op_dec		(x,	1);
	create_insn	(0X4D8D);
	create_insn	(x=0X4D95);
	op_hex		(x,	1);
	set_cmt	(0X4DA8,	"Counter for Interrupt 1Ah",	0);
	create_insn	(x=0X4DAB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4DB2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4DB7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4DBB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4DC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4DC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4DD1);
	create_insn	(0X4DD8);
	set_cmt	(0X4DE0,	"0",	0);
	set_cmt	(0X4DE7,	"ROMBIOS data area lw is zero",	0);
	create_insn	(x=0X4DF1);
	op_hex		(x,	1);
	create_insn	(x=0X4DFB);
	op_hex		(x,	1);
	set_name	(0X4E11,	"restore_romvects");
	create_insn	(x=0X4E14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4E17,	"next_int");
	create_insn	(x=0X4E19);
	op_hex		(x,	1);
	create_insn	(x=0X4E21);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X4E2A);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X4E2D);
	op_dec		(x,	1);
	set_name	(0X4E30,	"i19_restore_loop");
	create_insn	(x=0X4E3B);
	op_hex		(x,	1);
	set_name	(0X4E42,	"i19_restor_1");
	set_name	(0X4E44,	"doint19");
	create_insn	(0X4E48);
	create_insn	(x=0X4E53);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4E57);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X4EA1);
	op_hex		(x,	1);
	create_insn	(0X4EB1);
	set_cmt	(0X4EB8,	"- VIDEO - ",	0);
	create_insn	(x=0X4EB8);
	op_hex		(x,	0);
	create_insn	(0X4EC1);
	set_name	(0X4EC1,	"EraseVDiskHead");
	create_insn	(x=0X4ECA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X4EE0,	"clear it",	0);
	create_insn	(0X4EE7);
	create_insn	(x=0X4EEF);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(0X4EF8);
	create_insn	(x=0X4EFB);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(0X4F04);
	create_insn	(x=0X4F07);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(0X4F10);
	create_insn	(x=0X4F13);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X4F24,	"- VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\nAL = character, BH = display page (alpha modes)\nBL = foreground color (graphics modes)",	0);
	create_insn	(x=0X4F24);
	op_hex		(x,	0);
	create_insn	(0X4F28);
	create_word	(0X4F2B);
	set_name	(0X4F2B,	"printdev");
	set_cmt	(0X4F2D,	"retry counts for printers",	0);
	create_word	(0X4F2D);
	make_array	(0X4F2D,	0X4);
	set_name	(0X4F2D,	"wait_count");
	create_byte	(0X4F35);
	set_name	(0X4F35,	"auxnum");
	create_byte	(0X4F36);
	make_array	(0X4F36,	0X5);
	create_byte	(x=0X4F3B);
	op_dec		(x,	0);
	set_name	(0X4F3B,	"base_century");
	create_byte	(x=0X4F3C);
	op_dec		(x,	0);
	set_name	(0X4F3C,	"base_year");
	create_byte	(x=0X4F3D);
	op_dec		(x,	0);
	set_name	(0X4F3D,	"month_tab");
	create_byte	(x=0X4F3E);
	op_dec		(x,	0);
	set_name	(0X4F3E,	"february");
	create_byte	(x=0X4F3F);
	op_dec		(x,	0);
	create_byte	(x=0X4F40);
	op_dec		(x,	0);
	create_byte	(x=0X4F41);
	op_dec		(x,	0);
	create_byte	(x=0X4F42);
	op_dec		(x,	0);
	create_byte	(x=0X4F43);
	op_dec		(x,	0);
	create_byte	(x=0X4F44);
	op_dec		(x,	0);
	create_byte	(x=0X4F45);
	op_dec		(x,	0);
	create_byte	(x=0X4F46);
	op_dec		(x,	0);
	create_byte	(x=0X4F47);
	op_dec		(x,	0);
	create_byte	(x=0X4F48);
	op_dec		(x,	0);
	create_byte	(0X4F49);
	make_array	(0X4F49,	0X4);
	set_name	(0X4F49,	"bin_date_time");
	create_word	(0X4F4D);
	set_name	(0X4F4D,	"month_table");
	create_word	(x=0X4F4F);
	op_dec		(x,	0);
	create_word	(x=0X4F51);
	op_dec		(x,	0);
	create_word	(x=0X4F53);
	op_dec		(x,	0);
	create_word	(x=0X4F55);
	op_dec		(x,	0);
	create_word	(x=0X4F57);
	op_dec		(x,	0);
	create_word	(x=0X4F59);
	op_dec		(x,	0);
	create_word	(x=0X4F5B);
	op_dec		(x,	0);
	create_word	(x=0X4F5D);
	op_dec		(x,	0);
	create_word	(x=0X4F5F);
	op_dec		(x,	0);
	create_word	(x=0X4F61);
	op_dec		(x,	0);
	create_word	(x=0X4F63);
	op_dec		(x,	0);
	create_byte	(x=0X4F65);
	op_dec		(x,	0);
	set_name	(0X4F65,	"con_table");
	create_word	(x=0X4F66);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F68);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F6A);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F6C);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F6E);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F70);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F72);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F74);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F76);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F78);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F7A);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_byte	(0X4F7C);
	set_name	(0X4F7C,	"prn_table");
	create_word	(x=0X4F7D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_byte	(0X4F7F);
	set_name	(0X4F7F,	"aux_table");
	create_word	(x=0X4F80);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_byte	(x=0X4F82);
	op_dec		(x,	0);
	set_name	(0X4F82,	"tim_table");
	create_word	(x=0X4F83);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F85);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F87);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F89);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F8B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F8D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F8F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F91);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F93);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X4F95);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_byte	(0X4F97);
	set_name	(0X4F97,	"himemsys_table");
	create_word	(x=0X4F98);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0X4F9A);
	set_name	(0X4F9A,	"con_read");
	set_name	(0X4F9C,	"con_loop");
	set_name	(0X4FA2,	"con_exit");
	create_insn	(x=0X4FA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4FA4,	"chrin");
	create_insn	(x=0X4FAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4FB2,	"KEYBOARD - ",	0);
	create_insn	(x=0X4FB2);
	op_hex		(x,	0);
	set_cmt	(0X4FB8,	"check for ctrl-prtsc",	0);
	create_insn	(x=0X4FC1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4FC8);
	op_hex		(x,	1);
	create_insn	(0X4FD4);
	create_insn	(x=0X4FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4FDD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4FDD,	"con_rdnd");
	create_insn	(x=0X4FE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4FE8,	"KEYBOARD - ",	0);
	create_insn	(x=0X4FE8);
	op_hex		(x,	0);
	set_name	(0X4FEC,	"z_bus_exit");
	create_insn	(0X4FF0);
	set_name	(0X4FF0,	"gotchr");
	create_insn	(x=0X4FF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4FF8,	"KEYBOARD - ",	0);
	create_insn	(x=0X4FF8);
	op_hex		(x,	0);
	set_cmt	(0X4FFC,	"check for ctrl-prtsc",	0);
	create_insn	(0X4FFC);
	set_name	(0X4FFC,	"notbrk");
	create_insn	(x=0X5005);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X5005,	"rd_ext_chk");
	create_insn	(x=0X500C);
	op_hex		(x,	1);
	create_insn	(x=0X5017);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X5017,	"rdexit");
	set_name	(0X501F,	"bc_exvec");
	create_insn	(0X5021);
	set_name	(0X5021,	"con_writ");
	set_cmt	(0X5027,	"DOS 2+ internal - FAST PUTCHAR\nAL = character to display",	0);
	create_insn	(x=0X5027);
	op_hex		(x,	0);
	create_insn	(x=0X502D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X502D,	"con_flush");
	set_cmt	(0X5034,	"KEYBOARD - CHECK BUFFER, DO NOT CLEAR\nReturn: ZF clear if character in buffer\nAH = scan code, AL = character\nZF set if no character in buffer",	0);
	create_insn	(x=0X5034);
	op_hex		(x,	0);
	set_cmt	(0X503A,	"KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY\nReturn: AH = scan code, AL = character",	0);
	create_insn	(x=0X503A);
	op_hex		(x,	0);
	create_insn	(0X503E);
	set_name	(0X503E,	"tim_writ");
	set_cmt	(0X5073,	"CLOCK - SET REAL TIME CLOCK (AT,XT286,CONV,PS)\nCH = hours in BCD, CL = minutes in BCD\n DH = seconds in BCD,DL = 01h if daylight savings, 00h if standard time\nReturn: CMOS clock set",	0);
	create_insn	(x=0X5073);
	op_hex		(x,	0);
	set_cmt	(0X5084,	"CLOCK - SET TIME OF DAY\nCX:DX = clock count\nReturn: time of day set",	0);
	create_insn	(x=0X5084);
	op_hex		(x,	0);
	set_cmt	(0X5091,	"CLOCK - SET DATE IN REAL TIME CLOCK (AT,XT286,CONV,PS)\nDL = day in BCD, DH = month in BCD, CL = year in BCD\nCH = century (19h or 20h)\nReturn: CMOS clock set",	0);
	create_insn	(x=0X5091);
	op_hex		(x,	0);
	create_insn	(0X5096);
	create_insn	(0X5099);
	create_byte	(0X50DE);
	create_insn	(0X50DF);
	create_insn	(0X50E9);
	set_name	(0X50E9,	"tim_read");
	create_insn	(x=0X50FC);
	op_hex		(x,	1);
	create_insn	(x=0X50FE);
	op_hex		(x,	1);
	create_insn	(x=0X5100);
	op_hex		(x,	1);
	create_insn	(x=0X5102);
	op_hex		(x,	1);
	create_insn	(x=0X5126);
	op_hex		(x,	1);
	create_insn	(x=0X512A);
	op_hex		(x,	1);
	create_insn	(0X5143);
	set_name	(0X5143,	"GetTickCnt");
	set_cmt	(0X514B,	"CLOCK - GET TIME OF DAY\nReturn: CX:DX = clock count\nAL = 00h if clock was read or written (via AH=0,1) since the previous\nmidnight\nOtherwise, AL > 0",	0);
	create_insn	(x=0X514B);
	op_hex		(x,	0);
	create_insn	(x=0X514D);
	op_hex		(x,	1);
	create_insn	(0X515C);
	create_insn	(0X5169);
	set_cmt	(0X5171,	"CLOCK - SET TIME OF DAY\nCX:DX = clock count\nReturn: time of day set",	0);
	create_insn	(x=0X5171);
	op_hex		(x,	0);
	create_insn	(0X5174);
	set_name	(0X5174,	"read_real_date");
	set_cmt	(0X5182,	"CLOCK - GET TIME OF DAY\nReturn: CX:DX = clock count\nAL = 00h if clock was read or written (via AH=0,1) since the previous\nmidnight\nOtherwise, AL > 0",	0);
	create_insn	(x=0X5182);
	op_hex		(x,	0);
	create_insn	(x=0X5184);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X518D,	"CLOCK - READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)\nReturn: DL = day in BCD\nDH = month in BCD\nCL = year in BCD\nCH = century (19h or 20h)",	0);
	create_insn	(x=0X518D);
	op_hex		(x,	0);
	create_insn	(0X5194);
	create_insn	(x=0X51A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X51B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X51BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X51CA);
	op_dec		(x,	1);
	create_insn	(x=0X51D1);
	op_dec		(x,	1);
	create_insn	(x=0X51D4);
	op_dec		(x,	1);
	create_insn	(x=0X51DE);
	op_dec		(x,	1);
	create_insn	(x=0X51E3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X51EE);
	op_dec		(x,	1);
	create_insn	(x=0X51F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X51FA);
	create_insn	(x=0X5201);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X520D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X5219);
	op_hex		(x,	1);
	create_insn	(x=0X521B);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X5222);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X522E);
	set_cmt	(0X5233,	"CLOCK - READ REAL TIME CLOCK (AT,XT286,CONV,PS)\nReturn: CH = hours in BCD\nCL = minutes in BCD\nDH = seconds in BCD",	0);
	create_insn	(x=0X5233);
	op_hex		(x,	0);
	create_insn	(0X526A);
	create_insn	(0X5270);
	set_name	(0X5270,	"in_bin");
	create_insn	(0X5295);
	set_name	(0X5295,	"date_verify");
	create_insn	(0X52D3);
	create_insn	(0X52D6);
	create_insn	(0X52ED);
	create_insn	(0X52EF);
	set_name	(0X52EF,	"bcd_verify");
	create_insn	(x=0X52F9);
	op_hex		(x,	1);
	create_insn	(x=0X5300);
	op_hex		(x,	1);
	create_insn	(x=0X5303);
	op_hex		(x,	1);
	create_insn	(0X5311);
	create_insn	(0X5313);
	create_insn	(0X532D);
	create_insn	(0X53D1);
	create_insn	(x=0X53D3);
	op_hex		(x,	1);
	create_insn	(0X53D9);
	create_insn	(x=0X53DB);
	op_hex		(x,	1);
	create_insn	(x=0X53DD);
	op_hex		(x,	1);
	create_byte	(0X53E3);
	set_name	(0X53E3,	"step_drv");
	create_byte	(0X53E4);
	set_name	(0X53E4,	"accesscount");
	create_byte	(0X53E5);
	set_name	(0X53E5,	"tim_drv");
	create_byte	(0X53E6);
	create_word	(0X53E7);
	set_name	(0X53E7,	"rflag");
	create_word	(0X53E9);
	create_byte	(0X53EB);
	create_byte	(0X53EC);
	create_dword	(0X53ED);
	create_byte	(0X53F1);
	create_byte	(0X53F2);
	create_word	(0X53F3);
	create_word	(0X53F5);
	create_word	(0X53F7);
	create_word	(0X53F9);
	create_word	(0X53FB);
	create_word	(0X53FD);
	create_word	(0X53FF);
	create_byte	(0X5401);
	set_name	(0X5401,	"set_id_flag");
	create_strlit	(0X5402,	0X540B);
	set_name	(0X5402,	"fat_12_id");
	create_strlit	(0X540B,	0X5414);
	set_name	(0X540B,	"fat_16_id");
	create_strlit	(0X5414,	0X541D);
	set_name	(0X5414,	"fat_32_id");
	create_strlit	(0X541D,	0X5429);
	set_name	(0X541D,	"vol_no_name");
	create_byte	(0X5438);
	create_byte	(x=0X5442);
	op_dec		(x,	0);
	set_name	(0X5442,	"DSKTBL");
	create_word	(x=0X5443);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5445);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5447);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5449);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X544B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X544D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X544F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5451);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5453);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5455);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5457);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5459);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X545B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X545D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X545F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5461);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5463);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5465);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5467);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5469);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X546B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X546D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X546F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5471);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5473);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5475);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(x=0X5477);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X5477,	"dsk_init");
	create_insn	(x=0X5480);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X5486);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X5486,	"SetDrive");
	set_cmt	(0X5490,	"[es:di+BDS.link] ; Go to next bds",	0);
	create_insn	(0X549A);
	set_name	(0X549A,	"media_chk");
	create_insn	(x=0X54A0);
	op_hex		(x,	1);
	create_insn	(x=0X54A7);
	op_hex		(x,	1);
	create_insn	(x=0X54B3);
	op_hex		(x,	1);
	create_insn	(x=0X54BF);
	op_hex		(x,	1);
	create_insn	(x=0X54C8);
	op_hex		(x,	1);
	create_insn	(0X54EB);
	create_insn	(x=0X54ED);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X54FA);
	op_hex		(x,	1);
	set_name	(0X550A,	"ret_carry_clear");
	create_insn	(0X550C);
	create_insn	(0X5512);
	set_name	(0X5512,	"Check_Time_Of_Access");
	create_insn	(0X553E);
	create_insn	(0X5545);
	set_name	(0X5545,	"get_bpb");
	set_cmt	(0X554B,	"[es:di+BDS.flags]",	0);
	create_insn	(x=0X554B);
	op_hex		(x,	1);
	set_cmt	(0X556E,	"fhave96 bit ?",	0);
	create_insn	(x=0X556E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_name	(0X5578,	"already_gotbpb");
	set_name	(0X557B,	"SetPtrSav");
	create_insn	(x=0X557D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X5581,	"[es:bx+media]",	0);
	set_cmt	(0X5585,	"[es:bx+count]",	0);
	set_cmt	(0X5589,	"[es:bx+count+2]",	0);
	create_insn	(0X558F);
	set_name	(0X558F,	"clear_ids");
	set_cmt	(0X5590,	"0",	0);
	set_cmt	(0X5592,	"[es:di+BDS.vol_serial]",	0);
	set_cmt	(0X5597,	"[es:di+BDS.vol_serial+2]",	0);
	create_insn	(x=0X559F);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X55A2,	"BDS.volid",	0);
	create_insn	(x=0X55A2);
	op_dec		(x,	1);
	create_insn	(x=0X55A7);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X55AA,	"[es:di+BDS.fatsiz], fbigbig ; FAT32\n\n(here, es:di points to the BDS offset +136)\n\n! NOTE - 11/08/2023 - Erdogan Tan\nMicrosoft code has a bug here because the BDS's\n.volid and .filesys_id fields will be reset\n(to their default text) according to 'BDS.fatsiz' flags\nat the BDS offset 59 but current (this) code checks flags\nat ES:DI+59 while DI points the BDS offset 136!?\n\nCorrect Code:\ntest byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig\n\nSame BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h\nas 'test byte [ES:DI+59],20h' (PCDOS 7.1 BUG note: 26/06/2023)\n\n(Why this bug did not affect Win Me and PCDOS 7.x applications:\n'clear_ids' is used for floppy disks only and the default\noption of 'clear_ids' is FAT12 volid and filesys_id text\nwhen the flag bit has wrong value for FAT16/40h or FAT32/20h.)",	0);
	create_insn	(x=0X55AA);
	op_hex		(x,	1);
	create_insn	(x=0X55B1);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X55B4,	"[es:di+BDS.fatsiz], fbig",	0);
	create_insn	(x=0X55B4);
	op_hex		(x,	1);
	create_insn	(x=0X55BB);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X55C8,	"[es:di+BDS.flags],\nreturn_fake_bpb|fnon_removable",	0);
	create_insn	(x=0X55C8);
	op_hex		(x,	1);
	set_name	(0X55C8,	"GetBp");
	create_insn	(x=0X55E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X55F3);
	op_dec		(x,	1);
	create_insn	(x=0X565A);
	op_hex		(x,	1);
	create_insn	(0X566C);
	create_insn	(x=0X567E);
	op_hex		(x,	1);
	create_insn	(x=0X56AA);
	op_hex		(x,	1);
	create_insn	(x=0X56BC);
	op_hex		(x,	1);
	create_insn	(x=0X56C8);
	op_hex		(x,	1);
	set_name	(0X56D5,	"Has1");
	set_cmt	(0X56FF,	"0",	0);
	create_insn	(0X573A);
	create_insn	(0X5745);
	create_insn	(0X5750);
	set_name	(0X5750,	"readbootsec");
	create_insn	(x=0X5775);
	op_hex		(x,	1);
	create_insn	(x=0X577B);
	op_hex		(x,	1);
	set_cmt	(0X5780,	"'MS'",	0);
	set_cmt	(0X5787,	"'DM'",	0);
	set_cmt	(0X578E,	"'F3'",	0);
	create_insn	(x=0X5795);
	op_hex		(x,	1);
	create_insn	(x=0X57A5);
	op_hex		(x,	1);
	create_insn	(0X57CD);
	create_insn	(0X57D1);
	set_name	(0X57D1,	"mov_media_ids");
	create_insn	(x=0X57D8);
	op_hex		(x,	1);
	create_insn	(x=0X57EE);
	op_hex		(x,	1);
	create_insn	(x=0X580C);
	op_dec		(x,	1);
	create_insn	(x=0X580F);
	op_dec		(x,	1);
	create_insn	(0X5821);
	create_insn	(0X5824);
	set_name	(0X5824,	"read_sector");
	create_insn	(x=0X582C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X5836,	"DISK - READ SECTORS INTO MEMORY\nAL = number of sectors to read, CH = track, CL = sector\nDH = head, DL = drive, ES:BX -> buffer to fill\nReturn: CF set on error, AH = status, AL = number of sectors read",	0);
	create_insn	(x=0X5836);
	op_hex		(x,	0);
	create_insn	(x=0X5840);
	op_hex		(x,	1);
	set_cmt	(0X584D,	"DISK - READ SECTORS INTO MEMORY\nAL = number of sectors to read, CH = track, CL = sector\nDH = head, DL = drive, ES:BX -> buffer to fill\nReturn: CF set on error, AH = status, AL = number of sectors read",	0);
	create_insn	(x=0X584D);
	op_hex		(x,	0);
	create_insn	(0X5854);
	set_cmt	(0X586C,	"fhave96 flag",	0);
	create_insn	(x=0X586C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_name	(0X586C,	"dsk_open");
	set_name	(0X587A,	"dsk_open_exit");
	create_insn	(x=0X587C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_name	(0X587C,	"dsk_close");
	set_name	(0X5891,	"exitjx");
	create_insn	(0X5893);
	set_name	(0X5893,	"dsk_rem");
	create_insn	(x=0X5896);
	op_hex		(x,	1);
	create_insn	(0X589F);
	set_name	(0X589F,	"x_bus_exit");
	set_name	(0X58A2,	"dsk_ret");
	create_insn	(0X58A3);
	set_name	(0X58A3,	"dsk_writv");
	create_insn	(0X58AC);
	set_name	(0X58AC,	"dsk_writ");
	set_name	(0X58B3,	"dsk_cl");
	set_name	(0X58B6,	"dsk_io");
	create_insn	(0X58BB);
	set_name	(0X58BB,	"dsk_read");
	create_insn	(0X58C0);
	set_name	(0X58C0,	"checksingle");
	create_insn	(x=0X58C6);
	op_hex		(x,	1);
	create_insn	(x=0X58CB);
	op_hex		(x,	1);
	create_insn	(x=0X58F2);
	op_hex		(x,	1);
	create_insn	(x=0X5913);
	op_hex		(x,	1);
	create_insn	(0X5939);
	create_insn	(0X5947);
	create_insn	(0X594B);
	create_insn	(0X594E);
	set_name	(0X594E,	"nullsub_18");
	create_insn	(0X594F);
	set_name	(0X594F,	"DISKRD");
	create_insn	(0X5955);
	set_name	(0X5955,	"diskio");
	create_insn	(x=0X5969);
	op_hex		(x,	1);
	create_insn	(x=0X5992);
	op_hex		(x,	1);
	create_insn	(0X59C0);
	create_insn	(x=0X5A00);
	op_hex		(x,	1);
	create_insn	(x=0X5A0A);
	op_hex		(x,	1);
	create_insn	(0X5A6A);
	create_insn	(0X5A6D);
	create_insn	(x=0X5A90);
	op_hex		(x,	1);
	create_insn	(0X5ABA);
	set_name	(0X5ABA,	"nullsub_13");
	create_insn	(0X5ABB);
	create_insn	(x=0X5ABF);
	op_hex		(x,	1);
	create_insn	(x=0X5AC6);
	op_hex		(x,	1);
	create_insn	(0X5AD3);
	create_insn	(x=0X5AFF);
	op_hex		(x,	1);
	create_insn	(x=0X5B2A);
	op_hex		(x,	1);
	create_insn	(0X5B30);
	create_insn	(0X5B33);
	create_insn	(x=0X5B3B);
	op_hex		(x,	1);
	create_insn	(x=0X5B5A);
	op_hex		(x,	1);
	create_insn	(x=0X5B6C);
	op_hex		(x,	1);
	create_insn	(x=0X5B6E);
	op_hex		(x,	1);
	create_insn	(0X5B9D);
	create_insn	(x=0X5BBF);
	op_hex		(x,	1);
	create_insn	(x=0X5BC6);
	op_hex		(x,	1);
	create_insn	(x=0X5BCD);
	op_hex		(x,	1);
	create_insn	(0X5C05);
	create_insn	(0X5C17);
	create_insn	(0X5C31);
	create_insn	(x=0X5C3B);
	op_hex		(x,	1);
	create_insn	(x=0X5C45);
	op_hex		(x,	1);
	create_insn	(x=0X5C50);
	op_hex		(x,	1);
	create_insn	(x=0X5C5B);
	op_hex		(x,	1);
	create_insn	(0X5C77);
	create_insn	(0X5C7C);
	create_insn	(x=0X5C92);
	op_hex		(x,	1);
	set_cmt	(0X5C9F,	"DISK - ",	0);
	create_insn	(x=0X5C9F);
	op_hex		(x,	0);
	create_insn	(0X5CA8);
	create_insn	(0X5CAC);
	set_name	(0X5CAC,	"maperror");
	create_insn	(0X5CC6);
	set_name	(0X5CC6,	"set_tim");
	create_insn	(0X5CE7);
	set_name	(0X5CE7,	"again");
	set_cmt	(0X5CEA,	"If it is a media change error\ndo not decrement retry count",	0);
	set_cmt	(0X5CEF,	"decrement retry count",	0);
	create_insn	(0X5CF1);
	create_word	(0X5CF6);
	create_word	(0X5CF8);
	create_word	(0X5CFA);
	create_word	(0X5CFC);
	create_word	(0X5CFE);
	create_insn	(x=0X5D04);
	op_hex		(x,	1);
	create_insn	(x=0X5D0D);
	op_hex		(x,	1);
	create_insn	(0X5D1A);
	set_cmt	(0X5D70,	"DISK - IBM/MS Extension - EXTENDED READ (DL - drive, DS:SI - disk address packet)",	0);
	create_insn	(x=0X5D70);
	op_hex		(x,	0);
	set_cmt	(0X5D85,	"DISK - IBM/MS Extension - VERIFY SECTORS (DL - drive, DS:SI - disk address packet)",	0);
	create_insn	(x=0X5D85);
	op_hex		(x,	0);
	create_insn	(0X5D8D);
	create_insn	(0X5D8F);
	create_insn	(0X5DA0);
	create_insn	(0X5DAA);
	create_insn	(0X5DBE);
	create_insn	(0X5DC3);
	create_insn	(0X5DC6);
	create_insn	(0X5DD0);
	create_dword	(0X5DD3);
	create_byte	(0X5DD7);
	create_byte	(0X5DD8);
	create_word	(0X5DD9);
	create_byte	(0X5DDB);
	create_byte	(0X5DDC);
	create_byte	(0X5DDD);
	create_word	(0X5DDE);
	create_byte	(0X5DE0);
	create_byte	(0X5DE1);
	create_byte	(0X5DE2);
	create_word	(0X5DE3);
	create_byte	(0X5DE5);
	create_word	(x=0X5DE6);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X5DE6,	"IoReadJumpTable");
	create_word	(x=0X5DE8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DEA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DEC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DEE);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DF0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DF2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DF4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DF6);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X5DF8,	"IoWriteJumpTable");
	create_word	(x=0X5DF9);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DFB);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DFD);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5DFF);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5E01);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5E03);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5E05);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5E07);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5E09);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X5E0B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X5E0D,	"IOC_DC_Table");
	create_insn	(0X5E1A);
	set_name	(0X5E1A,	"do_generic_ioctl");
	create_insn	(x=0X5E2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X5E4C);
	op_hex		(x,	1);
	create_insn	(x=0X5E50);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X5E53);
	op_hex		(x,	1);
	create_insn	(x=0X5E82);
	op_hex		(x,	1);
	create_insn	(x=0X5E88);
	op_hex		(x,	1);
	set_name	(0X5E88,	"NotGenericWrite");
	create_insn	(x=0X5E92);
	op_hex		(x,	1);
	create_insn	(0X5EA2);
	set_name	(0X5EA2,	"Cmd_Error_Proc");
	create_insn	(0X5EA6);
	set_name	(0X5EA6,	"GetDeviceParameters");
	create_insn	(x=0X5EB8);
	op_hex		(x,	1);
	create_insn	(x=0X5ECD);
	op_hex		(x,	1);
	create_insn	(x=0X5EE4);
	op_hex		(x,	1);
	create_insn	(x=0X5EED);
	op_hex		(x,	1);
	create_insn	(x=0X5F2F);
	op_hex		(x,	1);
	create_insn	(0X5F40);
	create_insn	(x=0X5F47);
	op_hex		(x,	1);
	create_insn	(x=0X5F4D);
	op_hex		(x,	1);
	create_insn	(x=0X5F69);
	op_hex		(x,	1);
	create_insn	(x=0X5F71);
	op_hex		(x,	1);
	create_insn	(x=0X5F74);
	op_hex		(x,	1);
	create_insn	(x=0X5F7B);
	op_hex		(x,	1);
	create_insn	(x=0X5FA1);
	op_hex		(x,	1);
	create_insn	(x=0X5FA8);
	op_hex		(x,	1);
	create_insn	(x=0X5FAD);
	op_hex		(x,	1);
	create_insn	(x=0X5FB5);
	op_hex		(x,	1);
	create_insn	(x=0X5FBF);
	op_hex		(x,	1);
	create_insn	(x=0X5FE3);
	op_hex		(x,	1);
	create_insn	(x=0X5FE8);
	op_hex		(x,	1);
	create_insn	(x=0X5FED);
	op_hex		(x,	1);
	create_insn	(0X601C);
	create_insn	(0X6020);
	create_insn	(x=0X6027);
	op_hex		(x,	1);
	create_insn	(0X6033);
	create_insn	(x=0X6042);
	op_hex		(x,	1);
	create_insn	(x=0X604D);
	op_hex		(x,	1);
	create_insn	(0X6055);
	create_insn	(0X6062);
	create_insn	(x=0X6077);
	op_plain_offset	(x,	1,	0X700);
	op_plain_offset	(x,	129,	0X700);
	create_insn	(0X60E6);
	create_insn	(0X60ED);
	create_insn	(x=0X6115);
	op_hex		(x,	1);
	create_insn	(x=0X6128);
	op_hex		(x,	1);
	create_insn	(x=0X6130);
	op_hex		(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	create_insn	(x=0X6138);
	op_hex		(x,	1);
	create_insn	(x=0X614B);
	op_hex		(x,	1);
	create_insn	(0X6153);
	create_insn	(0X6158);
	set_name	(0X6158,	"ReadTrack");
	create_insn	(0X6160);
	create_insn	(0X6191);
	create_insn	(x=0X61AB);
	op_hex		(x,	1);
	create_insn	(x=0X61B3);
	op_hex		(x,	1);
	create_insn	(x=0X61C6);
	op_hex		(x,	1);
	create_insn	(x=0X61CE);
	op_hex		(x,	1);
	create_insn	(0X61E4);
	create_insn	(0X621C);
	create_insn	(0X6224);
	create_insn	(0X6227);
	create_insn	(0X622F);
	create_insn	(x=0X6237);
	op_hex		(x,	1);
	create_insn	(x=0X623F);
	op_hex		(x,	1);
	create_insn	(0X625F);
	set_cmt	(0X6271,	"DISK - DISK - SET TYPE (AT,XT2,XT286,CONV,PS\nAL = disk type AL = 03h - high-capacity disk in high-capacity drive",	0);
	create_insn	(x=0X6271);
	op_hex		(x,	0);
	create_insn	(0X627D);
	create_insn	(0X6294);
	create_insn	(x=0X62B5);
	op_hex		(x,	1);
	create_insn	(x=0X62B8);
	op_hex		(x,	1);
	create_insn	(x=0X62BA);
	op_hex		(x,	1);
	set_cmt	(0X62CC,	"DISK - SET MEDIA TYPE FOR FORMAT (AT model 3x9,XT2,XT286,PS)\nDL = drive number, CH = lower 8 bits of number of tracks, CL = sectors per track",	0);
	create_insn	(x=0X62CC);
	op_hex		(x,	0);
	create_insn	(0X6306);
	create_insn	(0X6314);
	create_insn	(0X6318);
	create_insn	(0X6321);
	set_name	(0X6321,	"ResetDisk");
	set_cmt	(0X6332,	"DISK - RESET DISK SYSTEM\nDL = drive (if bit 7 is set both hard disks and floppy disks reset)",	0);
	create_insn	(x=0X6332);
	op_hex		(x,	0);
	create_insn	(0X633C);
	create_insn	(x=0X633E);
	op_hex		(x,	1);
	set_cmt	(0X637B,	"DISK - ",	0);
	create_insn	(x=0X637B);
	op_hex		(x,	0);
	create_insn	(0X6381);
	set_name	(0X6381,	"ioctl_getown");
	create_insn	(x=0X6392);
	op_hex		(x,	1);
	create_insn	(0X639F);
	set_name	(0X639F,	"ioctl_setown");
	create_insn	(x=0X63A2);
	op_hex		(x,	1);
	create_insn	(x=0X63AA);
	op_hex		(x,	1);
	create_insn	(x=0X63B1);
	op_hex		(x,	1);
	create_insn	(0X63C8);
	create_insn	(0X63F4);
	create_insn	(0X6422);
	create_insn	(0X643A);
	create_insn	(0X643F);
	create_insn	(0X646A);
	create_insn	(0X64A5);
	create_insn	(0X64AA);
	create_insn	(x=0X64E5);
	op_hex		(x,	1);
	create_insn	(x=0X64E9);
	op_hex		(x,	1);
	create_insn	(x=0X64EF);
	op_hex		(x,	1);
	create_insn	(x=0X64F3);
	op_hex		(x,	1);
	create_insn	(x=0X64FA);
	op_hex		(x,	1);
	create_insn	(x=0X6505);
	op_hex		(x,	1);
	create_insn	(x=0X6511);
	op_hex		(x,	1);
	create_insn	(x=0X6517);
	op_hex		(x,	1);
	create_insn	(x=0X651D);
	op_hex		(x,	1);
	create_insn	(x=0X6521);
	op_hex		(x,	1);
	create_insn	(0X6527);
	create_insn	(x=0X6529);
	op_hex		(x,	1);
	create_insn	(0X6537);
	create_insn	(x=0X653F);
	op_hex		(x,	1);
	create_insn	(x=0X6547);
	op_hex		(x,	1);
	set_cmt	(0X6555,	"DISK - FLOPPY DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)\nDL = drive to check\nReturn: AH = disk change status",	0);
	create_insn	(x=0X6555);
	op_hex		(x,	0);
	create_insn	(0X6562);
	create_insn	(x=0X656B);
	op_hex		(x,	1);
	create_insn	(0X6579);
	create_insn	(x=0X6580);
	op_hex		(x,	1);
	create_insn	(x=0X658C);
	op_hex		(x,	1);
	create_insn	(0X6593);
	set_name	(0X6593,	"ioctl_support_query");
	create_insn	(0X65B7);
	create_insn	(0X65BA);
	create_insn	(0X65BE);
	set_cmt	(0X65D1,	"DISK - QCACHE - DISMOUNT",	0);
	create_insn	(x=0X65D1);
	op_hex		(x,	0);
	create_insn	(0X65EC);
	create_insn	(0X65FE);
	set_cmt	(0X6614,	"DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, DS:SI - disk address packet)",	0);
	create_insn	(x=0X6614);
	op_hex		(x,	0);
	create_insn	(0X6623);
	set_cmt	(0X6632,	"DISK - IBM/MS Extension - EJECT MEDIA (DL - drive) AL =lock media in drive",	0);
	create_insn	(x=0X6632);
	op_hex		(x,	0);
	create_insn	(0X663E);
	set_cmt	(0X6644,	"DISK - Check for INT 13h Extensions\nBX = 55AAh, DL = drive number\nReturn: CF set if not supported\nAH = extensions version\nBX = AA55h\nCX = Interface support bit map",	0);
	create_insn	(x=0X6644);
	op_hex		(x,	0);
	create_insn	(x=0X664D);
	op_hex		(x,	1);
	create_insn	(0X6654);
	create_word	(0X6656);
	create_word	(0X6658);
	create_strlit	(0X665A,	0X6668);
	set_name	(0X665A,	"aCSystem_dat");
	create_word	(0X66B0);
	create_word	(0X66B2);
	create_word	(x=0X66BC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(0X66BE);
	create_word	(x=0X66C0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(0X66C2);
	create_word	(0X6712);
	create_word	(0X6714);
	create_byte	(0X6716);
	create_byte	(0X6717);
	create_byte	(0X677B);
	make_array	(0X677B,	0X6A);
	create_strlit	(0X67E6,	0X67F5);
	set_name	(0X67E6,	"aCWinboot_ini");
	create_byte	(0X67F5);
	create_insn	(0X67F6);
	set_name	(0X67F6,	"i2f");
	create_insn	(0X681D);
	create_insn	(x=0X6825);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6829);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X682D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6831);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6835);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6839);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X683C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X6840);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X684A);
	create_insn	(0X6851);
	create_insn	(0X686D);
	create_insn	(0X687C);
	create_insn	(0X6886);
	create_insn	(0X689B);
	create_insn	(0X68D3);
	create_insn	(x=0X68E4);
	op_hex		(x,	1);
	create_insn	(x=0X68E9);
	op_hex		(x,	1);
	create_insn	(0X68F0);
	create_insn	(x=0X68FC);
	op_hex		(x,	1);
	create_insn	(x=0X6902);
	op_hex		(x,	1);
	create_insn	(x=0X6926);
	op_hex		(x,	1);
	create_insn	(0X692B);
	create_insn	(0X6934);
	create_insn	(0X694E);
	create_insn	(0X6977);
	create_insn	(x=0X698B);
	op_hex		(x,	1);
	create_insn	(0X6995);
	create_insn	(0X69A2);
	create_insn	(x=0X69A9);
	op_hex		(x,	1);
	create_insn	(x=0X69B0);
	op_hex		(x,	1);
	create_insn	(0X69D0);
	create_insn	(0X69DD);
	create_insn	(x=0X69E3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(0X6A04);
	create_insn	(0X6A2E);
	create_insn	(0X6A36);
	create_insn	(0X6A3E);
	create_insn	(0X6A46);
	create_insn	(0X6A4E);
	create_insn	(0X6A64);
	create_insn	(0X6A6F);
	create_insn	(0X6A7A);
	create_insn	(0X6A81);
	create_insn	(0X6A95);
	create_insn	(0X6AA1);
	create_insn	(0X6ABA);
	create_insn	(0X6AC5);
	create_insn	(0X6ACB);
	create_insn	(0X6B0B);
	create_insn	(x=0X6B10);
	op_hex		(x,	1);
	create_insn	(0X6B28);
	create_insn	(0X6B53);
	create_insn	(0X6B84);
	create_insn	(0X6BB0);
	create_word	(0X6BE5);
	set_name	(0X6BE5,	"prevoper");
	create_byte	(0X6BE7);
	create_byte	(0X6BE8);
	set_name	(0X6BE8,	"ec35flag");
	create_insn	(0X6BE9);
	create_insn	(x=0X6BFE);
	op_hex		(x,	1);
	create_insn	(0X6C04);
	create_insn	(x=0X6C0D);
	op_hex		(x,	1);
	create_insn	(x=0X6C1B);
	op_hex		(x,	1);
	create_insn	(x=0X6C2C);
	op_hex		(x,	1);
	create_insn	(x=0X6C5C);
	op_hex		(x,	1);
	create_insn	(0X6C75);
	create_insn	(0X6C7B);
	set_cmt	(0X6C8F,	"[bp+INT13FRAME.olddx] ; drive number",	0);
	create_insn	(0X6C8F);
	set_name	(0X6C8F,	"doint");
	set_cmt	(0X6C98,	"[bp+INT13FRAME.oldax+1] ; function",	0);
	set_cmt	(0X6C9B,	"[bp+INT13FRAME.oldf] ; flags",	0);
	set_cmt	(0X6C9F,	"call BIOSDATA:call_orig13",	0);
	set_cmt	(0X6CA5,	"[bp+INT13FRAME.oldf] ; flags",	0);
	set_cmt	(0X6CA9,	"40h:90h",	0);
	create_dword	(0X6CA9);
	set_name	(0X6CA9,	"dtype_array");
	create_insn	(x=0X6CAD);
	op_hex		(x,	1);
	create_insn	(0X6CBE);
	create_insn	(0X6CE7);
	set_name	(0X6CE7,	"i13z");
	set_cmt	(0X6CED,	"save ds",	0);
	create_insn	(x=0X6CED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X6D02,	"call BIOSDATA:call_orig13",	0);
	set_cmt	(0X6D09,	"restore ds",	0);
	create_insn	(x=0X6D09);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X6D10);
	create_insn	(x=0X6D1B);
	op_hex		(x,	1);
	create_insn	(0X6D2D);
	create_insn	(0X6D35);
	create_insn	(0X6D4D);
	create_insn	(0X6D97);
	create_insn	(0X6D9E);
	create_insn	(0X6DC6);
	create_insn	(x=0X6DE5);
	op_hex		(x,	1);
	create_insn	(x=0X6DF3);
	op_hex		(x,	1);
	create_insn	(0X6E06);
	create_insn	(0X6E0C);
	create_insn	(x=0X6E0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X6E1C);
	create_insn	(0X6E31);
	create_insn	(x=0X6E3E);
	op_hex		(x,	1);
	create_insn	(0X6E58);
	create_insn	(0X6E75);
	create_insn	(0X6EA5);
	create_insn	(0X6EEB);
	create_insn	(0X6EEE);
	create_insn	(x=0X6F21);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X6F6B);
	create_insn	(x=0X6F83);
	op_hex		(x,	1);
	create_insn	(x=0X6F8B);
	op_hex		(x,	1);
	create_insn	(0X6FB2);
	create_insn	(x=0X6FB5);
	op_hex		(x,	1);
	set_cmt	(0X6FC8,	"- Multiplex - MS WINDOWS - GET DEVICE API ENTRY POINT\nBX = virtual device (VxD) ID, ES:DI = 0000h:0000h\nReturn: ES:DI -> VxD API entry point, or 0:0 if the VxD does not support an API",	0);
	create_insn	(x=0X6FC8);
	op_hex		(x,	0);
	create_insn	(0X6FDB);
	create_insn	(x=0X6FE3);
	op_hex		(x,	1);
	create_insn	(x=0X6FEB);
	op_hex		(x,	0);
	set_cmt	(0X7000,	"DOS 2+ internal - FAST PUTCHAR\nAL = character to display",	0);
	create_insn	(x=0X7000);
	op_hex		(x,	0);
	set_cmt	(0X7004,	"DOS 2+ internal - FAST PUTCHAR\nAL = character to display",	0);
	create_insn	(x=0X7004);
	op_hex		(x,	0);
	set_cmt	(0X7016,	"KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY\nReturn: AH = scan code, AL = character",	0);
	create_insn	(x=0X7016);
	op_hex		(x,	0);
	create_insn	(0X701C);
	set_cmt	(0X7022,	"DOS 2+ internal - FAST PUTCHAR\nAL = character to display",	0);
	create_insn	(x=0X7022);
	op_hex		(x,	0);
	create_insn	(0X7026);
	create_insn	(0X7027);
	create_insn	(0X702D);
	set_name	(0X702D,	"mediacheck");
	set_cmt	(0X7044,	"DISK - FLOPPY DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)\nDL = drive to check\nReturn: AH = disk change status",	0);
	create_insn	(x=0X7044);
	op_hex		(x,	0);
	create_insn	(0X7068);
	create_insn	(0X7075);
	create_insn	(0X7095);
	set_name	(0X7095,	"nullsub_7");
	create_insn	(0X7096);
	create_insn	(0X70AF);
	create_insn	(0X70E4);
	create_insn	(0X70EC);
	create_insn	(0X710C);
	create_insn	(0X7113);
	create_insn	(0X712D);
	create_insn	(0X7134);
	create_insn	(0X7137);
	create_insn	(0X7141);
	set_name	(0X7141,	"media_set_vid");
	create_insn	(0X7144);
	create_insn	(x=0X7156);
	op_hex		(x,	1);
	create_insn	(x=0X7183);
	op_hex		(x,	1);
	create_insn	(x=0X7189);
	op_hex		(x,	1);
	create_insn	(0X718F);
	create_insn	(0X7190);
	create_insn	(x=0X71AB);
	op_hex		(x,	1);
	create_insn	(x=0X71B2);
	op_hex		(x,	1);
	create_insn	(x=0X71B8);
	op_hex		(x,	1);
	set_name	(0X71B8,	"haschange");
	create_insn	(0X71BF);
	set_name	(0X71BF,	"set_volume_id");
	create_insn	(0X71DC);
	create_dword	(0X71DF);
	create_insn	(0X71E3);
	create_insn	(0X7207);
	create_insn	(x=0X7231);
	op_hex		(x,	1);
	create_insn	(x=0X7250);
	op_hex		(x,	1);
	create_insn	(0X7287);
	create_insn	(0X72A4);
	create_insn	(0X72A7);
	create_insn	(0X72AC);
	create_insn	(0X72C3);
	create_insn	(0X72D8);
	create_word	(0X72E8);
	set_name	(0X72E8,	"sysi_bds_seg");
	create_strlit	(0X72EA,	0X72F9);
	set_name	(0X72EA,	"bootlog_txt");
	create_strlit	(0X72F9,	0X7307);
	set_name	(0X72F9,	"bootlog_prv");
	create_byte	(0X7307);
	create_byte	(0X7308);
	set_cmt	(0X7309,	"bootlog.txt file open mode and flags\n(for extended open/create)",	0);
	create_word	(0X7309);
	set_name	(0X7309,	"bootlog_mf");
	set_cmt	(0X730B,	"bootlog.txt file handle",	0);
	create_word	(0X730B);
	set_name	(0X730B,	"bootlog_fh");
	set_cmt	(0X730D,	"bootlog.txt file open flag (open if > 0)",	0);
	create_word	(0X730D);
	set_name	(0X730D,	"bootlog_fo");
	create_byte	(0X730F);
	create_byte	(0X7310);
	create_word	(0X7312);
	create_strlit	(0X7314,	0X7319);
	set_name	(0X7314,	"MDF");
	create_strlit	(0X7319,	0X732A);
	set_name	(0X7319,	"msgLogoDisabled");
	create_insn	(0X732A);
	create_insn	(0X736B);
	set_cmt	(0X7372,	"auto commit on every write",	0);
	create_insn	(x=0X7372);
	op_hex		(x,	1);
	create_insn	(x=0X7378);
	op_hex		(x,	1);
	set_cmt	(0X737B,	"DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)",	0);
	create_insn	(x=0X737B);
	op_hex		(x,	0);
	set_cmt	(0X737D,	"drive number (1) -> drive letter ('A')",	0);
	create_insn	(x=0X737D);
	op_hex		(x,	1);
	set_cmt	(0X738B,	"create/replace action",	0);
	create_insn	(x=0X7399);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X739C,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name",	0);
	create_insn	(x=0X739C);
	op_hex		(x,	0);
	set_cmt	(0X73A0,	"file handle",	0);
	create_insn	(x=0X73A9);
	op_hex		(x,	1);
	set_cmt	(0X73AC,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file",	0);
	create_insn	(x=0X73AC);
	op_hex		(x,	0);
	set_cmt	(0X73B2,	"clc, ax = 0, there is not an error",	0);
	create_insn	(0X73B9);
	set_cmt	(0X73CA,	"0",	0);
	set_cmt	(0X73CC,	"0",	0);
	set_cmt	(0X73DC,	"'] '",	0);
	create_insn	(x=0X73E0);
	op_dec		(x,	1);
	set_cmt	(0X73E3,	"Buffer at 0:604h",	0);
	create_insn	(x=0X73E6);
	op_hex		(x,	1);
	set_cmt	(0X73E8,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer",	0);
	create_insn	(x=0X73E8);
	op_hex		(x,	0);
	create_insn	(x=0X73F2);
	op_hex		(x,	1);
	set_cmt	(0X73F4,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer",	0);
	create_insn	(x=0X73F4);
	op_hex		(x,	0);
	create_insn	(x=0X7401);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X740A);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X740D,	"(*)",	0);
	set_cmt	(0X7418,	"MSG buffer at 0:604h",	0);
	create_insn	(x=0X741D);
	op_dec		(x,	1);
	set_cmt	(0X7425,	"put zero in the 1st byte of 'msgLogoDisabled:' (*)",	0);
	create_insn	(x=0X742B);
	op_hex		(x,	1);
	set_cmt	(0X742D,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer",	0);
	create_insn	(x=0X742D);
	op_hex		(x,	0);
	set_name	(0X743C,	"bootlog_w_ret");
	create_insn	(0X743D);
	create_insn	(x=0X744F);
	op_hex		(x,	1);
	set_cmt	(0X7451,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X7451);
	op_hex		(x,	0);
	set_cmt	(0X745F,	"DBLSPACE.BIN\n- IOCTL - FLUSH OR INVALIDATE INTERNAL CACHES\n'MD'\n'F' -> flush internal caches\n'??' -> result, must be, 'OK' (4F4Bh)",	0);
	create_insn	(0X745F);
	set_name	(0X745F,	"dblspace_flush_ic");
	create_insn	(x=0X7462);
	op_hex		(x,	1);
	set_cmt	(0X746B,	"BL = drive number, 0 = default, 1 = 'A'",	0);
	create_insn	(x=0X7476);
	op_chr		(x,	1);
	create_insn	(x=0X747C);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X7485,	"DOS - 2+ - IOCTL - ",	0);
	create_insn	(x=0X7485);
	op_hex		(x,	0);
	create_insn	(0X748B);
	set_name	(0X748B,	"save_old_bootlog");
	create_insn	(x=0X748C);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X748F);
	op_hex		(x,	1);
	set_cmt	(0X7491,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)",	0);
	create_insn	(x=0X7491);
	op_hex		(x,	0);
	create_insn	(x=0X7493);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X7496);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X749B);
	op_hex		(x,	1);
	set_cmt	(0X749D,	"DOS - 2+ - RENAME A FILE\nDS:DX -> ASCIZ old name (drive and path allowed, no wildcards)\nES:DI -> ASCIZ new name",	0);
	create_insn	(x=0X749D);
	op_hex		(x,	0);
	set_cmt	(0X74A1,	"file not found error ?",	0);
	set_cmt	(0X74A5,	"commit (fflush) file",	0);
	create_insn	(x=0X74A5);
	op_hex		(x,	1);
	create_strlit	(0X74AD,	0X74BD);
	set_name	(0X74AD,	"hex_digits");
	create_insn	(0X74BD);
	set_name	(0X74BD,	"write_dword_hex_num");
	create_insn	(x=0X74BF);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X74C4,	"8 hex digits: ????????h",	0);
	create_insn	(x=0X74C7);
	op_hex		(x,	1);
	create_word	(x=0X74E4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(0X74E8);
	create_word	(0X74EA);
	create_word	(0X74EC);
	create_word	(0X74EE);
	create_word	(0X74F0);
	create_word	(0X74F2);
	create_word	(0X74F4);
	create_word	(0X74F6);
	create_strlit	(0X74F8,	0X7514);
	set_name	(0X74F8,	"sngmsg");
	create_byte	(0X7514);
	create_strlit	(0X7515,	0X7537);
	set_name	(0X7515,	"aAndPressAnyKeyWhenRead");
	create_strlit	(0X7537,	0X7686);
	set_name	(0X7537,	"aYourProgramCausedADivi");
	create_strlit	(0X7686,	0X7736);
	set_name	(0X7686,	"aYouStartedYourComputer");
	create_strlit	(0X7736,	0X773A);
	create_strlit	(0X773A,	0X7742);
	set_name	(0X773A,	"IOSYS_MSG");
	create_word	(0X7742);
	create_byte	(x=0X7744);
	make_array	(x,	0X240);
	op_chr		(x,	0);
	create_dword	(0X7984);
	create_dword	(0X7988);
	create_dword	(0X798C);
	create_word	(0X7990);
	create_word	(0X7992);
	create_insn	(0X7994);
	create_insn	(0X799E);
	create_insn	(0X79A5);
	create_insn	(0X79AF);
	create_byte	(0X79BB);
	create_word	(0X79BC);
	create_word	(0X79BE);
	create_word	(0X79DB);
	create_insn	(0X79E3);
	create_insn	(0X79E5);
	create_insn	(x=0X79F6);
	op_hex		(x,	1);
	create_insn	(x=0X7A0A);
	op_hex		(x,	1);
	create_insn	(0X7A17);
	create_insn	(0X7A1D);
	create_insn	(0X7A31);
	create_insn	(0X7A36);
	create_insn	(0X7A38);
	create_insn	(0X7A3A);
	create_insn	(0X7A3F);
	create_insn	(0X7A5A);
	create_insn	(0X7A5F);
	create_insn	(0X7A7A);
	create_insn	(0X7A7F);
	create_insn	(0X7A8A);
	create_insn	(0X7A9C);
	create_insn	(0X7AA2);
	create_byte	(x=0X7AA8);
	make_array	(x,	0X1E0);
	op_dec		(x,	0);
	create_word	(0X7C88);
	create_word	(0X7C8A);
	create_word	(0X7C8C);
	create_word	(0X7C90);
	create_insn	(0X7C92);
	create_insn	(0X7C9C);
	create_insn	(x=0X7CB5);
	op_hex		(x,	1);
	create_insn	(x=0X7CB8);
	op_hex		(x,	1);
	create_insn	(x=0X7CBB);
	op_hex		(x,	1);
	create_insn	(0X7CC4);
	create_insn	(0X7CC8);
	create_insn	(0X7CCF);
	create_insn	(0X7CE6);
	create_insn	(0X7CEA);
	create_insn	(0X7CEF);
	create_insn	(0X7D20);
	create_insn	(x=0X7D23);
	op_hex		(x,	1);
	create_insn	(x=0X7D5D);
	op_hex		(x,	1);
	create_insn	(0X7D76);
	create_insn	(0X7DDA);
	create_insn	(0X7DED);
	create_insn	(0X7DF3);
	create_insn	(x=0X7DFD);
	op_hex		(x,	1);
	create_insn	(0X7E3F);
	create_insn	(x=0X7E46);
	op_hex		(x,	1);
	create_insn	(0X7E69);
	create_insn	(0X7EC1);
	create_insn	(0X7EE6);
	create_insn	(0X7F19);
	create_insn	(0X7F4C);
	create_insn	(0X7F50);
	create_insn	(0X7F58);
	create_insn	(0X7F89);
	create_insn	(0X7F90);
	create_insn	(0X7FBD);
	create_insn	(0X7FDF);
	create_insn	(0X7FE7);
	create_insn	(0X8001);
	create_insn	(0X8025);
	create_insn	(0X804C);
	create_insn	(0X8058);
	create_insn	(x=0X8075);
	op_hex		(x,	1);
	create_insn	(x=0X80C3);
	op_hex		(x,	1);
	create_insn	(x=0X80CE);
	op_hex		(x,	1);
	create_insn	(x=0X80E3);
	op_hex		(x,	1);
	create_insn	(0X8109);
	create_insn	(0X810F);
	create_insn	(0X8117);
	create_insn	(x=0X812D);
	op_hex		(x,	1);
	create_insn	(x=0X814D);
	op_hex		(x,	1);
	create_insn	(x=0X815E);
	op_hex		(x,	1);
	create_insn	(0X818C);
	create_byte	(0X81EA);
	make_array	(0X81EA,	0X6);
	set_name	(0X81EA,	"GDTPtr");
	create_dword	(0X81F0);
	create_insn	(0X8224);
	create_insn	(x=0X8228);
	op_hex		(x,	1);
	create_insn	(x=0X8236);
	op_stkvar	(x,	0);
	create_insn	(x=0X8239);
	op_stkvar	(x,	0);
	create_insn	(x=0X823C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8243);
	op_stkvar	(x,	0);
	create_insn	(x=0X8247);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X825E);
	op_stkvar	(x,	0);
	create_insn	(x=0X826B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8271);
	op_hex		(x,	1);
	create_insn	(x=0X827D);
	op_hex		(x,	1);
	create_insn	(x=0X8298);
	op_stkvar	(x,	1);
	create_insn	(x=0X829C);
	op_hex		(x,	1);
	create_insn	(x=0X82A6);
	op_hex		(x,	1);
	create_insn	(x=0X82BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X82C7);
	op_stkvar	(x,	1);
	create_insn	(x=0X82DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X82E4);
	op_stkvar	(x,	1);
	create_insn	(0X82EB);
	create_insn	(0X82EF);
	create_insn	(x=0X82F7);
	op_stkvar	(x,	0);
	create_insn	(0X82FC);
	create_insn	(x=0X8312);
	op_hex		(x,	1);
	create_insn	(x=0X8327);
	op_hex		(x,	1);
	create_insn	(0X8331);
	create_insn	(x=0X8335);
	op_hex		(x,	1);
	create_insn	(x=0X8339);
	op_hex		(x,	1);
	create_insn	(0X8352);
	create_insn	(0X8356);
	set_cmt	(0X835B,	"himem.sys\n\nHandler for int 13 during our rep moves\n;If it is a real interrupt, jump to the old handler\n;If it is a fault, set Real Big Mode and return",	0);
	create_insn	(0X835B);
	set_name	(0X835B,	"Int13Handler");
	set_cmt	(0X8361,	"Interrupt controller, 8259A.",	0);
	create_insn	(x=0X8361);
	op_hex		(x,	0);
	set_cmt	(0X8365,	"Interrupt controller, 8259A.",	0);
	create_insn	(x=0X8365);
	op_hex		(x,	1);
	create_insn	(x=0X8367);
	op_hex		(x,	1);
	set_cmt	(0X8380,	"descRealBig - OurGDT ; Special 4Gb selector",	0);
	set_name	(0X8380,	"LoadDescriptorCache");
	create_word	(0X838A);
	set_cmt	(0X838C,	"Go into Protected Mode\nNOTE: NMIs will kill us!!!",	0);
	create_insn	(x=0X838C);
	op_hex		(x,	1);
	set_cmt	(0X8391,	"db 0EAh              ; jmp far flush_prot\ndw offset flush_prot ; Clears the prefetch\ndw descCS - OurGDT",	0);
	create_insn	(0X8396);
	set_name	(0X8396,	"flush_prot");
	set_cmt	(0X839A,	"Return to Real Mode",	0);
	create_insn	(x=0X839A);
	op_hex		(x,	1);
	set_cmt	(0X839F,	"db 0EAh     ; jmp far flush_real\ndw offset flush_real",	0);
	create_insn	(0X83A4);
	set_name	(0X83A4,	"flush_real");
	create_insn	(0X83AD);
	set_cmt	(0X83B4,	"Set up GDT and call int 15h Move Block\n[bp.SrcLinear]",	0);
	create_insn	(x=0X83B4);
	op_stkvar	(x,	0);
	set_name	(0X83B4,	"MEM3_MoveBlock");
	set_cmt	(0X83B8,	"[bp.DstLinear]",	0);
	create_insn	(x=0X83B8);
	op_stkvar	(x,	0);
	create_insn	(x=0X83BE);
	op_dec		(x,	1);
	set_cmt	(0X83C4,	"[bp.Count]",	0);
	create_insn	(x=0X83C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X83CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X83D0);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X83D4);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X83D8,	"[bp.SrcLinear]",	0);
	create_insn	(x=0X83D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X83DF);
	op_dec		(x,	1);
	create_insn	(x=0X83E8);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X83EC,	"[bp.DstLinear]",	0);
	create_insn	(x=0X83EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X83F1);
	op_dec		(x,	1);
	create_insn	(x=0X83FB);
	op_hex		(x,	1);
	set_cmt	(0X83FD,	"EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)\nCX = number of words to move, ES:SI -> global descriptor table\nReturn: CF set on error, AH = status",	0);
	create_insn	(x=0X83FD);
	op_hex		(x,	0);
	create_insn	(x=0X8404);
	op_stkvar	(x,	0);
	create_insn	(x=0X840C);
	op_hex		(x,	1);
	create_insn	(x=0X840F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8413);
	op_stkvar	(x,	0);
	create_insn	(0X8419);
	create_insn	(x=0X841D);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_byte	(0X8425);
	create_insn	(0X8430);
	set_name	(0X8430,	"COMMAND");
	set_cmt	(0X8431,	"MAXCOM",	0);
	set_name	(0X8438,	"SAVREGS");
	create_insn	(x=0X846C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8470);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8474);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8478);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X847C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8480);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8484);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8489);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X848D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8491);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8495);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8499);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X849D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X84A3,	"[PDB.USER_STACK]",	0);
	set_cmt	(0X84A7,	"[PDB.USER_STACK+2]",	0);
	set_cmt	(0X84B0,	"Enough stack for interrupts",	0);
	create_insn	(x=0X84B0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X84B0,	"REDISP");
	create_insn	(x=0X84B8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X84BD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X84C2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X84C8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X84CD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X84D2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X84D7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X84DF);
	op_hex		(x,	1);
	create_insn	(x=0X84F0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X84F7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X84FC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X84FF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8504);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8509);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8511);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8516);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8519);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X8520);
	op_hex		(x,	1);
	create_insn	(x=0X8524);
	op_hex		(x,	1);
	create_insn	(x=0X8528);
	op_hex		(x,	1);
	create_insn	(x=0X852C);
	op_hex		(x,	1);
	create_insn	(x=0X8530);
	op_hex		(x,	1);
	create_insn	(x=0X8539);
	op_hex		(x,	1);
	create_insn	(x=0X853D);
	op_hex		(x,	1);
	create_insn	(x=0X8541);
	op_hex		(x,	1);
	create_insn	(x=0X8545);
	op_hex		(x,	1);
	create_insn	(x=0X8549);
	op_hex		(x,	1);
	create_insn	(x=0X8554);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X8559);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X855D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8563);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X8568);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X856D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8572);
	op_hex		(x,	1);
	create_insn	(x=0X8576);
	op_hex		(x,	1);
	create_insn	(x=0X857A);
	op_hex		(x,	1);
	create_insn	(x=0X857E);
	op_hex		(x,	1);
	create_insn	(x=0X8582);
	op_hex		(x,	1);
	create_insn	(x=0X858B);
	op_hex		(x,	1);
	create_insn	(x=0X858F);
	op_hex		(x,	1);
	create_insn	(x=0X8593);
	op_hex		(x,	1);
	create_insn	(x=0X8597);
	op_hex		(x,	1);
	create_insn	(x=0X859B);
	op_hex		(x,	1);
	set_cmt	(0X859F,	"near call",	0);
	create_insn	(x=0X859F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X85AC);
	op_hex		(x,	1);
	create_insn	(x=0X85B0);
	op_hex		(x,	1);
	create_insn	(x=0X85B4);
	op_hex		(x,	1);
	create_insn	(x=0X85B8);
	op_hex		(x,	1);
	create_insn	(x=0X85BC);
	op_hex		(x,	1);
	create_insn	(x=0X85C1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0X85C7,	"LeaveDOS");
	create_insn	(x=0X85CD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X85D1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X85D5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X85DF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X85E2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X85E5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X85E8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X85F5);
	set_name	(0X85F5,	"QUIT");
	create_insn	(0X85FA);
	set_name	(0X85FA,	"BADCALL");
	set_cmt	(0X85FD,	"System call entry point and dispatcher",	0);
	create_insn	(0X85FD);
	set_name	(0X85FD,	"CALL_ENTRY");
	create_insn	(x=0X8603);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8609);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8610);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8614);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X8619,	"MAXCALL",	0);
	create_insn	(x=0X8619);
	op_dec		(x,	1);
	create_byte	(0X8623);
	make_array	(0X8623,	0XD);
	create_word	(0X8630);
	set_name	(0X8630,	"BioDataSeg");
	create_word	(0X8632);
	set_name	(0X8632,	"DosDSeg");
	create_byte	(0X8634);
	set_name	(0X8634,	"MSMAJOR");
	create_byte	(0X8635);
	set_name	(0X8635,	"MSMINOR");
	create_byte	(0X8636);
	make_array	(0X8636,	0XB6);
	set_name	(0X8636,	"I21_MAP_E_TAB");
	create_byte	(0X86EC);
	create_word	(x=0X86ED);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X86ED,	"DISPATCH");
	create_word	(x=0X86EF);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X86F1);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X86F3);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X86F5);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X86F7);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X86F9);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X86FB);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X86FD);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X86FF);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8701);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8703);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8705);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8707);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8709);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X870B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X870D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X870F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8711);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8713);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8715);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8717);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8719);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X871B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X871D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X871F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8721);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8723);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8725);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8727);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8729);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X872B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X872D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X872F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8731);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8733);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8735);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8737);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8739);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X873B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X873D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X873F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8741);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8743);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8745);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8747);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8749);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X874B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X874D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X874F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8751);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8753);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8755);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8757);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8759);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X875B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X875D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X875F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8761);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8763);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8765);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8767);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8769);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X876B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X876D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X876F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8771);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8773);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8775);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8777);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8779);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X877B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X877D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X877F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8781);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8783);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8785);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8787);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8789);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X878B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X878D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X878F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8791);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8793);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8795);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8797);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8799);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X879B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X879D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X879F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87A1);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87A3);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87A5);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87A7);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87A9);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87AB);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87AD);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87AF);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87B1);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87B3);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87B5);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87B7);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87B9);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87BB);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87BD);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87BF);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87C1);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87C3);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87C5);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87C7);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87C9);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87CB);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87CD);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87CF);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87D1);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87D3);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87D5);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X87D5,	"FOO");
	create_word	(x=0X87D7);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0X87D7,	"DTab");
	create_byte	(x=0X87D9);
	op_dec		(x,	0);
	set_name	(0X87D9,	"DOSTable");
	create_word	(x=0X87DA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87DC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87DE);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87E0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87E2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87E4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87E6);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87E8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87EA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87EC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87EE);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87F0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87F2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87F4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87F6);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87F8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87FA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87FC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X87FE);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8800);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8802);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8804);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8806);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8808);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X880A);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X880C);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X880E);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8810);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8812);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8814);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8816);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8818);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X881A);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X881C);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X881E);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8820);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8822);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8824);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8826);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8828);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X882A);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X882C);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X882E);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8830);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8832);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8834);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8836);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8838);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X883A);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X883C);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0X883E);
	set_name	(0X883E,	"$SET_CTRL_C_TRAPPING");
	create_insn	(0X8845);
	create_insn	(x=0X884D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X8859);
	create_insn	(x=0X885C);
	op_hex		(x,	1);
	create_insn	(0X8863);
	create_insn	(x=0X8866);
	op_hex		(x,	1);
	create_insn	(0X886D);
	create_insn	(0X887A);
	create_insn	(x=0X8885);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X888F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0X8898);
	create_insn	(0X889A);
	set_name	(0X889A,	"$SET_CURRENT_PDB");
	create_insn	(x=0X88A0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X88A6);
	set_name	(0X88A6,	"$GET_CURRENT_PDB");
	create_insn	(0X88B2);
	set_name	(0X88B2,	"$SET_PRINTER_FLAG");
	create_insn	(x=0X88B8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X88BC,	"irett");
	create_insn	(0X88BD);
	set_name	(0X88BD,	"INT24h");
	create_insn	(x=0X88BF);
	op_hex		(x,	1);
	create_insn	(0X88C8);
	set_name	(0X88C8,	"restore_world");
	create_insn	(x=0X88CD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X88DA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X88DF);
	set_name	(0X88DF,	"save_world");
	create_insn	(x=0X88E4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X88F1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X88F9);
	op_dec		(x,	1);
	create_insn	(0X88FE);
	set_name	(0X88FE,	"Get_User_Stack");
	create_insn	(x=0X8903);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_byte	(0X8908);
	set_name	(0X8908,	"ERRIN");
	create_byte	(0X8909);
	create_byte	(0X890A);
	create_byte	(0X890B);
	create_byte	(0X890C);
	create_byte	(0X890D);
	create_byte	(0X890E);
	set_name	(0X890E,	"ERROUT");
	create_byte	(0X890F);
	create_byte	(0X8910);
	create_byte	(0X8911);
	create_byte	(0X8912);
	create_byte	(0X8913);
	create_insn	(x=0X8914);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X8914,	"AbsSetup");
	create_insn	(x=0X891D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8922);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8941);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X8966,	"Microsoft Networks - CHECK DIRECT I/O\nDS:SI -> ASCIZ disk device name (may be full path or only drive\nspecifier--must include the colon)\nReturn: CF clear if absolute disk access allowed",	0);
	create_insn	(x=0X8966);
	op_hex		(x,	0);
	create_insn	(0X896E);
	create_insn	(0X897D);
	set_name	(0X897D,	"ABSDRD");
	create_insn	(0X8981);
	set_name	(0X8981,	"FAT32_ABSDRD");
	create_insn	(x=0X898A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8993);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8997);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X89A0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X89A3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X89B4,	"Invalidate SC",	0);
	create_insn	(x=0X89C2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X89CC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X89D1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X89DB);
	set_name	(0X89DB,	"TLEAVE");
	create_insn	(x=0X89E5);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X89EC,	"[ES:DI+NUMERR-1]",	0);
	create_insn	(x=0X89F1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X89F6,	"ILEAVE");
	set_cmt	(0X89FC,	"FAT32- EXTENDED ABSOLUTE DISK READ/WRITE flag",	0);
	create_insn	(x=0X89FC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X8A02,	"INT 21h AX=7305h\nINT 25h",	0);
	create_insn	(x=0X8A06);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8A0A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8A0F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8A16);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8A1B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8A23);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X8A2B);
	set_name	(0X8A2B,	"ABSDWRT");
	create_insn	(0X8A30);
	set_name	(0X8A30,	"FAT32_ABSDWRT");
	set_cmt	(0X8A32,	"floppy disk\nhard disk",	0);
	set_cmt	(0X8A3F,	"test bit 7 (locked bit)",	0);
	create_insn	(x=0X8A3F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0X8A46,	"test bit 6 (large disk support -windows- bit?)",	0);
	create_insn	(x=0X8A46);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0X8A4D,	"allowed",	0);
	set_name	(0X8A52,	"absdwrt_err");
	set_cmt	(0X8A56,	"- VIDEO - SET VIDEO MODE\nAL = mode",	0);
	create_insn	(x=0X8A56);
	op_hex		(x,	0);
	create_insn	(x=0X8A5C);
	set_cmt	(0X8A61,	"INT 09h vector",	0);
	create_insn	(x=0X8A61);
	create_insn	(x=0X8A6D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8A74);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8A78);
	op_hex		(x,	1);
	set_cmt	(0X8A7A,	"DOS - DISK RESET",	0);
	create_insn	(x=0X8A7A);
	op_hex		(x,	0);
	create_insn	(0X8A7D);
	create_insn	(0X8A7F);
	create_insn	(x=0X8A88);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8A91);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8A95);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8A9E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8AA1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X8AB1,	"DPB.FAT_SIZE > 0 ?",	0);
	set_cmt	(0X8AB6,	"no, FAT32 fs",	0);
	set_cmt	(0X8AB8,	"DPB.FREE_CNT",	0);
	set_cmt	(0X8AC7,	"DPB.FREE_CNT ; 32 bit",	0);
	create_insn	(0X8AC7);
	set_cmt	(0X8AD8,	"DPB.FIRST_ACCESS",	0);
	create_insn	(x=0X8AD8);
	op_hex		(x,	1);
	set_cmt	(0X8AE0,	"invalidate secondary cache",	0);
	create_insn	(x=0X8AE9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0X8AFC,	"logical unit number",	0);
	create_insn	(0X8AFC);
	set_name	(0X8AFC,	"GETBP");
	set_cmt	(0X8AFD,	"no increment; need carry flag",	0);
	set_cmt	(0X8B04,	"good drive",	0);
	set_cmt	(0X8B08,	"error_not_DOS_disk",	0);
	set_cmt	(0X8B0B,	"unknown media",	0);
	set_cmt	(0X8B0E,	"invalid drive or Non DOS drive",	0);
	create_insn	(x=0X8B0E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8B11);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8B1B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X8B1F,	"[es:bp+curdir.flags],curdir_isnet",	0);
	create_insn	(x=0X8B1F);
	op_hex		(x,	1);
	create_insn	(x=0X8B27);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X8B2D,	"error_not_supported",	0);
	set_cmt	(0X8B2F,	"[ES:BP+curdir.devptr]",	0);
	create_insn	(0X8B2F);
	create_insn	(x=0X8B3B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X8B3B,	"GOTDPB");
	create_insn	(x=0X8B3F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X8B44);
	set_name	(0X8B44,	"SYS_RET_OK");
	set_cmt	(0X8B47,	"[SI+user_env.user_F],~f_Carry",	0);
	create_insn	(x=0X8B47);
	op_hex		(x,	1);
	create_insn	(x=0X8B4B);
	set_cmt	(0X8B4D,	"hack to allow for smaller error rets",	0);
	create_insn	(0X8B4D);
	set_name	(0X8B4D,	"SYS_RET_ERR");
	set_cmt	(0X8B4F,	"Make sure code is OK, EXTERR gets set",	0);
	set_name	(0X8B55,	"From_GetSet");
	set_cmt	(0X8B58,	"[SI+user_env.user_F],f_Carry",	0);
	create_insn	(x=0X8B58);
	op_hex		(x,	1);
	set_cmt	(0X8B5D,	"\n[SI+user_env.user_AX]",	0);
	set_cmt	(0X8B60,	"obsolete system calls dispatch to here",	0);
	create_insn	(0X8B60);
	set_name	(0X8B60,	"NO_OP");
	create_insn	(0X8B63);
	set_name	(0X8B63,	"FCB_RET_ERR");
	create_insn	(x=0X8B65);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X8B6C,	"-1",	0);
	create_insn	(0X8B6F);
	set_name	(0X8B6F,	"ErrorMap");
	create_insn	(x=0X8B70);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8B73);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X8B7B,	"error_FAIL_I24",	0);
	create_insn	(x=0X8B7B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0X8B87);
	set_name	(0X8B87,	"CAL_LK");
	create_insn	(x=0X8B8F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X8BA1);
	create_insn	(x=0X8BA7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8BAF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8BB7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X8BBE);
	set_name	(0X8BBE,	"ETAB_LK");
	create_insn	(x=0X8BC4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8BC7);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X8BCC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X8BE2);
	create_insn	(0X8BE6);
	create_insn	(0X8BF9);
	set_name	(0X8BF9,	"SetBad");
	create_insn	(x=0X8C02);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X8C0A);
	set_name	(0X8C0A,	"BadCall");
	create_insn	(0X8C0E);
	set_name	(0X8C0E,	"OKCall");
	create_insn	(0X8C10);
	set_name	(0X8C10,	"INT2F");
	set_cmt	(0X8C11,	"MultNET",	0);
	set_name	(0X8C16,	"TestInstall");
	set_name	(0X8C1A,	"BadFunc");
	set_name	(0X8C1D,	"Leave2F");
	create_insn	(0X8C20);
	set_name	(0X8C20,	"INT2FSHR");
	create_insn	(0X8C32);
	set_name	(0X8C32,	"check_win");
	set_name	(0X8C37,	"next_i2f");
	create_insn	(0X8C3A);
	set_name	(0X8C3A,	"Win386_Msg");
	create_insn	(x=0X8C4E);
	op_hex		(x,	1);
	create_insn	(0X8C57);
	create_insn	(0X8C63);
	create_insn	(x=0X8C6F);
	op_hex		(x,	1);
	create_insn	(x=0X8C74);
	op_hex		(x,	1);
	create_insn	(x=0X8C8A);
	op_hex		(x,	1);
	create_insn	(x=0X8C90);
	op_hex		(x,	1);
	create_insn	(x=0X8C95);
	op_hex		(x,	1);
	create_insn	(0X8C9C);
	create_insn	(0X8CAD);
	create_insn	(0X8CDF);
	create_insn	(0X8CE6);
	create_insn	(x=0X8CEA);
	op_hex		(x,	1);
	create_insn	(0X8CF5);
	create_insn	(0X8CF9);
	create_insn	(0X8D01);
	create_insn	(0X8D05);
	set_name	(0X8D05,	"int_2Fh_1231h");
	create_insn	(x=0X8D19);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X8D20);
	op_hex		(x,	1);
	create_insn	(0X8D27);
	create_insn	(0X8D32);
	create_insn	(0X8D38);
	set_name	(0X8D38,	"DispatchDOS");
	create_insn	(0X8D50);
	set_name	(0X8D50,	"DOSGetGroup");
	create_insn	(0X8D56);
	set_name	(0X8D56,	"DOSInstall");
	create_insn	(0X8D59);
	set_name	(0X8D59,	"RW32_CONVERT");
	create_insn	(0X8D82);
	create_byte	(0X8D9A);
	set_name	(0X8D9A,	"CANCHAR");
	create_byte	(0X8D9B);
	set_name	(0X8D9B,	"ESCCHAR");
	create_word	(x=0X8DAA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DAC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DAE);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DB0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DB2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DB4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DB6);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DB8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DBA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DBC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DBE);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DC0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DC2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0X8DC4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0X8DC6);
	create_insn	(x=0X8DD6);
	op_hex		(x,	1);
	create_insn	(x=0X8DDA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0X8DDF);
	set_name	(0X8DDF,	"$GET_DATE");
	create_insn	(x=0X8DE4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8DE7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8DF1);
	op_dec		(x,	1);
	create_insn	(x=0X8DF7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X8DFB,	"_RET24");
	set_cmt	(0X8DFC,	"-1",	0);
	create_insn	(0X8DFC);
	set_name	(0X8DFC,	"$SET_DATE");
	create_insn	(x=0X8DFE);
	op_dec		(x,	1);
	create_insn	(x=0X8E04);
	op_dec		(x,	1);
	create_insn	(x=0X8E11);
	op_dec		(x,	1);
	set_name	(0X8E1B,	"RET24");
	create_insn	(0X8E1C);
	set_name	(0X8E1C,	"$GET_TIME");
	set_name	(0X8E2C,	"RET26");
	create_insn	(0X8E2D);
	set_name	(0X8E2D,	"$SET_TIME");
	create_insn	(x=0X8E2F);
	op_dec		(x,	1);
	create_insn	(x=0X8E34);
	op_dec		(x,	1);
	create_insn	(x=0X8E39);
	op_dec		(x,	1);
	create_insn	(x=0X8E3E);
	op_dec		(x,	1);
	create_insn	(x=0X8E47);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8E56);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8E62);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8E66);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X8E6A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X8E74);
	set_name	(0X8E74,	"DATE16");
	create_insn	(x=0X8E7F);
	op_hex		(x,	1);
	create_insn	(x=0X8E82);
	op_hex		(x,	1);
	create_insn	(x=0X8E85);
	op_hex		(x,	1);
	create_insn	(x=0X8E8B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8E8E);
	op_hex		(x,	1);
	create_insn	(x=0X8E91);
	op_hex		(x,	1);
	create_insn	(x=0X8E94);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8E99);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X8E99,	"READTIME");
	create_insn	(x=0X8EDC);
	op_hex		(x,	1);
	create_insn	(x=0X8EE7);
	op_hex		(x,	1);
	create_insn	(0X8F0A);
	set_name	(0X8F0A,	"DSLIDE");
	create_insn	(0X8F16);
	set_name	(0X8F16,	"SETYEAR");
	create_insn	(x=0X8F1F);
	op_hex		(x,	1);
	create_insn	(0X8F2C);
	set_name	(0X8F2C,	"DODATE");
	create_insn	(x=0X8F42);
	op_hex		(x,	1);
	create_insn	(x=0X8F50);
	op_hex		(x,	1);
	create_insn	(x=0X8F58);
	op_hex		(x,	1);
	create_insn	(0X8F9C);
	create_insn	(0X8FAF);
	set_name	(0X8FAF,	"DSUM");
	create_insn	(0X8FB9);
	set_name	(0X8FB9,	"$GET_VERSION");
	create_insn	(x=0X8FBB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X8FBF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X8FC9,	"Norm_Vers");
	create_insn	(x=0X8FCA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X8FCE,	"[PDB.Version]",	0);
	create_insn	(x=0X8FDE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X8FDE,	"$GET_VERIFY_ON_WRITE");
	create_insn	(x=0X8FE3);
	op_hex		(x,	1);
	set_name	(0X8FE3,	"$SET_VERIFY_ON_WRITE");
	create_insn	(x=0X8FE5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X8FE9);
	set_name	(0X8FE9,	"RET27");
	create_insn	(0X8FEA);
	set_name	(0X8FEA,	"$INTERNATIONAL");
	create_insn	(0X9006);
	create_insn	(0X9017);
	set_cmt	(0X9027,	"- Multiplex - NLSFUNC.COM - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, not OK\nFFh installed",	0);
	create_insn	(x=0X9027);
	op_hex		(x,	0);
	set_cmt	(0X9034,	"- Multiplex - NLSFUNC.COM - GET COUNTRY INFO\nBX = code page, DX = country code, DS:SI -> internal code page structure\nES:DI -> user buffer\nReturn: AL = status",	0);
	create_insn	(x=0X9034);
	op_hex		(x,	0);
	create_insn	(0X9038);
	set_cmt	(0X903B,	"- Multiplex - NLSFUNC.COM - SET COUNTRY INFO\nDS:SI -> internal code page structure\nBX = code page, DX = country code\nReturn: AL = status",	0);
	create_insn	(x=0X903B);
	op_hex		(x,	0);
	create_insn	(0X9043);
	create_insn	(0X9047);
	create_insn	(0X9062);
	create_insn	(0X9071);
	set_cmt	(0X9075,	"GET/SET INTERNATIONALIZATION INFORMATION",	0);
	create_insn	(0X9075);
	set_name	(0X9075,	"_int21_70h");
	create_insn	(0X9083);
	create_insn	(0X9087);
	create_insn	(0X90AD);
	create_insn	(0X90CA);
	create_insn	(0X90D1);
	set_name	(0X90D1,	"$GetExtCntry");
	create_insn	(x=0X90D5);
	op_hex		(x,	1);
	create_insn	(0X90DE);
	create_insn	(0X90F2);
	create_insn	(0X9119);
	create_insn	(0X912E);
	create_insn	(0X913F);
	create_insn	(0X9182);
	create_insn	(0X919F);
	create_insn	(0X91B8);
	set_cmt	(0X91BF,	"- Multiplex - NLSFUNC.COM - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, not OK\nFFh installed",	0);
	create_insn	(x=0X91BF);
	op_hex		(x,	0);
	set_cmt	(0X91C8,	"- Multiplex - NLSFUNC.COM - GET COUNTRY INFO\nBP = subfunction, BX = code page\nDX = country code, DS:SI -> internal code page structure\nES:DI -> user buffer, CX = size of user buffer\nReturn: AL = status\n00h successful\nelse DOS error code",	0);
	create_insn	(x=0X91C8);
	op_hex		(x,	0);
	create_insn	(0X91D3);
	create_insn	(0X91FD);
	create_insn	(0X9200);
	set_name	(0X9200,	"$GetSetCdPg");
	create_insn	(0X921B);
	set_cmt	(0X9225,	"- Multiplex - NLSFUNC.COM - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, not OK\nFFh installed",	0);
	create_insn	(x=0X9225);
	op_hex		(x,	0);
	set_cmt	(0X922E,	"- Multiplex - NLSFUNC.COM - CHANGE CODE PAGE\nDS:SI -> internal code page structure\nBX = new code page, DX = country code???\nReturn: AL = status\n00h successful\nelse DOS error code",	0);
	create_insn	(x=0X922E);
	op_hex		(x,	0);
	create_insn	(x=0X923B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9248);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X9250);
	create_insn	(0X9252);
	create_insn	(0X9256);
	set_name	(0X9256,	"$GET_DRIVE_FREESPACE");
	create_insn	(x=0X9263);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X9267);
	op_hex		(x,	1);
	create_insn	(x=0X9274);
	op_hex		(x,	1);
	create_insn	(x=0X927B);
	op_hex		(x,	1);
	create_insn	(x=0X9282);
	op_hex		(x,	1);
	create_insn	(x=0X9287);
	op_hex		(x,	1);
	set_name	(0X928C,	"gdrvfspc_1");
	create_insn	(x=0X9294);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X9298);
	op_hex		(x,	1);
	create_insn	(x=0X92A5);
	op_hex		(x,	1);
	create_insn	(x=0X92AC);
	op_hex		(x,	1);
	create_insn	(x=0X92B1);
	op_hex		(x,	1);
	set_name	(0X92B6,	"gdrvfspc_2");
	set_name	(0X92BF,	"DoSt");
	create_insn	(x=0X92CF);
	op_dec		(x,	1);
	set_name	(0X92CF,	"modify_cluster_count");
	create_insn	(x=0X92D3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X92D8);
	op_dec		(x,	1);
	create_insn	(x=0X92DC);
	op_dec		(x,	1);
	create_insn	(x=0X92E0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X92E5);
	op_dec		(x,	1);
	create_insn	(x=0X92FB);
	op_dec		(x,	1);
	set_name	(0X9302,	"gdrvfspc_ret");
	create_insn	(0X930E);
	set_name	(0X930E,	"BADFDRV");
	create_insn	(0X9316);
	create_insn	(x=0X931A);
	op_hex		(x,	1);
	create_insn	(x=0X9326);
	op_dec		(x,	1);
	create_insn	(x=0X932D);
	op_hex		(x,	1);
	create_insn	(x=0X9330);
	op_hex		(x,	1);
	create_insn	(x=0X933E);
	op_hex		(x,	1);
	create_insn	(x=0X9351);
	op_hex		(x,	1);
	create_insn	(x=0X9354);
	op_hex		(x,	1);
	create_insn	(x=0X9357);
	op_hex		(x,	1);
	set_cmt	(0X9363,	"32 kilobytes (per cluster)",	0);
	create_insn	(x=0X9363);
	op_dec		(x,	1);
	create_insn	(x=0X9375);
	op_hex		(x,	1);
	create_insn	(x=0X937A);
	op_hex		(x,	1);
	create_insn	(x=0X937E);
	op_hex		(x,	1);
	create_insn	(0X9382);
	set_name	(0X9382,	"gdrvfspc_7303h");
	create_insn	(x=0X93A7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X93BC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X942C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X942C,	"$GET_DMA");
	create_insn	(x=0X9431);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X9440);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X9440,	"$SET_DMA");
	create_insn	(x=0X9445);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X944B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X944B,	"$GET_DEFAULT_DRIVE");
	create_insn	(0X9450);
	set_name	(0X9450,	"$SET_DEFAULT_DRIVE");
	create_insn	(0X9462);
	set_name	(0X9462,	"$GET_INTERRUPT_VECTOR");
	create_insn	(0X9472);
	set_name	(0X9472,	"$SET_INTERRUPT_VECTOR");
	create_insn	(x=0X947E);
	op_hex		(x,	1);
	create_insn	(0X9487);
	create_insn	(0X9496);
	set_name	(0X9496,	"RECSET");
	create_insn	(x=0X949C);
	op_hex		(x,	1);
	create_insn	(0X94A0);
	set_name	(0X94A0,	"$CHAR_OPER");
	create_insn	(0X94AD);
	set_name	(0X94AD,	"chop_1");
	create_insn	(0X94B4);
	set_name	(0X94B4,	"$GetExtendedError");
	create_insn	(x=0X94B6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X94D7);
	create_insn	(0X94E1);
	set_name	(0X94E1,	"$ECS_Call");
	create_insn	(0X94F9);
	set_name	(0X94F9,	"$PARSE_FILE_DESCRIPTOR");
	create_insn	(0X9504);
	set_name	(0X9504,	"$SLEAZEFUNC");
	set_name	(0X9506,	"$SLEAZEFUNCDL");
	create_insn	(x=0X9514);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9520);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X9527);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X9531);
	create_insn	(0X9534);
	set_name	(0X9534,	"$GET_INDOS_FLAG");
	create_insn	(x=0X9537);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X9540);
	set_name	(0X9540,	"$GET_IN_VARS");
	create_insn	(x=0X9543);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X954C);
	set_name	(0X954C,	"$GET_DEFAULT_DPB");
	set_name	(0X954E,	"$GET_DPB");
	create_insn	(x=0X955B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X955F);
	op_hex		(x,	1);
	create_insn	(0X9599);
	create_insn	(0X95A4);
	create_insn	(0X9634);
	create_insn	(0X9642);
	set_name	(0X9642,	"$DISK_RESET");
	create_insn	(x=0X9649);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X9651);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X9656);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X965A,	"drst_1");
	create_insn	(0X9668);
	set_name	(0X9668,	"drst_2");
	create_insn	(x=0X9672);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9676);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X9684,	"Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS\nDS = DOS CS\nReturn: CF clear (successful)",	0);
	create_insn	(x=0X9684);
	op_hex		(x,	0);
	create_insn	(0X9688);
	set_name	(0X9688,	"$SETDPB");
	set_cmt	(0X968A,	"DPB address",	0);
	set_cmt	(0X968E,	"CX = signature 4558h ('EX')\n for FAT32 extended BPB/DPB",	0);
	set_cmt	(0X9694,	"DX = signature 4152h ('AR')\n for FAT32 extended BPB/DPB",	0);
	set_cmt	(0X969C,	"drive number (A=0, B=1 ..)",	0);
	create_insn	(x=0X96A1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X96A9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0X96B1,	"offset DPB.SECTOR_SIZE",	0);
	set_cmt	(0X96B6,	"number of FATs",	0);
	set_cmt	(0X96BC,	"DPB.FAT_COUNT",	0);
	set_cmt	(0X96C7,	"16 bit FAT size",	0);
	create_insn	(0X96C7);
	set_cmt	(0X96CD,	"FAT32 version (must be 0)",	0);
	create_insn	(x=0X96CD);
	op_dec		(x,	0);
	create_insn	(x=0X96DD);
	op_hex		(x,	1);
	create_insn	(x=0X96E3);
	op_hex		(x,	1);
	create_insn	(0X96E7);
	create_insn	(x=0X96EF);
	op_hex		(x,	1);
	create_insn	(x=0X9701);
	op_dec		(x,	0);
	create_insn	(x=0X9715);
	op_dec		(x,	1);
	create_insn	(x=0X9719);
	op_dec		(x,	0);
	create_insn	(x=0X973E);
	op_dec		(x,	0);
	create_insn	(x=0X9745);
	op_dec		(x,	1);
	create_insn	(x=0X9755);
	op_dec		(x,	0);
	create_insn	(x=0X9759);
	op_dec		(x,	1);
	create_insn	(x=0X9786);
	op_hex		(x,	1);
	create_insn	(x=0X9789);
	op_hex		(x,	1);
	create_insn	(x=0X978F);
	op_hex		(x,	1);
	create_insn	(x=0X979A);
	op_dec		(x,	0);
	create_insn	(x=0X97A7);
	op_dec		(x,	0);
	create_insn	(x=0X97B1);
	op_dec		(x,	0);
	create_insn	(x=0X97BA);
	op_dec		(x,	1);
	set_cmt	(0X97D6,	"DPB.FAT_SIZE",	0);
	create_insn	(x=0X97D6);
	op_dec		(x,	1);
	set_cmt	(0X97DE,	"FAT (except FAT32)",	0);
	set_cmt	(0X97E0,	"byte [DOSDATA+DriveNumber]",	0);
	set_cmt	(0X97E4,	"not FAT32",	0);
	set_cmt	(0X97E6,	"DPB.FAT32_SIZE",	0);
	create_insn	(x=0X97E6);
	op_dec		(x,	1);
	set_cmt	(0X97EB,	"DPB.SECTOR_SIZE",	0);
	create_insn	(x=0X97FD);
	op_hex		(x,	1);
	create_insn	(x=0X9809);
	op_hex		(x,	1);
	create_insn	(0X9816);
	create_insn	(x=0X9819);
	op_hex		(x,	1);
	create_insn	(x=0X981C);
	op_hex		(x,	1);
	set_cmt	(0X9836,	"DPB.FAT32_NXTFREE",	0);
	create_insn	(x=0X983C);
	op_dec		(x,	0);
	create_insn	(x=0X9845);
	op_dec		(x,	0);
	create_insn	(x=0X984B);
	op_dec		(x,	0);
	set_cmt	(0X9858,	"FAT32 ?",	0);
	create_insn	(x=0X9858);
	op_dec		(x,	0);
	set_cmt	(0X985D,	"no",	0);
	set_cmt	(0X985F,	"0 ; NON FAT (unknown) fs",	0);
	set_cmt	(0X9862,	"DPB.LAST_CLUSTER",	0);
	create_insn	(x=0X9862);
	op_dec		(x,	0);
	set_cmt	(0X9867,	"DPB.FAT_COUNT",	0);
	set_cmt	(0X986D,	"DPB.MAX_CLUSTER",	0);
	create_insn	(x=0X986D);
	op_dec		(x,	0);
	set_cmt	(0X9871,	"DPB.NEXT_FREE",	0);
	create_insn	(x=0X9871);
	op_dec		(x,	0);
	set_cmt	(0X9877,	"DPB.FREE_CNT",	0);
	create_insn	(x=0X9877);
	op_dec		(x,	0);
	create_insn	(x=0X987D);
	op_hex		(x,	1);
	set_name	(0X9881,	"setdpb_retn");
	create_insn	(0X9882);
	create_insn	(0X98A0);
	set_name	(0X98A0,	"function_2");
	create_insn	(0X98A3);
	set_name	(0X98A3,	"function_3");
	create_insn	(0X98B8);
	set_name	(0X98B8,	"$FAT32EXT");
	create_insn	(x=0X98CE);
	op_dec		(x,	1);
	set_cmt	(0X98D7,	"default/current drive",	0);
	create_insn	(x=0X98D7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X98DC,	"drv_lock_flush_1");
	create_insn	(x=0X98E5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X98F3);
	op_hex		(x,	1);
	create_insn	(x=0X98F6);
	op_hex		(x,	1);
	create_insn	(x=0X98FB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9900);
	op_hex		(x,	1);
	create_insn	(x=0X990C);
	op_hex		(x,	1);
	create_insn	(0X9911);
	create_insn	(x=0X9915);
	op_hex		(x,	1);
	create_insn	(x=0X9918);
	op_hex		(x,	1);
	create_insn	(x=0X991D);
	op_hex		(x,	1);
	create_insn	(x=0X9920);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9927);
	op_hex		(x,	1);
	create_insn	(0X9935);
	set_name	(0X9935,	"invalid_drive_number");
	create_insn	(0X993A);
	set_name	(0X993A,	"invalid_fat32_ext_func");
	create_insn	(0X993E);
	create_insn	(0X9942);
	set_name	(0X9942,	"function_5");
	create_insn	(x=0X9947);
	op_hex		(x,	1);
	create_insn	(x=0X9953);
	op_hex		(x,	1);
	create_insn	(0X995E);
	create_insn	(x=0X9966);
	op_hex		(x,	1);
	create_insn	(0X996E);
	set_name	(0X996E,	"function_4");
	create_insn	(0X9977);
	create_insn	(x=0X9982);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X9986);
	op_hex		(x,	1);
	create_insn	(x=0X9A10);
	op_hex		(x,	1);
	create_insn	(x=0X9A2A);
	op_hex		(x,	1);
	create_insn	(0X9A31);
	create_insn	(0X9A45);
	create_insn	(x=0X9A56);
	op_hex		(x,	1);
	create_insn	(x=0X9A6F);
	op_hex		(x,	1);
	create_insn	(x=0X9A7A);
	op_hex		(x,	1);
	create_insn	(x=0X9A82);
	op_hex		(x,	1);
	create_insn	(x=0X9A8A);
	op_hex		(x,	1);
	create_insn	(x=0X9A9A);
	op_hex		(x,	1);
	create_insn	(x=0X9AED);
	op_hex		(x,	1);
	create_insn	(x=0X9AF6);
	op_hex		(x,	1);
	create_insn	(x=0X9B19);
	op_hex		(x,	1);
	create_insn	(x=0X9B22);
	op_hex		(x,	1);
	create_insn	(0X9B4B);
	create_insn	(0X9B5F);
	create_insn	(x=0X9B61);
	op_hex		(x,	1);
	create_insn	(x=0X9B6B);
	op_hex		(x,	1);
	create_insn	(x=0X9B73);
	op_hex		(x,	1);
	create_insn	(0X9B7A);
	create_insn	(x=0X9BBF);
	op_hex		(x,	1);
	create_insn	(x=0X9BD7);
	op_hex		(x,	1);
	create_insn	(0X9BF9);
	set_name	(0X9BF9,	"$DUP_PDB");
	create_insn	(x=0X9BFE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9C03);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X9C0A);
	set_name	(0X9C0A,	"$CREATE_PROCESS_DATA_BLOCK");
	set_cmt	(0X9C10,	"[PDB.BLOCK_LEN]",	0);
	create_insn	(x=0X9C1A);
	op_dec		(x,	1);
	create_insn	(x=0X9C20);
	op_dec		(x,	1);
	set_cmt	(0X9C27,	"[PDB.JFN_Pointer]",	0);
	create_insn	(x=0X9C33);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9C58);
	op_hex		(x,	1);
	create_insn	(x=0X9C63);
	op_hex		(x,	1);
	create_insn	(x=0X9C6B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9C6F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9C84);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X9C8D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9C99);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X9CA0);
	set_name	(0X9CA0,	"SETMEM");
	create_insn	(0X9D1C);
	set_name	(0X9D1C,	"$GSetMediaID");
	set_name	(0X9D2A,	"doioctl");
	create_insn	(0X9D30);
	set_name	(0X9D30,	"errorfunc");
	create_insn	(0X9D35);
	set_name	(0X9D35,	"test_remote_disk_flag");
	set_name	(0X9D40,	"tstrdf_1");
	set_cmt	(0X9D43,	"'A','B','C'..",	0);
	set_cmt	(0X9D46,	"remote or nonDOS (nonFAT) fs \nor remote disk flag ?\n[bx+drive_flags-41h]",	0);
	create_insn	(x=0X9D46);
	op_hex		(x,	1);
	create_insn	(0X9D4D);
	set_name	(0X9D4D,	"StrCmp");
	create_insn	(0X9D6F);
	set_name	(0X9D6F,	"StrCpy");
	create_insn	(0X9D7E);
	set_name	(0X9D7E,	"FStrCpy");
	create_insn	(0X9D87);
	set_name	(0X9D87,	"StrLen");
	set_cmt	(0X9D89,	"-1 ; 0FFFFh",	0);
	create_insn	(x=0X9D89);
	op_dec		(x,	1);
	create_insn	(0X9D95);
	set_name	(0X9D95,	"DStrLen");
	create_insn	(0X9D9F);
	set_name	(0X9D9F,	"XCHGP");
	create_insn	(0X9DA6);
	set_name	(0X9DA6,	"TableDispatch");
	create_insn	(x=0X9DAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X9DB0);
	op_stkvar	(x,	0);
	create_insn	(x=0X9DB5);
	op_stkvar	(x,	1);
	create_insn	(x=0X9DBA);
	op_hex		(x,	1);
	create_insn	(x=0X9DBD);
	op_stkvar	(x,	1);
	create_insn	(x=0X9DC3);
	op_stkvar	(x,	0);
	create_insn	(x=0X9DC8);
	op_hex		(x,	1);
	create_insn	(0X9DCC);
	create_insn	(0X9DD1);
	set_name	(0X9DD1,	"TestNet");
	create_insn	(x=0X9DD6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X9DE0,	"test byte [ES:DI+curdir.flags+1],\n(curdir_isnet>>8)",	0);
	create_insn	(x=0X9DE0);
	op_hex		(x,	1);
	set_cmt	(0X9DF3,	"cf=0 (local disk ?)",	0);
	create_insn	(0X9DF4);
	set_cmt	(0X9DF5,	"cf=1",	0);
	set_cmt	(0X9DF6,	"[ES:DI+SF_ENTRY.sf_flags+1],\n(sf_isnet>>8)",	0);
	create_insn	(x=0X9DF6);
	op_hex		(x,	1);
	set_name	(0X9DF6,	"IsSFTNet");
	set_cmt	(0X9DFC,	"(not implemented)",	0);
	create_insn	(0X9DFC);
	set_name	(0X9DFC,	"FastInit");
	create_insn	(0X9DFE);
	set_name	(0X9DFE,	"FastRet");
	set_cmt	(0X9DFF,	"AX = -1, CF = 1",	0);
	create_insn	(0X9E02);
	set_name	(0X9E02,	"NLS_OPEN");
	create_insn	(x=0X9E08);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X9E08,	"NLS_LSEEK");
	create_insn	(x=0X9E0D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9E1A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9E1F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X9E25,	"replace with INT 2Fh stack",	0);
	create_insn	(x=0X9E25);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X9E25,	"Fake_User_Stack");
	create_insn	(x=0X9E29);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9E2F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9E34);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X9E34,	"GetDevList");
	set_cmt	(0X9E3E,	"[SI+SYSI.DEV]",	0);
	set_cmt	(0X9E41,	"[SI+SYSI.DEV+2]",	0);
	create_insn	(x=0X9E45);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X9E45,	"NLS_IOCTL");
	create_insn	(x=0X9E4A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X9E52,	"set up correct interface for $IOCTL",	0);
	create_insn	(x=0X9E57);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9E5C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X9E62,	"return extended error",	0);
	create_insn	(x=0X9E62);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X9E62,	"NLS_GETEXT");
	create_insn	(0X9E67);
	set_name	(0X9E67,	"MSG_RETRIEVAL");
	create_insn	(0X9E68);
	set_name	(0X9E68,	"ECritDisk");
	create_insn	(x=0X9E6C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9E73);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X9E7D,	"Microsoft Networks - BEGIN DOS CRITICAL SECTION\nAL = critical section number (00h-0Fh)",	0);
	create_insn	(x=0X9E7D);
	op_hex		(x,	0);
	create_insn	(0X9E82);
	set_name	(0X9E82,	"ECritDisk_2");
	create_insn	(x=0X9E83);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9E8A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X9E8F,	"ECritDisk_3");
	create_insn	(0X9E92);
	create_insn	(x=0X9E94);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X9E9B);
	set_name	(0X9E9B,	"ECritCharDev");
	create_insn	(x=0X9E9F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X9EA8);
	set_name	(0X9EA8,	"ECritDevice");
	create_insn	(x=0X9EAC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9EB3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X9EB3,	"ECritDev_1");
	set_cmt	(0X9EBD,	"Microsoft Networks - BEGIN DOS CRITICAL SECTION\nAL = critical section number (00h-0Fh)",	0);
	create_insn	(x=0X9EBD);
	op_hex		(x,	0);
	create_insn	(0X9EC2);
	set_name	(0X9EC2,	"LCritDisk");
	create_insn	(x=0X9EC6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9ECD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X9ED7,	"Microsoft Networks - END DOS CRITICAL SECTION\nAL = critical section number (00h-0Fh)",	0);
	create_insn	(x=0X9ED7);
	op_hex		(x,	0);
	create_insn	(0X9EDC);
	set_name	(0X9EDC,	"LCritDisk_2");
	create_insn	(x=0X9EDD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9EE4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9EEB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X9EF3);
	set_name	(0X9EF3,	"LCritDisk_4");
	create_insn	(x=0X9EF7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X9F00);
	set_name	(0X9F00,	"LCritDevice");
	create_insn	(x=0X9F04);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9F0B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X9F0B,	"LCrit_Dev1");
	set_cmt	(0X9F15,	"Microsoft Networks - END DOS CRITICAL SECTION\nAL = critical section number (00h-0Fh)",	0);
	create_insn	(x=0X9F15);
	op_hex		(x,	0);
	create_insn	(0X9F1A);
	create_insn	(x=0X9F1B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X9F22,	"count of critical sessions = 0",	0);
	create_insn	(x=0X9F22);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X9F29);
	set_name	(0X9F29,	"end_critical_section");
	create_insn	(x=0X9F2D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9F34);
	op_hex		(x,	1);
	set_cmt	(0X9F36,	"Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7",	0);
	create_insn	(x=0X9F36);
	op_hex		(x,	0);
	create_insn	(0X9F3B);
	set_name	(0X9F3B,	"$STD_CON_INPUT_NO_ECHO");
	create_insn	(x=0X9F50);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X9F62,	"- Multiplex - MS WINDOWS - Win95 - CLOSE-AWARENESS - QUERY CLOSE\nReturn: AX - status",	0);
	create_insn	(x=0X9F62);
	op_hex		(x,	0);
	create_insn	(x=0X9F68);
	op_hex		(x,	1);
	set_cmt	(0X9F6A,	"Microsoft Networks - KEYBOARD BUSY LOOP",	0);
	create_insn	(x=0X9F6A);
	op_hex		(x,	0);
	create_insn	(x=0X9F6C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9F8B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X9F92);
	create_insn	(0X9F99);
	create_insn	(0X9F9C);
	create_insn	(x=0X9FA4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9FAE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X9FB4,	"noscan");
	create_insn	(0X9FB5);
	set_name	(0X9FB5,	"$STD_CON_STRING_OUTPUT");
	set_name	(0X9FB7,	"NEXT_STR1");
	create_insn	(x=0X9FB8);
	op_chr		(x,	1);
	create_insn	(0X9FC1);
	set_name	(0X9FC1,	"$STD_CON_STRING_INPUT");
	create_insn	(x=0X9FE0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X9FE0,	"NEWLIN");
	create_insn	(x=0X9FE4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X9FE9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X9FEC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X9FFC,	"GETCH");
	set_cmt	(0XA006,	"- Multiplex - MS WINDOWS - Win95 - CLOSE-AWARENESS - QUERY CLOSE\nReturn: AX - status",	0);
	create_insn	(x=0XA006);
	op_hex		(x,	0);
	create_insn	(x=0XA019);
	op_hex		(x,	1);
	set_name	(0XA038,	"SAVCH");
	create_insn	(x=0XA042);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA053);
	create_insn	(0XA055);
	create_insn	(0XA05C);
	create_insn	(x=0XA05F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XA070);
	set_name	(0XA070,	"COPYNEW");
	create_insn	(x=0XA074);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XA07C);
	create_insn	(0XA082);
	set_name	(0XA082,	"LineDel");
	create_insn	(0XA08D);
	set_name	(0XA08D,	"WordDel");
	create_insn	(x=0XA0A0);
	op_hex		(x,	1);
	set_name	(0XA0AA,	"GetChj");
	create_insn	(0XA0AD);
	set_name	(0XA0AD,	"KILNEW");
	create_insn	(x=0XA0B6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XA0C0);
	set_name	(0XA0C0,	"BACKSP");
	create_insn	(0XA0C6);
	set_name	(0XA0C6,	"BackSpace");
	create_insn	(x=0XA0E3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA0EC);
	create_insn	(0XA0F4);
	create_insn	(x=0XA10E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA117);
	op_hex		(x,	1);
	create_insn	(0XA126);
	set_name	(0XA126,	"BACKUP");
	create_insn	(0XA129);
	set_name	(0XA129,	"BACKMES");
	create_insn	(0XA138);
	set_name	(0XA138,	"TWOESC");
	create_insn	(0XA13F);
	set_name	(0XA13F,	"COPYLIN");
	create_insn	(0XA145);
	set_name	(0XA145,	"COPYSTR");
	create_insn	(0XA14A);
	set_name	(0XA14A,	"COPYONE");
	create_insn	(x=0XA14C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA168);
	set_name	(0XA168,	"SKIPONE");
	create_insn	(0XA172);
	set_name	(0XA172,	"SKIPSTR");
	create_insn	(0XA17C);
	set_name	(0XA17C,	"FINDOLD");
	create_insn	(0XA18B);
	set_name	(0XA1A7,	"FINDOLD_RETN");
	create_insn	(0XA1A8);
	create_insn	(0XA1AC);
	set_name	(0XA1AC,	"REEDIT");
	set_cmt	(0XA1C0,	"EXITINS",	0);
	create_insn	(x=0XA1C0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XA1C0,	"ENTERINS");
	create_insn	(0XA1C8);
	set_name	(0XA1C8,	"CTRLZ");
	create_insn	(0XA1CD);
	set_name	(0XA1CD,	"CRLF");
	create_insn	(0XA1D7);
	set_name	(0XA1D7,	"$RAW_CON_IO");
	create_insn	(x=0XA1DD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA1F3);
	op_hex		(x,	1);
	set_name	(0XA1FA,	"RET17");
	create_insn	(x=0XA1FB);
	op_hex		(x,	1);
	set_name	(0XA1FB,	"RESFLG");
	set_name	(0XA200,	"rci0");
	set_name	(0XA203,	"$RAW_CON_INPUT");
	create_insn	(x=0XA213);
	op_hex		(x,	1);
	set_cmt	(0XA215,	"Microsoft Networks - KEYBOARD BUSY LOOP",	0);
	create_insn	(x=0XA215);
	op_hex		(x,	0);
	create_insn	(0XA219);
	set_name	(0XA219,	"rci5");
	create_insn	(0XA21F);
	set_name	(0XA21F,	"RAWOUT");
	create_insn	(x=0XA22B);
	op_hex		(x,	1);
	create_insn	(x=0XA22F);
	op_hex		(x,	1);
	create_insn	(x=0XA239);
	op_hex		(x,	1);
	set_cmt	(0XA247,	"call far [29h*4]",	0);
	set_name	(0XA24E,	"RAWRET2");
	create_insn	(0XA24F);
	create_insn	(0XA254);
	set_name	(0XA254,	"RAWOUT2");
	create_insn	(0XA259);
	set_name	(0XA259,	"RAWOUT3");
	create_insn	(0XA25C);
	create_insn	(x=0XA25F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0XA27D);
	set_name	(0XA27D,	"Save_Restore_Packet");
	create_insn	(x=0XA286);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XA289,	"DEVCALL",	0);
	create_insn	(x=0XA289);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA28E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA291);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA29A);
	op_dec		(x,	1);
	create_insn	(0XA2A4);
	set_name	(0XA2A4,	"$STD_CON_INPUT");
	create_insn	(0XA2AC);
	set_name	(0XA2AC,	"CON_INPUT_RETN");
	create_insn	(0XA2AD);
	set_name	(0XA2AD,	"$STD_CON_OUTPUT");
	create_insn	(0XA2AF);
	set_name	(0XA2AF,	"OUTT");
	create_insn	(x=0XA2B3);
	op_hex		(x,	1);
	create_insn	(x=0XA2B7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA2BE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA2C3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XA2D7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XA2ED);
	op_hex		(x,	1);
	create_insn	(x=0XA2F2);
	op_hex		(x,	1);
	create_insn	(x=0XA2FF);
	op_hex		(x,	1);
	create_insn	(x=0XA305);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA30E);
	create_insn	(0XA311);
	create_insn	(x=0XA31D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA321);
	op_hex		(x,	1);
	create_insn	(0XA325);
	set_name	(0XA325,	"TAB");
	create_insn	(x=0XA335);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA33E);
	set_name	(0XA33E,	"j_OUTT");
	create_insn	(x=0XA341);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA349);
	set_name	(0XA349,	"BUFOUT");
	create_insn	(x=0XA360);
	op_hex		(x,	1);
	set_name	(0XA365,	"BUFOUT_RETN");
	create_insn	(0XA366);
	set_name	(0XA366,	"$STD_AUX_INPUT");
	create_insn	(0XA375);
	set_name	(0XA375,	"AUXILP");
	set_name	(0XA378,	"TAISTRT");
	create_insn	(0XA385);
	set_name	(0XA385,	"$STD_AUX_OUTPUT");
	create_insn	(0XA38B);
	set_name	(0XA38B,	"$STD_PRINTER_OUTPUT");
	set_name	(0XA38F,	"SENDOUT");
	set_name	(0XA3A0,	"SCIS_RETN");
	create_insn	(0XA3A1);
	set_name	(0XA3A1,	"$STD_CON_INPUT_STATUS");
	create_insn	(x=0XA3AA);
	op_hex		(x,	1);
	create_insn	(0XA3AD);
	set_name	(0XA3AD,	"$STD_CON_INPUT_FLUSH");
	set_name	(0XA3BB,	"BADJFNCON");
	create_insn	(0XA3D6);
	set_name	(0XA3D6,	"REDISPJ");
	set_cmt	(0XA3DA,	"error_invalid_function",	0);
	create_insn	(0XA3DA);
	set_name	(0XA3DA,	"$GET_FCB_POSITION");
	set_name	(0XA3DC,	"_fcb_err");
	create_insn	(x=0XA3DF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA3DF,	"$FCB_DELETE");
	set_cmt	(0XA3EE,	"jmp FCB_RET_OK",	0);
	set_name	(0XA3EE,	"GetFCBBye");
	create_insn	(0XA3F1);
	set_name	(0XA3F1,	"BadPath");
	set_cmt	(0XA3F3,	"error_invalid_function",	0);
	create_insn	(0XA3F3);
	set_name	(0XA3F3,	"$GET_FCB_FILE_LENGTH");
	create_insn	(0XA3F7);
	set_name	(0XA3F7,	"GoodRet");
	create_insn	(0XA3F9);
	set_name	(0XA3F9,	"$FCB_CLOSE");
	create_insn	(x=0XA403);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XA403,	"NoAttr");
	create_insn	(x=0XA413);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA437);
	op_hex		(x,	1);
	create_insn	(x=0XA442);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA459,	"CloseOK");
	set_name	(0XA462,	"fcb_close_err");
	create_insn	(0XA465);
	set_name	(0XA465,	"$FCB_RENAME");
	create_insn	(x=0XA46A);
	op_hex		(x,	1);
	create_insn	(x=0XA476);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA48B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA490);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA495);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XA49D,	"DIRSTRLEN = 67",	0);
	create_insn	(x=0XA49D);
	op_dec		(x,	1);
	create_insn	(0XA4AC);
	set_name	(0XA4AC,	"fb_rename_err");
	create_insn	(x=0XA4AE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA4AE,	"SaveFCBInfo");
	create_insn	(x=0XA4BF);
	op_hex		(x,	1);
	create_insn	(x=0XA4C3);
	op_hex		(x,	1);
	create_insn	(x=0XA4DB);
	op_hex		(x,	1);
	create_insn	(x=0XA4DD);
	op_hex		(x,	1);
	create_insn	(x=0XA4E1);
	op_hex		(x,	1);
	set_cmt	(0XA4F0,	"[es:di+SF_ENTRY.sf_chain] ; .sf_chain ! (MSDOS 6.22)\nfirst cluster (32 bit) !?",	0);
	set_cmt	(0XA4F4,	"[SI+fcb_nsl_firclus]",	0);
	create_insn	(x=0XA4FD);
	op_hex		(x,	1);
	create_insn	(0XA50C);
	create_insn	(x=0XA51A);
	op_hex		(x,	1);
	create_insn	(0XA51E);
	set_cmt	(0XA527,	"SF_ENTRY.size",	0);
	create_insn	(x=0XA527);
	op_dec		(x,	1);
	create_insn	(x=0XA533);
	op_hex		(x,	1);
	create_insn	(x=0XA54B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA550);
	set_name	(0XA550,	"ResetLRU");
	create_insn	(x=0XA555);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XA569,	"SF_ENTRY.size",	0);
	create_insn	(x=0XA569);
	op_dec		(x,	1);
	create_insn	(0XA574);
	set_name	(0XA574,	"LRUFCB");
	create_insn	(x=0XA581);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA585);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA58B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA58F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA593);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA59B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA5AF);
	op_hex		(x,	1);
	create_insn	(x=0XA5BB);
	op_hex		(x,	1);
	create_insn	(x=0XA5C3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA5C7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA5DB);
	op_dec		(x,	1);
	create_insn	(0XA5F0);
	create_insn	(0XA5FE);
	create_insn	(x=0XA604);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA60A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA613);
	create_insn	(x=0XA615);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA618);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA61E);
	create_insn	(x=0XA622);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA626);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA62A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA62E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XA63D,	"error_invalid_handle",	0);
	create_insn	(0XA644);
	create_insn	(x=0XA652);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XA65A,	"error_FCB_unavailable",	0);
	create_insn	(x=0XA65A);
	op_hex		(x,	1);
	create_insn	(0XA65D);
	set_name	(0XA65D,	"RegenCopyName");
	create_insn	(0XA665);
	set_name	(0XA665,	"FCBRegen");
	create_insn	(x=0XA668);
	op_hex		(x,	1);
	set_cmt	(0XA66F,	"Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK\nReturn: AL = 00h  not installed, OK to install\n01h  not installed, not OK to install\nFFh  installed",	0);
	create_insn	(x=0XA66F);
	op_hex		(x,	0);
	create_insn	(x=0XA675);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XA683);
	create_insn	(x=0XA692);
	op_hex		(x,	1);
	create_insn	(x=0XA695);
	op_hex		(x,	1);
	create_insn	(x=0XA69D);
	op_hex		(x,	1);
	create_insn	(x=0XA6A2);
	op_hex		(x,	1);
	create_insn	(x=0XA6AD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA6BB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA6C7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA6DE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XA6EC);
	create_insn	(0XA6F0);
	create_insn	(x=0XA6F4);
	op_hex		(x,	1);
	create_insn	(x=0XA712);
	op_hex		(x,	1);
	create_insn	(x=0XA716);
	op_hex		(x,	1);
	create_insn	(x=0XA718);
	op_hex		(x,	1);
	create_insn	(x=0XA71C);
	op_hex		(x,	1);
	create_insn	(x=0XA725);
	op_hex		(x,	1);
	create_insn	(x=0XA755);
	op_dec		(x,	1);
	create_insn	(0XA75D);
	set_name	(0XA75D,	"BlastSFT");
	create_insn	(x=0XA761);
	op_dec		(x,	1);
	create_insn	(x=0XA778);
	op_hex		(x,	1);
	set_name	(0XA778,	"CheckFCB");
	create_insn	(x=0XA77E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XA789,	"SF_ENTRY.size",	0);
	create_insn	(x=0XA789);
	op_dec		(x,	1);
	set_cmt	(0XA78D,	"[DI+SFT.SFTable]",	0);
	create_insn	(x=0XA792);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA7A5);
	op_hex		(x,	1);
	create_insn	(x=0XA7AA);
	op_hex		(x,	1);
	create_insn	(x=0XA7AC);
	op_hex		(x,	1);
	create_insn	(x=0XA7B1);
	op_hex		(x,	1);
	create_insn	(x=0XA7B7);
	op_hex		(x,	1);
	set_name	(0XA7BE,	"CheckD_retn");
	create_insn	(0XA7BF);
	create_insn	(0XA7C1);
	create_insn	(0XA7CB);
	create_insn	(0XA7DF);
	set_name	(0XA7DF,	"SFTFromFCB");
	create_insn	(x=0XA7E9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA7EE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA7FE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA804);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA809);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XA813);
	set_name	(0XA813,	"FCBHardErr");
	set_cmt	(0XA818,	"error_FCB_unavailable",	0);
	create_insn	(x=0XA818);
	op_hex		(x,	1);
	set_cmt	(0XA81B,	"Allowed_FAIL",	0);
	create_insn	(x=0XA81B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA821);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XA826,	"Fake some registers",	0);
	set_cmt	(0XA82B,	"[es:bp+DPB.FAT_SIZE]",	0);
	create_insn	(x=0XA832);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XA839,	"[ES:BP+DPB.FIRST_SECTOR]",	0);
	set_cmt	(0XA83F,	"[es:bp+DPB.FCLUS_FSECTOR+2]",	0);
	create_insn	(0XA83F);
	create_insn	(x=0XA843);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XA848,	"[es:bp+DPB.FCLUS_FSECTOR]",	0);
	create_insn	(0XA851);
	set_name	(0XA851,	"GetExtended");
	create_insn	(0XA85E);
	set_name	(0XA85E,	"$FCB_OPEN");
	create_insn	(x=0XA861);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_name	(0XA864,	"DoAccess");
	create_insn	(x=0XA868);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA874,	"FCBOpenErr");
	create_insn	(0XA877);
	set_name	(0XA877,	"FindFCB");
	create_insn	(x=0XA895);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA89C,	"failopen");
	set_cmt	(0XA89D,	"clear out field (free sft)",	0);
	set_cmt	(0XA8A3,	"error_too_many_open_files",	0);
	set_cmt	(0XA8A8,	"error_sharing_buffer_exceeded",	0);
	create_insn	(x=0XA8A8);
	op_hex		(x,	1);
	set_name	(0XA8AD,	"HardMessage");
	set_name	(0XA8B2,	"DeadFCB");
	create_insn	(0XA8B4);
	set_name	(0XA8B4,	"FCBOK");
	create_insn	(x=0XA8B9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA8BE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XA8C3,	"[es:di+SFTENTRY.sf_flags],\ndevid_device",	0);
	create_insn	(x=0XA8C3);
	op_hex		(x,	1);
	set_cmt	(0XA8CA,	"[es:di+SFTENTRY.sf_attr],\nattr_volume_id",	0);
	create_insn	(x=0XA8CA);
	op_hex		(x,	1);
	set_cmt	(0XA8D1,	"error_invalid_function",	0);
	create_insn	(0XA8D6);
	set_name	(0XA8D6,	"FCBOK2");
	create_insn	(x=0XA8DF);
	op_hex		(x,	1);
	create_insn	(x=0XA8EF);
	op_hex		(x,	1);
	set_name	(0XA8EF,	"FCBNoDrive");
	create_insn	(x=0XA915);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA91E,	"OpenScan");
	set_name	(0XA92A,	"SkipCheck");
	set_name	(0XA930,	"OpenDone");
	create_insn	(0XA933);
	set_name	(0XA933,	"OpenFound");
	create_insn	(x=0XA93C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA946);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA954);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_name	(0XA954,	"$FCB_CREATE");
	create_insn	(0XA966);
	set_name	(0XA966,	"$FCB_RANDOM_WRITE_BLOCK");
	create_insn	(0XA96B);
	set_name	(0XA96B,	"$FCB_RANDOM_READ_BLOCK");
	create_insn	(0XA96D);
	set_name	(0XA96D,	"$FCB_SEQ_READ");
	create_insn	(0XA96F);
	set_name	(0XA96F,	"$FCB_SEQ_WRITE");
	create_insn	(0XA971);
	set_name	(0XA971,	"$FCB_RANDOM_READ");
	create_insn	(0XA973);
	set_name	(0XA973,	"$FCB_RANDOM_WRITE");
	create_insn	(x=0XA975);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XA975,	"$DIR_SEARCH_FIRST");
	create_insn	(x=0XA97A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XA989,	"NORMFCB4");
	create_insn	(x=0XA98D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA996,	"dcf_errj");
	create_insn	(0XA999);
	set_name	(0XA999,	"SearchIt");
	create_insn	(x=0XA99B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA9A0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA9A6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA9AD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XA9B7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA9B7,	"SearchSet");
	create_insn	(x=0XA9BA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA9BE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XA9C8,	"NORMFCB1");
	create_insn	(x=0XA9CD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA9D3,	"SearchDrv");
	create_insn	(x=0XA9DF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XA9E3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XA9F4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XA9F8,	"NORMFCB2");
	create_insn	(x=0XA9FB);
	op_dec		(x,	1);
	create_insn	(x=0XAA03);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XAA03,	"$DIR_SEARCH_NEXT");
	create_insn	(x=0XAA08);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA0D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA13);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA1B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAA29);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA2D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XAA32,	"NORMFCB6");
	create_insn	(x=0XAA38);
	op_dec		(x,	1);
	create_insn	(x=0XAA3F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA44);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAA4A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA51);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA5B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XAA5B,	"SearchNoMore");
	create_insn	(x=0XAA5F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XAA69,	"NORMFCB8");
	create_insn	(0XAA70);
	set_name	(0XAA70,	"$FIND_FIRST");
	create_insn	(x=0XAA72);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA77);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XAA81,	"FF_err");
	create_insn	(0XAA84);
	set_name	(0XAA84,	"Find_it");
	create_insn	(x=0XAA86);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA8B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAA91);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAA98);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XAA9F,	"FF_errj");
	create_insn	(x=0XAAA1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XAAA1,	"FindSet");
	create_insn	(x=0XAAA4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAAA8);
	op_dec		(x,	1);
	create_insn	(x=0XAAAE);
	op_dec		(x,	1);
	create_insn	(x=0XAAB2);
	op_dec		(x,	1);
	create_insn	(0XAAC2);
	set_name	(0XAAC2,	"$FIND_NEXT");
	create_insn	(x=0XAAC4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAAC7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAACC);
	op_dec		(x,	1);
	create_insn	(x=0XAAD3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAAD8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAADE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAAE5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XAAEE);
	set_name	(0XAAEE,	"PackName");
	create_insn	(0XAB1F);
	create_insn	(0XAB23);
	set_name	(0XAB23,	"$CURRENT_DIR");
	set_name	(0XAB2D,	"CurdirErr");
	create_insn	(x=0XAB36);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XAB3D);
	set_name	(0XAB3D,	"CurrentValidate");
	create_insn	(x=0XAB44);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAB49);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XAB57,	"[SI+curdir.end]",	0);
	set_cmt	(0XAB5D,	"root or subdirs present?",	0);
	set_name	(0XAB63,	"CurrentCopy");
	create_insn	(0XAB6F);
	set_name	(0XAB6F,	"FCPYNEXT");
	set_name	(0XAB70,	"FFF");
	create_insn	(x=0XAB7A);
	op_hex		(x,	1);
	set_name	(0XAB7A,	"FCHANGE");
	set_name	(0XAB7C,	"FOK");
	create_insn	(0XAB8A);
	set_name	(0XAB8A,	"$RMDIR");
	create_insn	(x=0XAB8E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XAB9A,	"error_path_not_found",	0);
	set_name	(0XAB9C,	"rmdir_chdir_errj");
	create_insn	(x=0XAB9F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XAB9F,	"rmlset");
	set_name	(0XABAB,	"rmloop");
	create_insn	(0XABB9);
	set_name	(0XABB9,	"rmerr");
	set_cmt	(0XABBB,	"error_current_directory",	0);
	set_name	(0XABBD,	"rmdir_chdir_errj2");
	create_insn	(0XABBF);
	set_name	(0XABBF,	"rmcont");
	create_insn	(x=0XABC1);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XABC4);
	op_dec		(x,	1);
	create_insn	(x=0XABCE);
	op_dec		(x,	1);
	set_name	(0XABCE,	"$CHDIR");
	create_insn	(x=0XABD5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XABDF,	"ChDirErrP");
	set_name	(0XABE1,	"chdir_errj");
	create_insn	(x=0XABE3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XABE3,	"ChDirCrack");
	create_insn	(x=0XABEA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XABF8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XABFC,	"\n[ES:DI+curdir.flags],curdir_splice",	0);
	create_insn	(x=0XABFC);
	op_hex		(x,	1);
	create_insn	(x=0XAC02);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAC0A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XAC12,	"[SI+user_env.user_DX]",	0);
	set_cmt	(0XAC15,	"[SI+user_env.user_DS]",	0);
	create_insn	(x=0XAC18);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAC24);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XAC28,	"[ES:DI+curdir.ID]",	0);
	set_name	(0XAC35,	"GotCDS");
	set_cmt	(0XAC3A,	"[ES:DI+curdir.flags],\ncurdir_isnet",	0);
	create_insn	(x=0XAC3A);
	op_hex		(x,	1);
	set_cmt	(0XAC47,	"[ES:DI+curdir.flags],\ncurdir_splice",	0);
	create_insn	(x=0XAC47);
	op_hex		(x,	1);
	set_cmt	(0XAC54,	"[ES:DI+curdir.ID]",	0);
	set_name	(0XAC54,	"setdirclus");
	set_cmt	(0XAC58,	"[ES:DI+curdir.ID+2]",	0);
	create_insn	(x=0XAC5C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XAC60,	"SkipRecency");
	create_insn	(x=0XAC68);
	op_dec		(x,	1);
	set_name	(0XAC68,	"$MKDIR");
	create_insn	(x=0XAC6F);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XAC72);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XAC72,	"DoDirCall");
	create_insn	(x=0XAC83);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XAC96);
	create_insn	(x=0XAC9C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XAC9C,	"Check_PathLen");
	create_insn	(0XACA1);
	set_name	(0XACA1,	"Check_PathLen2");
	create_word	(x=0XACB0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0XACB0,	"IOCTLJMPTABLE");
	create_word	(x=0XACB2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACB4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACB6);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACB8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACBA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACBC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACBE);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACC0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACC2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACC4);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACC6);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACC8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACCA);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACCC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_word	(x=0XACCE);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XACD0,	"query_handle_support",	0);
	create_word	(x=0XACD0);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XACD2,	"query_device_support",	0);
	create_word	(x=0XACD2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0XACD4);
	set_name	(0XACD4,	"$IOCTL");
	create_insn	(x=0XACDF);
	op_hex		(x,	1);
	create_insn	(x=0XACE1);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0XACE6);
	create_insn	(0XACE9);
	set_name	(0XACE9,	"ioctl_getset_data");
	create_insn	(0XACF3);
	create_insn	(x=0XAD03);
	op_hex		(x,	1);
	create_insn	(x=0XAD07);
	op_hex		(x,	1);
	create_insn	(x=0XAD0A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAD16);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAD1D);
	op_hex		(x,	1);
	create_insn	(x=0XAD21);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XAD38);
	set_name	(0XAD38,	"ioctl_control_string");
	create_insn	(x=0XAD3D);
	op_hex		(x,	1);
	create_insn	(x=0XAD44);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XAD52);
	set_name	(0XAD52,	"ioctl_status");
	create_insn	(0XAD63);
	create_insn	(x=0XAD70);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XAD70,	"Set_Retry_Parameters");
	create_insn	(x=0XAD7A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_byte	(0XAD80);
	create_insn	(0XAD81);
	set_name	(0XAD81,	"GENERICIOCTLHANDLE");
	set_cmt	(0XAD88,	"[ES:DI+SF_ENTRY.sf_flags+1],\n(sf_isnet>>8)",	0);
	create_insn	(x=0XAD88);
	op_hex		(x,	1);
	set_cmt	(0XAD91,	"invalidate drive number\n(for extended -lock/unlock- functions)",	0);
	create_insn	(x=0XAD97);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XADA2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XADA2,	"GENERICIOCTL");
	set_cmt	(0XADA7,	"category (extended, disk lock/unlock)",	0);
	create_insn	(x=0XADA7);
	op_hex		(x,	1);
	set_cmt	(0XADAC,	"IOC_DC ; category (disk control, normal)",	0);
	set_cmt	(0XADB3,	"drive number",	0);
	set_cmt	(0XADBF,	"category code 48h for FAT32",	0);
	create_insn	(x=0XADBF);
	op_hex		(x,	1);
	set_cmt	(0XADC2,	"MSDOS/PCDOS 7 functions (lock/unlock)",	0);
	set_cmt	(0XADC7,	"MSDOS 5-6.22 functions",	0);
	set_cmt	(0XADC9,	"LOCK LOGICAL VOLUME",	0);
	create_insn	(x=0XADC9);
	op_hex		(x,	1);
	set_cmt	(0XADCE,	"UNLOCK LOGICAL VOLUME",	0);
	create_insn	(x=0XADCE);
	op_hex		(x,	1);
	create_insn	(0XADD5);
	set_cmt	(0XADD9,	"lock level (0-4)",	0);
	set_cmt	(0XADE7,	"logical disk number limit",	0);
	create_insn	(x=0XADE7);
	op_dec		(x,	1);
	create_insn	(x=0XADEE);
	op_hex		(x,	1);
	set_cmt	(0XADF3,	"UNLOCK",	0);
	create_insn	(x=0XADF3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XADFA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XADFF,	"LOCK",	0);
	set_cmt	(0XAE02,	"GET_MEDIA_ID",	0);
	create_insn	(0XAE02);
	set_cmt	(0XAE08,	"SET_MEDIA_ID",	0);
	create_insn	(x=0XAE13);
	op_hex		(x,	1);
	set_cmt	(0XAE19,	"get/set volume serial number",	0);
	create_insn	(x=0XAE1B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XAE1F,	"DPB",	0);
	set_cmt	(0XAE22,	"[si+DPB.FAT_SIZE]",	0);
	set_cmt	(0XAE28,	"SET_MEDIA_ID",	0);
	create_insn	(x=0XAE28);
	op_hex		(x,	1);
	set_cmt	(0XAE35,	"'FAT3'   ; 'FAT32   '",	0);
	set_cmt	(0XAE3F,	"'2   '",	0);
	set_cmt	(0XAE49,	"change category code to extended (FAT32 function)",	0);
	create_insn	(x=0XAE49);
	op_hex		(x,	1);
	create_insn	(x=0XAE4D);
	op_hex		(x,	1);
	create_insn	(x=0XAE54);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAE5D);
	op_hex		(x,	1);
	create_insn	(x=0XAE64);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XAE6B,	"IOCTL_REQ.size ; 23",	0);
	create_insn	(x=0XAE6B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAE70);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XAE74,	"[IOCALL+IOCTL_REQ.MAJORFUNCTION]",	0);
	create_insn	(x=0XAE74);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XAE78,	"[IOCALL+IOCTL_REQ.MINORFUNCTION]",	0);
	create_insn	(x=0XAE78);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XAE7C,	"[IOCALL+IOCTL_REQ.REG_SI]",	0);
	create_insn	(x=0XAE7C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XAE80,	"[IOCALL+IOCTL_REQ.REG_DI]",	0);
	create_insn	(x=0XAE80);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XAE84,	"[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET]",	0);
	create_insn	(x=0XAE84);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XAE88,	"[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2]",	0);
	create_insn	(x=0XAE88);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAE8C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XAE96);
	set_name	(0XAE96,	"ioctl_bad_fun");
	create_insn	(0XAE9B);
	create_insn	(0XAE9E);
	set_name	(0XAE9E,	"ioctl_rem_media");
	create_insn	(x=0XAEA5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAEAE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XAEB5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XAEBC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XAEC1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XAECE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XAED3,	"drive letter ('A','B','C', ..)",	0);
	set_cmt	(0XAED8,	"[bx+drive_flags-41h]",	0);
	create_insn	(x=0XAED8);
	op_hex		(x,	1);
	create_insn	(x=0XAEDF);
	op_hex		(x,	1);
	create_insn	(x=0XAEE4);
	op_hex		(x,	1);
	create_insn	(x=0XAEEB);
	op_hex		(x,	1);
	create_insn	(x=0XAEF2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAEFC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAF02);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAF0C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAF16);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAF1A);
	op_hex		(x,	1);
	create_insn	(0XAF24);
	set_name	(0XAF24,	"ioctl_drive_attr");
	set_cmt	(0XAF33,	"NET device",	0);
	create_insn	(x=0XAF3B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAF3F);
	op_hex		(x,	1);
	create_insn	(x=0XAF49);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XAF5A,	"Microsoft Networks - CHECK DIRECT I/O\nDS:SI -> ASCIZ disk device name (may be full path or only drive\nspecifier--must include the colon)\nReturn: CF clear if absolute disk access allowed",	0);
	create_insn	(x=0XAF5A);
	op_hex		(x,	0);
	create_insn	(x=0XAF5E);
	op_hex		(x,	1);
	create_insn	(x=0XAF62);
	op_hex		(x,	1);
	create_insn	(x=0XAF69);
	op_hex		(x,	1);
	create_insn	(0XAF75);
	set_name	(0XAF75,	"ioctl_drv_err");
	create_insn	(0XAF7A);
	set_name	(0XAF7A,	"ioctl_handle_redir");
	create_insn	(0XAF82);
	create_insn	(0XAF88);
	create_insn	(0XAF8B);
	set_name	(0XAF8B,	"ioctl_get_dev");
	create_insn	(x=0XAF92);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XAF9A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XAFA1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XAFA8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XAFAD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XAFBA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XAFBE,	"drive letter ('A','B','C', ..)",	0);
	set_cmt	(0XAFC3,	"[bx+drive_flags-65] ; 65 = 'A'\nbx = 65 + drive number ('A'=0)",	0);
	create_insn	(x=0XAFC3);
	op_hex		(x,	1);
	set_cmt	(0XAFCA,	"not 20h",	0);
	create_insn	(x=0XAFCA);
	op_hex		(x,	1);
	create_insn	(x=0XAFCF);
	op_hex		(x,	1);
	create_insn	(x=0XAFD6);
	op_hex		(x,	1);
	create_insn	(x=0XAFDD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAFE2);
	op_hex		(x,	1);
	create_insn	(x=0XAFE6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAFEB);
	op_dec		(x,	1);
	create_insn	(x=0XAFEF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAFF4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAFF7);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(x=0XAFFA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XAFFE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB002);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB00C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB012);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB01A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB021);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XB021,	"ioctl_string_err");
	create_insn	(x=0XB026);
	op_hex		(x,	1);
	create_insn	(x=0XB02F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB036);
	set_name	(0XB036,	"Get_Driver_BL");
	create_insn	(x=0XB040);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB045);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB049);
	op_hex		(x,	1);
	create_insn	(x=0XB054);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB061);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB071);
	set_name	(0XB071,	"Check_If_Net");
	create_insn	(0XB077);
	set_name	(0XB077,	"ioctl_drv_err_pop");
	create_insn	(0XB07B);
	create_insn	(0XB07E);
	create_insn	(0XB080);
	set_name	(0XB080,	"ioctl_drive_owner");
	create_insn	(x=0XB085);
	op_hex		(x,	1);
	create_insn	(x=0XB08C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_dec		(x,	1);
	create_insn	(x=0XB095);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_dec		(x,	1);
	set_cmt	(0XB09E,	"[IOCALL_REQLEN]",	0);
	create_insn	(x=0XB09E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB0A3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB0AC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB0B6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB0BE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB0C5);
	set_name	(0XB0C5,	"DOS_DELETE");
	set_cmt	(0XB0CD,	"Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE\nSS = DS = DOS CS, SDA first filename pointer -> fully-qualified filename in DOS CS\nSDA CDS pointer -> current directory structure for drive with file\nReturn: CF set on error",	0);
	create_insn	(x=0XB0CD);
	op_hex		(x,	0);
	create_insn	(x=0XB0D0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB0D8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB0DE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XB0EA,	"\"*.\"",	0);
	set_cmt	(0XB0FD,	"3F3Fh",	0);
	create_insn	(x=0XB0FD);
	op_chr		(x,	1);
	set_cmt	(0XB10A,	"\".?\"",	0);
	set_cmt	(0XB110,	"\"??\"",	0);
	create_insn	(x=0XB115);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB118);
	op_hex		(x,	1);
	create_insn	(x=0XB11E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB123);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB13B);
	create_insn	(0XB140);
	create_insn	(x=0XB142);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB14E);
	create_insn	(x=0XB152);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB158);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB15C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB160);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB168);
	op_hex		(x,	1);
	create_insn	(0XB171);
	create_insn	(x=0XB179);
	op_hex		(x,	1);
	create_insn	(x=0XB182);
	op_hex		(x,	1);
	create_insn	(x=0XB18B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB190);
	op_hex		(x,	1);
	create_insn	(x=0XB1A2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XB1AD,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0XB1B2,	"FAT32",	0);
	create_insn	(0XB1BA);
	create_insn	(x=0XB1C1);
	op_hex		(x,	1);
	create_insn	(x=0XB1C5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB1C9);
	op_hex		(x,	1);
	set_cmt	(0XB1D2,	"LONG_NAME_ENTRY",	0);
	create_insn	(x=0XB1D2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB1D8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB1E8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB1F8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB1FF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB209);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB210);
	op_chr		(x,	1);
	create_insn	(x=0XB213);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB226);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0XB230);
	create_insn	(0XB233);
	set_name	(0XB233,	"REN_DEL_Check");
	create_insn	(x=0XB23A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB241);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB255);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB263);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XB267,	"AUXSTACK-SF_ENTRY.size",	0);
	create_insn	(x=0XB267);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB272);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB288);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB292);
	set_name	(0XB292,	"DOS_RENAME");
	set_cmt	(0XB29A,	"Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE\nSS = DS = DOS CS, SDA first filename pointer = offset of fully-qualified old name\nSDA CDS pointer -> current directory\nReturn: CF set on error",	0);
	create_insn	(x=0XB29A);
	op_hex		(x,	0);
	create_insn	(x=0XB29D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB2A2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB2A6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB2AE);
	op_hex		(x,	1);
	create_insn	(x=0XB2BA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB2BF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB2C3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB2C9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB2DF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB2E8);
	create_insn	(x=0XB2EC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB2F0);
	op_dec		(x,	1);
	create_insn	(x=0XB2F3);
	op_hex		(x,	1);
	create_insn	(x=0XB2F9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB303);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB30C);
	op_dec		(x,	1);
	create_insn	(x=0XB314);
	op_hex		(x,	1);
	set_cmt	(0XB319,	"(not necessary) ; 31/01/2024 - Erdogan Tan",	0);
	create_insn	(0XB319);
	create_insn	(x=0XB31B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB323);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB327);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB32A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB32E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB332);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB335);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB33B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB350);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB357);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB35E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB369);
	create_insn	(0XB370);
	create_insn	(x=0XB372);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB384);
	create_insn	(x=0XB386);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB389);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB38C);
	op_dec		(x,	1);
	create_insn	(x=0XB391);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB394);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB397);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB39A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB39F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3A2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3A5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3A8);
	op_dec		(x,	1);
	create_insn	(x=0XB3AE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB3B3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB3BD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3C1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB3C5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3C9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3DB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB3E2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3E6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3E9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3F4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3FA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB3FD);
	op_hex		(x,	1);
	create_insn	(x=0XB401);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB404);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XB408,	"AUXSTACK-SF_ENTRY.size",	0);
	create_insn	(x=0XB408);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB40B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XB40F,	"[SI+SF_ENTRY.sf_mode],\n SHARING_COMPAT+open_for_both",	0);
	create_insn	(x=0XB41E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB424);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB42A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB42E);
	op_hex		(x,	1);
	create_insn	(x=0XB438);
	op_hex		(x,	1);
	create_insn	(x=0XB43F);
	op_dec		(x,	1);
	create_insn	(x=0XB442);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB445);
	op_dec		(x,	1);
	create_insn	(x=0XB451);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB455);
	op_hex		(x,	1);
	create_insn	(0XB45A);
	create_insn	(x=0XB461);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB465);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB468);
	op_dec		(x,	1);
	create_insn	(x=0XB46D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB471);
	op_hex		(x,	1);
	create_insn	(x=0XB47B);
	op_hex		(x,	1);
	create_insn	(x=0XB480);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB484);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB48B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB492);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB499);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB49F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB4A9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB4BA);
	op_hex		(x,	1);
	create_insn	(x=0XB4C0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB4C6);
	create_insn	(x=0XB4CA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XB4CA,	"GET_SOURCE");
	create_insn	(x=0XB4CE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB4D2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB4D6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB4E1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB4EF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB4F6);
	set_name	(0XB4F6,	"NEW_RENAME");
	create_insn	(0XB502);
	set_name	(0XB502,	"GET_FILE_INFO");
	set_cmt	(0XB50A,	"Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES\nSS = DOS CS, SDA first filename pointer -> fully-qualified name of file\nSDA CDS pointer -> current directory\nReturn: CF set on error, AX = file attributes",	0);
	create_insn	(x=0XB50A);
	op_hex		(x,	0);
	create_insn	(0XB50D);
	create_insn	(x=0XB510);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XB51A,	"NO_PATH");
	create_insn	(0XB528);
	create_insn	(0XB52D);
	create_insn	(x=0XB531);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB53F);
	create_insn	(x=0XB540);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB555);
	op_hex		(x,	1);
	set_cmt	(0XB563,	"~attr_changeable",	0);
	create_insn	(x=0XB563);
	op_hex		(x,	1);
	set_name	(0XB563,	"SET_FILE_ATTRIBUTE");
	create_insn	(x=0XB568);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	create_insn	(x=0XB56D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB572);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB57C);
	set_cmt	(0XB585,	"Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES\nSS = DOS CS, SDA first filename pointer -> fully-qualified name of file\nSDA CDS pointer -> current directory\nSTACK: WORD new file attributes\nReturn: CF set on error",	0);
	create_insn	(x=0XB585);
	op_hex		(x,	0);
	create_insn	(0XB589);
	create_insn	(x=0XB58D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB59A);
	create_insn	(0XB5A4);
	create_insn	(x=0XB5A5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB5B1);
	op_hex		(x,	1);
	create_insn	(0XB5B6);
	create_insn	(x=0XB5BC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XB5C0,	"~attr_changeable",	0);
	create_insn	(x=0XB5C0);
	op_hex		(x,	1);
	set_cmt	(0XB5C9,	"buf_dirty",	0);
	create_insn	(x=0XB5C9);
	op_hex		(x,	1);
	set_cmt	(0XB5D3,	"buf_dirty",	0);
	create_insn	(x=0XB5D3);
	op_hex		(x,	1);
	create_insn	(x=0XB5D8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB5E7);
	set_name	(0XB5E7,	"DOS_DUP");
	create_insn	(x=0XB5EC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XB5F1,	"DOS_Dup_Direct");
	create_insn	(0XB5FD);
	set_name	(0XB5FD,	"DOS_CREATE");
	create_insn	(x=0XB5FF);
	op_hex		(x,	1);
	set_name	(0XB5FF,	"Create_inter");
	create_insn	(x=0XB603);
	op_hex		(x,	1);
	create_insn	(x=0XB607);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB60F);
	op_hex		(x,	1);
	set_name	(0XB60F,	"NoReset");
	create_insn	(x=0XB611);
	op_hex		(x,	1);
	set_name	(0XB615,	"AttErr");
	create_insn	(x=0XB618);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB61F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XB61F,	"ATT_OK");
	create_insn	(x=0XB624);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB62E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XB635,	"IFS_extopen");
	set_cmt	(0XB639,	"Multiplex - DOS 4 IFSFUNC.EXE - ???\nSS = DS = DOS CS, STACK: WORD ???   low byte = ???\nReturn: CF set on error\nCF clear if successful",	0);
	create_insn	(x=0XB639);
	op_hex		(x,	0);
	create_insn	(x=0XB63C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB642);
	set_name	(0XB642,	"NOEXTOP");
	set_cmt	(0XB646,	"Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE\nES:DI -> uninitialized SFT, SS = DOS CS\nSDA first filename pointer -> fully-qualified name of file\nSTACK: WORD file creation mode???",	0);
	create_insn	(x=0XB646);
	op_hex		(x,	0);
	create_insn	(x=0XB64A);
	op_hex		(x,	1);
	set_name	(0XB64A,	"TEST_RE_NET");
	set_name	(0XB653,	"dochk2");
	create_insn	(x=0XB658);
	op_hex		(x,	1);
	create_insn	(x=0XB65D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XB65D,	"dochk");
	set_cmt	(0XB668,	"Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE\nES:DI -> uninitialized SFT, SS = DOS CS\nSDA first filename pointer -> fully-qualified name of file to open\nSDA CDS pointer -> current directory\nReturn: CF set on error",	0);
	create_insn	(x=0XB668);
	op_hex		(x,	0);
	create_insn	(0XB66C);
	set_name	(0XB66C,	"LOCAL_CREATE");
	create_insn	(x=0XB67B);
	op_hex		(x,	1);
	set_name	(0XB680,	"setdone");
	create_insn	(x=0XB688);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB690);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_name	(0XB690,	"SET_MKND_ERR");
	create_byte	(0XB697);
	set_name	(0XB697,	"CRTERRTAB");
	create_byte	(0XB698);
	create_byte	(0XB699);
	create_byte	(0XB69A);
	create_byte	(0XB69B);
	create_byte	(0XB69C);
	create_byte	(0XB69D);
	create_byte	(0XB69E);
	create_insn	(x=0XB69F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XB69F,	"Create_ok");
	create_insn	(x=0XB6A2);
	op_hex		(x,	1);
	create_insn	(x=0XB6A6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB6B0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XB6C2,	"NoVolLabel");
	create_insn	(x=0XB6C5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB6CF);
	set_name	(0XB6CF,	"DOS_Create_New");
	create_insn	(0XB6D4);
	set_name	(0XB6D4,	"Set_Media_ID");
	create_insn	(x=0XB6E0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB6F0);
	op_hex		(x,	1);
	create_insn	(0XB6FA);
	create_insn	(x=0XB6FE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB703);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB710);
	op_dec		(x,	1);
	create_insn	(x=0XB716);
	op_hex		(x,	1);
	create_insn	(x=0XB725);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XB725,	"Set_EXT_mode");
	create_insn	(x=0XB72E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB739);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XB739,	"DOS_OPEN");
	create_insn	(x=0XB743);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB74E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB758);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB75F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XB75F,	"_IFS_extopen");
	set_cmt	(0XB766,	"Multiplex - DOS 4 IFSFUNC.EXE - ???\nSS = DS = DOS CS, STACK: WORD ???   low byte = ???\nReturn: CF set on error\nCF clear if successful",	0);
	create_insn	(x=0XB766);
	op_hex		(x,	0);
	create_insn	(x=0XB769);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XB76E,	"do_ret_label");
	create_insn	(x=0XB76F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XB76F,	"_NOEXTOP");
	create_insn	(x=0XB776);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB77D);
	op_hex		(x,	1);
	set_name	(0XB77F,	"not_exec_open");
	set_cmt	(0XB783,	"Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE\nES:DI -> uninitialized SFT, SS = DOS CS\nSDA first filename pointer -> fully-qualified name of file to open\nSTACK: WORD file open mode\nReturn: CF set on error",	0);
	create_insn	(x=0XB783);
	op_hex		(x,	0);
	create_insn	(x=0XB787);
	op_hex		(x,	1);
	set_name	(0XB787,	"TEST_RE_NET1");
	create_insn	(x=0XB790);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XB790,	"TEST_RE_NET2");
	create_insn	(0XB799);
	set_name	(0XB799,	"LOCAL_OPEN");
	set_name	(0XB7B4,	"OpenBadRet");
	create_insn	(0XB7BB);
	set_name	(0XB7BB,	"bad_path2");
	create_insn	(0XB7C0);
	set_name	(0XB7C0,	"Open_Bad_Access");
	create_insn	(0XB7C5);
	set_name	(0XB7C5,	"Open_found");
	create_insn	(x=0XB7CB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB7CF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XB7D8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XB7DC,	"[SI+SF_ENTRY.sf_mode]\nbit 12 (big file flag ?)",	0);
	create_insn	(x=0XB7DC);
	op_hex		(x,	1);
	set_cmt	(0XB7E5,	"file size limit",	0);
	create_insn	(x=0XB7E5);
	op_hex		(x,	1);
	set_name	(0XB7E5,	"chk_fsize_limit");
	set_cmt	(0XB7F0,	"[ES:BX+dir_entry.dir_attr]",	0);
	set_name	(0XB7F0,	"fsize_limit_ok");
	create_insn	(x=0XB7F4);
	op_hex		(x,	1);
	create_insn	(x=0XB7F8);
	op_hex		(x,	1);
	create_insn	(x=0XB7FE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB805);
	op_hex		(x,	1);
	create_insn	(x=0XB80D);
	op_hex		(x,	1);
	create_insn	(x=0XB810);
	op_hex		(x,	1);
	create_insn	(x=0XB815);
	op_hex		(x,	1);
	set_name	(0XB815,	"ResetAccess");
	create_insn	(x=0XB81D);
	op_hex		(x,	1);
	set_name	(0XB81D,	"NormalOpen");
	create_insn	(0XB829);
	set_name	(0XB829,	"FillSFT");
	set_name	(0XB82B,	"open_ok");
	create_insn	(x=0XB831);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB838);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XB838,	"SET_SFT_MODE");
	create_insn	(x=0XB83F);
	op_hex		(x,	1);
	create_insn	(x=0XB847);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XB84E,	"s_retn");
	create_insn	(x=0XB84F);
	op_hex		(x,	1);
	set_name	(0XB84F,	"SHARE_ERROR");
	create_insn	(x=0XB85B);
	op_hex		(x,	1);
	set_name	(0XB863,	"_HARD_ERR");
	create_insn	(x=0XB868);
	op_hex		(x,	1);
	set_name	(0XB868,	"_NO_HARD_ERR");
	create_insn	(x=0XB86D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XB86D,	"Check_Access_AX");
	create_insn	(x=0XB873);
	op_hex		(x,	1);
	create_insn	(x=0XB876);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB87D);
	op_hex		(x,	1);
	create_insn	(x=0XB882);
	op_hex		(x,	1);
	create_insn	(x=0XB889);
	op_hex		(x,	1);
	create_insn	(x=0XB891);
	op_hex		(x,	1);
	create_insn	(0XB898);
	create_insn	(0XB89E);
	set_name	(0XB89E,	"DISK_INFO");
	create_insn	(x=0XB8A0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB8A3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XB8AE,	"Multiplex - NETWORK REDIRECTOR - GET DISK SPACE\nES:DI -> current directory\nReturn: AL = sectors per cluster, BX = total clusters\nCX = bytes per sector, DX = number of available clusters",	0);
	create_insn	(x=0XB8AE);
	op_hex		(x,	0);
	create_insn	(x=0XB8B1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB8C3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB8D0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB8F7);
	create_insn	(x=0XB8FB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB8FF);
	op_hex		(x,	1);
	create_insn	(x=0XB90B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB90F);
	op_hex		(x,	1);
	create_insn	(x=0XB924);
	op_hex		(x,	1);
	set_cmt	(0XB92B,	"free cluster count hw",	0);
	create_insn	(x=0XB92B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XB932,	"number of clusters hw",	0);
	create_insn	(x=0XB932);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB941);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB949);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB94E);
	op_dec		(x,	1);
	create_insn	(x=0XB952);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB956);
	op_dec		(x,	1);
	create_insn	(x=0XB95E);
	op_dec		(x,	1);
	create_insn	(x=0XB962);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB966);
	op_dec		(x,	1);
	create_insn	(x=0XB96C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB970);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB977);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XB97F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XB99B);
	create_insn	(x=0XB99F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XB9B3);
	set_cmt	(0XB9B7,	"DPB.FIRST_ACCESS",	0);
	create_insn	(x=0XB9B7);
	op_hex		(x,	1);
	set_name	(0XB9B7,	"update_fat32_fsinfo");
	set_cmt	(0XB9C0,	"test bit 0,1 and 3",	0);
	create_insn	(x=0XB9C0);
	op_hex		(x,	1);
	set_cmt	(0XB9C9,	"DPB.FAT_SIZE\n(16bit FAT size field = 0 for FAT32 fs)",	0);
	set_cmt	(0XB9D2,	"DPB.FSINFO_SECTOR",	0);
	create_insn	(x=0XB9DF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XB9E4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XB9FF,	"space for buffer header\n(buffer header size = 24)",	0);
	create_insn	(x=0XB9FF);
	op_dec		(x,	1);
	create_insn	(x=0XBA08);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBA12);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XBA21,	"'RRaA' (NASM syntax)",	0);
	set_cmt	(0XBA2B,	"'rrAa' (NASM syntax)",	0);
	set_cmt	(0XBA37,	"test DPB.FIRST_ACCESS bit 0",	0);
	create_insn	(x=0XBA37);
	op_hex		(x,	1);
	set_cmt	(0XBA3E,	"DPB.FREE_CNT",	0);
	set_cmt	(0XBA43,	"FSINFO.Free_Count",	0);
	set_cmt	(0XBA48,	"DPB.FAT32_NXTFREE",	0);
	set_cmt	(0XBA4D,	"FSINFO.Nxt_Free",	0);
	create_insn	(x=0XBA55);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XBA5C,	"DPB.FSINFO_SECTOR",	0);
	set_cmt	(0XBA69,	"clear  DPB.FIRST_ACCESS bit 0",	0);
	create_insn	(x=0XBA69);
	op_hex		(x,	1);
	set_cmt	(0XBA6E,	"test DPB.FIRST_ACCESS bit 1,3",	0);
	create_insn	(x=0XBA6E);
	op_hex		(x,	1);
	create_insn	(x=0XBA7E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XBA88,	"read boot sector",	0);
	create_insn	(x=0XBA90);
	op_hex		(x,	1);
	set_cmt	(0XBA94,	"word at offset 508\n(is 0 on Windows Me boot sector)",	0);
	create_insn	(x=0XBA94);
	op_hex		(x,	0);
	create_insn	(x=0XBA9B);
	op_hex		(x,	1);
	create_insn	(x=0XBAA0);
	op_hex		(x,	1);
	create_insn	(x=0XBAA5);
	op_hex		(x,	1);
	set_cmt	(0XBAB2,	"test DPB.FIRST_ACCESS bit 1",	0);
	create_insn	(x=0XBAB2);
	op_hex		(x,	1);
	set_cmt	(0XBAB9,	"DPB.ROOT_CLUSTER",	0);
	set_cmt	(0XBAC2,	"test DPB.FIRST_ACCESS bit 3",	0);
	create_insn	(x=0XBAC2);
	op_hex		(x,	1);
	set_cmt	(0XBAC9,	"DPB.EXT_FLAGS",	0);
	create_insn	(x=0XBAD3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBAE4);
	op_hex		(x,	1);
	create_insn	(x=0XBAE8);
	op_hex		(x,	1);
	set_cmt	(0XBAF9,	"DPB.BKBOOT_SECTOR",	0);
	create_insn	(0XBAF9);
	set_cmt	(0XBAFE,	"invalid",	0);
	set_cmt	(0XBB01,	"invalid (none)",	0);
	create_insn	(0XBB08);
	set_cmt	(0XBB0E,	"DPB.FIRST_ACCESS\nclear bit 0,1 and 3\nbit 0 - FSINFO update (dirty) bit\nbit 1 - BPB_RootClus update bit\nbit 3 - BPB_ExtFlags update bit",	0);
	create_insn	(x=0XBB0E);
	op_hex		(x,	1);
	create_insn	(x=0XBB14);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XBB14,	"DOS_SEARCH_FIRST");
	set_cmt	(0XBB20,	"Multiplex - NETWORK REDIRECTOR - ???",	0);
	create_insn	(x=0XBB20);
	op_hex		(x,	0);
	create_insn	(x=0XBB23);
	op_hex		(x,	1);
	set_cmt	(0XBB2E,	"Multiplex - NETWORK REDIRECTOR - FINDFIRST\nSS = DS = DOS CS, [DTA] = uninitialized 21-byte findfirst search data\nSDA first filename pointer -> fully-qualified search template\nSDA CDS pointer -> current directory\nReturn: CF set on error",	0);
	create_insn	(x=0XBB2E);
	op_hex		(x,	0);
	create_insn	(0XBB31);
	create_insn	(x=0XBB39);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XBB4E,	"find_no_more");
	create_insn	(0XBB56);
	create_insn	(0XBB5B);
	create_insn	(x=0XBB5F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBB65);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBB69);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBB6D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XBB72,	"'A'-1",	0);
	create_insn	(x=0XBB75);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XBB75,	"found_it");
	create_insn	(x=0XBB7B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBB86);
	op_hex		(x,	1);
	create_insn	(x=0XBB8B);
	op_dec		(x,	1);
	create_insn	(x=0XBB91);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBB96);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBB9A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBB9E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBBAA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBBB9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBBBF);
	op_dec		(x,	1);
	create_insn	(x=0XBBCE);
	op_hex		(x,	1);
	create_insn	(x=0XBBD9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XBBD9,	"DOS_SEARCH_NEXT");
	create_insn	(x=0XBBE0);
	op_hex		(x,	1);
	set_cmt	(0XBBE7,	"Multiplex - NETWORK REDIRECTOR - FINDNEXT\nSS = DS = DOS CS, [DTA] = 21-byte findfirst search data\nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0XBBE7);
	op_hex		(x,	0);
	create_insn	(x=0XBBEA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBBF2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBBF8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XBBFC,	"'A' - 1",	0);
	create_insn	(x=0XBC03);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XBC07,	"[ES:DI+curdir.devptr]",	0);
	create_insn	(x=0XBC12);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBC15);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBC1B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBC20);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XBC25);
	set_name	(0XBC25,	"RENAME_NEXT");
	create_insn	(x=0XBC27);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBC2A);
	op_dec		(x,	1);
	create_insn	(x=0XBC30);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XBC39,	"No_files");
	create_insn	(0XBC3C);
	create_insn	(x=0XBC43);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBC46);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBC51);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XBC5F);
	create_insn	(0XBC72);
	set_name	(0XBC72,	"CHECK_QUESTION");
	create_insn	(x=0XBC74);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBC84);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XBC84,	"DOS_ABORT");
	set_cmt	(0XBC89,	"[ES:PDB.JFN_Length] ; Number of JFNs",	0);
	set_cmt	(0XBC9D,	"Multiplex - NETWORK REDIRECTOR - CLOSE ALL REMOTE FILES FOR PROCESS\nDS???, SS = DOS CS",	0);
	create_insn	(x=0XBC9D);
	op_hex		(x,	0);
	create_insn	(x=0XBC9F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBCB3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XBCC0,	"SF_ENTRY.size",	0);
	create_insn	(x=0XBCC0);
	op_dec		(x,	1);
	create_insn	(0XBCCF);
	create_insn	(x=0XBCD5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBCDF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XBCEF);
	set_cmt	(0XBCF7,	"devid_file_clean",	0);
	create_insn	(x=0XBCF7);
	op_hex		(x,	1);
	set_cmt	(0XBD03,	"[es:di+dir_entry.dir_lstaccdate]",	0);
	create_insn	(0XBD03);
	create_insn	(x=0XBD09);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XBD09,	"DOS_CLOSE");
	set_cmt	(0XBD0D,	"[ES:DI+SF_ENTRY.sf_flags]",	0);
	set_cmt	(0XBD11,	"remote file ?",	0);
	create_insn	(x=0XBD11);
	op_hex		(x,	1);
	set_cmt	(0XBD15,	"no",	0);
	set_cmt	(0XBD1A,	"Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE\nES:DI -> SFT\nSFT DPB field -> DPB of drive containing file\nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0XBD1A);
	op_hex		(x,	0);
	create_insn	(0XBD1D);
	set_name	(0XBD28,	"CloseEntry");
	set_cmt	(0XBD29,	"devid_device",	0);
	create_insn	(x=0XBD29);
	op_hex		(x,	1);
	set_cmt	(0XBD33,	"[ES:DI+SF_ENTRY.sf_flags]",	0);
	set_cmt	(0XBD36,	"test bit 6 (large disk support -windows- bit?)\nNOTE: Retro DOS v5 kernel must set this bit.",	0);
	create_insn	(x=0XBD36);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XBD3E,	"[si+SF_ENTRY.sf_mode], devid_device_null",	0);
	create_insn	(x=0XBD3E);
	op_hex		(x,	1);
	set_cmt	(0XBD47,	"[si+SF_ENTRY.sf_devptr]",	0);
	set_cmt	(0XBD4A,	"DPB.DRIVE",	0);
	set_cmt	(0XBD4E,	"bit 2",	0);
	create_insn	(x=0XBD4E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XBD58,	"SF_ENTRY.sf_mode bit 6\ndevid_file_clean",	0);
	create_insn	(x=0XBD58);
	op_hex		(x,	1);
	set_cmt	(0XBD5E,	"EXT_OPEN_I24_OFF",	0);
	create_insn	(x=0XBD5E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XBD69,	"[es:di+dir_entry.dir_lstaccdate]",	0);
	set_cmt	(0XBD6F,	"devid_file_clean",	0);
	create_insn	(x=0XBD6F);
	op_hex		(x,	1);
	set_name	(0XBD77,	"clook");
	set_cmt	(0XBD79,	"[si+SF_ENTRY.sf_name]",	0);
	set_cmt	(0XBD90,	"error_file_not_found",	0);
	set_cmt	(0XBD95,	"devid_file_clean",	0);
	create_insn	(x=0XBD95);
	op_hex		(x,	1);
	set_cmt	(0XBD9B,	"[si+SF_ENTRY.sf_mode], sf_isnet",	0);
	create_insn	(x=0XBD9B);
	op_hex		(x,	1);
	set_cmt	(0XBDA0,	"remote file",	0);
	set_cmt	(0XBDA2,	"[si+SF_ENTRY.sf_attr]",	0);
	set_cmt	(0XBDA9,	"[es:di+dir_entry.dir_attr],\nattr_archive",	0);
	create_insn	(x=0XBDA9);
	op_hex		(x,	1);
	set_cmt	(0XBDAE,	"[SI+SF_ENTRY.sf_chain]\nfirst cluster (32 bit) low word !?",	0);
	set_cmt	(0XBDB1,	"[ES:DI+dir_entry.dir_first]",	0);
	set_cmt	(0XBDB5,	"[SI+SF_ENTRY.sf_chain+2]\nfirst cluster (32 bit) high word !?",	0);
	set_cmt	(0XBDB8,	"[ES:DI+dir_entry.dir_fclus_hi]",	0);
	set_cmt	(0XBDBC,	"[SI+SF_ENTRY.sf_size]",	0);
	set_cmt	(0XBDBF,	"[ES:DI+dir_entry.dir_size_l]",	0);
	set_cmt	(0XBDC3,	"[SI+SF_ENTRY.sf_size+2]",	0);
	set_cmt	(0XBDC6,	"[ES:DI+dir_entry.dir_size_h]",	0);
	set_cmt	(0XBDCA,	"[SI+SF_ENTRY.sf_date]",	0);
	set_cmt	(0XBDCD,	"[ES:DI+dir_entry.dir_date]",	0);
	set_cmt	(0XBDD1,	"[SI+SF_ENTRY.sf_time]",	0);
	set_cmt	(0XBDD4,	"[ES:DI+dir_entry.dir_time]",	0);
	set_cmt	(0XBDD8,	"[ES:BX+BUFFINFO.buf_flags],\nbuf_dirty",	0);
	create_insn	(x=0XBDD8);
	op_hex		(x,	1);
	set_cmt	(0XBDE2,	"[ES:BX+BUFFINFO.buf_flags],\nbuf_dirty",	0);
	create_insn	(x=0XBDE2);
	op_hex		(x,	1);
	create_insn	(x=0XBDEB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XBDF7,	"[ES:DI+SF_ENTRY.sf_devptr]",	0);
	set_cmt	(0XBDFB,	"DPB.DRIVE",	0);
	set_cmt	(0XBDFF,	"clear bit 2",	0);
	create_insn	(x=0XBDFF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XBE09,	"do_update2");
	set_cmt	(0XBE0B,	"[ES:DI+SF_ENTRY.sf_flags],\nsf_isnet+devid_device",	0);
	create_insn	(x=0XBE0B);
	op_hex		(x,	1);
	set_cmt	(0XBE15,	"[ES:DI+SF_ENTRY.sf_devptr]",	0);
	set_name	(0XBE1F,	"CloseFinish");
	create_insn	(0XBE33);
	set_name	(0XBE33,	"FREE_SFT");
	set_cmt	(0XBE34,	"[ES:DI+SF_ENTRY.sf_ref_count]",	0);
	create_insn	(x=0XBE40);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XBE40,	"DOS_COMMIT");
	create_insn	(x=0XBE48);
	op_hex		(x,	1);
	create_insn	(x=0XBE4E);
	op_hex		(x,	1);
	set_cmt	(0XBE57,	"Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE\nES:DI -> SFT\nSFT DPB field -> DPB of drive containing file\nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0XBE57);
	op_hex		(x,	0);
	create_insn	(0XBE5A);
	set_cmt	(0XBE72,	"devid_file_clean+devid_device",	0);
	create_insn	(x=0XBE72);
	op_hex		(x,	1);
	set_name	(0XBE72,	"SetSFTTimes");
	set_cmt	(0XBE78,	"sf_close_nodate",	0);
	create_insn	(x=0XBE78);
	op_hex		(x,	1);
	set_cmt	(0XBE7C,	"nodate => no timestamp",	0);
	set_cmt	(0XBE82,	"[ES:DI+SF_ENTRY.sf_date]",	0);
	set_cmt	(0XBE86,	"[ES:DI+SF_ENTRY.sf_time]",	0);
	create_insn	(0XBE8C);
	set_name	(0XBE8C,	"DOS_MKDIR");
	set_cmt	(0XBE94,	"Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY\nSS = DOS CS\nSDA first filename pointer -> fully-qualified directory name\nSDA CDS pointer -> current directory \nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0XBE94);
	op_hex		(x,	0);
	set_cmt	(0XBE97,	"error_access_denied",	0);
	create_insn	(0XBE97);
	set_name	(0XBE97,	"NODEACCERRJ");
	create_insn	(0XBE9F);
	set_name	(0XBE9F,	"PATHNFJ");
	create_insn	(0XBEA5);
	set_name	(0XBEA5,	"LOCAL_MKDIR");
	create_insn	(x=0XBEA8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBEAC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBEB2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBEB8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBECA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBECE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBEDB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBEDF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XBEE2,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0XBEE7,	"not FAT32",	0);
	set_cmt	(0XBEE9,	"[es:bp+DPB.ROOT_CLUSTER]",	0);
	set_cmt	(0XBEEF,	"[es:bp+DPB.ROOT_CLUSTER+2]",	0);
	set_name	(0XBEF9,	"LOCAL_MKDIR_cont");
	create_insn	(x=0XBEFD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBF00);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBF11);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBF15);
	op_hex		(x,	1);
	create_insn	(x=0XBF1F);
	op_hex		(x,	1);
	create_insn	(x=0XBF24);
	op_dec		(x,	1);
	set_name	(0XBF24,	"yesdirty5");
	set_cmt	(0XBF27,	"\". \" ; (NASM syntax)",	0);
	create_insn	(x=0XBF2A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBF2E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBF32);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XBF39,	"\"..\"",	0);
	create_insn	(x=0XBF3D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBF44);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBF48);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBF4E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBF59);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBF5D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBF60);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XBF64,	"[DI+BUFFINFO.buf_flags],buf_isDIR",	0);
	create_insn	(x=0XBF64);
	op_hex		(x,	1);
	set_cmt	(0XBF78,	"[DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XBF78);
	op_hex		(x,	1);
	set_name	(0XBF78,	"DIRUP");
	create_insn	(x=0XBF81);
	op_hex		(x,	1);
	set_name	(0XBF85,	"yesdirty6");
	set_cmt	(0XBF8A,	"[ES:BP+DPB.DRIVE]",	0);
	set_cmt	(0XBF91,	"error_access_denied",	0);
	create_insn	(0XBF98);
	set_name	(0XBF98,	"NODEEXISTSPOPDEL");
	create_insn	(x=0XBF9B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBF9F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XBFA3,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0XBFA3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XBFAF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XBFB3);
	op_hex		(x,	1);
	create_insn	(x=0XBFBA);
	op_dec		(x,	1);
	create_insn	(x=0XBFBD);
	op_hex		(x,	1);
	set_name	(0XBFC3,	"NODEEXISTS");
	create_insn	(0XBFC6);
	set_name	(0XBFC6,	"NODEEXISTSP");
	create_insn	(0XBFC9);
	set_name	(0XBFC9,	"DOS_CHDIR");
	set_cmt	(0XBFD1,	"Multiplex - NETWORK REDIRECTOR - CHDIR\nSS = DOS CS\nSDA first filename pointer -> fully-qualified directory name\nSDA CDS pointer -> current directory \nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0XBFD1);
	op_hex		(x,	0);
	create_insn	(0XBFD4);
	set_cmt	(0XBFD7,	"[ES:DI+curdir.flags],curdir_splice",	0);
	create_insn	(x=0XBFD7);
	op_hex		(x,	1);
	set_cmt	(0XBFDF,	"[ES:DI+curdir.ID]",	0);
	set_cmt	(0XBFE8,	"FALSE",	0);
	create_insn	(x=0XBFE8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XBFED,	"attr_directory+attr_system+attr_hidden",	0);
	create_insn	(x=0XBFED);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XBFF5,	"error_path_not_found",	0);
	set_cmt	(0XBFFA,	"Path not a DIR",	0);
	set_cmt	(0XBFFC,	"Get cluster number",	0);
	create_insn	(x=0XBFFC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XC005);
	set_name	(0XC005,	"DOS_RMDIR");
	set_cmt	(0XC00D,	"Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY\nSS = DOS CS\nSDA first filename pointer -> fully-qualified directory name\nSDA CDS pointer -> current directory \nReturn: CF set on error, AX = DOS error code\nCF clear if successful",	0);
	create_insn	(x=0XC00D);
	op_hex		(x,	0);
	create_insn	(0XC010);
	create_insn	(x=0XC013);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC018,	"attr_directory+attr_system+attr_hidden",	0);
	create_insn	(x=0XC018);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC020,	"Path not found",	0);
	set_cmt	(0XC022,	"Path not a DIR",	0);
	set_cmt	(0XC024,	"Root ?",	0);
	create_insn	(x=0XC024);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC029,	"no",	0);
	create_insn	(x=0XC02B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC030,	"yes",	0);
	set_cmt	(0XC032,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0XC037,	"not FAT32",	0);
	create_insn	(x=0XC039);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC03D,	"[es:bp+DPB.ROOT_CLUSTER+2]",	0);
	create_insn	(x=0XC043);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC047,	"[es:bp+DPB.ROOT_CLUSTER]",	0);
	set_cmt	(0XC04F,	"error_path_not_found",	0);
	create_insn	(0XC04F);
	create_insn	(0XC055);
	create_insn	(x=0XC05B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC061);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC065,	"Compute true offset",	0);
	set_cmt	(0XC068,	"[DI+BUFFINFO.buf_sector]",	0);
	create_insn	(x=0XC070);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC075);
	op_dec		(x,	1);
	set_cmt	(0XC07C,	"Nul terminate it",	0);
	set_cmt	(0XC07D,	"Set search",	0);
	set_cmt	(0XC080,	"Get start of directory",	0);
	create_insn	(x=0XC085);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC08C,	"First entry '.'?",	0);
	set_cmt	(0XC08F,	"Nope",	0);
	create_insn	(x=0XC091);
	op_dec		(x,	1);
	set_cmt	(0XC095,	"Second entry '..'?",	0);
	set_cmt	(0XC098,	"Nope",	0);
	set_cmt	(0XC09C,	"Skip . and ..",	0);
	create_insn	(x=0XC09C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC0A2,	"Get next entry",	0);
	set_cmt	(0XC0A7,	"attr_directory+attr_hidden+attr_system",	0);
	create_insn	(x=0XC0A7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC0AC,	"Do a search",	0);
	create_insn	(x=0XC0B1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC0B8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC0BC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC0C0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC0C4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC0C8,	"Release data in sub dir",	0);
	create_insn	(x=0XC0D1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC0D5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC0DD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC0E1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC0EE,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0XC0EE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC0F3,	"Pre read",	0);
	set_cmt	(0XC0F5,	"Get sector back",	0);
	create_insn	(x=0XC0FC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC100,	"[DI+BUFFINFO.buf_flags],buf_isDIR",	0);
	create_insn	(x=0XC100);
	op_hex		(x,	1);
	set_cmt	(0XC104,	"Pointer to start of entry",	0);
	set_cmt	(0XC105,	"Corrected",	0);
	set_cmt	(0XC107,	"Free the entry",	0);
	create_insn	(x=0XC107);
	op_hex		(x,	1);
	create_insn	(x=0XC10D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC10D,	"SWAPBACK");
	create_insn	(x=0XC113);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC113,	"SWAPCON");
	create_insn	(x=0XC119);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC11C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC11F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC122);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC127);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XC127,	"DOS_READ");
	create_insn	(x=0XC12F);
	op_hex		(x,	1);
	create_insn	(0XC138);
	set_cmt	(0XC145,	"Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE\nES:DI -> SFT\nSFT DPB field -> DPB of drive containing file\nCX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer\nReturn: CF set on error, CX = bytes read",	0);
	create_insn	(x=0XC145);
	op_hex		(x,	0);
	create_insn	(0XC148);
	set_cmt	(0XC14A,	"[ES:DI+SF_ENTRY.sf_flags],devid_device",	0);
	create_insn	(x=0XC14A);
	op_hex		(x,	1);
	set_cmt	(0XC151,	"errLOC_Disk",	0);
	create_insn	(x=0XC151);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC160,	"errLOC_SerDev",	0);
	create_insn	(x=0XC160);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC165,	"[ES:DI+SF_ENTRY.sf_flags]",	0);
	create_insn	(x=0XC169);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC16D,	"devid_device_EOF ; End of file?",	0);
	create_insn	(x=0XC16D);
	op_hex		(x,	1);
	set_cmt	(0XC172,	"devid_device_null ; NUL device?",	0);
	create_insn	(x=0XC172);
	op_hex		(x,	1);
	set_cmt	(0XC175,	"no",	0);
	set_cmt	(0XC177,	"Indicate EOF by setting zero",	0);
	set_cmt	(0XC17C,	"devid_device_raw ; Raw mode?",	0);
	create_insn	(x=0XC17C);
	op_hex		(x,	1);
	set_cmt	(0XC17F,	"Yes, let the device do all local editing",	0);
	set_cmt	(0XC181,	"devid_device_con_in ; Is it console device?",	0);
	create_insn	(x=0XC181);
	op_hex		(x,	1);
	set_cmt	(0XC184,	"no",	0);
	set_cmt	(0XC186,	"yes",	0);
	create_insn	(0XC189);
	set_cmt	(0XC18A,	"Xaddr to DS:DI",	0);
	create_insn	(x=0XC18B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XC191,	"not present",	0);
	set_cmt	(0XC193,	"devid_device_con_in ; is it console device?",	0);
	create_insn	(x=0XC193);
	op_hex		(x,	1);
	set_cmt	(0XC196,	"no, do normal read",	0);
	set_cmt	(0XC198,	"yes, do win386 polling loop",	0);
	set_cmt	(0XC19B,	"DS:BX transfer addr",	0);
	create_insn	(0XC19B);
	set_cmt	(0XC19D,	"Media Byte, unit = 0",	0);
	set_cmt	(0XC19F,	"Start at 0",	0);
	create_insn	(x=0XC1A5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC1AF,	"Read error",	0);
	create_insn	(x=0XC1AF);
	op_hex		(x,	1);
	create_insn	(x=0XC1B1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC1B8,	"no errors",	0);
	set_cmt	(0XC1BD,	"DS:DI is Xaddr",	0);
	set_cmt	(0XC1BF,	"[ss:CALLSCNT]",	0);
	create_insn	(x=0XC1BF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC1C4,	"[ss:CALLSCNT]",	0);
	create_insn	(x=0XC1C4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC1CB,	"Ignore",	0);
	set_cmt	(0XC1CF,	"fail",	0);
	set_cmt	(0XC1D2,	"Retry",	0);
	set_cmt	(0XC1D4,	"Clean stack",	0);
	create_insn	(0XC1D4);
	set_name	(0XC1D4,	"CRDFERR");
	create_insn	(x=0XC1D5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC1DD,	"Chuck saved seg of Xaddr",	0);
	create_insn	(0XC1DD);
	set_cmt	(0XC1E0,	"[ss:CALLSCNT] ; Amount transferred",	0);
	create_insn	(x=0XC1E0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XC1E7);
	create_insn	(x=0XC1F9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC1FE,	"[SI+SF_ENTRY.sf_devptr]",	0);
	set_cmt	(0XC209,	"Save \"count\" done",	0);
	create_insn	(x=0XC20A);
	op_hex		(x,	1);
	create_insn	(x=0XC20C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC219,	"[SS:CALLSCNT]",	0);
	create_insn	(x=0XC219);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC222,	"Retry",	0);
	set_cmt	(0XC226,	"FAIL",	0);
	set_cmt	(0XC228,	"Ignore, Pick some random character",	0);
	create_insn	(0XC22C);
	set_cmt	(0XC22D,	"[SS:CALLSCNT]",	0);
	create_insn	(x=0XC22D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC236,	"[SS:CALLXAD+2]",	0);
	create_insn	(x=0XC236);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC23B,	"Get the character we just read",	0);
	set_cmt	(0XC23E,	"[SS:CALLXAD] ; Next character",	0);
	create_insn	(x=0XC23E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC243);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC24A,	"Next character",	0);
	set_cmt	(0XC24B,	"^Z?",	0);
	set_cmt	(0XC24D,	"Yes, done zero set (EOF)",	0);
	set_cmt	(0XC24F,	"c_CR ; CR?",	0);
	set_cmt	(0XC251,	"Loop if no, else done",	0);
	set_cmt	(0XC253,	"Resets zero flag so NOT EOF, unless",	0);
	set_cmt	(0XC257,	"ds:bx is Xfer address",	0);
	create_insn	(0XC257);
	set_cmt	(0XC25D,	"prepare device packet",	0);
	set_cmt	(0XC260,	"DEVRDND ; Change command code",	0);
	set_cmt	(0XC266,	"get device header",	0);
	create_insn	(x=0XC266);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC26B,	"call device driver",	0);
	set_cmt	(0XC26F,	"[es:bx+SRHEAD.REQSTAT],\nSTERR ; check if error",	0);
	create_insn	(x=0XC26F);
	op_hex		(x,	1);
	set_cmt	(0XC27A,	"invoke int 24h handler",	0);
	set_cmt	(0XC281,	"ignore by user,assume read is done",	0);
	set_cmt	(0XC285,	"user issued a 'fail',indicate error",	0);
	set_cmt	(0XC288,	"user issued a retry",	0);
	set_cmt	(0XC28A,	"[es:bx+SRHEAD.REQSTAT],0200h\nsee if busy bit set",	0);
	create_insn	(x=0XC28A);
	op_hex		(x,	1);
	set_cmt	(0XC292,	"DEVRD ; command code is READ now",	0);
	set_cmt	(0XC297,	"change count to 1 character",	0);
	create_insn	(x=0XC29E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC2A8);
	op_hex		(x,	1);
	set_cmt	(0XC2AA,	"[es:bx+SRHEAD.REQSTAT]\nget returned status",	0);
	set_cmt	(0XC2AE,	"STERR ; was there an error during read?",	0);
	create_insn	(x=0XC2AE);
	op_hex		(x,	1);
	set_cmt	(0XC2B2,	"no,read next character",	0);
	create_insn	(0XC2C4);
	set_cmt	(0XC2C7,	"decrement count",	0);
	set_cmt	(0XC2C8,	"all characters read in",	0);
	set_cmt	(0XC2CA,	"update transfer address",	0);
	set_cmt	(0XC2CE,	"read next character in",	0);
	set_cmt	(0XC2D0,	"discard segment address",	0);
	create_insn	(0XC2D0);
	create_insn	(x=0XC2D1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC2D6,	"indicate error",	0);
	create_insn	(0XC2D9);
	create_insn	(x=0XC2DA);
	op_hex		(x,	1);
	set_cmt	(0XC2DC,	"Microsoft Networks - KEYBOARD BUSY LOOP\nindicate idle to WIN386",	0);
	create_insn	(x=0XC2DC);
	op_hex		(x,	0);
	create_insn	(0XC2E2);
	set_cmt	(0XC2E3,	"[ss:CALLSCNT]",	0);
	create_insn	(x=0XC2E3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC2E8,	"jump back to normal DOS raw read exit",	0);
	create_insn	(0XC2EB);
	set_cmt	(0XC2ED,	"c_CR ; Check for carriage return",	0);
	set_cmt	(0XC2F1,	"c_LF",	0);
	set_cmt	(0XC2F4,	"c_LF",	0);
	set_cmt	(0XC2FA,	"Cause a new buffer to be read",	0);
	set_cmt	(0XC2FC,	"Transmit linefeed",	0);
	set_cmt	(0XC2FF,	"Clear zero flag--not end of file",	0);
	create_insn	(x=0XC2FF);
	op_hex		(x,	1);
	create_insn	(x=0XC306);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC30C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC310,	"Zero set if Ctrl-Z found in input",	0);
	create_insn	(x=0XC312);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC316,	"[ES:DI+SF_ENTRY.sf_flags],\n~devid_device_EOF\nMark as no more data available",	0);
	create_insn	(x=0XC316);
	op_hex		(x,	1);
	create_insn	(0XC31F);
	create_insn	(x=0XC322);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC32A,	"128",	0);
	create_insn	(x=0XC32A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XC331,	"\nSet up 128-byte buffer with no template",	0);
	create_insn	(x=0XC331);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC33A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC33D,	"Get input buffer",	0);
	create_insn	(x=0XC343);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC346,	"Check for Ctrl-Z in first character",	0);
	set_cmt	(0XC34F,	"c_LF",	0);
	set_cmt	(0XC351,	"Send linefeed",	0);
	create_insn	(x=0XC358);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XC358,	"DOS_WRITE");
	set_cmt	(0XC35C,	"[ES:DI+SF_ENTRY.sf_mode]",	0);
	set_cmt	(0XC360,	"open_mode_mask ?",	0);
	create_insn	(x=0XC360);
	op_hex		(x,	1);
	set_cmt	(0XC362,	"open_for_read",	0);
	set_cmt	(0XC369,	"[ES:DI+SF_ENTRY.sf_mode+1],\n(sf_isFCB>>8)",	0);
	create_insn	(x=0XC369);
	op_hex		(x,	1);
	set_cmt	(0XC36E,	"Not an FCB",	0);
	set_cmt	(0XC370,	"[ES:DI+SF_ENTRY.sf_attr],\nattr_read_only",	0);
	create_insn	(x=0XC370);
	op_hex		(x,	1);
	set_cmt	(0XC375,	"Can't write to Read_Only files via FCB",	0);
	set_cmt	(0XC37A,	"[ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)",	0);
	set_cmt	(0XC382,	"Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE\nES:DI -> SFT\nSFT DPB field -> DPB of drive containing file\nCX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer\nReturn: CF set on error, CX = bytes written",	0);
	create_insn	(x=0XC382);
	op_hex		(x,	0);
	set_cmt	(0XC385,	"[ES:DI+SF_ENTRY.sf_flags],devid_device\nCheck for named device I/O",	0);
	create_insn	(x=0XC385);
	op_hex		(x,	1);
	set_cmt	(0XC38C,	"errLOC_Disk",	0);
	create_insn	(x=0XC38C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC399);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC39D,	"[ES:DI+SF_ENTRY.sf_mode+1],\n(AUTO_COMMIT_WRITE>>8)",	0);
	create_insn	(x=0XC39D);
	op_hex		(x,	1);
	set_cmt	(0XC3AD,	"Media Byte, unit = 0",	0);
	create_insn	(0XC3AD);
	set_cmt	(0XC3B2,	"Save seg of transfer",	0);
	create_insn	(x=0XC3B3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC3B8,	"DS:SI -> DEVICE",	0);
	set_cmt	(0XC3BB,	"Offset part of Xaddr saved in DX",	0);
	create_insn	(x=0XC3BD);
	op_hex		(x,	1);
	create_insn	(x=0XC3BF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC3CB,	"[ss:CALLSCNT]",	0);
	create_insn	(x=0XC3CB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC3D0,	"update ptr & count to reflect\nnumber of chars xferred",	0);
	set_cmt	(0XC3D2,	"[ss:CALLSCNT]",	0);
	create_insn	(x=0XC3D2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC3D7,	"Recall transfer addr",	0);
	set_cmt	(0XC3DB,	"Ignore",	0);
	set_cmt	(0XC3E1,	"Recover saved seg of transfer",	0);
	set_cmt	(0XC3E2,	"Try again",	0);
	set_cmt	(0XC3E4,	"Chuck saved seg of transfer",	0);
	create_insn	(0XC3E4);
	set_cmt	(0XC3E5,	"Will pop one more stack element",	0);
	set_cmt	(0XC3E8,	"Chuck saved seg of transfer",	0);
	create_insn	(0XC3E8);
	set_cmt	(0XC3EA,	"[CALLSCNT]\nGet actual number of bytes transferred",	0);
	create_insn	(x=0XC3EA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC3ED);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC3F7,	"Entire transfer done",	0);
	create_insn	(0XC3F7);
	set_cmt	(0XC3FC,	"errLOC_SerDev",	0);
	create_insn	(x=0XC3FC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC401,	"[ES:DI+SF_ENTRY.sf_flags],\ndevid_device_EOF\nReset EOF for input",	0);
	create_insn	(x=0XC401);
	op_hex		(x,	1);
	set_cmt	(0XC406,	"[ES:DI+SF_ENTRY.sf_flags]",	0);
	set_cmt	(0XC40C,	"problem of creating on a device",	0);
	set_cmt	(0XC411,	"Xaddr to DS:BX",	0);
	create_insn	(x=0XC411);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC415,	"Xaddr to DS:DI",	0);
	set_cmt	(0XC417,	"Set starting point",	0);
	set_cmt	(0XC419,	"devid_device_raw",	0);
	create_insn	(x=0XC419);
	op_hex		(x,	1);
	set_cmt	(0XC41F,	"devid_device_con_out\nConsole output device?",	0);
	create_insn	(x=0XC41F);
	op_hex		(x,	1);
	set_cmt	(0XC421,	"yes",	0);
	set_cmt	(0XC423,	"devid_device_null",	0);
	create_insn	(x=0XC423);
	op_hex		(x,	1);
	set_cmt	(0XC429,	"^Z?",	0);
	set_cmt	(0XC42C,	"Yes, transfer nothing",	0);
	create_insn	(x=0XC436);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC43B,	"[SI+SF_ENTRY.sf_devptr]",	0);
	create_insn	(x=0XC447);
	op_hex		(x,	1);
	create_insn	(x=0XC449);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC456,	"[SS:CALLSCNT]",	0);
	create_insn	(x=0XC456);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC45F,	"Retry",	0);
	set_cmt	(0XC463,	"Ignore",	0);
	set_cmt	(0XC465,	"Fail, pops one stack element",	0);
	create_insn	(0XC468);
	set_cmt	(0XC469,	"[SS:CALLSCNT]",	0);
	create_insn	(x=0XC469);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC472,	"[SS:CALLXAD]",	0);
	create_insn	(x=0XC472);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC47C,	"[SS:CALLXAD+2]",	0);
	create_insn	(x=0XC47C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC481,	"^Z?",	0);
	create_insn	(x=0XC487);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XC490);
	create_insn	(0XC496);
	create_insn	(x=0XC4A0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XC4A8,	"set bit 4",	0);
	create_insn	(x=0XC4A8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XC4AF,	"^Z?",	0);
	set_cmt	(0XC4B1,	"yes",	0);
	set_cmt	(0XC4B8,	"clear/reset bit 4",	0);
	create_insn	(x=0XC4B8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XC4C3,	"Count",	0);
	set_cmt	(0XC4C4,	"Amount actually written",	0);
	set_cmt	(0XC4CD,	"Convert JFN num in BX to sf_entry in DS:SI",	0);
	create_insn	(x=0XC4CD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC4CD,	"GET_IO_SFT");
	create_insn	(0XC4E7);
	create_insn	(x=0XC4EC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC4F3,	"error_I24_wrong_disk",	0);
	create_insn	(0XC4F3);
	set_name	(0XC4F3,	"HARDERRRW");
	create_insn	(x=0XC4F8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC4FC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC500);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC504);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC50D,	"[ES:DI+SF_ENTRY.sf_devptr]",	0);
	create_insn	(0XC50D);
	set_name	(0XC50D,	"SETUP");
	create_insn	(x=0XC511);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC518);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC51C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC520);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC524);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC529,	"[ES:DI+SF_ENTRY.sf_position]",	0);
	create_insn	(x=0XC52E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC532,	"ES:DI+SF_ENTRY.sf_flags],\nsf_isnet+devid_device",	0);
	create_insn	(x=0XC532);
	op_hex		(x,	1);
	create_insn	(x=0XC53B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC53F,	"ES:BP+DPB.DRIVE]",	0);
	create_insn	(x=0XC543);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC547,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0XC553);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC557);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC55D,	"[ES:BP+DPB.CLUSTER_MASK]",	0);
	create_insn	(x=0XC561);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC566,	"[ES:BP+DPB.CLUSTER_SHIFT]",	0);
	set_cmt	(0XC56E,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0XC573,	"not FAT32",	0);
	set_cmt	(0XC575,	"[ES:BP+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0XC57B,	"[ES:BP+DPB.LAST_CLUSTER]",	0);
	create_insn	(0XC57B);
	create_insn	(x=0XC582);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC585);
	op_dec		(x,	1);
	create_insn	(x=0XC589);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC58F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC595);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XC5A2);
	create_insn	(0XC5A8);
	set_name	(0XC5A8,	"FINDENTRY");
	create_insn	(x=0XC5AB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC5AE,	"~attr_ignore",	0);
	create_insn	(x=0XC5AE);
	op_hex		(x,	1);
	set_cmt	(0XC5B0,	"attr_volume_id",	0);
	set_cmt	(0XC5BE,	"reset long name entry count",	0);
	create_insn	(x=0XC5BE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC5BE,	"SRCH");
	create_insn	(x=0XC5C5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC5C9,	"[BX+dir_entry.dir_name]",	0);
	set_cmt	(0XC5CB,	"[BX+dir_entry.dir_attr]",	0);
	create_insn	(x=0XC5D7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC5DE,	"[BX+dir_entry.dir_attr],\nattr_volume_id",	0);
	create_insn	(x=0XC5DE);
	op_hex		(x,	1);
	create_insn	(x=0XC5E4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC5EF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC5F2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XC5FA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC606);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XC606,	"NEXTENT");
	create_insn	(0XC611);
	create_insn	(x=0XC612);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC616);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC61C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC620);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC626);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XC62D);
	create_insn	(x=0XC62E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XC639);
	create_insn	(x=0XC63C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC640,	"~attr_ignore",	0);
	create_insn	(x=0XC640);
	op_hex		(x,	1);
	set_cmt	(0XC643,	"[SI+dir_entry.dir_first-dir_entry.dir_attr]",	0);
	set_cmt	(0XC646,	"attr_volume_id",	0);
	create_insn	(x=0XC646);
	op_hex		(x,	1);
	set_cmt	(0XC64B,	"attr_volume_id",	0);
	create_insn	(x=0XC64B);
	op_hex		(x,	1);
	set_cmt	(0XC654,	"attr_volume_id",	0);
	create_insn	(0XC654);
	set_cmt	(0XC65E,	"-1",	0);
	create_insn	(x=0XC65E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XC665);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC669,	"[ES:BP+DPB.DRIVE]",	0);
	create_insn	(x=0XC66F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC673,	"previous ENTLAST",	0);
	create_insn	(x=0XC673);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC679,	"reset long name entry count",	0);
	create_insn	(x=0XC679);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC680);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XC680,	"NEXTENTRY");
	create_insn	(x=0XC683);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC68A);
	op_dec		(x,	1);
	create_insn	(x=0XC691);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC698);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC69F,	"[es:bp+DPB.ROOT_ENTRIES]\nNumber of root directory entries",	0);
	create_insn	(x=0XC6A7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC6AD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC6B3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC6B7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC6BB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC6C4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XC6D2);
	create_insn	(x=0XC6D4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC6D8,	"nextentry_retn");
	create_insn	(x=0XC6D9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC6DD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC6E1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC6E5,	"[DI+BUFFINFO.buf_sector+2]",	0);
	create_insn	(x=0XC6E8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XC6ED,	"[DI+BUFFINFO.buf_sector]",	0);
	create_insn	(x=0XC6F3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC701);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XC701,	"GETENTRY");
	create_insn	(x=0XC704);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC704,	"GETENT");
	create_insn	(x=0XC707);
	op_hex		(x,	1);
	set_cmt	(0XC70C,	"~(32-1)",	0);
	create_insn	(x=0XC70C);
	op_hex		(x,	1);
	create_insn	(x=0XC70F);
	op_hex		(x,	1);
	set_cmt	(0XC712,	" [ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0XC716);
	op_hex		(x,	1);
	create_insn	(x=0XC722);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XC722,	"SETENTRY");
	set_cmt	(0XC726,	"BUFINSIZ",	0);
	create_insn	(x=0XC726);
	op_dec		(x,	1);
	set_cmt	(0XC72B,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_byte	(x=0XC731);
	make_array	(x,	0X14);
	op_dec		(x,	0);
	set_name	(0XC731,	"sft_fcb_table");
	create_word	(0XC745);
	make_array	(0XC745,	0X2);
	set_name	(0XC745,	"sftfcb.cluster");
	create_word	(0XC749);
	set_name	(0XC749,	"sftfcb.direntry");
	create_byte	(x=0XC74B);
	make_array	(x,	0X72);
	op_dec		(x,	0);
	create_dword	(0XC7BD);
	set_name	(0XC7BD,	"SRCH_CLUSTER");
	create_insn	(x=0XC7C1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC7C1,	"SETDIRSRCH");
	create_insn	(x=0XC7CC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XC7CC,	"SETDIRSRCH_FAT32");
	create_insn	(x=0XC7CF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC7D2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC7D5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC7DF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC7EA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC7EE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC7F2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC7FB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC808);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC80F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC813);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC817);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC81E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC81E,	"SETROOTSRCH");
	set_cmt	(0XC829,	"not FAT32",	0);
	set_cmt	(0XC82B,	"DPB.ROOT_CLUSTER",	0);
	set_name	(0XC82B,	"SETROOTSRCH_FAT32");
	set_cmt	(0XC830,	"DPB.LAST_CLUSTER",	0);
	create_insn	(x=0XC83D);
	op_dec		(x,	1);
	create_insn	(x=0XC841);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC845);
	op_dec		(x,	1);
	create_insn	(0XC84B);
	create_insn	(0XC84E);
	create_insn	(x=0XC850);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC853);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC860);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC864);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC867);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC879);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC87C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XC883);
	set_name	(0XC883,	"set_sftfcb_entry");
	create_insn	(x=0XC889);
	op_dec		(x,	1);
	set_cmt	(0XC88C,	"sftfcb.cluster",	0);
	create_insn	(x=0XC88C);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0XC89C);
	create_insn	(x=0XC8A2);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(x=0XC8AC);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(x=0XC8B2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC8B7,	"sftfcb.direntry",	0);
	create_insn	(x=0XC8B7);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(x=0XC8C5);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0XC8CC);
	set_name	(0XC8CC,	"find_sft_entry_number");
	create_insn	(x=0XC8D6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC8E8);
	op_dec		(x,	1);
	create_insn	(0XC8F0);
	create_insn	(0XC8FF);
	set_name	(0XC8FF,	"int_2Fh_1230h");
	create_insn	(x=0XC908);
	op_dec		(x,	1);
	create_insn	(x=0XC90B);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XC916);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XC91C);
	op_hex		(x,	1);
	create_insn	(x=0XC920);
	op_hex		(x,	1);
	create_insn	(x=0XC922);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(x=0XC932);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XC937);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XC93C);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(0XC948);
	set_name	(0XC948,	"SFT_FREE");
	set_cmt	(0XC949,	"[ES:DI+SF_ENTRY.sf_ref_Count]",	0);
	create_insn	(x=0XC953);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(x=0XC95F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC95F,	"GETPATH");
	create_insn	(x=0XC965);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XC965,	"GetPathNoSet");
	create_insn	(x=0XC96A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC970);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XC974,	"':\\'",	0);
	create_insn	(x=0XC985);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC988);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC98B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC992);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC995);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XC9B3);
	create_insn	(x=0XC9B5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC9BA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC9C9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC9D6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC9DD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XC9E3);
	op_hex		(x,	1);
	create_insn	(x=0XC9E7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XC9EB);
	op_hex		(x,	1);
	create_insn	(x=0XC9EF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XC9FA);
	create_insn	(0XC9FE);
	set_name	(0XC9FE,	"CHKDEV");
	create_insn	(x=0XCA04);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XCA1F);
	create_insn	(0XCA2E);
	create_insn	(x=0XCA36);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCA3C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCA3F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XCA45);
	create_insn	(x=0XCA49);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCA4D);
	op_dec		(x,	1);
	create_insn	(x=0XCA51);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCA55);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCA5C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCA62);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCA66,	"[ES:DI+curdir.ID]",	0);
	create_insn	(x=0XCA93);
	op_hex		(x,	1);
	create_insn	(0XCA99);
	create_insn	(x=0XCAA9);
	op_hex		(x,	1);
	create_insn	(0XCAAF);
	create_insn	(x=0XCAB2);
	op_hex		(x,	1);
	create_insn	(0XCABE);
	create_insn	(x=0XCAC5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCAC9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XCADD);
	create_insn	(x=0XCAE1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCAE8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCAFB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCAFF,	"[BX+dir_entry.dir_attr],attr_directory",	0);
	create_insn	(x=0XCAFF);
	op_hex		(x,	1);
	create_insn	(x=0XCB08);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XCB1E);
	set_cmt	(0XCB23,	"dir_entry.dir_fclus_hi",	0);
	create_insn	(x=0XCB26);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XCB2B,	"dir_entry.dir_first",	0);
	set_cmt	(0XCB2D,	"[es:bp+DPB.FAT_SIZE]",	0);
	create_insn	(x=0XCB34);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCB4F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCB55);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XCB6A);
	create_insn	(x=0XCB6D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XCB87);
	create_insn	(0XCB8C);
	create_insn	(0XCB99);
	create_insn	(0XCB9C);
	create_insn	(x=0XCBA3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCBA6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCBAB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XCBAB,	"STARTSRCH");
	create_insn	(x=0XCBB1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCBB4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCBB8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCBBB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XCBBF);
	set_name	(0XCBBF,	"MatchAttributes");
	create_insn	(x=0XCBC0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCBC8);
	op_hex		(x,	1);
	create_insn	(0XCBCC);
	set_name	(0XCBCC,	"DEVNAME");
	create_insn	(x=0XCBD0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCBD4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCBDB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XCBE0,	"attr_volume_id",	0);
	create_insn	(x=0XCBE0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XCBE7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCBEA,	"[SI+SYSDEV.ATT],DEVTYP",	0);
	create_insn	(x=0XCBEA);
	op_hex		(x,	1);
	set_cmt	(0XCBF3,	"SYSDEV.NAME",	0);
	create_insn	(x=0XCBF3);
	op_dec		(x,	1);
	create_insn	(x=0XCBF6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCC0F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCC18);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XCC1D,	"[SI+SYSDEV.ATT]",	0);
	create_insn	(x=0XCC20);
	op_hex		(x,	1);
	create_insn	(x=0XCC23);
	op_hex		(x,	1);
	create_insn	(x=0XCC26);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XCC2D);
	set_name	(0XCC2D,	"Build_device_ent");
	set_cmt	(0XCC30,	"DEVFCB+8",	0);
	create_insn	(x=0XCC30);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCC35,	"attr_device",	0);
	create_insn	(x=0XCC35);
	op_hex		(x,	1);
	create_insn	(x=0XCC3A);
	op_dec		(x,	1);
	set_cmt	(0XCC42,	"DEVFCB+dir_entry.dir_time",	0);
	create_insn	(x=0XCC42);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCC4B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCC4F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCC55,	"DEVFCB",	0);
	create_insn	(x=0XCC55);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XCC5B);
	set_name	(0XCC5B,	"ValidateCDS");
	create_insn	(x=0XCC5E);
	op_hex		(x,	1);
	create_insn	(x=0XCC61);
	op_stkvar	(x,	0);
	create_insn	(x=0XCC64);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCC69);
	op_stkvar	(x,	0);
	create_insn	(x=0XCC6C);
	op_stkvar	(x,	0);
	set_cmt	(0XCC72,	"[SI+curdir.flags],curdir_isnet",	0);
	create_insn	(x=0XCC72);
	op_hex		(x,	1);
	create_insn	(0XCC7C);
	create_insn	(x=0XCC93);
	op_stkvar	(x,	1);
	create_insn	(x=0XCC99);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCCA3);
	op_stkvar	(x,	1);
	set_cmt	(0XCCAB,	"FatReadCDS (ThisCDS);",	0);
	create_insn	(x=0XCCAD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCCB1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCCBC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCCC0,	"if (ThisCDS->ID == -1) {",	0);
	create_insn	(x=0XCCC9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCCCE);
	op_stkvar	(x,	1);
	create_insn	(x=0XCCD3);
	op_stkvar	(x,	1);
	create_insn	(x=0XCCD6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCCE0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCCEA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCCEE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCCF2);
	op_stkvar	(x,	1);
	create_insn	(x=0XCCF7);
	op_dec		(x,	1);
	create_insn	(x=0XCCFB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCD00);
	op_dec		(x,	1);
	create_insn	(x=0XCD06);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCD0B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCD16);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCD1B,	"[SI+curdir.flags],curdir_splice",	0);
	create_insn	(x=0XCD1B);
	op_hex		(x,	1);
	set_cmt	(0XCD28,	"[SI+curdir.ID]",	0);
	create_insn	(x=0XCD2C);
	op_stkvar	(x,	1);
	create_insn	(x=0XCD2F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCD34);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCD3D);
	op_stkvar	(x,	1);
	create_insn	(0XCD44);
	set_name	(0XCD44,	"CheckThisDevice");
	create_insn	(x=0XCD51);
	op_hex		(x,	1);
	set_cmt	(0XCD54,	"'de' ; (NASM syntax)",	0);
	create_insn	(x=0XCD5A);
	op_hex		(x,	1);
	create_insn	(x=0XCD73);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCD76);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XCD86);
	create_word	(0XCD89);
	create_word	(0XCD8B);
	create_word	(0XCD8D);
	set_name	(0XCD8D,	"SC_SECTOR_SIZE");
	create_byte	(0XCD8F);
	set_name	(0XCD8F,	"SC_DRIVE");
	create_byte	(0XCD90);
	set_name	(0XCD90,	"CurSC_DRIVE");
	create_word	(0XCD91);
	make_array	(0XCD91,	0X2);
	set_name	(0XCD91,	"CurSC_SECTOR");
	create_word	(0XCD95);
	set_name	(0XCD95,	"SC_STATUS");
	create_byte	(0XCD97);
	set_name	(0XCD97,	"SC_FLAG");
	set_cmt	(0XCD98,	"DRDWRHL",	0);
	create_byte	(x=0XCD98);
	op_dec		(x,	0);
	set_name	(0XCD98,	"LenTab");
	set_cmt	(0XCD99,	"DRDNDHL",	0);
	create_byte	(x=0XCD99);
	op_dec		(x,	0);
	set_cmt	(0XCD9A,	"DRDWRHL",	0);
	create_byte	(x=0XCD9A);
	op_dec		(x,	0);
	set_cmt	(0XCD9B,	"DSTATHL",	0);
	create_byte	(x=0XCD9B);
	op_dec		(x,	0);
	set_cmt	(0XCD9C,	"DFLSHL",	0);
	create_byte	(x=0XCD9C);
	op_dec		(x,	0);
	set_cmt	(0XCD9D,	"DRDNDHL",	0);
	create_byte	(x=0XCD9D);
	op_dec		(x,	0);
	create_byte	(0XCD9E);
	set_name	(0XCD9E,	"CmdTab");
	set_cmt	(0XCD9F,	"DEVRD   ; 0 input",	0);
	create_byte	(0XCD9F);
	create_byte	(0XCDA0);
	set_cmt	(0XCDA1,	"DEVRDND ; 1 input status",	0);
	create_byte	(0XCDA1);
	create_byte	(0XCDA2);
	set_cmt	(0XCDA3,	"DEVWRT  ; 2 output",	0);
	create_byte	(0XCDA3);
	create_byte	(0XCDA4);
	set_cmt	(0XCDA5,	"DEVOST  ; 3 output status",	0);
	create_byte	(x=0XCDA5);
	op_dec		(x,	0);
	create_byte	(0XCDA6);
	set_cmt	(0XCDA7,	"DEVIFL  ; 4 input flush",	0);
	create_byte	(0XCDA7);
	create_byte	(0XCDA8);
	set_cmt	(0XCDA9,	"DEVRDND ; 5 input status with system WAIT",	0);
	create_byte	(0XCDA9);
	create_insn	(x=0XCDAA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XCDAA,	"IOFUNC");
	create_insn	(x=0XCDAF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCDB6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCDBD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XCDC1,	"[SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)",	0);
	create_insn	(x=0XCDC1);
	op_hex		(x,	1);
	set_cmt	(0XCDCA,	"[SI+SF_ENTRY.sf_flags],devid_device",	0);
	create_insn	(x=0XCDCA);
	op_hex		(x,	1);
	create_insn	(0XCDD3);
	set_cmt	(0XCDE1,	"system wait enabled?",	0);
	set_cmt	(0XCDE6,	"Set bit 10 in status word for driver",	0);
	create_insn	(x=0XCDE6);
	op_hex		(x,	1);
	create_insn	(x=0XCDEA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCDF0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XCDF4,	"get function",	0);
	create_insn	(x=0XCDF6);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XCDFB);
	op_hex		(x,	1);
	create_insn	(x=0XCDFD);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XCE02);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCE05,	"[IOCALL_REQLEN]",	0);
	create_insn	(x=0XCE05);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCE09);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCE12);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCE1F,	"DEVRDND",	0);
	set_cmt	(0XCE24,	"[IORCHR]",	0);
	create_insn	(x=0XCE24);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCE27);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCE2A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCE2E,	"Zero = busy, not zero = ready",	0);
	set_cmt	(0XCE30,	"STBUI>>8",	0);
	create_insn	(x=0XCE30);
	op_hex		(x,	1);
	create_insn	(x=0XCE38);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCE42);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCE49);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XCE4F);
	set_cmt	(0XCE5F,	"[SS:IOCALL_REQSTAT+1],\n~(STBUI>>8)",	0);
	create_insn	(x=0XCE5F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XCE69,	"set flag indicating fail on I24",	0);
	create_insn	(x=0XCE69);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XCE70);
	set_cmt	(0XCE7D,	"'PIPE' ; (NASM syntax)",	0);
	create_insn	(0XCE7D);
	set_cmt	(0XCE87,	"'STDX' ; (NASM syntax)",	0);
	set_cmt	(0XCE91,	"[SI+SF_ENTRY.sf_position]",	0);
	create_insn	(0XCE9D);
	set_cmt	(0XCEA3,	"(Write to PIPE?)",	0);
	create_insn	(x=0XCEA6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCEAB,	"Multiplex - ",	0);
	create_insn	(x=0XCEAB);
	op_hex		(x,	0);
	create_insn	(x=0XCEB6);
	op_hex		(x,	1);
	create_insn	(0XCEBC);
	create_insn	(0XCEC2);
	set_name	(0XCECB,	"IOUT_retn");
	create_insn	(0XCECC);
	set_name	(0XCECC,	"IOIN");
	create_insn	(x=0XCECF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XCED8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XCEE3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCEEC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XCEEC,	"SETXADDR");
	create_insn	(x=0XCEF5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCEFB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCF02);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCF06);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCF0A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCF0E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCF12);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCF16);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCF1C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XCF1C,	"RESTXADDR");
	create_insn	(x=0XCF20);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCF29);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XCF29,	"RESTRET");
	create_insn	(0XCF2E);
	set_name	(0XCF2E,	"DEV_OPEN_SFT");
	set_cmt	(0XCF32,	"DEVOPN",	0);
	create_insn	(0XCF36);
	set_name	(0XCF36,	"DEV_CLOSE_SFT");
	set_cmt	(0XCF3A,	"DEVCLS",	0);
	set_cmt	(0XCF3C,	"[es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)",	0);
	create_insn	(x=0XCF3C);
	op_hex		(x,	1);
	set_name	(0XCF3C,	"DO_OPCLS");
	set_cmt	(0XCF45,	"[ES:DI+SF_ENTRY.sf_flags],devid_device",	0);
	create_insn	(x=0XCF45);
	op_hex		(x,	1);
	set_cmt	(0XCF4A,	"[ES:DI+SF_ENTRY.sf_devptr]",	0);
	set_cmt	(0XCF5A,	"[ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)",	0);
	create_insn	(x=0XCF5A);
	op_hex		(x,	1);
	set_cmt	(0XCF67,	"DEVCALL",	0);
	create_insn	(x=0XCF67);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XCF6D,	"DOPCLHL",	0);
	set_cmt	(0XCF6F,	"Length",	0);
	set_cmt	(0XCF73,	"Unit",	0);
	set_cmt	(0XCF76,	"Command",	0);
	set_cmt	(0XCF77,	"Status",	0);
	set_cmt	(0XCF88,	"[SI+SYSDEV.ATT+1],(DEVTYP>>8)",	0);
	create_insn	(x=0XCF88);
	op_hex		(x,	1);
	create_insn	(0XCF92);
	create_insn	(0XCFA0);
	create_insn	(0XCFA6);
	set_name	(0XCFA6,	"DEVIOCALL");
	set_cmt	(0XCFA9,	"for Block Device(s)",	0);
	create_insn	(x=0XCFA9);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_name	(0XCFA9,	"DEVIOCALL2");
	create_insn	(x=0XCFAC);
	op_hex		(x,	1);
	set_cmt	(0XCFB1,	"block device",	0);
	set_cmt	(0XCFB3,	"CONSOLE INPUT/OUTPUT",	0);
	create_insn	(x=0XCFB3);
	op_hex		(x,	1);
	set_cmt	(0XCFBA,	"for Character Device(s)",	0);
	create_insn	(x=0XCFBA);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XCFBF);
	op_hex		(x,	1);
	create_insn	(x=0XCFDF);
	op_hex		(x,	1);
	create_insn	(x=0XCFE9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCFED);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCFF4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XCFF8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XCFFC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD002);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD012);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD01A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD01E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD023);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD02B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD02F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD034);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD046);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0XD049,	"[SI+SYSDEV.ATT],DEVTYP",	0);
	create_insn	(x=0XD049);
	op_hex		(x,	1);
	set_cmt	(0XD04E,	"block device",	0);
	set_cmt	(0XD050,	"ISCOUT | ISCIN  ; console input/ooutput",	0);
	create_insn	(x=0XD050);
	op_hex		(x,	1);
	set_cmt	(0XD055,	"no",	0);
	create_insn	(x=0XD057);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(0XD05D);
	set_name	(0XD05D,	"SETREAD");
	set_cmt	(0XD060,	"DEVRD",	0);
	set_cmt	(0XD062,	"DRDWRHL",	0);
	create_insn	(x=0XD062);
	op_dec		(x,	1);
	set_name	(0XD062,	"SETCALLHEAD");
	set_cmt	(0XD066,	"DEVCALL",	0);
	create_insn	(x=0XD066);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD069,	"length",	0);
	set_cmt	(0XD06B,	"Unit",	0);
	set_cmt	(0XD06F,	"Command code",	0);
	set_cmt	(0XD072,	"Status",	0);
	set_cmt	(0XD079,	"Media byte",	0);
	set_cmt	(0XD07F,	"Transfer addr",	0);
	set_cmt	(0XD085,	"Count",	0);
	set_cmt	(0XD087,	"Start",	0);
	set_cmt	(0XD08C,	"DEVCALL",	0);
	create_insn	(x=0XD08C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XD090);
	set_name	(0XD090,	"SETWRITE");
	set_cmt	(0XD093,	"DEVWRT",	0);
	create_insn	(x=0XD095);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD09C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XD09C,	"BUILDDIR");
	create_insn	(x=0XD0A6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD0AD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD0B6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XD0B6,	"NEWDIR");
	create_insn	(x=0XD0BA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD0BE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD0C6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD0D1,	"2097152",	0);
	set_cmt	(0XD0D7,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	set_cmt	(0XD0E3,	"[ES:BP+DPB.CLUSTER_SHIFT]",	0);
	create_insn	(x=0XD0EA);
	op_dec		(x,	1);
	set_cmt	(0XD0EE,	"cluster count (index), hw",	0);
	create_insn	(x=0XD0EE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD0F2);
	op_dec		(x,	1);
	create_insn	(x=0XD0FB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD10B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD111);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD117);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD11B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD124);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD12C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD131);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD135);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD139);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD141);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD147);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD14B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD14F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD15A,	"[ES:BP+DPB.CLUSTER_MASK]",	0);
	set_cmt	(0XD163,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0XD163);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD171,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(0XD171);
	create_insn	(x=0XD176);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD17A,	"[ES:DI+BUFFINFO.buf_flags],buf_isDIR",	0);
	create_insn	(x=0XD17A);
	op_hex		(x,	1);
	create_insn	(x=0XD180);
	op_dec		(x,	1);
	create_insn	(x=0XD185);
	op_hex		(x,	1);
	set_cmt	(0XD18D,	"[ES:DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XD18D);
	op_hex		(x,	1);
	create_insn	(x=0XD197);
	op_hex		(x,	1);
	create_insn	(x=0XD1A1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD1A8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD1AE,	"set up a . or .. directory entry\n for a directory",	0);
	create_insn	(0XD1AE);
	set_name	(0XD1AE,	"SETDOTENT");
	set_cmt	(0XD1B8,	"Set up attribute",	0);
	set_cmt	(0XD1BB,	"Initialize time and date of creation",	0);
	create_insn	(x=0XD1BB);
	op_dec		(x,	1);
	create_insn	(x=0XD1BE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD1C2,	"[BX+SF_ENTRY.sf_time]",	0);
	set_cmt	(0XD1C6,	"[BX+SF_ENTRY.sf_date]",	0);
	create_insn	(x=0XD1CA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD1D2,	"last access date/time flag\n or disk accessed flag",	0);
	create_insn	(x=0XD1D2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XD1DB,	"windows (OS running) bit ?",	0);
	create_insn	(x=0XD1DB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XD1E2,	"last access date",	0);
	create_insn	(x=0XD1E7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD1EA,	"Set up first cluster field, hw",	0);
	set_cmt	(0XD1F6,	"DIRFREE*256 + 0FFh\nCreating, not DEL *.*",	0);
	create_insn	(x=0XD1F6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XD1F6,	"MakeNode");
	create_insn	(x=0XD1FD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD202);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD20A,	"Device ID to CH",	0);
	set_cmt	(0XD20E,	"attr_volume_id",	0);
	create_insn	(x=0XD20E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XD215,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0XD21A,	"not FAT32",	0);
	create_insn	(x=0XD21D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD221,	"[es:di+SF_Entry.sf_mode]\nbit 15, remote file (if 1)",	0);
	create_insn	(x=0XD221);
	op_hex		(x,	1);
	create_insn	(0XD234);
	set_cmt	(0XD235,	"File existed",	0);
	set_cmt	(0XD237,	"Path bad",	0);
	set_cmt	(0XD239,	"Check \"CL\" return from GETPATH",	0);
	set_cmt	(0XD23C,	"jz short make_type\nName simply not found, and no metas",	0);
	set_cmt	(0XD23E,	"case 1 bad path",	0);
	set_name	(0XD240,	"make_err_ret");
	set_cmt	(0XD244,	"EXT_OPEN_ON",	0);
	create_insn	(x=0XD244);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XD244,	"RENAME_MAKE");
	set_cmt	(0XD24B,	"EXT_FILE_NOT_EXISTS",	0);
	create_insn	(x=0XD24B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XD250);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XD258,	"file not found",	0);
	create_insn	(x=0XD25C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD260,	"nothing exists Disk Node",	0);
	set_cmt	(0XD262,	"Not found",	0);
	create_insn	(0XD265);
	set_cmt	(0XD267,	"file exists type 3\n (error or device node)",	0);
	set_cmt	(0XD269,	"attr_volume_id+attr_directory",	0);
	create_insn	(x=0XD269);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XD272,	"No further checks on attributes if device",	0);
	set_cmt	(0XD276,	"truncating NOT OK (AL = 3)",	0);
	set_cmt	(0XD278,	"Save device ID",	0);
	create_insn	(x=0XD279);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD27D,	"[ES:BX+dir_entry.dir_attr]\nGet file attributes",	0);
	set_cmt	(0XD281,	"attr_read_only",	0);
	create_insn	(x=0XD281);
	op_hex		(x,	1);
	set_cmt	(0XD289,	"Devid back in CH",	0);
	set_cmt	(0XD28C,	"AL = 0, Disk Node",	0);
	set_cmt	(0XD292,	"Device ID to AH",	0);
	set_cmt	(0XD294,	"Fill in SFT",	0);
	create_insn	(x=0XD297);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD29B,	"[es:di+SF_ENTRY.sf_MFT]\n (indicate free SFT)",	0);
	create_insn	(0XD2A3);
	set_name	(0XD2A3,	"Make_Share_ret");
	set_cmt	(0XD2A7,	"Get back device ID",	0);
	create_insn	(0XD2A7);
	set_cmt	(0XD2A8,	"Attribute mismatch",	0);
	set_cmt	(0XD2AC,	" exists as directory, always an error",	0);
	create_insn	(0XD2AC);
	create_insn	(0XD2B0);
	set_name	(0XD2B0,	"make_save");
	set_cmt	(0XD2B1,	"Device ID to AH",	0);
	set_cmt	(0XD2B6,	"0 if Disk, 3 if File",	0);
	create_insn	(0XD2BA);
	set_name	(0XD2BC,	"make_save_retn");
	create_insn	(0XD2BD);
	set_cmt	(0XD2C2,	"attr_directory",	0);
	create_insn	(x=0XD2C2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XD2C9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD2CD,	"[es:di+SF_ENTRY.sf_MFT]\n (indicate free SFT)",	0);
	create_insn	(0XD2D5);
	create_insn	(x=0XD2D6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD2DA,	"DIRFREE ; nuke newly created entry",	0);
	set_cmt	(0XD2DE,	"[ES:DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XD2DE);
	op_hex		(x,	1);
	create_insn	(x=0XD2E8);
	op_hex		(x,	1);
	create_insn	(x=0XD2ED);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XD2ED,	"yesdirty8");
	set_cmt	(0XD2F1,	"get drive for flush",	0);
	set_cmt	(0XD2F5,	"write out buffer",	0);
	create_insn	(0XD2FB);
	create_insn	(x=0XD302);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD306,	"[es:di+SF_ENTRY.sf_MFT]\nclean out sharing info (indicate free SFT)",	0);
	set_name	(0XD30C,	"makeendshare_ret");
	create_insn	(x=0XD30D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XD30D,	"NEWENTRY");
	create_insn	(x=0XD313);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD31B,	"Try to build dir",	0);
	set_cmt	(0XD320,	"Point at that free entry",	0);
	create_insn	(0XD327);
	set_cmt	(0XD329,	"Check if file is I/O device",	0);
	create_insn	(0XD329);
	set_cmt	(0XD330,	"Free cluster chain",	0);
	create_insn	(0XD330);
	set_cmt	(0XD335,	"attr_volume_id",	0);
	create_insn	(x=0XD335);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XD33C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD341,	"Can't create a second volume ID",	0);
	create_insn	(x=0XD343);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD349);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD34F,	"Move name into dir entry",	0);
	create_insn	(x=0XD352);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD355,	"Attributes",	0);
	set_cmt	(0XD358,	"Zero pad",	0);
	set_cmt	(0XD360,	"dir_time",	0);
	create_insn	(x=0XD364);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD36C,	"last access date/time flag\n or disk accessed flag",	0);
	create_insn	(x=0XD36C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XD376,	"windows (OS running) bit ?",	0);
	create_insn	(x=0XD376);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XD37B,	"yes",	0);
	set_cmt	(0XD37D,	"last access date",	0);
	set_cmt	(0XD381,	"dir_date",	0);
	create_insn	(x=0XD388);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD38C);
	op_hex		(x,	1);
	set_cmt	(0XD396,	"ES:SI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XD396);
	op_hex		(x,	1);
	create_insn	(x=0XD39B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD39F,	"[ES:BP+DPB.DRIVE]",	0);
	create_insn	(x=0XD3A7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD3AB,	"[ES:DI+SF_ENTRY.sf_flags],devid_device",	0);
	create_insn	(x=0XD3AB);
	op_hex		(x,	1);
	create_insn	(x=0XD3B4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD3C7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD3DC,	"AH to different place",	0);
	create_insn	(0XD3DC);
	set_name	(0XD3DC,	"DOOPEN");
	create_insn	(x=0XD3E4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD3E8,	"[es:di+DPB.FAT_SIZE]",	0);
	set_cmt	(0XD3ED,	"FAT32",	0);
	create_insn	(x=0XD3F1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD3F5,	"SF_ENTRY.sf_attr\nSkip ref_count and mode fields",	0);
	create_insn	(x=0XD3FE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD402,	"[BX+dir_entry.dir_attr]",	0);
	set_cmt	(0XD405,	"sf_attr, ES:DI -> sf_flags",	0);
	set_cmt	(0XD40A,	"devid_file_clean",	0);
	create_insn	(x=0XD40A);
	op_hex		(x,	1);
	set_cmt	(0XD40C,	"sf_flags, ES:DI -> sf_devptr",	0);
	set_cmt	(0XD40E,	"[BX+dir_entry.dir_first] ; Assume device",	0);
	set_cmt	(0XD415,	"Was file",	0);
	create_insn	(x=0XD415);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD41A,	"store offset",	0);
	set_cmt	(0XD41E,	"store segment, ES:DI -> sf_firclus",	0);
	set_cmt	(0XD422,	"SF_ENTRY.sf_firclus = 0",	0);
	set_cmt	(0XD423,	"first cluster, hw",	0);
	set_cmt	(0XD42A,	"0",	0);
	create_insn	(x=0XD42C);
	op_dec		(x,	1);
	set_cmt	(0XD430,	"dir_first, first cluster, lw",	0);
	set_cmt	(0XD431,	"SF_ENTRY.sf_chain ; first cluster (32 bit)",	0);
	set_cmt	(0XD436,	"sub si, dir_entry.dir_size_l - dir_entry.dir_time",	0);
	set_cmt	(0XD439,	"dir_time -> sf_time",	0);
	set_cmt	(0XD43A,	"dir_date -> sf_date",	0);
	set_cmt	(0XD43B,	"skip dir_first, DS:SI -> dir_size_l",	0);
	set_cmt	(0XD43C,	"dir_size_l in AX, DS:SI -> dir_size_h",	0);
	set_cmt	(0XD43D,	"dir_size_l in CX",	0);
	set_cmt	(0XD43F,	"dir_size_h (size AX:CX), DS:SI -> ????",	0);
	set_cmt	(0XD444,	"0",	0);
	set_cmt	(0XD446,	"Devices are open ended",	0);
	set_cmt	(0XD449,	"Low word of sf_size",	0);
	set_cmt	(0XD44B,	"High word of sf_size, ES:DI -> sf_position",	0);
	set_cmt	(0XD44C,	"0",	0);
	set_cmt	(0XD44F,	"sf_position = 0, ES:DI -> sf_cluspos",	0);
	set_cmt	(0XD454,	"sf_cluspos ; 19h",	0);
	set_cmt	(0XD456,	"sub di,SF_ENTRY.sf_dirsec ; es:di -> SFT",	0);
	set_cmt	(0XD459,	"[ES:DI+SF_ENTRY.sf_chain] ; 43\nfirst cluster (32 bit)",	0);
	set_cmt	(0XD45E,	"[es:di+SF_ENTRY.sf_lstclus-SF_ENTRY.sf_dirsec]",	0);
	create_insn	(x=0XD464);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD469,	"[SI+BUFFINFO.buf_sector]",	0);
	set_cmt	(0XD46C,	"sf_dirsec, lw ; 27",	0);
	set_cmt	(0XD46D,	"[SI+BUFFINFO.buf_sector+2]",	0);
	set_cmt	(0XD470,	"sf_dirsec, hw ; 29",	0);
	set_cmt	(0XD473,	"BUFINSIZ ; DS:SI-> start of data in buffer",	0);
	create_insn	(x=0XD473);
	op_dec		(x,	1);
	set_cmt	(0XD476,	"AX = BX relative to start of sector",	0);
	set_cmt	(0XD478,	"dir_entry.size",	0);
	create_insn	(x=0XD478);
	op_dec		(x,	1);
	set_cmt	(0XD47C,	"sf_dirpos ; 31",	0);
	set_cmt	(0XD47F,	"SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos",	0);
	create_insn	(0XD47F);
	set_cmt	(0XD482,	"DS:SI points to dir_name",	0);
	create_insn	(x=0XD484);
	op_dec		(x,	1);
	set_cmt	(0XD487,	"sf_name",	0);
	set_cmt	(0XD489,	"recover DS:SI -> dir_first",	0);
	create_insn	(0XD48E);
	set_name	(0XD48E,	"FREEENT");
	create_insn	(x=0XD48F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD493,	"hw of first cluster (dir_first)",	0);
	create_insn	(x=0XD496);
	op_dec		(x,	1);
	set_cmt	(0XD49C,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0XD4A1,	"not FAT32",	0);
	set_cmt	(0XD4A7,	"[DI+BUFFINFO.buf_sector+2]",	0);
	create_insn	(x=0XD4AA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD4AF,	"[DI+BUFFINFO.buf_sector]",	0);
	set_cmt	(0XD4B7,	"Was 0 length file (or mucked Firclus if ECX=1)",	0);
	set_cmt	(0XD4B9,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0XD4BE,	"FAT32",	0);
	set_cmt	(0XD4C0,	"[ES:BP+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0XD4C6,	"[ES:BP+DPB.LAST_CLUSTER]",	0);
	create_insn	(0XD4C6);
	set_cmt	(0XD4CB,	"Treat like zero length file (firclus mucked)",	0);
	create_insn	(x=0XD4D0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD4D7);
	op_dec		(x,	1);
	create_insn	(x=0XD4DB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD4DF,	"Free any data allocated",	0);
	create_insn	(x=0XD4E3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD4EB,	"Allowed_RETRY+Allowed_FAIL",	0);
	create_insn	(x=0XD4EB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD4FB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD501,	"+ dir_entry.dir_first",	0);
	create_insn	(0XD506);
	set_name	(0XD506,	"CHECK_VIRT_OPEN");
	create_insn	(x=0XD508);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD50F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD516);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD522);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XD522,	"MAKEFCB");
	create_insn	(x=0XD52A);
	op_hex		(x,	1);
	create_insn	(x=0XD536);
	op_hex		(x,	1);
	create_insn	(x=0XD545);
	op_hex		(x,	1);
	create_insn	(x=0XD553);
	op_dec		(x,	1);
	create_insn	(x=0XD556);
	op_hex		(x,	1);
	create_insn	(x=0XD57D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XD58C);
	set_name	(0XD58C,	"NORMSCAN");
	create_insn	(x=0XD598);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0XD5A6);
	create_insn	(x=0XD5AE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0XD5B6);
	create_insn	(0XD5BA);
	set_name	(0XD5BA,	"GETWORD");
	create_insn	(0XD5C0);
	set_name	(0XD5C0,	"MUSTGETWORD");
	create_insn	(x=0XD5C5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XD5E1);
	op_hex		(x,	1);
	create_insn	(0XD5E6);
	create_insn	(0XD5EC);
	set_name	(0XD5EC,	"SCANB");
	set_name	(0XD5F3,	"scanb_retn");
	create_insn	(x=0XD5F4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XD5F4,	"NameTrans");
	create_insn	(x=0XD5FC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD612);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XD61A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_byte	(0XD621);
	make_array	(0XD621,	0X3F);
	set_name	(0XD621,	"CharType");
	create_insn	(0XD660);
	set_name	(0XD660,	"GETLET");
	create_insn	(0XD661);
	set_name	(0XD661,	"UCase");
	set_cmt	(0XD662,	"FILE_UCASE_TAB+2",	0);
	create_insn	(x=0XD662);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD665);
	op_chr		(x,	1);
	set_name	(0XD665,	"gl_0");
	set_cmt	(0XD667,	"Already upper case, go check type",	0);
	create_insn	(x=0XD669);
	op_chr		(x,	1);
	set_cmt	(0XD66D,	"Convert to upper case",	0);
	create_insn	(x=0XD66D);
	op_hex		(x,	1);
	set_cmt	(0XD671,	"Not EuroChar, go check type",	0);
	set_cmt	(0XD673,	"translate to upper case with this index",	0);
	set_cmt	(0XD67B,	"ds as file_ucase_tab is in DOSDATA",	0);
	set_cmt	(0XD67E,	"returns type flags in AL",	0);
	set_cmt	(0XD681,	"test for normal character",	0);
	create_insn	(x=0XD681);
	op_hex		(x,	1);
	create_insn	(0XD686);
	set_name	(0XD686,	"GETLET3");
	create_insn	(0XD689);
	set_name	(0XD689,	"DELIM");
	create_insn	(x=0XD68D);
	op_hex		(x,	1);
	create_insn	(0XD691);
	set_name	(0XD691,	"SPCHK");
	create_insn	(x=0XD695);
	op_hex		(x,	1);
	create_insn	(x=0XD699);
	op_hex		(x,	1);
	set_name	(0XD699,	"GetCharType");
	create_insn	(x=0XD69E);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0XD6A1);
	op_hex		(x,	1);
	create_insn	(x=0XD6A8);
	op_hex		(x,	1);
	create_insn	(x=0XD6AB);
	op_hex		(x,	1);
	create_insn	(0XD6AE);
	create_insn	(0XD6B1);
	set_name	(0XD6B1,	"PATHCHRCMP");
	create_insn	(0XD6B8);
	create_insn	(0XD6BB);
	create_dword	(0XD6BE);
	set_name	(0XD6BE,	"BCONX");
	create_insn	(0XD6C2);
	create_insn	(0XD6C4);
	set_name	(0XD6C4,	"SPOOLINT");
	create_insn	(x=0XD6C5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD6CD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD6D5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD6DA,	"DOS 2+ internal - KEYBOARD BUSY LOOP",	0);
	create_insn	(x=0XD6DA);
	op_hex		(x,	0);
	create_insn	(x=0XD6DC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XD6E2,	"_RET37");
	create_insn	(x=0XD6E3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XD6E3,	"DSKSTATCHK");
	create_insn	(x=0XD6FE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD701);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD706);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_dec		(x,	1);
	create_insn	(x=0XD70B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD711);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD727);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XD736);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD739,	"\"C\"-\"@\"",	0);
	create_insn	(x=0XD73D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD742);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD747);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD74B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD751);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD757);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XD766);
	set_name	(0XD766,	"STATCHK");
	set_cmt	(0XD786,	"'S'-'@'",	0);
	create_insn	(x=0XD786);
	op_dec		(x,	1);
	create_insn	(x=0XD78A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD799,	"\"P\"-\"@\"",	0);
	create_insn	(x=0XD799);
	op_dec		(x,	1);
	create_insn	(x=0XD79D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD7A6,	"\"C\"-\"@\"",	0);
	create_insn	(0XD7A6);
	create_insn	(x=0XD7AC);
	op_hex		(x,	1);
	create_insn	(0XD7B0);
	create_insn	(0XD7B5);
	set_cmt	(0XD7CD,	"'P'-'@'",	0);
	create_insn	(x=0XD7CD);
	op_dec		(x,	1);
	set_cmt	(0XD7D1,	"'C'-'@'",	0);
	create_insn	(x=0XD7D9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD7EE);
	op_hex		(x,	1);
	set_cmt	(0XD7F9,	"Multiplex - NETWORK REDIRECTOR - ???\nReturn: CF set on error, AX = error code\nSTACK unchanged",	0);
	create_insn	(x=0XD7F9);
	op_hex		(x,	0);
	create_insn	(x=0XD7FE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD808,	"Multiplex - NETWORK REDIRECTOR - ???\nES:DI -> SFT, SS = DOS CS",	0);
	create_insn	(x=0XD808);
	op_hex		(x,	0);
	create_insn	(x=0XD80D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XD81A);
	create_insn	(0XD822);
	set_name	(0XD822,	"restore_32bit_regs");
	set_cmt	(0XD82C,	"374",	0);
	create_insn	(x=0XD82C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD82F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD834,	"374",	0);
	create_insn	(x=0XD834);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD837);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XD83C,	"374",	0);
	create_insn	(x=0XD83C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD84D);
	op_dec		(x,	1);
	create_insn	(x=0XD851);
	op_dec		(x,	1);
	create_insn	(x=0XD855);
	op_dec		(x,	1);
	create_insn	(x=0XD859);
	op_dec		(x,	1);
	create_insn	(x=0XD85D);
	op_dec		(x,	1);
	create_insn	(x=0XD865);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XD865,	"CNTCHAND");
	create_insn	(x=0XD86B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XD87D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD887,	"restore hw of 32 bit regs",	0);
	create_insn	(x=0XD88B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD89A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD89F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD8A4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD8A9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD8AD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD8B4,	"DOS - CONTROL \"C\" EXIT ADDRESS\nReturn: return via RETF 2 with CF set\nDOS will abort program with errorlevel 0\nelse\ninterrupted DOS call continues",	0);
	create_insn	(x=0XD8B4);
	op_hex		(x,	0);
	create_insn	(x=0XD8BF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD8C3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD8C8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD8CE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD8D1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD8D8);
	op_hex		(x,	1);
	create_insn	(x=0XD8DB);
	op_hex		(x,	1);
	create_insn	(x=0XD8DF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XD8E3,	"ctrlc_abort");
	create_insn	(x=0XD8EC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XD8F4);
	set_name	(0XD8F4,	"DIVOV");
	create_insn	(x=0XD8FC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XD902);
	set_name	(0XD902,	"_OUTMES");
	set_cmt	(0XD906,	"DEVWRT",	0);
	create_insn	(x=0XD906);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD90B,	"DRDWRHL",	0);
	create_insn	(x=0XD90B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD910);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD916);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD91A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD91D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD921);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD925);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD92C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD933);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD93B,	"Q: are we in the middle of int 24",	0);
	create_insn	(x=0XD93B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XD93B,	"CHARHARD");
	set_cmt	(0XD941,	"Y: allow fail",	0);
	set_cmt	(0XD943,	"Allowed_RETRY ; assume ctrl p",	0);
	create_insn	(x=0XD943);
	op_hex		(x,	1);
	set_cmt	(0XD946,	"Q: has ctrl p been pressed",	0);
	create_insn	(x=0XD946);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XD94C,	"Y:",	0);
	set_cmt	(0XD94E,	"Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL",	0);
	create_insn	(x=0XD94E);
	op_hex		(x,	1);
	create_insn	(x=0XD951);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD956);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD95B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD961,	"STECODE",	0);
	create_insn	(x=0XD961);
	op_hex		(x,	1);
	set_cmt	(0XD965,	"Device pointer is BP:SI",	0);
	create_insn	(0XD96C);
	set_name	(0XD96C,	"HARDERR");
	create_insn	(x=0XD96D);
	op_hex		(x,	1);
	create_insn	(x=0XD97B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XD984);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD98B,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0XD994);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XD99C,	"[ES:BP+DPB.FIRST_FAT]",	0);
	set_cmt	(0XD9A4,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0XD9AB,	"[es:bp+DPB.DIR_SECTOR]",	0);
	set_cmt	(0XD9AF,	"not in FAT",	0);
	set_cmt	(0XD9B1,	"[ES:BP+DPB.FREE_CNT],-1",	0);
	create_insn	(x=0XD9C0);
	op_dec		(x,	1);
	create_insn	(x=0XD9C4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XD9C9);
	op_dec		(x,	1);
	set_cmt	(0XD9CD,	"[es:bp+DPB.FCLUS_FSECTOR]",	0);
	set_cmt	(0XD9E5,	"[es:bp+DPB.FIRST_ACCESS]",	0);
	create_insn	(x=0XD9E5);
	op_hex		(x,	1);
	create_insn	(0XD9EC);
	create_insn	(0XD9F0);
	set_cmt	(0XD9F2,	"[ES:BP+DPB.FIRST_SECTOR]",	0);
	create_insn	(x=0XD9FA);
	op_hex		(x,	1);
	create_insn	(x=0XD9FC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDA01);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDA06,	"[ES:BP+DPB.DRIVE]",	0);
	create_insn	(0XDA06);
	set_name	(0XDA06,	"FATAL");
	create_insn	(x=0XDA0A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XDA0A,	"FATAL1");
	create_insn	(x=0XDA0F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDA14,	"[ES:BP+DPB.DRIVER_ADDR]",	0);
	create_insn	(0XDA1A);
	set_name	(0XDA1A,	"FATALC");
	create_insn	(x=0XDA25);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XDA25,	"NET_I24_ENTRY");
	create_insn	(x=0XDA31);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA38);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA42);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDA4D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA52);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA57);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA5C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0XDA68);
	create_insn	(x=0XDA6B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDA71,	"DOS - FATAL ERROR HANDLER ADDRESS\nAutomatically called upon detection of unrecoverable I/O error.",	0);
	create_insn	(x=0XDA71);
	op_hex		(x,	0);
	create_insn	(x=0XDA73);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA78);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA81);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDA86);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA8B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA90);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDA97);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDAA6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XDAB0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XDAB8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDABD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDAC3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XDACC);
	create_insn	(x=0XDACF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDAD3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDADE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XDAE8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0XDAF2);
	create_insn	(x=0XDAF4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDAFE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB05);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XDB0F);
	create_insn	(x=0XDB13);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDB1C,	"Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK\nSS = DOS CS",	0);
	create_insn	(x=0XDB1C);
	op_hex		(x,	0);
	create_insn	(x=0XDB1E);
	op_hex		(x,	1);
	create_insn	(x=0XDB26);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDB2D,	"[PDB.PARENT_PID]",	0);
	create_insn	(x=0XDB39);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB47);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB5D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB62);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB67);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB8B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB8F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB98);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDB9D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDBA0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XDBA5);
	set_name	(0XDBA5,	"SET_I24_EXTENDED_ERROR");
	create_insn	(x=0XDBA6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDBA9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDBB8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDBBE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDBC4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_dword	(0XDBCC);
	set_name	(0XDBCC,	"CL0FATENTRY");
	create_word	(0XDBD0);
	set_name	(0XDBD0,	"FIRST_BUFF_ADDR");
	create_insn	(x=0XDBD2);
	op_hex		(x,	1);
	set_name	(0XDBD2,	"FLUSHBUF");
	create_insn	(0XDBDC);
	set_name	(0XDBDC,	"$WAIT");
	create_insn	(x=0XDBDE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDBE6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XDBE6,	"Exec_Bad_Fun");
	set_name	(0XDBEE,	"Exec_Ret_Err");
	create_insn	(x=0XDBF4);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_name	(0XDBF4,	"ExecReadyJ");
	create_insn	(0XDBFF);
	set_name	(0XDBFF,	"$EXEC");
	create_insn	(x=0XDC02);
	op_dec		(x,	1);
	create_insn	(x=0XDC05);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDC0F,	"ExecReady call",	0);
	create_insn	(x=0XDC15);
	op_hex		(x,	1);
	set_cmt	(0XDC1E,	"INT 2Fh AX=4A30h",	0);
	set_cmt	(0XDC27,	"Exec_BlkL,BX ; stash args",	0);
	set_name	(0XDC27,	"Exec_Check_2");
	set_cmt	(0XDC2A,	"Exec_BlkH,ES",	0);
	set_cmt	(0XDC2D,	"Exec_Func,AL",	0);
	set_cmt	(0XDC30,	"Exec_Load_High,0",	0);
	set_cmt	(0XDC34,	"ExecNameL,DX ; set up length of exec name",	0);
	create_insn	(x=0XDC34);
	op_dec		(x,	0);
	set_cmt	(0XDC37,	"ExecNameH,DS",	0);
	create_insn	(x=0XDC37);
	op_dec		(x,	0);
	set_cmt	(0XDC3A,	"move pointer to convenient place",	0);
	set_cmt	(0XDC3F,	"ExecNameLen,CX ; save length",	0);
	create_insn	(x=0XDC3F);
	op_dec		(x,	0);
	set_cmt	(0XDC42,	"save alloc method",	0);
	create_insn	(x=0XDC42);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDC46);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDC4A,	"Access mode bits: (0 to 2)\n000  read access\n\nSharing mode bits: (4 to 6)\n010  deny others write access\n\nbit 7 - private",	0);
	set_cmt	(0XDC4D,	"EXECOPEN",	0);
	create_insn	(x=0XDC4D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XDC57,	"~EXECOPEN ; reset flag",	0);
	create_insn	(x=0XDC57);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XDC61,	"Exec_FH,AX",	0);
	set_cmt	(0XDC6D,	"devid_ISDEV",	0);
	create_insn	(x=0XDC6D);
	op_hex		(x,	1);
	set_cmt	(0XDC72,	"error_file_not_found",	0);
	set_name	(0XDC74,	"Exec_BombJ");
	set_cmt	(0XDC77,	"error_bad_environment",	0);
	create_insn	(0XDC77);
	set_name	(0XDC77,	"BadEnv");
	create_insn	(0XDC7C);
	set_name	(0XDC7C,	"Exec_Check_Environ");
	set_cmt	(0XDC7F,	"Exec_Load_Block,0",	0);
	create_insn	(x=0XDC7F);
	op_dec		(x,	0);
	set_cmt	(0XDC84,	"Exec_Environ,0",	0);
	create_insn	(x=0XDC84);
	op_dec		(x,	0);
	set_cmt	(0XDC89,	"Exec_Func,exec_func_overlay",	0);
	create_insn	(x=0XDC89);
	op_hex		(x,	1);
	set_cmt	(0XDC8F,	"Exec_Blk ; get block",	0);
	set_cmt	(0XDC92,	"[SI+EXEC1.ENVIRON] ; addr of environ",	0);
	create_insn	(x=0XDC98);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDC9D,	"[PDB.ENVIRON]",	0);
	create_insn	(x=0XDC9D);
	op_dec		(x,	1);
	set_name	(0XDCA4,	"Exec_Scan_Env");
	set_cmt	(0XDCA8,	"at most 32k of environment",	0);
	set_cmt	(0XDCAD,	"find that nul byte",	0);
	set_name	(0XDCAD,	"Exec_Get_Environ_Len");
	set_cmt	(0XDCB1,	"Dec CX for the next nul byte test",	0);
	set_cmt	(0XDCB2,	"gone beyond the end of the environment",	0);
	set_cmt	(0XDCB4,	"is there another nul byte?",	0);
	set_cmt	(0XDCB5,	"no, scan some more",	0);
	set_cmt	(0XDCB8,	"LEA BX,[DI+0Fh+2]",	0);
	set_cmt	(0XDCBB,	"ExecNameLen ; BX <- length of environment\nremember argv[0] length\nround up and remember argc",	0);
	create_insn	(x=0XDCBB);
	op_dec		(x,	1);
	set_cmt	(0XDCBE,	"number of paragraphs needed",	0);
	create_insn	(x=0XDCBE);
	op_hex		(x,	1);
	set_cmt	(0XDCC2,	"can we get the space?",	0);
	set_cmt	(0XDCC9,	"nope... cry and sob",	0);
	create_insn	(0XDCCB);
	set_name	(0XDCCB,	"Exec_Save_Environ");
	set_cmt	(0XDCCD,	"Exec_Environ,AX ; save him for a rainy day",	0);
	create_insn	(x=0XDCCD);
	op_dec		(x,	0);
	set_cmt	(0XDCD4,	"copy the environment",	0);
	set_cmt	(0XDCDA,	"lds SI,ExecName",	0);
	create_insn	(x=0XDCDA);
	op_dec		(x,	1);
	set_cmt	(0XDCDD,	"mov CX,ExecNameLen",	0);
	create_insn	(x=0XDCDD);
	op_dec		(x,	1);
	set_name	(0XDCE2,	"Exec_Read_Header");
	set_cmt	(0XDCE4,	"exec_header_len ; header size",	0);
	create_insn	(x=0XDCE4);
	op_dec		(x,	1);
	create_insn	(x=0XDCE7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDCF7,	"exec_header_len\ndid we read the right number?",	0);
	create_insn	(x=0XDCF7);
	op_dec		(x,	1);
	set_cmt	(0XDCFA,	"\nyep... continue",	0);
	set_cmt	(0XDCFC,	"-1 ; indicate load high?",	0);
	create_insn	(x=0XDCFC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XDD04,	"mov Exec_Load_High,-1",	0);
	create_insn	(x=0XDD08);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XDD08,	"Exec_Check_Sig");
	set_cmt	(0XDD0B,	"'MZ' ; exe_valid_signature",	0);
	set_cmt	(0XDD0E,	"assume com file if no signature",	0);
	set_cmt	(0XDD10,	"'ZM' ; exe_valid_old_signature",	0);
	set_name	(0XDD15,	"Exec_Com_Filej");
	set_cmt	(0XDD18,	"get 512-byte pages",	0);
	create_insn	(x=0XDD18);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XDD18,	"Exec_Save_Start");
	set_cmt	(0XDD1B,	"convert to paragraphs",	0);
	create_insn	(x=0XDD1B);
	op_hex		(x,	1);
	set_cmt	(0XDD1E,	"AX = size in paragraphs",	0);
	create_insn	(x=0XDD1E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDD22,	"mov Exec_Res_Len_Para,AX",	0);
	create_insn	(x=0XDD22);
	op_dec		(x,	0);
	set_cmt	(0XDD25,	"test Exec_Func,exec_func_overlay",	0);
	create_insn	(x=0XDD25);
	op_hex		(x,	1);
	set_cmt	(0XDD29,	"allocation of space",	0);
	set_cmt	(0XDD2B,	"les DI,Exec_Blk",	0);
	set_cmt	(0XDD2E,	"[ES:DI+EXEC3.load_addr]",	0);
	set_cmt	(0XDD31,	"mov Exec_DMA,AX",	0);
	create_insn	(x=0XDD31);
	op_dec		(x,	0);
	set_cmt	(0XDD34,	"[ES:DI+EXEC3.reloc_fac]",	0);
	set_cmt	(0XDD38,	"mov Exec_Rel_Fac,AX",	0);
	create_insn	(x=0XDD38);
	op_dec		(x,	0);
	set_cmt	(0XDD3E,	"error_not_enough_memory",	0);
	create_insn	(0XDD3E);
	set_name	(0XDD3E,	"Exec_No_Mem");
	set_cmt	(0XDD42,	"error_bad_format",	0);
	create_insn	(0XDD42);
	set_name	(0XDD42,	"Exec_Bad_File");
	set_cmt	(0XDD44,	"mov BX,Exec_FH",	0);
	set_name	(0XDD44,	"Exec_Bomb");
	set_cmt	(0XDD4A,	"call LCritMEM",	0);
	set_cmt	(0XDD57,	"save current alloc method in ax",	0);
	create_insn	(x=0XDD57);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XDD57,	"Exec_Chk_Mem");
	create_insn	(x=0XDD5B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDD60,	"restore original allocmethod",	0);
	create_insn	(x=0XDD60);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDD65,	"HIGH_ONLY",	0);
	create_insn	(x=0XDD65);
	op_hex		(x,	1);
	set_cmt	(0XDD68,	"no space in UMBs. Quit",	0);
	set_cmt	(0XDD6A,	"HIGH_ONLY",	0);
	create_insn	(x=0XDD6A);
	op_hex		(x,	1);
	set_cmt	(0XDD6C,	"no memory",	0);
	create_insn	(x=0XDD6E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDD74,	"mov Exec_NoStack,0",	0);
	create_insn	(x=0XDD74);
	op_dec		(x,	0);
	set_name	(0XDD74,	"Exec_Allocate");
	set_cmt	(0XDD79,	"is there a stack seg ?",	0);
	create_insn	(x=0XDD79);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDD7E,	"yes",	0);
	set_cmt	(0XDD80,	"is there a stack ptr ?",	0);
	create_insn	(x=0XDD80);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDD85,	"yes",	0);
	set_cmt	(0XDD87,	"inc Exec_NoStack",	0);
	create_insn	(x=0XDD87);
	op_dec		(x,	0);
	set_cmt	(0XDD8A,	"1000h-10h ; Q: is this >= 64K-256 bytes",	0);
	set_cmt	(0XDD8D,	"Y: don't set Exec_SP",	0);
	set_cmt	(0XDD8F,	"add 10h paras to mem requirement",	0);
	set_cmt	(0XDD92,	"HIGH_FIRST\nQ: is the alloc strat high_first",	0);
	create_insn	(x=0XDD92);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XDD92,	"ea1");
	set_cmt	(0XDD97,	"N: normal allocate\nY: set high_only bit",	0);
	set_cmt	(0XDD99,	"HIGH_ONLY",	0);
	create_insn	(x=0XDD99);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XDD9E,	"save ax for possible 2nd\nattempt at allocating memory",	0);
	create_insn	(x=0XDD9E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XDD9E,	"Exec_Norm_Alloc");
	set_cmt	(0XDDA1,	"see how much room in arena",	0);
	set_cmt	(0XDDA5,	"should have carry set and BX has max",	0);
	create_insn	(x=0XDDA9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDDAC,	"room for header",	0);
	set_cmt	(0XDDAF,	"enough room for a header",	0);
	set_cmt	(0XDDB4,	"is there enough for bare image?",	0);
	set_cmt	(0XDDB8,	"test Exec_Load_High,-1",	0);
	create_insn	(x=0XDDB8);
	op_hex		(x,	1);
	set_cmt	(0XDDBC,	"load high, use max",	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	set_cmt	(0XDDBE,	"go for min allocation",	0);
	create_insn	(x=0XDDBE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDDC4,	"enough space?",	0);
	set_cmt	(0XDDC6,	"nope...",	0);
	create_insn	(x=0XDDC8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDDCC,	"go for the MAX",	0);
	create_insn	(x=0XDDCC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XDDD6,	"Exec_BX_Max");
	set_name	(0XDDD8,	"Exec_Got_Block");
	set_cmt	(0XDDDB,	"mov Exec_Size,BX",	0);
	create_insn	(x=0XDDDB);
	op_dec		(x,	0);
	set_cmt	(0XDDDE,	"get the space",	0);
	create_insn	(x=0XDDE6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDDEA,	"restore allocmethod",	0);
	create_insn	(x=0XDDEA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDDEE,	"cmp Exec_NoStack,0",	0);
	create_insn	(x=0XDDEE);
	op_dec		(x,	0);
	set_cmt	(0XDDF4,	"Q: >= 64K memory block",	0);
	set_cmt	(0XDDF8,	"Y: Exec_SP = 0",	0);
	set_cmt	(0XDDFA,	"get byte offset",	0);
	create_insn	(x=0XDDFA);
	op_hex		(x,	1);
	set_cmt	(0XDDFD,	"take care of PSP",	0);
	set_cmt	(0XDE01,	"Exec_SP = top of block",	0);
	create_insn	(x=0XDE01);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDE05,	"mov Exec_Load_Block,AX",	0);
	create_insn	(x=0XDE05);
	op_dec		(x,	0);
	set_name	(0XDE05,	"ea2");
	set_cmt	(0XDE0B,	"test Exec_Load_High,-1",	0);
	create_insn	(x=0XDE0B);
	op_hex		(x,	1);
	set_cmt	(0XDE0F,	"use ax for load info",	0);
	set_cmt	(0XDE11,	"add AX,Exec_Size ; go to end",	0);
	create_insn	(x=0XDE11);
	op_dec		(x,	1);
	set_cmt	(0XDE14,	"sub AX,Exec_Res_Len_Para\ndrop off header",	0);
	create_insn	(x=0XDE14);
	op_dec		(x,	1);
	set_cmt	(0XDE17,	"drop off pdb",	0);
	set_cmt	(0XDE1A,	"mov Exec_Rel_Fac,AX ; new segment",	0);
	create_insn	(x=0XDE1A);
	op_dec		(x,	0);
	set_name	(0XDE1A,	"Exec_Use_AX");
	set_cmt	(0XDE1D,	"mov Exec_DMA,AX ; beginning of dma",	0);
	create_insn	(x=0XDE1D);
	op_dec		(x,	0);
	set_cmt	(0XDE20,	"mov DX,Exec_DMA",	0);
	create_insn	(x=0XDE20);
	op_dec		(x,	1);
	set_name	(0XDE20,	"Exec_Find_Res");
	set_cmt	(0XDE23,	"mov Exec_DMA_Save,DX",	0);
	create_insn	(x=0XDE23);
	op_dec		(x,	0);
	create_insn	(x=0XDE26);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDE2B,	"low word of location",	0);
	create_insn	(x=0XDE2B);
	op_hex		(x,	1);
	set_cmt	(0XDE2F,	"high word of location",	0);
	create_insn	(x=0XDE2F);
	op_dec		(x,	1);
	set_cmt	(0XDE32,	"CX <- high",	0);
	set_cmt	(0XDE34,	"mov BX,Exec_FH",	0);
	set_cmt	(0XDE3A,	"Seek to resident",	0);
	set_cmt	(0XDE3E,	"Read resident into memory",	0);
	set_cmt	(0XDE43,	"mov BX,Exec_Res_Len_Para",	0);
	create_insn	(x=0XDE43);
	op_dec		(x,	1);
	set_name	(0XDE43,	"Exec_Big_Read");
	set_cmt	(0XDE46,	"Too many bytes to read?",	0);
	set_cmt	(0XDE4C,	"Max in one chunk FE00 bytes",	0);
	set_cmt	(0XDE4F,	"sub Exec_Res_Len_Para,BX\nWe read (soon) this many",	0);
	create_insn	(x=0XDE4F);
	op_dec		(x,	0);
	set_name	(0XDE4F,	"Exec_Read_OK");
	set_cmt	(0XDE53,	"Get count in bytes from paras",	0);
	create_insn	(x=0XDE53);
	op_hex		(x,	1);
	set_cmt	(0XDE56,	"Count in correct register",	0);
	set_cmt	(0XDE59,	"mov DS,Exec_DMA ; Set up read buffer",	0);
	create_insn	(x=0XDE59);
	op_dec		(x,	1);
	set_cmt	(0XDE62,	"Get old count to verify",	0);
	set_cmt	(0XDE68,	"Did we read enough?",	0);
	set_cmt	(0XDE6A,	"Get paragraph count back",	0);
	set_cmt	(0XDE6B,	"and do reloc if no more to read",	0);
	create_insn	(x=0XDE6F);
	op_dec		(x,	1);
	set_cmt	(0XDE73,	"If we are off by 512 bytes or more\nthen the header lied and we have an error",	0);
	set_cmt	(0XDE75,	"add Exec_DMA,BX ; Bump dma address",	0);
	create_insn	(x=0XDE75);
	op_dec		(x,	0);
	set_name	(0XDE75,	"ExecCheckEnd");
	set_cmt	(0XDE78,	"test Exec_Res_Len_Para,-1",	0);
	create_insn	(x=0XDE78);
	op_dec		(x,	0);
	op_hex		(x,	1);
	set_cmt	(0XDE7F,	"mov CX,Exec_Rel_Fac",	0);
	create_insn	(x=0XDE7F);
	op_dec		(x,	1);
	set_cmt	(0XDE82,	"get initial SS",	0);
	create_insn	(x=0XDE82);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDE85,	"and relocate him",	0);
	create_insn	(x=0XDE87);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDE8A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDE8D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDE90);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDE94);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDE99,	"relocated...",	0);
	create_insn	(x=0XDE9B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XDEA0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDEA4,	"mov BX,Exec_FH",	0);
	set_name	(0XDEB0,	"Exec_Bad_FileJ");
	set_cmt	(0XDEB3,	"Number of entries left",	0);
	create_insn	(x=0XDEB3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XDEB3,	"exec_get_entries");
	set_name	(0XDEB7,	"exec_read_reloc");
	create_insn	(x=0XDEB8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDEBB,	"((Exec_Internal_Buffer_Size)/4)*4\n(397>>2)<<2",	0);
	create_insn	(x=0XDEBB);
	op_dec		(x,	1);
	set_cmt	(0XDEC8,	"(Exec_Internal_Buffer_Size)/4\n(397>>2)",	0);
	create_insn	(x=0XDEC8);
	op_dec		(x,	1);
	set_cmt	(0XDECB,	"mov DI,Exec_Internal_Buffer",	0);
	create_insn	(x=0XDECB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDECE,	"mov SI,Exec_Rel_Fac\nRelocate a single address",	0);
	create_insn	(x=0XDECE);
	op_dec		(x,	1);
	set_cmt	(0XDED1,	"Any more entries?",	0);
	set_name	(0XDED1,	"exec_reloc_one");
	set_cmt	(0XDED3,	"no",	0);
	set_cmt	(0XDED5,	"Get ra/sa of entry",	0);
	set_cmt	(0XDED8,	"Relocate address of item",	0);
	set_cmt	(0XDEDA,	"add AX,Exec_DMA_Save",	0);
	create_insn	(x=0XDEDA);
	op_dec		(x,	1);
	set_cmt	(0XDEE5,	"End of internal buffer?",	0);
	set_cmt	(0XDEE9,	"Read in the next\npiece of the relocation table",	0);
	set_cmt	(0XDEEB,	"determine if this is a buggy exe packed file\nand if so patch in the right code",	0);
	create_insn	(0XDEEB);
	set_name	(0XDEEB,	"Exec_Set_PDBJ");
	set_cmt	(0XDEEE,	"mov es,Exec_DMA_Save ; load segment",	0);
	create_insn	(x=0XDEEE);
	op_dec		(x,	1);
	create_insn	(x=0XDEF1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDEF5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XDEFA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XDF08);
	set_name	(0XDF08,	"Exec_No_Memj");
	set_cmt	(0XDF0B,	"test Exec_Func,exec_func_overlay",	0);
	create_insn	(x=0XDF0B);
	op_hex		(x,	1);
	set_name	(0XDF0B,	"Exec_Com_File");
	set_cmt	(0XDF11,	"lds SI,Exec_Blk ; get arg block",	0);
	set_cmt	(0XDF15,	"mov Exec_DMA,AX",	0);
	create_insn	(x=0XDF15);
	op_dec		(x,	0);
	set_cmt	(0XDF1B,	"read it all!",	0);
	set_cmt	(0XDF1D,	"save current alloc method in ax",	0);
	create_insn	(x=0XDF1D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XDF1D,	"Exec_Chk_Com_Mem");
	create_insn	(x=0XDF21);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDF26,	"restore original allocmethod",	0);
	create_insn	(x=0XDF26);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDF2B,	"HIGH_ONLY\nQ: was the HIGH_ONLY bit already set",	0);
	create_insn	(x=0XDF2B);
	op_hex		(x,	1);
	set_cmt	(0XDF2E,	"Y: no space in UMBs. Quit\nN: continue",	0);
	set_cmt	(0XDF30,	"HIGH_ONLY\nQ: did we set the HIGH_ONLY bit",	0);
	create_insn	(x=0XDF30);
	op_hex		(x,	1);
	set_cmt	(0XDF34,	"mov ax,Exec_Load_Block\nax = block we just allocated",	0);
	create_insn	(x=0XDF34);
	op_dec		(x,	1);
	set_cmt	(0XDF37,	"bx => free arena",	0);
	set_cmt	(0XDF3E,	"HIGH_FIRST\nQ: is the alloc strat high_first",	0);
	create_insn	(x=0XDF3E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XDF3E,	"Exec_Alloc_Com_File");
	set_cmt	(0XDF44,	"N: normal allocate\nY: set high_only bit",	0);
	set_cmt	(0XDF46,	"HIGH_ONLY",	0);
	create_insn	(x=0XDF46);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XDF4C,	"Exec_Norm_Com_Alloc");
	set_cmt	(0XDF4F,	"largest piece available as error",	0);
	set_cmt	(0XDF56,	"mov Exec_Size,BX\nsave size of allocation block",	0);
	create_insn	(x=0XDF56);
	op_dec		(x,	0);
	set_cmt	(0XDF5A,	"largest piece available",	0);
	set_cmt	(0XDF5D,	"get size of block...",	0);
	set_cmt	(0XDF5E,	"mov Exec_Load_Block,AX",	0);
	create_insn	(x=0XDF5E);
	op_dec		(x,	0);
	set_cmt	(0XDF61,	"increment for header",	0);
	set_cmt	(0XDF64,	"mov Exec_DMA,AX",	0);
	create_insn	(x=0XDF64);
	op_dec		(x,	0);
	set_cmt	(0XDF67,	"presume 64K read...",	0);
	set_cmt	(0XDF69,	"64k or more in block?",	0);
	set_cmt	(0XDF6D,	"yes, read only 64k",	0);
	set_cmt	(0XDF6F,	"convert size to bytes",	0);
	create_insn	(x=0XDF71);
	op_hex		(x,	1);
	set_cmt	(0XDF74,	"enough memory for PSP and stack?",	0);
	set_cmt	(0XDF77,	"jump if not",	0);
	set_cmt	(0XDF79,	"size of the block is < 64K\nreserve 256 bytes for stack",	0);
	set_cmt	(0XDF7C,	"remember size of psp",	0);
	set_name	(0XDF7C,	"Exec_Read_Com");
	set_cmt	(0XDF7F,	"save number to read",	0);
	set_name	(0XDF7F,	"Exec_Read_Block");
	set_cmt	(0XDF80,	"mov BX,Exec_FH ; of com file",	0);
	set_cmt	(0XDF83,	"but seek to 0:0",	0);
	set_cmt	(0XDF87,	"seek relative to beginning",	0);
	set_cmt	(0XDF89,	"back to beginning of file",	0);
	set_cmt	(0XDF8C,	"number to read",	0);
	set_cmt	(0XDF8D,	"mov DS,Exec_DMA",	0);
	create_insn	(x=0XDF8D);
	op_dec		(x,	1);
	set_cmt	(0XDF96,	"get number of bytes to read",	0);
	set_cmt	(0XDF9C,	"did we read them all?",	0);
	create_insn	(0XDF9C);
	set_name	(0XDF9C,	"OkRead");
	set_cmt	(0XDF9E,	"yes",	0);
	create_insn	(x=0XDFA2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XDFA7,	"restore alloc method",	0);
	create_insn	(x=0XDFA7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDFAC,	"test Exec_Func,exec_func_overlay",	0);
	create_insn	(x=0XDFAC);
	op_hex		(x,	1);
	set_cmt	(0XDFB0,	"no starto, chumo!",	0);
	set_cmt	(0XDFB2,	"mov AX,Exec_DMA",	0);
	create_insn	(x=0XDFB2);
	op_dec		(x,	1);
	create_insn	(x=0XDFB8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDFBC,	"initial IP is 100h",	0);
	create_insn	(x=0XDFBC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDFC3,	"SI is AT MOST FF00h. \nAdd FE to account for PSP\nword of 0 on stack.",	0);
	set_cmt	(0XDFC7,	"Q: was there >= 64K available",	0);
	set_cmt	(0XDFCA,	"Y: stack is fine",	0);
	set_cmt	(0XDFCC,	"N: add the xtra 100h for stack",	0);
	set_cmt	(0XDFD0,	"max value for read is also SP!",	0);
	create_insn	(x=0XDFD0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XDFD0,	"Exec_St_Ok");
	create_insn	(x=0XDFD5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XDFDB,	"0 for return",	0);
	set_cmt	(0XDFDF,	"mov BX,Exec_FH ; we are finished with the file.",	0);
	set_name	(0XDFDF,	"Exec_Set_PDB");
	set_cmt	(0XDFE6,	"release the jfn",	0);
	set_cmt	(0XDFED,	"test Exec_Func,exec_func_overlay",	0);
	create_insn	(x=0XDFED);
	op_hex		(x,	1);
	create_insn	(x=0XDFFB);
	op_hex		(x,	1);
	create_insn	(x=0XE000);
	op_hex		(x,	1);
	set_cmt	(0XE008,	"es = current PSP (Sysinit PSP)",	0);
	create_insn	(x=0XE008);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XE00D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE012,	"[es:PDB.Version]\nstore lie version in Sysinit PSP",	0);
	create_insn	(0XE019);
	set_name	(0XE019,	"sysinit_done");
	set_name	(0XE01B,	"norm_ovl");
	set_cmt	(0XE01E,	"overlay load -> done",	0);
	set_cmt	(0XE021,	"mov DX,Exec_Load_Block",	0);
	create_insn	(x=0XE021);
	op_dec		(x,	1);
	set_name	(0XE021,	"Exec_Build_Header");
	set_cmt	(0XE024,	"ARENA.OWNER ; pointer to owner field",	0);
	set_cmt	(0XE027,	"mov AX,Exec_Environ ; get environ pointer",	0);
	create_insn	(x=0XE027);
	op_dec		(x,	1);
	set_cmt	(0XE02C,	"no environment",	0);
	set_cmt	(0XE02E,	"point to header",	0);
	set_cmt	(0XE031,	"assign ownership",	0);
	set_cmt	(0XE033,	"mov ax,Exec_Load_Block\nget load block pointer",	0);
	create_insn	(x=0XE033);
	op_dec		(x,	1);
	set_name	(0XE033,	"No_Owner");
	set_cmt	(0XE037,	"point to header",	0);
	set_cmt	(0XE039,	"assign ownership",	0);
	set_cmt	(0XE03D,	"ARENA.NAME ; ES:DI points to destination",	0);
	set_cmt	(0XE040,	"parse execname\nds:si->name, cx=name length",	0);
	set_cmt	(0XE043,	"save for fake version",	0);
	set_cmt	(0XE044,	"save for fake version",	0);
	set_cmt	(0XE045,	"get char",	0);
	set_name	(0XE045,	"MoveName");
	set_cmt	(0XE046,	"is '.', may be name.exe",	0);
	set_cmt	(0XE048,	"no, move to header",	0);
	set_cmt	(0XE04B,	"ARENAHEADERSIZE ; end of mem arena block?",	0);
	create_insn	(x=0XE04B);
	op_dec		(x,	1);
	set_cmt	(0XE04E,	"jump if so",	0);
	set_cmt	(0XE050,	"continue",	0);
	set_cmt	(0XE052,	"make ASCIIZ",	0);
	set_name	(0XE052,	"Mem_Done");
	set_cmt	(0XE054,	"ARENAHEADERSIZE ; if not all filled",	0);
	create_insn	(x=0XE054);
	op_dec		(x,	1);
	set_cmt	(0XE05A,	"ds:si -> file name",	0);
	set_name	(0XE05A,	"Fill8");
	set_cmt	(0XE060,	"mov SI,Exec_Size",	0);
	create_insn	(x=0XE060);
	op_dec		(x,	1);
	set_cmt	(0XE065,	"ES is now PDB",	0);
	set_cmt	(0XE069,	"push Exec_Environ",	0);
	create_insn	(x=0XE069);
	op_dec		(x,	0);
	set_cmt	(0XE06C,	"pop word [ES:PDB.ENVIRON]",	0);
	set_cmt	(0XE071,	"Set the DOS version number to ..",	0);
	create_insn	(x=0XE071);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE076,	"pop word [ES:PDB.Version]\n.. to be used for this application",	0);
	set_cmt	(0XE07B,	"lds SI,Exec_Blk ; get the block",	0);
	set_cmt	(0XE080,	"lds SI,[SI+EXEC0.5C_FCB] ; get the 5c fcb",	0);
	set_cmt	(0XE083,	"copy drive, name and ext",	0);
	create_insn	(x=0XE083);
	op_dec		(x,	1);
	create_insn	(x=0XE087);
	op_hex		(x,	1);
	set_cmt	(0XE08C,	"DI = 5Ch + 12 = 5Ch + 0Ch = 68h",	0);
	set_cmt	(0XE08E,	"zero extent, etc for CPM",	0);
	set_cmt	(0XE092,	"get block",	0);
	set_cmt	(0XE095,	"save (again)",	0);
	set_cmt	(0XE097,	"lds SI,[SI+EXEC0.6C_FCB] ; get 6C FCB",	0);
	set_cmt	(0XE09A,	"do same as above",	0);
	set_cmt	(0XE0A0,	"get block (last time)",	0);
	set_cmt	(0XE0A2,	"lds SI,[SI+EXEC0.COM_LINE] ; command line",	0);
	create_insn	(x=0XE0A5);
	op_hex		(x,	1);
	set_cmt	(0XE0AA,	"Wham!",	0);
	set_cmt	(0XE0AC,	"get 0FFh in CL",	0);
	set_name	(0XE0B9,	"Exec_BL");
	set_cmt	(0XE0C4,	"get his return address",	0);
	set_name	(0XE0C4,	"Exec_Set_Return");
	set_cmt	(0XE0C7,	"suck out the CS and IP",	0);
	set_cmt	(0XE0CF,	"[ES:PDB.EXIT]",	0);
	set_cmt	(0XE0D7,	"save them where we can get them\nlater when the child exits.",	0);
	set_cmt	(0XE0D9,	"22h*4",	0);
	create_insn	(x=0XE0D9);
	create_insn	(x=0XE0DE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE0E5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XE0EA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE0EF,	"test Exec_Func,exec_func_no_execute",	0);
	create_insn	(x=0XE0EF);
	op_hex		(x,	1);
	set_cmt	(0XE0F5,	"get stack",	0);
	create_insn	(x=0XE0F5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE0FA,	"les DI,Exec_Blk ; and block for return",	0);
	set_cmt	(0XE0FD,	"mov [ES:DI+EXEC1.SS],DS\nreturn SS",	0);
	set_cmt	(0XE101,	"'push' default AX",	0);
	set_cmt	(0XE103,	"save default AX reg",	0);
	set_cmt	(0XE105,	"mov [ES:DI+EXEC1.SP],SI ; return 'SP'",	0);
	create_insn	(x=0XE109);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE10E,	"mov [ES:DI+EXEC1.CS],DS\ninitial entry stuff",	0);
	set_cmt	(0XE112,	"mov [ES:DI+EXEC1.IP],AX",	0);
	set_cmt	(0XE11C,	"get entry point",	0);
	create_insn	(x=0XE11C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XE11C,	"exec_go");
	set_cmt	(0XE121,	"new stack",	0);
	create_insn	(x=0XE121);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XE12B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE131,	"DS:SI points to entry point\nAX:DI points to initial stack\nDX has PDB pointer\nBX has initial AX value\n;",	0);
	create_insn	(x=0XE131);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE137,	"set up user's stack",	0);
	set_cmt	(0XE139,	"and SP",	0);
	set_cmt	(0XE13B,	"fake long call to entry",	0);
	set_cmt	(0XE13D,	"set up proper seg registers",	0);
	set_cmt	(0XE141,	"set up proper AX",	0);
	create_insn	(0XE144);
	set_name	(0XE144,	"ExecRead");
	set_cmt	(0XE147,	"MOV bx,Exec_FH",	0);
	create_insn	(0XE153);
	set_name	(0XE153,	"Exec_Dealloc");
	set_cmt	(0XE154,	"(bx) = ARENA_OWNER_SYSTEM",	0);
	create_insn	(0XE15E);
	set_name	(0XE15E,	"Exec_Alloc");
	create_insn	(x=0XE15F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE167,	"call LCritMEM",	0);
	create_insn	(0XE16C);
	set_name	(0XE16C,	"ChangeOwners");
	set_cmt	(0XE16E,	"mov AX,Exec_Environ",	0);
	create_insn	(x=0XE16E);
	op_dec		(x,	1);
	set_cmt	(0XE174,	"mov AX,Exec_Load_Block",	0);
	create_insn	(x=0XE174);
	op_dec		(x,	1);
	set_name	(0XE17C,	"chgown_retn");
	set_cmt	(0XE17D,	"is area allocated?",	0);
	create_insn	(0XE17D);
	set_name	(0XE17D,	"ChangeOwner");
	set_cmt	(0XE17F,	"no, do nothing",	0);
	set_cmt	(0XE185,	"mov [ARENA.OWNER],BX",	0);
	set_cmt	(0XE18B,	"lds SI,ExecName ; DS:SI points to name",	0);
	create_insn	(x=0XE18B);
	op_dec		(x,	1);
	set_name	(0XE18B,	"Scan_Execname");
	set_cmt	(0XE18E,	"CX= starting addr",	0);
	set_name	(0XE18E,	"Scan_Execname1");
	set_cmt	(0XE190,	"get char",	0);
	set_cmt	(0XE191,	"is ':' , may be A:name",	0);
	set_cmt	(0XE193,	"yes, save si",	0);
	set_cmt	(0XE195,	"is '\\', may be A:\\name",	0);
	set_cmt	(0XE197,	"yes, save si",	0);
	set_cmt	(0XE199,	"is end of name",	0);
	set_cmt	(0XE19B,	"no, continue scanning",	0);
	set_cmt	(0XE19D,	"get name's length",	0);
	set_cmt	(0XE19F,	"cx= length, si= starting addr",	0);
	create_insn	(0XE1A2);
	set_name	(0XE1A2,	"Scan_Special_Entries");
	set_cmt	(0XE1A3,	"(MINOR_VERSION<<8)+MAJOR_VERSION",	0);
	create_insn	(x=0XE1A3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE1AA,	"ES:DI --> Table in SETVER.SYS",	0);
	create_insn	(x=0XE1AA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE1B3,	"If ZR then no table",	0);
	set_cmt	(0XE1B5,	"end of list",	0);
	set_cmt	(0XE1BA,	"yes",	0);
	set_cmt	(0XE1BC,	"save di",	0);
	create_insn	(x=0XE1BC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE1C1,	"same length ?",	0);
	set_cmt	(0XE1C3,	"no",	0);
	set_cmt	(0XE1C5,	"es:di -> special name",	0);
	set_cmt	(0XE1C6,	"save length and name addr",	0);
	set_cmt	(0XE1C8,	"save len",	0);
	set_cmt	(0XE1D2,	"get special version",	0);
	set_cmt	(0XE1D5,	"save it",	0);
	create_insn	(x=0XE1D5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE1D9,	"take len off the stack",	0);
	set_cmt	(0XE1DE,	"get len from stack",	0);
	create_insn	(0XE1DE);
	set_cmt	(0XE1DF,	"restore si,cx",	0);
	set_cmt	(0XE1E1,	"restore old di",	0);
	create_insn	(x=0XE1E1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE1E6,	"position to next entry",	0);
	set_cmt	(0XE1EA,	"DI -> next entry length",	0);
	create_insn	(0XE1EF);
	create_insn	(0XE1F0);
	set_name	(0XE1F0,	"$KEEP_PROCESS");
	set_cmt	(0XE1F1,	"EXIT_KEEP_PROCESS",	0);
	create_insn	(x=0XE1F1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE1F7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XE204,	"Keep_Shrink");
	create_insn	(x=0XE216);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XE216,	"Keep_Done");
	set_name	(0XE221,	"Keep_Done2");
	create_insn	(0XE224);
	set_name	(0XE224,	"stay_resident");
	create_insn	(x=0XE22A);
	op_hex		(x,	1);
	create_insn	(x=0XE22C);
	op_hex		(x,	1);
	create_insn	(0XE232);
	set_name	(0XE232,	"$EXIT");
	create_insn	(x=0XE234);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE23B,	"EXIT_TERMINATE",	0);
	create_insn	(x=0XE23B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE243,	"EXIT_CTRL_C",	0);
	create_insn	(x=0XE243);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XE249,	"exit_inner");
	create_insn	(x=0XE24C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE251,	"[SI+user_env.user_CS]",	0);
	create_insn	(0XE256);
	set_name	(0XE256,	"$ABORT");
	set_cmt	(0XE258,	"EXIT_ABORT",	0);
	create_insn	(x=0XE258);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE25E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XE263);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE26A,	"[SI+user_env.user_CS]\nset up old interrupts",	0);
	set_cmt	(0XE271,	"SAVEXIT",	0);
	set_cmt	(0XE274,	"addr_int_terminate",	0);
	create_insn	(x=0XE280);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XE280,	"_sub_unknown2_");
	create_insn	(x=0XE289);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_dword	(0XE28F);
	set_name	(0XE28F,	"_dword_unknown");
	create_insn	(x=0XE293);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XE293,	"_sub_unknown_");
	create_insn	(x=0XE2A3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XE2BB);
	op_hex		(x,	1);
	create_insn	(x=0XE2BE);
	op_dec		(x,	1);
	create_insn	(x=0XE2C1);
	op_hex		(x,	1);
	create_insn	(x=0XE2C8);
	op_hex		(x,	1);
	create_insn	(x=0XE2CB);
	op_dec		(x,	1);
	create_insn	(x=0XE2D1);
	op_hex		(x,	1);
	create_insn	(x=0XE2D9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XE2DE);
	op_hex		(x,	1);
	create_insn	(x=0XE2E7);
	op_hex		(x,	1);
	create_insn	(x=0XE2FB);
	op_dec		(x,	1);
	create_insn	(0XE30C);
	set_name	(0XE30C,	"_sub_unknown3_");
	create_insn	(x=0XE337);
	op_hex		(x,	1);
	create_insn	(x=0XE34E);
	op_hex		(x,	1);
	create_insn	(x=0XE356);
	op_hex		(x,	1);
	create_insn	(0XE3C0);
	create_insn	(0XE3D2);
	create_insn	(0XE3E9);
	create_insn	(x=0XE3EC);
	op_hex		(x,	1);
	create_insn	(x=0XE3FB);
	op_hex		(x,	1);
	create_insn	(0XE401);
	set_name	(0XE401,	"RetExePatch");
	create_insn	(x=0XE402);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XE402,	"arena_free_process");
	set_cmt	(0XE406,	"ARENA.SIGNATURE",	0);
	set_cmt	(0XE410,	"[ARENA.OWNER] ; is block owned by pid?",	0);
	create_insn	(x=0XE410);
	set_cmt	(0XE414,	"no, skip to next",	0);
	set_cmt	(0XE416,	"yes... free him",	0);
	create_insn	(x=0XE416);
	set_cmt	(0XE41A,	"arena_signature_end",	0);
	create_insn	(x=0XE424);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE428,	"Q: is umb_head initialized",	0);
	set_cmt	(0XE42B,	"N: we're done",	0);
	set_cmt	(0XE42F,	"Q: is last arena above umb_head",	0);
	set_cmt	(0XE431,	"Y: we've scanned umbs also. done.",	0);
	set_cmt	(0XE435,	"current block",	0);
	create_insn	(0XE435);
	set_name	(0XE435,	"arena_next");
	set_cmt	(0XE437,	"[ARENA.SIZE] ; + current block length",	0);
	create_insn	(x=0XE437);
	set_cmt	(0XE43B,	"remember that header!",	0);
	set_name	(0XE43C,	"check_signature");
	set_cmt	(0XE43E,	"arena_signature_normal",	0);
	set_cmt	(0XE448,	"arena_signature_end",	0);
	set_name	(0XE44B,	"check_signature_ok");
	set_cmt	(0XE44C,	"arena_signature_end",	0);
	create_insn	(0XE44C);
	set_name	(0XE44C,	"Coalesce");
	set_cmt	(0XE454,	"\nIF next block isnt free THEN return",	0);
	set_cmt	(0XE456,	"[ES:ARENA.OWNER]",	0);
	set_cmt	(0XE45D,	"[ES:ARENA.SIZE] ; next block size",	0);
	set_cmt	(0XE462,	"+ 1 (for header size)",	0);
	set_cmt	(0XE463,	"[ARENA.SIZE]",	0);
	create_insn	(x=0XE463);
	set_cmt	(0XE467,	"move up signature",	0);
	set_cmt	(0XE46C,	"try again",	0);
	set_cmt	(0XE46E,	"call ECritMEM",	0);
	create_insn	(0XE46E);
	set_name	(0XE46E,	"$ALLOC");
	create_insn	(x=0XE471);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE475,	"assume LOW_FIRST",	0);
	create_insn	(x=0XE475);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE479,	"HIGH_FIRST+HIGH_ONLY",	0);
	create_insn	(x=0XE479);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XE481);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XE489);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE48D,	"start_arena = umb_head",	0);
	create_insn	(x=0XE48D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE493,	"0",	0);
	set_cmt	(0XE495,	"init the options",	0);
	create_insn	(x=0XE495);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE499);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE49D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE4A1,	"alloc_max = 0",	0);
	set_cmt	(0XE4A2,	"beginning of arena",	0);
	create_insn	(x=0XE4A2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE4AD,	"[ARENA.OWNER]",	0);
	create_insn	(x=0XE4B3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XE4BB,	"HIGH_FIRST\nQ: is alloc strategy high_first",	0);
	create_insn	(x=0XE4BB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XE4C1,	"N: see if we reached last arena",	0);
	create_insn	(x=0XE4C3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XE4C7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE4CE,	"ax = current block",	0);
	set_cmt	(0XE4D0,	"Q: check against umb_head",	0);
	create_insn	(x=0XE4D0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE4D7,	"arena_signature_end\nIF current block is last THEN",	0);
	create_insn	(0XE4D7);
	set_cmt	(0XE4DA,	"GOTO end",	0);
	set_cmt	(0XE4DF,	"IF no error THEN GOTO scan",	0);
	set_cmt	(0XE4E2,	"call LCritMEM",	0);
	set_name	(0XE4E2,	"alloc_trashed");
	set_cmt	(0XE4E5,	"error_arena_trashed",	0);
	create_insn	(x=0XE4EA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE4F4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE4F8,	"Q: started scanning from arena_head",	0);
	create_insn	(x=0XE4F8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE4FD,	"Y: not enough memory",	0);
	set_cmt	(0XE4FF,	"HIGH_ONLY\nQ: is the alloc strat HIGH_ONLY",	0);
	create_insn	(x=0XE4FF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XE505,	"Y: return size of largest UMB",	0);
	set_cmt	(0XE507,	"N: start scanning from arena_head",	0);
	create_insn	(x=0XE507);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XE50D);
	set_name	(0XE50D,	"alloc_fail");
	set_cmt	(0XE511,	"[SI+user_env.user_BX]",	0);
	set_cmt	(0XE514,	"call LCritMEM",	0);
	set_cmt	(0XE517,	"error_not_enough_memory",	0);
	set_cmt	(0XE51B,	"add following free block to current",	0);
	create_insn	(0XE51B);
	set_cmt	(0XE520,	"[ARENA.SIZE]",	0);
	set_cmt	(0XE525,	"check for max found size",	0);
	create_insn	(x=0XE530);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE538,	"save first one found",	0);
	create_insn	(x=0XE538);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE53D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE543,	"initial best",	0);
	create_insn	(x=0XE546);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE54B,	"[ES:ARENA.SIZE]\nis size of best larger than found?",	0);
	create_insn	(x=0XE54B);
	set_cmt	(0XE553,	"assign best",	0);
	create_insn	(x=0XE553);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE558,	"assign last",	0);
	create_insn	(x=0XE558);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE560);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE565,	"[ARENA.SIZE]",	0);
	set_cmt	(0XE56D,	"sizes are equal, no split",	0);
	set_cmt	(0XE56F,	"point to next block",	0);
	set_cmt	(0XE571,	"no decrement!",	0);
	set_cmt	(0XE574,	"bx has size of lower block",	0);
	set_cmt	(0XE576,	"cx has upper (requested) size",	0);
	create_insn	(0XE578);
	create_insn	(x=0XE57A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE57F,	"mask off bit 7",	0);
	create_insn	(x=0XE57F);
	op_hex		(x,	1);
	set_cmt	(0XE583,	"BEST_FIT",	0);
	create_insn	(x=0XE588);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XE58F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE594,	"[ARENA.SIZE]",	0);
	set_name	(0XE594,	"alloc_get_size");
	set_cmt	(0XE598,	"get room left over",	0);
	set_cmt	(0XE59E,	"IF BX = size THEN (don't split)",	0);
	set_cmt	(0XE5A2,	"remember the header",	0);
	set_cmt	(0XE5A3,	"ES <- DS + BX (new header location)",	0);
	set_cmt	(0XE5A5,	"CX <- size of split block",	0);
	set_cmt	(0XE5A6,	"[ARENA.SIZE]",	0);
	set_cmt	(0XE5AA,	"split size",	0);
	set_cmt	(0XE5AF,	"arena_signature_normal",	0);
	set_cmt	(0XE5B1,	"current signature",	0);
	set_cmt	(0XE5B3,	"new block sig <- old block sig",	0);
	set_cmt	(0XE5B6,	"[ES:ARENA.OWNER]",	0);
	create_insn	(x=0XE5BD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE5C1,	"[ARENA.OWNER]",	0);
	set_cmt	(0XE5C8,	"call LCritMEM",	0);
	set_cmt	(0XE5CE,	"call ECritMEM",	0);
	create_insn	(0XE5CE);
	set_name	(0XE5CE,	"$SETBLOCK");
	set_cmt	(0XE5D1,	"ARENA.SIGNATURE",	0);
	create_insn	(0XE5DF);
	set_cmt	(0XE5E6,	"[ARENA.SIZE]",	0);
	set_cmt	(0XE5F2,	"call ECritMEM",	0);
	create_insn	(0XE5F2);
	set_name	(0XE5F2,	"$DEALLOC");
	set_cmt	(0XE5F5,	"EXECA20OFF",	0);
	create_insn	(x=0XE5F5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XE5FB,	"Q: was the previous call an int 21h\n exec call\nN: continue",	0);
	create_insn	(x=0XE5FD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE605);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE60B,	"ARENA.SIGNATURE",	0);
	set_cmt	(0XE616,	"[ES:ARENA.OWNER]",	0);
	set_cmt	(0XE61B,	"call LCritMEM",	0);
	set_name	(0XE61E,	"dealloc_ok");
	create_insn	(0XE620);
	set_cmt	(0XE623,	"error_invalid_block",	0);
	set_name	(0XE625,	"AllocOperErrj");
	set_cmt	(0XE628,	"get/set allocation mechanism",	0);
	create_insn	(0XE628);
	set_name	(0XE628,	"$ALLOCOPER");
	set_cmt	(0XE638,	"errLOC_Mem",	0);
	create_insn	(x=0XE638);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XE638,	"AllocOperError");
	set_cmt	(0XE63E,	"error_invalid_function",	0);
	set_name	(0XE640,	"AllocOperErrj2");
	create_insn	(x=0XE642);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XE642,	"AllocArenaError");
	set_cmt	(0XE648,	"error_arena_trashed",	0);
	create_insn	(x=0XE64C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XE64C,	"AllocGetStrat");
	set_name	(0XE652,	"AllocOperOk");
	create_insn	(0XE654);
	set_name	(0XE654,	"AllocSetStrat");
	set_cmt	(0XE655,	"STRAT_MASK",	0);
	create_insn	(x=0XE655);
	op_hex		(x,	1);
	create_insn	(x=0XE65F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XE664,	"AllocOperOkj");
	create_insn	(x=0XE666);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XE666,	"AllocGetLink");
	set_cmt	(0XE66A,	"LINKSTATE",	0);
	create_insn	(x=0XE66A);
	op_hex		(x,	1);
	set_name	(0XE66C,	"AllocOperOkj2");
	create_insn	(x=0XE66E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XE66E,	"AllocSetLink");
	set_cmt	(0XE673,	"Q: has umb_head been initialized",	0);
	set_cmt	(0XE676,	"N: error",	0);
	set_cmt	(0XE681,	"LINKSTATE",	0);
	create_insn	(x=0XE681);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XE681,	"UnlinkUmbs");
	set_cmt	(0XE68E,	"arena_signature_end",	0);
	set_cmt	(0XE693,	"~LINKSTATE",	0);
	create_insn	(x=0XE693);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XE699,	"unlinked");
	set_cmt	(0XE69B,	"LINKSTATE",	0);
	create_insn	(x=0XE69B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XE69B,	"LinkUmbs");
	set_cmt	(0XE6A8,	"arena_signature_normal",	0);
	set_cmt	(0XE6AD,	"LINKSTATE",	0);
	create_insn	(x=0XE6AD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XE6B3,	"linked");
	create_insn	(0XE6B5);
	set_name	(0XE6B5,	"GetLastArena");
	create_insn	(x=0XE6B6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE6BE,	"arena_signature_end",	0);
	set_cmt	(0XE6CB,	"LINKSTATE",	0);
	create_insn	(x=0XE6CB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XE6D3,	"arena_signature_end",	0);
	create_insn	(0XE6D9);
	set_cmt	(0XE6DD,	"LINKSTATE",	0);
	create_insn	(x=0XE6DD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(0XE6F3);
	create_word	(x=0XE6F6);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0XE6F6,	"SERVERTAB");
	create_word	(x=0XE6F8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_name	(0XE6F8,	"SERVERLEAVE");
	set_cmt	(0XE6FA,	"(SERVER_DISP_END-SERVER_DISP-1)/2 = 11",	0);
	create_byte	(x=0XE6FA);
	op_dec		(x,	0);
	set_name	(0XE6FA,	"SERVER_DISP");
	set_cmt	(0XE6FB,	"0",	0);
	create_word	(x=0XE6FB);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE6FD,	"1",	0);
	create_word	(x=0XE6FD);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE6FF,	"2",	0);
	create_word	(x=0XE6FF);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE701,	"3 ; CLOSE_UID",	0);
	create_word	(x=0XE701);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE703,	"4 ; CLOSE_UID_PID",	0);
	create_word	(x=0XE703);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE705,	"5 ; GET_LIST",	0);
	create_word	(x=0XE705);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE707,	"6",	0);
	create_word	(x=0XE707);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE709,	"7",	0);
	create_word	(x=0XE709);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE70B,	"8",	0);
	create_word	(x=0XE70B);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE70D,	"9",	0);
	create_word	(x=0XE70D);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0XE70F,	"10\nSERVER_DISP_END",	0);
	create_word	(x=0XE70F);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0XE711);
	set_name	(0XE711,	"$ServerCall");
	set_cmt	(0XE717,	"No DPL on calls 6,7,8,9",	0);
	set_cmt	(0XE719,	"Point to DPL with DS:SI",	0);
	set_name	(0XE719,	"SET_STUFF");
	set_cmt	(0XE71B,	"[SI+DPL.PID]",	0);
	set_cmt	(0XE71E,	"Set process ID",	0);
	create_insn	(x=0XE71E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XE723,	"NO_SET_ID");
	set_cmt	(0XE731,	"errLOC_Unk",	0);
	create_insn	(x=0XE731);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE737,	"error_invalid_function",	0);
	set_name	(0XE739,	"servercall_error");
	create_insn	(0XE73C);
	set_name	(0XE73C,	"SERVERRETURN");
	create_insn	(0XE73D);
	set_name	(0XE73D,	"COMMIT_ALL");
	set_cmt	(0XE741,	"call ECritSFT",	0);
	set_cmt	(0XE744,	"scan SFT cache",	0);
	set_name	(0XE744,	"CommitLoop");
	set_cmt	(0XE74A,	"[ES:DI+SF_ENTRY.sf_Ref_Count]",	0);
	set_cmt	(0XE750,	"[ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy",	0);
	set_cmt	(0XE756,	"[ES:DI+SF_ENTRY.sf_flags],sf_isnet",	0);
	create_insn	(x=0XE756);
	op_hex		(x,	1);
	create_insn	(x=0XE75E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE762);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XE769,	"CommitNext");
	set_cmt	(0XE76D,	"call LCritSFT",	0);
	create_insn	(0XE76D);
	set_name	(0XE76D,	"CommitDone");
	set_name	(0XE771,	"Commit_Ok");
	create_insn	(0XE774);
	set_name	(0XE774,	"CLOSE_NAME");
	set_name	(0XE777,	"SetCXOK");
	create_insn	(0XE779);
	set_name	(0XE779,	"func_err");
	create_insn	(0XE77B);
	set_cmt	(0XE77E,	"get rid of call to $srvcall",	0);
	set_name	(0XE77E,	"SRV_CALL");
	set_cmt	(0XE785,	"DS:SI point to stack\nES:DI point to DPL",	0);
	set_cmt	(0XE789,	"DS:SI point to DPL\nES:DI point to stack",	0);
	set_cmt	(0XE78A,	"copy the registers from DPL",	0);
	set_cmt	(0XE78D,	"Put in AX,BX,CX,DX,SI,DI",	0);
	set_cmt	(0XE790,	"Skip user_BP",	0);
	set_cmt	(0XE791,	"DS",	0);
	set_cmt	(0XE792,	"ES",	0);
	set_cmt	(0XE793,	"DS:SI -> DPL",	0);
	set_cmt	(0XE794,	"[SI+DPL.AX]",	0);
	set_cmt	(0XE796,	"[SI+DPL.BX]",	0);
	set_cmt	(0XE799,	"[SI+DPL.CX]",	0);
	set_cmt	(0XE79C,	"[SI+DPL.DX]",	0);
	set_cmt	(0XE79F,	"[SI+DPL.DI]",	0);
	create_insn	(x=0XE79F);
	op_dec		(x,	1);
	set_cmt	(0XE7A2,	"[SI+DPL.ES]",	0);
	create_insn	(x=0XE7A2);
	op_dec		(x,	1);
	set_cmt	(0XE7A5,	"[SI+DPL.SI]",	0);
	set_cmt	(0XE7A8,	"[SI+DPL.DS]",	0);
	create_insn	(x=0XE7A8);
	op_dec		(x,	1);
	create_insn	(x=0XE7AC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE7B1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE7B6,	"-1 ; set no redirect flag",	0);
	create_insn	(x=0XE7B6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XE7BF);
	set_name	(0XE7BF,	"GET_DOS_DATA");
	set_cmt	(0XE7C1,	"offset SWAP_START",	0);
	create_insn	(x=0XE7C1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE7C4,	"offset SWAP_END",	0);
	create_insn	(x=0XE7C4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE7C7,	"offset SWAP_ALWAYS",	0);
	create_insn	(x=0XE7C7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE7CE,	"div by 2, remainder in carry",	0);
	create_insn	(x=0XE7CE);
	op_hex		(x,	1);
	set_cmt	(0XE7D0,	"div by 2 + round up",	0);
	set_cmt	(0XE7D3,	"round up to 2 boundary",	0);
	create_insn	(x=0XE7D3);
	op_hex		(x,	1);
	set_cmt	(0XE7D8,	"[SI+user_env.user_DS]",	0);
	create_insn	(x=0XE7D8);
	op_dec		(x,	0);
	set_cmt	(0XE7DB,	"[SI+user_env.user_SI]",	0);
	set_cmt	(0XE7DE,	"[SI+user_env.user_DX]",	0);
	set_cmt	(0XE7E1,	"[SI+user_env.user_CX]",	0);
	set_name	(0XE7E4,	"Commit_Okj");
	create_insn	(0XE7E6);
	set_name	(0XE7E6,	"SPOOL_OPER");
	set_cmt	(0XE7EA,	"Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE\nSTACK: WORD subfunction\nReturn: CF set on error, AX = error code\nSTACK unchanged",	0);
	create_insn	(x=0XE7EA);
	op_hex		(x,	0);
	create_insn	(0XE7F1);
	set_name	(0XE7F1,	"func_err2");
	set_cmt	(0XE7F3,	"[SI+DPL.AX]",	0);
	create_insn	(0XE7F3);
	set_name	(0XE7F3,	"_$SetExtendedError");
	create_insn	(x=0XE7F5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE7F9,	"[SI+DPL.DI]",	0);
	create_insn	(x=0XE7F9);
	op_dec		(x,	1);
	create_insn	(x=0XE7FC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE800,	"[SI+DPL.ES]",	0);
	create_insn	(x=0XE800);
	op_dec		(x,	1);
	create_insn	(x=0XE803);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE807,	"[SI+DPL.BX]",	0);
	create_insn	(x=0XE80A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE80E,	"[SI+DPL.CX]",	0);
	create_insn	(x=0XE811);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE817,	"es -> dosdata",	0);
	create_insn	(0XE817);
	set_name	(0XE817,	"pJFNFromHandle");
	set_cmt	(0XE81C,	"get user process data block",	0);
	create_insn	(x=0XE81C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE821,	"[ES:PDB.JFN_Length]\nis handle greater than allocated ?",	0);
	set_cmt	(0XE826,	"yes",	0);
	set_cmt	(0XE828,	"[ES:PDB.JFN_Pointer]\nget pointer to beginning of table",	0);
	set_cmt	(0XE82D,	"add in offset, clear 'C'",	0);
	set_cmt	(0XE830,	"error_invalid_handle",	0);
	create_insn	(0XE830);
	set_name	(0XE833,	"pJFNFromHandle_error");
	set_cmt	(0XE834,	"get jfn pointer",	0);
	create_insn	(0XE834);
	set_name	(0XE834,	"SFFromHandle");
	set_cmt	(0XE839,	"-1 ; unused handle",	0);
	set_cmt	(0XE83F,	"save handle",	0);
	set_cmt	(0XE840,	"get SFN",	0);
	set_cmt	(0XE843,	"ignore upper half",	0);
	set_cmt	(0XE845,	"get real sf spot",	0);
	set_cmt	(0XE848,	"restore",	0);
	set_cmt	(0XE84A,	"error_invalid_handle",	0);
	create_insn	(0XE84A);
	set_cmt	(0XE84E,	"es -> dosdata",	0);
	create_insn	(0XE84E);
	set_name	(0XE84E,	"SFFromSFN");
	set_cmt	(0XE853,	"(es:di) = start of SFT table",	0);
	create_insn	(x=0XE853);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE858,	"[ES:DI+SFT.SFCount]\nis handle in this table?",	0);
	set_cmt	(0XE85C,	"yes, go grab it",	0);
	set_cmt	(0XE862,	"[ES:DI+SFT.SFLink]\nget next table segment",	0);
	set_cmt	(0XE865,	"-1 ; end of tables?",	0);
	set_cmt	(0XE868,	"no, try again",	0);
	set_cmt	(0XE86B,	"return with error, not found",	0);
	create_insn	(0XE86C);
	set_cmt	(0XE86D,	"SF_ENTRY.size",	0);
	create_insn	(x=0XE86D);
	op_dec		(x,	1);
	set_cmt	(0XE870,	"(ax) = offset into this SF block",	0);
	set_cmt	(0XE872,	"add base of SF block",	0);
	set_cmt	(0XE875,	"SFT.SFTable  ; offset into structure",	0);
	set_cmt	(0XE878,	"return with 'C' clear",	0);
	set_cmt	(0XE879,	"(bx) = initial JFN to try = 0",	0);
	create_insn	(0XE879);
	set_name	(0XE879,	"JFNFree");
	set_cmt	(0XE87B,	"get the appropriate handle",	0);
	set_cmt	(0XE87E,	"no more handles",	0);
	set_cmt	(0XE880,	"-1 ; free?",	0);
	set_cmt	(0XE884,	"yes, carry is clear",	0);
	set_cmt	(0XE886,	"no, next handle",	0);
	set_cmt	(0XE887,	"and try again",	0);
	set_cmt	(0XE889,	"error_too_many_open_files",	0);
	create_insn	(0XE889);
	set_cmt	(0XE88C,	" Allocate a Free SFN/SFT",	0);
	create_insn	(0XE88C);
	set_name	(0XE88C,	"SFNFree");
	set_cmt	(0XE88D,	"0",	0);
	set_cmt	(0XE88F,	"(bx) = SFN to consider",	0);
	set_cmt	(0XE890,	"get the potential handle",	0);
	set_cmt	(0XE894,	"no more free SFNs",	0);
	set_cmt	(0XE896,	"[ES:DI+SF_ENTRY.sf_Ref_Count] ; free?",	0);
	set_cmt	(0XE89A,	"yep, got one",	0);
	set_cmt	(0XE89C,	"[ES:DI+SF_ENTRY.sf_ref_count],sf_busy",	0);
	set_cmt	(0XE8A0,	"special busy mark",	0);
	set_cmt	(0XE8A2,	"try the next one",	0);
	create_insn	(x=0XE8A5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE8A9,	"[ES:DI+SF_ENTRY.sf_UID]",	0);
	set_cmt	(0XE8AD,	"not ours",	0);
	create_insn	(x=0XE8AF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE8B3,	"[ES:DI+SF_ENTRY.sf_PID]",	0);
	set_cmt	(0XE8B7,	"can't use this one, try the next",	0);
	set_cmt	(0XE8B9,	"[ES:DI+SF_ENTRY.sf_ref_count],sf_busy",	0);
	set_cmt	(0XE8C2,	"[ES:DI+SF_ENTRY.sf_UID]",	0);
	set_cmt	(0XE8CA,	"[ES:DI+SF_ENTRY.sf_PID]",	0);
	set_cmt	(0XE8D0,	"return with no error",	0);
	create_insn	(0XE8D1);
	set_cmt	(0XE8D2,	"error_too_many_open_files",	0);
	set_cmt	(0XE8D4,	"return with 'C' and error",	0);
	set_cmt	(0XE8D5,	"get system file entry",	0);
	create_insn	(0XE8D5);
	set_name	(0XE8D5,	"$CLOSE");
	create_insn	(x=0XE8DC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE8E0,	"DS:SI point to JFN table entry\nES:DI point to SFT",	0);
	create_insn	(x=0XE8E0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE8E4,	"[ES:DI+SF_ENTRY.sf_ref_count]\nwill the SFT become free?",	0);
	set_cmt	(0XE8E8,	"yes, free JFN anyway.",	0);
	set_cmt	(0XE8EA,	"[ES:DI+SF_ENTRY.sf_mode]",	0);
	set_cmt	(0XE8EE,	"SHARING_MASK",	0);
	create_insn	(x=0XE8EE);
	op_hex		(x,	1);
	set_cmt	(0XE8F0,	"SHARING_NET_FCB",	0);
	create_insn	(x=0XE8F0);
	op_hex		(x,	1);
	set_cmt	(0XE8F2,	"70-mode and big ref count => free it",	0);
	set_cmt	(0XE8F7,	"release the JFN",	0);
	set_cmt	(0XE900,	"CLOSE ; Bogus multiplan fix",	0);
	create_insn	(x=0XE900);
	op_hex		(x,	1);
	set_name	(0XE902,	"CloseOk");
	create_insn	(0XE905);
	set_name	(0XE905,	"CloseError");
	set_cmt	(0XE908,	"get system file entry",	0);
	create_insn	(0XE908);
	set_name	(0XE908,	"$COMMIT");
	create_insn	(x=0XE90F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE913);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XE91C,	"COMMIT",	0);
	create_insn	(x=0XE91C);
	op_hex		(x,	1);
	create_insn	(0XE920);
	set_name	(0XE920,	"CommitError");
	set_cmt	(0XE922,	"0: enlarge  1: shrink  2:psp",	0);
	create_insn	(0XE922);
	set_name	(0XE922,	"$ExtHandle");
	set_cmt	(0XE924,	"FILPERPROC",	0);
	create_insn	(x=0XE924);
	op_dec		(x,	1);
	create_insn	(x=0XE929);
	op_dec		(x,	1);
	create_insn	(x=0XE92C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XE92C,	"exth2");
	set_cmt	(0XE931,	"[ES:PDB.JFN_Length]\nget number of handle allowed",	0);
	set_cmt	(0XE936,	"the requested == current",	0);
	set_cmt	(0XE938,	"yes and exit",	0);
	set_cmt	(0XE93A,	"go allocate new table",	0);
	set_cmt	(0XE93C,	"shrink",	0);
	set_cmt	(0XE93F,	"[ES:PDB.JFN_Pointer+2]",	0);
	set_cmt	(0XE946,	"get difference",	0);
	set_cmt	(0XE948,	"-1 ; scan through handles to ensure",	0);
	set_name	(0XE948,	"chck_handles");
	set_cmt	(0XE94B,	"close status",	0);
	set_cmt	(0XE950,	"FILPERPROC",	0);
	create_insn	(x=0XE950);
	op_dec		(x,	1);
	set_cmt	(0XE955,	"psp",	0);
	set_cmt	(0XE958,	"PDB.JFN_TABLE",	0);
	create_insn	(x=0XE958);
	op_dec		(x,	1);
	create_insn	(0XE95E);
	set_name	(0XE95E,	"larger");
	set_cmt	(0XE961,	"65535 is not allowed",	0);
	set_cmt	(0XE965,	"adjust to paragraph boundary",	0);
	set_cmt	(0XE96C,	"clear most 3 bits",	0);
	create_insn	(x=0XE96C);
	op_hex		(x,	1);
	set_cmt	(0XE971,	"allocate memory",	0);
	set_cmt	(0XE975,	"not enough memory",	0);
	set_cmt	(0XE979,	"es:di points to new table memory",	0);
	create_insn	(x=0XE97B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XE97B,	"movhandl");
	set_cmt	(0XE980,	"enlarge ?",	0);
	create_insn	(x=0XE980);
	op_hex		(x,	1);
	set_cmt	(0XE984,	"yes",	0);
	set_cmt	(0XE986,	"cx = the amount you shrink",	0);
	create_insn	(0XE98A);
	set_name	(0XE98A,	"ok_done");
	set_cmt	(0XE98D,	"error_too_many_open_files",	0);
	create_insn	(0XE98D);
	set_name	(0XE98D,	"too_many_files");
	set_cmt	(0XE992,	"[PDB.JFN_Length]\nget number of old handles",	0);
	create_insn	(0XE992);
	set_name	(0XE992,	"enlarge");
	set_name	(0XE996,	"copy_hand");
	set_cmt	(0XE998,	"[PDB.JFN_Pointer]\nget old table pointer",	0);
	set_cmt	(0XE99C,	"copy infomation to new table",	0);
	set_cmt	(0XE99E,	"get new number of handles",	0);
	set_cmt	(0XE9A0,	"get the difference",	0);
	set_cmt	(0XE9A2,	"-1 ; set availability to handles",	0);
	create_insn	(x=0XE9A6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XE9AB,	"[PDB.JFN_Pointer]\ncheck if original table pointer",	0);
	set_cmt	(0XE9B0,	"yes, go update PDB entries",	0);
	set_cmt	(0XE9B5,	"[PDB.JFN_Pointer+2]\nget old table segment",	0);
	set_cmt	(0XE9B9,	"deallocate old table memory",	0);
	set_cmt	(0XE9BF,	"psp?",	0);
	create_insn	(x=0XE9BF);
	op_hex		(x,	1);
	set_name	(0XE9BF,	"update_info");
	set_cmt	(0XE9C3,	"no",	0);
	set_cmt	(0XE9C5,	"[PDB.JFN_Pointer],PDB.JFN_TABLE\nrestore",	0);
	set_cmt	(0XE9CD,	"[PDB.JFN_Pointer]\nnew table pointer offset always 0",	0);
	create_insn	(0XE9CD);
	set_name	(0XE9CD,	"non_psp");
	set_cmt	(0XE9D3,	"[PDB.JFN_Pointer+2]\nnew table segment",	0);
	set_name	(0XE9D3,	"final");
	set_cmt	(0XE9D7,	"[PDB.JFN_Length]\nrestore new number of handles",	0);
	set_cmt	(0XE9DD,	"clean stack",	0);
	create_insn	(0XE9DD);
	set_name	(0XE9DD,	"no_memory");
	set_cmt	(0XE9DE,	"error_not_enough_memory",	0);
	set_cmt	(0XE9E2,	"error_invalid_function",	0);
	create_insn	(0XE9E2);
	set_name	(0XE9E2,	"invalid_func");
	create_insn	(x=0XE9E6);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_name	(0XE9E6,	"$READ");
	set_name	(0XE9E9,	"ReadDO");
	set_cmt	(0XE9F1,	"get the handle",	0);
	set_name	(0XE9F6,	"ReadError");
	create_insn	(x=0XE9F8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XE9FD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEA02,	"[ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)\nneed i24",	0);
	create_insn	(x=0XEA02);
	op_hex		(x,	1);
	set_cmt	(0XEA07,	"yes",	0);
	set_cmt	(0XEA09,	"EXT_OPEN_I24_OFF ; set it off",	0);
	create_insn	(x=0XEA09);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XEA0F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XEA14);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEA1E,	"indirect call to operation",	0);
	create_insn	(x=0XEA20);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XEA24);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEA2C,	"get correct return in correct reg",	0);
	create_insn	(0XEA2C);
	set_cmt	(0XEA2E,	"successful return",	0);
	set_name	(0XEA2E,	"Read_Okj");
	create_insn	(0XEA30);
	set_name	(0XEA30,	"Align_Buffer");
	create_insn	(x=0XEA32);
	op_hex		(x,	1);
	set_cmt	(0XEA35,	"original segment",	0);
	set_cmt	(0XEA39,	"new segment",	0);
	set_cmt	(0XEA3B,	"normalize offset",	0);
	create_insn	(x=0XEA3B);
	op_hex		(x,	1);
	create_insn	(x=0XEA3E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XEA43);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XEA49);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_name	(0XEA49,	"$WRITE");
	set_cmt	(0XEA4E,	"get system file entry",	0);
	create_insn	(0XEA4E);
	set_name	(0XEA4E,	"$LSEEK");
	set_name	(0XEA51,	"LSeekError");
	set_cmt	(0XEA55,	"is the seek value correct?",	0);
	create_insn	(0XEA55);
	set_cmt	(0XEA57,	"yes, go dispatch",	0);
	create_insn	(x=0XEA59);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XEA59,	"LSeekError1");
	set_cmt	(0XEA64,	"best way to dispatch; check middle",	0);
	create_insn	(0XEA64);
	set_cmt	(0XEA66,	"just store CX:DX",	0);
	set_cmt	(0XEA68,	"seek from end of file",	0);
	set_cmt	(0XEA6A,	"[ES:DI+SF_ENTRY.sf_position]",	0);
	set_cmt	(0XEA6E,	"[ES:DI+SF_ENTRY.sf_position+2]",	0);
	set_cmt	(0XEA74,	"DX:AX is the correct value",	0);
	set_cmt	(0XEA75,	"[ES:DI+SF_ENTRY.sf_position]",	0);
	set_cmt	(0XEA79,	"[ES:DI+SF_ENTRY.sf_position+2]",	0);
	set_cmt	(0XEA80,	"[SI+user_env.user_DX] ; return DX:AX",	0);
	set_cmt	(0XEA83,	"successful return",	0);
	set_cmt	(0XEA85,	"[ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)",	0);
	create_insn	(x=0XEA85);
	op_hex		(x,	1);
	set_cmt	(0XEA8A,	"is net",	0);
	set_cmt	(0XEA8C,	"[ES:DI+SF_ENTRY.sf_size]",	0);
	set_cmt	(0XEA90,	"[ES:DI+SF_ENTRY.sf_size+2]",	0);
	set_cmt	(0XEA96,	"[ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)",	0);
	create_insn	(x=0XEA96);
	op_hex		(x,	1);
	set_cmt	(0XEA9B,	"FCB treated like local file",	0);
	set_cmt	(0XEA9D,	"ES:DI+SF_ENTRY.sf_mode]",	0);
	create_insn	(x=0XEAA1);
	op_hex		(x,	1);
	set_cmt	(0XEAA4,	"SHARING_DENY_NONE",	0);
	create_insn	(x=0XEAA4);
	op_hex		(x,	1);
	set_cmt	(0XEAA7,	"LSEEK exported in this mode",	0);
	set_cmt	(0XEAA9,	"SHARING_DENY_READ",	0);
	create_insn	(x=0XEAA9);
	op_hex		(x,	1);
	set_cmt	(0XEAAC,	"Treated like local Lseek",	0);
	set_cmt	(0XEAB1,	"Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE\nCX:DX = offset (in bytes) from end\nES:DI -> SFT, SFT DPB field -> DPB of drive with file\nSS = DOS CS\nReturn: CF set on error\nCF clear if successful, DX:AX = new file position",	0);
	create_insn	(x=0XEAB1);
	op_hex		(x,	0);
	set_cmt	(0XEAB7,	"SET LAST ACCESS DATE AND TIME",	0);
	create_insn	(0XEAB7);
	set_name	(0XEAB7,	"$FILE_TIMES");
	set_cmt	(0XEABB,	"2,3 -> error",	0);
	create_insn	(x=0XEABB);
	op_hex		(x,	1);
	set_name	(0XEAC2,	"ft1");
	set_cmt	(0XEAC6,	"GET/SET LAST-WRITTEN DATE AND TIME",	0);
	set_cmt	(0XEAC8,	"[es:di+SF_ENTRY.sf_flags],devid_device",	0);
	create_insn	(x=0XEAC8);
	op_hex		(x,	1);
	set_cmt	(0XEACD,	"device",	0);
	set_cmt	(0XEAD2,	"local file",	0);
	set_cmt	(0XEAD4,	"SET LAST ACCESS DATE AND TIME",	0);
	set_name	(0XEAD4,	"ft2");
	set_cmt	(0XEAD8,	"GET LAST ACCESS DATE AND TIME\n(last access time = 0)",	0);
	create_insn	(0XEADC);
	set_name	(0XEADC,	"ft3");
	set_cmt	(0XEADE,	"SET LAST-WRITTEN DATE AND TIME",	0);
	set_cmt	(0XEAE0,	"GET LAST-WRITTEN DATE AND TIME",	0);
	set_cmt	(0XEAE1,	"[es:di+SF_ENTRY.sf_time]",	0);
	set_cmt	(0XEAE5,	"[es:di+SF_ENTRY.sf_date]",	0);
	set_name	(0XEAE5,	"ft4");
	set_name	(0XEAEA,	"ft5");
	set_cmt	(0XEAED,	"[si+user_env.user_CX] ; time",	0);
	set_cmt	(0XEAF0,	"[si+user_env.user_DX] ; date",	0);
	set_cmt	(0XEAF5,	"call ECritSFT",	0);
	create_insn	(0XEAF5);
	set_name	(0XEAF5,	"ft6");
	set_cmt	(0XEAF8,	"[es:di+SF_ENTRY.sf_time] ; drop in new time",	0);
	set_cmt	(0XEAFC,	"[es:di+SF_ENTRY.sf_date] ; and date",	0);
	set_cmt	(0XEB00,	"0",	0);
	set_cmt	(0XEB02,	"[es:di+SF_ENTRY.sf_flags],~devid_file_clean",	0);
	create_insn	(x=0XEB02);
	op_hex		(x,	1);
	set_cmt	(0XEB07,	"[es:di+SF_ENTRY.sf_flags],sf_close_nodate",	0);
	create_insn	(x=0XEB07);
	op_hex		(x,	1);
	set_cmt	(0XEB0D,	"call LCritSFT",	0);
	set_name	(0XEB10,	"ok_ret");
	set_cmt	(0XEB13,	"Retrieve the directory entry for the file",	0);
	create_insn	(0XEB13);
	set_name	(0XEB13,	"ft7");
	set_cmt	(0XEB16,	"ES:DI point to SFT",	0);
	set_cmt	(0XEB17,	"locate a directory entry given an SFT",	0);
	set_cmt	(0XEB1B,	"ES:DI point to entry\nDS:SI point to SFT\nES:BX point to buffer header",	0);
	set_cmt	(0XEB1E,	"SET LAST ACCESS DATE AND TIME",	0);
	set_cmt	(0XEB23,	"GET LAST ACCESS DATE AND TIME\n(always) last access time = 0",	0);
	set_cmt	(0XEB25,	"[es:di+dir_entry.dir_lstaccdate]",	0);
	create_insn	(0XEB30);
	set_name	(0XEB30,	"ft8");
	set_cmt	(0XEB32,	"[si+SF_ENTRY.sf_date]",	0);
	set_cmt	(0XEB3A,	"[es:di+dir_entry.dir_lstaccdate]",	0);
	set_cmt	(0XEB3E,	"[si+SF_ENTRY.sf_mode],devid_device_null\nbit 2 - null device ; !?",	0);
	create_insn	(x=0XEB3E);
	op_hex		(x,	1);
	set_cmt	(0XEB42,	"[es:bx+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XEB42);
	op_hex		(x,	1);
	set_cmt	(0XEB4C,	"[es:bx+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0XEB4C);
	op_hex		(x,	1);
	set_cmt	(0XEB51,	"Drive number, -1 means do not check for drive",	0);
	set_name	(0XEB51,	"ft9");
	set_cmt	(0XEB55,	"DS:DI - pointer to buffer",	0);
	set_cmt	(0XEB60,	"error_invalid_data",	0);
	create_insn	(0XEB60);
	set_name	(0XEB60,	"ft10");
	set_name	(0XEB62,	"ft_error");
	set_cmt	(0XEB65,	"DAY (1 to 31) > 0 ?",	0);
	create_insn	(x=0XEB65);
	op_hex		(x,	1);
	set_name	(0XEB65,	"check_date_val");
	set_cmt	(0XEB67,	"no, invalid value",	0);
	set_cmt	(0XEB69,	"MONTH (1 to 12) > 0 ?",	0);
	create_insn	(x=0XEB69);
	op_hex		(x,	1);
	set_cmt	(0XEB6C,	"no, invalid value",	0);
	set_cmt	(0XEB6F,	"isolate MONTH",	0);
	create_insn	(x=0XEB6F);
	op_hex		(x,	1);
	set_cmt	(0XEB72,	"> 12 ?",	0);
	set_cmt	(0XEB76,	"no, invalid value",	0);
	set_cmt	(0XEB7A,	"valid",	0);
	set_cmt	(0XEB7C,	"invalid",	0);
	create_insn	(0XEB7C);
	set_cmt	(0XEB7F,	"duplicate a jfn, bx = file handle",	0);
	create_insn	(0XEB7F);
	set_name	(0XEB7F,	"$DUP");
	set_cmt	(0XEB84,	"errors go home",	0);
	set_name	(0XEB84,	"DupErrorCheck");
	set_cmt	(0XEB89,	"ds:si = (free) jfn address",	0);
	set_cmt	(0XEB8A,	"get back old handle",	0);
	set_cmt	(0XEB8B,	"get sft in ES:DI",	0);
	set_cmt	(0XEB93,	"get pointer",	0);
	set_cmt	(0XEB96,	"get SFT number",	0);
	set_cmt	(0XEB99,	"stuff in new SFT",	0);
	set_cmt	(0XEB9B,	"and go home",	0);
	create_insn	(0XEB9E);
	set_name	(0XEB9E,	"DupErr");
	set_cmt	(0XEBA0,	"force a dup on a particular jfn",	0);
	create_insn	(0XEBA0);
	set_name	(0XEBA0,	"$DUP2");
	set_cmt	(0XEBA1,	"bx = file handle, cx = new file handle",	0);
	set_cmt	(0XEBA4,	"close destination handle",	0);
	set_cmt	(0XEBA8,	"old in AX, new in BX",	0);
	set_cmt	(0XEBAC,	"check error and do dup",	0);
	create_insn	(0XEBAE);
	set_name	(0XEBAE,	"CheckOwner");
	set_cmt	(0XEBB2,	"set in_use ?",	0);
	create_insn	(0XEBB2);
	set_name	(0XEBB2,	"$AssignOper");
	set_cmt	(0XEBB4,	"no",	0);
	set_name	(0XEBB6,	"srinuse");
	set_cmt	(0XEBB7,	"drive id",	0);
	set_cmt	(0XEBB9,	"ds:si -> cds",	0);
	set_cmt	(0XEBBF,	"[SI+curdir.devptr]",	0);
	set_cmt	(0XEBC5,	"set ?",	0);
	set_cmt	(0XEBC7,	"no",	0);
	set_cmt	(0XEBC9,	"[SI+curdir.flags],curdir_inuse",	0);
	create_insn	(x=0XEBC9);
	op_hex		(x,	1);
	set_cmt	(0XEBD0,	"[SI+curdir.flags],(~curdir_inuse)",	0);
	create_insn	(x=0XEBD0);
	op_hex		(x,	1);
	set_name	(0XEBD0,	"resetdrv");
	set_cmt	(0XEBD7,	"error_invalid_drive",	0);
	create_insn	(0XEBD7);
	set_name	(0XEBD7,	"baddrv");
	set_cmt	(0XEBDC,	"reset inuse ?",	0);
	create_insn	(0XEBDC);
	set_name	(0XEBDC,	"chk08");
	set_cmt	(0XEBDE,	"yes",	0);
	set_cmt	(0XEBE4,	"Multiplex - NETWORK REDIRECTOR - DO REDIRECTION\nSS = DOS CS\nSTACK: WORD function to execute\nReturn: CF set on error, AX = error code\nSTACK unchanged",	0);
	create_insn	(x=0XEBE4);
	op_hex		(x,	0);
	set_name	(0XEBE9,	"okdone");
	create_insn	(0XEBEC);
	set_name	(0XEBEC,	"ASS_ERR");
	set_cmt	(0XEBEF,	"Find a DPB from a drive number",	0);
	create_insn	(x=0XEBEF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XEBEF,	"FIND_DPB");
	set_cmt	(0XEBF4,	"-1",	0);
	set_cmt	(0XEBF9,	"[SI+DPB.DRIVE]",	0);
	set_cmt	(0XEBFB,	"Carry clear (retz)",	0);
	set_cmt	(0XEBFD,	"[SI+DPB.NEXT_DPB]",	0);
	create_insn	(0XEC02);
	set_cmt	(0XEC04,	"set up an empty CDS\nAL has uppercase drive letter",	0);
	create_insn	(0XEC04);
	set_name	(0XEC04,	"InitCDS");
	create_insn	(x=0XEC05);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XEC0A,	"[ES:DI+curdir.flags] ; \"free\" CDS",	0);
	set_cmt	(0XEC10,	"[ES:DI+curdir.flags] ; \"free\" CDS",	0);
	create_insn	(x=0XEC12);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEC17,	"Drive does not map a physical drive",	0);
	set_cmt	(0XEC19,	"(AL) = 0 if A, 1 if B, etc.",	0);
	create_insn	(x=0XEC1B);
	op_chr		(x,	1);
	create_insn	(x=0XEC1D);
	op_chr		(x,	1);
	set_cmt	(0XEC1F,	"[ES:DI+curdir.text] ; set \"x:\"",	0);
	set_cmt	(0XEC22,	"[ES:DI+curdir.text+2],\"\\\"\nNUL terminate",	0);
	set_cmt	(0XEC28,	"[ES:DI+curdir.flags+1],\n(curdir_inuse>>8)",	0);
	create_insn	(x=0XEC28);
	op_hex		(x,	1);
	set_cmt	(0XEC2F,	"[ES:DI+curdir.ID],0",	0);
	set_cmt	(0XEC33,	"[ES:DI+curdir.ID+2],0",	0);
	set_cmt	(0XEC39,	"[ES:DI+curdir.end],2",	0);
	set_cmt	(0XEC3D,	"(al) = drive number",	0);
	set_cmt	(0XEC43,	"OOOOPPPPPSSSS!!!!",	0);
	set_cmt	(0XEC45,	"[ES:DI+curdir.devptr]",	0);
	set_cmt	(0XEC49,	"[ES:DI+curdir.devptr+2]",	0);
	set_name	(0XEC50,	"RET45");
	set_cmt	(0XEC51,	"get/set current user ID (for net)\nAL has function type",	0);
	create_insn	(0XEC51);
	set_name	(0XEC51,	"$UserOper");
	set_cmt	(0XEC53,	"0-get",	0);
	set_cmt	(0XEC55,	"1-set",	0);
	set_cmt	(0XEC57,	"5-printer-get-flags",	0);
	set_cmt	(0XEC59,	"2-printer-set\n3-printer-get\n4-printer-set-flags",	0);
	set_cmt	(0XEC5B,	"errLOC_Unk",	0);
	create_insn	(x=0XEC5B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEC61,	"error_invalid_function",	0);
	set_name	(0XEC63,	"useroper_error");
	set_cmt	(0XEC66,	"return to user the string",	0);
	create_insn	(0XEC66);
	set_name	(0XEC66,	"UserGet");
	set_cmt	(0XEC68,	"destination",	0);
	set_cmt	(0XEC6A,	"Get number",	0);
	create_insn	(x=0XEC6A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XEC72,	"[SI+user_env.user_CX]\nSet number return",	0);
	set_cmt	(0XEC77,	"point source to user string",	0);
	create_insn	(x=0XEC77);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XEC7A);
	op_dec		(x,	1);
	set_name	(0XEC7A,	"UserMove");
	set_cmt	(0XEC7F,	"16th byte is 0",	0);
	set_name	(0XEC82,	"UserBye");
	set_cmt	(0XEC85,	"set the current user",	0);
	create_insn	(x=0XEC85);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XEC85,	"UserSet");
	set_cmt	(0XEC8A,	"user space has source",	0);
	set_cmt	(0XEC8E,	"point dest to user string",	0);
	create_insn	(x=0XEC8E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XEC91,	"signal change",	0);
	create_insn	(x=0XEC91);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XEC98);
	set_name	(0XEC98,	"UserPrint");
	set_cmt	(0XEC9C,	"Multiplex - NETWORK REDIRECTOR - PRINTER SETUP\nSTACK: WORD function\nReturn: CF set on error, AX = error code\nSTACK unchanged",	0);
	create_insn	(x=0XEC9C);
	op_hex		(x,	0);
	create_insn	(0XECA3);
	set_name	(0XECA3,	"OKPA");
	set_cmt	(0XECA5,	"correctly map non-spliced inuse drives\nget inuse drive",	0);
	create_insn	(0XECA5);
	set_name	(0XECA5,	"GetVisDrv");
	create_insn	(x=0XECAC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XECB1,	"[SI+curdir.flags],curdir_splice",	0);
	create_insn	(x=0XECB1);
	op_hex		(x,	1);
	set_cmt	(0XECBB,	"error_invalid_drive",	0);
	create_insn	(x=0XECBB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XECC3,	"are we using default drive?",	0);
	create_insn	(0XECC3);
	set_name	(0XECC3,	"GETTHISDRV");
	set_cmt	(0XECC5,	"no, go get the CDS pointers",	0);
	set_cmt	(0XECC7,	"get the current drive",	0);
	create_insn	(x=0XECC7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XECCB,	"Counteract next instruction",	0);
	set_cmt	(0XECCC,	"0 = A",	0);
	set_cmt	(0XECCF,	"errLOC_Disk",	0);
	create_insn	(x=0XECCF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XECD5,	"Logical or Physical?",	0);
	create_insn	(x=0XECD5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XECDB,	"Logical",	0);
	create_insn	(x=0XECE0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XECE7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XECEC);
	op_chr		(x,	1);
	set_cmt	(0XECF1,	"[ES:DI+curdir.flags],\ncurdir_inuse",	0);
	create_insn	(x=0XECF1);
	op_hex		(x,	1);
	set_cmt	(0XECFC,	"carry clear",	0);
	create_insn	(0XECFE);
	set_cmt	(0XED01,	"Unassigned CDS\nreturn error already set",	0);
	set_cmt	(0XED03,	"[SI+curdir.flags],\ncurdir_inuse",	0);
	create_insn	(x=0XED03);
	op_hex		(x,	1);
	set_cmt	(0XED0A,	"error_invalid_drive\ninvalid FAT drive",	0);
	set_cmt	(0XED0C,	"save this for IOCTL",	0);
	create_insn	(x=0XED0C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XED10,	"errLOC_Unk",	0);
	create_insn	(x=0XED10);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XED1A,	"is this a valid designator ?",	0);
	create_insn	(x=0XED1A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XED1A,	"GetCDSFromDrv");
	set_cmt	(0XED1F,	"yes, get the macro",	0);
	set_cmt	(0XED21,	"signal error",	0);
	create_insn	(0XED23);
	set_cmt	(0XED25,	"get pointer to table",	0);
	create_insn	(x=0XED25);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XED2A,	"curdir.size",	0);
	create_insn	(x=0XED2A);
	op_dec		(x,	1);
	set_cmt	(0XED2C,	"get net offset",	0);
	set_cmt	(0XED2E,	"convert to true pointer",	0);
	create_insn	(x=0XED30);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XED35);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XED3C,	"no error",	0);
	create_insn	(0XED3E);
	set_name	(0XED3E,	"TransFCB");
	create_insn	(x=0XED41);
	op_hex		(x,	1);
	set_cmt	(0XED48,	"point to FCB temp area",	0);
	create_insn	(x=0XED48);
	op_stkvar	(x,	1);
	set_cmt	(0XED4B,	"no extended FCB found",	0);
	create_insn	(x=0XED4B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XED51,	"default search attributes",	0);
	create_insn	(x=0XED51);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XED57,	"get FCB, extended or not",	0);
	set_cmt	(0XED5A,	"not an extended FCB, get drive",	0);
	set_cmt	(0XED5C,	"get attributes",	0);
	set_cmt	(0XED5F,	"store search attributes",	0);
	create_insn	(x=0XED5F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XED63,	"-1 ; signal extended FCB",	0);
	create_insn	(x=0XED63);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XED69,	"get drive byte",	0);
	set_cmt	(0XED6F,	"convert 0-based drive to text",	0);
	set_cmt	(0XED72,	"back over name, ext",	0);
	create_insn	(x=0XED72);
	op_dec		(x,	1);
	set_cmt	(0XED76,	"get a byte",	0);
	set_cmt	(0XED77,	"get flags",	0);
	set_cmt	(0XED7A,	"FFCB",	0);
	create_insn	(x=0XED7A);
	op_hex		(x,	1);
	set_cmt	(0XED83,	"crunch the path",	0);
	set_cmt	(0XED86,	"get original destination",	0);
	set_cmt	(0XED8A,	"lea si,[bp-16] ; point at new pathname",	0);
	create_insn	(x=0XED8A);
	op_stkvar	(x,	1);
	set_cmt	(0XED93,	"convert the path",	0);
	set_cmt	(0XED9A,	"error_path_not_found",	0);
	set_name	(0XED9F,	"TransPath_retn");
	set_cmt	(0XEDA0,	"0",	0);
	create_insn	(0XEDA0);
	set_name	(0XEDA0,	"TransPath");
	set_cmt	(0XEDA4,	"-1",	0);
	create_insn	(0XEDA4);
	set_name	(0XEDA4,	"TransPathSet");
	set_cmt	(0XEDA6,	"NoSetDir = !fExact",	0);
	create_insn	(x=0XEDA6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEDAC,	"fSplice = TRUE",	0);
	create_insn	(x=0XEDAC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XEDAC,	"TransPathNoSet");
	set_cmt	(0XEDB0,	"-1",	0);
	create_insn	(x=0XEDB0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XEDB6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEDBB,	"-1 ; crack from start",	0);
	create_insn	(x=0XEDBB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEDC2,	"DS:SI - point to ASCIZ string path\nDI - point to buffer in DOSDATA",	0);
	set_cmt	(0XEDC4,	"[DI+TEMPLEN] ; end of buffer",	0);
	create_insn	(x=0XEDC4);
	op_dec		(x,	1);
	set_cmt	(0XEDC8,	"if no sharing",	0);
	create_insn	(x=0XEDC8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XEDCE,	"skip to UNC check",	0);
	set_cmt	(0XEDD0,	"get drive and advance DS:SI",	0);
	set_cmt	(0XEDD3,	"Set ThisCDS and convert to 0-based",	0);
	set_cmt	(0XEDD8,	"drop in new",	0);
	set_cmt	(0XEDDB,	"backup limit",	0);
	set_cmt	(0XEDDE,	"copy and canonicalize",	0);
	set_cmt	(0XEDE1,	"errors",	0);
	set_cmt	(0XEDE5,	"point to name",	0);
	create_insn	(x=0XEDE5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XEDE9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XEDF5,	"for FATREAD",	0);
	create_insn	(x=0XEDF5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XEE02,	"error_path_not_found\n(Set up for possible bad path error)",	0);
	set_cmt	(0XEE04,	"(any errors are in Carry flag)",	0);
	set_cmt	(0XEE05,	"-1 ; NULL thisCDS",	0);
	create_insn	(x=0XEE05);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEE0C,	"NetSpoolCheck",	0);
	set_cmt	(0XEE0F,	"Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME\nDS:SI -> ASCIZ filename to canonicalize\nES:DI -> 128-byte buffer for qualified name\nReturn: CF set if not resolved",	0);
	create_insn	(x=0XEE0F);
	op_hex		(x,	0);
	set_cmt	(0XEE13,	"eat drive letter",	0);
	set_cmt	(0XEE17,	"get first two bytes of path",	0);
	set_cmt	(0XEE19,	"convert to normal form",	0);
	set_cmt	(0XEE1C,	"swap for second byte",	0);
	set_cmt	(0XEE1E,	"convert to normal form",	0);
	set_cmt	(0XEE21,	"not a path char",	0);
	set_cmt	(0XEE23,	"are they same?",	0);
	set_cmt	(0XEE25,	"nope",	0);
	set_cmt	(0XEE27,	"We have a UNC request\n(prefixed with two leading \\\\s)",	0);
	set_cmt	(0XEE28,	"get the lead \\\\.",	0);
	set_cmt	(0XEE2D,	"get a byte",	0);
	set_cmt	(0XEE2E,	"convert the char",	0);
	set_cmt	(0XEE33,	"end of string. All done.",	0);
	set_cmt	(0XEE35,	"is it a path char?",	0);
	set_cmt	(0XEE38,	"backup position",	0);
	set_cmt	(0XEE3B,	"no, go copy",	0);
	set_cmt	(0XEE3D,	"wham (and set cMeta)",	0);
	set_cmt	(0XEE42,	"(return error code)",	0);
	create_insn	(0XEE43);
	set_cmt	(0XEE46,	"retrieve drive info",	0);
	create_insn	(0XEE46);
	set_cmt	(0XEE47,	"check for null file",	0);
	set_cmt	(0XEE4C,	"error_file_not_found",	0);
	create_insn	(0XEE50);
	set_cmt	(0XEE51,	"save drive number",	0);
	set_cmt	(0XEE59,	"-1 ; simulate sharing dos call",	0);
	create_insn	(x=0XEE59);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEE5F,	"set ThisCDS and init DUMMYCDS",	0);
	create_insn	(x=0XEE62);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEE6B,	"path separator",	0);
	set_cmt	(0XEE6E,	"move remainder of string",	0);
	set_cmt	(0XEE71,	"everything OK.",	0);
	create_insn	(0XEE75);
	set_cmt	(0XEE78,	"error_path_not_found",	0);
	set_cmt	(0XEE7C,	"error_file_not_found",	0);
	create_insn	(0XEE82);
	set_name	(0XEE82,	"no5Dshere");
	set_cmt	(0XEE85,	"get proper CDS",	0);
	create_insn	(0XEE85);
	set_cmt	(0XEE88,	"error_path_not_found",	0);
	set_cmt	(0XEE8A,	"CARRY set -> bogus drive/spliced",	0);
	create_insn	(x=0XEE8C);
	op_hex		(x,	1);
	set_cmt	(0XEE98,	"poke CDS and make everything OK",	0);
	set_cmt	(0XEEA5,	"point to CDS",	0);
	create_insn	(x=0XEEA5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XEEAA,	"point to destination",	0);
	set_cmt	(0XEEAC,	"[SI+curdir.end] ; point to backup limit",	0);
	set_cmt	(0XEEAF,	"[DI+TEMPLEN] ; regenerate end of buffer",	0);
	create_insn	(x=0XEEAF);
	op_dec		(x,	1);
	set_cmt	(0XEEB7,	"Make sure that there is a path char at end.",	0);
	set_cmt	(0XEEBD,	"get original string",	0);
	set_cmt	(0XEEC0,	"point to path char",	0);
	set_cmt	(0XEEC3,	"is DS:SI a path sep?",	0);
	set_cmt	(0XEEC6,	"no, DI is correct. Assure a path char",	0);
	set_cmt	(0XEEC8,	"end of string?",	0);
	set_cmt	(0XEECA,	"yes, skip.",	0);
	set_cmt	(0XEECC,	"back up to root point.",	0);
	set_cmt	(0XEED9,	"DS:SI start at some file name.\nES:DI points at some path char.",	0);
	set_cmt	(0XEEDC,	"ES:DI point to the correct spot\n     for canonicalization to begin.\nBP is the max extent to advance DI\nBX is the backup limit for",	0);
	set_cmt	(0XEEDF,	"badly formatted path",	0);
	set_cmt	(0XEEE1,	"The string has been moved to ES:DI.",	0);
	set_cmt	(0XEEE3,	"DS:SI point to string",	0);
	create_insn	(x=0XEEE3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XEEE7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XEEEB,	"is there a prefix?",	0);
	set_cmt	(0XEEEE,	"no, do splice\nyes, we have a match",	0);
	set_cmt	(0XEEF0,	"last char to match",	0);
	set_cmt	(0XEEF3,	"did we end on a path char? (root)",	0);
	set_cmt	(0XEEF6,	"yes, no current dir here.",	0);
	set_cmt	(0XEEF8,	"end at NUL?",	0);
	set_cmt	(0XEEFC,	"yes",	0);
	set_cmt	(0XEEFE,	"point to after current path char",	0);
	create_insn	(x=0XEEFF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEF04,	"Splice the result.",	0);
	set_cmt	(0XEF05,	"back to DOSDATA",	0);
	set_cmt	(0XEF06,	"point to beginning of string",	0);
	create_insn	(x=0XEF06);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XEF0C,	"-1",	0);
	create_insn	(x=0XEF0C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XEF13,	"replaces in place.",	0);
	set_cmt	(0XEF18,	"point to correct drive",	0);
	create_insn	(x=0XEF18);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XEF1C,	"[ES:DI+curdir.flags],\ncurdir_isnet",	0);
	create_insn	(x=0XEF1C);
	op_hex		(x,	1);
	set_cmt	(0XEF22,	"net, no fatread necessary (retnz)",	0);
	set_cmt	(0XEF34,	"error_path_not_found\n(Set up for possible bad path error)",	0);
	set_cmt	(0XEF36,	"(any errors in carry flag)",	0);
	set_cmt	(0XEF37,	"copy a path and remove . and .. entries\n; DS:SI - point to ASCIZ string path\n; ES:DI - point to buffer\n; BX - backup limit (offset from ES)\n;      points to slash\n; BP - end of buffer",	0);
	create_insn	(0XEF37);
	set_name	(0XEF37,	"Canonicalize");
	set_cmt	(0XEF38,	" while (PathChr (*s))",	0);
	set_cmt	(0XEF3D,	"if (d > dlim)",	0);
	set_cmt	(0XEF3F,	"goto error;",	0);
	set_cmt	(0XEF42,	"*d++ = *s++;",	0);
	create_insn	(0XEF44);
	set_cmt	(0XEF45,	"0",	0);
	set_cmt	(0XEF47,	"if (*s == 0) {",	0);
	set_cmt	(0XEF4B,	" if (d[-1] == ':')",	0);
	set_cmt	(0XEF52,	"*d++ = '\\';",	0);
	set_cmt	(0XEF57,	"*d++ = 0;",	0);
	set_cmt	(0XEF58,	"return (0);",	0);
	set_cmt	(0XEF5A,	"check for path chars in rest of string",	0);
	create_insn	(0XEF5A);
	set_cmt	(0XEF5D,	"error_path_not_found\n(Set up for bad path error)",	0);
	set_cmt	(0XEF5F,	"path character encountered in string",	0);
	set_cmt	(0XEF61,	"error_file_not_found\n(Set bad file error)",	0);
	set_name	(0XEF64,	"CanonBad_retn");
	set_cmt	(0XEF65,	"if (!CopyComponent (s, d))",	0);
	create_insn	(0XEF65);
	set_cmt	(0XEF68,	"return (-1);",	0);
	set_cmt	(0XEF6A,	"'.' + (0 SHL 8)",	0);
	set_cmt	(0XEF70,	"'..'",	0);
	set_cmt	(0XEF77,	"d--;",	0);
	set_cmt	(0XEF78,	"SkipBack ();",	0);
	set_cmt	(0XEF7B,	"error_path_not_found",	0);
	set_cmt	(0XEF81,	"else\n   d += ct;",	0);
	create_insn	(0XEF81);
	set_cmt	(0XEF86,	"something else...",	0);
	set_cmt	(0XEF88,	"get the char",	0);
	set_cmt	(0XEF89,	"is it path char?",	0);
	set_cmt	(0XEF8C,	"no, go test for nul",	0);
	set_cmt	(0XEF8E,	"beyond buffer end?",	0);
	set_cmt	(0XEF90,	"yep, error.",	0);
	set_cmt	(0XEF92,	"copy the one byte",	0);
	set_cmt	(0XEF93,	"get next byte",	0);
	set_cmt	(0XEF94,	"path char again?",	0);
	set_cmt	(0XEF97,	"yep, grab another",	0);
	set_cmt	(0XEF99,	"back up",	0);
	set_cmt	(0XEF9A,	"go copy component",	0);
	set_cmt	(0XEF9C,	"determine if char is a path separator",	0);
	create_insn	(0XEF9C);
	set_name	(0XEF9C,	"PathSep");
	set_cmt	(0XEF9E,	"test for zero",	0);
	create_insn	(0XEF9E);
	set_name	(0XEF9E,	"PathSepGotCh");
	set_cmt	(0XEFA0,	"return if equal to zero (NUL)",	0);
	set_cmt	(0XEFA2,	"check for path character",	0);
	set_cmt	(0XEFA5,	"and return HIS determination",	0);
	set_cmt	(0XEFA6,	"while (TRUE) {",	0);
	create_insn	(0XEFA6);
	set_name	(0XEFA6,	"SkipBack");
	set_cmt	(0XEFA8,	"if (d < dlim)",	0);
	set_cmt	(0XEFAA,	"goto err;",	0);
	set_cmt	(0XEFAB,	"if (pathchr (*--d))",	0);
	set_cmt	(0XEFAE,	"break;",	0);
	set_cmt	(0XEFB3,	"return (0);",	0);
	set_cmt	(0XEFB5,	"error_path_not_found ; bad path error",	0);
	create_insn	(0XEFB5);
	set_cmt	(0XEFB7,	"return (-1);",	0);
	set_cmt	(0XEFB9,	"room for temp buffer",	0);
	create_insn	(x=0XEFB9);
	op_dec		(x,	1);
	set_name	(0XEFB9,	"CopyComponent");
	set_cmt	(0XEFC7,	"if ((*d++=*s++) == '.') {",	0);
	set_cmt	(0XEFCB,	"if (!pathsep(*s))",	0);
	set_cmt	(0XEFD0,	"if ((*d++=*s++) != '.'",	0);
	set_cmt	(0XEFD9,	"|| !pathsep (*s))\nreturn -1;",	0);
	set_cmt	(0XEFDB,	"*d++ = 0;",	0);
	set_cmt	(0XEFDE,	"CopySoff",	0);
	set_cmt	(0XEFE1,	"    }",	0);
	set_cmt	(0XEFE3,	"CopySoff\nelse {",	0);
	create_insn	(0XEFE3);
	set_cmt	(0XEFE6,	"s = NameTrans (s, Name1);",	0);
	set_cmt	(0XEFE9,	"CopySoff",	0);
	set_cmt	(0XEFEC,	"if (s == CopySOff)\n   return (-1);",	0);
	set_cmt	(0XEFEE,	"if (!fSharing) {",	0);
	create_insn	(x=0XEFEE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XEFF6);
	op_hex		(x,	1);
	set_cmt	(0XEFF9,	"cMeta += fMeta;",	0);
	create_insn	(x=0XEFF9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XEFFE,	"if (cMeta > 0)\n  return (-1);",	0);
	set_cmt	(0XF002,	"else\n  if (cMeta == 0 && fMeta == 0",	0);
	set_cmt	(0XF004,	"return (-1);",	0);
	set_cmt	(0XF006,	"CopySoff",	0);
	create_insn	(x=0XF00B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF00E,	"CopyTemp",	0);
	create_insn	(x=0XF00E);
	op_dec		(x,	1);
	set_cmt	(0XF012,	"PackName (Name1, temp);",	0);
	set_cmt	(0XF016,	"if (strlen(temp)+d > bp)",	0);
	set_cmt	(0XF01A,	"CopyDoff",	0);
	set_cmt	(0XF01D,	"CopyB",	0);
	set_cmt	(0XF020,	"return (-1);",	0);
	set_cmt	(0XF022,	"strcpy (d, temp);",	0);
	set_cmt	(0XF024,	"CopyD",	0);
	set_cmt	(0XF027,	"  }",	0);
	set_cmt	(0XF02B,	"return 0;",	0);
	create_insn	(0XF02D);
	set_cmt	(0XF02E,	"check for path chars in rest of string",	0);
	set_cmt	(0XF031,	"error_file_not_found",	0);
	set_cmt	(0XF036,	"error_path_not_found",	0);
	set_cmt	(0XF03E,	"reclaim temp buffer",	0);
	create_insn	(x=0XF03E);
	op_dec		(x,	1);
	set_cmt	(0XF047,	"pseudo mount by string substitution",	0);
	create_insn	(x=0XF047);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XF047,	"Splice");
	create_insn	(x=0XF04F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF054,	"TmpCDS = ThisCDS",	0);
	create_insn	(x=0XF054);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF05F,	" for (i=1; s = GetCDSFromDrv (i); i++)",	0);
	set_cmt	(0XF066,	"[SI+curdir.flags],curdir_splice",	0);
	create_insn	(x=0XF066);
	op_hex		(x,	1);
	set_cmt	(0XF06D,	"if ( Spliced (i) ) {",	0);
	set_cmt	(0XF06E,	"if (!PathPref (s, d))",	0);
	set_cmt	(0XF074,	"continue;",	0);
	set_cmt	(0XF076,	"if (*s || NoSetDir) {",	0);
	create_insn	(0XF076);
	create_insn	(x=0XF07C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XF084,	"p = src + strlen (p);",	0);
	set_cmt	(0XF089,	"src = TextFromDrive1(src,i);",	0);
	create_insn	(x=0XF08C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF094,	"curdirend += src-p;",	0);
	create_insn	(x=0XF098);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF09C,	"if (*p)",	0);
	set_cmt	(0XF09F,	"*src++ = '\\\\';",	0);
	set_cmt	(0XF0A4,	"strcpy (src, p);",	0);
	set_cmt	(0XF0A7,	"throw away saved stuff",	0);
	create_insn	(x=0XF0A7);
	op_hex		(x,	1);
	set_cmt	(0XF0AA,	"signal splice done.",	0);
	create_insn	(x=0XF0AA);
	op_hex		(x,	1);
	set_cmt	(0XF0AD,	"return;",	0);
	set_cmt	(0XF0AF,	" }",	0);
	create_insn	(x=0XF0AF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF0B4,	"ThisCDS = TmpCDS;",	0);
	create_insn	(x=0XF0B4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF0BB,	"ThisDPB = ThisCDS->devptr;",	0);
	create_insn	(x=0XF0BB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF0C0,	"[SI+curdir.devptr]",	0);
	create_insn	(x=0XF0C3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF0C8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XF0CD,	"Splice_retn");
	set_cmt	(0XF0CE,	"partially process a name",	0);
	create_insn	(0XF0CE);
	set_name	(0XF0CE,	"$NameTrans");
	set_cmt	(0XF0D1,	"DS:SI - source string for translation\nES:DI - pointer to buffer",	0);
	set_cmt	(0XF0D3,	"attr_hidden+attr_system+attr_directory",	0);
	create_insn	(x=0XF0D8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF0DB,	"to translation (everything)",	0);
	create_insn	(x=0XF0E8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XF0E8,	"TransOK");
	set_cmt	(0XF0F3,	"return drive number from a text string",	0);
	create_insn	(0XF0F3);
	set_name	(0XF0F3,	"DriveFromText");
	set_cmt	(0XF101,	"convert to lowercase",	0);
	create_insn	(x=0XF101);
	op_hex		(x,	1);
	set_cmt	(0XF103,	"'a'-1",	0);
	create_insn	(x=0XF103);
	op_hex		(x,	1);
	set_cmt	(0XF107,	"nuke AL...",	0);
	set_cmt	(0XF109,	"AL has drive number",	0);
	set_cmt	(0XF10A,	"convert a drive number to a text string",	0);
	create_insn	(0XF10A);
	set_name	(0XF10A,	"TextFromDrive");
	set_cmt	(0XF10C,	"'A'-1 ; *d++ = drive-1+'A';",	0);
	set_name	(0XF10C,	"TextFromDrive1");
	set_cmt	(0XF10E,	"strcat (d, \":\");",	0);
	set_name	(0XF111,	"PathPref_retn");
	set_cmt	(0XF112,	"see if one path is a prefix of another",	0);
	create_insn	(0XF112);
	set_name	(0XF112,	"PathPref");
	set_cmt	(0XF115,	"get length\ndo not include nul byte",	0);
	set_cmt	(0XF116,	"compare",	0);
	set_cmt	(0XF118,	"return NZ",	0);
	set_cmt	(0XF11B,	"get last byte to match",	0);
	set_cmt	(0XF11E,	"is it a path char (Root!)",	0);
	set_cmt	(0XF121,	"yes, match root (I hope)",	0);
	set_cmt	(0XF123,	"get next char to match",	0);
	set_cmt	(0XF126,	"was it a pathchar?",	0);
	set_cmt	(0XF12A,	"(if) Zero flag set => prefix found",	0);
	set_cmt	(0XF12B,	"fetch a character",	0);
	create_insn	(0XF12B);
	set_name	(0XF12B,	"ScanPathChar");
	set_cmt	(0XF12F,	"not \\, / or NUL => go back for more",	0);
	set_cmt	(0XF131,	"path separator?",	0);
	create_word	(0XF135);
	set_name	(0XF135,	"PATHNAMELEN");
	set_cmt	(0XF137,	"General file open/create code",	0);
	create_insn	(0XF137);
	set_name	(0XF137,	"$OPEN");
	set_cmt	(0XF139,	"attr_hidden+attr_system+attr_directory",	0);
	set_name	(0XF139,	"$Open2");
	create_insn	(x=0XF13E);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0XF142,	"call ECritSFT",	0);
	set_name	(0XF142,	"AccessFile");
	set_cmt	(0XF145,	"get a free sfn",	0);
	set_cmt	(0XF148,	"call LCritSFT",	0);
	set_cmt	(0XF14B,	"no free sft's",	0);
	create_insn	(x=0XF14D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF152);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF157);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF15C,	"get a free jfn",	0);
	set_cmt	(0XF15F,	"there were free JFNs... try SFN",	0);
	create_insn	(x=0XF164);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF169);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF16E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF173);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF178,	"assign the JFN",	0);
	set_cmt	(0XF17B,	"get name in appropriate place",	0);
	create_insn	(x=0XF17D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF181,	"convert the path",	0);
	create_insn	(x=0XF185);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF18C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF192,	"no error, go and open file",	0);
	set_cmt	(0XF194,	"error_file_not_found\nno meta chars allowed",	0);
	set_cmt	(0XF198,	"Mode (Open), Attributes (Create)",	0);
	create_insn	(0XF198);
	set_cmt	(0XF199,	"0",	0);
	set_cmt	(0XF19B,	"[SI+SF_ENTRY.sf_mode],0\ninitialize mode field to 0",	0);
	set_cmt	(0XF19E,	"[SI+SF_ENTRY.sf_MFT],0\nclean out sharing info",	0);
	create_insn	(x=0XF1A1);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0XF1A7,	"SHARING_NO_INHERIT",	0);
	create_insn	(x=0XF1A7);
	op_hex		(x,	1);
	set_cmt	(0XF1AB,	" mask off inherit bit",	0);
	create_insn	(x=0XF1AB);
	op_hex		(x,	1);
	set_cmt	(0XF1AD,	"sf_no_inherit",	0);
	set_cmt	(0XF1B5,	"(es:di) = SFT address",	0);
	set_cmt	(0XF1BE,	"DOS_OPEN (or DOS_CREATE)",	0);
	create_insn	(x=0XF1C1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF1C5,	"check extended open hooks first",	0);
	set_cmt	(0XF1C7,	"SF_ENTRY.sf_ref_count",	0);
	set_cmt	(0XF1CB,	"SF_ENTRY.sf_flags",	0);
	set_cmt	(0XF1D2,	"set SFT-FCB entry \nin the internal (SFT_FCB) table\n(used for FCB calls only!)",	0);
	create_insn	(x=0XF1D5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF1DA,	"-1 ; clear out sfn pointer",	0);
	create_insn	(x=0XF1DA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF1E1,	"bye with no errors",	0);
	set_cmt	(0XF1E4,	"clean off stack",	0);
	create_insn	(0XF1E4);
	set_cmt	(0XF1E5,	"[SI+SF_ENTRY.sf_ref_count],0\nrelease SFT",	0);
	create_insn	(x=0XF1E9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF1EE,	"free the SFN...",	0);
	create_insn	(0XF1F3);
	set_cmt	(0XF1F5,	"-1 ; remove mark.",	0);
	create_insn	(x=0XF1F5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF1FC,	"error_Code_Page_Mismatched",	0);
	create_insn	(x=0XF1FC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_dec		(x,	1);
	create_insn	(0XF207);
	set_name	(0XF207,	"NORERR");
	set_cmt	(0XF20A,	"create a new file and open him for input",	0);
	create_insn	(0XF20A);
	set_name	(0XF20A,	"$CREAT");
	create_insn	(x=0XF20B);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0XF20E,	"attr_hidden+attr_system",	0);
	create_insn	(x=0XF20E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XF20E,	"AccessSet");
	create_insn	(0XF217);
	create_insn	(x=0XF21D);
	op_hex		(x,	1);
	create_insn	(x=0XF224);
	op_dec		(x,	1);
	create_insn	(x=0XF22E);
	op_hex		(x,	1);
	create_insn	(x=0XF235);
	op_dec		(x,	1);
	create_insn	(0XF23E);
	set_cmt	(0XF242,	"MS-DOS 7.20 (Win98) - EXTENDED-LENGTH FILENAME OPERATIONS\nAX = 43FFh\nBP = 5053h ('PS')\nCL = function\n39h \"mkdir\" create directory\nDS:DX -> ASCIZ pathname\n56h rename file\nDS:DX -> ASCIZ filename of existing file (no wildcards)\nES:DI -> ASCIZ new filename (no wildcards)\n\nref: Ralf Brown's Interrupt List",	0);
	create_insn	(0XF242);
	set_name	(0XF242,	"$CHMOD");
	create_insn	(x=0XF246);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XF246,	"std_chmod");
	set_cmt	(0XF24D,	"get correct path",	0);
	set_cmt	(0XF256,	"-1",	0);
	create_insn	(x=0XF256);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF25D,	"attr_hidden+attr_system+attr_directory",	0);
	create_insn	(x=0XF25D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF262,	"fast way to discriminate",	0);
	set_cmt	(0XF264,	"0 -> go get value",	0);
	set_cmt	(0XF266,	"1 -> go set value",	0);
	create_insn	(x=0XF268);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF26D,	"error_invalid_function ; bad value",	0);
	set_cmt	(0XF271,	"suck out the ol' info",	0);
	create_insn	(0XF271);
	set_cmt	(0XF279,	"[SI+user_env.user_CX]\nreturn the attributes",	0);
	create_insn	(0XF27F);
	set_name	(0XF286,	"OpenOkj2");
	set_cmt	(0XF288,	"error_path_not_found",	0);
	create_insn	(0XF288);
	set_name	(0XF288,	"ChModErr");
	set_name	(0XF28A,	"ChModE");
	set_cmt	(0XF28C,	"Delete a File",	0);
	create_insn	(0XF28C);
	set_name	(0XF28C,	"$UNLINK");
	create_insn	(x=0XF28F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF298);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF2AE,	"error_path_not_found",	0);
	create_insn	(0XF2AE);
	set_name	(0XF2AE,	"Unlink_notfound");
	set_name	(0XF2B0,	"UnLinkE");
	create_insn	(x=0XF2B2);
	op_dec		(x,	1);
	set_name	(0XF2B2,	"$RENAME");
	set_cmt	(0XF2B9,	"cx = search attributes",	0);
	set_cmt	(0XF2BB,	"DS:DX = source",	0);
	set_cmt	(0XF2BD,	"ES:DI = destination",	0);
	set_cmt	(0XF2BE,	"move dest to source",	0);
	create_insn	(x=0XF2C0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF2C3,	"munge the paths",	0);
	set_cmt	(0XF2C6,	"get pointer",	0);
	create_insn	(x=0XF2C6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF2CB,	"stash it",	0);
	create_insn	(x=0XF2CB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF2D3,	"get old error",	0);
	set_cmt	(0XF2D5,	"-1",	0);
	create_insn	(x=0XF2D5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF2DE,	"appropriate buffer",	0);
	create_insn	(x=0XF2DE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF2E9,	"-1",	0);
	create_insn	(x=0XF2E9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF2F0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF2F4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF2F8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF2FC,	"es:di-> source",	0);
	set_cmt	(0XF2FD,	"scan all CDS",	0);
	set_cmt	(0XF302,	"end of CDS",	0);
	set_cmt	(0XF304,	"current dir ?",	0);
	set_cmt	(0XF307,	"yes",	0);
	set_cmt	(0XF309,	"next",	0);
	create_insn	(x=0XF30D);
	op_hex		(x,	1);
	set_cmt	(0XF310,	"error_current_directory",	0);
	create_insn	(x=0XF310);
	op_dec		(x,	1);
	create_insn	(x=0XF314);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF319);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF320,	"attr_directory+attr_hidden+attr_system",	0);
	set_cmt	(0XF325,	"do the deed",	0);
	set_cmt	(0XF32D,	"Save attributes on stack",	0);
	create_insn	(0XF32D);
	set_name	(0XF32D,	"$CreateNewFile");
	set_cmt	(0XF32E,	"routine to call",	0);
	create_insn	(x=0XF32E);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0XF331,	"use good ol' open",	0);
	set_cmt	(0XF334,	"convert a number to a string\n(in order to generate temp file names)\n(ax) = value\n(ch) = digit counter, (cl) = shift cnt",	0);
	create_insn	(0XF334);
	set_name	(0XF334,	"BinToAscii");
	set_cmt	(0XF337,	"move leftmost nibble into rightmost",	0);
	set_cmt	(0XF339,	"preserve remainder of digits",	0);
	set_cmt	(0XF33A,	"grab low nibble",	0);
	create_insn	(x=0XF33A);
	op_hex		(x,	1);
	set_cmt	(0XF33C,	"turn into ascii",	0);
	set_cmt	(0XF33E,	"drop in the character",	0);
	set_cmt	(0XF33F,	"(ax) = shifted number",	0);
	set_cmt	(0XF342,	"process 4 digits",	0);
	set_cmt	(0XF345,	"create a unique name",	0);
	create_insn	(0XF345);
	set_name	(0XF345,	"$CreateTempFile");
	create_insn	(x=0XF348);
	op_dec		(x,	1);
	set_cmt	(0XF34B,	"~attr_changeable",	0);
	create_insn	(x=0XF34B);
	op_hex		(x,	1);
	set_cmt	(0XF34F,	"Ok if no non-changeable bits set",	0);
	set_cmt	(0XF351,	"error_access_denied",	0);
	set_cmt	(0XF356,	"attr",	0);
	create_insn	(x=0XF356);
	op_dec		(x,	0);
	set_name	(0XF356,	"OKatts");
	set_cmt	(0XF359,	"FilPtrL ; pointer to file",	0);
	set_cmt	(0XF35C,	"FilPtrH",	0);
	set_cmt	(0XF35F,	"EndPtrH ; seg pointer to end of dir",	0);
	set_cmt	(0XF363,	"destination for nul search",	0);
	set_cmt	(0XF368,	"number of bytes remaining in segment",	0);
	set_cmt	(0XF36E,	"-1",	0);
	set_name	(0XF371,	"okok");
	set_cmt	(0XF375,	"point back to the null",	0);
	set_cmt	(0XF376,	"Get char before the NUL",	0);
	set_cmt	(0XF37D,	"Is it a path separator?",	0);
	set_cmt	(0XF37F,	"Yes",	0);
	set_cmt	(0XF381,	"Add a path separator (and INC DI)",	0);
	set_name	(0XF382,	"SETENDPTR");
	set_cmt	(0XF385,	"let ReadTime see variables",	0);
	set_name	(0XF385,	"CreateLoop");
	set_cmt	(0XF388,	"go get time",	0);
	set_cmt	(0XF38C,	"EndPtr ; point to the string",	0);
	set_cmt	(0XF391,	"store upper word",	0);
	set_cmt	(0XF396,	"store lower word",	0);
	set_cmt	(0XF399,	"0",	0);
	set_cmt	(0XF39B,	"nul terminate",	0);
	set_cmt	(0XF39C,	"FilPtr ; get name",	0);
	set_cmt	(0XF39F,	"Attr ; get attr",	0);
	create_insn	(x=0XF39F);
	op_dec		(x,	1);
	set_cmt	(0XF3A3,	"try to create a new file",	0);
	set_cmt	(0XF3A7,	"failed, go try again",	0);
	create_insn	(x=0XF3A9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF3AD,	"error_file_exists",	0);
	create_insn	(x=0XF3AD);
	op_hex		(x,	1);
	set_cmt	(0XF3B1,	"error_access_denied",	0);
	set_cmt	(0XF3B5,	"FilPtr ; get name",	0);
	set_cmt	(0XF3B8,	"0",	0);
	set_cmt	(0XF3C1,	"error_access_denied",	0);
	set_name	(0XF3C3,	"SETTMPERR");
	set_name	(0XF3C4,	"CreateDone");
	set_cmt	(0XF3C9,	"success!",	0);
	create_insn	(0XF3CC);
	set_name	(0XF3CC,	"CreateFail");
	set_cmt	(0XF3CF,	"fSharing == FALSE => set sattrib to CH\nfSharing == TRUE => set sattrib to CL",	0);
	create_insn	(x=0XF3CF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XF3CF,	"SetAttrib");
	create_insn	(x=0XF3D9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF3DF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XF3DF,	"$Extended_Open");
	create_insn	(x=0XF3E4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF3EB);
	op_hex		(x,	1);
	create_insn	(x=0XF3F8);
	op_hex		(x,	1);
	create_insn	(x=0XF400);
	op_hex		(x,	1);
	create_insn	(0XF436);
	set_name	(0XF436,	"ext_inval2");
	set_name	(0XF438,	"eo_err");
	create_insn	(0XF43B);
	set_name	(0XF43B,	"ext_inval_parm");
	set_cmt	(0XF43D,	"error_invalid_data",	0);
	create_insn	(x=0XF43D);
	op_dec		(x,	1);
	create_insn	(0XF441);
	set_name	(0XF441,	"error_return");
	set_cmt	(0XF442,	"INT_24_ERROR",	0);
	create_insn	(x=0XF442);
	op_hex		(x,	1);
	set_name	(0XF442,	"goopen2");
	set_cmt	(0XF448,	"EXT_OPEN_I24_OFF",	0);
	create_insn	(x=0XF448);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XF44E,	"EXT_OPEN_ON",	0);
	create_insn	(x=0XF44E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XF44E,	"goopen");
	create_insn	(x=0XF454);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XF45B,	"EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE",	0);
	create_insn	(x=0XF45B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF468);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF470,	"ACTION_CREATED_OPENED",	0);
	create_insn	(x=0XF470);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XF47A);
	set_name	(0XF47A,	"ok_return2");
	create_insn	(x=0XF47D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XF47D,	"chknext");
	create_insn	(x=0XF48B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF493,	"ACTION_CREATED_OPENED",	0);
	create_insn	(x=0XF493);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF49A,	"EXT_FILE_NOT_EXIST",	0);
	create_insn	(x=0XF49A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0XF4A2,	"ACTION_REPLACED_OPENED",	0);
	create_insn	(x=0XF4A2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XF4AB);
	set_name	(0XF4AB,	"error_return2");
	set_cmt	(0XF4AD,	"-1",	0);
	create_insn	(x=0XF4AD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0XF4AD,	"exist_open");
	set_cmt	(0XF4B5,	"search attribute",	0);
	set_name	(0XF4B7,	"noserver");
	create_insn	(x=0XF4BC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF4C9,	"EXT_NEXISTS_CREATE",	0);
	create_insn	(x=0XF4C9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XF4D4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XF4D4,	"do_creat");
	create_insn	(x=0XF4D9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF4E5,	"ACTION_CREATED_OPENED",	0);
	create_insn	(x=0XF4E5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF4EE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XF4EE,	"ext_ok");
	set_cmt	(0XF4F6,	"ACTION_OPENED",	0);
	create_insn	(x=0XF4F6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XF4FD,	"setXAttr");
	create_insn	(x=0XF501);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XF50B,	"ok_return");
	create_insn	(0XF50E);
	set_name	(0XF50E,	"extexit2");
	set_cmt	(0XF510,	"ACTION_CREATED_OPENED",	0);
	create_insn	(x=0XF510);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF518);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XF524);
	set_name	(0XF524,	"justopen");
	set_name	(0XF527,	"reserror");
	set_cmt	(0XF52A,	"error_file_not_found",	0);
	create_insn	(0XF52A);
	set_name	(0XF52A,	"ext_file_unfound");
	set_cmt	(0XF52F,	"error_invalid_function",	0);
	create_insn	(0XF52F);
	set_name	(0XF532,	"extexit");
	set_cmt	(0XF535,	"Lock Calls",	0);
	create_insn	(0XF535);
	set_name	(0XF535,	"$LockOper");
	set_cmt	(0XF540,	"error_invalid_handle",	0);
	set_name	(0XF542,	"lockoperr");
	create_insn	(x=0XF545);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XF545,	"lock_bad_func");
	set_cmt	(0XF54B,	"error_invalid_function",	0);
	set_name	(0XF54D,	"lockoperrj");
	create_insn	(0XF54F);
	set_name	(0XF54F,	"lock_do");
	create_insn	(x=0XF551);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF554,	"[bp+LockBuf.Lock_position]",	0);
	set_cmt	(0XF557,	"[bp+LockBuf.Lock_position+2]",	0);
	set_cmt	(0XF55B,	"[bp+LockBuf.Lock_length]",	0);
	set_cmt	(0XF55E,	"[bp+LockBuf.Lock_length+2]",	0);
	set_cmt	(0XF561,	"one range",	0);
	create_insn	(x=0XF568);
	op_hex		(x,	1);
	set_cmt	(0XF56E,	"[ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)",	0);
	create_insn	(x=0XF56E);
	op_hex		(x,	1);
	set_name	(0XF56E,	"DOS_Unlock");
	set_cmt	(0XF578,	"Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE\nBX = file handle, CX:DX = starting offset, SI = high word of size\nSTACK: WORD low word of size, ES:DI -> SFT\nSFT DPB field -> DPB of drive containing file, SS = DOS CS\nReturn: CF set error",	0);
	create_insn	(x=0XF578);
	op_hex		(x,	0);
	create_insn	(0XF57C);
	set_name	(0XF57C,	"LOCAL_UNLOCK");
	set_name	(0XF57F,	"ValChk");
	create_insn	(x=0XF583);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XF583,	"Lock_OK");
	set_cmt	(0XF589,	"[ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)",	0);
	create_insn	(x=0XF589);
	op_hex		(x,	1);
	set_name	(0XF589,	"DOS_Lock");
	set_cmt	(0XF593,	"Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE\nBX = file handle, CX:DX = starting offset, SI = high word of size\nSTACK: WORD low word of size, ES:DI -> SFT\nSFT DPB field -> DPB of drive containing file, SS = DOS CS\nReturn: CF set error",	0);
	create_insn	(x=0XF593);
	op_hex		(x,	0);
	create_insn	(0XF597);
	set_name	(0XF597,	"LOCAL_LOCK");
	create_insn	(0XF59C);
	set_name	(0XF59C,	"SHARE_VIOLATION");
	create_insn	(x=0XF59F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF5A8);
	op_hex		(x,	1);
	create_insn	(x=0XF5B0);
	op_hex		(x,	1);
	create_insn	(0XF5BE);
	create_insn	(0XF5DF);
	create_insn	(0XF5F6);
	create_insn	(0XF5F8);
	set_name	(0XF5F8,	"check_longname");
	create_insn	(x=0XF5FF);
	op_hex		(x,	1);
	create_insn	(x=0XF604);
	op_hex		(x,	1);
	set_cmt	(0XF60A,	"Is it the 1st LNE (for file) ?",	0);
	create_insn	(x=0XF60A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF60F,	"no",	0);
	set_cmt	(0XF611,	"yes, save directory entry position",	0);
	create_insn	(x=0XF611);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF615);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF619);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF61D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF621);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF625);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF629);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF62D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF631);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF635);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF639);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF63D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF641);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF645);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF649);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF651);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF658);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XF65C,	"-1 ; not a long name entry",	0);
	create_insn	(x=0XF65C);
	op_hex		(x,	1);
	create_insn	(0XF660);
	set_cmt	(0XF662,	"LONG_NAME_ENTRY ; LNE_COUNT",	0);
	create_insn	(0XF662);
	set_name	(0XF662,	"delete_longname_entry");
	set_cmt	(0XF666,	"LNE_LASTENT",	0);
	set_cmt	(0XF66A,	"LNE_ENTLAST",	0);
	set_cmt	(0XF671,	"LNE_DIRSTART",	0);
	create_insn	(x=0XF674);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF67B,	"LNE_DIRSTART+2",	0);
	create_insn	(x=0XF67E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF685,	"LNE_DIRSECTOR",	0);
	create_insn	(x=0XF688);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF68F,	"LNE_DIRSECTOR+2",	0);
	create_insn	(x=0XF692);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF699,	"LNE_CLUSTER",	0);
	create_insn	(x=0XF69C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF6A3,	"LNE_CLUSTER+2",	0);
	create_insn	(x=0XF6A6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF6AD,	"LNE_LASTENT",	0);
	create_insn	(x=0XF6B0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF6B7,	"LNE_ENTLAST",	0);
	create_insn	(x=0XF6BA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF6C3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XF6CC,	"error",	0);
	create_insn	(x=0XF6CE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF6F2);
	op_hex		(x,	1);
	create_insn	(x=0XF6F5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF6FD);
	op_dec		(x,	1);
	create_insn	(x=0XF704);
	op_hex		(x,	1);
	create_insn	(x=0XF712);
	op_hex		(x,	1);
	create_insn	(x=0XF717);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XF730);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF736);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF73C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF742);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF748);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF74E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF754);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF75A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XF762);
	set_cmt	(0XF763,	"restore dir entry operation parameters",	0);
	create_insn	(0XF765);
	create_insn	(x=0XF767);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XF767,	"move_LNE_parms");
	set_cmt	(0XF775,	"LONG_NAME_ENTRY offset",	0);
	create_insn	(x=0XF775);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XF781);
	set_name	(0XF781,	"_int21_71h");
	create_insn	(0XF787);
	set_name	(0XF787,	"_int21_72h");
	create_insn	(0XF78C);
	set_name	(0XF78C,	"ExecReady");
	create_insn	(x=0XF791);
	op_hex		(x,	1);
	create_insn	(x=0XF7A6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF7AB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XF7AE);
	op_hex		(x,	1);
	create_insn	(0XF7D3);
	set_cmt	(0XF7D4,	"Interrupt controller, 8259A.",	0);
	create_insn	(x=0XF7D4);
	op_hex		(x,	1);
	set_cmt	(0XF7D9,	"Timer 8253-5 (AT: 8254.2).",	0);
	create_insn	(x=0XF7D9);
	op_hex		(x,	0);
	create_insn	(x=0XF7DF);
	op_hex		(x,	0);
	create_insn	(x=0XF7E3);
	op_hex		(x,	0);
	create_insn	(0XF7F0);
	set_cmt	(0XF7FE,	" - LIM EMS Program Interface - SWITCH TO PROTECTED MODE\nESI = linear address in first megabyte of values for system registers\nReturn: interrupts disabled\nGDTR, IDTR, LDTR, TR loaded",	0);
	create_insn	(x=0XF7FE);
	op_hex		(x,	0);
	create_insn	(0XF804);
	create_insn	(0XF822);
	create_insn	(0XF855);
	create_insn	(x=0XF87D);
	op_dec		(x,	1);
	set_name	(0XF87D,	"Rational386Patch");
	create_insn	(0XF8A9);
	set_name	(0XF8A9,	"rp3Maybe");
	create_insn	(x=0XF8B2);
	op_hex		(x,	1);
	create_insn	(0XF8E9);
	create_insn	(x=0XF9E9);
	op_hex		(x,	1);
	create_insn	(0XF9F6);
	create_insn	(0XFA1D);
	create_insn	(0XFA1F);
	create_insn	(0XFA33);
	create_insn	(0XFA3F);
	create_insn	(0XFA4B);
	create_insn	(0XFA4E);
	create_insn	(0XFA63);
	create_insn	(0XFA82);
	create_strlit	(0XFA8F,	0XFB48);
	set_name	(0XFA8F,	"MsDosVersion8CopyR");
	create_insn	(x=0XFB48);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XFB48,	"Idle");
	create_insn	(x=0XFB51);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XFB58,	"Idle1");
	set_name	(0XFB5B,	"Idle2");
	set_name	(0XFB60,	"Idle3");
	set_name	(0XFB61,	"Idle_retn");
	create_insn	(x=0XFB62);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XFB62,	"DirFromSFT");
	set_cmt	(0XFB69,	"[ES:DI+SF_ENTRY.sf_dirsec+2]",	0);
	create_insn	(x=0XFB6D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFB71,	"[ES:DI+SF_ENTRY.sf_dirsec]",	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_4(void) {
        auto x;
#define id x

	create_insn	(x=0XFB75);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFB7E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFB86,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0XFB86);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFB92);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFB97,	"[ES:DI+BUFFINFO.buf_flags],\nbuf_isDIR",	0);
	create_insn	(x=0XFB97);
	op_hex		(x,	1);
	set_cmt	(0XFB9E,	"[DI+BUFINSIZ]",	0);
	create_insn	(x=0XFBA1);
	op_dec		(x,	1);
	set_cmt	(0XFBA3,	"[SI+SF_ENTRY.sf_dirpos]",	0);
	create_insn	(0XFBA9);
	create_insn	(0XFBAC);
	set_name	(0XFBAC,	"DIRREAD");
	create_insn	(x=0XFBAE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFBB4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XFBBD);
	set_cmt	(0XFBBF,	"[ES:BP+DPB.CLUSTER_MASK]",	0);
	set_cmt	(0XFBC3,	"[ES:BP+DPB.CLUSTER_SHIFT]",	0);
	create_insn	(x=0XFBC9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFBD1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFBD5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFBD9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFBE2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFBE7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFBEB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFBEF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFBF3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFBF7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC02);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC06);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC0A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC0E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC1C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC20);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC24);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC2A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFC2E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFC37,	"Allowed_RETRY+Allowed_FAIL",	0);
	create_insn	(x=0XFC37);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XFC37,	"FIRSTCLUSTER");
	set_name	(0XFC43,	"SET_BUF_AS_DIR");
	create_insn	(x=0XFC45);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFC49,	"[SI+BUFFINFO.buf_flags],buf_isDIR",	0);
	create_insn	(x=0XFC49);
	op_hex		(x,	1);
	set_cmt	(0XFC50,	"Allowed_RETRY+Allowed_FAIL",	0);
	create_insn	(x=0XFC50);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XFC50,	"FATSECRD");
	create_insn	(x=0XFC58);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFC5D);
	op_dec		(x,	1);
	set_cmt	(0XFC66,	"[ES:BP+DPB.FAT_COUNT]",	0);
	set_cmt	(0XFC6B,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0XFC70,	"not FAT32",	0);
	set_cmt	(0XFC72,	"[es:bp+DPB.EXT_FLAGS]",	0);
	create_insn	(x=0XFC72);
	op_hex		(x,	1);
	set_cmt	(0XFC7A,	"only one FAT is active",	0);
	create_insn	(x=0XFC85);
	op_dec		(x,	1);
	create_insn	(x=0XFC89);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFC97,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0XFC9E,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0XFCA4,	"[es:bp+DPB.FAT32_SIZE]",	0);
	create_insn	(0XFCA4);
	create_insn	(x=0XFCB0);
	op_dec		(x,	1);
	create_insn	(x=0XFCB4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0XFCBB);
	set_name	(0XFCBB,	"DREAD");
	set_cmt	(0XFCC1,	"Read",	0);
	create_insn	(x=0XFCC1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFCCA,	"RETRY",	0);
	set_cmt	(0XFCCE,	"FAIL",	0);
	set_cmt	(0XFCD1,	"IGNORE",	0);
	create_insn	(0XFCD5);
	create_insn	(x=0XFCDA);
	op_dec		(x,	1);
	create_insn	(x=0XFCDE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFCE5,	"[ES:DI+SF_ENTRY.sf_attr],\nattr_volume_id",	0);
	create_insn	(x=0XFCE5);
	op_hex		(x,	1);
	set_name	(0XFCE5,	"CHECK_WRITE_LOCK");
	set_cmt	(0XFCF0,	"[ES:DI+SF_ENTRY.sf_attr],\nattr_volume_id",	0);
	create_insn	(x=0XFCF0);
	op_hex		(x,	1);
	set_name	(0XFCF0,	"CHECK_READ_LOCK");
	set_cmt	(0XFCFB,	"DS:BX = Transfer address\n[HIGH_SECTOR]:DX = Disk sector address\nCX = Sector count\nES:BP = DPB",	0);
	create_insn	(0XFCFB);
	set_name	(0XFCFB,	"DSKREAD");
	set_cmt	(0XFCFC,	"[ES:BP+DPB.MEDIA]",	0);
	set_cmt	(0XFD00,	"[ES:BP+DPB.UNIT]",	0);
	create_insn	(0XFD0B);
	set_name	(0XFD0B,	"DWRITE");
	set_cmt	(0XFD10,	"Write",	0);
	create_insn	(x=0XFD10);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFD19,	"Retry",	0);
	set_cmt	(0XFD1D,	"FAIL",	0);
	set_cmt	(0XFD20,	"Ignore",	0);
	create_insn	(0XFD24);
	set_name	(0XFD24,	"DSKWRITE");
	set_cmt	(0XFD25,	"[ES:BP+DPB.MEDIA]",	0);
	set_cmt	(0XFD29,	"[ES:BP+DPB.UNIT]",	0);
	set_name	(0XFD32,	"DODSKOP");
	set_cmt	(0XFD36,	"[ds:BP+DPB.DRIVER_ADDR]",	0);
	set_cmt	(0XFD41,	"[SS:CALLSCNT]",	0);
	create_insn	(x=0XFD41);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFD4B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFD4F);
	op_hex		(x,	1);
	create_insn	(x=0XFD53);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XFD53,	"BREAKDOWN");
	set_cmt	(0XFD5C,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0XFD6A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFD75);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFD78);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFD7D,	"[ES:DI+SF_ENTRY.sf_size]",	0);
	create_insn	(0XFD7D);
	set_name	(0XFD7D,	"DISKREAD");
	create_insn	(x=0XFD82);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFD87,	"Read starts past EOF",	0);
	create_insn	(x=0XFD89);
	op_hex		(x,	1);
	set_cmt	(0XFD8F,	"More than 64k to EOF",	0);
	set_cmt	(0XFD9E,	"There are no locks",	0);
	create_insn	(x=0XFDA1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFDA8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFDAC);
	op_dec		(x,	1);
	create_insn	(x=0XFDB0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFDBC,	"read/data/fail",	0);
	create_insn	(0XFDC1);
	set_name	(0XFDC1,	"CANOT_READ");
	set_name	(0XFDC4,	"SET_ACC_ERR_DS");
	set_name	(0XFDC6,	"SET_ACC_ERR");
	set_cmt	(0XFDC8,	"error_access_denied",	0);
	create_insn	(x=0XFDCD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFDD1);
	op_dec		(x,	1);
	create_insn	(x=0XFDD5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFDD9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFDDD);
	op_dec		(x,	1);
	create_insn	(x=0XFDE1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFDE5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFDF0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFDFE,	"A transfer is taking place",	0);
	create_insn	(x=0XFDFE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFE03,	"(dx/DL = Extent start) ((dh = ?))",	0);
	create_insn	(x=0XFE03);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFE07);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFE0B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFE0F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFE13);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFE1C,	"(Next physical cluster, hw)",	0);
	create_insn	(x=0XFE1C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFE20,	"DI = Next physical cluster.",	0);
	set_cmt	(0XFE21,	"AX = # of sectors remaining.",	0);
	set_cmt	(0XFE22,	"[DMAADD+2]:BX = Transfer address.",	0);
	set_cmt	(0XFE23,	"Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE",	0);
	create_insn	(x=0XFE23);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0XFE28);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFE2C,	"[HIGH_SECTOR]:DX = phys. sector #.",	0);
	set_cmt	(0XFE2D,	"CX = # of contiguous sectors to read.",	0);
	create_insn	(x=0XFE36);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFE3D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFE47,	"# of sectors remaining.",	0);
	set_cmt	(0XFE48,	"Next physical cluster.",	0);
	set_cmt	(0XFE49,	"(Next physical cluster, hw)",	0);
	create_insn	(x=0XFE49);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFE4F,	"test for eof on fat size",	0);
	set_cmt	(0XFE56,	"We'll be using next cluster",	0);
	create_insn	(x=0XFE56);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFE5B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFE62);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFE69);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFE71);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFE7F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XFE7F,	"SETSFT");
	create_insn	(x=0XFE83);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0XFE83,	"SETCLUS");
	set_cmt	(0XFE87,	"Number of bytes transfered",	0);
	create_insn	(x=0XFE87);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFE8B,	"[ES:DI+SF_ENTRY.sf_flags],\ndevid_device",	0);
	create_insn	(x=0XFE8B);
	op_hex		(x,	1);
	set_cmt	(0XFE90,	"don't set clusters if device",	0);
	create_insn	(x=0XFE92);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFE95,	"[ES:DI+SF_ENTRY.sf_lstclus+2]",	0);
	create_insn	(x=0XFE99);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFE9C,	"[ES:DI+SF_ENTRY.sf_lstclus]",	0);
	create_insn	(x=0XFEA0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFEA3,	"[ES:DI+SF_ENTRY.sf_cluspos_hw] ; PCDOS 7.1 & Win ME\n[ES:DI+SF_ENTRY.sf_firclus] ; MSDOS 5.0-6.22",	0);
	create_insn	(x=0XFEA7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFEAA,	"[ES:DI+SF_ENTRY.sf_cluspos]",	0);
	set_cmt	(0XFEAE,	"[ES:DI+SF_ENTRY.sf_position]\nUpdate current position",	0);
	create_insn	(0XFEAE);
	set_name	(0XFEAE,	"ADDREC");
	set_cmt	(0XFEB2,	"[ES:DI+SF_ENTRY.sf_position+2]",	0);
	create_insn	(x=0XFEB9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0XFEB9,	"DskRdBufScan");
	create_insn	(x=0XFEC1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XFEFE);
	create_insn	(x=0XFEFF);
	op_hex		(x,	1);
	create_insn	(x=0XFF1A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFF21);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFF26);
	op_hex		(x,	1);
	create_insn	(0XFF42);
	set_name	(0XFF42,	"DISKWRITE");
	create_insn	(x=0XFF48);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFF4F,	"[ES:DI+SF_ENTRY.sf_flags],\n~(sf_close_nodate|devid_file_clean)",	0);
	create_insn	(x=0XFF4F);
	op_hex		(x,	1);
	set_cmt	(0XFF55,	"[ES:DI+SF_ENTRY.sf_size]",	0);
	create_insn	(x=0XFF59);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFF5C,	"[ES:DI+SF_ENTRY.sf_size+2]",	0);
	create_insn	(x=0XFF60);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFF67);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFF6F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0XFF73,	"Make the file length = sf_position",	0);
	set_cmt	(0XFF79,	"EAX = last byte to write + 1.",	0);
	set_cmt	(0XFF80,	"[es:di+SF_ENTRY.sf_mode],1000h",	0);
	create_insn	(x=0XFF80);
	op_hex		(x,	1);
	set_cmt	(0XFF84,	"> 2GB file size (up to 4GB) allowed",	0);
	set_cmt	(0XFF86,	"check for 2GB file size limit",	0);
	set_cmt	(0XFF8C,	"error, \nfile position/pointer overs 2GB limit!",	0);
	set_cmt	(0XFF90,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0XFF9F);
	op_dec		(x,	1);
	create_insn	(x=0XFFA5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFFAD,	"EAX must be zero base indexed",	0);
	set_cmt	(0XFFAF,	"[es:bp+DPB.CLUSTER_SHIFT]",	0);
	set_cmt	(0XFFB6,	"Last cluster to write",	0);
	set_cmt	(0XFFB8,	"# of bytes in last sector to write",	0);
	set_cmt	(0XFFB9,	"EAX = current file size (in bytes).",	0);
	create_insn	(x=0XFFB9);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFFC3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFFC7,	"EDX:EAX/EBX = EAX + DX (rem.)",	0);
	create_insn	(x=0XFFC7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFFD3,	"Round up if any remainder",	0);
	create_insn	(x=0XFFD3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFFDA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0XFFDD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0XFFE0,	"# of bytes in last sector to write",	0);
	create_insn	(x=0XFFE1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFFE5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0XFFF1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0XFFF7);
	set_cmt	(0X10002,	"[ES:BP+DPB.SECTOR_SIZE]\nBytes of full sector growth",	0);
	create_insn	(x=0X10006);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1000A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1000F,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X10013);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10019);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1001C,	"Take off current \"tail\"",	0);
	set_cmt	(0X10021,	"Add on new \"tail\"",	0);
	create_insn	(0X10028);
	create_insn	(x=0X10035);
	op_dec		(x,	1);
	create_insn	(x=0X10039);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1003D);
	op_dec		(x,	1);
	create_insn	(x=0X10041);
	op_dec		(x,	1);
	create_insn	(x=0X10045);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10049);
	op_dec		(x,	1);
	set_cmt	(0X10054,	"write/data/fail/abort",	0);
	create_insn	(x=0X10056);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X10056,	"WRTERR22");
	set_cmt	(0X10059,	"No bytes transferred",	0);
	create_insn	(x=0X1005B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X10061);
	create_insn	(x=0X10067);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1006A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1006E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10072);
	op_dec		(x,	1);
	create_insn	(x=0X10076);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1007D,	"Last cluster to write",	0);
	create_insn	(x=0X10083);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10087);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1008B);
	op_dec		(x,	1);
	create_insn	(x=0X1008F);
	op_dec		(x,	1);
	create_insn	(x=0X10093);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10097);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1009B);
	op_dec		(x,	1);
	create_insn	(x=0X1009F);
	op_dec		(x,	1);
	set_cmt	(0X100A3,	"Last cluster minus current cluster",	0);
	set_cmt	(0X100AB,	"See if no more data",	0);
	create_insn	(x=0X100B4);
	op_dec		(x,	1);
	create_insn	(x=0X100B8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X100BC);
	op_dec		(x,	1);
	create_insn	(x=0X100C0);
	op_dec		(x,	1);
	create_insn	(x=0X100C4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X100C8);
	op_dec		(x,	1);
	create_insn	(x=0X100D2);
	op_dec		(x,	1);
	create_insn	(x=0X100D6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X100DA);
	op_dec		(x,	1);
	create_insn	(x=0X100E3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X100E7);
	op_dec		(x,	1);
	create_insn	(x=0X100EB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X100FC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10100);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10104);
	op_dec		(x,	1);
	create_insn	(x=0X10108);
	op_dec		(x,	1);
	create_insn	(x=0X1010C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10110);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10114);
	op_dec		(x,	1);
	create_insn	(x=0X10118);
	op_dec		(x,	1);
	create_insn	(x=0X1011C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10123);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10127);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1012B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10136);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1013F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10143);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1014D,	"A transfer is taking place",	0);
	create_insn	(x=0X1014D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10152,	"Extent start",	1);
	create_insn	(x=0X10152);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10156);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1015A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1015E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10162);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1016B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1016F,	"CCONTENT_HW:DI = Next physical cluster",	0);
	set_cmt	(0X10170,	"AX = # sectors remaining",	0);
	set_cmt	(0X10171,	"DS trashed.",	0);
	create_insn	(x=0X10174);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10179,	"Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE",	0);
	create_insn	(x=0X10179);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0X10184,	"error_handle_Disk_Full",	0);
	create_insn	(x=0X10184);
	op_hex		(x,	1);
	create_insn	(x=0X10188);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10191,	"Check for retry",	0);
	set_cmt	(0X10195,	"Check for FAIL",	0);
	set_cmt	(0X10198,	"Ignore",	0);
	set_cmt	(0X1019B,	"CX = # sectors remaining",	0);
	set_cmt	(0X1019D,	"CLUSTNUM_HW:BX = Next physical cluster",	0);
	create_insn	(x=0X1019D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X101AA,	"We'll be using next cluster",	0);
	create_insn	(x=0X101AA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X101AF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X101B6);
	set_cmt	(0X101B8,	"unjunk stack",	0);
	create_insn	(x=0X101BB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X101C1,	"go to disk full exit",	0);
	create_insn	(0X101C4);
	create_insn	(x=0X101C7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X101CE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X101D6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X101E1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X101E5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X101E8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X101F2,	"[ES:DI+SF_ENTRY.sf_size]",	0);
	set_cmt	(0X101F6,	"[ES:DI+SF_ENTRY.sf_size+2]",	0);
	set_cmt	(0X101FD,	"ES:DI already points to SFT",	0);
	create_insn	(0X10200);
	create_insn	(x=0X1020A);
	op_dec		(x,	1);
	set_cmt	(0X10210,	"2GB file size limit",	0);
	create_insn	(x=0X1021A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1021E,	"[es:di+SF_ENTRY.sf_mode],1000h",	0);
	create_insn	(x=0X1021E);
	op_hex		(x,	1);
	set_cmt	(0X10225,	"> 2GB file size not allowed",	0);
	set_cmt	(0X1022E,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X10234);
	op_dec		(x,	1);
	create_insn	(x=0X10248);
	op_dec		(x,	1);
	create_insn	(x=0X1024C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10265);
	op_dec		(x,	1);
	create_insn	(x=0X10269);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1026D);
	op_dec		(x,	1);
	create_insn	(x=0X10271);
	op_dec		(x,	1);
	create_insn	(x=0X10275);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10279);
	op_dec		(x,	1);
	set_cmt	(0X10280,	"disk full",	0);
	create_insn	(x=0X10284);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10288);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1028B,	"[ES:DI+SF_ENTRY.sf_size]",	0);
	create_insn	(x=0X1028F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10292,	"[ES:DI+SF_ENTRY.sf_size+2]",	0);
	set_cmt	(0X1029E,	"Reset Lstclus and cluspos to\nbeginning of file if current",	0);
	create_insn	(0X1029E);
	set_cmt	(0X1029F,	"cluspos is past EOF.",	0);
	create_insn	(x=0X1029F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X102A3,	"[ES:DI+SF_ENTRY.sf_firclus]",	0);
	create_insn	(x=0X102A7);
	op_dec		(x,	1);
	set_cmt	(0X102AB,	"[ES:DI+SF_ENTRY.sf_cluspos]",	0);
	set_cmt	(0X102C0,	"[ES:DI+SF_ENTRY.sf_chain]\nfirst cluster (32 bit) !?",	0);
	set_cmt	(0X102C5,	"[ES:DI+SF_ENTRY.sf_lstclus]",	0);
	create_insn	(x=0X102CB);
	op_dec		(x,	1);
	create_insn	(x=0X102CF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X102D3);
	op_dec		(x,	1);
	set_cmt	(0X102DA,	"0FFFFh",	0);
	create_insn	(x=0X102DA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X102E7,	"0",	0);
	create_insn	(0X102E7);
	create_insn	(x=0X102EA);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X102EE,	"[ES:DI+SF_ENTRY.sf_firclus]\n[ES:DI+SF_ENTRY.sf_cluspos_hw] !?",	0);
	set_cmt	(0X102F2,	"[ES:DI+SF_ENTRY.sf_cluspos]",	0);
	set_cmt	(0X102F6,	"[ES:DI+SF_ENTRY.sf_lstclus]",	0);
	set_cmt	(0X102FA,	"[ES:DI+SF_ENTRY.sf_lstclus+2]",	0);
	set_cmt	(0X102FE,	"[ES:DI+SF_ENTRY.sf_chain+2]\nfirst cluster (32 bit) hw !?",	0);
	create_insn	(x=0X10302);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1030C,	"[ES:DI+SF_ENTRY.sf_chain]\nfirst cluster (32 bit) lw !?",	0);
	create_insn	(x=0X10311);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X10323);
	set_name	(0X10323,	"DskWrtBufPurge");
	set_cmt	(0X10325,	"BX:DX = Extent start (sector #).",	0);
	create_insn	(x=0X10325);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1032E,	"SI:CX = Extent end + 1.",	0);
	set_cmt	(0X10335,	"Secondary cache in-use?",	0);
	create_insn	(x=0X10335);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1033B,	"no",	0);
	set_cmt	(0X10349,	"DI:AX = SC start.",	0);
	create_insn	(x=0X10356);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1035B,	"DI:AX = SC end + 1.",	0);
	set_cmt	(0X1035E,	"Extent start > SC end?",	0);
	set_cmt	(0X10364,	"yes",	0);
	set_cmt	(0X10366,	"Extent intersects SC: invalidate SC.",	0);
	set_cmt	(0X10371,	"[di+BUFFINFO.buf_ID]",	0);
	set_cmt	(0X10376,	"[di+BUFFINFO.buf_sector+2]",	0);
	set_cmt	(0X1037B,	"[di+BUFFINFO.buf_sector]",	0);
	set_cmt	(0X1038A,	"[di+BUFFINFO.buf_flags],\nbuf_dirty",	0);
	create_insn	(x=0X1038A);
	op_hex		(x,	1);
	set_cmt	(0X10393,	"[di+BUFFINFO.buf_ID],\n((buf_visit<<8)|0FFh)",	0);
	set_cmt	(0X1039D,	"di+BUFFINFO.buf_next]",	0);
	create_insn	(0X1039D);
	set_cmt	(0X1039F,	"Scanned entire buffer queue?",	0);
	set_cmt	(0X103A4,	"no, go do next buffer.",	0);
	create_insn	(x=0X103A9);
	op_dec		(x,	1);
	set_name	(0X103A9,	"MetaCompare");
	create_insn	(x=0X103B8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X103C0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X103CE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X103D3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X103E1);
	create_insn	(0X103E3);
	create_insn	(x=0X103E8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X103F2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X103F6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10413);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10417);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1041B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1041F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10423);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10427);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1042B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1042F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10433);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10437);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10449);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10451);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1045A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10462);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X1046C);
	create_insn	(0X10474);
	set_name	(0X10474,	"IN_SC");
	create_insn	(x=0X1047F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10491);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X1049B);
	create_insn	(0X1049D);
	create_insn	(x=0X104AF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X104AF,	"VIRREAD");
	create_insn	(x=0X104B3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X104B7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X104BB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X104C5,	"[ss:CALLSCNT]",	0);
	create_insn	(x=0X104C5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X104CC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X104E7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X104FD);
	create_insn	(0X104FF);
	set_name	(0X104FF,	"SC2BUF");
	create_insn	(0X10510);
	set_name	(0X10510,	"SC2BUF2");
	create_insn	(x=0X10517);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1051C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10525,	"CALLBR+2",	0);
	create_insn	(x=0X10525);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1052A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10534);
	op_hex		(x,	1);
	create_insn	(0X1053C);
	create_insn	(0X1053E);
	set_name	(0X1053E,	"FNDCLUS");
	create_insn	(x=0X1053F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10543,	"[ES:DI+SF_ENTRY.sf_lstclus]",	0);
	set_cmt	(0X10548,	"[ES:DI+SF_ENTRY.sf_firclus] ; MSDOS 5.0-6.22\n[ES:DI+SF_ENTRY.sf_cluspos_hw] ; PCDOS 7.1 & Win ME",	0);
	create_insn	(x=0X1054C);
	op_dec		(x,	1);
	set_cmt	(0X10550,	"[ES:DI+SF_ENTRY.sf_cluspos]",	0);
	set_cmt	(0X10564,	"[ES:DI+SF_ENTRY.sf_chain] ; MSDOS 5.0-6.22\n[ES:DI+SF_ENTRY.sf_fcluster] ; PCDOS 7.1 & Win ME",	0);
	create_insn	(0X1056D);
	set_name	(0X1056D,	"SKPCLP");
	create_insn	(x=0X10571);
	op_dec		(x,	1);
	create_insn	(x=0X10575);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10579);
	op_dec		(x,	1);
	create_insn	(x=0X10586);
	op_dec		(x,	1);
	create_insn	(x=0X1058A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1058E);
	op_dec		(x,	1);
	create_insn	(x=0X10592);
	op_dec		(x,	1);
	create_insn	(x=0X10596);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1059A);
	op_dec		(x,	1);
	create_insn	(x=0X1059E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X105A2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X105BA,	"RET9");
	create_insn	(0X105BC);
	set_name	(0X105BC,	"NOCLUS");
	create_insn	(x=0X105C3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X105C3,	"BUFSEC");
	create_insn	(x=0X105C7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X105CB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X105CF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X105D3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X105D7,	"Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE",	0);
	create_insn	(x=0X105D7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X105E2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X105E8,	"A transfer is taking place",	0);
	create_insn	(x=0X105E8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X105ED);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X105F3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X105F9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X105FD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10601,	"[ES:DI+BUFFINFO.buf_flags],\nbuf_isDATA",	0);
	create_insn	(x=0X10601);
	op_hex		(x,	1);
	set_cmt	(0X10606,	"[DI+BUFINSIZ] ; Point to buffer",	0);
	create_insn	(x=0X10609);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X1060F);
	set_name	(0X1060F,	"BUFRD");
	set_name	(0X10617,	"BUF_IO_FAIL");
	create_insn	(0X1061A);
	create_insn	(x=0X1061C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10624);
	op_hex		(x,	1);
	create_insn	(x=0X1062E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10633,	"[DI+BUFINSIZ]",	0);
	set_cmt	(0X1063B,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X10641);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X1064A);
	set_name	(0X1064A,	"BUFWRT");
	set_cmt	(0X1064B,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X1064F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10654);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10658,	"Has sector been written before?",	0);
	create_insn	(x=0X10658);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1065D,	"no need to read sector before buffer update",	0);
	set_cmt	(0X1065F,	"Skip preread if SECPOS>VALSEC",	0);
	create_insn	(x=0X10661);
	op_hex		(x,	1);
	set_cmt	(0X10666,	"0 ; pre read is needed",	0);
	set_cmt	(0X1066A,	"sector size",	0);
	create_insn	(x=0X1066D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10673,	"byte count (0 = skip)",	0);
	set_cmt	(0X10674,	"word count",	0);
	create_insn	(x=0X10674);
	op_hex		(x,	1);
	set_cmt	(0X10676,	"0",	0);
	create_insn	(x=0X10678);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1067D,	"clear buffer bytes \nbefore current byte position",	0);
	set_cmt	(0X1067F,	"DS:SI-> Source within Transfer memory block\nES:DI-> Destination within Buffer",	0);
	set_cmt	(0X10681,	"CX = # of whole WORDs; CF=1 if odd # of bytes",	0);
	create_insn	(x=0X10681);
	op_hex		(x,	1);
	create_insn	(x=0X1068B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10690,	"[BX+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0X10690);
	op_hex		(x,	1);
	create_insn	(x=0X10699);
	op_hex		(x,	1);
	set_cmt	(0X1069D,	"[BX+BUFINSIZ]",	0);
	create_insn	(x=0X1069D);
	op_dec		(x,	1);
	set_cmt	(0X106A2,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	set_cmt	(0X106A6,	"Written last byte?\nNo, leave buf where it is",	0);
	set_cmt	(0X106A8,	"Make it prime candidate for\nchucking even though it is MRU.",	0);
	create_insn	(x=0X106A8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X106B1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_name	(0X106B1,	"NEXTSEC");
	create_insn	(x=0X106B8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X106C3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X106C7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X106CB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X106D9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X106DE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X106E2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X106E7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X106EC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X106F3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X106F8);
	create_insn	(0X106FA);
	set_name	(0X106FA,	"OPTIMIZE");
	create_insn	(x=0X106FB);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10700,	"[ES:BP+DPB.CLUSTER_MASK]",	0);
	create_insn	(x=0X10722);
	op_dec		(x,	1);
	create_insn	(x=0X10726);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1072A);
	op_dec		(x,	1);
	create_insn	(x=0X1072E);
	op_dec		(x,	1);
	create_insn	(x=0X10732);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10736);
	op_dec		(x,	1);
	create_insn	(x=0X10741);
	op_dec		(x,	1);
	create_insn	(x=0X10745);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X1074B);
	create_insn	(x=0X1074D);
	op_dec		(x,	1);
	create_insn	(x=0X10751);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10755);
	op_dec		(x,	1);
	create_insn	(x=0X10759);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10762,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X10766);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1076C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10770);
	op_dec		(x,	1);
	create_insn	(x=0X10774);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10778);
	op_dec		(x,	1);
	create_insn	(x=0X1077E);
	op_dec		(x,	1);
	create_insn	(x=0X10782);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10786);
	op_dec		(x,	1);
	create_insn	(x=0X10792);
	op_dec		(x,	1);
	create_insn	(x=0X10796);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1079A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X107A8);
	op_hex		(x,	1);
	create_insn	(0X107AD);
	create_insn	(x=0X107B3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X107B9);
	op_dec		(x,	1);
	create_insn	(x=0X107BD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X107C1);
	op_dec		(x,	1);
	create_insn	(0X107C7);
	set_name	(0X107C7,	"FIGREC");
	set_cmt	(0X107C8,	"DPB.CLUSTER_SHIFT",	0);
	create_insn	(x=0X107CC);
	op_dec		(x,	1);
	create_insn	(x=0X107D0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X107D5);
	op_dec		(x,	1);
	set_cmt	(0X107E2,	"DPB.FAT_SIZE",	0);
	set_cmt	(0X107E7,	"FAT32",	0);
	set_cmt	(0X107E9,	"DPB.FIRST_SECTOR",	0);
	set_cmt	(0X107F4,	"DPB.FCLUS_FSECTOR",	0);
	create_insn	(0X107F4);
	create_insn	(x=0X107F9);
	op_dec		(x,	1);
	create_insn	(x=0X107FD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10802);
	op_dec		(x,	1);
	create_insn	(0X10808);
	set_name	(0X10808,	"callmagic");
	create_insn	(x=0X10809);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X1080F);
	set_name	(0X1080F,	"ALLOCATE");
	create_insn	(x=0X10818);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X10818,	"Regular_Allocate_Path");
	create_insn	(x=0X1081F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10826);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1082A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1082E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10833);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1083B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10840);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10850,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X10855,	"FAT32",	0);
	set_cmt	(0X10857,	"[es:bp+DPB.NEXT_FREE]",	0);
	set_cmt	(0X1085F,	"[es:bp+DPB.FAT32_NXTFREE]",	0);
	create_insn	(0X1085F);
	set_cmt	(0X1086A,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X10871,	"[es:bp+DPB.FAT32_NXTFREE]",	0);
	set_cmt	(0X1087A,	"[es:bp+DPB.NEXT_FREE]",	0);
	set_cmt	(0X10880,	"[es:bp+DPB.FIRST_ACCESS]",	0);
	create_insn	(x=0X10880);
	op_hex		(x,	1);
	set_cmt	(0X10894,	"[es:bp+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0X1089A,	"[es:bp+DPB.LAST_CLUSTER]",	0);
	create_insn	(0X1089A);
	create_insn	(x=0X108A9);
	op_dec		(x,	1);
	create_insn	(x=0X108AD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X108B1);
	op_dec		(x,	1);
	set_cmt	(0X108C4,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X108CB,	"[es:bp+DPB.FAT32_NXTFREE]",	0);
	set_cmt	(0X108D0,	"[es:bp+DPB.NEXT_FREE]",	0);
	set_cmt	(0X108D4,	"[es:bp+DPB.FIRST_ACCESS]",	0);
	create_insn	(x=0X108D4);
	op_hex		(x,	1);
	create_insn	(x=0X108E2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X108F3,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X10901,	"[es:bp+DPB.FREE_CNT]",	0);
	create_insn	(0X10907);
	set_cmt	(0X1090F,	"[es:bp+DPB.FREE_CNT]",	0);
	set_cmt	(0X10914,	"[es:bp+DPB.FIRST_ACCESS]",	0);
	create_insn	(x=0X10914);
	op_hex		(x,	1);
	create_insn	(x=0X10920);
	op_dec		(x,	1);
	create_insn	(x=0X10924);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10928);
	op_dec		(x,	1);
	create_insn	(x=0X1092C);
	op_dec		(x,	1);
	create_insn	(x=0X10930);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10934);
	op_dec		(x,	1);
	create_insn	(x=0X1094A);
	op_dec		(x,	1);
	create_insn	(x=0X1094E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10952);
	op_dec		(x,	1);
	create_insn	(x=0X10959);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10961);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1096E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10972);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10979);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1097D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10985);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X10991,	"dofastk");
	create_insn	(x=0X10993);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10997);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1099B,	"[es:di+SF_ENTRYT.sf_chain+2] ; 32 bit fclust, hw",	0);
	set_cmt	(0X1099F,	"[es:di+SF_ENTRYT.sf_chain] ; 32 bit fcluster, lw",	0);
	set_cmt	(0X109A3,	"[es:di+SF_ENTRYT.sf_lstclus+2] ; 32 bit lclust, hw",	0);
	set_cmt	(0X109A7,	"[es:di+SF_ENTRYT.sf_lstclus] ; 32 bit lcluster, lw",	0);
	set_cmt	(0X109AE,	"[es:bp+DPB.FAT_SIZE]",	0);
	create_insn	(0X109AE);
	set_cmt	(0X109B5,	"[es:bp+DPB.NEXT_FREE]",	0);
	set_cmt	(0X109BC,	"[es:bp+DPB.FAT32_NXTFREE]",	0);
	create_insn	(0X109BC);
	create_insn	(x=0X109C7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X109D0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X109E1);
	op_dec		(x,	1);
	create_insn	(x=0X109E5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X109E8);
	op_dec		(x,	1);
	create_insn	(x=0X109EC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X109F3);
	set_name	(0X109F3,	"RESTFATBYT");
	create_insn	(x=0X109F8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X109FC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10A00);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10A04);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X10A0F);
	set_name	(0X10A0F,	"RELEASE");
	set_cmt	(0X10A11,	"(dx = 0, release)",	0);
	create_insn	(x=0X10A11);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X10A15,	"RELBLKS");
	create_insn	(x=0X10A20);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10A24);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10A31,	"(dx = 0, release)",	0);
	create_insn	(x=0X10A31);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10A35,	"no, EOF (allocate, -1)",	0);
	create_insn	(0X10A4B);
	set_cmt	(0X10A58,	"DPB.FIRST_ACCESS",	0);
	create_insn	(x=0X10A58);
	op_hex		(x,	1);
	create_insn	(x=0X10A5D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X10A7C);
	set_name	(0X10A7C,	"GETEOF");
	create_insn	(x=0X10A8D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10A92);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10A96);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10AA0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10AA8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10AAC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X10AB2);
	set_cmt	(0X10AB4,	"CLUSTERS_HW:DI = Cluster Count",	0);
	create_insn	(x=0X10AB4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10ABB,	"[es:bp:DPB.FAT_SIZE]",	0);
	create_insn	(0X10ABB);
	set_name	(0X10ABB,	"IsEOF");
	set_cmt	(0X10AC0,	"FAT32",	0);
	set_cmt	(0X10AC2,	"[es:bp+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0X10ACA,	"16 bit compare",	0);
	set_cmt	(0X10ACD,	"cf=0 -> EOF, cf=1 -> not EOF",	0);
	create_insn	(0X10ACE);
	create_insn	(x=0X10AD9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10AE2,	"32 bit compare",	0);
	set_cmt	(0X10AE5,	"cf=0 -> EOF, cf=1 -> not EOF",	0);
	set_cmt	(0X10AE6,	"[es:bp+DPB.MAX_CLUSTER]",	0);
	create_insn	(0X10AE6);
	set_cmt	(0X10AEE,	"do the 12 bit compare",	0);
	set_cmt	(0X10AF2,	"cf=0 -> EOF, cf=1 -> not EOF",	0);
	set_cmt	(0X10AF3,	"do the 12 bit compare",	0);
	create_insn	(0X10AF3);
	create_insn	(0X10AF8);
	set_name	(0X10AF8,	"UNPACK");
	set_cmt	(0X10AFC,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0X10B01,	"FAT32 fs",	0);
	set_cmt	(0X10B03,	"[ES:BP+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0X10B09,	"0",	0);
	create_insn	(x=0X10B09);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10B15);
	op_dec		(x,	1);
	create_insn	(x=0X10B19);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10B1D);
	op_dec		(x,	1);
	set_cmt	(0X10B21,	"[CCONTENT_HW]:DI = contents of CL0FATENTRY",	0);
	create_insn	(x=0X10B25);
	op_dec		(x,	1);
	create_insn	(x=0X10B29);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10B2D);
	op_dec		(x,	1);
	create_insn	(x=0X10B38);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X10B5D);
	create_insn	(x=0X10B6B);
	op_hex		(x,	1);
	create_insn	(x=0X10B72);
	op_dec		(x,	1);
	create_insn	(x=0X10B76);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10B7B);
	op_dec		(x,	1);
	create_insn	(0X10B81);
	create_insn	(x=0X10B83);
	op_hex		(x,	1);
	create_insn	(x=0X10B86);
	op_hex		(x,	1);
	set_name	(0X10B8A,	"_DoContext");
	create_insn	(0X10B8D);
	create_insn	(0X10BA3);
	create_insn	(x=0X10BB4);
	op_hex		(x,	1);
	create_insn	(x=0X10BBC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10BC2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10BCC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10BD4);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10BE1,	"CLUSDATA_HW:DX = cluster data/content\nCLUSTNUM_HW:BX = cluster number (to be updated)",	0);
	create_insn	(0X10BE1);
	set_name	(0X10BE1,	"PACK");
	set_cmt	(0X10BF0,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0X10BF7,	"[ES:BP+DPB.LAST_CLUSTER]",	0);
	create_insn	(x=0X10C02);
	op_hex		(x,	1);
	create_insn	(x=0X10C06);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10C0B);
	op_hex		(x,	1);
	create_insn	(x=0X10C12);
	op_hex		(x,	1);
	set_cmt	(0X10C1E,	"[ES:BP+DPB.MAX_CLUSTER]",	0);
	create_insn	(0X10C1E);
	create_insn	(x=0X10C2A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10C2F);
	op_hex		(x,	1);
	set_cmt	(0X10C38,	" [SI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0X10C38);
	op_hex		(x,	1);
	create_insn	(x=0X10C3C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10C47);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10C4D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10C50);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10C54,	"BUFINSIZ",	0);
	create_insn	(x=0X10C54);
	op_dec		(x,	1);
	create_insn	(x=0X10C5C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10C60);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10C64);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10C73);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10C77,	" [DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0X10C77);
	op_hex		(x,	1);
	create_insn	(x=0X10C80);
	op_hex		(x,	1);
	create_insn	(x=0X10C84);
	op_dec		(x,	1);
	set_cmt	(0X10C88,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X10C93);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X10C99);
	create_insn	(x=0X10C9B);
	op_hex		(x,	1);
	create_insn	(x=0X10C9E);
	op_hex		(x,	1);
	create_insn	(0X10CA3);
	create_insn	(x=0X10CA5);
	op_hex		(x,	1);
	create_insn	(x=0X10CA9);
	op_hex		(x,	1);
	create_insn	(x=0X10CB2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10CC1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10CCD);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X10CCD,	"MAPCLUSTER");
	create_insn	(x=0X10CD9);
	op_dec		(x,	1);
	create_insn	(x=0X10CDD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10CE1);
	op_dec		(x,	1);
	set_cmt	(0X10CE8,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0X10CEF,	"[ES:BP+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0X10D00,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	set_cmt	(0X10D09,	"[ES:BP+DPB.FIRST_FAT]",	0);
	create_insn	(x=0X10D19);
	op_dec		(x,	1);
	create_insn	(x=0X10D1D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10D2E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10D32,	"[SI+BUFINSIZ]",	0);
	set_cmt	(0X10D40,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0X10D45,	"FAT32",	0);
	set_cmt	(0X10D47,	"[ES:BP+DPB.MAX_CLUSTER]",	0);
	create_insn	(x=0X10D4F);
	op_hex		(x,	1);
	set_cmt	(0X10D53,	"[es:bp+DPB.LAST_CLUSTER]",	0);
	create_insn	(0X10D53);
	set_cmt	(0X10D60,	"[es:bp+DPB.LAST_CLUSTER]",	0);
	create_insn	(0X10D60);
	create_insn	(x=0X10D6B);
	op_hex		(x,	1);
	create_insn	(x=0X10D6E);
	op_hex		(x,	1);
	create_insn	(x=0X10D71);
	op_hex		(x,	1);
	create_insn	(x=0X10D74);
	op_hex		(x,	1);
	create_insn	(x=0X10D79);
	op_hex		(x,	1);
	create_insn	(0X10D7F);
	create_insn	(0X10D83);
	create_insn	(0X10D88);
	create_insn	(x=0X10D8C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10D90);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10D93);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10D9D);
	op_dec		(x,	1);
	create_insn	(x=0X10DA1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10DAE);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10DB2,	"[SI+BUFINSIZ]",	0);
	create_insn	(x=0X10DB9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10DBC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10DC2,	"[ES:DI+SF_ENTRY.sf_devptr]",	0);
	create_insn	(0X10DC2);
	set_name	(0X10DC2,	"FATREAD_SFT");
	set_cmt	(0X10DC6,	"[ES:BP+DPB.DRIVE]",	0);
	create_insn	(x=0X10DCA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X10DD3,	"fatread_sft_retn");
	create_insn	(0X10DD4);
	set_name	(0X10DD4,	"FATREAD_CDS");
	set_cmt	(0X10DD6,	"[ES:DI+curdir.devptr]",	0);
	set_cmt	(0X10DDA,	"[ES:BP+DPB.DRIVE]",	0);
	create_insn	(x=0X10DDE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10DEF,	"-1",	0);
	create_insn	(x=0X10DF1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10DF7,	"[ES:DI+curdir.devptr]",	0);
	create_insn	(x=0X10DFB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10E00,	"[ES:DI+curdir.flags+1],\n(curdir_isnet>>8)",	0);
	create_insn	(x=0X10E00);
	op_hex		(x,	1);
	set_cmt	(0X10E16,	"[ES:DI+curdir.devptr]",	0);
	set_cmt	(0X10E1E,	"[ES:DI+curdir.devptr+2]",	0);
	set_cmt	(0X10E24,	"[ES:DI+curdir.ID]",	0);
	create_insn	(x=0X10E24);
	op_hex		(x,	1);
	set_cmt	(0X10E2F,	"-1",	0);
	set_cmt	(0X10E37,	"curdir.size",	0);
	create_insn	(x=0X10E37);
	op_dec		(x,	1);
	create_insn	(x=0X10E3D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10E43,	"DPB.FAT_SIZE",	0);
	create_insn	(0X10E43);
	set_cmt	(0X10E48,	"FAT32",	0);
	set_cmt	(0X10E4A,	"DPB.FREE_CNT",	0);
	set_cmt	(0X10E59,	"DPB.FREE_CNT",	0);
	create_insn	(0X10E59);
	set_cmt	(0X10E61,	"\nErr in FAT must force recomp of freespace",	0);
	set_cmt	(0X10E6A,	"DPB.FIRST_ACCESS",	0);
	create_insn	(x=0X10E6A);
	op_hex		(x,	1);
	create_insn	(x=0X10E6F);
	op_hex		(x,	1);
	set_cmt	(0X10E73,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0X10E73);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10E7A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10E80);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10E86,	"User said retry",	0);
	set_cmt	(0X10E88,	"User said FAIL",	0);
	create_insn	(0X10E8A);
	set_name	(0X10E8A,	"FAT_GOT_DPB");
	create_insn	(x=0X10E92);
	op_dec		(x,	1);
	set_cmt	(0X10E94,	"[ES:BP+DPB.UNIT]",	0);
	create_insn	(x=0X10E98);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10E9B);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10EA0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10EA6,	"[ES:BP+DPB.MEDIA]",	0);
	create_insn	(x=0X10EAA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10EAF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10EB2,	"[ES:BP+DPB.DRIVER_ADDR]",	0);
	create_insn	(x=0X10EBD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X10EC7,	"[es:bp+DPB.FIRST_ACCESS]",	0);
	create_insn	(x=0X10ECB);
	op_hex		(x,	1);
	set_cmt	(0X10ED7,	"[es:bp+DPB.FIRST_ACCESS]",	0);
	set_cmt	(0X10EDB,	"[es:bp+DPB.FIRST_ACCESS]",	0);
	create_insn	(x=0X10EDB);
	op_hex		(x,	1);
	create_insn	(x=0X10EE0);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10EE3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10EE9);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10EF1);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X10EF9);
	create_insn	(0X10EFD);
	set_cmt	(0X10EFF,	"[ES:BP+DPB.DRIVER_ADDR]",	0);
	set_cmt	(0X10F03,	"[es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)",	0);
	create_insn	(x=0X10F03);
	op_hex		(x,	1);
	set_cmt	(0X10F10,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0X10F10);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10F16);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10F1A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10F1F);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10F23,	"error_I24_wrong_disk",	0);
	create_insn	(x=0X10F26);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10F37);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10F41,	"[di+BUFFINFO.buf_ID]",	0);
	set_cmt	(0X10F46,	"[di+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0X10F46);
	op_hex		(x,	1);
	create_insn	(0X10F50);
	set_cmt	(0X10F54,	"[di+BUFFINFO.buf_next]",	0);
	create_insn	(0X10F54);
	set_cmt	(0X10F65,	"[DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0X10F65);
	op_hex		(x,	1);
	set_cmt	(0X10F6B,	"[DI+BUFFINFO.buf_ID],\n(buf_visit*256)+0FFh ; free up",	0);
	set_cmt	(0X10F75,	"[di+BUFFINFO.buf_next]",	0);
	create_insn	(0X10F75);
	create_insn	(x=0X10F7E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10F93,	"[ES:BP+DPB.DRIVER_ADDR]",	0);
	set_cmt	(0X10F97,	"[DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)",	0);
	create_insn	(x=0X10F97);
	op_hex		(x,	1);
	set_cmt	(0X10F9F,	"[es:bp+DPB.SECTOR_SIZE]",	0);
	set_cmt	(0X10FA5,	"[es:bp+DPB.FIRST_FAT]",	0);
	set_cmt	(0X10FAB,	"[es:bp+DPB.FAT_COUNT]",	0);
	set_cmt	(0X10FB0,	"[es:bp+DPB.MAX_CLUSTER]",	0);
	set_cmt	(0X10FB6,	"[es:bp+DPB.FAT_SIZE]",	0);
	create_insn	(x=0X10FBC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10FC8);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10FD0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10FD6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X10FE1);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X10FF2);
	op_dec		(x,	1);
	set_cmt	(0X10FF5,	"[SS:CALLXAD+2]",	0);
	create_insn	(x=0X10FF5);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X10FFC,	"[CALLXAD]",	0);
	create_insn	(x=0X10FFC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11000);
	op_dec		(x,	1);
	set_cmt	(0X11002,	"[ES:BP+DPB.UNIT]",	0);
	create_insn	(x=0X11006);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11009);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1100E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11014,	"[ES:BP+DPB.MEDIA]",	0);
	set_cmt	(0X11018,	"[CALLMED]",	0);
	create_insn	(x=0X11018);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1101D,	"[ES:BP+DPB.DRIVER_ADDR+2]",	0);
	set_cmt	(0X11021,	"[ES:BP+DPB.DRIVER_ADDR]",	0);
	set_cmt	(0X11025,	"offset DEVCALL",	0);
	create_insn	(x=0X11025);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X11031);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1103B);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11043,	"[ES:BP+DPB.NEXT_FREE]",	0);
	set_cmt	(0X11047,	"[si+BPB.fatsecs]",	0);
	set_cmt	(0X1104D,	"[ES:BP+DPB.FAT32_NXTFREE],0",	0);
	set_cmt	(0X11051,	"[ES:BP+DPB.FAT32_NXTFREE+2],0",	0);
	set_cmt	(0X11055,	"[ES:BP+DPB.FREE_CNT]",	0);
	set_cmt	(0X1105E,	"'XE' in NASM syntax\nFAT32 extended BPB/DPB signature",	0);
	set_cmt	(0X11061,	"'RA' in NASM syntax",	0);
	set_cmt	(0X11067,	"[SS:CALLXAD]",	0);
	create_insn	(x=0X11067);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1106C,	"[ES:BP+DPB.FIRST_ACCESS]",	0);
	set_cmt	(0X11077,	"[ES:BP+DPB.FAT_SIZE]",	0);
	set_cmt	(0X11080,	"[es:bp+DPB.FSINFO_SECTOR]",	0);
	create_insn	(x=0X1108A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11096,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0X11096);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1109C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X110A6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X110B3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X110BB,	"[es:bp+DPB.SECTORSIZE]",	0);
	create_insn	(x=0X110BF);
	op_hex		(x,	1);
	set_cmt	(0X110D3,	"'RRaA' in NASM syntax",	0);
	set_cmt	(0X110DC,	"'rrAa' in NASM syntax",	0);
	create_insn	(x=0X110DC);
	op_dec		(x,	0);
	set_cmt	(0X110E7,	"FSI_FreeCount",	0);
	create_insn	(x=0X110E7);
	op_dec		(x,	1);
	set_cmt	(0X110EC,	"[ES:BP+DPB.LAST_CLUSTER]",	0);
	set_cmt	(0X110F3,	"[ES:BP+DPB.FREE_CNT]",	0);
	set_cmt	(0X110F8,	"FSI_Nxt_Free",	0);
	create_insn	(x=0X110F8);
	op_dec		(x,	1);
	set_cmt	(0X11104,	"[es:bp+DPB.FAT32_NXTFREE]",	0);
	set_cmt	(0X11109,	"[es:bp+DPB.NEXT_FREE]",	0);
	create_insn	(x=0X1110D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11117);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1111E,	"BUFFINFO.buf_wrtcnt",	0);
	create_insn	(x=0X1111E);
	op_dec		(x,	0);
	create_insn	(x=0X11123);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1112D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11134,	"[ES:BP+DPB.FIRST_FAT]",	0);
	set_cmt	(0X1113B,	"BUFFINFO.buf_ID",	0);
	create_insn	(x=0X1113B);
	op_dec		(x,	0);
	set_cmt	(0X11140,	"[es:bp+DPB.FAT_COUNT]",	0);
	set_cmt	(0X11144,	"BUFFINFO.buf_wrtcnt",	0);
	create_insn	(x=0X11144);
	op_dec		(x,	0);
	set_cmt	(0X11147,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X11151,	"[es:bp+DPB.FAT32_SIZE]",	0);
	set_cmt	(0X11156,	"BUFFINFO.buf_wrtcntinc",	0);
	create_insn	(x=0X11156);
	op_dec		(x,	0);
	create_insn	(0X1115F);
	set_cmt	(0X11161,	"[CALLXAD]",	0);
	create_insn	(x=0X11161);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11165,	"BUFFINFO.buf_ID",	0);
	create_insn	(x=0X11165);
	op_dec		(x,	0);
	set_cmt	(0X1116F,	"Pointer to the first buffer",	0);
	create_insn	(x=0X1116F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X1116F,	"GETCURHEAD");
	set_cmt	(0X1117A,	"[di+BUFFINFO.buf_next]",	0);
	create_insn	(0X1117A);
	set_name	(0X1117A,	"SCANPLACE");
	create_insn	(0X11181);
	set_name	(0X11181,	"PLACEBUF");
	set_cmt	(0X11184,	"[DI+BUFFINFO.buf_next]",	0);
	set_cmt	(0X11186,	"bx = offset of head of list",	0);
	create_insn	(x=0X11186);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1118B,	"Buf = last?",	0);
	set_cmt	(0X1118D,	"yes",	0);
	set_cmt	(0X1118F,	"Buf = first?",	0);
	set_cmt	(0X11191,	"no",	0);
	create_insn	(x=0X11193);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11197,	"Continue with repositioning",	0);
	set_cmt	(0X11199,	"[DI+BUFFINFO.buf_prev] ; prior Buf",	0);
	create_insn	(0X11199);
	set_cmt	(0X1119C,	"[SI+BUFFINFO.buf_next]",	0);
	set_cmt	(0X1119F,	"[SI+BUFFINFO.buf_prev]",	0);
	set_cmt	(0X111A2,	"[BX+BUFFINFO.buf_prev] ; last buffer",	0);
	set_cmt	(0X111A5,	"[SI+BUFFINFO.buf_next] ; Add Buf to end of list",	0);
	set_cmt	(0X111A7,	"[BX+BUFFINFO.buf_prev]",	0);
	set_cmt	(0X111AA,	"[DI+BUFFINFO.buf_prev] ; Update link in Buf too",	0);
	set_cmt	(0X111AD,	"[DI+BUFFINFO.buf_next]",	0);
	set_cmt	(0X111B2,	"[DI+BUFFINFO.buf_ID],-1 ; Buffer FREE?",	0);
	set_cmt	(0X111B6,	"no",	0);
	set_cmt	(0X111B8,	"yes",	0);
	create_insn	(x=0X111B8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X111BE);
	set_name	(0X111BE,	"POINTCOMP");
	set_name	(0X111CC,	"_ret_label");
	create_insn	(0X111CD);
	set_name	(0X111CD,	"GETBUFFR");
	create_insn	(x=0X111CF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X111CF,	"GETBUFFRB");
	set_cmt	(0X111D6,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X111DB,	"not FAT32",	0);
	set_cmt	(0X111DD,	"[es:bp+DPB.EXT_FLAGS]",	0);
	set_cmt	(0X111E1,	"bit 7 -- 1 means only one FAT is active",	0);
	create_insn	(x=0X111E1);
	op_hex		(x,	1);
	set_cmt	(0X111E6,	"Active FAT is the one referenced in bits 0-3",	0);
	create_insn	(x=0X111E6);
	op_hex		(x,	1);
	set_cmt	(0X111EC,	"Zero based number of active FAT.\n(Only valid if mirroring is disabled.)",	0);
	set_cmt	(0X111F0,	"[es:bp+DPB.FAT32_SIZE]",	0);
	create_insn	(x=0X111F8);
	op_hex		(x,	1);
	create_insn	(x=0X111FF);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11203,	"[ES:BP+DPB.DRIVE]",	0);
	set_cmt	(0X11207,	"-1",	0);
	create_insn	(x=0X1120A);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11211,	"[DI+BUFFINFO.buf_prev]",	0);
	set_cmt	(0X11214,	"[DI+BUFFINFO.buf_ID]",	0);
	set_cmt	(0X11217,	"[DI+BUFFINFO.buf_sector]",	0);
	set_cmt	(0X1121C,	"[DI+BUFFINFO.buf_sector+2]",	0);
	set_cmt	(0X11227,	"Free buffer ?",	0);
	set_cmt	(0X1122A,	"no",	0);
	set_cmt	(0X1122C,	"save buffer (offset) addr",	0);
	set_cmt	(0X1122E,	"back at the front again?",	0);
	set_cmt	(0X11233,	"no, continue looking",	0);
	set_cmt	(0X11235,	"-1 ; invalid (not a free buffer addr)",	0);
	set_cmt	(0X1123A,	"restore free buff (header offset) addr",	0);
	create_insn	(0X1123E);
	set_cmt	(0X11243,	"Write out the dirty buffer",	0);
	create_insn	(x=0X1124A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1124F,	"if got hard error",	0);
	set_cmt	(0X11253,	"set parms for secondary cache\n(NOTE: PCDOS 7.1 doesn't use Secondary Cache)",	0);
	set_cmt	(0X11256,	"initial flags",	0);
	set_cmt	(0X11258,	"am to Read in the new sector?",	0);
	create_insn	(x=0X11258);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1125D,	"no, we're done",	0);
	set_cmt	(0X1125F,	"LEA BX,[DI+BUFINSIZ]",	0);
	create_insn	(x=0X1125F);
	op_dec		(x,	1);
	set_cmt	(0X11269,	"is buffers in HMA?",	0);
	create_insn	(x=0X11269);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1126F,	"no",	0);
	set_cmt	(0X11273,	"let's read it into scratch buff",	0);
	create_insn	(x=0X11273);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11278,	"FAT sector ?",	0);
	set_cmt	(0X1127A,	"no",	0);
	set_cmt	(0X1127F,	"buf_isFAT",	0);
	set_cmt	(0X11281,	"Buffer is marked free if read barfs",	0);
	set_cmt	(0X11283,	"Buffer is marked free if read barfs",	0);
	create_insn	(0X11283);
	set_cmt	(0X11286,	"Set buf_flags to no type, DO NOT XOR!",	0);
	set_cmt	(0X11289,	"did we read into scratch buff ?",	0);
	create_insn	(x=0X11289);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1128F,	"no",	0);
	set_cmt	(0X11291,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X11295);
	op_hex		(x,	1);
	set_cmt	(0X1129F,	"move the contents of scratch buffer",	0);
	set_cmt	(0X112A4,	"Retrieve possible CY from DREAD",	0);
	create_insn	(x=0X112AB);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X112B0,	"[DI+BUFFINFO.buf_sector+2]",	0);
	set_cmt	(0X112B3,	"[DI+BUFFINFO.buf_sector]",	0);
	set_cmt	(0X112B6,	"[DI+BUFFINFO.buf_DPB]",	0);
	set_cmt	(0X112B9,	"[DI+BUFFINFO.buf_DPB+2]",	0);
	set_cmt	(0X112BC,	"[ES:BP+DPB.DRIVE]",	0);
	set_cmt	(0X112C0,	"[DI+BUFFINFO.buf_ID]",	0);
	set_cmt	(0X112C3,	"[DI+BUFFINFO.buf_wrtcnt],1\nDefault to not a FAT sector",	0);
	set_cmt	(0X112CA,	"FAT sector ?",	0);
	set_cmt	(0X112CC,	"no",	0);
	set_cmt	(0X112CE,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X112D2,	"not FAT32",	0);
	set_cmt	(0X112D4,	"FAT32\n[es:bp+DPB.EXT_FLAGS]",	0);
	create_insn	(x=0X112D4);
	op_hex		(x,	1);
	set_cmt	(0X112DA,	"bit 7 -- 1 means only one FAT is active",	0);
	set_cmt	(0X112DC,	"[es:bp+DPB.FAT_COUNT]",	0);
	set_cmt	(0X112E0,	"[di+BUFFINFO.buf_wrtcnt]",	0);
	set_cmt	(0X112E3,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X112E8,	"FAT32",	0);
	set_cmt	(0X112EA,	"[es:bp+DPB.FAT_SIZE]",	0);
	set_cmt	(0X112F2,	"[es:bp+DPB.FAT32_SIZE]",	0);
	create_insn	(0X112F2);
	set_cmt	(0X112F7,	"[di+BUFFINFO.buf_wrtcntinc]",	0);
	create_insn	(x=0X112FE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11303);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1130C,	"-1",	0);
	create_insn	(0X1130C);
	set_name	(0X1130C,	"FLUSHBUF2");
	create_insn	(x=0X11312);
	op_dec		(x,	1);
	set_cmt	(0X11315,	"clear bit 3",	0);
	create_insn	(x=0X11315);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0X11321,	"FROM_DISK_RESET",	0);
	create_insn	(x=0X11321);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X11329);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11334,	"[DI+BUFFINFO.buf_ID]",	0);
	create_insn	(x=0X11337);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1133E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	create_insn	(x=0X11356);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1135F,	"-1",	0);
	create_insn	(0X1135F);
	set_name	(0X1135F,	"CHECKFLUSH");
	set_cmt	(0X11361,	"[DI+BUFFINFO.buf_ID]",	0);
	create_insn	(0X11367);
	set_cmt	(0X1136B,	"[DI+BUFFINFO.buf_ID]",	1);
	set_cmt	(0X11375,	"bit 3",	0);
	create_insn	(x=0X11375);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0X1137D,	"[DI+BUFFINFO.buf_flags],buf_dirty",	0);
	create_insn	(x=0X1137D);
	op_hex		(x,	1);
	set_cmt	(0X11384,	"[DI+BUFFINFO.buf_ID]",	0);
	set_cmt	(0X1138D,	"~buf_dirty",	0);
	create_insn	(x=0X1138D);
	op_hex		(x,	1);
	set_cmt	(0X11390,	"[DI+BUFFINFO.buf_ID]",	0);
	set_name	(0X11394,	"checkflush_retn");
	create_insn	(0X11395);
	set_name	(0X11395,	"BUFWRITE");
	set_cmt	(0X11398,	"[DI+BUFFINFO.buf_ID]",	0);
	set_cmt	(0X1139F,	"buf_dirty",	0);
	create_insn	(x=0X1139F);
	op_hex		(x,	1);
	create_insn	(x=0X113A7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X113B2,	"[DI+BUFFINFO.buf_DPB]",	0);
	create_insn	(x=0X113B2);
	op_dec		(x,	1);
	set_cmt	(0X113B5,	"[BUFINSIZ]",	0);
	create_insn	(x=0X113B5);
	op_dec		(x,	1);
	set_cmt	(0X113B8,	"[DI+BUFFINFO.buf_sector]",	0);
	create_insn	(x=0X113BF);
	op_dec		(x,	1);
	create_insn	(x=0X113C3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X113C8,	"[DI+BUFFINFO.buf_wrtcnt]",	0);
	create_insn	(x=0X113C8);
	op_dec		(x,	1);
	set_cmt	(0X113CC,	"Allowed_RETRY+Allowed_FAIL",	0);
	create_insn	(x=0X113CC);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X113D2,	"buf_isDATA",	0);
	create_insn	(x=0X113D2);
	op_hex		(x,	1);
	set_cmt	(0X113D7,	"Allowed_IGNORE",	0);
	create_insn	(x=0X113D7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_hex		(x,	1);
	set_cmt	(0X113DD,	"[DI+BUFFINFO.buf_wrtcntinc]",	0);
	create_insn	(x=0X113DD);
	op_dec		(x,	1);
	set_cmt	(0X113E2,	"di = -1",	0);
	create_insn	(x=0X113E2);
	op_hex		(x,	1);
	create_insn	(x=0X113F2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X113FE,	"[es:bp+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X11402);
	op_hex		(x,	1);
	create_insn	(x=0X11404);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X11429);
	op_dec		(x,	1);
	create_insn	(x=0X1142D);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11437);
	op_hex		(x,	1);
	create_insn	(0X1143B);
	set_name	(0X1143B,	"SET_RQ_SC_PARMS");
	set_cmt	(0X1143C,	"DPB.SECTOR_SIZE",	0);
	set_cmt	(0X11440,	"Last used drive's sector size",	0);
	set_cmt	(0X11444,	"DPB.DRIVE",	0);
	set_cmt	(0X11448,	"Last Used drive",	0);
	create_insn	(x=0X1144E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X1144E,	"inc_DirtyBufferCount");
	create_insn	(x=0X11454);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X11454,	"dec_DirtyBufferCount");
	create_insn	(x=0X1145C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(0X11462);
	set_name	(0X11462,	"LOCK_VIOLATION");
	create_insn	(x=0X11466);
	op_hex		(x,	1);
	set_cmt	(0X11469,	"Allowed_FAIL+Allowed_RETRY",	0);
	create_insn	(x=0X11469);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1146E);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11477,	"[es:bp+DPB.FAT_SIZE]",	0);
	create_insn	(x=0X1147E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11484,	"[ES:BP+DPB.FIRST_SECTOR]",	0);
	set_cmt	(0X1148A,	"[es:bp+DPB.FCLUS_FSECTOR+2]",	0);
	create_insn	(0X1148A);
	set_name	(0X1148A,	"lockv_1");
	create_insn	(x=0X1148E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11492,	"[es:bp+DPB.FCLUS_FSECTOR]",	0);
	set_name	(0X11496,	"lockv_2");
	set_cmt	(0X1149D,	"1 = retry, carry clear",	0);
	create_insn	(0X114A2);
	set_name	(0X114A2,	"lockv_3");
	create_byte	(0X114A4);
	make_array	(0X114A4,	0X66);
	set_name	(0X114A4,	"exepatch_start");
	create_byte	(0X1150A);
	make_array	(0X1150A,	0X44);
	set_name	(0X1150A,	"scan_patch1");
	create_byte	(0X1154E);
	make_array	(0X1154E,	0X44);
	set_name	(0X1154E,	"scan_patch2");
	create_byte	(0X11592);
	make_array	(0X11592,	0X42);
	set_name	(0X11592,	"scan_patch3");
	create_byte	(0X115D4);
	make_array	(0X115D4,	0X20);
	set_name	(0X115D4,	"scan_com");
	create_insn	(0X115F4);
	set_name	(0X115F4,	"ExePatch");
	create_insn	(0X115F8);
	set_name	(0X115F8,	"ExePackPatch");
	create_insn	(0X11603);
	set_cmt	(0X11609,	"is IP >=2",	0);
	set_cmt	(0X1160C,	"no, exit",	0);
	create_insn	(x=0X11614);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11619,	"'RB'",	0);
	create_insn	(x=0X11624);
	op_hex		(x,	1);
	create_insn	(x=0X1162C);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X1162F);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X11634);
	op_hex		(x,	1);
	set_cmt	(0X11637,	"size_scan_patch1",	0);
	create_insn	(x=0X11637);
	op_dec		(x,	1);
	set_cmt	(0X1163A,	"CHKSUM1_LEN",	0);
	create_insn	(x=0X1163A);
	op_dec		(x,	1);
	set_cmt	(0X1163D,	"PATCH1_CHKSUM",	0);
	set_cmt	(0X11645,	"str1",	0);
	create_insn	(x=0X11645);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X11648,	"size_str1",	0);
	create_insn	(x=0X11648);
	op_dec		(x,	1);
	create_insn	(x=0X11650);
	op_hex		(x,	1);
	create_insn	(x=0X11658);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X1165B,	"PATCH2_OFFSET",	0);
	create_insn	(x=0X1165B);
	op_hex		(x,	1);
	set_cmt	(0X1165E,	"size_scan_patch2",	0);
	create_insn	(x=0X1165E);
	op_dec		(x,	1);
	set_cmt	(0X11661,	"CHKSUM2_LEN",	0);
	create_insn	(x=0X11661);
	op_dec		(x,	1);
	set_cmt	(0X11664,	"PATCH2_CHKSUM",	0);
	create_insn	(x=0X1166C);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X1166F,	"size_scan_patch2",	0);
	create_insn	(x=0X1166F);
	op_dec		(x,	1);
	set_cmt	(0X11672,	"CHKSUM2A_LEN",	0);
	create_insn	(x=0X11672);
	op_dec		(x,	1);
	set_cmt	(0X11675,	"PATCH2A_CHKSUM",	0);
	create_insn	(x=0X1167D);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X11680,	"first_stop",	0);
	set_cmt	(0X11685,	"ax = opcodes for dec ax, nop",	0);
	set_cmt	(0X1168C,	"second_stop",	0);
	create_insn	(x=0X1168C);
	op_dec		(x,	1);
	set_cmt	(0X11691,	"put in dec ax and nop",	0);
	set_cmt	(0X11695,	"last_stop",	0);
	create_insn	(x=0X11695);
	op_dec		(x,	1);
	create_insn	(x=0X1169C);
	op_hex		(x,	1);
	create_insn	(x=0X116A4);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X116A7,	"PATCH3_OFFSET",	0);
	create_insn	(x=0X116A7);
	op_hex		(x,	1);
	set_cmt	(0X116AA,	"size_scan_patch3",	0);
	create_insn	(x=0X116AA);
	op_dec		(x,	1);
	set_cmt	(0X116AD,	"CHKSUM3_LEN",	0);
	create_insn	(x=0X116AD);
	op_dec		(x,	1);
	set_cmt	(0X116B0,	"PATCH3_CHKSUM",	0);
	set_cmt	(0X116B8,	"str1",	0);
	create_insn	(x=0X116B8);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X116BB,	"first_stop",	0);
	set_cmt	(0X116C0,	"al = opcode for dec ax",	0);
	create_insn	(x=0X116C0);
	op_hex		(x,	1);
	set_cmt	(0X116C6,	"second_stop",	0);
	create_insn	(x=0X116C6);
	op_dec		(x,	1);
	set_cmt	(0X116CB,	"put in dec ax",	0);
	set_cmt	(0X116CF,	"last_stop",	0);
	create_insn	(x=0X116CF);
	op_dec		(x,	1);
	create_insn	(x=0X116DC);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_name	(0X116DC,	"chk_common_str");
	set_cmt	(0X116DF,	"size_scan_com",	0);
	create_insn	(x=0X116DF);
	op_dec		(x,	1);
	create_insn	(x=0X116E6);
	op_hex		(x,	1);
	create_insn	(0X116F0);
	set_name	(0X116F0,	"chk_patchsum");
	set_cmt	(0X116F3,	"Q: does the patch match\nN: exit\nY:",	0);
	set_cmt	(0X116F5,	"di -> start of unpack code",	0);
	create_insn	(x=0X116F5);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X116FA,	"cx = length of check sum",	0);
	set_cmt	(0X116FC,	"save check sum passed to us in bx",	0);
	set_cmt	(0X11709,	"Q: does the check sum match",	0);
	set_cmt	(0X1170B,	"N: exit\nY:",	0);
	create_insn	(0X1170F);
	create_insn	(0X11711);
	set_name	(0X11711,	"DOSINIT");
	set_cmt	(0X1171E,	"DOSDATA (MSDOS.SYS data) segment",	0);
	set_cmt	(0X11723,	"BIOSDATA (IO.SYS data) segment",	0);
	create_insn	(x=0X11723);
	op_hex		(x,	1);
	set_cmt	(0X11728,	"Get free location in low memory",	0);
	create_insn	(x=0X11728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X11731,	"DOSDATASIZE (from 3440h to 4790h)\nget end of dosdata = size of dosdata",	0);
	create_insn	(x=0X11731);
	op_dec		(x,	1);
	create_insn	(x=0X11734);
	op_hex		(x,	1);
	create_insn	(x=0X1173C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X1173F,	"UCASE_TAB+2",	0);
	create_insn	(x=0X1173F);
	op_dec		(x,	0);
	set_cmt	(0X11742,	"FILE_UCASE_TAB+2",	0);
	create_insn	(x=0X11742);
	op_dec		(x,	0);
	set_cmt	(0X11745,	"FILE_CHAR_TAB+2",	0);
	create_insn	(x=0X11745);
	op_dec		(x,	0);
	set_cmt	(0X11748,	"COLLATE_TAB+2",	0);
	create_insn	(x=0X11748);
	op_dec		(x,	0);
	set_cmt	(0X1174B,	"MAP_CASE+2",	0);
	create_insn	(x=0X1174B);
	op_dec		(x,	0);
	set_cmt	(0X1174F,	"DBCS_TAB+2",	0);
	create_insn	(x=0X1174F);
	op_dec		(x,	0);
	set_cmt	(0X11752,	"device chain",	0);
	create_insn	(x=0X11752);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11757);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11765);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11769);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11771,	"dosdata:dskstack",	0);
	create_insn	(x=0X11774);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X1177A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X11780);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11784);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11788,	"Instance_Table+2",	0);
	create_insn	(x=0X11788);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X1178B,	"Instance_init_loop");
	set_cmt	(0X11790,	"DOSDATA segment",	0);
	set_cmt	(0X11792,	"size_of_Win386_IIS",	0);
	create_insn	(x=0X11797);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X11797,	"Instance_init_loop_2");
	set_cmt	(0X1179D,	"segment of the Unknown_Table",	0);
	create_insn	(x=0X1179D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X117A2);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_name	(0X117A2,	"Instance_init_ok");
	set_cmt	(0X117AF,	"SFTABL+SFT.SFTable",	0);
	create_insn	(x=0X117AF);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X117B2,	"Refcount",	0);
	set_cmt	(0X117B8,	"Access rd/wr, compatibility",	0);
	set_cmt	(0X117BB,	"attribute",	0);
	set_cmt	(0X117BC,	"devid_device_EOF|devid_device|ISCIN|ISCOUT",	0);
	set_cmt	(0X117C1,	"device pointer in devptr",	0);
	set_cmt	(0X117C5,	"0",	0);
	set_cmt	(0X117C8,	"SFTABL+SFT.SFTable+SF_ENTRY.sf_fclus32 = 0",	0);
	set_cmt	(0X117CD,	"firclus, time",	0);
	set_cmt	(0X117CF,	"date",	0);
	set_cmt	(0X117D0,	"-1",	0);
	set_cmt	(0X117D1,	"size",	0);
	set_cmt	(0X117D4,	"position",	0);
	set_cmt	(0X117D9,	"SYSDEV.NAME",	0);
	create_insn	(x=0X117D9);
	op_dec		(x,	1);
	set_cmt	(0X117DF,	"name",	0);
	set_cmt	(0X117E6,	"extension",	0);
	set_cmt	(0X117E9,	"[SI+SYSDEV.ATT],ISCIN|ISCOUT",	0);
	create_insn	(x=0X117E9);
	op_hex		(x,	1);
	create_insn	(x=0X117ED);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X117F2);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X117F7,	"device chain",	0);
	set_name	(0X117F7,	"CHAR_INIT_LOOP");
	set_cmt	(0X117FC,	"initialize console driver",	0);
	set_cmt	(0X117FF,	"[SI+SYSDEV.ATT],ISCLOCK",	0);
	create_insn	(x=0X117FF);
	op_hex		(x,	1);
	create_insn	(x=0X11805);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1180A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1180F,	"MSDAT001E ; ES:BP points to DPB",	0);
	create_insn	(x=0X11812);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11817);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1181C,	"[SI+SYSDEV.NEXT] ; Next device",	0);
	set_name	(0X1181C,	"PERDRV");
	set_cmt	(0X1181E,	"-1",	0);
	set_cmt	(0X1182B,	"[SI+SYSDEV.ATT],DEVTYP",	0);
	create_insn	(x=0X1182B);
	op_hex		(x,	1);
	set_cmt	(0X11830,	"Skip any other character devs",	0);
	create_insn	(x=0X11832);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X11839);
	op_dec		(x,	0);
	create_insn	(x=0X1183C);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X11845);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X1184A,	"PERDRV2");
	set_cmt	(0X1184C,	"[SI+SYSDEV.ATT+1], DEVOPCL",	0);
	create_insn	(x=0X1184C);
	op_hex		(x,	1);
	create_insn	(x=0X11859);
	op_hex		(x,	1);
	create_insn	(x=0X1185E);
	op_hex		(x,	1);
	set_name	(0X11861,	"PERUNIT");
	create_insn	(x=0X11863);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X1186A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11870,	"[ES:BP+DPB.DRIVE]",	0);
	set_cmt	(0X11874,	"[ES:BP+DPB.UNIT]",	0);
	create_insn	(x=0X11878);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11880,	"'XE'",	0);
	set_cmt	(0X11883,	"'RA'",	0);
	set_cmt	(0X11886,	"build DPB!",	0);
	set_cmt	(0X11889,	"[ES:BP+DPB.SECTOR_SIZE]",	0);
	create_insn	(x=0X1188D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X11894);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_name	(0X11898,	"NOTMAX");
	set_cmt	(0X1189A,	"next DPB (DPB size = 61)",	0);
	create_insn	(x=0X1189A);
	op_dec		(x,	1);
	set_cmt	(0X1189D,	"DPB.NEXT_DPB offset",	0);
	create_insn	(x=0X1189D);
	op_dec		(x,	0);
	set_cmt	(0X118A1,	"DPB.NEXT_DPB segment",	0);
	create_insn	(x=0X118A1);
	op_dec		(x,	0);
	set_cmt	(0X118A5,	"DPB.FIRST_ACCESS",	0);
	create_insn	(x=0X118A5);
	op_dec		(x,	0);
	set_cmt	(0X118AF,	"DPB.DRIVER_ADDR offset",	0);
	create_insn	(x=0X118AF);
	op_dec		(x,	0);
	set_cmt	(0X118B3,	"DPB.DRIVER_ADDR segment",	0);
	create_insn	(x=0X118B3);
	op_dec		(x,	0);
	set_cmt	(0X118BA,	"DPBSIZ",	0);
	create_insn	(x=0X118BA);
	op_dec		(x,	1);
	set_cmt	(0X118C2,	"sub bp,DPBSIZ ; back up to last dpb",	0);
	create_insn	(x=0X118C2);
	op_dec		(x,	1);
	set_name	(0X118C2,	"CONTINIT");
	set_cmt	(0X118C5,	"[bp+DPB.NEXT_DPB],-1",	0);
	set_cmt	(0X118CA,	"[bp+DPB.NEXT_DPB+2],-1",	0);
	set_cmt	(0X118CF,	"DPBSIZ ; advance to free memory again\nthe DPB chain is done.",	0);
	create_insn	(x=0X118CF);
	op_dec		(x,	1);
	set_cmt	(0X118D4,	"round up to segment",	0);
	create_insn	(x=0X118D9);
	op_hex		(x,	1);
	set_cmt	(0X118DC,	"dx = dosdata segment",	0);
	set_cmt	(0X118DE,	"dx = ds+ax first free segment",	0);
	create_insn	(x=0X118E0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X118EA);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X118F0,	"INTBASE (INT 20h)",	0);
	create_insn	(x=0X118F3);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X118F6,	"sets offsets for ints 20h-28h",	0);
	set_name	(0X118F9,	"iset1");
	set_cmt	(0X118FF,	"skip vector 29h",	0);
	set_cmt	(0X11902,	"sets offsets for ints 2Ah-2Fh",	0);
	set_name	(0X11905,	"iset2");
	set_cmt	(0X1190B,	"skip vector 30h & 31h",	0);
	set_cmt	(0X1190E,	"sets offsets for ints 32h-3Fh",	0);
	create_insn	(x=0X1190E);
	op_dec		(x,	1);
	set_name	(0X11911,	"iset3");
	set_cmt	(0X11917,	"mov byte [ENTRYPOINT],mi_long_jmp",	0);
	create_insn	(x=0X11917);
	set_cmt	(0X1191C,	"mov word [ENTRYPOINT+1],CALL_ENTRY",	0);
	create_insn	(x=0X1191C);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X11922,	"mov word [addr_int_abort],QUIT",	0);
	create_insn	(x=0X11922);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X11928);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X1192E,	"mov word [addr_int_command],COMMAND",	0);
	create_insn	(x=0X1192E);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X11934);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X1193A);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X11940);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X11946,	"mov word [addr_int_terminate],100h",	0);
	create_insn	(x=0X11946);
	set_cmt	(0X1194C,	"mov word [addr_int_terminate+2],dx",	0);
	create_insn	(x=0X1194C);
	set_cmt	(0X11952,	"mov word [02Fh*4],INT2F",	0);
	create_insn	(x=0X11952);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X1195A,	"remember address of arena",	0);
	set_cmt	(0X1195B,	"leave room for arena header",	0);
	set_cmt	(0X1195C,	"set current pdb",	0);
	create_insn	(x=0X1195C);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11960,	"0",	0);
	set_cmt	(0X11962,	"point es:di at end of memory where psp will be",	0);
	set_cmt	(0X11967,	"psp is 64 dwords",	0);
	create_insn	(x=0X11967);
	op_dec		(x,	1);
	create_insn	(x=0X1196D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11970,	"build psp at dx; ax is memory size",	0);
	set_cmt	(0X11975,	"PDB.JFN_TABLE",	0);
	create_insn	(x=0X11975);
	op_dec		(x,	1);
	set_cmt	(0X11978,	"es:di -> pdb_jfn_table in psp",	0);
	set_cmt	(0X1197A,	"0",	0);
	set_cmt	(0X1197B,	"0,1 and 2 are con device",	0);
	set_cmt	(0X1197E,	"FILPERPROC-3",	0);
	create_insn	(x=0X1197E);
	op_dec		(x,	1);
	set_cmt	(0X11981,	"rest are unused",	0);
	create_insn	(x=0X11985);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X11989);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1198D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11990,	"[es:si+SYSI_EXT.Country_Tab+2]",	0);
	set_cmt	(0X11994,	"[es:si+SYSI_EXT.SysInitVars+2]",	0);
	create_insn	(x=0X11998);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X1199D,	"HASHINITVAR",	0);
	create_insn	(x=0X1199D);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X119A0);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X119A5,	"restore address of arena",	0);
	create_insn	(x=0X119A6);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X119AA);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X119B1,	"[ARENA.SIGNATURE],arena_signature_end",	0);
	set_cmt	(0X119B6,	"[ARENA.OWNER],arena_owner_system",	0);
	set_name	(0X119B6,	"iset4");
	create_insn	(x=0X119BC);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X119C3,	"[ARENA.SIZE]",	0);
	set_cmt	(0X119C6,	"SFTABL+SFT.SFTable",	0);
	create_insn	(x=0X119C6);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X119C9,	"adjust refcount",	0);
	create_insn	(x=0X119CD);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X119D0,	"advance dx from arena to psp",	0);
	set_cmt	(0X119D1,	"point ds to psp",	0);
	create_insn	(x=0X119D3);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X119D7);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X119DE);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X119E1);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	create_insn	(x=0X119E4);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X119E8,	"19h",	0);
	create_insn	(x=0X119E8);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_dec		(x,	1);
	set_name	(0X119E8,	"CHARINIT");
	create_insn	(x=0X119EE);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X119F3);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X119F7);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	set_cmt	(0X11A00,	"offset DEVCALL",	0);
	create_insn	(x=0X11A00);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(x=0X11A08);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X11A0F);
	set_name	(0X11A0F,	"_seg_reinit");
	create_insn	(x=0X11A1A);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	op_plain_offset	(x,	1,	0X4790);
	op_plain_offset	(x,	129,	0X4790);
	set_cmt	(0X11A22,	"ax = BIOSCODE (DOSCODE) segment",	0);
	create_insn	(0X11A22);
	set_name	(0X11A22,	"patch_vec_segments");
	set_cmt	(0X11A23,	"0",	0);
	set_cmt	(0X11A27,	"INT 00h segment",	0);
	create_insn	(x=0X11A27);
	set_cmt	(0X11A2B,	"INT 20h segment",	0);
	set_cmt	(0X11A31,	"INT 21h segment",	0);
	set_cmt	(0X11A37,	"INT 23h segment",	0);
	set_cmt	(0X11A41,	"INT 24h to INT 28h segment",	0);
	set_cmt	(0X11A4D,	"INT 2Ah to INT 2Fh segment",	0);
	set_cmt	(0X11A53,	"INT 30h far jump address\n[ENTRYPOINT+3],ax",	0);
	create_insn	(x=0X11A53);
	set_cmt	(0X11A57,	"INT 32h to INT 3Fh segment",	0);
	create_insn	(x=0X11A5A);
	op_dec		(x,	1);
	set_cmt	(0X11A63,	"DOSDATA (MSDOS.SYS data) segment",	0);
	create_insn	(x=0X11A68);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	set_cmt	(0X11A6B,	"JSHARE segments = DOSDATA",	0);
	create_insn	(x=0X11A6B);
	op_dec		(x,	1);
	create_byte	(x=0X11A76);
	make_array	(x,	0XA);
	op_dec		(x,	0);
	create_word	(0X11A80);
	set_name	(0X11A80,	"SYSINITSTART");
	create_word	(0X11A82);
	set_name	(0X11A82,	"stackcount");
	create_word	(0X11A84);
	set_name	(0X11A84,	"stackat");
	create_word	(x=0X11A86);
	op_dec		(x,	0);
	set_name	(0X11A86,	"stacksize");
	create_word	(0X11A88);
	make_array	(0X11A88,	0X2);
	set_name	(0X11A88,	"stacks");
	create_word	(x=0X11A8C);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_name	(0X11A8C,	"firstentry");
	set_cmt	(0X11A8E,	"stacks+(defaultcount*entrysize)-entrysize\ndefaultcount = 9, entrysize = 8, offset stacks = 8",	0);
	create_word	(x=0X11A8E);
	op_dec		(x,	0);
	set_name	(0X11A8E,	"lastentry");
	set_cmt	(0X11A90,	"stacks+(defaultcount*entrysize)-entrysize",	0);
	create_word	(x=0X11A90);
	op_dec		(x,	0);
	set_name	(0X11A90,	"nextentry");
	create_dword	(0X11A92);
	set_name	(0X11A92,	"old08");
	create_insn	(0X11A96);
	set_name	(0X11A96,	"int08");
	create_dword	(0X11A9B);
	set_name	(0X11A9B,	"old09");
	create_insn	(0X11A9F);
	set_name	(0X11A9F,	"int09");
	create_insn	(0X11AA1);
	create_byte	(0X11AA2);
	create_insn	(0X11AA3);
	set_name	(0X11AA3,	"keyboard_lbl");
	create_dword	(0X11AA8);
	set_name	(0X11AA8,	"old70");
	create_insn	(0X11AAC);
	set_name	(0X11AAC,	"int70");
	set_name	(0X11AB1,	"int0A");
	create_dword	(0X11AB3);
	set_name	(0X11AB3,	"old0A");
	create_word	(0X11AB7);
	create_byte	(0X11AB9);
	create_insn	(0X11ABA);
	create_byte	(0X11ABC);
	make_array	(0X11ABC,	0X7);
	create_insn	(0X11AC3);
	set_name	(0X11AC3,	"entry_int0A_stk");
	set_name	(0X11AC8,	"intret_0A");
	create_insn	(0X11AC9);
	set_name	(0X11AC9,	"int0B");
	create_dword	(0X11ACB);
	set_name	(0X11ACB,	"old0B");
	create_word	(0X11ACF);
	create_byte	(0X11AD1);
	create_insn	(0X11AD2);
	create_byte	(0X11AD4);
	make_array	(0X11AD4,	0X7);
	create_insn	(0X11ADB);
	set_name	(0X11ADB,	"entry_int0B_stk");
	create_insn	(0X11AE0);
	set_name	(0X11AE0,	"intret_0B");
	create_insn	(0X11AE1);
	set_name	(0X11AE1,	"int0C");
	create_dword	(0X11AE3);
	set_name	(0X11AE3,	"old0C");
	create_word	(0X11AE7);
	create_byte	(0X11AE9);
	create_insn	(0X11AEA);
	create_word	(0X11AEC);
	create_byte	(0X11AEE);
	make_array	(0X11AEE,	0X5);
	set_name	(0X11AEE,	"logo_screen_msg");
	create_insn	(0X11AF3);
	set_name	(0X11AF3,	"entry_int0C_stk");
	set_name	(0X11AF8,	"intret_0C");
	create_insn	(0X11AF9);
	set_name	(0X11AF9,	"int0D");
	create_dword	(0X11AFB);
	set_name	(0X11AFB,	"old0D");
	create_word	(0X11AFF);
	create_byte	(0X11B01);
	set_name	(0X11B01,	"firstflag0D");
	create_insn	(0X11B02);
	create_byte	(0X11B04);
	make_array	(0X11B04,	0X7);
	create_insn	(0X11B0B);
	set_name	(0X11B0B,	"entry_int0D_stk");
	set_name	(0X11B10,	"intret_0D");
	create_insn	(0X11B11);
	set_name	(0X11B11,	"int0E");
	create_dword	(0X11B13);
	set_name	(0X11B13,	"old0E");
	create_word	(0X11B17);
	create_byte	(0X11B19);
	set_name	(0X11B19,	"firstflag0E");
	create_insn	(0X11B1A);
	create_byte	(0X11B1C);
	make_array	(0X11B1C,	0X7);
	create_insn	(0X11B23);
	set_name	(0X11B23,	"entry_int0E_stk");
	create_insn	(0X11B28);
	set_name	(0X11B28,	"intret_0E");
	create_insn	(0X11B29);
	set_name	(0X11B29,	"int72");
	create_dword	(0X11B2B);
	set_name	(0X11B2B,	"old72");
	create_word	(0X11B2F);
	create_byte	(0X11B31);
	set_name	(0X11B31,	"firstflag72");
	create_insn	(0X11B32);
	create_byte	(0X11B34);
	make_array	(0X11B34,	0X7);
	create_insn	(0X11B3B);
	set_name	(0X11B3B,	"entry_int72_stk");
	create_insn	(0X11B40);
	set_name	(0X11B40,	"intret_72");
	create_insn	(0X11B41);
	set_name	(0X11B41,	"int73");
	create_dword	(0X11B43);
	set_name	(0X11B43,	"old73");
	create_word	(0X11B47);
	create_byte	(0X11B49);
	set_name	(0X11B49,	"firstflag73");
	create_insn	(0X11B4A);
	create_byte	(0X11B4C);
	make_array	(0X11B4C,	0X7);
	create_insn	(0X11B53);
	set_name	(0X11B53,	"entry_int73_stk");
	create_insn	(0X11B58);
	set_name	(0X11B58,	"intret_73");
	create_insn	(0X11B59);
	set_name	(0X11B59,	"int74");
	create_dword	(0X11B5B);
	set_name	(0X11B5B,	"old74");
	create_word	(0X11B5F);
	create_byte	(0X11B61);
	set_name	(0X11B61,	"firstflag74");
	create_insn	(0X11B62);
	create_byte	(0X11B64);
	make_array	(0X11B64,	0X7);
	create_insn	(0X11B6B);
	set_name	(0X11B6B,	"entry_int74_stk");
	set_name	(0X11B70,	"intret_74");
	create_insn	(0X11B71);
	set_name	(0X11B71,	"int76");
	create_dword	(0X11B73);
	set_name	(0X11B73,	"old76");
	create_word	(0X11B77);
	create_byte	(0X11B79);
	create_insn	(0X11B7A);
	create_byte	(0X11B7C);
	make_array	(0X11B7C,	0X7);
	create_insn	(0X11B83);
	set_name	(0X11B83,	"entry_int76_stk");
	create_word	(x=0X11B86);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(0X11B88);
	set_name	(0X11B88,	"intret_76");
	create_insn	(0X11B89);
	set_name	(0X11B89,	"int77");
	create_dword	(0X11B8B);
	set_name	(0X11B8B,	"old77");
	create_word	(0X11B8F);
	create_byte	(0X11B91);
	create_insn	(0X11B92);
	create_byte	(0X11B94);
	make_array	(0X11B94,	0X7);
	create_insn	(0X11B9B);
	set_name	(0X11B9B,	"entry_int77_stk");
	set_name	(0X11BA0,	"intret_77");
	create_insn	(0X11BA1);
	set_name	(0X11BA1,	"do_int_stacks");
	set_name	(0X11BBF,	"found02");
	create_insn	(x=0X11C07);
	op_hex		(x,	1);
	create_insn	(0X11C0B);
	set_name	(0X11C0B,	"notfree02");
	create_insn	(0X11C15);
	set_name	(0X11C41,	"inuse");
	create_insn	(0X11C4D);
	set_cmt	(0X11C50,	"Interrupt controller, 8259A.",	0);
	create_insn	(x=0X11C50);
	op_hex		(x,	0);
	set_cmt	(0X11C52,	"Interrupt Controller #2, 8259A",	0);
	create_insn	(x=0X11C52);
	op_hex		(x,	0);
	create_insn	(x=0X11C54);
	op_hex		(x,	1);
	create_insn	(x=0X11C59);
	op_hex		(x,	1);
	set_cmt	(0X11C6A,	"- Multiplex - MS WINDOWS - GET DEVICE API ENTRY POINT\nBX = virtual device (VxD) ID, ES:DI = 0000h:0000h\nReturn: ES:DI -> VxD API entry point, or 0:0 if the VxD does not support an API",	0);
	create_insn	(x=0X11C6A);
	op_hex		(x,	0);
	create_insn	(x=0X11C73);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X11C7D);
	create_insn	(x=0X11C7F);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X11C8B,	"- VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\nAL = character, BH = display page (alpha modes)\nBL = foreground color (graphics modes)",	0);
	create_insn	(x=0X11C8B);
	op_hex		(x,	0);
	create_insn	(0X11C8F);
	set_name	(0X11C8F,	"fatal_done");
	create_insn	(0X11C90);
	create_byte	(0X11C92);
	set_name	(0X11C92,	"fatal_msg");
	create_byte	(x=0X11C93);
	make_array	(x,	0X172);
	op_dec		(x,	0);
	create_word	(x=0X11E05);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_name	(0X11E05,	"bds1");
	set_cmt	(0X11E07,	"SYSINIT segment",	0);
	create_word	(0X11E07);
	set_cmt	(0X11E09,	"BDS.drivenum",	0);
	create_byte	(0X11E09);
	set_cmt	(0X11E0A,	"BDS.drivelet",	0);
	create_byte	(0X11E0A);
	set_cmt	(0X11E0B,	"BDS.BPB (BDS offset 6) ; .bytespersec",	0);
	create_word	(x=0X11E0B);
	op_dec		(x,	0);
	set_cmt	(0X11E0D,	".secperclus",	0);
	create_byte	(0X11E0D);
	set_cmt	(0X11E0E,	".resectors",	0);
	create_word	(0X11E0E);
	set_cmt	(0X11E10,	".fats",	0);
	create_byte	(0X11E10);
	create_insn	(0X11E11);
	set_cmt	(0X11E1C,	".hiddensectors",	0);
	create_dword	(0X11E1C);
	set_cmt	(0X11E20,	".totalsecs32\n(End of FAT12/FAT16 BPB)\n\nFAT32 extensions to BDS",	0);
	create_dword	(0X11E20);
	set_cmt	(0X11E24,	".fatsecs32 ; BPB_FATSz32 (BDS offset 31)",	0);
	create_dword	(0X11E24);
	set_cmt	(0X11E28,	".extflags ; BPB_ExtFlags",	0);
	create_word	(0X11E28);
	set_cmt	(0X11E2A,	".fsver ; BPB_FSVer",	0);
	create_word	(0X11E2A);
	set_cmt	(0X11E2C,	".rootdirclust ; BPB_RootClus (BDS offset 39)",	0);
	create_dword	(0X11E2C);
	set_cmt	(0X11E30,	".fsinfo ; BPB_FSInfo ; initialized to -1",	0);
	create_word	(0X11E30);
	set_cmt	(0X11E32,	".bkbootsec ; BPB_BkBootSec ; initialized to -1",	0);
	create_word	(0X11E32);
	set_cmt	(0X11E34,	".reserved ; BPB_Reserved (12 zero bytes)",	0);
	create_byte	(x=0X11E34);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	set_cmt	(0X11E40,	"BDS.fatsiz (BDS offset 59)",	0);
	create_byte	(0X11E40);
	set_cmt	(0X11E41,	"BDS.opcnt",	0);
	create_word	(0X11E41);
	create_byte	(0X11E43);
	set_cmt	(0X11E44,	"BDS.flags (BDS offset 63)",	0);
	create_word	(0X11E44);
	create_word	(x=0X11E46);
	op_dec		(x,	0);
	set_cmt	(0X11E48,	"recommended bps for this drive",	0);
	create_word	(x=0X11E48);
	op_dec		(x,	0);
	create_byte	(0X11E4A);
	create_word	(0X11E4B);
	create_byte	(0X11E4D);
	create_word	(x=0X11E4E);
	op_dec		(x,	0);
	create_word	(x=0X11E50);
	op_dec		(x,	0);
	create_byte	(0X11E52);
	create_word	(0X11E53);
	create_word	(0X11E55);
	create_word	(0X11E57);
	create_word	(0X11E59);
	create_word	(0X11E5B);
	create_word	(0X11E5D);
	create_word	(0X11E5F);
	create_byte	(0X11E61);
	make_array	(0X11E61,	0X6);
	create_word	(0X11E67);
	create_dword	(0X11E69);
	create_dword	(0X11E6D);
	create_byte	(x=0X11E71);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	set_cmt	(0X11E7D,	"BDS.track (BDS offset 120)",	0);
	create_byte	(x=0X11E7D);
	op_dec		(x,	0);
	set_cmt	(0X11E7E,	"BDS.tim_lo ; BDS.bdsm_ismini",	0);
	create_word	(0X11E7E);
	set_cmt	(0X11E80,	"BDS.tim_hi",	0);
	create_word	(0X11E80);
	set_cmt	(0X11E82,	"BDS.volid",	0);
	create_strlit	(0X11E82,	0X11E8E);
	set_name	(0X11E82,	"aNoName");
	set_cmt	(0X11E8E,	"BDS.vol_serial (BDS offset 137)",	0);
	create_dword	(0X11E8E);
	set_cmt	(0X11E92,	"BDS.filesys_id",	0);
	create_strlit	(0X11E92,	0X11E9B);
	set_name	(0X11E92,	"aFat12");
	create_word	(x=0X11E9B);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_name	(0X11E9B,	"bds2");
	create_word	(0X11E9D);
	create_byte	(0X11E9F);
	make_array	(0X11E9F,	0X92);
	create_word	(x=0X11F31);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_name	(0X11F31,	"bds3");
	create_word	(0X11F33);
	create_byte	(0X11F35);
	make_array	(0X11F35,	0X92);
	create_word	(0X11FC7);
	set_name	(0X11FC7,	"bds4");
	create_word	(0X11FC9);
	create_byte	(0X11FCB);
	make_array	(0X11FCB,	0X92);
	create_word	(0X1205D);
	set_name	(0X1205D,	"bds5");
	create_word	(0X1205F);
	create_byte	(x=0X12061);
	make_array	(x,	0X92);
	op_hex		(x,	0);
	create_word	(x=0X120F3);
	op_hex		(x,	0);
	set_name	(0X120F3,	"bds6");
	create_word	(0X120F5);
	create_byte	(0X120F7);
	make_array	(0X120F7,	0X92);
	create_word	(0X12189);
	set_name	(0X12189,	"bds7");
	create_word	(0X1218B);
	create_byte	(0X1218D);
	make_array	(0X1218D,	0X92);
	create_word	(0X1221F);
	set_name	(0X1221F,	"bds8");
	create_word	(0X12221);
	create_byte	(0X12223);
	make_array	(0X12223,	0X92);
	create_word	(0X122B5);
	set_name	(0X122B5,	"bds9");
	create_word	(0X122B7);
	create_byte	(0X122B9);
	make_array	(0X122B9,	0X92);
	create_word	(0X1234B);
	set_name	(0X1234B,	"bds10");
	create_word	(0X1234D);
	create_byte	(0X1234F);
	make_array	(0X1234F,	0X92);
	create_word	(0X123E1);
	set_name	(0X123E1,	"bds11");
	create_word	(0X123E3);
	create_byte	(0X123E5);
	make_array	(0X123E5,	0X92);
	create_word	(0X12477);
	set_name	(0X12477,	"bds12");
	create_word	(0X12479);
	create_byte	(0X1247B);
	make_array	(0X1247B,	0X92);
	create_word	(0X1250D);
	set_name	(0X1250D,	"bds13");
	create_word	(0X1250F);
	create_byte	(0X12511);
	make_array	(0X12511,	0X92);
	create_word	(0X125A3);
	set_name	(0X125A3,	"bds14");
	create_word	(0X125A5);
	create_byte	(0X125A7);
	make_array	(0X125A7,	0X92);
	create_word	(0X12639);
	set_name	(0X12639,	"bds15");
	create_word	(0X1263B);
	create_byte	(0X1263D);
	make_array	(0X1263D,	0X92);
	create_word	(0X126CF);
	set_name	(0X126CF,	"bds16");
	create_word	(0X126D1);
	create_byte	(0X126D3);
	make_array	(0X126D3,	0X92);
	create_word	(0X12765);
	set_name	(0X12765,	"bds17");
	create_word	(0X12767);
	create_byte	(0X12769);
	make_array	(0X12769,	0X92);
	create_word	(0X127FB);
	set_name	(0X127FB,	"bds18");
	create_word	(0X127FD);
	create_byte	(0X127FF);
	make_array	(0X127FF,	0X92);
	create_word	(0X12891);
	set_name	(0X12891,	"bds19");
	create_word	(0X12893);
	create_byte	(0X12895);
	make_array	(0X12895,	0X92);
	create_word	(0X12927);
	set_name	(0X12927,	"bds20");
	create_word	(0X12929);
	create_byte	(0X1292B);
	make_array	(0X1292B,	0X92);
	create_word	(0X129BD);
	set_name	(0X129BD,	"bds21");
	create_word	(0X129BF);
	create_byte	(0X129C1);
	make_array	(0X129C1,	0X92);
	create_word	(0X12A53);
	set_name	(0X12A53,	"bds22");
	create_word	(0X12A55);
	create_byte	(0X12A57);
	make_array	(0X12A57,	0X92);
	create_word	(0X12AE9);
	set_name	(0X12AE9,	"bds23");
	create_word	(0X12AEB);
	create_byte	(0X12AED);
	make_array	(0X12AED,	0X92);
	create_word	(0X12B7F);
	set_name	(0X12B7F,	"bds24");
	create_word	(0X12B81);
	create_byte	(0X12B83);
	make_array	(0X12B83,	0X92);
	create_word	(0X12C15);
	set_name	(0X12C15,	"bds25");
	create_word	(0X12C17);
	create_byte	(0X12C19);
	make_array	(0X12C19,	0X92);
	create_word	(0X12CAB);
	set_name	(0X12CAB,	"bds26");
	create_word	(0X12CAD);
	create_byte	(0X12CAF);
	make_array	(0X12CAF,	0X92);
	create_word	(0X12D41);
	set_name	(0X12D41,	"bds27");
	create_word	(0X12D43);
	create_byte	(0X12D45);
	make_array	(0X12D45,	0X92);
	create_word	(0X12DD7);
	set_name	(0X12DD7,	"bds28");
	create_word	(0X12DD9);
	create_byte	(0X12DDB);
	make_array	(0X12DDB,	0X92);
	create_word	(0X12E6D);
	set_name	(0X12E6D,	"bds29");
	create_word	(0X12E6F);
	create_byte	(0X12E71);
	make_array	(0X12E71,	0X92);
	create_word	(0X12F03);
	set_name	(0X12F03,	"bds_count");
	create_word	(x=0X12F05);
	make_array	(x,	0X1D);
	op_dec		(x,	0);
	set_name	(0X12F05,	"bpb_array");
	create_dword	(0X12F3F);
	set_name	(0X12F3F,	"CURRENT_DOS_LOCATION");
	create_dword	(0X12F43);
	set_name	(0X12F43,	"DEVICE_LIST");
	create_dword	(0X12F47);
	set_name	(0X12F47,	"sysi_country");
	create_dword	(0X12F4B);
	set_name	(0X12F4B,	"_seg_reinit_ptr");
	create_word	(0X12F4F);
	set_name	(0X12F4F,	"lo_doscod_size");
	create_word	(0X12F51);
	set_name	(0X12F51,	"hi_doscod_size");
	create_word	(0X12F53);
	set_name	(0X12F53,	"def_php");
	create_word	(x=0X12F55);
	op_hex		(x,	0);
	create_word	(0X12F57);
	create_byte	(0X12F59);
	create_byte	(0X12F5A);
	create_word	(0X12F5C);
	create_word	(0X12F5E);
	set_name	(0X12F5E,	"RPLMemTop");
	create_byte	(0X12F60);
	set_name	(0X12F60,	"DEFAULT_DRIVE");
	create_word	(0X12F61);
	create_word	(0X12F63);
	create_word	(0X12F65);
	create_byte	(x=0X12F67);
	op_dec		(x,	0);
	set_name	(0X12F67,	"FILES");
	create_word	(0X12F68);
	create_byte	(0X12F6A);
	create_word	(0X12F6B);
	set_name	(0X12F6B,	"CONFBOT");
	create_word	(0X12F6D);
	create_word	(0X12F6F);
	create_word	(0X12F71);
	create_word	(0X12F73);
	create_word	(0X12F75);
	create_byte	(0X12F77);
	create_byte	(0X12F78);
	create_word	(0X12F79);
	create_byte	(0X12F7B);
	make_array	(0X12F7B,	0X5);
	set_name	(0X12F7B,	"showcount");
	create_strlit	(0X12F80,	0X12F83);
	set_name	(0X12F80,	"crlf$");
	create_byte	(0X12F83);
	create_byte	(0X12F84);
	create_word	(0X12F85);
	create_byte	(0X12F87);
	create_word	(0X12F88);
	set_name	(0X12F88,	"BDataSeg");
	create_word	(0X12F8A);
	set_name	(0X12F8A,	"BCodeSeg");
	create_word	(0X12F8C);
	set_name	(0X12F8C,	"MEMORY_SIZE");
	create_word	(0X12F8E);
	create_word	(0X12F90);
	create_word	(0X12F92);
	create_word	(0X12F94);
	create_byte	(0X12F96);
	set_name	(0X12F96,	"install_flag");
	create_byte	(0X12F97);
	set_name	(0X12F97,	"multi_pass_id");
	create_word	(0X12F98);
	set_name	(0X12F98,	"config_size");
	create_dword	(0X12F9A);
	set_name	(0X12F9A,	"sysinit_base_ptr");
	create_word	(0X12F9E);
	make_array	(0X12F9E,	0X2);
	set_name	(0X12F9E,	"sysinit_ptr");
	create_byte	(0X12FA2);
	make_array	(0X12FA2,	0X14);
	create_byte	(0X12FB6);
	set_name	(0X12FB6,	"ldexec_line");
	create_byte	(0X12FB7);
	set_name	(0X12FB7,	"ldexec_start");
	create_byte	(x=0X12FB8);
	make_array	(x,	0X50);
	op_dec		(x,	0);
	set_name	(0X12FB8,	"ldexec_parm");
	create_word	(0X13008);
	set_name	(0X13008,	"iexec_environ");
	create_word	(x=0X1300A);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(0X1300C);
	set_name	(0X1300C,	"iexec_ldexec_line_seg");
	create_word	(x=0X1300E);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(0X13010);
	set_name	(0X13010,	"iexec_ldexec_5c_fcb_seg");
	create_word	(x=0X13012);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(0X13014);
	set_name	(0X13014,	"iexec_ldexec_6c_fcb_seg");
	create_byte	(0X13016);
	create_byte	(0X13017);
	create_byte	(0X13018);
	create_byte	(0X13019);
	create_byte	(0X1301A);
	create_byte	(0X1301B);
	set_name	(0X1301B,	"donotshownum");
	create_word	(0X1301C);
	create_word	(0X1301E);
	create_word	(0X13020);
	create_word	(0X13022);
	create_word	(0X13024);
	set_name	(0X13024,	"old_area");
	create_word	(0X13026);
	set_name	(0X13026,	"impossible_owner_size");
	create_word	(0X13028);
	set_name	(0X13028,	"area");
	create_word	(0X1302A);
	create_word	(0X1302C);
	set_name	(0X1302C,	"memhi");
	create_word	(0X1302E);
	create_word	(0X13030);
	create_byte	(0X13032);
	set_name	(0X13032,	"TOOMANYDRIVESFLAG");
	create_dword	(0X13033);
	create_word	(0X13037);
	create_insn	(0X13039);
	set_name	(0X13039,	"move_myself");
	set_cmt	(0X13044,	"one para for an arena at end of mem\nin case of UMBs",	0);
	set_cmt	(0X13051,	"need this much room for sysinit\n(SI_end == sysinit code size)",	0);
	set_name	(0X13051,	"NoRPL");
	set_cmt	(0X13059,	"off_to_para",	0);
	create_insn	(x=0X13059);
	op_hex		(x,	1);
	set_cmt	(0X1305C,	"segment where sysinit will be located",	0);
	set_cmt	(0X1306A,	"SI_end == sysinit code size\n51664",	0);
	create_insn	(x=0X1306D);
	op_hex		(x,	1);
	create_insn	(x=0X13074);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_cmt	(0X13078,	"make BDS tables consequental (in SYSINIT segment)",	0);
	create_insn	(0X13078);
	set_name	(0X13078,	"SYSIN");
	set_cmt	(0X13079,	"SYSINIT (final) segment",	0);
	create_insn	(x=0X1307B);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1307E);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X13081,	"0",	0);
	create_insn	(x=0X13083);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_name	(0X13083,	"_sn_1");
	set_cmt	(0X13087,	"BDS.link+2 (new SYSINIT segment)",	0);
	set_cmt	(0X1308A,	"BDS.BPB address/offset",	0);
	set_cmt	(0X1308D,	"save BPB address (of the BDS)",	0);
	set_cmt	(0X1308F,	"next pointer",	0);
	set_cmt	(0X13092,	"next BDS address/offset",	0);
	set_cmt	(0X13094,	"end of BDS link ? (bds1 is last BDS)",	0);
	set_cmt	(0X13097,	"yes",	0);
	set_cmt	(0X13099,	"next bds addr - base address",	0);
	set_cmt	(0X1309B,	"offset (from start of new sysinit segment)",	0);
	set_cmt	(0X1309F,	"- BDS.size",	0);
	create_insn	(x=0X1309F);
	op_dec		(x,	1);
	set_cmt	(0X130A2,	"no more distance than +150 bytes (consequental)",	0);
	set_cmt	(0X130A4,	"difference",	0);
	set_cmt	(0X130A7,	"add 150 to previous destination (BDS)",	0);
	create_insn	(x=0X130A7);
	op_dec		(x,	1);
	set_cmt	(0X130AB,	"end of BDS tables (end_of_bdss)",	0);
	create_insn	(x=0X130AB);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X130AE,	"distance to end_of_bdss is also byte count\n(di addr is adjacent, si addr is not, so, di < si)",	0);
	create_insn	(x=0X130B0);
	op_hex		(x,	1);
	set_cmt	(0X130B2,	"move to just after previous BDS",	0);
	set_cmt	(0X130B9,	"sub difference, so, result is current+150",	0);
	set_name	(0X130B9,	"_sn_2");
	set_cmt	(0X130BB,	"next BDS",	0);
	set_cmt	(0X130BD,	"loop (for next)",	0);
	create_insn	(x=0X130BF);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_name	(0X130BF,	"_sn_3");
	set_cmt	(0X130C3,	"new sysinit segment at BIOSDATA:start_bds+2",	0);
	create_insn	(x=0X130C3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X130C7,	"di = end of sysinit\noffset 0C9D0h (again) ; new SYSINIT:SI_end",	0);
	set_cmt	(0X130C8,	"disksector buf will be located at SI_end",	0);
	create_insn	(x=0X130C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X130CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X130D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X130D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X130D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X130E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X130E3,	"_sn_4");
	set_cmt	(0X130E8,	"change INT 4F vector",	0);
	set_cmt	(0X130F8,	"new/final SYSINIT segment",	0);
	create_insn	(x=0X130F8);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	set_cmt	(0X130FC,	"BIOSDATA segment",	0);
	create_insn	(x=0X130FC);
	op_hex		(x,	1);
	set_name	(0X130FF,	"_sn_5");
	create_insn	(x=0X13101);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	set_cmt	(0X13109,	"0",	0);
	set_cmt	(0X1310B,	"clear 0:0600h to 0:06FFh",	0);
	create_insn	(x=0X1310E);
	op_dec		(x,	1);
	set_cmt	(0X1311A,	"'CON '",	0);
	set_name	(0X13120,	"_sn_6");
	create_insn	(x=0X13122);
	op_dec		(x,	1);
	create_insn	(x=0X13131);
	op_hex		(x,	1);
	set_cmt	(0X13137,	"dosinit",	0);
	create_insn	(x=0X13137);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(x=0X1316A);
	op_hex		(x,	1);
	set_cmt	(0X1316C,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X1316C);
	op_hex		(x,	0);
	create_insn	(x=0X1317B);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X131CF);
	op_hex		(x,	1);
	set_cmt	(0X131D1,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X131D1);
	op_hex		(x,	0);
	create_insn	(x=0X131D3);
	op_hex		(x,	1);
	set_cmt	(0X131D5,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X131D5);
	op_hex		(x,	0);
	create_insn	(x=0X131E4);
	op_hex		(x,	1);
	set_cmt	(0X131E6,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs",	0);
	create_insn	(x=0X131E6);
	op_hex		(x,	0);
	create_insn	(x=0X131EB);
	op_hex		(x,	1);
	set_cmt	(0X131ED,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X131ED);
	op_hex		(x,	0);
	create_insn	(x=0X131EF);
	op_hex		(x,	1);
	set_cmt	(0X131F1,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X131F1);
	op_hex		(x,	0);
	set_cmt	(0X131F6,	"[es:arena_owner]",	0);
	set_cmt	(0X131FD,	"[es:arena_name] ; 'RPL',0",	0);
	set_cmt	(0X13207,	"[es:arena_name+4]",	0);
	create_insn	(x=0X13212);
	op_hex		(x,	1);
	set_cmt	(0X13214,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X13214);
	op_hex		(x,	0);
	set_name	(0X13216,	"NoRPLArena");
	create_insn	(x=0X1324D);
	op_hex		(x,	1);
	create_insn	(x=0X132F9);
	op_hex		(x,	1);
	set_cmt	(0X132FB,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP",	0);
	create_insn	(x=0X132FB);
	op_hex		(x,	0);
	create_insn	(x=0X13302);
	op_hex		(x,	1);
	set_cmt	(0X13304,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer",	0);
	create_insn	(x=0X13304);
	op_hex		(x,	0);
	create_insn	(x=0X13308);
	op_hex		(x,	1);
	set_cmt	(0X1330B,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector",	0);
	create_insn	(x=0X1330B);
	op_hex		(x,	0);
	create_insn	(x=0X13318);
	op_hex		(x,	1);
	set_cmt	(0X1331B,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt",	0);
	create_insn	(x=0X1331B);
	op_hex		(x,	0);
	create_insn	(x=0X1332F);
	op_hex		(x,	1);
	set_cmt	(0X13332,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector",	0);
	create_insn	(x=0X13332);
	op_hex		(x,	0);
	create_word	(0X13359);
	create_insn	(0X1335B);
	set_name	(0X1335B,	"no_err");
	create_insn	(x=0X13365);
	op_hex		(x,	1);
	set_cmt	(0X13367,	"DOS - SELECT DISK\nDL = new default drive number (0 = A, 1 = B, etc.)\nReturn: AL = number of logical drives",	0);
	create_insn	(x=0X13367);
	op_hex		(x,	0);
	set_name	(0X13369,	"nodrvset");
	create_insn	(x=0X1336F);
	op_hex		(x,	1);
	set_cmt	(0X13372,	"DOS - 2+ internal - GET SWITCHAR/AVAILDEV\nReturn: AL = FFh unsupported subfunction\nDL = current switch character",	0);
	create_insn	(x=0X13372);
	op_hex		(x,	0);
	create_insn	(x=0X13384);
	op_hex		(x,	1);
	set_cmt	(0X13386,	"DOS - GET CURRENT DATE\nReturn: DL = day, DH = month, CX = year\nAL = day of the week (0=Sunday, 1=Monday, etc.)",	0);
	create_insn	(x=0X13386);
	op_hex		(x,	0);
	create_insn	(x=0X1338C);
	op_hex		(x,	1);
	create_insn	(x=0X13391);
	op_hex		(x,	1);
	create_insn	(x=0X13394);
	op_hex		(x,	1);
	create_insn	(x=0X133CB);
	op_hex		(x,	1);
	create_insn	(x=0X133CE);
	op_hex		(x,	1);
	create_insn	(x=0X133DC);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X133EA);
	op_hex		(x,	1);
	set_cmt	(0X133EC,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X133EC);
	op_hex		(x,	0);
	create_insn	(x=0X133F1);
	op_hex		(x,	1);
	create_insn	(x=0X133F9);
	op_hex		(x,	1);
	set_cmt	(0X133FB,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X133FB);
	op_hex		(x,	0);
	create_insn	(x=0X133FF);
	op_hex		(x,	1);
	set_cmt	(0X13401,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X13401);
	op_hex		(x,	0);
	create_insn	(x=0X13406);
	op_hex		(x,	1);
	create_insn	(x=0X1340F);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X1341B);
	create_insn	(x=0X13420);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X13423,	"DOS - 2+ - SET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name\nCX = file attribute bits",	0);
	create_insn	(x=0X13423);
	op_hex		(x,	0);
	create_insn	(x=0X13427);
	op_hex		(x,	1);
	set_cmt	(0X1342A,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write",	0);
	create_insn	(x=0X1342A);
	op_hex		(x,	0);
	create_insn	(x=0X1342F);
	op_dec		(x,	1);
	create_insn	(x=0X13434);
	op_hex		(x,	1);
	set_cmt	(0X13437,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X13437);
	op_hex		(x,	0);
	create_insn	(x=0X13441);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X13447);
	op_hex		(x,	1);
	set_cmt	(0X13449,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer",	0);
	create_insn	(x=0X13449);
	op_hex		(x,	0);
	create_insn	(x=0X1344B);
	op_hex		(x,	1);
	set_cmt	(0X1344D,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X1344D);
	op_hex		(x,	0);
	create_insn	(x=0X13455);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X13458,	"DOS - 2+ - SET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name\nCX = file attribute bits",	0);
	create_insn	(x=0X13458);
	op_hex		(x,	0);
	create_insn	(x=0X1345A);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1346E);
	op_hex		(x,	1);
	create_insn	(x=0X13473);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1347D);
	op_hex		(x,	1);
	set_cmt	(0X13480,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.",	0);
	create_insn	(x=0X13480);
	op_hex		(x,	0);
	create_insn	(x=0X1348D);
	op_hex		(x,	1);
	set_cmt	(0X1348F,	"DOS - GET CURRENT TIME\nReturn: CH = hours, CL = minutes, DH = seconds\nDL = hundredths of seconds",	0);
	create_insn	(x=0X1348F);
	op_hex		(x,	0);
	create_insn	(x=0X134AE);
	op_hex		(x,	1);
	set_cmt	(0X134B0,	"DOS - SET CURRENT TIME\nCH = hours, CL = minutes, DH = seconds, DL = hundredths of seconds\nReturn: AL = 00h if no error / = FFh if bad value sent to routine",	0);
	create_insn	(x=0X134B0);
	op_hex		(x,	0);
	create_insn	(x=0X134B9);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X134DF);
	op_hex		(x,	1);
	set_cmt	(0X134E1,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs",	0);
	create_insn	(x=0X134E1);
	op_hex		(x,	0);
	create_insn	(x=0X134E6);
	op_hex		(x,	1);
	set_cmt	(0X134E8,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X134E8);
	op_hex		(x,	0);
	create_insn	(x=0X134EA);
	op_hex		(x,	1);
	set_cmt	(0X134EC,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X134EC);
	op_hex		(x,	0);
	create_insn	(x=0X134F7);
	op_hex		(x,	1);
	create_insn	(x=0X13502);
	op_hex		(x,	1);
	set_cmt	(0X13504,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs",	0);
	create_insn	(x=0X13504);
	op_hex		(x,	0);
	create_insn	(x=0X13507);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(x=0X1350B);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(x=0X13513);
	op_hex		(x,	1);
	create_insn	(x=0X1351A);
	op_hex		(x,	1);
	set_cmt	(0X1351D,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector",	0);
	create_insn	(x=0X1351D);
	op_hex		(x,	0);
	create_insn	(x=0X13527);
	op_hex		(x,	1);
	set_cmt	(0X1352A,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt",	0);
	create_insn	(x=0X1352A);
	op_hex		(x,	0);
	create_insn	(x=0X1352C);
	op_hex		(x,	1);
	create_insn	(x=0X13533);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1353D);
	op_hex		(x,	1);
	set_cmt	(0X13540,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X13540);
	op_hex		(x,	0);
	create_insn	(x=0X13544);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1354E);
	op_hex		(x,	1);
	set_cmt	(0X13551,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X13551);
	op_hex		(x,	0);
	create_insn	(x=0X13558);
	op_hex		(x,	1);
	set_cmt	(0X1355B,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X1355B);
	op_hex		(x,	0);
	create_insn	(x=0X1355F);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X13568);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1356F);
	op_hex		(x,	1);
	create_insn	(x=0X1357B);
	op_hex		(x,	1);
	create_insn	(x=0X1358E);
	op_hex		(x,	1);
	create_insn	(x=0X13598);
	op_hex		(x,	1);
	create_insn	(x=0X1359E);
	op_hex		(x,	1);
	create_insn	(x=0X135A9);
	op_hex		(x,	1);
	create_insn	(0X135B0);
	create_insn	(0X135B5);
	create_insn	(x=0X135CA);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X135CD);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X135DD);
	op_hex		(x,	1);
	create_insn	(x=0X135EE);
	op_hex		(x,	1);
	set_cmt	(0X135F0,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer",	0);
	create_insn	(x=0X135F0);
	op_hex		(x,	0);
	create_insn	(x=0X135FE);
	op_hex		(x,	1);
	set_cmt	(0X1361B,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X1361B);
	op_hex		(x,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_5(void) {
        auto x;
#define id x

	set_cmt	(0X13626,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X13626);
	op_hex		(x,	0);
	create_insn	(x=0X13628);
	op_hex		(x,	1);
	create_insn	(x=0X1362F);
	op_hex		(x,	1);
	set_cmt	(0X13631,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X13631);
	op_hex		(x,	0);
	create_insn	(x=0X13633);
	op_hex		(x,	1);
	create_insn	(x=0X13638);
	op_hex		(x,	1);
	create_word	(0X13643);
	create_word	(0X13645);
	create_insn	(x=0X1364D);
	op_hex		(x,	1);
	create_insn	(x=0X1365A);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_word	(0X1365E);
	create_byte	(0X13660);
	create_insn	(x=0X1366C);
	op_hex		(x,	1);
	set_cmt	(0X1366F,	"DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)",	0);
	create_insn	(x=0X1366F);
	op_hex		(x,	0);
	create_insn	(x=0X13679);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_word	(0X1368C);
	create_word	(0X13692);
	create_word	(0X13694);
	create_insn	(0X136AE);
	create_insn	(x=0X136B7);
	op_hex		(x,	0);
	create_insn	(x=0X136B9);
	op_hex		(x,	1);
	create_insn	(x=0X136D6);
	op_hex		(x,	1);
	set_cmt	(0X136D8,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer",	0);
	create_insn	(x=0X136D8);
	op_hex		(x,	0);
	set_cmt	(0X136DE,	"- Multiplex - ",	0);
	create_insn	(x=0X136DE);
	op_hex		(x,	0);
	create_insn	(x=0X136EF);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X136F3);
	op_hex		(x,	1);
	create_insn	(x=0X136F9);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	op_hex		(x,	1);
	create_insn	(x=0X13700);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(x=0X13707);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_name	(0X13707,	"ConfigDone");
	create_insn	(x=0X1370C);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X13710);
	op_hex		(x,	1);
	set_cmt	(0X13712,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X13712);
	op_hex		(x,	0);
	create_insn	(x=0X13714);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	op_hex		(x,	1);
	create_insn	(x=0X1371B);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1371F);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X13723);
	op_hex		(x,	1);
	set_cmt	(0X13725,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs",	0);
	create_insn	(x=0X13725);
	op_hex		(x,	0);
	set_cmt	(0X1372C,	"[es:ARENA.OWNER],8 ; set impossible owner",	0);
	set_cmt	(0X13733,	"[es:ARENA.NAME],'SD' ; System Data",	0);
	create_insn	(0X13739);
	set_name	(0X1373A,	"skip_free_sysinitbase");
	create_insn	(0X1373D);
	create_insn	(0X13740);
	create_insn	(0X13755);
	create_insn	(x=0X13758);
	op_hex		(x,	1);
	set_cmt	(0X1375A,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X1375A);
	op_hex		(x,	0);
	create_insn	(x=0X1375C);
	op_hex		(x,	1);
	set_cmt	(0X1375E,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X1375E);
	op_hex		(x,	0);
	create_insn	(0X1376E);
	create_insn	(x=0X13774);
	op_hex		(x,	1);
	set_cmt	(0X13776,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X13776);
	op_hex		(x,	0);
	create_insn	(x=0X13778);
	op_hex		(x,	1);
	set_cmt	(0X1377A,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X1377A);
	op_hex		(x,	0);
	create_insn	(x=0X13780);
	op_hex		(x,	1);
	set_cmt	(0X13782,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X13782);
	op_hex		(x,	0);
	create_insn	(0X13788);
	create_insn	(x=0X13791);
	op_hex		(x,	1);
	create_insn	(x=0X137CD);
	op_hex		(x,	1);
	create_insn	(x=0X137FC);
	op_hex		(x,	1);
	create_dword	(0X13834);
	create_insn	(0X13858);
	set_cmt	(0X1386A,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X1386A);
	op_hex		(x,	0);
	create_insn	(0X1386C);
	create_insn	(0X138AD);
	create_insn	(x=0X138C0);
	op_hex		(x,	1);
	create_insn	(0X138D4);
	set_name	(0X138D4,	"print_x");
	create_insn	(x=0X138DE);
	op_hex		(x,	1);
	create_insn	(x=0X138E3);
	op_hex		(x,	1);
	create_insn	(x=0X138E5);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X138ED);
	op_hex		(x,	1);
	set_cmt	(0X138EF,	"DOS - PRINT STRING\nDS:DX -> string terminated by \"$\"",	0);
	create_insn	(x=0X138EF);
	op_hex		(x,	0);
	create_insn	(0X138F3);
	create_insn	(x=0X13909);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X13912);
	create_insn	(x=0X1391B);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X13924);
	create_insn	(x=0X1392D);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X13936);
	create_insn	(x=0X1393D);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X13946);
	create_insn	(x=0X1394D);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X13956);
	create_insn	(x=0X1395D);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X13969);
	create_insn	(x=0X13976);
	op_hex		(x,	1);
	create_insn	(x=0X1398C);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X139A7);
	create_insn	(x=0X139AE);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X139BD);
	create_insn	(x=0X139C2);
	op_hex		(x,	0);
	create_insn	(x=0X139CA);
	op_hex		(x,	1);
	set_cmt	(0X139CD,	"DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)",	0);
	create_insn	(x=0X139CD);
	op_hex		(x,	0);
	create_insn	(x=0X139D7);
	op_hex		(x,	0);
	create_insn	(x=0X139DD);
	op_hex		(x,	1);
	create_byte	(0X139F2);
	create_byte	(0X139F3);
	set_name	(0X139F3,	"uc_yes");
	create_byte	(0X139F4);
	set_name	(0X139F4,	"lc_yes");
	create_byte	(0X139F5);
	set_name	(0X139F5,	"uc_no");
	create_byte	(0X139F6);
	set_name	(0X139F6,	"lc_no");
	create_byte	(0X139F7);
	set_name	(0X139F7,	"uc_all");
	create_byte	(0X139F8);
	set_name	(0X139F8,	"lc_all");
	create_strlit	(0X139F9,	0X139FB);
	set_name	(0X139F9,	"aOn");
	create_strlit	(0X139FB,	0X139FE);
	set_name	(0X139FB,	"aOff");
	create_byte	(0X139FE);
	create_insn	(0X139FF);
	set_cmt	(0X13A1F,	"DOS - 2+ - IOCTL - ",	0);
	create_insn	(x=0X13A1F);
	op_hex		(x,	0);
	set_cmt	(0X13A37,	"DOS - 2+ - IOCTL - ",	0);
	create_insn	(x=0X13A37);
	op_hex		(x,	0);
	create_insn	(x=0X13A3F);
	op_hex		(x,	1);
	create_insn	(0X13A69);
	create_insn	(0X13AAC);
	create_insn	(0X13AC2);
	create_insn	(0X13AD2);
	create_insn	(x=0X13AD4);
	op_hex		(x,	1);
	create_insn	(0X13ADF);
	create_insn	(x=0X13AE2);
	op_hex		(x,	1);
	create_insn	(0X13AED);
	create_insn	(0X13AF7);
	create_insn	(x=0X13AFC);
	op_hex		(x,	1);
	create_insn	(x=0X13B24);
	op_hex		(x,	1);
	create_insn	(0X13B4E);
	create_insn	(0X13B52);
	create_insn	(x=0X13B5A);
	op_hex		(x,	1);
	create_insn	(x=0X13B65);
	op_hex		(x,	1);
	create_insn	(x=0X13B7A);
	op_hex		(x,	1);
	create_insn	(0X13B8A);
	create_insn	(x=0X13B8E);
	op_hex		(x,	1);
	create_insn	(x=0X13B94);
	op_hex		(x,	1);
	create_insn	(x=0X13B9E);
	op_hex		(x,	1);
	create_insn	(x=0X13BAD);
	op_hex		(x,	1);
	create_insn	(x=0X13BB8);
	op_hex		(x,	1);
	create_insn	(x=0X13BBE);
	op_hex		(x,	1);
	create_insn	(0X13BC8);
	create_insn	(x=0X13BD7);
	op_hex		(x,	1);
	create_insn	(0X13BE4);
	create_insn	(0X13BE6);
	create_insn	(0X13BE9);
	create_insn	(x=0X13BF2);
	op_hex		(x,	1);
	create_insn	(x=0X13C12);
	op_hex		(x,	1);
	create_insn	(x=0X13C22);
	op_hex		(x,	1);
	create_insn	(x=0X13C30);
	op_hex		(x,	1);
	create_insn	(x=0X13C3E);
	op_hex		(x,	1);
	create_insn	(x=0X13C51);
	op_hex		(x,	1);
	create_insn	(x=0X13C64);
	op_hex		(x,	1);
	create_insn	(x=0X13C79);
	op_hex		(x,	1);
	create_insn	(x=0X13CA8);
	op_hex		(x,	1);
	create_insn	(x=0X13CB6);
	op_hex		(x,	1);
	create_insn	(x=0X13CDB);
	op_hex		(x,	1);
	create_insn	(0X13CFA);
	create_insn	(x=0X13D00);
	op_hex		(x,	1);
	create_insn	(x=0X13D0C);
	op_hex		(x,	1);
	create_insn	(x=0X13D33);
	op_hex		(x,	1);
	create_insn	(x=0X13D4F);
	op_hex		(x,	1);
	create_insn	(0X13D6E);
	create_insn	(x=0X13D6F);
	op_hex		(x,	1);
	create_insn	(x=0X13D9F);
	op_hex		(x,	1);
	create_insn	(x=0X13DAB);
	op_hex		(x,	1);
	create_insn	(x=0X13DAD);
	op_hex		(x,	1);
	create_insn	(0X13DB1);
	create_insn	(x=0X13DB8);
	op_hex		(x,	1);
	create_insn	(x=0X13DBC);
	op_hex		(x,	1);
	create_insn	(x=0X13DC1);
	op_hex		(x,	1);
	create_insn	(0X13DC6);
	create_insn	(x=0X13DCE);
	op_hex		(x,	1);
	create_insn	(0X13DD7);
	create_insn	(x=0X13DF0);
	op_hex		(x,	1);
	create_insn	(0X13E08);
	create_insn	(x=0X13E12);
	op_hex		(x,	1);
	create_insn	(0X13E26);
	create_insn	(0X13E4C);
	create_insn	(0X13E5E);
	create_insn	(0X13E8A);
	create_insn	(0X13E8D);
	create_insn	(0X13EB2);
	create_insn	(0X13EBB);
	create_insn	(0X13EBD);
	create_insn	(x=0X13ED9);
	op_hex		(x,	1);
	create_insn	(x=0X13F05);
	op_hex		(x,	1);
	create_insn	(0X13F09);
	create_insn	(0X13F0D);
	create_insn	(0X13F18);
	create_insn	(0X13F27);
	create_insn	(x=0X13F28);
	op_hex		(x,	1);
	create_insn	(0X13F5B);
	create_insn	(0X13F90);
	create_insn	(0X13FA1);
	create_insn	(0X13FC7);
	create_insn	(0X1400E);
	create_insn	(0X14016);
	create_insn	(0X1401E);
	create_insn	(0X14029);
	create_insn	(0X14038);
	create_insn	(0X14066);
	create_insn	(0X1406C);
	create_insn	(0X14083);
	create_insn	(0X14093);
	create_insn	(0X1409A);
	create_insn	(0X140A0);
	create_insn	(0X140B7);
	create_insn	(x=0X140F2);
	op_hex		(x,	1);
	set_cmt	(0X1410F,	"KEYBOARD - GET SHIFT STATUS\nAL = shift status bits",	0);
	create_insn	(x=0X1410F);
	op_hex		(x,	0);
	create_insn	(x=0X14111);
	op_hex		(x,	1);
	create_insn	(x=0X14115);
	op_hex		(x,	1);
	create_insn	(x=0X14120);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X14127);
	op_hex		(x,	1);
	set_cmt	(0X1412E,	"KEYBOARD - CHECK BUFFER, DO NOT CLEAR\nReturn: ZF clear if character in buffer\nAH = scan code, AL = character\nZF set if no character in buffer",	0);
	create_insn	(x=0X1412E);
	op_hex		(x,	0);
	create_insn	(x=0X14132);
	op_hex		(x,	1);
	create_insn	(0X1413E);
	create_insn	(x=0X14153);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1415D);
	op_hex		(x,	1);
	create_insn	(0X14165);
	create_insn	(x=0X1417B);
	op_hex		(x,	1);
	create_insn	(x=0X14180);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1418A);
	op_hex		(x,	1);
	create_insn	(x=0X1418F);
	op_hex		(x,	1);
	create_insn	(x=0X14199);
	op_hex		(x,	1);
	create_insn	(0X141A1);
	create_insn	(x=0X141A3);
	op_hex		(x,	1);
	create_insn	(x=0X141AD);
	op_hex		(x,	1);
	create_insn	(x=0X141B3);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X141BC);
	op_hex		(x,	1);
	create_insn	(x=0X141C1);
	op_hex		(x,	1);
	create_insn	(x=0X141C8);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X141D1);
	create_insn	(x=0X141D6);
	op_hex		(x,	1);
	create_insn	(x=0X141DB);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X141E4);
	op_hex		(x,	1);
	set_cmt	(0X141FC,	"KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY\nReturn: AH = scan code, AL = character",	0);
	create_insn	(x=0X141FC);
	op_hex		(x,	0);
	create_insn	(0X14205);
	create_insn	(x=0X14211);
	op_hex		(x,	1);
	create_insn	(x=0X14216);
	op_hex		(x,	1);
	create_insn	(x=0X1421B);
	op_hex		(x,	1);
	set_cmt	(0X14222,	"KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY\nReturn: AH = scan code, AL = character",	0);
	create_insn	(x=0X14222);
	op_hex		(x,	0);
	create_insn	(x=0X14233);
	op_hex		(x,	1);
	set_cmt	(0X14235,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X14235);
	op_hex		(x,	0);
	create_insn	(x=0X1423C);
	op_hex		(x,	1);
	set_cmt	(0X1423E,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X1423E);
	op_hex		(x,	0);
	create_insn	(x=0X14244);
	op_hex		(x,	1);
	set_cmt	(0X14246,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X14246);
	op_hex		(x,	0);
	create_insn	(0X14251);
	create_insn	(x=0X14261);
	op_hex		(x,	1);
	create_insn	(0X14268);
	create_insn	(x=0X14270);
	op_hex		(x,	1);
	create_insn	(0X14278);
	create_insn	(x=0X14290);
	op_hex		(x,	1);
	create_insn	(0X1429A);
	create_insn	(0X142AC);
	create_insn	(x=0X142BE);
	op_hex		(x,	1);
	create_insn	(x=0X142C6);
	op_hex		(x,	1);
	create_insn	(0X142CD);
	create_insn	(0X142D5);
	create_insn	(0X142DA);
	create_insn	(x=0X142DC);
	op_hex		(x,	1);
	create_insn	(x=0X142E3);
	op_hex		(x,	1);
	create_insn	(x=0X142E8);
	op_hex		(x,	1);
	create_insn	(0X14303);
	create_insn	(x=0X1430B);
	op_hex		(x,	1);
	create_insn	(x=0X14310);
	op_hex		(x,	1);
	create_insn	(x=0X1431D);
	op_hex		(x,	1);
	create_insn	(x=0X14322);
	op_hex		(x,	1);
	create_insn	(x=0X14325);
	op_hex		(x,	1);
	create_insn	(x=0X1432E);
	op_hex		(x,	1);
	create_insn	(0X1433A);
	create_insn	(x=0X1434A);
	op_hex		(x,	1);
	create_insn	(x=0X14351);
	op_hex		(x,	1);
	create_insn	(x=0X14360);
	op_hex		(x,	1);
	create_insn	(0X14389);
	create_insn	(0X1438E);
	create_insn	(0X14390);
	create_insn	(0X143B7);
	create_insn	(0X143C9);
	create_insn	(0X143F2);
	create_insn	(0X143FA);
	create_insn	(x=0X14431);
	op_hex		(x,	1);
	create_insn	(0X1443A);
	create_insn	(0X1444D);
	create_insn	(0X1445B);
	create_insn	(0X14472);
	create_insn	(0X144BC);
	create_insn	(x=0X144C4);
	op_hex		(x,	1);
	create_insn	(0X144CC);
	create_insn	(0X144EE);
	create_insn	(x=0X14517);
	op_hex		(x,	1);
	create_insn	(0X14587);
	create_insn	(0X145D1);
	create_insn	(0X145FA);
	create_insn	(0X14603);
	create_insn	(0X14613);
	create_insn	(0X14623);
	create_insn	(x=0X14628);
	op_hex		(x,	1);
	create_insn	(0X14667);
	create_insn	(0X1466E);
	create_insn	(0X14686);
	create_insn	(0X14697);
	create_insn	(0X14698);
	create_insn	(0X146B4);
	create_insn	(0X146CD);
	create_insn	(x=0X146D2);
	op_hex		(x,	1);
	create_insn	(x=0X146DC);
	op_hex		(x,	1);
	create_insn	(x=0X146E4);
	op_hex		(x,	1);
	create_insn	(0X146F4);
	create_insn	(0X146F5);
	create_insn	(x=0X14703);
	op_hex		(x,	1);
	create_insn	(0X1470D);
	create_insn	(0X14716);
	create_insn	(0X14724);
	set_cmt	(0X14726,	"- VIDEO - GET CURRENT VIDEO MODE\nReturn: AH = number of columns on screen\nAL = current video mode\nBH = current active display page",	0);
	create_insn	(x=0X14726);
	op_hex		(x,	0);
	set_cmt	(0X1472A,	"- VIDEO - SET VIDEO MODE\nAL = mode",	0);
	create_insn	(x=0X1472A);
	op_hex		(x,	0);
	set_cmt	(0X14743,	"- VIDEO - ",	0);
	create_insn	(x=0X14743);
	op_hex		(x,	0);
	set_cmt	(0X14768,	"- VIDEO - SCROLL PAGE UP\nAL = number of lines to scroll window (0 = blank whole window)\nBH = attributes to be used on blanked lines\nCH,CL = row,column of upper left corner of window to scroll\nDH,DL = row,column of lower right corner of window",	0);
	create_insn	(x=0X14768);
	op_hex		(x,	0);
	create_insn	(x=0X14776);
	op_hex		(x,	1);
	set_cmt	(0X14787,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X14787);
	op_hex		(x,	0);
	set_cmt	(0X14790,	"- VIDEO - ",	0);
	create_insn	(x=0X14790);
	op_hex		(x,	0);
	set_cmt	(0X147B3,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X147B3);
	op_hex		(x,	0);
	set_cmt	(0X147CB,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X147CB);
	op_hex		(x,	0);
	create_insn	(x=0X147EA);
	op_hex		(x,	1);
	create_insn	(0X147F7);
	set_cmt	(0X147FE,	"- VIDEO - READ CURSOR POSITION\nBH = page number\nReturn: DH,DL = row,column, CH = cursor start line, CL = cursor end line",	0);
	create_insn	(x=0X147FE);
	op_hex		(x,	0);
	set_cmt	(0X1480A,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X1480A);
	op_hex		(x,	0);
	create_insn	(x=0X1481A);
	op_hex		(x,	1);
	create_insn	(x=0X14827);
	op_hex		(x,	1);
	set_cmt	(0X1483D,	"- VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION\nAL = character, BH = display page\nBL = attributes of character (alpha modes) or color (graphics modes)\nCX = number of times to write character",	0);
	create_insn	(x=0X1483D);
	op_hex		(x,	0);
	set_cmt	(0X14843,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X14843);
	op_hex		(x,	0);
	set_cmt	(0X14848,	"- VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION\nAL = character, BH = display page\nBL = attributes of character (alpha modes) or color (graphics modes)\nCX = number of times to write character",	0);
	create_insn	(x=0X14848);
	op_hex		(x,	0);
	set_cmt	(0X1484E,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X1484E);
	op_hex		(x,	0);
	set_cmt	(0X14853,	"- VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION\nAL = character, BH = display page\nBL = attributes of character (alpha modes) or color (graphics modes)\nCX = number of times to write character",	0);
	create_insn	(x=0X14853);
	op_hex		(x,	0);
	set_cmt	(0X14859,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X14859);
	op_hex		(x,	0);
	set_cmt	(0X1486F,	"- VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION\nAL = character, BH = display page\nBL = attributes of character (alpha modes) or color (graphics modes)\nCX = number of times to write character",	0);
	create_insn	(x=0X1486F);
	op_hex		(x,	0);
	set_cmt	(0X1487A,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X1487A);
	op_hex		(x,	0);
	create_insn	(0X1487E);
	set_cmt	(0X14881,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X14881);
	op_hex		(x,	0);
	create_insn	(0X14885);
	create_insn	(x=0X14898);
	op_hex		(x,	1);
	set_cmt	(0X1489A,	"DOS - GET CURRENT TIME\nReturn: CH = hours, CL = minutes, DH = seconds\nDL = hundredths of seconds",	0);
	create_insn	(x=0X1489A);
	op_hex		(x,	0);
	create_insn	(x=0X148A7);
	op_hex		(x,	1);
	create_insn	(0X148B4);
	set_cmt	(0X148BD,	"- VIDEO - READ CURSOR POSITION\nBH = page number\nReturn: DH,DL = row,column, CH = cursor start line, CL = cursor end line",	0);
	create_insn	(x=0X148BD);
	op_hex		(x,	0);
	set_cmt	(0X148C5,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X148C5);
	op_hex		(x,	0);
	create_insn	(x=0X148CB);
	op_hex		(x,	1);
	set_cmt	(0X148D9,	"- VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\nAL = character, BH = display page (alpha modes)\nBL = foreground color (graphics modes)",	0);
	create_insn	(x=0X148D9);
	op_hex		(x,	0);
	set_cmt	(0X148E1,	"- VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\nAL = character, BH = display page (alpha modes)\nBL = foreground color (graphics modes)",	0);
	create_insn	(x=0X148E1);
	op_hex		(x,	0);
	set_cmt	(0X148E6,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X148E6);
	op_hex		(x,	0);
	set_cmt	(0X148ED,	"DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT\nDL = character <> FFh\n Return: ZF set = no character\n  ZF clear = character recieved, AL = character",	0);
	create_insn	(x=0X148ED);
	op_hex		(x,	0);
	create_insn	(x=0X148F8);
	op_hex		(x,	1);
	set_cmt	(0X148FA,	"DOS - GET CURRENT TIME\nReturn: CH = hours, CL = minutes, DH = seconds\nDL = hundredths of seconds",	0);
	create_insn	(x=0X148FA);
	op_hex		(x,	0);
	create_insn	(0X14910);
	set_cmt	(0X14927,	"- VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION\nAL = character, BH = display page - alpha mode\nBL = color of character (graphics mode, PCjr only)\nCX = number of times to write character",	0);
	create_insn	(x=0X14927);
	op_hex		(x,	0);
	set_cmt	(0X14931,	"DOS - ",	0);
	create_insn	(x=0X14931);
	op_hex		(x,	0);
	create_insn	(0X14949);
	create_insn	(x=0X14965);
	op_hex		(x,	1);
	create_insn	(x=0X1496E);
	op_hex		(x,	1);
	create_insn	(x=0X14979);
	op_hex		(x,	1);
	create_insn	(0X14985);
	create_insn	(0X1498B);
	create_insn	(x=0X1498F);
	op_hex		(x,	1);
	create_insn	(0X1499A);
	create_insn	(0X149A9);
	create_insn	(x=0X149AD);
	op_hex		(x,	1);
	create_insn	(0X149B2);
	create_insn	(x=0X149B6);
	op_hex		(x,	1);
	create_insn	(0X149BD);
	create_insn	(x=0X149C1);
	op_hex		(x,	1);
	create_insn	(0X149C6);
	create_insn	(0X149D2);
	create_insn	(0X149E7);
	create_insn	(0X149ED);
	create_insn	(x=0X149F6);
	op_hex		(x,	1);
	set_cmt	(0X149F8,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X149F8);
	op_hex		(x,	0);
	create_insn	(0X14A01);
	set_cmt	(0X14A0D,	"- VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION\nAL = character, BH = display page - alpha mode\nBL = color of character (graphics mode, PCjr only)\nCX = number of times to write character",	0);
	create_insn	(x=0X14A0D);
	op_hex		(x,	0);
	create_insn	(0X14A11);
	set_cmt	(0X14A18,	"- VIDEO - READ CURSOR POSITION\nBH = page number\nReturn: DH,DL = row,column, CH = cursor start line, CL = cursor end line",	0);
	create_insn	(x=0X14A18);
	op_hex		(x,	0);
	create_insn	(x=0X14A21);
	op_hex		(x,	1);
	set_cmt	(0X14A2A,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X14A2A);
	op_hex		(x,	0);
	set_cmt	(0X14A32,	"- VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION\nAL = character, BH = display page - alpha mode\nBL = color of character (graphics mode, PCjr only)\nCX = number of times to write character",	0);
	create_insn	(x=0X14A32);
	op_hex		(x,	0);
	set_cmt	(0X14A36,	"- VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION\nAL = character, BH = display page - alpha mode\nBL = color of character (graphics mode, PCjr only)\nCX = number of times to write character",	0);
	create_insn	(x=0X14A36);
	op_hex		(x,	0);
	create_insn	(x=0X14A3B);
	op_hex		(x,	1);
	set_cmt	(0X14A47,	"- VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\nAL = character, BH = display page (alpha modes)\nBL = foreground color (graphics modes)",	0);
	create_insn	(x=0X14A47);
	op_hex		(x,	0);
	set_cmt	(0X14A4C,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X14A4C);
	op_hex		(x,	0);
	create_insn	(0X14A50);
	create_insn	(0X14A65);
	create_insn	(0X14A67);
	create_insn	(0X14A76);
	create_insn	(0X14A84);
	create_insn	(0X14A96);
	create_insn	(0X14AB0);
	create_insn	(0X14AB8);
	create_insn	(0X14AC2);
	create_insn	(0X14AC5);
	set_name	(0X14AC5,	"nullsub_15");
	create_insn	(0X14AC6);
	create_insn	(x=0X14ACB);
	op_hex		(x,	1);
	create_insn	(x=0X14AD2);
	op_hex		(x,	1);
	create_insn	(x=0X14ADB);
	op_hex		(x,	1);
	create_insn	(x=0X14AE4);
	op_hex		(x,	1);
	create_insn	(x=0X14AEF);
	op_hex		(x,	1);
	create_insn	(x=0X14AF6);
	op_hex		(x,	1);
	create_insn	(x=0X14B00);
	op_hex		(x,	1);
	create_insn	(0X14B1D);
	set_cmt	(0X14B29,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X14B29);
	op_hex		(x,	0);
	set_cmt	(0X14B36,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X14B36);
	op_hex		(x,	0);
	create_insn	(x=0X14B4E);
	op_hex		(x,	1);
	set_cmt	(0X14B50,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X14B50);
	op_hex		(x,	0);
	create_insn	(x=0X14B54);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X14B5E);
	op_hex		(x,	1);
	set_cmt	(0X14B61,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.",	0);
	create_insn	(x=0X14B61);
	op_hex		(x,	0);
	create_insn	(x=0X14B67);
	op_hex		(x,	1);
	create_insn	(x=0X14B6E);
	op_hex		(x,	1);
	set_cmt	(0X14B70,	"DOS - KEYBOARD INPUT, NO ECHO\nReturn: AL = character",	0);
	create_insn	(x=0X14B70);
	op_hex		(x,	0);
	create_insn	(x=0X14B80);
	op_hex		(x,	1);
	create_insn	(x=0X14B85);
	op_hex		(x,	1);
	create_insn	(0X14B91);
	create_insn	(x=0X14BB5);
	op_hex		(x,	1);
	create_insn	(x=0X14BBC);
	op_hex		(x,	1);
	create_insn	(x=0X14BCF);
	op_hex		(x,	1);
	create_insn	(x=0X14BDC);
	op_hex		(x,	1);
	create_insn	(x=0X14BE6);
	op_hex		(x,	1);
	create_insn	(0X14BFB);
	create_insn	(0X14C00);
	create_insn	(x=0X14C1C);
	op_hex		(x,	1);
	create_insn	(x=0X14C20);
	op_hex		(x,	1);
	set_cmt	(0X14C25,	"DOS - ",	0);
	create_insn	(x=0X14C25);
	op_hex		(x,	0);
	create_insn	(0X14C32);
	create_insn	(0X14C5E);
	create_insn	(0X14C6B);
	create_insn	(0X14C97);
	create_insn	(x=0X14C9A);
	op_hex		(x,	1);
	set_cmt	(0X14C9D,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE",	0);
	create_insn	(x=0X14C9D);
	op_hex		(x,	0);
	create_insn	(0X14CB6);
	create_insn	(0X14CBC);
	create_insn	(0X14CC1);
	create_insn	(x=0X14CF7);
	op_hex		(x,	1);
	create_insn	(x=0X14D01);
	op_hex		(x,	1);
	create_insn	(0X14D22);
	create_insn	(x=0X14D4B);
	op_hex		(x,	0);
	create_insn	(x=0X14D66);
	op_hex		(x,	0);
	create_insn	(0X14D70);
	create_insn	(0X14D7A);
	create_insn	(0X14D7C);
	create_insn	(0X14DCE);
	create_insn	(0X14DD9);
	create_insn	(0X14E35);
	create_insn	(0X14E3A);
	set_cmt	(0X14E69,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X14E69);
	op_hex		(x,	0);
	set_cmt	(0X14E76,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X14E76);
	op_hex		(x,	0);
	set_cmt	(0X14E88,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X14E88);
	op_hex		(x,	0);
	set_cmt	(0X14E9C,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X14E9C);
	op_hex		(x,	0);
	create_insn	(0X14EEC);
	create_insn	(0X14EED);
	create_insn	(0X14F08);
	create_insn	(0X14F21);
	create_insn	(0X14F29);
	create_insn	(0X14F30);
	create_insn	(0X14F36);
	set_cmt	(0X14F3B,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X14F3B);
	op_hex		(x,	0);
	set_cmt	(0X14F47,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X14F47);
	op_hex		(x,	0);
	create_insn	(0X14F4A);
	create_insn	(x=0X14F5A);
	op_hex		(x,	1);
	set_cmt	(0X14F5C,	"DOS - GET DEFAULT DISK NUMBER",	0);
	create_insn	(x=0X14F5C);
	op_hex		(x,	0);
	create_insn	(0X14F73);
	create_insn	(0X14F80);
	create_insn	(0X14F93);
	create_insn	(0X14F96);
	create_insn	(0X14F9E);
	set_name	(0X14F9E,	"badfil");
	create_insn	(x=0X14FA2);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_name	(0X14FA2,	"badload");
	create_insn	(x=0X14FAA);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X14FCC);
	op_hex		(x,	1);
	set_cmt	(0X14FCE,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X14FCE);
	op_hex		(x,	0);
	create_insn	(0X14FD3);
	create_insn	(x=0X14FE4);
	op_hex		(x,	1);
	set_name	(0X14FE4,	"print");
	set_cmt	(0X14FE6,	"DOS - PRINT STRING\nDS:DX -> string terminated by \"$\"",	0);
	create_insn	(x=0X14FE6);
	op_hex		(x,	0);
	create_insn	(0X14FE9);
	set_name	(0X14FE9,	"open_dev");
	create_insn	(0X14FF5);
	create_insn	(x=0X14FF9);
	op_hex		(x,	1);
	set_cmt	(0X14FFB,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle",	0);
	create_insn	(x=0X14FFB);
	op_hex		(x,	0);
	create_insn	(x=0X14FFD);
	op_hex		(x,	1);
	create_insn	(x=0X15002);
	op_hex		(x,	1);
	set_cmt	(0X15004,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X15004);
	op_hex		(x,	0);
	create_insn	(0X15008);
	set_cmt	(0X1500B,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1500B);
	op_hex		(x,	0);
	create_insn	(0X1500E);
	create_strlit	(0X15011,	0X15086);
	set_name	(0X15011,	"MsDosVers8Copyr");
	create_strlit	(0X15086,	0X1508A);
	set_name	(0X15086,	"aNul_0");
	create_strlit	(0X1508A,	0X1508E);
	set_name	(0X1508A,	"condev");
	create_strlit	(0X1508E,	0X15092);
	set_name	(0X1508E,	"auxdev");
	create_strlit	(0X15092,	0X15096);
	set_name	(0X15092,	"prndev");
	create_strlit	(0X15096,	0X150A2);
	set_name	(0X15096,	"config");
	create_strlit	(0X150A2,	0X150A4);
	set_name	(0X150A2,	"cntry_drv");
	create_byte	(x=0X150A4);
	op_chr		(x,	0);
	set_name	(0X150A4,	"cntry_root");
	create_strlit	(0X150A5,	0X150B0);
	set_name	(0X150A5,	"cntry_path");
	set_cmt	(0X150B1,	"(It was 52 in MSDOS 6.22)",	0);
	create_byte	(x=0X150B1);
	make_array	(x,	0X3D);
	op_dec		(x,	0);
	create_byte	(0X150EE);
	set_name	(0X150EE,	"country_file_signature");
	create_strlit	(0X150EF,	0X150F6);
	set_name	(0X150EF,	"aCountry");
	create_word	(0X150F6);
	set_name	(0X150F6,	"cntrycodepage_id");
	create_byte	(x=0X150F8);
	make_array	(x,	0X40);
	op_dec		(x,	0);
	create_byte	(0X1513E);
	create_byte	(0X1513F);
	create_byte	(0X15140);
	create_byte	(0X15141);
	create_word	(0X15142);
	create_byte	(0X15144);
	create_byte	(0X15145);
	create_byte	(0X15146);
	create_word	(0X15149);
	create_byte	(0X1514C);
	make_array	(0X1514C,	0X33);
	create_byte	(0X1517F);
	create_strlit	(0X15180,	0X15188);
	set_name	(0X15180,	"aConfig");
	create_strlit	(0X15188,	0X1518D);
	set_name	(0X15188,	"aMenu");
	create_strlit	(0X1518D,	0X15194);
	set_name	(0X1518D,	"aCommon");
	create_byte	(0X15194);
	create_byte	(x=0X15195);
	op_chr		(x,	0);
	create_byte	(x=0X15196);
	op_chr		(x,	0);
	create_strlit	(0X15197,	0X1519F);
	set_name	(0X15197,	"aAccdate");
	create_byte	(x=0X1519F);
	op_chr		(x,	0);
	create_strlit	(0X151A0,	0X151A6);
	set_name	(0X151A0,	"aBreak");
	create_byte	(x=0X151A6);
	op_chr		(x,	0);
	create_strlit	(0X151A7,	0X151AF);
	set_name	(0X151A7,	"aBuffers");
	create_byte	(x=0X151AF);
	op_chr		(x,	0);
	create_strlit	(0X151B0,	0X151BC);
	set_name	(0X151B0,	"aBuffershigh");
	create_byte	(x=0X151BC);
	op_chr		(x,	0);
	create_strlit	(0X151BD,	0X151C5);
	set_name	(0X151BD,	"aComment");
	create_byte	(x=0X151C5);
	op_chr		(x,	0);
	create_strlit	(0X151C6,	0X151CE);
	set_name	(0X151C6,	"aCountry_0");
	create_byte	(x=0X151CE);
	op_chr		(x,	0);
	create_strlit	(0X151CF,	0X151D6);
	set_name	(0X151CF,	"aDevice");
	create_byte	(x=0X151D6);
	op_chr		(x,	0);
	create_strlit	(0X151D7,	0X151E2);
	set_name	(0X151D7,	"aDevicehigh");
	create_byte	(x=0X151E2);
	op_chr		(x,	0);
	create_strlit	(0X151E3,	0X151E7);
	set_name	(0X151E3,	"aDos_1");
	create_byte	(x=0X151E7);
	op_chr		(x,	0);
	create_strlit	(0X151E8,	0X151F1);
	set_name	(0X151E8,	"aDrivparm");
	create_byte	(x=0X151F1);
	op_chr		(x,	0);
	create_strlit	(0X151F2,	0X151F7);
	set_name	(0X151F2,	"aFcbs");
	create_byte	(x=0X151F7);
	op_chr		(x,	0);
	create_strlit	(0X151F8,	0X15201);
	set_name	(0X151F8,	"aFcbshigh");
	create_byte	(x=0X15201);
	op_chr		(x,	0);
	create_strlit	(0X15202,	0X15208);
	set_name	(0X15202,	"aFiles");
	create_byte	(x=0X15208);
	op_chr		(x,	0);
	create_strlit	(0X15209,	0X15213);
	set_name	(0X15209,	"aFileshigh");
	create_byte	(x=0X15213);
	op_chr		(x,	0);
	create_strlit	(0X15214,	0X1521C);
	set_name	(0X15214,	"aInclude");
	create_byte	(x=0X1521C);
	op_chr		(x,	0);
	create_strlit	(0X1521D,	0X15225);
	set_name	(0X1521D,	"aInstall");
	create_byte	(x=0X15225);
	op_chr		(x,	0);
	create_strlit	(0X15226,	0X15232);
	set_name	(0X15226,	"aInstallhigh");
	create_byte	(x=0X15232);
	op_chr		(x,	0);
	create_strlit	(0X15233,	0X1523D);
	set_name	(0X15233,	"aLastdrive");
	create_byte	(x=0X1523D);
	op_chr		(x,	0);
	create_strlit	(0X1523E,	0X1524C);
	set_name	(0X1523E,	"aLastdrivehigh");
	create_byte	(x=0X1524C);
	op_chr		(x,	0);
	create_strlit	(0X1524D,	0X15252);
	set_name	(0X1524D,	"aLogo_0");
	create_byte	(x=0X15252);
	op_chr		(x,	0);
	create_strlit	(0X15253,	0X1525B);
	set_name	(0X15253,	"aSubmenu");
	create_byte	(x=0X1525B);
	op_chr		(x,	0);
	create_strlit	(0X1525C,	0X15266);
	set_name	(0X1525C,	"aMenucolor");
	create_byte	(x=0X15266);
	op_chr		(x,	0);
	create_strlit	(0X15267,	0X15273);
	set_name	(0X15267,	"aMenudefault");
	create_byte	(x=0X15273);
	op_chr		(x,	0);
	create_strlit	(0X15274,	0X1527D);
	set_name	(0X15274,	"aMenuitem");
	create_byte	(x=0X1527D);
	op_chr		(x,	0);
	create_strlit	(0X1527E,	0X15289);
	set_name	(0X1527E,	"aMultitrack");
	create_byte	(x=0X15289);
	op_chr		(x,	0);
	create_strlit	(0X1528A,	0X15292);
	set_name	(0X1528A,	"aNumlock");
	create_byte	(x=0X15292);
	op_chr		(x,	0);
	create_strlit	(0X15293,	0X15297);
	set_name	(0X15293,	"aRem");
	create_byte	(x=0X15297);
	op_chr		(x,	0);
	create_strlit	(0X15298,	0X1529C);
	set_name	(0X15298,	"aSet");
	create_byte	(x=0X1529C);
	op_chr		(x,	0);
	create_strlit	(0X1529D,	0X152A3);
	set_name	(0X1529D,	"aShell");
	create_byte	(x=0X152A3);
	op_chr		(x,	0);
	create_strlit	(0X152A4,	0X152AB);
	set_name	(0X152A4,	"aStacks");
	create_byte	(x=0X152AB);
	op_chr		(x,	0);
	create_strlit	(0X152AC,	0X152B7);
	set_name	(0X152AC,	"aStackshigh");
	create_byte	(x=0X152B7);
	op_chr		(x,	0);
	create_strlit	(0X152B8,	0X152C1);
	set_name	(0X152B8,	"aSwitches");
	create_byte	(x=0X152C1);
	op_chr		(x,	0);
	create_byte	(0X152C2);
	create_word	(0X152C3);
	create_word	(0X152C5);
	create_word	(0X152C7);
	create_word	(0X152C9);
	create_byte	(0X152CB);
	create_byte	(0X152CC);
	create_word	(0X152CD);
	create_word	(x=0X152CF);
	op_dec		(x,	0);
	set_name	(0X152CF,	"_BPB48T");
	create_byte	(0X152D1);
	create_word	(0X152D2);
	create_byte	(0X152D4);
	create_word	(x=0X152D5);
	op_dec		(x,	0);
	create_word	(x=0X152D7);
	op_dec		(x,	0);
	create_byte	(0X152D9);
	create_word	(0X152DA);
	create_word	(0X152DC);
	create_word	(0X152DE);
	create_dword	(0X152E0);
	create_dword	(0X152E4);
	create_dword	(0X152E8);
	create_word	(0X152EC);
	create_word	(0X152EE);
	create_dword	(0X152F0);
	create_word	(0X152F4);
	create_word	(0X152F6);
	create_byte	(x=0X152F8);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	create_word	(x=0X15304);
	op_dec		(x,	0);
	set_name	(0X15304,	"_BPB96T");
	create_byte	(0X15306);
	create_word	(0X15307);
	create_byte	(0X15309);
	create_word	(x=0X1530A);
	op_dec		(x,	0);
	create_word	(x=0X1530C);
	op_dec		(x,	0);
	create_byte	(0X1530E);
	create_word	(0X1530F);
	create_word	(x=0X15311);
	op_dec		(x,	0);
	create_word	(0X15313);
	create_dword	(0X15315);
	create_dword	(0X15319);
	create_dword	(0X1531D);
	create_word	(0X15321);
	create_word	(0X15323);
	create_dword	(0X15325);
	create_word	(0X15329);
	create_word	(0X1532B);
	create_byte	(x=0X1532D);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	create_word	(x=0X15339);
	op_dec		(x,	0);
	set_name	(0X15339,	"_BPB35");
	create_byte	(0X1533B);
	create_word	(0X1533C);
	create_byte	(0X1533E);
	create_word	(x=0X1533F);
	op_dec		(x,	0);
	create_word	(x=0X15341);
	op_dec		(x,	0);
	create_byte	(0X15343);
	create_word	(0X15344);
	create_word	(0X15346);
	create_word	(0X15348);
	create_dword	(0X1534A);
	create_dword	(0X1534E);
	create_dword	(0X15352);
	create_word	(0X15356);
	create_word	(0X15358);
	create_dword	(0X1535A);
	create_word	(0X1535E);
	create_word	(0X15360);
	create_byte	(x=0X15362);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	create_word	(x=0X1536E);
	op_dec		(x,	0);
	set_name	(0X1536E,	"_BPB144");
	create_byte	(0X15370);
	create_word	(0X15371);
	create_byte	(0X15373);
	create_word	(x=0X15374);
	op_dec		(x,	0);
	create_word	(x=0X15376);
	op_dec		(x,	0);
	create_byte	(0X15378);
	create_word	(0X15379);
	create_word	(x=0X1537B);
	op_dec		(x,	0);
	create_word	(0X1537D);
	create_dword	(0X1537F);
	create_dword	(0X15383);
	create_dword	(0X15387);
	create_word	(0X1538B);
	create_word	(0X1538D);
	create_dword	(0X1538F);
	create_word	(0X15393);
	create_word	(0X15395);
	create_byte	(x=0X15397);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	create_word	(x=0X153A3);
	op_dec		(x,	0);
	set_name	(0X153A3,	"_BPB288");
	create_byte	(0X153A5);
	create_word	(0X153A6);
	create_byte	(0X153A8);
	create_word	(x=0X153A9);
	op_dec		(x,	0);
	create_word	(x=0X153AB);
	op_dec		(x,	0);
	create_word	(0X153AE);
	create_word	(x=0X153B0);
	op_dec		(x,	0);
	create_word	(0X153B2);
	create_dword	(0X153B4);
	create_dword	(0X153B8);
	create_dword	(0X153BC);
	create_word	(0X153C0);
	create_word	(0X153C2);
	create_dword	(0X153C4);
	create_word	(0X153C8);
	create_word	(0X153CA);
	create_byte	(x=0X153CC);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	create_word	(x=0X153D8);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	set_name	(0X153D8,	"bpbtable");
	create_word	(x=0X153DA);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X153DC);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X153DE);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X153E0);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X153E2);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X153E4);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X153E6);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X153E8);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X153EA);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X153EC);
	create_strlit	(0X153ED,	0X153F9);
	set_name	(0X153ED,	"switchlist");
	create_insn	(0X15478);
	create_insn	(x=0X15487);
	op_dec		(x,	1);
	create_insn	(0X154A7);
	create_insn	(0X154DA);
	create_insn	(0X154E1);
	create_insn	(0X1550B);
	create_insn	(0X15521);
	set_name	(0X15521,	"endfile");
	create_insn	(x=0X15522);
	op_hex		(x,	1);
	create_insn	(x=0X15527);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1552E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(x=0X15546);
	op_dec		(x,	1);
	create_insn	(x=0X1555A);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1557C);
	op_dec		(x,	1);
	create_insn	(x=0X155B4);
	op_hex		(x,	1);
	create_insn	(x=0X155C4);
	op_hex		(x,	1);
	create_insn	(x=0X155D1);
	op_hex		(x,	0);
	create_insn	(x=0X155D8);
	op_hex		(x,	1);
	create_insn	(x=0X1563D);
	op_hex		(x,	1);
	create_insn	(x=0X15642);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15673);
	op_hex		(x,	1);
	create_insn	(0X1569B);
	create_insn	(x=0X1570E);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X15728,	"QUERY FREE HMA SPACE",	0);
	create_insn	(x=0X1572B);
	op_hex		(x,	0);
	set_cmt	(0X1572D,	"number of bytes available in HMA",	0);
	set_cmt	(0X15730,	"0 ; DOS not using HMA",	0);
	set_cmt	(0X15735,	"<= 3072",	0);
	create_insn	(x=0X15742);
	op_hex		(x,	1);
	create_insn	(x=0X157EF);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X157FD);
	op_hex		(x,	1);
	set_cmt	(0X157FF,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X157FF);
	op_hex		(x,	0);
	create_insn	(0X15803);
	create_insn	(x=0X1581D);
	op_dec		(x,	1);
	create_insn	(x=0X15820);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X15857);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_name	(0X1589B,	"dosdata_noumb");
	create_insn	(x=0X158A4);
	op_hex		(x,	1);
	set_cmt	(0X158A6,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X158A6);
	op_hex		(x,	0);
	create_insn	(x=0X158AB);
	op_hex		(x,	1);
	set_cmt	(0X158AD,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X158AD);
	op_hex		(x,	0);
	create_insn	(x=0X158B2);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X158B7);
	op_hex		(x,	1);
	set_cmt	(0X158BA,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write",	0);
	create_insn	(x=0X158BA);
	op_hex		(x,	0);
	create_insn	(0X158C3);
	create_insn	(x=0X158C7);
	op_hex		(x,	1);
	set_cmt	(0X158C9,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X158C9);
	op_hex		(x,	0);
	create_insn	(x=0X158CE);
	op_hex		(x,	1);
	set_cmt	(0X158D0,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate",	0);
	create_insn	(x=0X158D0);
	op_hex		(x,	0);
	create_insn	(x=0X158D2);
	op_hex		(x,	1);
	set_cmt	(0X158D4,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate",	0);
	create_insn	(x=0X158D4);
	op_hex		(x,	0);
	create_insn	(x=0X158D6);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X158DE);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X158EA,	"reset h/w by writing to port",	0);
	set_cmt	(0X158EC,	"get starting address",	0);
	set_cmt	(0X15909,	"SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)",	0);
	create_insn	(x=0X15909);
	op_hex		(x,	0);
	create_insn	(x=0X1590D);
	op_hex		(x,	1);
	set_name	(0X15927,	"set_sysinit_base");
	create_insn	(x=0X15931);
	op_dec		(x,	1);
	create_insn	(x=0X15934);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X15937,	"\"memory allocation error occurred\"",	0);
	create_insn	(x=0X1593D);
	op_chr		(x,	1);
	set_cmt	(0X15958,	"number of bytes to move",	0);
	create_insn	(x=0X15958);
	op_dec		(x,	1);
	create_insn	(x=0X1595B);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X15961);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X15964,	"memory allocation error occurred",	0);
	create_insn	(x=0X1596E);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X15978);
	op_hex		(x,	1);
	create_insn	(x=0X1598B);
	op_hex		(x,	1);
	set_cmt	(0X1598D,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs",	0);
	create_insn	(x=0X1598D);
	op_hex		(x,	0);
	create_insn	(x=0X159A7);
	op_hex		(x,	1);
	set_cmt	(0X159A9,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X159A9);
	op_hex		(x,	0);
	create_insn	(x=0X159AB);
	op_hex		(x,	1);
	set_cmt	(0X159AD,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X159AD);
	op_hex		(x,	0);
	create_insn	(x=0X159BC);
	op_hex		(x,	1);
	set_cmt	(0X159BE,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs",	0);
	create_insn	(x=0X159BE);
	op_hex		(x,	0);
	create_insn	(x=0X159C3);
	op_hex		(x,	1);
	set_cmt	(0X159C5,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X159C5);
	op_hex		(x,	0);
	create_insn	(x=0X159C7);
	op_hex		(x,	1);
	set_cmt	(0X159C9,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X159C9);
	op_hex		(x,	0);
	create_insn	(x=0X159D2);
	op_hex		(x,	1);
	set_cmt	(0X159D4,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X159D4);
	op_hex		(x,	0);
	create_insn	(0X159D7);
	set_name	(0X159D7,	"do_install_exec");
	create_insn	(x=0X159E7);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X159F9);
	set_cmt	(0X15A08,	"cs:0",	0);
	create_insn	(x=0X15A41);
	op_hex		(x,	1);
	create_insn	(x=0X15A43);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X15A4D);
	set_name	(0X15A4D,	"sysinitptr");
	set_name	(0X15A59,	"install_exit_ret");
	create_insn	(0X15A5A);
	set_name	(0X15A5A,	"ParaRound");
	create_insn	(x=0X15A5D);
	op_hex		(x,	1);
	create_insn	(x=0X15A5F);
	op_hex		(x,	1);
	set_cmt	(0X15A63,	"sysinit_base module",	0);
	create_insn	(0X15A63);
	set_name	(0X15A63,	"sysinit_base");
	set_cmt	(0X15A6D,	"load/exec dos call.",	0);
	create_insn	(x=0X15A6D);
	op_hex		(x,	0);
	set_cmt	(0X15A80,	"sysinit_base_chksum",	0);
	set_cmt	(0X15A8C,	"- Multiplex - MS WINDOWS - MS-DOS 7 BOOT LOGO SUPPORT - correct EGA output mode",	0);
	create_insn	(x=0X15A8C);
	op_hex		(x,	0);
	create_insn	(x=0X15A92);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X15A95,	"DOS - PRINT STRING\nDS:DX -> string terminated by \"$\"",	0);
	create_insn	(x=0X15A95);
	op_hex		(x,	0);
	set_cmt	(0X15A97,	"use HLT to minimize energy consumption",	0);
	set_name	(0X15A97,	"stall");
	create_insn	(0X15A98);
	create_insn	(0X15A9A);
	set_name	(0X15A9A,	"sysinit_base_end");
	set_cmt	(0X15A9F,	"return back to sysinit module",	0);
	create_insn	(0X15A9F);
	set_name	(0X15A9F,	"sum_up");
	create_insn	(x=0X15AA0);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X15AAA,	"if config_size has been broken, then this\nwhole test better fail.",	0);
	create_insn	(x=0X15AAA);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X15AAF);
	op_hex		(x,	1);
	set_cmt	(0X15AB1,	"when config.sys file not exist.",	0);
	set_cmt	(0X15AB9,	"locstack ?\nstarting after the stack.\nthis does not cover the possible stack code!",	0);
	set_cmt	(0X15ABB,	"SI_end (52176)\nSI_end is the label at the end of sysinit\nfrom after_checksum to SI_end",	0);
	create_insn	(x=0X15AC0);
	op_hex		(x,	1);
	create_word	(0X15ACB);
	set_name	(0X15ACB,	"sysinit_base_ssx");
	create_word	(0X15ACD);
	set_name	(0X15ACD,	"sysinit_base_spx");
	create_word	(0X15ACF);
	set_name	(0X15ACF,	"sysinit_base_chksum");
	create_insn	(0X15AD1);
	create_insn	(x=0X15ADD);
	op_hex		(x,	1);
	create_insn	(0X15AE6);
	create_insn	(x=0X15AF2);
	op_hex		(x,	1);
	create_insn	(0X15B1A);
	create_insn	(0X15B79);
	create_insn	(x=0X15B86);
	op_hex		(x,	1);
	create_insn	(x=0X15B92);
	op_hex		(x,	0);
	create_insn	(x=0X15B99);
	op_hex		(x,	1);
	create_insn	(0X15BB1);
	create_insn	(0X15BD9);
	create_insn	(0X15CAF);
	create_insn	(0X15CEF);
	create_insn	(0X15D2F);
	create_insn	(0X15D6F);
	create_insn	(0X15DAF);
	create_insn	(0X15DEF);
	create_insn	(0X15E2F);
	create_insn	(0X15E6F);
	set_cmt	(0X15E7E,	"iret",	0);
	create_insn	(x=0X15E7E);
	op_hex		(x,	1);
	create_insn	(0X15EAF);
	create_insn	(0X15EEF);
	create_insn	(x=0X15EF1);
	op_hex		(x,	1);
	create_insn	(x=0X15EF6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	op_hex		(x,	1);
	create_insn	(0X15EFC);
	create_byte	(0X15F22);
	create_byte	(0X15F23);
	create_byte	(0X15F26);
	create_word	(0X15F27);
	create_word	(0X15F29);
	create_byte	(0X15F2B);
	make_array	(0X15F2B,	0X20);
	create_byte	(0X15F4B);
	create_strlit	(0X15F4C,	0X15F56);
	set_name	(0X15F4C,	"aWindows");
	create_byte	(0X15F56);
	make_array	(0X15F56,	0X48);
	create_byte	(0X15F9E);
	create_strlit	(0X15F9F,	0X15FA9);
	set_name	(0X15F9F,	"aWindows_0");
	create_byte	(0X15FA9);
	make_array	(0X15FA9,	0X43);
	create_word	(0X15FEC);
	create_strlit	(0X15FF1,	0X15FF9);
	set_name	(0X15FF1,	"aCommand");
	create_byte	(0X15FF9);
	create_strlit	(0X15FFB,	0X16001);
	set_name	(0X15FFB,	"aDY");
	create_byte	(0X16001);
	make_array	(0X16001,	0X8E);
	create_strlit	(0X1608F,	0X16093);
	set_name	(0X1608F,	"aTmp");
	create_strlit	(0X16093,	0X16098);
	set_name	(0X16093,	"aTemp");
	create_strlit	(0X16098,	0X160A4);
	set_name	(0X16098,	"aTempprompt");
	create_strlit	(0X160A4,	0X160A9);
	set_name	(0X160A4,	"aPG");
	create_strlit	(0X160A9,	0X160B4);
	set_name	(0X160A9,	"aWinbootdir_0");
	create_strlit	(0X160B4,	0X160BB);
	set_name	(0X160B4,	"aWindir_0");
	create_strlit	(0X160BB,	0X160C1);
	set_name	(0X160BB,	"aPath_1");
	create_strlit	(0X160C1,	0X160C4);
	set_name	(0X160C1,	"aK");
	create_strlit	(0X160C4,	0X160CD);
	set_name	(0X160C4,	"aNetstart");
	create_strlit	(0X160CD,	0X160DD);
	set_name	(0X160CD,	"aDKAutoexec");
	create_strlit	(0X160DD,	0X160F3);
	set_name	(0X160DD,	"aComspecWnbootng_sts");
	create_byte	(0X160F3);
	create_byte	(0X160F4);
	create_strlit	(0X160F5,	0X16103);
	set_name	(0X160F5,	"aAspi2dos_sys");
	create_strlit	(0X16103,	0X16111);
	set_name	(0X16103,	"aAspi2hlp_sys");
	create_strlit	(0X16111,	0X1611E);
	set_name	(0X16111,	"aDblbuff_sys");
	create_strlit	(0X1611E,	0X16122);
	set_name	(0X1611E,	"aD");
	create_strlit	(0X16122,	0X1612E);
	set_name	(0X16122,	"aIfshlp_sys");
	create_byte	(0X1612E);
	create_strlit	(0X1612F,	0X1613B);
	set_name	(0X1612F,	"aSetver_exe");
	create_strlit	(0X1613B,	0X16144);
	set_name	(0X1613B,	"aEmmxxxx0");
	create_strlit	(0X16144,	0X1614D);
	set_name	(0X16144,	"aQmmxxxx0");
	create_strlit	(0X1614D,	0X16156);
	set_name	(0X1614D,	"aIfsHlp");
	create_strlit	(0X16156,	0X1615F);
	set_name	(0X16156,	"aSetverxx");
	create_strlit	(0X1615F,	0X1616D);
	set_name	(0X1615F,	"aAutoexec_bat");
	create_byte	(0X16187);
	create_byte	(0X16188);
	make_array	(0X16188,	0X5A);
	create_word	(0X161E2);
	create_word	(0X161E4);
	create_dword	(0X161E6);
	create_byte	(0X161EA);
	create_byte	(0X161EB);
	create_strlit	(0X161ED,	0X161F4);
	set_name	(0X161ED,	"aIo_sys");
	create_strlit	(0X161F5,	0X161FF);
	set_name	(0X161F5,	"aMsdos_sys");
	create_strlit	(0X161FF,	0X1620C);
	set_name	(0X161FF,	"aCMsdos_sys");
	create_word	(0X1620C);
	create_strlit	(0X16216,	0X1621E);
	set_name	(0X16216,	"aIo");
	create_strlit	(0X1621E,	0X16222);
	set_name	(0X1621E,	"aDos");
	create_byte	(0X16222);
	make_array	(0X16222,	0X18);
	create_strlit	(0X1623A,	0X16242);
	set_name	(0X1623A,	"aMsdos");
	create_strlit	(0X16242,	0X16245);
	set_name	(0X16242,	"aDos_0");
	create_strlit	(0X16245,	0X16250);
	set_name	(0X16245,	"aIbmbioCom");
	create_strlit	(0X16250,	0X1625B);
	set_name	(0X16250,	"aIbmdosCom");
	create_strlit	(0X1625B,	0X16262);
	set_name	(0X1625B,	"aIo_dos");
	create_strlit	(0X16262,	0X1626D);
	set_name	(0X16262,	"aIbmbio_com");
	create_strlit	(0X1626D,	0X16286);
	set_name	(0X1626D,	"aW40doswosapp");
	create_strlit	(0X16286,	0X16291);
	set_name	(0X16286,	"aConfig_app");
	create_strlit	(0X16291,	0X1629C);
	set_name	(0X16291,	"aConfig_wos");
	create_strlit	(0X1629C,	0X162AC);
	set_name	(0X1629C,	"aCMsdossys_sts");
	create_strlit	(0X162AD,	0X162B9);
	set_name	(0X162AD,	"aCommand_com");
	create_strlit	(0X162BA,	0X162C5);
	set_name	(0X162BA,	"aConfig_sys");
	create_strlit	(0X162C6,	0X162D3);
	set_name	(0X162C6,	"aAutoexec_bat_0");
	create_strlit	(0X162D4,	0X162E1);
	set_name	(0X162D4,	"aDblspace_bin");
	create_strlit	(0X162E2,	0X162EF);
	set_name	(0X162E2,	"aDrvspace_bin");
	create_strlit	(0X1630E,	0X16315);
	set_name	(0X1630E,	"aIo_w40");
	create_strlit	(0X16316,	0X1631D);
	set_name	(0X16316,	"aJo_sys");
	create_strlit	(0X1631E,	0X16328);
	set_name	(0X1631E,	"aMsdos_w40");
	create_strlit	(0X16329,	0X16335);
	set_name	(0X16329,	"aWinboot_ini");
	create_byte	(0X1634B);
	create_byte	(0X1634C);
	create_strlit	(0X1634F,	0X1635C);
	set_name	(0X1634F,	"aCommand_com_0");
	create_byte	(0X1635C);
	make_array	(0X1635C,	0X41);
	create_word	(0X1639D);
	create_byte	(0X1639F);
	create_byte	(0X163A1);
	make_array	(0X163A1,	0X7C);
	create_strlit	(0X1641D,	0X1642A);
	set_name	(0X1641D,	"aCommand_com_1");
	create_byte	(0X1642A);
	make_array	(0X1642A,	0X42);
	create_byte	(0X1646D);
	create_byte	(0X1646F);
	make_array	(0X1646F,	0X7C);
	create_strlit	(0X164EB,	0X164F8);
	set_name	(0X164EB,	"aCommand_com_2");
	create_byte	(0X164F8);
	make_array	(0X164F8,	0X41);
	create_byte	(0X1653B);
	create_byte	(0X1653D);
	make_array	(0X1653D,	0X7C);
	create_strlit	(0X165B9,	0X165C2);
	set_name	(0X165B9,	"aWin_com");
	create_byte	(0X165C2);
	make_array	(0X165C2,	0X46);
	create_byte	(0X16608);
	create_byte	(0X16609);
	make_array	(0X16609,	0X7E);
	create_byte	(0X16687);
	create_byte	(0X16688);
	create_strlit	(0X16689,	0X16697);
	set_name	(0X16689,	"aSafeBoot");
	create_byte	(x=0X16697);
	make_array	(x,	0X3F);
	op_dec		(x,	0);
	create_insn	(0X166D6);
	create_insn	(0X166D9);
	create_insn	(0X166E4);
	create_insn	(x=0X16702);
	op_hex		(x,	1);
	set_cmt	(0X16704,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)",	0);
	create_insn	(x=0X16704);
	op_hex		(x,	0);
	create_insn	(x=0X16706);
	op_hex		(x,	1);
	create_insn	(x=0X16710);
	op_hex		(x,	0);
	create_insn	(x=0X1671B);
	op_hex		(x,	0);
	create_insn	(x=0X16720);
	op_hex		(x,	0);
	create_insn	(x=0X16737);
	op_hex		(x,	1);
	create_insn	(x=0X16741);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1674D);
	op_hex		(x,	1);
	create_insn	(x=0X1675C);
	op_hex		(x,	1);
	create_insn	(x=0X16766);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X16788);
	op_hex		(x,	1);
	create_insn	(x=0X1678C);
	op_hex		(x,	1);
	create_insn	(x=0X1678E);
	op_hex		(x,	1);
	create_insn	(x=0X16798);
	op_hex		(x,	1);
	create_word	(0X1679D);
	create_insn	(0X1679F);
	create_insn	(x=0X167DF);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X167ED);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X16801);
	op_hex		(x,	1);
	set_cmt	(0X16803,	"DOS - GET DEFAULT DISK NUMBER",	0);
	create_insn	(x=0X16803);
	op_hex		(x,	0);
	set_cmt	(0X16822,	"DOS - ",	0);
	create_insn	(x=0X16822);
	op_hex		(x,	0);
	set_cmt	(0X16827,	"DOS - ",	0);
	create_insn	(x=0X16827);
	op_hex		(x,	0);
	create_insn	(x=0X16837);
	op_hex		(x,	1);
	set_cmt	(0X16839,	"DOS - BUFFERED KEYBOARD INPUT\nDS:DX -> buffer",	0);
	create_insn	(x=0X16839);
	op_hex		(x,	0);
	create_insn	(0X1685A);
	create_insn	(0X16884);
	create_insn	(0X1688C);
	create_insn	(x=0X1689D);
	op_hex		(x,	1);
	set_cmt	(0X168A0,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X168A0);
	op_hex		(x,	0);
	create_insn	(x=0X168C0);
	op_hex		(x,	1);
	set_cmt	(0X168C3,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X168C3);
	op_hex		(x,	0);
	create_insn	(x=0X168D2);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X168D8);
	op_hex		(x,	1);
	set_cmt	(0X168DB,	"DOS - ",	0);
	create_insn	(x=0X168DB);
	op_hex		(x,	0);
	create_insn	(x=0X168E9);
	op_hex		(x,	1);
	set_cmt	(0X168EC,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X168EC);
	op_hex		(x,	0);
	create_insn	(0X16901);
	create_insn	(x=0X16905);
	op_hex		(x,	1);
	create_insn	(0X1690A);
	set_cmt	(0X16920,	"- Multiplex - XMS - ",	0);
	create_insn	(x=0X16920);
	op_hex		(x,	0);
	create_insn	(0X16928);
	create_insn	(x=0X1692A);
	op_hex		(x,	1);
	create_insn	(0X16930);
	create_insn	(0X16934);
	create_insn	(x=0X1693A);
	op_hex		(x,	1);
	set_cmt	(0X1693D,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt",	0);
	create_insn	(x=0X1693D);
	op_hex		(x,	0);
	set_cmt	(0X1695F,	"DOS - 2+ - LOAD OR EXECUTE (EXEC)\nDS:DX -> ASCIZ filename\nES:BX -> parameter block\nAL = subfunc: load & execute program",	0);
	create_insn	(x=0X1695F);
	op_hex		(x,	0);
	create_insn	(0X16967);
	create_insn	(x=0X1696F);
	op_hex		(x,	1);
	set_cmt	(0X16971,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X16971);
	op_hex		(x,	0);
	create_insn	(x=0X1698F);
	op_hex		(x,	1);
	set_cmt	(0X1699E,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1699E);
	op_hex		(x,	0);
	create_insn	(x=0X169B3);
	op_hex		(x,	1);
	set_cmt	(0X169B5,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X169B5);
	op_hex		(x,	0);
	create_insn	(x=0X169C7);
	op_hex		(x,	1);
	set_cmt	(0X169CA,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X169CA);
	op_hex		(x,	0);
	create_insn	(x=0X169D4);
	op_hex		(x,	1);
	set_cmt	(0X169D6,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X169D6);
	op_hex		(x,	0);
	create_insn	(x=0X169E3);
	op_hex		(x,	1);
	create_insn	(x=0X169E8);
	op_hex		(x,	1);
	set_cmt	(0X169EB,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X169EB);
	op_hex		(x,	0);
	create_insn	(x=0X169F5);
	op_hex		(x,	1);
	set_cmt	(0X169F7,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X169F7);
	op_hex		(x,	0);
	set_cmt	(0X16A15,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file",	0);
	create_insn	(x=0X16A15);
	op_hex		(x,	0);
	create_insn	(x=0X16A19);
	op_hex		(x,	1);
	set_cmt	(0X16A1B,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X16A1B);
	op_hex		(x,	0);
	create_insn	(x=0X16A27);
	op_hex		(x,	1);
	create_insn	(x=0X16A2A);
	op_hex		(x,	1);
	create_insn	(0X16A38);
	create_insn	(0X16A3E);
	create_insn	(0X16A43);
	create_insn	(0X16A7E);
	create_byte	(0X16A82);
	create_byte	(0X16A83);
	create_insn	(0X16A84);
	create_insn	(x=0X16AC6);
	op_hex		(x,	1);
	set_cmt	(0X16AC9,	"DOS - 7+ SET/CLEAR DOS FLAG (DL = 0 clear, 1 - set)",	0);
	create_insn	(x=0X16AC9);
	op_hex		(x,	0);
	create_insn	(x=0X16ACC);
	op_hex		(x,	1);
	set_cmt	(0X16ACF,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X16ACF);
	op_hex		(x,	0);
	create_insn	(x=0X16AD4);
	op_hex		(x,	1);
	set_cmt	(0X16AD7,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle",	0);
	create_insn	(x=0X16AD7);
	op_hex		(x,	0);
	create_insn	(x=0X16ADB);
	op_hex		(x,	1);
	create_insn	(x=0X16AE1);
	op_hex		(x,	1);
	create_insn	(x=0X16AED);
	op_hex		(x,	1);
	set_cmt	(0X16AF0,	"DOS - 2+ - IOCTL - READ CHARACTER DEVICE CONTROL STRING\nBX = device handle, CX = number of bytes to read DS:DX -> buffer",	0);
	create_insn	(x=0X16AF0);
	op_hex		(x,	0);
	create_insn	(x=0X16B08);
	op_hex		(x,	1);
	set_cmt	(0X16B0B,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X16B0B);
	op_hex		(x,	0);
	create_insn	(0X16B0F);
	create_strlit	(0X16B11,	0X16B21);
	set_name	(0X16B11,	"aIbmThinkpad510");
	create_insn	(0X16B21);
	create_insn	(0X16B58);
	create_insn	(x=0X16B61);
	op_hex		(x,	0);
	create_insn	(x=0X16B6B);
	op_hex		(x,	1);
	create_insn	(0X16B7D);
	create_insn	(0X16B83);
	create_insn	(0X16B90);
	create_insn	(0X16B95);
	create_insn	(0X16B98);
	create_insn	(x=0X16B9C);
	op_hex		(x,	1);
	set_cmt	(0X16B9F,	"DOS - 7+ SET/CLEAR DOS FLAG (DL = 0 clear, 1 - set)",	0);
	create_insn	(x=0X16B9F);
	op_hex		(x,	0);
	create_insn	(x=0X16BA2);
	op_hex		(x,	1);
	set_cmt	(0X16BA5,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X16BA5);
	op_hex		(x,	0);
	create_insn	(x=0X16BAA);
	op_hex		(x,	1);
	set_cmt	(0X16BAC,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X16BAC);
	op_hex		(x,	0);
	create_insn	(0X16BB2);
	create_insn	(x=0X16BB3);
	op_hex		(x,	1);
	set_cmt	(0X16BB5,	"DOS - GET DISK TRANSFER AREA ADDRESS\nReturn: ES:BX -> DTA",	0);
	create_insn	(x=0X16BB5);
	op_hex		(x,	0);
	create_insn	(x=0X16BBF);
	op_hex		(x,	1);
	set_cmt	(0X16BC1,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer",	0);
	create_insn	(x=0X16BC1);
	op_hex		(x,	0);
	create_insn	(x=0X16C0D);
	op_hex		(x,	1);
	set_cmt	(0X16C10,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X16C10);
	op_hex		(x,	0);
	create_insn	(x=0X16C23);
	op_hex		(x,	1);
	set_cmt	(0X16C25,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X16C25);
	op_hex		(x,	0);
	create_insn	(x=0X16C54);
	op_hex		(x,	1);
	create_insn	(0X16C64);
	set_cmt	(0X16C6D,	"Trap to Debugger",	0);
	create_insn	(x=0X16C6D);
	op_hex		(x,	0);
	create_insn	(x=0X16C6F);
	op_hex		(x,	1);
	create_insn	(0X16C76);
	set_cmt	(0X16C7F,	"Trap to Debugger",	0);
	create_insn	(x=0X16C7F);
	op_hex		(x,	0);
	create_insn	(0X16C8A);
	create_insn	(x=0X16C8F);
	op_hex		(x,	1);
	create_insn	(x=0X16C9D);
	op_hex		(x,	1);
	create_insn	(x=0X16CE2);
	op_hex		(x,	1);
	set_cmt	(0X16CE5,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X16CE5);
	op_hex		(x,	0);
	create_insn	(x=0X16CED);
	op_hex		(x,	1);
	create_insn	(x=0X16CF2);
	op_hex		(x,	1);
	create_insn	(x=0X16D20);
	op_hex		(x,	1);
	set_cmt	(0X16D22,	"DOS - 2+ - RENAME A FILE\nDS:DX -> ASCIZ old name (drive and path allowed, no wildcards)\nES:DI -> ASCIZ new name",	0);
	create_insn	(x=0X16D22);
	op_hex		(x,	0);
	create_insn	(x=0X16D2D);
	op_hex		(x,	1);
	set_cmt	(0X16D30,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X16D30);
	op_hex		(x,	0);
	create_insn	(x=0X16D37);
	op_hex		(x,	1);
	set_cmt	(0X16D39,	"DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)\nCX = attributes for file\nDS:DX -> ASCIZ filename (may include drive and path)",	0);
	create_insn	(x=0X16D39);
	op_hex		(x,	0);
	create_insn	(x=0X16D3E);
	op_hex		(x,	1);
	set_cmt	(0X16D40,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X16D40);
	op_hex		(x,	0);
	create_insn	(x=0X16D44);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X16D6E);
	op_hex		(x,	1);
	create_insn	(x=0X16D76);
	op_hex		(x,	1);
	set_cmt	(0X16D78,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)",	0);
	create_insn	(x=0X16D78);
	op_hex		(x,	0);
	create_insn	(0X16D7C);
	create_insn	(x=0X16D7F);
	op_hex		(x,	1);
	set_cmt	(0X16D81,	"DOS - 2+ - RENAME A FILE\nDS:DX -> ASCIZ old name (drive and path allowed, no wildcards)\nES:DI -> ASCIZ new name",	0);
	create_insn	(x=0X16D81);
	op_hex		(x,	0);
	create_insn	(x=0X16D88);
	op_hex		(x,	1);
	create_insn	(x=0X16D8C);
	op_hex		(x,	1);
	set_cmt	(0X16D8F,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X16D8F);
	op_hex		(x,	0);
	create_insn	(x=0X16D9B);
	op_hex		(x,	1);
	set_cmt	(0X16D9E,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file",	0);
	create_insn	(x=0X16D9E);
	op_hex		(x,	0);
	create_insn	(x=0X16DA8);
	op_hex		(x,	1);
	set_cmt	(0X16DAA,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X16DAA);
	op_hex		(x,	0);
	create_insn	(0X16DB1);
	create_insn	(0X16DC4);
	create_insn	(0X16E14);
	create_insn	(0X16E15);
	create_insn	(x=0X16E26);
	op_hex		(x,	1);
	set_cmt	(0X16E28,	"DOS - SEARCH FIRST USING FCB\nDS:DX -> FCB",	0);
	create_insn	(x=0X16E28);
	op_hex		(x,	0);
	create_insn	(0X16E2D);
	create_insn	(0X16E3F);
	create_insn	(0X16E46);
	create_insn	(x=0X16E59);
	op_hex		(x,	1);
	create_insn	(x=0X16E8E);
	op_hex		(x,	1);
	create_insn	(x=0X16E95);
	op_hex		(x,	1);
	create_insn	(0X16E9D);
	create_insn	(0X16EBC);
	create_insn	(0X16F1E);
	create_insn	(x=0X16F23);
	op_hex		(x,	1);
	create_insn	(x=0X16F66);
	op_hex		(x,	1);
	create_insn	(0X16F95);
	create_insn	(x=0X16F96);
	op_hex		(x,	1);
	create_insn	(x=0X16F9D);
	op_hex		(x,	1);
	set_cmt	(0X16FB0,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X16FB0);
	op_hex		(x,	0);
	create_insn	(x=0X16FC5);
	op_hex		(x,	1);
	set_cmt	(0X16FC8,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X16FC8);
	op_hex		(x,	0);
	create_insn	(x=0X17009);
	op_hex		(x,	1);
	create_insn	(x=0X17011);
	op_hex		(x,	1);
	set_cmt	(0X1701E,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1701E);
	op_hex		(x,	0);
	create_insn	(x=0X17027);
	op_hex		(x,	1);
	set_cmt	(0X1702A,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file",	0);
	create_insn	(x=0X1702A);
	op_hex		(x,	0);
	create_insn	(x=0X1702F);
	op_hex		(x,	1);
	set_cmt	(0X17031,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X17031);
	op_hex		(x,	0);
	create_insn	(0X1703B);
	create_insn	(x=0X1703F);
	op_hex		(x,	1);
	create_insn	(x=0X17046);
	op_hex		(x,	1);
	create_insn	(x=0X1704D);
	op_hex		(x,	1);
	set_cmt	(0X17058,	"DOS - SELECT DISK\nDL = new default drive number (0 = A, 1 = B, etc.)\nReturn: AL = number of logical drives",	0);
	create_insn	(x=0X17058);
	op_hex		(x,	0);
	create_insn	(0X17088);
	create_insn	(x=0X1708B);
	op_hex		(x,	1);
	create_insn	(x=0X170B1);
	op_hex		(x,	1);
	set_cmt	(0X170B3,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer",	0);
	create_insn	(x=0X170B3);
	op_hex		(x,	0);
	set_cmt	(0X170DB,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)",	0);
	create_insn	(x=0X170DB);
	op_hex		(x,	0);
	create_insn	(x=0X170E4);
	op_hex		(x,	1);
	create_insn	(x=0X170EE);
	op_hex		(x,	1);
	set_cmt	(0X170F0,	"DOS - 2+ - CREATE A SUBDIRECTORY (MKDIR)\nDS:DX -> ASCIZ pathname (may include drive)",	0);
	create_insn	(x=0X170F0);
	op_hex		(x,	0);
	create_insn	(0X1710E);
	create_insn	(0X171BD);
	create_insn	(0X1720B);
	create_insn	(x=0X17212);
	op_hex		(x,	1);
	create_insn	(x=0X17219);
	op_hex		(x,	1);
	create_insn	(0X1723E);
	create_insn	(x=0X17245);
	op_hex		(x,	1);
	create_insn	(x=0X1724C);
	op_hex		(x,	1);
	create_insn	(0X1725B);
	create_insn	(0X17280);
	create_insn	(x=0X17283);
	op_hex		(x,	1);
	create_insn	(x=0X1728C);
	op_hex		(x,	1);
	create_insn	(x=0X1729D);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X172BA);
	create_insn	(x=0X172DE);
	op_hex		(x,	1);
	set_cmt	(0X172E1,	"DOS - ",	0);
	create_insn	(x=0X172E1);
	op_hex		(x,	0);
	create_insn	(x=0X172FA);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X17303);
	create_insn	(x=0X1731A);
	op_hex		(x,	1);
	set_cmt	(0X1731D,	"DOS - ",	0);
	create_insn	(x=0X1731D);
	op_hex		(x,	0);
	create_insn	(x=0X17344);
	op_hex		(x,	1);
	set_cmt	(0X17347,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X17347);
	op_hex		(x,	0);
	create_insn	(x=0X1734B);
	op_hex		(x,	1);
	set_cmt	(0X1734D,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)",	0);
	create_insn	(x=0X1734D);
	op_hex		(x,	0);
	create_insn	(x=0X17356);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X17361);
	create_insn	(x=0X17364);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X17372);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X17380);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X17395);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X173A3);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X173B1);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X173BF);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X173CA);
	op_hex		(x,	1);
	create_insn	(0X173EF);
	create_insn	(0X17446);
	create_insn	(x=0X1744B);
	op_hex		(x,	1);
	create_insn	(x=0X17450);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X17459);
	create_insn	(x=0X1745E);
	op_hex		(x,	1);
	create_insn	(x=0X17463);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X1746C);
	create_insn	(x=0X17471);
	op_hex		(x,	1);
	create_insn	(x=0X17476);
	op_hex		(x,	1);
	create_insn	(x=0X1747B);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X17484);
	create_insn	(x=0X17489);
	op_hex		(x,	1);
	create_insn	(x=0X17490);
	op_hex		(x,	1);
	create_insn	(x=0X17495);
	op_hex		(x,	1);
	create_insn	(x=0X1749C);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X174A5);
	op_hex		(x,	1);
	create_insn	(x=0X174AC);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X174D5,	"- VIDEO - SET COLOR PALETTE\nBH = 00h, BL = border color\nBH = 01h, BL = palette (0-3)",	0);
	create_insn	(x=0X174D5);
	op_hex		(x,	0);
	set_cmt	(0X174E0,	"- VIDEO - SCROLL PAGE UP\nAL = number of lines to scroll window (0 = blank whole window)\nBH = attributes to be used on blanked lines\nCH,CL = row,column of upper left corner of window to scroll\nDH,DL = row,column of lower right corner of window",	0);
	create_insn	(x=0X174E0);
	op_hex		(x,	0);
	set_cmt	(0X174E4,	"- VIDEO - GET CURRENT VIDEO MODE\nReturn: AH = number of columns on screen\nAL = current video mode\nBH = current active display page",	0);
	create_insn	(x=0X174E4);
	op_hex		(x,	0);
	set_cmt	(0X174EA,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ",	0);
	create_insn	(x=0X174EA);
	op_hex		(x,	0);
	set_cmt	(0X174EE,	"KEYBOARD - GET SHIFT STATUS\nAL = shift status bits",	0);
	create_insn	(x=0X174EE);
	op_hex		(x,	0);
	set_cmt	(0X174F2,	"KEYBOARD - CHECK BUFFER, DO NOT CLEAR\nReturn: ZF clear if character in buffer\nAH = scan code, AL = character\nZF set if no character in buffer",	0);
	create_insn	(x=0X174F2);
	op_hex		(x,	0);
	set_cmt	(0X174F8,	"KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY\nReturn: AH = scan code, AL = character",	0);
	create_insn	(x=0X174F8);
	op_hex		(x,	0);
	create_insn	(0X174FC);
	create_byte	(0X17512);
	make_array	(0X17512,	0X106);
	create_word	(0X17618);
	create_strlit	(0X1761A,	0X17621);
	set_name	(0X1761A,	"aPaths");
	create_word	(0X17622);
	create_strlit	(0X17624,	0X1762D);
	set_name	(0X17624,	"aOptions");
	create_word	(0X1762E);
	create_word	(0X17631);
	create_strlit	(0X17633,	0X17639);
	set_name	(0X17633,	"aWindir");
	create_word	(0X1763A);
	create_strlit	(0X1763C,	0X17646);
	set_name	(0X1763C,	"aWinbootdir");
	create_word	(0X17647);
	create_strlit	(0X17649,	0X17657);
	set_name	(0X17649,	"aHostwinbootdrv");
	create_word	(0X17658);
	create_strlit	(0X1765A,	0X17666);
	set_name	(0X1765A,	"aUninstalldir");
	create_word	(0X17667);
	create_word	(0X1766A);
	create_strlit	(0X1766C,	0X17670);
	set_name	(0X1766C,	"aLogo");
	create_strlit	(0X17673,	0X1767B);
	set_name	(0X17673,	"aDblspace");
	create_strlit	(0X1767E,	0X17686);
	set_name	(0X1767E,	"aDrvspace");
	create_strlit	(0X17689,	0X17691);
	set_name	(0X17689,	"aBootkeys");
	create_strlit	(0X17694,	0X1769D);
	set_name	(0X17694,	"aBootdelay");
	create_word	(0X1769E);
	create_strlit	(0X176A0,	0X176A7);
	set_name	(0X176A0,	"aBootwin");
	create_strlit	(0X176AA,	0X176B1);
	set_name	(0X176AA,	"aBootgui");
	create_strlit	(0X176B4,	0X176BC);
	set_name	(0X176B4,	"aBootwarn");
	create_strlit	(0X176BF,	0X176C8);
	set_name	(0X176BF,	"aBootmulti");
	create_strlit	(0X176CB,	0X176D7);
	set_name	(0X176CB,	"aDoublebuffer");
	create_word	(0X176D8);
	create_strlit	(0X176DA,	0X176E9);
	set_name	(0X176DA,	"aBootmenudefault");
	create_word	(0X176EA);
	create_strlit	(0X176EC,	0X176F9);
	set_name	(0X176EC,	"aBootmenudelay");
	create_word	(0X176FA);
	create_strlit	(0X176FC,	0X17704);
	set_name	(0X176FC,	"aBootmenu");
	create_word	(0X17705);
	create_strlit	(0X17707,	0X1770F);
	set_name	(0X17707,	"aBootsafe");
	create_strlit	(0X17712,	0X17719);
	set_name	(0X17712,	"aNetwork");
	create_word	(0X1771A);
	create_strlit	(0X1771C,	0X17723);
	set_name	(0X1771C,	"aLoadtop");
	create_strlit	(0X17726,	0X17730);
	set_name	(0X17726,	"aBootconfig");
	create_word	(0X17731);
	create_strlit	(0X17733,	0X1773D);
	set_name	(0X17733,	"aDisablelog");
	create_word	(0X1773E);
	create_strlit	(0X17740,	0X17749);
	set_name	(0X17740,	"aSystemreg");
	create_strlit	(0X1774C,	0X17755);
	set_name	(0X1774C,	"aAutoscan");
	create_word	(0X17755);
	create_strlit	(0X17757,	0X1775E);
	set_name	(0X17757,	"aWinver");
	create_word	(0X1775E);
	create_strlit	(0X17760,	0X17769);
	set_name	(0X17760,	"aBootperf");
	create_word	(0X17769);
	create_word	(0X1776C);
	create_insn	(0X1776E);
	create_insn	(x=0X17777);
	op_hex		(x,	1);
	set_cmt	(0X1777A,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1777A);
	op_hex		(x,	0);
	create_insn	(x=0X1777E);
	op_hex		(x,	1);
	create_insn	(0X17785);
	create_insn	(x=0X1778D);
	op_hex		(x,	1);
	set_cmt	(0X17790,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X17790);
	op_hex		(x,	0);
	create_insn	(x=0X1779C);
	op_hex		(x,	1);
	set_cmt	(0X1779F,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1779F);
	op_hex		(x,	0);
	create_insn	(x=0X177A6);
	op_hex		(x,	1);
	set_cmt	(0X177A9,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X177A9);
	op_hex		(x,	0);
	create_insn	(x=0X177B9);
	op_hex		(x,	1);
	create_insn	(x=0X177D9);
	op_hex		(x,	1);
	set_cmt	(0X177DC,	"DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)",	0);
	create_insn	(x=0X177DC);
	op_hex		(x,	0);
	create_insn	(x=0X177EE);
	op_hex		(x,	1);
	create_insn	(0X177FC);
	create_insn	(0X17814);
	create_insn	(0X17823);
	create_insn	(0X17832);
	create_insn	(0X1783A);
	create_insn	(0X1783B);
	create_insn	(0X17851);
	create_insn	(x=0X17863);
	op_hex		(x,	1);
	set_cmt	(0X17865,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X17865);
	op_hex		(x,	0);
	create_insn	(x=0X17868);
	op_hex		(x,	1);
	create_insn	(x=0X17871);
	op_hex		(x,	1);
	create_insn	(0X17878);
	create_insn	(x=0X1787C);
	op_hex		(x,	1);
	create_insn	(0X17884);
	create_insn	(0X1788A);
	create_insn	(0X1789E);
	create_insn	(0X178AC);
	create_insn	(x=0X178AF);
	op_hex		(x,	1);
	create_insn	(0X178B5);
	create_insn	(0X178BC);
	create_insn	(0X178C3);
	create_insn	(x=0X178C5);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	set_cmt	(0X178CC,	"DOS - PRINT STRING\nDS:DX -> string terminated by \"$\"",	0);
	create_insn	(x=0X178CC);
	op_hex		(x,	0);
	create_insn	(x=0X178D4);
	op_hex		(x,	1);
	set_cmt	(0X178D6,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X178D6);
	op_hex		(x,	0);
	create_insn	(x=0X178DF);
	op_hex		(x,	1);
	set_cmt	(0X178E1,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X178E1);
	op_hex		(x,	0);
	create_insn	(0X178E4);
	set_cmt	(0X178EA,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X178EA);
	op_hex		(x,	0);
	create_insn	(0X178F0);
	create_insn	(x=0X178F8);
	op_hex		(x,	1);
	create_insn	(x=0X178FD);
	op_hex		(x,	1);
	set_cmt	(0X178FF,	"DOS - GET DEFAULT DISK NUMBER",	0);
	create_insn	(x=0X178FF);
	op_hex		(x,	0);
	create_insn	(x=0X1790D);
	op_hex		(x,	1);
	create_insn	(x=0X1796E);
	op_hex		(x,	1);
	create_insn	(x=0X17975);
	op_hex		(x,	1);
	create_insn	(x=0X179D0);
	op_hex		(x,	1);
	create_insn	(x=0X179D7);
	op_hex		(x,	1);
	set_cmt	(0X179DA,	"DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)",	0);
	create_insn	(x=0X179DA);
	op_hex		(x,	0);
	create_insn	(x=0X179E2);
	op_hex		(x,	1);
	set_cmt	(0X179E5,	"DOS - ",	0);
	create_insn	(x=0X179E5);
	op_hex		(x,	0);
	create_insn	(x=0X179EF);
	op_hex		(x,	1);
	create_insn	(0X179F5);
	create_insn	(0X17A28);
	create_insn	(0X17A3C);
	create_insn	(x=0X17A50);
	op_hex		(x,	1);
	set_cmt	(0X17A52,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X17A52);
	op_hex		(x,	0);
	create_insn	(0X17A74);
	create_insn	(0X17A78);
	create_insn	(0X17A93);
	create_insn	(0X17A96);
	create_insn	(0X17AB0);
	create_insn	(x=0X17AD2);
	op_hex		(x,	1);
	create_insn	(x=0X17AD8);
	op_hex		(x,	1);
	create_insn	(0X17AE3);
	create_insn	(0X17AE5);
	create_insn	(0X17AF2);
	create_insn	(0X17B25);
	create_insn	(0X17B2C);
	create_insn	(0X17B31);
	create_dword	(0X17B3C);
	create_word	(0X17B40);
	set_name	(0X17B40,	"config_envlen");
	create_word	(0X17B42);
	set_name	(0X17B42,	"config_wrkseg");
	create_byte	(0X17B44);
	create_word	(0X17B45);
	create_byte	(0X17B47);
	create_byte	(0X17B48);
	create_word	(0X17B49);
	create_word	(0X17B4B);
	create_word	(0X17B4D);
	create_word	(0X17B4F);
	create_word	(0X17B51);
	create_word	(0X17B53);
	create_word	(0X17B55);
	create_byte	(0X17B57);
	create_word	(0X17B58);
	create_word	(0X17B5A);
	create_word	(0X17B5C);
	create_word	(0X17B5E);
	create_word	(0X17B60);
	create_word	(0X17B62);
	create_word	(0X17B64);
	create_byte	(0X17B66);
	make_array	(0X17B66,	0X109);
	create_word	(0X17C6F);
	create_word	(0X17C71);
	create_word	(0X17C73);
	create_word	(0X17C75);
	create_byte	(0X17C78);
	create_insn	(0X17C79);
	create_insn	(0X17CCF);
	create_insn	(x=0X17CDB);
	op_hex		(x,	1);
	create_insn	(x=0X17CF3);
	op_hex		(x,	1);
	create_insn	(x=0X17D00);
	op_hex		(x,	1);
	create_insn	(0X17D0B);
	create_insn	(x=0X17D12);
	op_hex		(x,	1);
	create_insn	(0X17D25);
	create_insn	(x=0X17D47);
	op_hex		(x,	1);
	create_insn	(x=0X17D60);
	op_hex		(x,	1);
	create_insn	(0X17D6E);
	create_insn	(0X17D77);
	create_insn	(x=0X17D7E);
	op_hex		(x,	1);
	create_insn	(0X17DA3);
	create_insn	(x=0X17DAA);
	op_hex		(x,	1);
	create_insn	(x=0X17DB3);
	op_hex		(x,	1);
	create_insn	(0X17DF4);
	create_insn	(x=0X17DF8);
	op_hex		(x,	1);
	create_insn	(x=0X17E08);
	op_hex		(x,	1);
	create_insn	(0X17E16);
	create_insn	(0X17E21);
	create_insn	(0X17E26);
	create_insn	(0X17E28);
	create_insn	(0X17E44);
	create_insn	(0X17E4D);
	create_insn	(0X17E57);
	create_insn	(x=0X17E59);
	op_hex		(x,	1);
	create_insn	(x=0X17E64);
	op_hex		(x,	1);
	create_insn	(0X17E92);
	create_insn	(x=0X17E98);
	op_hex		(x,	1);
	create_insn	(0X17EA8);
	create_insn	(0X17EAE);
	create_insn	(0X17EB1);
	create_insn	(0X17EBC);
	create_insn	(0X17EE5);
	create_insn	(0X17EEF);
	create_insn	(0X17F01);
	create_insn	(0X17F14);
	create_insn	(x=0X17F1D);
	op_hex		(x,	1);
	create_insn	(x=0X17F28);
	op_hex		(x,	1);
	create_insn	(x=0X17F35);
	op_hex		(x,	1);
	create_insn	(0X17F41);
	create_insn	(0X17F67);
	create_insn	(0X17F69);
	create_insn	(x=0X17F6B);
	op_hex		(x,	1);
	create_insn	(x=0X17F82);
	op_hex		(x,	1);
	create_insn	(x=0X17F99);
	op_hex		(x,	1);
	create_insn	(x=0X17FB3);
	op_hex		(x,	1);
	create_insn	(x=0X17FCA);
	op_hex		(x,	1);
	create_insn	(0X17FF2);
	create_insn	(0X1800C);
	create_insn	(0X18015);
	create_insn	(0X18018);
	create_insn	(0X18030);
	create_insn	(0X18034);
	create_insn	(0X18037);
	create_insn	(x=0X18043);
	op_hex		(x,	1);
	create_insn	(0X18047);
	set_cmt	(0X18065,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ",	0);
	create_insn	(x=0X18065);
	op_hex		(x,	0);
	create_insn	(0X1807C);
	create_insn	(x=0X1807D);
	op_hex		(x,	1);
	create_insn	(x=0X18083);
	op_hex		(x,	1);
	create_insn	(x=0X18094);
	op_hex		(x,	1);
	create_insn	(0X180A0);
	create_insn	(x=0X180B9);
	op_hex		(x,	1);
	create_insn	(x=0X180BB);
	op_hex		(x,	1);
	create_insn	(x=0X180C6);
	op_hex		(x,	1);
	create_insn	(x=0X180C8);
	op_hex		(x,	1);
	create_insn	(x=0X180CF);
	op_hex		(x,	1);
	create_insn	(x=0X180D1);
	op_hex		(x,	1);
	create_insn	(0X180EE);
	create_insn	(0X180F2);
	create_insn	(x=0X180F3);
	op_hex		(x,	1);
	create_insn	(0X18116);
	create_insn	(x=0X1811F);
	op_hex		(x,	1);
	create_insn	(0X18145);
	create_insn	(0X18163);
	create_insn	(0X18177);
	create_insn	(0X1817E);
	create_insn	(0X18191);
	create_insn	(x=0X18192);
	op_hex		(x,	1);
	create_insn	(0X1819C);
	create_insn	(0X181A1);
	create_insn	(0X181A3);
	create_insn	(0X181AF);
	create_insn	(0X181B1);
	create_insn	(0X181C4);
	create_insn	(0X181FC);
	create_insn	(0X18207);
	create_insn	(0X1821A);
	create_insn	(x=0X1822B);
	op_hex		(x,	1);
	create_insn	(x=0X18240);
	op_hex		(x,	1);
	create_insn	(0X18256);
	create_insn	(0X18264);
	create_insn	(x=0X18279);
	op_hex		(x,	1);
	create_insn	(x=0X18281);
	op_hex		(x,	1);
	create_insn	(x=0X18290);
	op_hex		(x,	1);
	create_insn	(0X182A4);
	create_insn	(0X182B2);
	create_insn	(0X182BD);
	create_insn	(0X182DF);
	create_insn	(x=0X182E5);
	op_hex		(x,	1);
	create_insn	(0X182F5);
	create_insn	(0X1830E);
	create_insn	(x=0X1831F);
	op_hex		(x,	1);
	create_insn	(0X1832E);
	create_insn	(0X18343);
	create_insn	(x=0X18358);
	op_hex		(x,	1);
	create_insn	(x=0X18366);
	op_hex		(x,	1);
	create_insn	(0X1837D);
	create_insn	(0X18387);
	create_insn	(x=0X18392);
	op_hex		(x,	1);
	create_insn	(x=0X1839A);
	op_hex		(x,	1);
	create_insn	(0X183A5);
	create_insn	(0X183A8);
	create_insn	(0X183AB);
	create_insn	(0X183AD);
	create_insn	(0X183E3);
	create_insn	(x=0X183EB);
	op_hex		(x,	1);
	create_insn	(0X1840D);
	create_insn	(0X1842E);
	create_insn	(x=0X18432);
	op_hex		(x,	1);
	create_insn	(x=0X1843A);
	op_hex		(x,	1);
	create_insn	(0X18444);
	create_insn	(0X18453);
	create_insn	(0X18456);
	create_insn	(x=0X1845A);
	op_hex		(x,	1);
	create_insn	(0X18462);
	create_insn	(x=0X18478);
	op_hex		(x,	1);
	set_cmt	(0X1847B,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE",	0);
	create_insn	(x=0X1847B);
	op_hex		(x,	0);
	create_insn	(0X184AF);
	create_insn	(0X184B3);
	create_word	(x=0X184DF);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X184E1);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X184E4);
	set_name	(0X184E4,	"buf_range_2");
	create_byte	(0X184E5);
	create_byte	(0X184E6);
	create_dword	(0X184E7);
	create_dword	(0X184EB);
	create_word	(0X184EF);
	set_name	(0X184EF,	"sw_x_ctrl");
	create_word	(0X184F1);
	create_word	(x=0X184F3);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X184F5);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X184F7);
	create_strlit	(0X184F8,	0X184FB);
	set_name	(0X184F8,	"switch_x");
	create_word	(0X184FB);
	set_name	(0X184FB,	"p_h_buffers");
	create_word	(0X184FD);
	create_byte	(0X184FF);
	create_byte	(0X18500);
	set_name	(0X18500,	"p_buffer_slash_x");
	create_byte	(0X18501);
	set_name	(0X18501,	"noval");
	create_byte	(0X18502);
	set_name	(0X18502,	"result_val");
	create_byte	(0X18503);
	set_name	(0X18503,	"result_val_itag");
	create_word	(0X18504);
	set_name	(0X18504,	"result_val_swoff");
	create_dword	(0X18506);
	set_name	(0X18506,	"rv_dword");
	create_word	(0X1850A);
	create_byte	(0X1851E);
	create_byte	(0X1851F);
	create_byte	(0X18520);
	create_byte	(0X18521);
	create_byte	(0X18522);
	create_word	(x=0X18523);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X18525);
	create_word	(x=0X18526);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_strlit	(0X18528,	0X1852B);
	set_name	(0X18528,	"_on_string");
	create_strlit	(0X1852B,	0X1852F);
	set_name	(0X1852B,	"_off_string");
	create_word	(0X18572);
	create_word	(0X18574);
	create_byte	(0X18595);
	create_byte	(0X18596);
	create_byte	(0X185CC);
	create_byte	(0X185CD);
	create_byte	(0X185CE);
	create_byte	(0X185E3);
	create_byte	(0X185E4);
	create_word	(0X1861A);
	create_word	(0X1861C);
	create_byte	(0X1861E);
	create_word	(0X1861F);
	create_word	(0X18626);
	create_word	(0X1862E);
	create_word	(0X18630);
	create_byte	(0X18633);
	create_word	(0X18634);
	create_word	(x=0X1863C);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X1863E);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18640);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18642);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18644);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18646);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18648);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X1864A);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(0X18651);
	create_word	(0X18653);
	create_word	(0X18656);
	create_word	(0X1865D);
	create_word	(0X1865F);
	create_word	(0X18669);
	create_word	(0X1866B);
	create_word	(x=0X18675);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18677);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X1867A);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18681);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18683);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18686);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X1868D);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X1868F);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X18692);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X18699);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X1869B);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X1869E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X186A5);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X186A7);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X186AA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X186AD);
	create_byte	(0X186AE);
	create_byte	(0X186AF);
	create_byte	(0X186B0);
	create_byte	(0X186B2);
	create_word	(x=0X186B3);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X186BA);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X186BC);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X186BE);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(0X186C2);
	create_word	(x=0X186C6);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_word	(x=0X186C8);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X186CB);
	set_name	(0X186CB,	"dos_strings");
	create_byte	(0X186CC);
	create_byte	(0X186CD);
	create_byte	(0X186CE);
	create_byte	(0X186CF);
	create_word	(x=0X186D0);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X186D2);
	create_word	(x=0X186D3);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X186D5);
	create_word	(x=0X186D6);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X186D8);
	create_word	(x=0X186D9);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X186DB);
	create_word	(x=0X186DC);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X186DE);
	create_word	(x=0X186DF);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_byte	(0X186E1);
	create_word	(x=0X186E2);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_strlit	(0X186E4,	0X186E9);
	set_name	(0X186E4,	"hi_string");
	create_strlit	(0X186E9,	0X186ED);
	set_name	(0X186E9,	"lo_string");
	create_strlit	(0X186ED,	0X186F1);
	set_name	(0X186ED,	"umb_string");
	create_strlit	(0X186F1,	0X186F7);
	set_name	(0X186F1,	"noumb_string");
	create_strlit	(0X186F7,	0X186FC);
	set_name	(0X186F7,	"auto_string");
	create_strlit	(0X186FC,	0X18703);
	set_name	(0X186FC,	"noauto_string");
	create_strlit	(0X18703,	0X1870A);
	set_name	(0X18703,	"single_string");
	create_byte	(0X1870A);
	create_byte	(0X1870B);
	create_word	(0X1870C);
	create_byte	(0X1870E);
	create_byte	(0X1870F);
	make_array	(0X1870F,	0X30);
	create_byte	(0X1873F);
	create_byte	(0X18741);
	create_word	(0X18742);
	create_word	(0X18744);
	create_word	(0X18746);
	create_dword	(0X18748);
	create_dword	(0X1874C);
	create_byte	(0X18750);
	create_byte	(0X18751);
	create_byte	(0X18752);
	create_word	(0X18753);
	create_word	(0X18755);
	create_word	(0X18757);
	create_dword	(0X18759);
	create_word	(0X1875D);
	create_word	(0X1875F);
	create_byte	(0X18761);
	create_word	(0X18762);
	create_byte	(0X18764);
	create_word	(0X18765);
	create_strlit	(0X18767,	0X1876F);
	set_name	(0X18767,	"aProtman");
	create_strlit	(0X1876F,	0X18777);
	set_name	(0X1876F,	"aAtivideo");
	create_strlit	(0X18777,	0X1877F);
	set_name	(0X18777,	"aQemm386");
	create_strlit	(0X1877F,	0X18785);
	set_name	(0X1877F,	"aQlodr");
	create_strlit	(0X18785,	0X18793);
	set_name	(0X18785,	"a10?stacCdprot");
	create_word	(0X18793);
	create_word	(0X18795);
	create_word	(0X18797);
	create_word	(0X18799);
	create_byte	(0X1879B);
	create_word	(0X1879C);
	create_word	(0X1879E);
	create_word	(0X187A0);
	create_byte	(0X187A2);
	create_dword	(0X187A3);
	create_word	(0X187A7);
	create_word	(0X187B4);
	create_word	(0X187DB);
	create_word	(0X187E5);
	create_word	(0X187E7);
	create_word	(0X1889A);
	create_word	(0X1889C);
	create_dword	(0X1889E);
	create_byte	(0X188B2);
	create_word	(0X188B3);
	create_word	(0X188B5);
	create_word	(0X188B7);
	create_insn	(0X188B9);
	set_cmt	(0X188C2,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X188C2);
	op_hex		(x,	0);
	create_insn	(x=0X188DF);
	op_hex		(x,	1);
	set_cmt	(0X188E2,	"DOS - 2+ internal - GET SWITCHAR/AVAILDEV\nReturn: AL = FFh unsupported subfunction\nDL = current switch character",	0);
	create_insn	(x=0X188E2);
	op_hex		(x,	0);
	create_insn	(0X188E9);
	create_insn	(x=0X188EE);
	op_hex		(x,	1);
	set_cmt	(0X188F1,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file",	0);
	create_insn	(x=0X188F1);
	op_hex		(x,	0);
	create_insn	(x=0X188F7);
	op_hex		(x,	1);
	create_insn	(x=0X188FC);
	op_hex		(x,	1);
	create_insn	(x=0X18914);
	op_hex		(x,	1);
	set_cmt	(0X18916,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X18916);
	op_hex		(x,	0);
	create_insn	(0X1891A);
	create_insn	(x=0X18921);
	op_hex		(x,	1);
	set_cmt	(0X18924,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X18924);
	op_hex		(x,	0);
	set_cmt	(0X18961,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X18961);
	op_hex		(x,	0);
	create_insn	(x=0X18987);
	op_hex		(x,	1);
	set_cmt	(0X1898A,	"DOS - 2+ - GET FILE'S DATE/TIME\nBX = file handle",	0);
	create_insn	(x=0X1898A);
	op_hex		(x,	0);
	create_insn	(x=0X18996);
	op_hex		(x,	1);
	set_cmt	(0X18998,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X18998);
	op_hex		(x,	0);
	create_insn	(0X189A9);
	set_name	(0X189A9,	"multi_pass");
	create_insn	(0X189CE);
	create_insn	(x=0X189E6);
	op_hex		(x,	1);
	create_insn	(x=0X18A05);
	op_hex		(x,	1);
	create_insn	(0X18A27);
	create_insn	(0X18A2E);
	create_insn	(0X18A33);
	create_insn	(0X18A49);
	create_insn	(0X18A4F);
	create_insn	(x=0X18A7C);
	op_hex		(x,	1);
	create_insn	(0X18A83);
	create_insn	(0X18A8B);
	create_insn	(0X18A93);
	create_insn	(0X18AA2);
	create_insn	(x=0X18AAC);
	op_hex		(x,	1);
	set_cmt	(0X18AAF,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: get allocation strategy",	0);
	create_insn	(x=0X18AAF);
	op_hex		(x,	0);
	create_insn	(x=0X18AB4);
	op_hex		(x,	1);
	create_insn	(x=0X18AB8);
	op_hex		(x,	1);
	set_cmt	(0X18ABB,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy",	0);
	create_insn	(x=0X18ABB);
	op_hex		(x,	0);
	create_insn	(x=0X18ABD);
	op_hex		(x,	1);
	set_cmt	(0X18AC0,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) get UMB link state",	0);
	create_insn	(x=0X18AC0);
	op_hex		(x,	0);
	set_cmt	(0X18ACB,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state",	0);
	create_insn	(x=0X18ACB);
	op_hex		(x,	0);
	set_cmt	(0X18AD4,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state",	0);
	create_insn	(x=0X18AD4);
	op_hex		(x,	0);
	create_insn	(x=0X18AD7);
	op_hex		(x,	1);
	set_cmt	(0X18ADA,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy",	0);
	create_insn	(x=0X18ADA);
	op_hex		(x,	0);
	create_insn	(0X18ADF);
	create_insn	(0X18AFE);
	create_insn	(0X18B09);
	create_insn	(x=0X18B1E);
	op_hex		(x,	1);
	create_insn	(x=0X18B33);
	op_hex		(x,	1);
	create_insn	(0X18B38);
	create_insn	(x=0X18B3C);
	op_hex		(x,	1);
	create_insn	(0X18B41);
	create_insn	(0X18B44);
	create_insn	(0X18B64);
	create_insn	(0X18B7E);
	create_insn	(0X18B83);
	create_insn	(0X18B95);
	create_insn	(0X18BAA);
	create_insn	(0X18BBB);
	create_insn	(0X18BD6);
	create_insn	(0X18BE9);
	create_insn	(0X18BF0);
	set_cmt	(0X18BF8,	"DOS - EXTENDED CONTROL-BREAK CHECKING\nAL = 00h get state / 01h set state / 02h set AND get\nDL = 00h for OFF or 01h for ON",	0);
	create_insn	(x=0X18BF8);
	op_hex		(x,	0);
	create_insn	(0X18BFD);
	create_insn	(0X18C1C);
	create_insn	(0X18C2F);
	create_insn	(0X18C36);
	create_insn	(x=0X18C3C);
	op_hex		(x,	1);
	create_insn	(x=0X18C4A);
	op_hex		(x,	1);
	create_insn	(0X18C54);
	create_insn	(0X18C6F);
	create_insn	(0X18C79);
	create_insn	(0X18C7C);
	create_insn	(0X18C97);
	create_insn	(0X18CAB);
	create_insn	(0X18CBA);
	create_insn	(0X18CC9);
	create_insn	(0X18CD8);
	create_insn	(x=0X18CF0);
	op_hex		(x,	1);
	create_insn	(0X18CF7);
	create_insn	(0X18CFF);
	create_insn	(0X18D1F);
	create_insn	(0X18D49);
	create_insn	(0X18D66);
	create_insn	(0X18D7B);
	create_insn	(0X18D92);
	create_insn	(0X18DA8);
	create_insn	(0X18DB0);
	create_insn	(x=0X18DB8);
	op_hex		(x,	1);
	create_insn	(0X18DD3);
	create_insn	(x=0X18DF8);
	op_hex		(x,	1);
	create_insn	(x=0X18DFF);
	op_hex		(x,	1);
	create_insn	(x=0X18E34);
	op_hex		(x,	1);
	create_insn	(0X18E6E);
	create_insn	(0X18E77);
	create_insn	(0X18E7D);
	create_insn	(x=0X18EA0);
	op_hex		(x,	1);
	create_insn	(0X18EBC);
	create_insn	(x=0X18EEE);
	op_hex		(x,	1);
	create_insn	(x=0X18F30);
	op_hex		(x,	1);
	create_insn	(0X18F57);
	create_insn	(x=0X18F61);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(0X18F92);
	create_insn	(0X18FA2);
	create_insn	(x=0X18FB1);
	op_hex		(x,	1);
	create_insn	(x=0X18FBB);
	op_hex		(x,	1);
	create_insn	(x=0X18FC8);
	op_hex		(x,	1);
	create_insn	(0X18FD8);
	create_insn	(0X18FFF);
	create_insn	(0X19028);
	create_insn	(x=0X19081);
	op_hex		(x,	1);
	set_cmt	(0X19083,	"DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK\nDS:SI -> BPB (BIOS Parameter Block)\nES:BP -> buffer for DOS Drive Parameter Block",	0);
	create_insn	(x=0X19083);
	op_hex		(x,	0);
	create_insn	(x=0X190D7);
	op_hex		(x,	1);
	create_insn	(x=0X190EE);
	op_hex		(x,	1);
	create_insn	(0X19117);
	create_insn	(0X1911C);
	create_insn	(0X1912E);
	set_name	(0X1912E,	"nullsub_16");
	create_insn	(0X1912F);
	create_insn	(x=0X19150);
	op_hex		(x,	1);
	set_cmt	(0X19152,	"DOS - DISK RESET",	0);
	create_insn	(x=0X19152);
	op_hex		(x,	0);
	create_insn	(0X1917E);
	create_insn	(0X191A5);
	create_insn	(0X191AD);
	create_insn	(0X191D7);
	create_insn	(0X191F3);
	create_insn	(0X191F9);
	create_insn	(0X19210);
	create_insn	(0X1921B);
	create_insn	(0X19227);
	create_insn	(0X19234);
	set_cmt	(0X1923B,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1923B);
	op_hex		(x,	0);
	create_insn	(0X19297);
	create_insn	(0X192A6);
	create_insn	(x=0X192C4);
	op_hex		(x,	1);
	set_cmt	(0X192C6,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X192C6);
	op_hex		(x,	0);
	create_insn	(0X192CB);
	create_insn	(0X192DA);
	create_insn	(0X192E9);
	create_insn	(0X19304);
	create_insn	(0X19313);
	create_insn	(0X1931E);
	create_insn	(0X19330);
	create_insn	(0X19350);
	create_insn	(0X1935F);
	create_insn	(0X1936A);
	create_insn	(0X1938A);
	create_insn	(0X1939A);
	create_insn	(0X193AC);
	create_insn	(0X193CD);
	create_insn	(0X193DA);
	create_insn	(0X19411);
	create_insn	(0X19417);
	create_insn	(0X19438);
	create_insn	(0X1946C);
	create_insn	(0X19486);
	create_insn	(0X194C0);
	create_insn	(0X194F0);
	create_insn	(0X1950B);
	create_insn	(0X1951F);
	create_insn	(0X19525);
	create_insn	(0X19530);
	create_insn	(0X19542);
	create_insn	(0X19549);
	create_insn	(x=0X19550);
	op_hex		(x,	1);
	create_insn	(x=0X19557);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1955C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1956B);
	op_hex		(x,	1);
	set_cmt	(0X1956D,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X1956D);
	op_hex		(x,	0);
	create_insn	(x=0X1957F);
	op_hex		(x,	1);
	create_insn	(0X1958A);
	create_insn	(0X195A1);
	create_insn	(0X195B2);
	create_insn	(0X195C2);
	create_insn	(0X195D6);
	create_insn	(0X195F1);
	create_insn	(0X19614);
	create_insn	(0X19618);
	create_insn	(0X19620);
	create_insn	(x=0X19629);
	op_hex		(x,	1);
	create_insn	(0X1962D);
	create_insn	(x=0X19635);
	op_hex		(x,	1);
	set_cmt	(0X19637,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output",	0);
	create_insn	(x=0X19637);
	op_hex		(x,	0);
	create_insn	(0X1963C);
	create_insn	(x=0X19644);
	op_hex		(x,	1);
	create_insn	(0X1964A);
	create_insn	(0X19667);
	create_insn	(0X1966A);
	create_insn	(0X1967C);
	create_insn	(x=0X19695);
	op_hex		(x,	1);
	create_insn	(x=0X1969D);
	op_hex		(x,	1);
	create_insn	(0X196AA);
	create_insn	(0X196D5);
	create_insn	(x=0X196E1);
	op_hex		(x,	1);
	create_insn	(x=0X196EE);
	op_hex		(x,	1);
	create_insn	(0X196F5);
	create_insn	(x=0X196FC);
	op_hex		(x,	1);
	create_insn	(x=0X19702);
	op_hex		(x,	1);
	create_insn	(x=0X1970E);
	op_hex		(x,	1);
	create_insn	(0X19715);
	create_insn	(0X1971C);
	create_insn	(0X19723);
	create_insn	(0X19742);
	create_insn	(x=0X19751);
	op_hex		(x,	1);
	create_insn	(x=0X19757);
	op_hex		(x,	1);
	create_insn	(x=0X1975F);
	op_hex		(x,	1);
	create_insn	(x=0X19775);
	op_hex		(x,	1);
	create_insn	(0X1977C);
	create_insn	(0X197DB);
	create_insn	(x=0X197DD);
	op_hex		(x,	1);
	set_cmt	(0X197DF,	"DOS - DISK RESET",	0);
	create_insn	(x=0X197DF);
	op_hex		(x,	0);
	create_insn	(x=0X197E1);
	op_hex		(x,	1);
	set_cmt	(0X197E3,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X197E3);
	op_hex		(x,	0);
	create_insn	(x=0X197E9);
	op_hex		(x,	1);
	create_insn	(x=0X197F7);
	op_hex		(x,	1);
	create_insn	(0X19819);
	create_insn	(x=0X1982C);
	op_hex		(x,	1);
	create_insn	(x=0X19839);
	op_hex		(x,	1);
	create_insn	(x=0X19846);
	op_hex		(x,	1);
	create_insn	(x=0X19873);
	op_hex		(x,	1);
	create_insn	(x=0X19890);
	op_hex		(x,	1);
	create_insn	(x=0X19898);
	op_hex		(x,	1);
	create_insn	(x=0X198BD);
	op_hex		(x,	1);
	create_insn	(x=0X198C3);
	op_hex		(x,	1);
	create_insn	(x=0X198E8);
	op_hex		(x,	1);
	create_insn	(0X198F1);
	create_insn	(0X198F4);
	create_insn	(0X19915);
	create_insn	(x=0X19916);
	op_hex		(x,	1);
	set_cmt	(0X19918,	"DOS - 3+ - GET PSP ADDRESS",	0);
	create_insn	(x=0X19918);
	op_hex		(x,	0);
	create_insn	(0X19927);
	create_insn	(0X1995B);
	create_insn	(x=0X199B2);
	op_hex		(x,	1);
	set_cmt	(0X199B5,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) get UMB link state",	0);
	create_insn	(x=0X199B5);
	op_hex		(x,	0);
	set_cmt	(0X199C5,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state",	0);
	create_insn	(x=0X199C5);
	op_hex		(x,	0);
	create_insn	(0X199C8);
	create_insn	(x=0X199D2);
	op_hex		(x,	1);
	set_cmt	(0X199D5,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state",	0);
	create_insn	(x=0X199D5);
	op_hex		(x,	0);
	create_insn	(0X199D8);
	create_insn	(0X199EC);
	create_insn	(x=0X199ED);
	op_hex		(x,	1);
	create_insn	(0X19A02);
	create_insn	(0X19A0E);
	create_insn	(0X19A18);
	create_insn	(0X19A6D);
	create_insn	(0X19A72);
	create_insn	(0X19A75);
	create_insn	(0X19A89);
	create_insn	(0X19A94);
	create_insn	(0X19A9F);
	create_insn	(0X19AC1);
	create_insn	(0X19AC7);
	create_insn	(0X19AF5);
	create_insn	(x=0X19AFE);
	op_hex		(x,	1);
	create_word	(0X19B09);
	create_insn	(0X19B0B);
	create_insn	(0X19B21);
	create_insn	(0X19B2F);
	create_insn	(0X19B3D);
	create_insn	(0X19B3F);
	create_insn	(0X19B8B);
	create_insn	(0X19B8E);
	create_insn	(0X19B94);
	create_insn	(0X19BAF);
	create_insn	(0X19BB1);
	create_insn	(0X19BBF);
	create_insn	(x=0X19BC2);
	op_hex		(x,	1);
	set_cmt	(0X19BC4,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X19BC4);
	op_hex		(x,	0);
	create_insn	(0X19BD2);
	create_insn	(0X19BD7);
	create_insn	(0X19BE8);
	create_insn	(0X19BF1);
	create_insn	(0X19C1F);
	create_insn	(0X19C33);
	create_insn	(0X19C45);
	create_insn	(0X19C4D);
	create_insn	(0X19C5C);
	create_insn	(0X19C65);
	create_insn	(0X19C9B);
	create_insn	(0X19CAA);
	create_insn	(0X19CB2);
	create_insn	(x=0X19CBF);
	op_hex		(x,	1);
	create_insn	(0X19CCA);
	create_insn	(x=0X19CD4);
	op_hex		(x,	1);
	create_insn	(0X19CDF);
	create_insn	(0X19CE8);
	create_insn	(0X19CFB);
	create_insn	(0X19D23);
	create_insn	(0X19D26);
	create_insn	(x=0X19D32);
	op_hex		(x,	1);
	create_insn	(0X19D39);
	create_insn	(0X19D5D);
	create_insn	(0X19D7A);
	create_insn	(0X19DA6);
	create_insn	(0X19DAB);
	create_insn	(0X19DE2);
	create_insn	(0X19DEE);
	create_insn	(0X19DFF);
	create_insn	(0X19E57);
	create_insn	(0X19E5C);
	create_insn	(0X19E83);
	create_insn	(0X19E91);
	create_insn	(0X19EAC);
	create_insn	(0X19ED1);
	create_insn	(0X19ED4);
	create_insn	(0X19F02);
	create_insn	(0X19F26);
	create_insn	(0X19F5E);
	create_insn	(0X19F63);
	create_insn	(0X19F77);
	create_insn	(x=0X19F7A);
	op_hex		(x,	1);
	set_cmt	(0X19F7C,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X19F7C);
	op_hex		(x,	0);
	create_insn	(0X19F98);
	create_insn	(0X19FA1);
	create_insn	(x=0X19FAB);
	op_hex		(x,	1);
	set_cmt	(0X19FAE,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state",	0);
	create_insn	(x=0X19FAE);
	op_hex		(x,	0);
	create_insn	(0X19FB1);
	create_insn	(0X19FC0);
	create_insn	(0X19FD6);
	create_insn	(x=0X19FE0);
	op_hex		(x,	1);
	set_cmt	(0X19FE3,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state",	0);
	create_insn	(x=0X19FE3);
	op_hex		(x,	0);
	create_insn	(0X19FE6);
	create_insn	(0X1A00B);
	create_insn	(0X1A00E);
	create_insn	(0X1A03B);
	create_insn	(0X1A056);
	create_insn	(x=0X1A059);
	op_hex		(x,	1);
	set_cmt	(0X1A05B,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X1A05B);
	op_hex		(x,	0);
	create_insn	(0X1A069);
	create_insn	(x=0X1A06E);
	op_hex		(x,	1);
	set_cmt	(0X1A071,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) get UMB link state",	0);
	create_insn	(x=0X1A071);
	op_hex		(x,	0);
	set_cmt	(0X1A07D,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state",	0);
	create_insn	(x=0X1A07D);
	op_hex		(x,	0);
	create_insn	(0X1A080);
	create_insn	(0X1A0A5);
	create_insn	(0X1A0C2);
	create_insn	(0X1A0E9);
	create_insn	(0X1A0FD);
	create_insn	(0X1A104);
	create_insn	(0X1A123);
	create_insn	(x=0X1A126);
	op_hex		(x,	1);
	set_cmt	(0X1A129,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X1A129);
	op_hex		(x,	0);
	create_insn	(x=0X1A138);
	op_hex		(x,	1);
	set_cmt	(0X1A13B,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X1A13B);
	op_hex		(x,	0);
	create_insn	(0X1A145);
	create_insn	(0X1A155);
	create_insn	(0X1A178);
	create_insn	(0X1A180);
	create_insn	(0X1A1A4);
	create_insn	(x=0X1A1A9);
	op_hex		(x,	1);
	set_cmt	(0X1A1AC,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1A1AC);
	op_hex		(x,	0);
	set_cmt	(0X1A1B9,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file",	0);
	create_insn	(x=0X1A1B9);
	op_hex		(x,	0);
	create_insn	(x=0X1A1C3);
	op_hex		(x,	1);
	create_insn	(x=0X1A1D2);
	op_hex		(x,	1);
	create_insn	(x=0X1A1D5);
	op_hex		(x,	1);
	create_insn	(x=0X1A1E0);
	op_hex		(x,	1);
	set_cmt	(0X1A1E3,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X1A1E3);
	op_hex		(x,	0);
	create_insn	(0X1A1E8);
	create_insn	(x=0X1A200);
	op_hex		(x,	1);
	set_cmt	(0X1A202,	"DOS - 2+ - LOAD OR EXECUTE (EXEC)\nDS:DX -> ASCIZ filename\nES:BX -> parameter block\nAL = subfunc: called by MSC spawn(P_NOWAIT,...) when running DOS 4.x.",	0);
	create_insn	(x=0X1A202);
	op_hex		(x,	0);
	create_insn	(0X1A205);
	create_insn	(0X1A219);
	create_insn	(0X1A223);
	create_insn	(0X1A22C);
	create_insn	(0X1A23A);
	create_insn	(0X1A264);
	create_insn	(0X1A265);
	create_insn	(0X1A287);
	create_insn	(0X1A28A);
	create_insn	(0X1A2AE);
	create_insn	(0X1A2B8);
	create_insn	(0X1A2FD);
	create_insn	(0X1A300);
	create_insn	(0X1A30B);
	create_insn	(0X1A30C);
	create_insn	(x=0X1A32E);
	op_hex		(x,	1);
	create_insn	(x=0X1A330);
	op_hex		(x,	1);
	create_insn	(0X1A339);
	create_insn	(x=0X1A33F);
	op_hex		(x,	1);
	create_insn	(x=0X1A349);
	op_hex		(x,	1);
	create_insn	(x=0X1A34B);
	op_hex		(x,	1);
	create_insn	(0X1A351);
	create_insn	(0X1A353);
	create_insn	(0X1A361);
	create_insn	(0X1A36F);
	create_insn	(0X1A371);
	create_insn	(x=0X1A37C);
	op_hex		(x,	1);
	create_insn	(0X1A38C);
	create_insn	(x=0X1A390);
	op_hex		(x,	1);
	set_cmt	(0X1A392,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X1A392);
	op_hex		(x,	0);
	set_cmt	(0X1A39C,	"- Multiplex - XMS - GET DRIVER ADDRESS\nReturn: ES:BX -> driver entry point",	0);
	create_insn	(x=0X1A39C);
	op_hex		(x,	0);
	create_insn	(0X1A3BD);
	create_insn	(0X1A3BF);
	create_insn	(0X1A3DD);
	create_insn	(0X1A3E0);
	create_insn	(0X1A401);
	create_insn	(0X1A456);
	create_insn	(0X1A49F);
	create_insn	(0X1A4BD);
	create_insn	(0X1A4DA);
	create_insn	(0X1A4DB);
	create_insn	(0X1A4ED);
	create_insn	(0X1A4EF);
	set_cmt	(0X1A4F4,	"MEMORY SIZE - \nReturn: AX = number of contiguous 1K blocks of memory",	0);
	create_insn	(x=0X1A4F4);
	op_hex		(x,	0);
	create_insn	(x=0X1A4F6);
	op_hex		(x,	1);
	create_insn	(0X1A556);
	create_insn	(0X1A564);
	create_insn	(0X1A566);
	create_insn	(x=0X1A57F);
	op_hex		(x,	1);
	set_cmt	(0X1A582,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs",	0);
	create_insn	(x=0X1A582);
	op_hex		(x,	0);
	create_insn	(0X1A593);
	create_insn	(0X1A5B9);
	create_insn	(0X1A5C1);
	create_insn	(0X1A5EA);
	create_insn	(0X1A600);
	create_insn	(0X1A634);
	create_insn	(0X1A6AF);
	create_insn	(x=0X1A6B1);
	op_hex		(x,	1);
	create_insn	(x=0X1A6B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A6BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1A6E1);
	create_insn	(0X1A6FD);
	create_insn	(0X1A72F);
	create_insn	(0X1A802);
	create_insn	(0X1A82B);
	create_insn	(x=0X1A844);
	op_hex		(x,	1);
	set_cmt	(0X1A847,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1A847);
	op_hex		(x,	0);
	create_insn	(x=0X1A854);
	op_hex		(x,	1);
	set_cmt	(0X1A857,	"DOS - 2+ - IOCTL - READ CHARACTER DEVICE CONTROL STRING\nBX = device handle, CX = number of bytes to read DS:DX -> buffer",	0);
	create_insn	(x=0X1A857);
	op_hex		(x,	0);
	create_insn	(x=0X1A85A);
	op_hex		(x,	1);
	set_cmt	(0X1A85C,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X1A85C);
	op_hex		(x,	0);
	create_insn	(0X1A86B);
	create_insn	(0X1A872);
	create_insn	(x=0X1A895);
	op_hex		(x,	1);
	create_insn	(0X1A8F5);
	create_insn	(0X1A92F);
	create_insn	(0X1A93A);
	create_insn	(0X1A947);
	create_insn	(0X1A95A);
	create_insn	(0X1A96E);
	create_insn	(x=0X1A987);
	op_hex		(x,	1);
	create_insn	(0X1A9AC);
	create_insn	(0X1A9D2);
	create_insn	(x=0X1A9D5);
	op_hex		(x,	1);
	create_insn	(x=0X1A9E4);
	op_hex		(x,	1);
	create_insn	(0X1A9EA);
	create_insn	(0X1AA0D);
	create_insn	(0X1AA2B);
	create_insn	(x=0X1AA35);
	op_plain_offset	(x,	0,	0X4790);
	op_plain_offset	(x,	128,	0X4790);
	create_insn	(0X1AA39);
	create_strlit	(0X1AA4C,	0X1AA57);
	set_name	(0X1AA4C,	"aQemm386_sys");
	create_insn	(0X1AA57);
	create_byte	(0X1AA86);
	create_word	(0X1AA90);
	create_word	(0X1AA92);
	create_insn	(0X1AA94);
	create_insn	(x=0X1AAA3);
	op_hex		(x,	1);
	create_insn	(x=0X1AAAB);
	op_hex		(x,	1);
	create_insn	(0X1AAC4);
	create_insn	(x=0X1AAC6);
	op_hex		(x,	1);
	create_insn	(x=0X1AAF3);
	op_hex		(x,	1);
	create_insn	(x=0X1AAFE);
	op_hex		(x,	1);
	set_cmt	(0X1AB15,	"- VIDEO - DISPLAY COMBINATION (PS,VGA/MCGA): read display combination code",	0);
	create_insn	(x=0X1AB15);
	op_hex		(x,	0);
	create_insn	(0X1AB2F);
	create_insn	(x=0X1AB3A);
	op_hex		(x,	1);
	set_cmt	(0X1AB3D,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1AB3D);
	op_hex		(x,	0);
	create_insn	(x=0X1AB45);
	op_hex		(x,	1);
	create_insn	(x=0X1ABC0);
	op_hex		(x,	1);
	create_insn	(x=0X1AC24);
	op_hex		(x,	1);
	set_cmt	(0X1AC4C,	"KEYBOARD - CHECK BUFFER, DO NOT CLEAR\nReturn: ZF clear if character in buffer\nAH = scan code, AL = character\nZF set if no character in buffer",	0);
	create_insn	(x=0X1AC4C);
	op_hex		(x,	0);
	create_insn	(x=0X1AC68);
	op_hex		(x,	1);
	create_insn	(x=0X1AC7C);
	op_hex		(x,	1);
	set_cmt	(0X1AC7E,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X1AC7E);
	op_hex		(x,	0);
	create_insn	(0X1AC84);
	set_cmt	(0X1AC87,	"- VIDEO - SET VIDEO MODE\nAL = mode",	0);
	create_insn	(x=0X1AC87);
	op_hex		(x,	0);
	set_cmt	(0X1AC8C,	"Video status bits:\n0: retrace.  1=display is in vert or horiz retrace.\n1: 1=light pen is triggered; 0=armed\n2: 1=light pen switch is open; 0=closed\n3: 1=vertical sync pulse is occurring.",	0);
	set_cmt	(0X1AC91,	"EGA: palette register: select colors for attribute AL:\n0: RED\n1: GREEN\n2: BLUE\n3: blue\n4: green\n5: red",	0);
	set_cmt	(0X1AC97,	"EGA: sequencer address reg\nunknown register",	0);
	set_cmt	(0X1AC9A,	"EGA: sequencer address reg\nmemory mode. Data bits:\n0: 1=text char generator; 0=graphics\n1: 1=EGA ram > 64K; 0=64K\n2: 1=sequential; 0=odd/even",	0);
	set_cmt	(0X1AC9C,	"EGA port: sequencer data register",	0);
	create_insn	(x=0X1AC9D);
	op_hex		(x,	1);
	create_insn	(x=0X1AC9F);
	op_hex		(x,	1);
	set_cmt	(0X1ACA1,	"EGA port: sequencer data register",	0);
	set_cmt	(0X1ACA6,	"EGA: graph 1 and 2 addr reg:\nmode register.Data bits:\n0-1: Write mode 0-2\n2: test condition\n3: read mode: 1=color compare, 0=direct\n4: 1=use odd/even RAM addressing\n5: 1=use CGA mid-res map (2-bits/pixel)",	0);
	set_cmt	(0X1ACA8,	"EGA port: graphics controller data register",	0);
	create_insn	(x=0X1ACA9);
	op_hex		(x,	1);
	set_cmt	(0X1ACAB,	"EGA port: graphics controller data register",	0);
	set_cmt	(0X1ACAF,	"EGA: graph 1 and 2 addr reg:\nmiscellaneous graphics control.Data bits:\n0: 1=graphics; 0=enable char gen (text)\n1: 1=chain odd maps after even maps\n2: memory mapping for CPU\n   00=a000H (128K);   01=a000H (64K)\n   10=b000H (32K MDA);11=b800H (32K CGA)",	0);
	set_cmt	(0X1ACB1,	"EGA port: graphics controller data register",	0);
	create_insn	(x=0X1ACB2);
	op_hex		(x,	1);
	set_cmt	(0X1ACB4,	"EGA port: graphics controller data register",	0);
	set_cmt	(0X1ACC9,	"Video: CRT cntrlr addr\n",	0);
	set_cmt	(0X1ACCC,	"Video: CRT cntrlr addr\nmaximum scan line",	0);
	set_cmt	(0X1ACCE,	"Video: CRT controller internal registers",	0);
	create_insn	(x=0X1ACCF);
	op_hex		(x,	1);
	set_cmt	(0X1ACD1,	"Video: CRT controller internal registers",	0);
	set_cmt	(0X1ACD5,	"Video: CRT cntrlr addr\nunderline location.  Bits 0-5 are scan line number.",	0);
	set_cmt	(0X1ACD7,	"Video: CRT controller internal registers",	0);
	create_insn	(x=0X1ACD8);
	op_hex		(x,	1);
	set_cmt	(0X1ACDA,	"Video: CRT controller internal registers",	0);
	set_cmt	(0X1ACDE,	"Video: CRT cntrlr addr\nmode control.Data bits:\n0:0=CGA compatible\n1:select row scan counter\n2:hor retrace:1=double vert res\n3:1=use char clock/2 for word refresh\n4:1=high impedance on output\n5:addr wrapping mode\n6:1=byte,0=word mode\n7:0=hardware reset",	0);
	set_cmt	(0X1ACE0,	"Video: CRT controller internal registers",	0);
	create_insn	(x=0X1ACE1);
	op_hex		(x,	1);
	set_cmt	(0X1ACE3,	"Video: CRT controller internal registers",	0);
	create_insn	(0X1ACE5);
	create_insn	(x=0X1ACF2);
	op_hex		(x,	1);
	create_insn	(x=0X1ACF5);
	op_hex		(x,	1);
	create_insn	(x=0X1ACF8);
	op_hex		(x,	1);
	create_insn	(0X1AD29);
	set_cmt	(0X1AD2C,	"Video status bits:\n0: retrace.  1=display is in vert or horiz retrace.\n1: 1=light pen is triggered; 0=armed\n2: 1=light pen switch is open; 0=closed\n3: 1=vertical sync pulse is occurring.",	0);
	set_cmt	(0X1AD31,	"EGA: palette register: select colors for attribute AL:\n0: RED\n1: GREEN\n2: BLUE\n3: blue\n4: green\n5: red",	0);
	create_insn	(0X1AD33);
	set_cmt	(0X1AD38,	"EGA: sequencer address reg\nmap mask: data bits 0-3 enable writes to bit planes 0-3",	0);
	set_cmt	(0X1AD3A,	"EGA port: sequencer data register",	0);
	create_insn	(x=0X1AD3B);
	op_hex		(x,	1);
	create_insn	(x=0X1AD3D);
	op_hex		(x,	1);
	set_cmt	(0X1AD3F,	"EGA port: sequencer data register",	0);
	set_cmt	(0X1AD43,	"EGA: sequencer address reg\nmemory mode. Data bits:\n0: 1=text char generator; 0=graphics\n1: 1=EGA ram > 64K; 0=64K\n2: 1=sequential; 0=odd/even",	0);
	set_cmt	(0X1AD45,	"EGA port: sequencer data register",	0);
	create_insn	(x=0X1AD46);
	op_hex		(x,	1);
	set_cmt	(0X1AD48,	"EGA port: sequencer data register",	0);
	set_cmt	(0X1AD4E,	"EGA: graph 1 and 2 addr reg:\nread map select.\nData bits 0-2 select map # for read mode 00.",	0);
	set_cmt	(0X1AD51,	"EGA: graph 1 and 2 addr reg:\nmode register.Data bits:\n0-1: Write mode 0-2\n2: test condition\n3: read mode: 1=color compare, 0=direct\n4: 1=use odd/even RAM addressing\n5: 1=use CGA mid-res map (2-bits/pixel)",	0);
	set_cmt	(0X1AD53,	"EGA port: graphics controller data register",	0);
	create_insn	(x=0X1AD54);
	op_hex		(x,	1);
	set_cmt	(0X1AD56,	"EGA port: graphics controller data register",	0);
	set_cmt	(0X1AD5A,	"EGA: graph 1 and 2 addr reg:\nmiscellaneous graphics control.Data bits:\n0: 1=graphics; 0=enable char gen (text)\n1: 1=chain odd maps after even maps\n2: memory mapping for CPU\n   00=a000H (128K);   01=a000H (64K)\n   10=b000H (32K MDA);11=b800H (32K CGA)",	0);
	set_cmt	(0X1AD5C,	"EGA port: graphics controller data register",	0);
	create_insn	(x=0X1AD5D);
	op_hex		(x,	1);
	create_insn	(x=0X1AD69);
	op_hex		(x,	1);
	set_cmt	(0X1AD6E,	"EGA port: graphics controller data register",	0);
	create_insn	(0X1AD70);
	create_insn	(x=0X1AD78);
	op_hex		(x,	1);
	set_cmt	(0X1AD80,	"EGA: sequencer address reg\nunknown register",	0);
	set_cmt	(0X1AD94,	"EGA: sequencer address reg\nunknown register",	0);
	set_cmt	(0X1ADAB,	"EGA: sequencer address reg\nunknown register",	0);
	set_cmt	(0X1ADC2,	"EGA: sequencer address reg\nunknown register",	0);
	create_insn	(0X1ADD8);
	create_insn	(0X1ADE1);
	set_cmt	(0X1ADF9,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X1ADF9);
	op_hex		(x,	0);
	set_cmt	(0X1AE0E,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X1AE0E);
	op_hex		(x,	0);
	create_word	(0X1AE13);
	create_insn	(0X1AE15);
	create_strlit	(0X1AE2A,	0X1AE3A);
	set_name	(0X1AE2A,	"aLoadingDevice");
	create_strlit	(0X1AE3A,	0X1AE4B);
	set_name	(0X1AE3A,	"aLoadfailed");
	create_strlit	(0X1AE4B,	0X1AE5D);
	set_name	(0X1AE4B,	"aLoadsuccess");
	create_byte	(0X1AE5D);
	make_array	(0X1AE5D,	0X11);
	create_byte	(0X1AE6E);
	make_array	(0X1AE6E,	0X106);
	create_word	(0X1AF74);
	create_insn	(0X1AF76);
	create_insn	(x=0X1AF7B);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X1AF85);
	create_insn	(x=0X1AF8D);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X1AF98);
	create_insn	(x=0X1AFBF);
	op_hex		(x,	0);
	create_insn	(0X1AFC2);
	create_strlit	(0X1AFDA,	0X1AFDF);
	set_name	(0X1AFDA,	"aPath");
	create_byte	(x=0X1AFDF);
	make_array	(x,	0X6E);
	op_dec		(x,	0);
	set_name	(0X1AFDF,	"_PATH");
	create_insn	(0X1B04D);
	create_insn	(x=0X1B04F);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X1B05E);
	create_byte	(0X1B07B);
	create_insn	(0X1B07C);
	create_insn	(x=0X1B085);
	op_hex		(x,	1);
	set_cmt	(0X1B087,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)",	0);
	create_insn	(x=0X1B087);
	op_hex		(x,	0);
	create_insn	(x=0X1B0A8);
	op_hex		(x,	1);
	set_cmt	(0X1B0AA,	"DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)\n[DTA] = data block from\nlast AH = 4Eh/4Fh call",	0);
	create_insn	(x=0X1B0AA);
	op_hex		(x,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_6(void) {
        auto x;
#define id x

	create_insn	(x=0X1B0C6);
	op_dec		(x,	1);
	create_insn	(0X1B0D3);
	create_strlit	(0X1B0D8,	0X1B0DD);
	set_name	(0X1B0D8,	"a_com");
	create_strlit	(0X1B0DD,	0X1B0E2);
	set_name	(0X1B0DD,	"a_exe");
	create_insn	(0X1B0E2);
	create_insn	(x=0X1B0E6);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1B0E9);
	op_dec		(x,	1);
	create_insn	(x=0X1B0FE);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X1B10D);
	create_insn	(x=0X1B10F);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(0X1B11C);
	create_insn	(x=0X1B121);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1B141);
	op_dec		(x,	1);
	create_byte	(0X1B150);
	make_array	(0X1B150,	0X211);
	create_word	(0X1B366);
	create_word	(0X1B368);
	create_word	(0X1B36C);
	create_word	(0X1B36E);
	create_word	(0X1B372);
	create_word	(0X1B374);
	create_word	(0X1B378);
	create_word	(0X1B37A);
	create_word	(0X1B37E);
	create_word	(0X1B380);
	create_word	(0X1B384);
	create_word	(0X1B386);
	create_word	(0X1B38A);
	create_word	(0X1B38C);
	create_word	(0X1B390);
	create_word	(0X1B392);
	create_word	(0X1B396);
	create_word	(0X1B398);
	create_word	(0X1B39C);
	create_word	(0X1B39E);
	create_word	(0X1B3A2);
	create_word	(0X1B3A4);
	create_word	(0X1B3A8);
	create_word	(0X1B3AA);
	create_word	(0X1B3AE);
	create_word	(0X1B3B0);
	create_word	(0X1B3B4);
	create_word	(0X1B3B6);
	create_word	(0X1B3BA);
	create_word	(0X1B3BC);
	create_word	(0X1B3C0);
	create_word	(0X1B3C2);
	create_word	(0X1B3C6);
	create_word	(0X1B3C8);
	create_byte	(0X1B3CA);
	create_byte	(0X1B3CB);
	create_insn	(x=0X1B3CC);
	op_hex		(x,	1);
	create_insn	(x=0X1B3D5);
	op_hex		(x,	1);
	create_insn	(0X1B435);
	create_insn	(x=0X1B438);
	op_hex		(x,	1);
	create_insn	(x=0X1B443);
	op_hex		(x,	1);
	create_insn	(x=0X1B44D);
	op_plain_offset	(x,	1,	0X11A80);
	op_plain_offset	(x,	129,	0X11A80);
	create_insn	(x=0X1B450);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B45F);
	create_insn	(x=0X1B460);
	op_plain_offset	(x,	0,	0X11A80);
	op_plain_offset	(x,	128,	0X11A80);
	create_insn	(x=0X1B468);
	op_hex		(x,	1);
	create_insn	(x=0X1B490);
	op_hex		(x,	1);
	create_insn	(x=0X1B497);
	op_hex		(x,	1);
	create_insn	(x=0X1B4C1);
	op_hex		(x,	1);
	create_insn	(x=0X1B4D8);
	op_hex		(x,	1);
	create_insn	(0X1B4DE);
	create_insn	(x=0X1B4E0);
	op_hex		(x,	1);
	create_insn	(0X1B4EC);
	create_insn	(0X1B4F3);
	create_insn	(0X1B502);
	create_insn	(0X1B507);
	create_insn	(x=0X1B512);
	op_hex		(x,	1);
	create_insn	(0X1B52B);
	create_insn	(0X1B52F);
	create_insn	(0X1B53D);
	create_insn	(x=0X1B548);
	op_hex		(x,	1);
	create_insn	(0X1B552);
	create_insn	(0X1B55B);
	set_cmt	(0X1B575,	"DOS - 2+ - IOCTL - ",	0);
	create_insn	(x=0X1B575);
	op_hex		(x,	0);
	create_insn	(0X1B577);
	create_insn	(x=0X1B579);
	op_hex		(x,	1);
	create_insn	(0X1B57E);
	create_byte	(0X1B582);
	create_byte	(x=0X1B583);
	make_array	(x,	0XD);
	op_dec		(x,	0);
	create_insn	(0X1B590);
	create_insn	(x=0X1B598);
	op_hex		(x,	1);
	set_cmt	(0X1B5AC,	"DOS - ABSOLUTE DISK READ (except DOS 4.0/COMPAQ DOS 3.31 >32M partitn)\nAL = drive number (0=A, 1=B, etc), DS:BX = Disk Transfer Address (buffer)\nCX = number of sectors to read, DX = first relative sector to read\nReturn: CF set on error",	0);
	create_insn	(x=0X1B5AC);
	op_hex		(x,	0);
	set_cmt	(0X1B600,	"DOS - 2+ - IOCTL - ",	0);
	create_insn	(x=0X1B600);
	op_hex		(x,	0);
	create_insn	(0X1B61D);
	create_insn	(0X1B621);
	create_insn	(x=0X1B622);
	op_hex		(x,	1);
	create_insn	(x=0X1B624);
	op_hex		(x,	1);
	create_byte	(0X1B62B);
	create_insn	(x=0X1B62E);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1B683);
	op_hex		(x,	1);
	create_insn	(x=0X1B6C5);
	op_hex		(x,	1);
	create_insn	(0X1B6F6);
	create_insn	(0X1B70B);
	create_insn	(0X1B72D);
	create_word	(x=0X1B740);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B742);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B744);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B746);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B748);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B74A);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B74C);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B74E);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B750);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B752);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B754);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B756);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B758);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B75A);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B75C);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B75E);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B760);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B762);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B764);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B766);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B768);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B76A);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B76C);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B76E);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B770);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	set_name	(0X1B770,	"SYSI_MSG29_PTR");
	create_word	(x=0X1B772);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B774);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B776);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B778);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B77A);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B77C);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B77E);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B780);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B782);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B784);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B786);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B788);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B78A);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B78C);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B78E);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B790);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B792);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B794);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B796);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B798);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B79A);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B79C);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B79E);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7A0);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7A2);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7A4);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7A6);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7A8);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7AA);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7AC);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7AE);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7B0);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7B2);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7B4);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7B6);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7B8);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7BA);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7BC);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7BE);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	set_name	(0X1B7BE,	"MSG_72_PTR");
	create_word	(x=0X1B7C0);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7C2);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7C4);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7C6);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7C8);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7CA);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7CC);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7CE);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	set_name	(0X1B7CE,	"stack_over_msg_off");
	create_word	(x=0X1B7D0);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7D2);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7D4);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7D6);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7D8);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7DA);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7DC);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7DE);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7E0);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7E2);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7E4);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7E6);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	create_word	(x=0X1B7E8);
	op_plain_offset	(x,	0,	0X1B7EA);
	op_plain_offset	(x,	128,	0X1B7EA);
	set_cmt	(0X1B7EA,	"WinMeStartMsg",	0);
	create_strlit	(0X1B7EA,	0X1B80E);
	set_name	(0X1B7EA,	"SYSINITMSGS");
	create_strlit	(0X1B80E,	0X1B851);
	set_name	(0X1B80E,	"Sysinit_Msg_01");
	create_strlit	(0X1B851,	0X1B87E);
	set_name	(0X1B851,	"Sysinit_Msg_02");
	create_strlit	(0X1B87E,	0X1B8C5);
	set_name	(0X1B87E,	"Sysinit_Msg_03");
	create_strlit	(0X1B8C5,	0X1B904);
	set_name	(0X1B8C5,	"Sysinit_Msg_04");
	create_strlit	(0X1B904,	0X1B908);
	set_name	(0X1B904,	"Sysinit_Msg_05");
	create_strlit	(0X1B908,	0X1B949);
	set_name	(0X1B908,	"Sysinit_Msg_06");
	create_strlit	(0X1B949,	0X1B982);
	set_name	(0X1B949,	"Sysinit_Msg_07");
	create_strlit	(0X1B982,	0X1B9B2);
	set_name	(0X1B982,	"Sysinit_Msg_08");
	create_strlit	(0X1B9B2,	0X1B9BA);
	set_name	(0X1B9B2,	"Sysinit_Msg_09");
	create_strlit	(0X1B9BA,	0X1B9C6);
	set_name	(0X1B9BA,	"Sysinit_Msg_10");
	create_strlit	(0X1B9C6,	0X1BA12);
	set_name	(0X1B9C6,	"Sysinit_Msg_11");
	create_strlit	(0X1BA12,	0X1BA59);
	set_name	(0X1BA12,	"Sysinit_Msg_12");
	create_strlit	(0X1BA59,	0X1BA94);
	set_name	(0X1BA59,	"Sysinit_Msg_13");
	create_strlit	(0X1BA94,	0X1BABB);
	set_name	(0X1BA94,	"Sysinit_Msg_14");
	create_strlit	(0X1BABB,	0X1BAEC);
	set_name	(0X1BABB,	"Sysinit_Msg_15");
	create_strlit	(0X1BAEC,	0X1BB6A);
	set_name	(0X1BAEC,	"Sysinit_Msg_16");
	create_strlit	(0X1BB6A,	0X1BBE6);
	set_name	(0X1BB6A,	"Sysinit_Msg_17");
	create_strlit	(0X1BBE6,	0X1BC77);
	set_name	(0X1BBE6,	"Sysinit_Msg_18");
	create_strlit	(0X1BC77,	0X1BCE7);
	set_name	(0X1BC77,	"Sysinit_Msg_19");
	create_strlit	(0X1BCE7,	0X1BD1B);
	set_name	(0X1BCE7,	"Sysinit_Msg_20");
	create_strlit	(0X1BD1B,	0X1BD58);
	set_name	(0X1BD1B,	"Sysinit_Msg_21");
	create_strlit	(0X1BD58,	0X1BD89);
	set_name	(0X1BD58,	"Sysinit_Msg_22");
	create_strlit	(0X1BD89,	0X1BDBC);
	set_name	(0X1BD89,	"Sysinit_Msg_23");
	create_strlit	(0X1BDBC,	0X1BE13);
	set_name	(0X1BDBC,	"Sysinit_Msg_24");
	create_strlit	(0X1BE13,	0X1BE27);
	set_name	(0X1BE13,	"Sysinit_Msg_25");
	create_strlit	(0X1BE27,	0X1BE78);
	set_name	(0X1BE27,	"Sysinit_Msg_26");
	create_strlit	(0X1BE78,	0X1BEB0);
	set_name	(0X1BE78,	"Sysinit_Msg_27");
	create_strlit	(0X1BEB0,	0X1BEC3);
	set_name	(0X1BEB0,	"Sysinit_Msg_28");
	create_strlit	(0X1BEC3,	0X1BECA);
	set_name	(0X1BEC3,	"Sysinit_Msg_29");
	create_strlit	(0X1BECA,	0X1BEDC);
	set_name	(0X1BECA,	"Sysinit_Msg_30");
	create_strlit	(0X1BEDC,	0X1BF27);
	set_name	(0X1BEDC,	"Sysinit_Msg_31");
	create_strlit	(0X1BF27,	0X1BF72);
	set_name	(0X1BF27,	"Sysinit_Msg_32");
	create_strlit	(0X1BF72,	0X1BFB4);
	set_name	(0X1BF72,	"Sysinit_Msg_33");
	create_strlit	(0X1BFB4,	0X1BFD7);
	set_name	(0X1BFB4,	"Sysinit_Msg_34");
	create_strlit	(0X1BFD7,	0X1C005);
	set_name	(0X1BFD7,	"Sysinit_Msg_35");
	create_strlit	(0X1C005,	0X1C069);
	set_name	(0X1C005,	"Sysinit_Msg_36");
	create_strlit	(0X1C069,	0X1C09B);
	set_name	(0X1C069,	"Sysinit_Msg_37");
	create_strlit	(0X1C09B,	0X1C0D9);
	set_name	(0X1C09B,	"Sysinit_Msg_38");
	create_strlit	(0X1C0D9,	0X1C103);
	set_name	(0X1C0D9,	"Sysinit_Msg_39");
	create_strlit	(0X1C103,	0X1C12C);
	set_name	(0X1C103,	"Sysinit_Msg_40");
	create_strlit	(0X1C12C,	0X1C1B3);
	set_name	(0X1C12C,	"Sysinit_Msg_41");
	create_strlit	(0X1C1B3,	0X1C1E1);
	set_name	(0X1C1B3,	"Sysinit_Msg_46");
	create_strlit	(0X1C1E1,	0X1C21B);
	set_name	(0X1C1E1,	"Sysinit_Msg_47");
	create_strlit	(0X1C21B,	0X1C248);
	set_name	(0X1C21B,	"Sysinit_Msg_48");
	create_strlit	(0X1C248,	0X1C28D);
	set_name	(0X1C248,	"Sysinit_Msg_49");
	create_strlit	(0X1C28D,	0X1C2D0);
	set_name	(0X1C28D,	"Sysinit_Msg_50");
	create_strlit	(0X1C2D0,	0X1C313);
	set_name	(0X1C2D0,	"Sysinit_Msg_51");
	create_strlit	(0X1C313,	0X1C34F);
	set_name	(0X1C313,	"Sysinit_Msg_52");
	create_strlit	(0X1C34F,	0X1C3B8);
	set_name	(0X1C34F,	"Sysinit_Msg_53");
	create_strlit	(0X1C3B8,	0X1C447);
	set_name	(0X1C3B8,	"Sysinit_Msg_54");
	create_strlit	(0X1C447,	0X1C4D2);
	set_name	(0X1C447,	"Sysinit_Msg_55");
	create_strlit	(0X1C4D2,	0X1C559);
	set_name	(0X1C4D2,	"Sysinit_Msg_56");
	create_strlit	(0X1C559,	0X1C5D9);
	set_name	(0X1C559,	"Sysinit_Msg_57");
	set_cmt	(0X1C5D9,	"173 blank/space chars",	0);
	create_byte	(0X1C5D9);
	make_array	(0X1C5D9,	0XAD);
	set_name	(0X1C5D9,	"Sysinit_Msg_58");
	create_strlit	(0X1C686,	0X1C688);
	set_cmt	(0X1C688,	"72 blank/space chars",	0);
	create_byte	(0X1C688);
	make_array	(0X1C688,	0X48);
	set_name	(0X1C688,	"Sysinit_Msg_59");
	create_strlit	(0X1C6D0,	0X1C6D2);
	set_cmt	(0X1C6D2,	"34 blank/space chars",	0);
	create_byte	(0X1C6D2);
	make_array	(0X1C6D2,	0X22);
	set_name	(0X1C6D2,	"Sysinit_Msg_60");
	create_strlit	(0X1C6F4,	0X1C6F6);
	create_byte	(x=0X1C6F6);
	make_array	(x,	0X31);
	op_chr		(x,	0);
	set_name	(0X1C6F6,	"Sysinit_Msg_61");
	set_cmt	(0X1C727,	"125 blank chars",	0);
	create_byte	(0X1C727);
	make_array	(0X1C727,	0X7D);
	set_name	(0X1C727,	"Sysinit_Msg_62");
	create_strlit	(0X1C7A4,	0X1C7A6);
	create_strlit	(0X1C7A6,	0X1C7AD);
	set_name	(0X1C7A6,	"Sysinit_Msg_63");
	create_byte	(0X1C7AD);
	create_strlit	(0X1C7AE,	0X1C7C4);
	set_name	(0X1C7AE,	"Sysinit_Msg_64");
	create_byte	(0X1C7C4);
	create_strlit	(0X1C7C5,	0X1C7CF);
	set_name	(0X1C7C5,	"Sysinit_Msg_65");
	create_byte	(0X1C7CF);
	create_strlit	(0X1C7D0,	0X1C7EF);
	set_name	(0X1C7D0,	"Sysinit_Msg_66");
	create_byte	(0X1C7EF);
	create_strlit	(0X1C7F0,	0X1C80A);
	set_name	(0X1C7F0,	"Sysinit_Msg_67");
	create_byte	(0X1C80A);
	create_strlit	(0X1C80B,	0X1C81F);
	set_name	(0X1C80B,	"Sysinit_Msg_68");
	create_byte	(0X1C81F);
	create_strlit	(0X1C820,	0X1C83E);
	set_name	(0X1C820,	"Sysinit_Msg_69");
	create_byte	(0X1C83E);
	create_strlit	(0X1C83F,	0X1C8B1);
	set_name	(0X1C83F,	"Sysinit_Msg_70");
	create_strlit	(0X1C8B1,	0X1C919);
	set_name	(0X1C8B1,	"Sysinit_Msg_71");
	create_strlit	(0X1C919,	0X1C99E);
	set_name	(0X1C919,	"Sysinit_Msg_72");
	create_strlit	(0X1C99E,	0X1CA13);
	set_name	(0X1C99E,	"Sysinit_Msg_73");
	create_strlit	(0X1CA13,	0X1CA82);
	set_name	(0X1CA13,	"Sysinit_Msg_74");
	create_strlit	(0X1CA82,	0X1CAB0);
	set_name	(0X1CA82,	"Sysinit_Msg_75");
	create_strlit	(0X1CAB0,	0X1CAE2);
	set_name	(0X1CAB0,	"Sysinit_Msg_76");
	create_strlit	(0X1CAE2,	0X1CAFE);
	set_name	(0X1CAE2,	"Sysinit_Msg_77");
	create_strlit	(0X1CAFE,	0X1CB3D);
	set_name	(0X1CAFE,	"Sysinit_Msg_78");
	create_strlit	(0X1CB3D,	0X1CB66);
	set_name	(0X1CB3D,	"Sysinit_Msg_79");
	create_strlit	(0X1CB66,	0X1CBF6);
	set_name	(0X1CB66,	"Sysinit_Msg_80");
	create_strlit	(0X1CBF7,	0X1CC1F);
	set_name	(0X1CBF7,	"Sysinit_Msg_81");
	create_strlit	(0X1CC1F,	0X1CC4A);
	set_name	(0X1CC1F,	"Sysinit_Msg_82");
	create_strlit	(0X1CC4A,	0X1CC97);
	set_name	(0X1CC4A,	"Sysinit_Msg_83");
	create_strlit	(0X1CC97,	0X1CCC9);
	set_name	(0X1CC97,	"Sysinit_Msg_84");
	create_strlit	(0X1CCC9,	0X1CCFE);
	set_name	(0X1CCC9,	"Sysinit_Msg_85");
	create_strlit	(0X1CCFE,	0X1CD01);
	set_name	(0X1CCFE,	"Sysinit_Msg_86");
	create_strlit	(0X1CD01,	0X1CD29);
	set_name	(0X1CD01,	"Sysinit_Msg_87");
	create_byte	(0X1CD29);
	make_array	(0X1CD29,	0X1A);
	set_name	(0X1CD29,	"Sysinit_Msg_88");
	create_strlit	(0X1CD43,	0X1CD7A);
	set_name	(0X1CD43,	"aReturningToWindows");
	create_strlit	(0X1CD7A,	0X1CD7D);
	set_name	(0X1CD7A,	"Sysinit_Msg_89");
	create_strlit	(0X1CD7D,	0X1CDD7);
	set_name	(0X1CD7D,	"Sysinit_Msg_90");
	create_strlit	(0X1CDD7,	0X1CE06);
	set_name	(0X1CDD7,	"Sysinit_Msg_91");
	create_strlit	(0X1CE06,	0X1CE17);
	set_name	(0X1CE06,	"Sysinit_Msg_92");
	create_strlit	(0X1CE17,	0X1CE1F);
	set_name	(0X1CE17,	"IOSYSMSG");
	create_byte	(0X1CE1F);
	create_word	(0X1CE20);
	create_strlit	(0X1CE22,	0X1E44E);
	set_name	(0X1CE22,	"aPadm");
	create_byte	(0X1E44E);
	make_array	(0X1E44E,	0X2);
	create_byte	(0X1E450);
	create_insn	(0X1E451);
	create_insn	(0X1E48E);
	set_cmt	(0X1E49D,	"8042 keyboard controller command register.\nWrite output port (next byte to port 60h):\n7:  1=keyboard data line pulled low (inhibited)\n6:  1=keyboard clock line pulled low (inhibited)\n5:  enables IRQ 12 interrupt on mouse IBF\n4:  enables IRQ 1 interrupt on keyboard IBF\n3:  1=mouse clock line pulled low (inhibited)\n2:  1=mouse data line pulled low (inhibited)\n1:  A20 gate on/off\n0:  reset the PC (THIS BIT SHOULD ALWAYS BE SET TO 1)",	0);
	create_insn	(x=0X1E49D);
	op_hex		(x,	0);
	set_cmt	(0X1E4A6,	"8042 keyboard controller data register.",	0);
	create_insn	(x=0X1E4A6);
	op_hex		(x,	0);
	create_insn	(0X1E4BB);
	set_cmt	(0X1E4BD,	"8042 keyboard controller command register.\nPulse output port.\nBits 0-3 indicate ports to pulse.",	0);
	create_insn	(x=0X1E4BD);
	op_hex		(x,	0);
	create_insn	(0X1E4C6);
	set_cmt	(0X1E4CB,	"PC/XT PPI port B bits:\n0: Tmr 2 gate ___\x10 OR 03H=spkr ON\n1: Tmr 2 data ͼ  AND 0fcH=spkr OFF\n3: 1=read high switches\n4: 0=enable RAM parity checking\n5: 0=enable I/O channel check\n6: 0=hold keyboard clock low\n7: 0=enable kbrd",	0);
	create_insn	(x=0X1E4CB);
	op_hex		(x,	1);
	create_insn	(x=0X1E4CD);
	op_hex		(x,	1);
	set_cmt	(0X1E4D3,	"PC/XT PPI port B bits:\n0: Tmr 2 gate ___\x10 OR 03H=spkr ON\n1: Tmr 2 data ͼ  AND 0fcH=spkr OFF\n3: 1=read high switches\n4: 0=enable RAM parity checking\n5: 0=enable I/O channel check\n6: 0=hold keyboard clock low\n7: 0=enable kbrd",	0);
	create_insn	(x=0X1E4D3);
	op_hex		(x,	1);
	create_insn	(x=0X1E4D5);
	op_hex		(x,	1);
	create_insn	(0X1E4DF);
	create_insn	(0X1E4E2);
	set_cmt	(0X1E4E6,	"8042 keyboard controller status register\n7:  PERR    1=parity error in data received from keyboard\n   +----------- AT Mode ----------+------------ PS/2 Mode ------------+\n6: |RxTO    receive (Rx) timeout  | TO      general timeout (Rx or Tx)|\n5: |TxTO    transmit (Tx) timeout | MOBF    mouse output buffer full  |\n   +------------------------------+-----------------------------------+\n4:  INH     0=keyboard communications inhibited\n3:  A2      0=60h was the port last written to, 1=64h was last\n2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot\n1:  IBF     1=input buffer full (keyboard can't accept data)\n0:  OBF     1=output buffer full (data from keyboard is available)",	0);
	create_insn	(x=0X1E4E6);
	op_hex		(x,	1);
	create_insn	(x=0X1E4E8);
	op_hex		(x,	1);
	create_insn	(0X1E4ED);
	create_dword	(0X1E50C);
	create_dword	(0X1E510);
	create_byte	(0X1E514);
	create_strlit	(0X1E519,	0X1E522);
	set_name	(0X1E519,	"a00000000");
	create_insn	(0X1E522);
	set_cmt	(0X1E525,	"KEYBOARD - GET SHIFT STATUS\nAL = shift status bits",	0);
	create_insn	(x=0X1E525);
	op_hex		(x,	0);
	create_insn	(x=0X1E527);
	op_hex		(x,	1);
	create_insn	(x=0X1E55A);
	op_hex		(x,	1);
	set_cmt	(0X1E55C,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists",	0);
	create_insn	(x=0X1E55C);
	op_hex		(x,	0);
	create_insn	(0X1E5B1);
	create_insn	(0X1E5B3);
	create_insn	(0X1E5D1);
	create_insn	(0X1E5DA);
	create_insn	(x=0X1E5E8);
	op_hex		(x,	1);
	create_insn	(0X1E5EC);
	set_cmt	(0X1E5EF,	"Get Extended Memory Size\nReturn: CF clear on success\nAX = size of memory above 1M in K",	0);
	create_insn	(x=0X1E5EF);
	op_hex		(x,	0);
	create_insn	(0X1E5F6);
	create_insn	(x=0X1E5FF);
	op_hex		(x,	1);
	create_insn	(x=0X1E604);
	op_hex		(x,	1);
	set_cmt	(0X1E614,	"BIOS Memory Services",	0);
	create_insn	(x=0X1E614);
	op_hex		(x,	0);
	create_insn	(x=0X1E629);
	op_hex		(x,	1);
	create_byte	(x=0X1E63C);
	make_array	(x,	0X18);
	op_dec		(x,	0);
	create_insn	(0X1E654);
	set_cmt	(0X1E66F,	"BIOS Memory Services",	0);
	create_insn	(x=0X1E66F);
	op_hex		(x,	0);
	create_insn	(x=0X1E6AE);
	op_hex		(x,	1);
	create_insn	(x=0X1E6B2);
	op_hex		(x,	1);
	create_insn	(0X1E6C6);
	create_insn	(0X1E6ED);
	create_insn	(0X1E71F);
	create_insn	(0X1E74E);
	create_insn	(0X1E7A6);
	create_insn	(0X1E7BB);
	create_insn	(0X1E7F0);
	set_cmt	(0X1E801,	"- Multiplex - MS WINDOWS - MS-DOS 7 GET SYSTEM.DAT (REGISTRY FILE) PATHNAME\nES:DI -> buffer for full ASCIZ pathname\nCX = buffer size in bytes\nReturn: AX=0 if supported\nCX=number of bytes copied into buffer",	0);
	create_insn	(x=0X1E801);
	op_hex		(x,	0);
	create_insn	(x=0X1E80E);
	op_hex		(x,	1);
	set_cmt	(0X1E810,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)",	0);
	create_insn	(x=0X1E810);
	op_hex		(x,	0);
	create_insn	(0X1E824);
	create_insn	(x=0X1E834);
	op_stkvar	(x,	1);
	create_insn	(0X1E83D);
	create_insn	(x=0X1E83E);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1E84A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E84D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E85D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E860);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E86E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E871);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E874);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E890);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E89C);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8AC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8B1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8B6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E8D3);
	op_hex		(x,	1);
	create_insn	(x=0X1E8DA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E8E5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8EF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E8F7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E8FF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E91A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E91F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E92E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E937);
	op_hex		(x,	1);
	create_insn	(x=0X1E93E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E946);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E94B);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E95B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E964);
	op_hex		(x,	1);
	create_insn	(x=0X1E96B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E971);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E97C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E985);
	op_hex		(x,	1);
	create_insn	(x=0X1E988);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E990);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E998);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E99D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E9AD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E9B6);
	op_hex		(x,	1);
	create_insn	(x=0X1E9BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E9C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E9D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E9D5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E9D9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E9E1);
	op_hex		(x,	1);
	create_insn	(x=0X1E9E4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E9ED);
	op_hex		(x,	1);
	create_insn	(x=0X1E9F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1E9F8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EA04);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1EA10);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA13);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA19);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EA2B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EA3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA3F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA42);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EA5B);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA5E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EA61);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EA6C);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EA74);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA7C);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1EA88);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EA96);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EA9D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EAA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EAA3);
	op_hex		(x,	1);
	create_insn	(x=0X1EAB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EAB4);
	op_hex		(x,	1);
	create_insn	(x=0X1EAB8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EAC4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1EAD2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EAD7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EADF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EAE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EAE5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EAE8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EAEB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EAEE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EAF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EAF5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EB05);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EB0D);
	op_hex		(x,	1);
	create_insn	(x=0X1EB14);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EB19);
	op_stkvar	(x,	0);
	create_insn	(0X1EB23);
	create_insn	(x=0X1EB24);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1EB30);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EB33);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EB3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EB46);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EB4D);
	op_hex		(x,	1);
	create_insn	(x=0X1EB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EB5C);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EB63);
	op_hex		(x,	1);
	create_insn	(x=0X1EB66);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EB72);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EB79);
	op_hex		(x,	1);
	create_insn	(x=0X1EB81);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EB8A);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EB91);
	op_hex		(x,	1);
	create_insn	(x=0X1EB99);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EBA2);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EBA9);
	op_hex		(x,	1);
	create_insn	(x=0X1EBAD);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EBB0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EBB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EBBF);
	op_hex		(x,	1);
	create_insn	(0X1EBC4);
	create_insn	(x=0X1EBC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EBCD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EBE1);
	op_hex		(x,	1);
	create_insn	(x=0X1EBEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EBF0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EBF8);
	op_hex		(x,	1);
	create_insn	(0X1EC03);
	create_insn	(x=0X1EC04);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_word	(0X1EC10);
	create_word	(0X1EC12);
	create_insn	(x=0X1EC15);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EC1C);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EC29);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EC34);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EC3D);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EC45);
	op_hex		(x,	1);
	create_insn	(x=0X1EC48);
	op_hex		(x,	1);
	set_cmt	(0X1EC5E,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name",	0);
	create_insn	(x=0X1EC5E);
	op_hex		(x,	0);
	create_insn	(x=0X1EC63);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EC67);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EC71);
	op_stkvar	(x,	1);
	set_cmt	(0X1EC7B,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X1EC7B);
	op_hex		(x,	0);
	create_insn	(x=0X1EC8A);
	op_stkvar	(x,	1);
	set_cmt	(0X1EC8E,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X1EC8E);
	op_hex		(x,	0);
	create_insn	(x=0X1EC94);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EC98);
	op_stkvar	(x,	0);
	create_insn	(x=0X1ECA1);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ECA5);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ECA9);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ECB0);
	op_hex		(x,	1);
	create_insn	(x=0X1ECCC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1ECD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1ECDD);
	op_hex		(x,	1);
	create_insn	(x=0X1ECF8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1ED08);
	op_stkvar	(x,	0);
	create_insn	(x=0X1ED14);
	op_stkvar	(x,	1);
	create_insn	(x=0X1ED1D);
	op_hex		(x,	1);
	create_insn	(x=0X1ED20);
	op_stkvar	(x,	0);
	create_insn	(x=0X1ED27);
	op_stkvar	(x,	1);
	create_insn	(x=0X1ED2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1ED36);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ED3D);
	op_hex		(x,	1);
	create_insn	(x=0X1ED58);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ED5F);
	op_hex		(x,	1);
	create_insn	(x=0X1ED63);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ED67);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ED6E);
	op_hex		(x,	1);
	create_insn	(x=0X1ED75);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ED7C);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ED80);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1ED87);
	op_hex		(x,	1);
	create_insn	(x=0X1EDA2);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EDA9);
	op_hex		(x,	1);
	set_cmt	(0X1EDB2,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)",	0);
	create_insn	(x=0X1EDB2);
	op_hex		(x,	0);
	create_insn	(x=0X1EDBB);
	op_hex		(x,	1);
	create_insn	(0X1EDC3);
	create_insn	(x=0X1EDDC);
	op_hex		(x,	1);
	create_insn	(x=0X1EDE0);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EDE8);
	op_hex		(x,	1);
	create_insn	(x=0X1EDF2);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EDFA);
	op_hex		(x,	1);
	create_insn	(x=0X1EE09);
	op_hex		(x,	1);
	create_insn	(x=0X1EE16);
	op_hex		(x,	1);
	create_insn	(x=0X1EE1F);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EE2D);
	op_hex		(x,	1);
	create_insn	(x=0X1EE3A);
	op_hex		(x,	1);
	create_insn	(x=0X1EE47);
	op_hex		(x,	1);
	create_insn	(x=0X1EE5C);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1EE63);
	op_hex		(x,	1);
	create_insn	(0X1EE73);
	create_insn	(x=0X1EE74);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1EE80);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EE83);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EE8B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EE90);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EE99);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EE9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EEA5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EEB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EEC0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EEC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EECD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EED2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EEE9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EEF2);
	op_hex		(x,	1);
	create_insn	(x=0X1EEF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EEFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF00);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF16);
	op_stkvar	(x,	1);
	create_insn	(0X1EF1C);
	create_insn	(x=0X1EF1F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF23);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF28);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF36);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF3A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF3E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF42);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF46);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF51);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF59);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF61);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF68);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF6C);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF75);
	op_hex		(x,	1);
	create_insn	(x=0X1EF7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EF87);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EF8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFA5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFAB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFBB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFC7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EFCB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EFD4);
	op_hex		(x,	1);
	create_insn	(x=0X1EFDD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EFE5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFEB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1EFFA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1EFFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F00F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F012);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F01D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F021);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F025);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F02D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F034);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F03A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F040);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F043);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F04E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F051);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F066);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F06A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F075);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F080);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F083);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F086);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F09C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F09F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F0AD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F0B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F0BB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F0BF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F0C3);
	op_stkvar	(x,	1);
	create_insn	(0X1F0D2);
	create_insn	(0X1F0DA);
	create_insn	(x=0X1F0E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F0E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F0FD);
	op_hex		(x,	1);
	create_insn	(0X1F10C);
	create_insn	(x=0X1F117);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F11A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F125);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F139);
	op_hex		(x,	1);
	create_insn	(x=0X1F142);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F146);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F14F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F159);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F15F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F162);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F176);
	op_hex		(x,	1);
	create_insn	(0X1F184);
	create_insn	(x=0X1F18D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F191);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F19D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F1A1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F1A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F1AE);
	op_hex		(x,	1);
	create_insn	(x=0X1F1B4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1F1C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F1D8);
	op_hex		(x,	1);
	create_insn	(x=0X1F1E1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F1E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F1F9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F1FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F20C);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F20F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F215);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F227);
	op_hex		(x,	1);
	create_insn	(x=0X1F230);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F233);
	op_stkvar	(x,	1);
	create_insn	(0X1F23B);
	create_insn	(0X1F23C);
	create_insn	(x=0X1F247);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F24A);
	op_stkvar	(x,	1);
	create_insn	(0X1F25C);
	create_insn	(x=0X1F272);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F28C);
	op_hex		(x,	1);
	create_insn	(x=0X1F28F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F29B);
	op_hex		(x,	1);
	create_insn	(0X1F2A0);
	create_insn	(x=0X1F2A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F2A6);
	op_hex		(x,	1);
	create_insn	(x=0X1F2BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F2C6);
	op_hex		(x,	1);
	create_insn	(0X1F2CC);
	create_insn	(x=0X1F2D4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1F2E0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F2E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F2EB);
	op_hex		(x,	1);
	create_insn	(x=0X1F2EE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F2F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F2FF);
	op_hex		(x,	1);
	create_insn	(x=0X1F302);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F316);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F319);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F31E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F326);
	op_hex		(x,	1);
	create_insn	(x=0X1F329);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F330);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F333);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F336);
	op_hex		(x,	1);
	create_insn	(x=0X1F33B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F33F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F343);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F34C);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F34F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F362);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F365);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F36E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F371);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F374);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F37A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F37D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F390);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F393);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F396);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F3AC);
	op_hex		(x,	1);
	create_insn	(x=0X1F3AF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F3B2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F3B5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F3BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F3CD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F3D6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F3DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F3DE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F3E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F3E6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F3EA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F3F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F3FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F400);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F406);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F40B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F410);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F414);
	op_hex		(x,	1);
	create_insn	(x=0X1F418);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F41B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F423);
	op_hex		(x,	1);
	create_insn	(x=0X1F426);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F42F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F432);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F435);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F43A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F440);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F443);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F448);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F455);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F45D);
	op_hex		(x,	1);
	create_insn	(x=0X1F468);
	op_hex		(x,	1);
	create_insn	(x=0X1F46E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F477);
	op_hex		(x,	1);
	create_insn	(x=0X1F47A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F47D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F480);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F489);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F48C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F490);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F494);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F497);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F4A0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F4B0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4B6);
	op_hex		(x,	1);
	create_insn	(x=0X1F4BA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4C5);
	op_hex		(x,	1);
	create_insn	(x=0X1F4C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F4CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F4DA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4DF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4E6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4E9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4F1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F4F5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F4FF);
	op_hex		(x,	1);
	create_insn	(x=0X1F508);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F50B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F50F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F512);
	op_hex		(x,	1);
	create_insn	(x=0X1F517);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F51A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F524);
	op_hex		(x,	1);
	create_insn	(x=0X1F527);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F52A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F52D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F530);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F533);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F53A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F542);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F546);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F54A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F553);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F55A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F562);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F56A);
	op_hex		(x,	1);
	create_insn	(x=0X1F572);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F57A);
	op_hex		(x,	1);
	create_insn	(0X1F580);
	create_insn	(x=0X1F584);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F58D);
	op_hex		(x,	1);
	create_insn	(x=0X1F590);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F593);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F59C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F5A4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1F5C2);
	op_hex		(x,	1);
	create_insn	(x=0X1F5D0);
	op_hex		(x,	1);
	create_insn	(x=0X1F5E9);
	op_hex		(x,	1);
	create_insn	(x=0X1F5F7);
	op_hex		(x,	1);
	create_insn	(0X1F600);
	create_insn	(x=0X1F614);
	op_hex		(x,	1);
	create_insn	(x=0X1F629);
	op_hex		(x,	1);
	create_insn	(x=0X1F63C);
	op_hex		(x,	1);
	create_insn	(0X1F642);
	create_insn	(x=0X1F648);
	op_hex		(x,	1);
	create_insn	(x=0X1F64F);
	op_hex		(x,	1);
	create_insn	(x=0X1F656);
	op_hex		(x,	1);
	create_insn	(x=0X1F67E);
	op_hex		(x,	1);
	create_insn	(x=0X1F68F);
	op_hex		(x,	1);
	create_insn	(0X1F697);
	create_insn	(x=0X1F69F);
	op_hex		(x,	1);
	set_cmt	(0X1F6A2,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write",	0);
	create_insn	(x=0X1F6A2);
	op_hex		(x,	0);
	create_insn	(0X1F8B4);
	set_cmt	(0X1F8BB,	"- Multiplex - XMS - GET DRIVER ADDRESS\nReturn: ES:BX -> driver entry point",	0);
	create_insn	(x=0X1F8BB);
	op_hex		(x,	0);
	create_insn	(x=0X1F8CF);
	op_hex		(x,	1);
	set_cmt	(0X1F8D2,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read",	0);
	create_insn	(x=0X1F8D2);
	op_hex		(x,	0);
	set_cmt	(0X1F8E6,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file",	0);
	create_insn	(x=0X1F8E6);
	op_hex		(x,	0);
	create_insn	(x=0X1F8E8);
	op_hex		(x,	1);
	set_cmt	(0X1F8FA,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X1F8FA);
	op_hex		(x,	0);
	create_insn	(x=0X1F90C);
	op_hex		(x,	1);
	create_insn	(x=0X1F920);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1F92B);
	op_hex		(x,	1);
	create_insn	(0X1F932);
	create_insn	(x=0X1F935);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1F93E);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1F942);
	op_plain_offset	(x,	0,	0X3440);
	op_plain_offset	(x,	128,	0X3440);
	create_insn	(x=0X1F950);
	op_hex		(x,	1);
	set_cmt	(0X1F952,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X1F952);
	op_hex		(x,	0);
	create_insn	(x=0X1F960);
	op_plain_offset	(x,	1,	0X3440);
	op_plain_offset	(x,	129,	0X3440);
	create_insn	(0X1F989);
	create_insn	(x=0X1F98C);
	op_hex		(x,	1);
	create_insn	(x=0X1F992);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F99A);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F9A2);
	op_hex		(x,	1);
	set_cmt	(0X1F9A4,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X1F9A4);
	op_hex		(x,	0);
	create_insn	(x=0X1F9AB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1F9AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F9B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F9BC);
	op_hex		(x,	1);
	set_cmt	(0X1F9BE,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer",	0);
	create_insn	(x=0X1F9BE);
	op_hex		(x,	0);
	create_insn	(x=0X1F9D3);
	op_hex		(x,	1);
	create_insn	(x=0X1F9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F9F1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F9FE);
	op_stkvar	(x,	0);
	create_insn	(0X1FA18);
	create_insn	(x=0X1FA1B);
	op_stkvar	(x,	0);
	create_insn	(x=0X1FA21);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FA24);
	op_hex		(x,	1);
	set_cmt	(0X1FA26,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X1FA26);
	op_hex		(x,	0);
	create_insn	(0X1FA31);
	create_insn	(0X1FCA4);
	create_insn	(0X1FCAA);
	create_insn	(0X1FCC3);
	create_insn	(0X1FCDC);
	create_insn	(x=0X1FCE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FCED);
	op_hex		(x,	1);
	set_cmt	(0X1FCEF,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name",	0);
	create_insn	(x=0X1FCEF);
	op_hex		(x,	0);
	create_insn	(0X1FCFD);
	create_insn	(x=0X1FD03);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD06);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD09);
	op_hex		(x,	1);
	set_cmt	(0X1FD0B,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read, 1 - write, 2 - read & write",	0);
	create_insn	(x=0X1FD0B);
	op_hex		(x,	0);
	create_insn	(0X1FD19);
	create_insn	(0X1FD1D);
	create_insn	(x=0X1FD25);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD28);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD2B);
	op_stkvar	(x,	1);
	set_cmt	(0X1FD2E,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer",	0);
	create_insn	(x=0X1FD2E);
	op_hex		(x,	0);
	create_insn	(x=0X1FD32);
	op_stkvar	(x,	1);
	create_insn	(0X1FD40);
	create_insn	(x=0X1FD45);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD48);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD4B);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD4E);
	op_hex		(x,	1);
	set_cmt	(0X1FD51,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file",	0);
	create_insn	(x=0X1FD51);
	op_hex		(x,	0);
	create_insn	(x=0X1FD55);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD5A);
	op_stkvar	(x,	1);
	create_insn	(0X1FD64);
	create_insn	(0X1FD6C);
	create_insn	(x=0X1FD71);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD74);
	op_hex		(x,	1);
	set_cmt	(0X1FD76,	"DOS - 3.3+ - COMMIT FILE, WRITE ALL BUFFERED DATA TO DISK\nBX = file handle",	0);
	create_insn	(x=0X1FD76);
	op_hex		(x,	0);
	create_insn	(0X1FD81);
	create_insn	(x=0X1FD86);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD89);
	op_hex		(x,	1);
	set_cmt	(0X1FD8B,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle",	0);
	create_insn	(x=0X1FD8B);
	op_hex		(x,	0);
	create_insn	(0X1FD94);
	create_insn	(x=0X1FD9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FD9D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FDA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FDA5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FDC3);
	op_hex		(x,	1);
	create_insn	(x=0X1FDCB);
	op_hex		(x,	1);
	create_insn	(0X1FDD9);
	create_insn	(x=0X1FDDB);
	op_hex		(x,	1);
	create_insn	(x=0X1FDE2);
	op_hex		(x,	1);
	create_insn	(0X1FDEE);
	create_insn	(x=0X1FDF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FDF7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FE00);
	op_hex		(x,	1);
	create_insn	(x=0X1FE08);
	op_hex		(x,	1);
	create_insn	(0X1FE14);
	create_insn	(x=0X1FE19);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FE26);
	op_hex		(x,	1);
	create_insn	(x=0X1FE29);
	op_hex		(x,	1);
	set_cmt	(0X1FE2B,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired",	0);
	create_insn	(x=0X1FE2B);
	op_hex		(x,	0);
	create_insn	(0X1FE3B);
	create_insn	(x=0X1FE40);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FE43);
	op_hex		(x,	1);
	set_cmt	(0X1FE45,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed",	0);
	create_insn	(x=0X1FE45);
	op_hex		(x,	0);
	create_insn	(0X1FE4D);
	create_insn	(x=0X1FE54);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FE5C);
	op_hex		(x,	1);
	create_insn	(x=0X1FE5F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FE63);
	op_hex		(x,	1);
	set_cmt	(0X1FE65,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs",	0);
	create_insn	(x=0X1FE65);
	op_hex		(x,	0);
	create_insn	(x=0X1FE6C);
	op_stkvar	(x,	0);
	create_insn	(x=0X1FE82);
	op_hex		(x,	1);
	create_insn	(0X1FE9C);
	create_insn	(x=0X1FEA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FEA5);
	op_hex		(x,	1);
	set_cmt	(0X1FEA8,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash",	0);
	create_insn	(x=0X1FEA8);
	op_hex		(x,	0);
	create_insn	(0X1FEB7);
	create_insn	(0X1FEBE);
	create_insn	(x=0X1FEC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FEC7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FECA);
	op_hex		(x,	1);
	set_cmt	(0X1FECD,	"DOS - 2+ - SET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name\nCX = file attribute bits",	0);
	create_insn	(x=0X1FECD);
	op_hex		(x,	0);
	create_insn	(0X1FED9);
	create_insn	(x=0X1FEDF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FEE2);
	op_hex		(x,	1);
	set_cmt	(0X1FEE4,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)",	0);
	create_insn	(x=0X1FEE4);
	op_hex		(x,	0);
	create_insn	(0X1FEF0);
	create_insn	(x=0X1FEF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FEF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FEFC);
	op_hex		(x,	1);
	set_cmt	(0X1FEFE,	"DOS - 2+ - RENAME A FILE\nDS:DX -> ASCIZ old name (drive and path allowed, no wildcards)\nES:DI -> ASCIZ new name",	0);
	create_insn	(x=0X1FEFE);
	op_hex		(x,	0);
	create_insn	(0X1FF0A);
	create_insn	(x=0X1FF12);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FF15);
	op_hex		(x,	1);
	set_cmt	(0X1FF17,	"DOS - 3+ - CREATE UNIQUE FILE\nDS:DX -> ASCIZ directory path name ending with a '' + 13 bytes to\nreceive generated filename\nCX = file attributes (only bits 0,1,2,5 may be set)",	0);
	create_insn	(x=0X1FF17);
	op_hex		(x,	0);
	create_insn	(0X1FF26);
	create_insn	(0X1FF55);
	create_insn	(0X1FF66);
	create_insn	(x=0X1FF6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FF6D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FF70);
	op_hex		(x,	1);
	create_insn	(x=0X1FF7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FF82);
	op_hex		(x,	1);
	create_insn	(0X1FF8C);
	create_insn	(x=0X1FF9C);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1FFA3);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(x=0X1FFAA);
	op_plain_offset	(x,	0,	0X43F90);
	op_plain_offset	(x,	128,	0X43F90);
	create_insn	(0X1FFAE);
	create_insn	(x=0X1FFCA);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X1FFD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FFE4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1FFE7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1FFF4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1FFFD);
	op_stkvar	(x,	1);
	create_insn	(x=0X20000);
	op_stkvar	(x,	1);
	create_insn	(x=0X2000B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2001F);
	op_hex		(x,	1);
	create_insn	(x=0X20028);
	op_stkvar	(x,	1);
	create_insn	(x=0X2002B);
	op_hex		(x,	1);
	create_insn	(x=0X2002E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20035);
	op_stkvar	(x,	0);
	create_insn	(0X20049);
	create_insn	(x=0X2004D);
	op_stkvar	(x,	1);
	create_insn	(x=0X20050);
	op_stkvar	(x,	1);
	create_insn	(x=0X20059);
	op_stkvar	(x,	0);
	create_insn	(x=0X2005F);
	op_stkvar	(x,	1);
	create_insn	(x=0X20068);
	op_stkvar	(x,	1);
	create_insn	(x=0X20074);
	op_hex		(x,	1);
	create_insn	(x=0X2007A);
	op_stkvar	(x,	1);
	create_insn	(x=0X20086);
	op_hex		(x,	1);
	create_insn	(x=0X2008D);
	op_stkvar	(x,	1);
	create_insn	(x=0X20099);
	op_stkvar	(x,	1);
	create_insn	(x=0X200A7);
	op_hex		(x,	1);
	create_insn	(x=0X200AF);
	op_hex		(x,	1);
	create_insn	(x=0X200EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X200ED);
	op_hex		(x,	1);
	create_insn	(x=0X200FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X2010E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20112);
	op_stkvar	(x,	1);
	create_insn	(x=0X20117);
	op_stkvar	(x,	1);
	create_insn	(x=0X20125);
	op_stkvar	(x,	1);
	create_insn	(x=0X20129);
	op_stkvar	(x,	1);
	create_insn	(x=0X20131);
	op_stkvar	(x,	1);
	create_insn	(x=0X20134);
	op_hex		(x,	1);
	create_insn	(x=0X2013D);
	op_stkvar	(x,	1);
	create_insn	(x=0X20140);
	op_hex		(x,	1);
	create_insn	(x=0X20148);
	op_stkvar	(x,	1);
	create_insn	(x=0X2014B);
	op_hex		(x,	1);
	create_insn	(x=0X20154);
	op_stkvar	(x,	1);
	create_insn	(x=0X2015D);
	op_stkvar	(x,	1);
	create_insn	(x=0X20166);
	op_stkvar	(x,	0);
	create_insn	(x=0X2016A);
	op_stkvar	(x,	0);
	create_insn	(x=0X20173);
	op_stkvar	(x,	0);
	create_insn	(x=0X20184);
	op_stkvar	(x,	1);
	create_insn	(x=0X20193);
	op_stkvar	(x,	1);
	create_insn	(x=0X20196);
	op_stkvar	(x,	1);
	create_insn	(x=0X201A2);
	op_stkvar	(x,	0);
	create_insn	(x=0X201A8);
	op_stkvar	(x,	0);
	create_insn	(x=0X201AF);
	op_stkvar	(x,	0);
	create_insn	(x=0X201BE);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X201C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X201D8);
	op_stkvar	(x,	0);
	create_insn	(x=0X201DB);
	op_stkvar	(x,	0);
	create_insn	(x=0X201E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X201F1);
	op_stkvar	(x,	1);
	create_insn	(x=0X201F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X201FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X20213);
	op_hex		(x,	1);
	create_insn	(x=0X2021C);
	op_stkvar	(x,	0);
	create_insn	(x=0X20221);
	op_stkvar	(x,	0);
	create_insn	(x=0X20229);
	op_stkvar	(x,	0);
	create_insn	(x=0X2022F);
	op_stkvar	(x,	0);
	create_insn	(x=0X20232);
	op_stkvar	(x,	1);
	create_insn	(x=0X20244);
	op_stkvar	(x,	1);
	create_insn	(x=0X2026C);
	op_hex		(x,	1);
	create_insn	(x=0X2027C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2027F);
	op_hex		(x,	1);
	create_insn	(x=0X20284);
	op_stkvar	(x,	0);
	create_insn	(x=0X20287);
	op_stkvar	(x,	1);
	create_insn	(x=0X20299);
	op_stkvar	(x,	1);
	create_insn	(x=0X202A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X202AE);
	op_stkvar	(x,	1);
	create_insn	(0X202B3);
	create_insn	(x=0X202BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X202C2);
	op_stkvar	(x,	0);
	create_insn	(0X202C8);
	create_insn	(x=0X202F3);
	op_hex		(x,	1);
	create_insn	(0X2031A);
	create_insn	(x=0X20332);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X20338);
	op_stkvar	(x,	1);
	create_insn	(x=0X2033B);
	op_stkvar	(x,	0);
	create_insn	(0X2033E);
	create_insn	(0X2038B);
	create_insn	(0X2039F);
	create_insn	(x=0X2044E);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X20454);
	op_stkvar	(x,	1);
	create_insn	(x=0X20457);
	op_stkvar	(x,	1);
	create_insn	(x=0X2045A);
	op_hex		(x,	1);
	create_insn	(x=0X20466);
	op_hex		(x,	1);
	create_insn	(x=0X2046F);
	op_hex		(x,	1);
	create_insn	(x=0X20474);
	op_stkvar	(x,	0);
	create_insn	(x=0X2047C);
	op_stkvar	(x,	0);
	create_insn	(x=0X2047F);
	op_stkvar	(x,	0);
	create_insn	(x=0X20492);
	op_stkvar	(x,	1);
	create_insn	(x=0X20495);
	op_hex		(x,	1);
	create_insn	(x=0X204AF);
	op_stkvar	(x,	0);
	create_insn	(x=0X204BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X204C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X204D8);
	op_hex		(x,	1);
	create_insn	(x=0X204E1);
	op_stkvar	(x,	1);
	create_insn	(x=0X204E9);
	op_stkvar	(x,	0);
	create_insn	(x=0X204F6);
	op_stkvar	(x,	0);
	create_insn	(0X204FD);
	create_insn	(x=0X20501);
	op_stkvar	(x,	1);
	create_insn	(x=0X2051A);
	op_hex		(x,	1);
	create_insn	(x=0X20523);
	op_stkvar	(x,	1);
	create_insn	(x=0X2052C);
	op_stkvar	(x,	0);
	create_insn	(x=0X20532);
	op_stkvar	(x,	1);
	create_insn	(x=0X20540);
	op_stkvar	(x,	0);
	create_insn	(x=0X20546);
	op_stkvar	(x,	1);
	create_insn	(x=0X2054C);
	op_stkvar	(x,	1);
	create_insn	(0X20551);
	create_insn	(x=0X2055D);
	op_stkvar	(x,	0);
	create_insn	(x=0X20565);
	op_stkvar	(x,	0);
	create_insn	(x=0X2056B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2056E);
	op_hex		(x,	1);
	create_insn	(x=0X20575);
	op_stkvar	(x,	1);
	create_insn	(x=0X20578);
	op_hex		(x,	1);
	create_insn	(x=0X2057D);
	op_hex		(x,	1);
	create_insn	(x=0X20584);
	op_stkvar	(x,	1);
	create_insn	(x=0X20594);
	op_stkvar	(x,	1);
	create_insn	(x=0X205AD);
	op_stkvar	(x,	0);
	create_insn	(x=0X205B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X205C3);
	op_stkvar	(x,	0);
	create_insn	(x=0X205C7);
	op_stkvar	(x,	0);
	create_insn	(x=0X205CA);
	op_stkvar	(x,	0);
	create_insn	(x=0X205D0);
	op_stkvar	(x,	0);
	create_insn	(x=0X205D7);
	op_stkvar	(x,	0);
	create_insn	(x=0X205DB);
	op_stkvar	(x,	0);
	create_insn	(x=0X205DE);
	op_stkvar	(x,	0);
	create_insn	(x=0X205E4);
	op_stkvar	(x,	0);
	create_insn	(x=0X205ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X205F0);
	op_hex		(x,	1);
	create_insn	(x=0X205F7);
	op_stkvar	(x,	0);
	create_insn	(x=0X205FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X20607);
	op_stkvar	(x,	0);
	create_insn	(x=0X2060D);
	op_stkvar	(x,	0);
	create_insn	(x=0X20613);
	op_stkvar	(x,	0);
	create_insn	(x=0X20619);
	op_stkvar	(x,	0);
	create_insn	(x=0X20620);
	op_stkvar	(x,	1);
	create_insn	(x=0X2062F);
	op_stkvar	(x,	1);
	create_insn	(x=0X20637);
	op_stkvar	(x,	1);
	create_insn	(x=0X20646);
	op_stkvar	(x,	0);
	create_insn	(x=0X2064D);
	op_stkvar	(x,	0);
	create_insn	(x=0X20654);
	op_stkvar	(x,	1);
	create_insn	(x=0X20657);
	op_hex		(x,	1);
	create_insn	(x=0X2065C);
	op_hex		(x,	1);
	create_insn	(x=0X20661);
	op_stkvar	(x,	0);
	create_insn	(x=0X20668);
	op_stkvar	(x,	0);
	create_insn	(x=0X2066E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20674);
	op_stkvar	(x,	0);
	create_insn	(x=0X2067A);
	op_stkvar	(x,	0);
	create_insn	(x=0X20680);
	op_stkvar	(x,	1);
	create_insn	(x=0X2068B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2069A);
	op_stkvar	(x,	1);
	create_insn	(x=0X206A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X206AA);
	op_hex		(x,	1);
	create_insn	(x=0X206AF);
	op_stkvar	(x,	1);
	create_insn	(0X206B8);
	create_insn	(x=0X206C2);
	op_hex		(x,	1);
	create_insn	(x=0X206C9);
	op_hex		(x,	1);
	create_insn	(x=0X206DD);
	op_hex		(x,	1);
	create_insn	(x=0X206EA);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X206F9);
	op_stkvar	(x,	0);
	create_insn	(x=0X20700);
	op_stkvar	(x,	1);
	create_insn	(x=0X2070E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20713);
	op_stkvar	(x,	0);
	create_insn	(x=0X20716);
	op_stkvar	(x,	1);
	create_insn	(x=0X20724);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X2072A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2072D);
	op_stkvar	(x,	1);
	create_insn	(x=0X2073D);
	op_stkvar	(x,	1);
	create_insn	(x=0X2074F);
	op_stkvar	(x,	1);
	create_insn	(x=0X2075D);
	op_stkvar	(x,	1);
	create_insn	(x=0X20765);
	op_hex		(x,	1);
	create_insn	(x=0X2076B);
	op_stkvar	(x,	1);
	create_insn	(x=0X20778);
	op_stkvar	(x,	1);
	create_insn	(x=0X20783);
	op_stkvar	(x,	1);
	create_insn	(x=0X2078A);
	op_stkvar	(x,	1);
	create_insn	(x=0X20791);
	op_stkvar	(x,	1);
	create_insn	(x=0X20798);
	op_stkvar	(x,	1);
	create_insn	(x=0X207B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X207C4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X207CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X207CD);
	op_stkvar	(x,	1);
	create_insn	(x=0X207D0);
	op_hex		(x,	1);
	create_insn	(x=0X207DF);
	op_stkvar	(x,	0);
	create_insn	(x=0X207EB);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X207F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X207FB);
	op_stkvar	(x,	0);
	create_insn	(x=0X207FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X20802);
	op_hex		(x,	1);
	create_insn	(x=0X2080B);
	op_hex		(x,	1);
	create_insn	(0X20814);
	create_insn	(x=0X20816);
	op_stkvar	(x,	1);
	create_insn	(x=0X2081E);
	op_stkvar	(x,	0);
	create_insn	(x=0X2082B);
	op_stkvar	(x,	0);
	create_insn	(x=0X20838);
	op_stkvar	(x,	1);
	create_insn	(x=0X20847);
	op_hex		(x,	1);
	create_insn	(x=0X20868);
	op_stkvar	(x,	1);
	create_insn	(x=0X20881);
	op_stkvar	(x,	1);
	create_insn	(x=0X20896);
	op_stkvar	(x,	0);
	create_insn	(0X208A6);
	create_insn	(0X208DD);
	create_insn	(x=0X208EB);
	op_plain_offset	(x,	1,	0X43F90);
	op_plain_offset	(x,	129,	0X43F90);
	create_insn	(x=0X2091A);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X20920);
	op_stkvar	(x,	1);
	create_insn	(x=0X20923);
	op_stkvar	(x,	1);
	create_insn	(x=0X2092E);
	op_stkvar	(x,	1);
	create_insn	(x=0X20933);
	op_stkvar	(x,	0);
	create_insn	(x=0X20938);
	op_stkvar	(x,	1);
	create_insn	(x=0X2093E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20953);
	op_stkvar	(x,	1);
	create_insn	(x=0X2095C);
	op_stkvar	(x,	0);
	create_insn	(0X2096C);
	create_insn	(x=0X20976);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X2097B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2097E);
	op_stkvar	(x,	1);
	create_insn	(x=0X20985);
	op_stkvar	(x,	1);
	create_insn	(x=0X20988);
	op_stkvar	(x,	1);
	create_insn	(x=0X20992);
	op_stkvar	(x,	1);
	create_insn	(x=0X2099A);
	op_stkvar	(x,	0);
	create_insn	(x=0X209A3);
	op_stkvar	(x,	1);
	create_insn	(x=0X209AD);
	op_stkvar	(x,	1);
	create_insn	(0X209B5);
	create_insn	(x=0X209BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X209D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X209E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X209E3);
	op_stkvar	(x,	1);
	create_insn	(x=0X209EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X209F5);
	op_stkvar	(x,	1);
	create_insn	(x=0X20A00);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X20A08);
	op_stkvar	(x,	0);
	create_insn	(x=0X20A0C);
	op_stkvar	(x,	0);
	create_insn	(x=0X20A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X20A21);
	op_stkvar	(x,	1);
	create_insn	(x=0X20A2C);
	op_stkvar	(x,	0);
	create_insn	(x=0X20A3B);
	op_stkvar	(x,	1);
	create_insn	(x=0X20A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X20A6B);
	op_stkvar	(x,	0);
	create_insn	(x=0X20A6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X20A7C);
	op_stkvar	(x,	0);
	create_insn	(x=0X20A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X20A8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X20AA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X20AB6);
	op_stkvar	(x,	0);
	create_insn	(x=0X20ABD);
	op_stkvar	(x,	1);
	create_insn	(x=0X20ACF);
	op_stkvar	(x,	0);
	create_insn	(x=0X20AD3);
	op_stkvar	(x,	0);
	create_insn	(x=0X20AE4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X20AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X20AED);
	op_stkvar	(x,	1);
	create_insn	(x=0X20AF3);
	op_stkvar	(x,	0);
	create_insn	(x=0X20AF7);
	op_stkvar	(x,	1);
	create_insn	(x=0X20AFE);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B01);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B0D);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B11);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B1B);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B2D);
	op_hex		(x,	1);
	create_insn	(x=0X20B33);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B38);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B3B);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B3E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B41);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B4C);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B55);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B5E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B62);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B67);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B6B);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B71);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B74);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B77);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B81);
	op_stkvar	(x,	1);
	create_insn	(x=0X20B84);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B89);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B8D);
	op_stkvar	(x,	0);
	create_insn	(x=0X20B91);
	op_stkvar	(x,	1);
	create_insn	(x=0X20BA1);
	op_stkvar	(x,	1);
	create_insn	(x=0X20BAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X20BAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X20BB7);
	op_stkvar	(x,	0);
	create_insn	(x=0X20BC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X20BD4);
	op_stkvar	(x,	0);
	create_insn	(x=0X20BD8);
	op_stkvar	(x,	0);
	create_insn	(x=0X20BE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X20BE9);
	op_stkvar	(x,	0);
	create_insn	(x=0X20BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X20C02);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C05);
	op_stkvar	(x,	1);
	create_insn	(x=0X20C08);
	op_hex		(x,	1);
	create_insn	(0X20C15);
	create_insn	(x=0X20C17);
	op_stkvar	(x,	1);
	create_insn	(x=0X20C1A);
	op_hex		(x,	1);
	create_insn	(x=0X20C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X20C2B);
	op_stkvar	(x,	1);
	create_insn	(x=0X20C34);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C3D);
	op_stkvar	(x,	0);
	create_insn	(0X20C4C);
	create_insn	(x=0X20C4E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C52);
	op_stkvar	(x,	1);
	create_insn	(x=0X20C62);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C67);
	op_stkvar	(x,	1);
	create_insn	(x=0X20C6B);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X20C7B);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C81);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C85);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C8E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20C9A);
	op_stkvar	(x,	0);
	create_insn	(x=0X20CAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X20CAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X20CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X20CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X20CC4);
	op_stkvar	(x,	0);
	create_insn	(x=0X20CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X20CD5);
	op_stkvar	(x,	0);
	create_insn	(x=0X20CD8);
	op_stkvar	(x,	0);
	create_insn	(x=0X20CDB);
	op_stkvar	(x,	0);
	create_insn	(x=0X20CDF);
	op_stkvar	(x,	0);
	create_insn	(x=0X20CE5);
	op_stkvar	(x,	0);
	create_insn	(x=0X20CEC);
	op_stkvar	(x,	0);
	create_insn	(x=0X20CF0);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D06);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D0F);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D18);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D20);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D26);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D2C);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X20D3B);
	op_hex		(x,	1);
	create_insn	(x=0X20D41);
	op_stkvar	(x,	1);
	create_insn	(x=0X20D44);
	op_hex		(x,	1);
	create_insn	(x=0X20D4F);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D53);
	op_stkvar	(x,	1);
	create_insn	(x=0X20D63);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D67);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D71);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D74);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X20D7D);
	op_stkvar	(x,	1);
	create_insn	(x=0X20D8D);
	op_stkvar	(x,	0);
	create_insn	(x=0X20D91);
	op_stkvar	(x,	1);
	create_insn	(x=0X20D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X20DA0);
	op_stkvar	(x,	0);
	create_insn	(x=0X20DA9);
	op_stkvar	(x,	0);
	create_insn	(x=0X20DAE);
	op_stkvar	(x,	0);
	create_insn	(x=0X20DB4);
	op_stkvar	(x,	0);
	create_insn	(x=0X20DB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X20DC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X20DCF);
	op_stkvar	(x,	1);
	create_insn	(x=0X20DDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X20DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X20DE7);
	op_stkvar	(x,	1);
	create_insn	(x=0X20DF5);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E03);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E1B);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E2B);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E35);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E43);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E51);
	op_stkvar	(x,	0);
	create_insn	(x=0X20E54);
	op_stkvar	(x,	0);
	create_insn	(x=0X20E57);
	op_stkvar	(x,	0);
	create_insn	(x=0X20E5E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20E62);
	op_stkvar	(x,	0);
	create_insn	(x=0X20E68);
	op_stkvar	(x,	0);
	create_insn	(x=0X20E6B);
	op_stkvar	(x,	0);
	create_insn	(x=0X20E6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E71);
	op_hex		(x,	1);
	create_insn	(x=0X20E79);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E7C);
	op_hex		(x,	1);
	create_insn	(x=0X20E85);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X20E93);
	op_stkvar	(x,	1);
	create_insn	(x=0X20EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X20EA3);
	op_stkvar	(x,	0);
	create_insn	(x=0X20EA6);
	op_stkvar	(x,	0);
	create_insn	(x=0X20EB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X20EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X20EC3);
	op_stkvar	(x,	1);
	create_insn	(x=0X20ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X20ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X20EDD);
	op_stkvar	(x,	1);
	create_insn	(x=0X20EE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X20EE7);
	op_stkvar	(x,	1);
	create_insn	(x=0X20EF0);
	op_stkvar	(x,	0);
	create_insn	(x=0X20EF4);
	op_stkvar	(x,	0);
	create_insn	(x=0X20EFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X20F03);
	op_stkvar	(x,	1);
	create_insn	(x=0X20F0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X20F15);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F19);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F22);
	op_stkvar	(x,	1);
	create_insn	(x=0X20F26);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X20F2E);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F32);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F36);
	op_stkvar	(x,	1);
	create_insn	(x=0X20F40);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F57);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F5C);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F61);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F6A);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F6F);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F79);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F83);
	op_stkvar	(x,	0);
	create_insn	(x=0X20F87);
	op_stkvar	(x,	1);
	create_insn	(x=0X20FA0);
	op_stkvar	(x,	0);
	create_insn	(x=0X20FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X20FAB);
	op_stkvar	(x,	1);
	create_insn	(x=0X20FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X20FBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X20FC1);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X20FC9);
	op_stkvar	(x,	0);
	create_insn	(x=0X20FCD);
	op_stkvar	(x,	0);
	create_insn	(x=0X20FE3);
	op_stkvar	(x,	0);
	create_insn	(x=0X20FE9);
	op_stkvar	(x,	1);
	create_insn	(x=0X20FED);
	op_stkvar	(x,	1);
	create_insn	(x=0X20FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X2100F);
	op_stkvar	(x,	0);
	create_insn	(x=0X21018);
	op_stkvar	(x,	0);
	create_insn	(x=0X21021);
	op_stkvar	(x,	0);
	create_insn	(x=0X21029);
	op_stkvar	(x,	0);
	create_insn	(x=0X21030);
	op_stkvar	(x,	1);
	create_insn	(x=0X21035);
	op_stkvar	(x,	1);
	create_insn	(x=0X2103A);
	op_stkvar	(x,	1);
	create_insn	(x=0X21048);
	op_stkvar	(x,	1);
	create_insn	(x=0X2104C);
	op_stkvar	(x,	0);
	create_insn	(x=0X21050);
	op_stkvar	(x,	0);
	create_insn	(x=0X21056);
	op_stkvar	(x,	1);
	create_insn	(x=0X21060);
	op_stkvar	(x,	0);
	create_insn	(0X2106C);
	create_insn	(0X21072);
	create_insn	(x=0X21078);
	op_stkvar	(x,	0);
	create_insn	(x=0X2107C);
	op_stkvar	(x,	0);
	create_insn	(x=0X21085);
	op_stkvar	(x,	0);
	create_insn	(x=0X21089);
	op_stkvar	(x,	0);
	create_insn	(x=0X21090);
	op_stkvar	(x,	0);
	create_insn	(x=0X21094);
	op_stkvar	(x,	0);
	create_insn	(x=0X21098);
	op_stkvar	(x,	0);
	create_insn	(x=0X210A1);
	op_stkvar	(x,	0);
	create_insn	(x=0X210A6);
	op_stkvar	(x,	0);
	create_insn	(x=0X210AA);
	op_stkvar	(x,	0);
	create_insn	(x=0X210B3);
	op_stkvar	(x,	0);
	create_insn	(x=0X210BF);
	op_stkvar	(x,	0);
	create_insn	(x=0X210CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X210CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X210D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X210E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X210ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X210F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X210FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X21106);
	op_stkvar	(x,	1);
	create_insn	(x=0X2110F);
	op_stkvar	(x,	1);
	create_insn	(x=0X21116);
	op_stkvar	(x,	1);
	create_insn	(x=0X2111D);
	op_stkvar	(x,	1);
	create_insn	(x=0X21120);
	op_hex		(x,	1);
	create_insn	(x=0X21128);
	op_stkvar	(x,	1);
	create_insn	(x=0X2112B);
	op_hex		(x,	1);
	create_insn	(x=0X21130);
	op_stkvar	(x,	0);
	create_insn	(x=0X21134);
	op_stkvar	(x,	0);
	create_insn	(x=0X21138);
	op_stkvar	(x,	0);
	create_insn	(x=0X2113E);
	op_stkvar	(x,	0);
	create_insn	(x=0X21141);
	op_stkvar	(x,	1);
	create_insn	(x=0X21148);
	op_stkvar	(x,	1);
	create_insn	(x=0X2114D);
	op_stkvar	(x,	0);
	create_insn	(x=0X21154);
	op_stkvar	(x,	1);
	create_insn	(x=0X21159);
	op_stkvar	(x,	0);
	create_insn	(x=0X2115C);
	op_stkvar	(x,	1);
	create_insn	(x=0X21166);
	op_stkvar	(x,	1);
	create_insn	(0X2117A);
	create_insn	(0X2118E);
	create_insn	(x=0X2120A);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X21210);
	op_stkvar	(x,	1);
	create_insn	(x=0X21213);
	op_stkvar	(x,	1);
	create_insn	(x=0X2121A);
	op_stkvar	(x,	1);
	create_insn	(x=0X21220);
	op_stkvar	(x,	0);
	create_insn	(x=0X21224);
	op_stkvar	(x,	0);
	create_insn	(x=0X21228);
	op_stkvar	(x,	0);
	create_insn	(x=0X2122C);
	op_stkvar	(x,	0);
	create_insn	(x=0X2123B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2123E);
	op_hex		(x,	1);
	create_insn	(0X21248);
	create_insn	(x=0X2124E);
	op_stkvar	(x,	0);
	create_insn	(x=0X2125B);
	op_stkvar	(x,	0);
	create_insn	(x=0X21260);
	op_stkvar	(x,	0);
	create_insn	(x=0X21265);
	op_stkvar	(x,	0);
	create_insn	(x=0X2126D);
	op_stkvar	(x,	0);
	create_insn	(x=0X21271);
	op_stkvar	(x,	0);
	create_insn	(x=0X21274);
	op_stkvar	(x,	0);
	create_insn	(x=0X21277);
	op_stkvar	(x,	0);
	create_insn	(x=0X2127B);
	op_stkvar	(x,	1);
	create_insn	(x=0X21289);
	op_stkvar	(x,	0);
	create_insn	(x=0X2128D);
	op_stkvar	(x,	0);
	create_insn	(x=0X21291);
	op_stkvar	(x,	1);
	create_insn	(x=0X2129F);
	op_stkvar	(x,	1);
	create_insn	(x=0X212A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X212AC);
	op_stkvar	(x,	0);
	create_insn	(x=0X212B0);
	op_stkvar	(x,	0);
	create_insn	(x=0X212B4);
	op_stkvar	(x,	0);
	create_insn	(x=0X212B8);
	op_stkvar	(x,	0);
	create_insn	(x=0X212C1);
	op_stkvar	(x,	0);
	create_insn	(0X212D0);
	create_insn	(x=0X212D3);
	op_stkvar	(x,	0);
	create_insn	(x=0X212E2);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X212E8);
	op_stkvar	(x,	1);
	create_insn	(0X212F8);
	create_insn	(x=0X21306);
	op_stkvar	(x,	1);
	create_insn	(x=0X21316);
	op_stkvar	(x,	0);
	create_insn	(x=0X21321);
	op_stkvar	(x,	1);
	create_insn	(x=0X21330);
	op_stkvar	(x,	1);
	create_insn	(x=0X21342);
	op_stkvar	(x,	0);
	create_insn	(x=0X21349);
	op_stkvar	(x,	0);
	create_insn	(x=0X21350);
	op_stkvar	(x,	0);
	create_insn	(x=0X21353);
	op_stkvar	(x,	0);
	create_insn	(x=0X21358);
	op_stkvar	(x,	1);
	create_insn	(x=0X21365);
	op_stkvar	(x,	0);
	create_insn	(x=0X21376);
	op_stkvar	(x,	1);
	create_insn	(x=0X21386);
	op_stkvar	(x,	0);
	create_insn	(x=0X2138D);
	op_stkvar	(x,	1);
	create_insn	(x=0X21391);
	op_stkvar	(x,	1);
	create_insn	(x=0X21398);
	op_stkvar	(x,	1);
	create_insn	(x=0X2139B);
	op_stkvar	(x,	1);
	create_insn	(x=0X213A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X213C6);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X213CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X213CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X213D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X213D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X213E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X213E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X213F6);
	op_stkvar	(x,	0);
	create_insn	(x=0X213FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X2141C);
	op_stkvar	(x,	0);
	create_insn	(x=0X21420);
	op_stkvar	(x,	1);
	create_insn	(x=0X21435);
	op_stkvar	(x,	1);
	create_insn	(x=0X21443);
	op_stkvar	(x,	1);
	create_insn	(x=0X21446);
	op_stkvar	(x,	1);
	create_insn	(x=0X2144D);
	op_stkvar	(x,	0);
	create_insn	(x=0X21454);
	op_stkvar	(x,	1);
	create_insn	(x=0X21460);
	op_stkvar	(x,	0);
	create_insn	(x=0X21467);
	op_stkvar	(x,	0);
	create_insn	(x=0X2146C);
	op_stkvar	(x,	1);
	create_insn	(x=0X21471);
	op_stkvar	(x,	1);
	create_insn	(x=0X21476);
	op_stkvar	(x,	1);
	create_insn	(x=0X2148E);
	op_stkvar	(x,	0);
	create_insn	(x=0X214A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X214A9);
	op_stkvar	(x,	0);
	create_insn	(x=0X214AD);
	op_stkvar	(x,	1);
	create_insn	(x=0X214BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X214C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X214CD);
	op_stkvar	(x,	1);
	create_insn	(0X214D2);
	create_insn	(0X214DA);
	create_insn	(x=0X214DD);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(0X214F9);
	create_insn	(0X2158B);
	create_insn	(x=0X215F4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X215FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X215FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X21601);
	op_stkvar	(x,	0);
	create_insn	(x=0X21605);
	op_stkvar	(x,	0);
	create_insn	(x=0X21608);
	op_stkvar	(x,	1);
	create_insn	(x=0X21610);
	op_stkvar	(x,	0);
	create_insn	(x=0X21613);
	op_stkvar	(x,	1);
	create_insn	(x=0X2161A);
	op_stkvar	(x,	1);
	create_insn	(x=0X21620);
	op_stkvar	(x,	0);
	create_insn	(x=0X21627);
	op_stkvar	(x,	1);
	create_insn	(x=0X2162A);
	op_hex		(x,	1);
	create_insn	(0X21634);
	create_insn	(x=0X2163A);
	op_stkvar	(x,	0);
	create_insn	(x=0X2163D);
	op_stkvar	(x,	0);
	create_insn	(x=0X2164A);
	op_stkvar	(x,	0);
	create_insn	(x=0X21651);
	op_stkvar	(x,	0);
	create_insn	(x=0X21658);
	op_stkvar	(x,	1);
	create_insn	(x=0X2165B);
	op_stkvar	(x,	0);
	create_insn	(x=0X21660);
	op_stkvar	(x,	1);
	create_insn	(x=0X21663);
	op_stkvar	(x,	0);
	create_insn	(x=0X2166B);
	op_stkvar	(x,	0);
	create_insn	(x=0X2166F);
	op_stkvar	(x,	0);
	create_insn	(x=0X21672);
	op_stkvar	(x,	0);
	create_insn	(x=0X21675);
	op_stkvar	(x,	0);
	create_insn	(x=0X21679);
	op_stkvar	(x,	1);
	create_insn	(x=0X21687);
	op_stkvar	(x,	0);
	create_insn	(x=0X2168B);
	op_stkvar	(x,	0);
	create_insn	(x=0X2168F);
	op_stkvar	(x,	1);
	create_insn	(x=0X2169D);
	op_stkvar	(x,	1);
	create_insn	(x=0X216A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X216AA);
	op_stkvar	(x,	0);
	create_insn	(x=0X216AF);
	op_stkvar	(x,	0);
	create_insn	(x=0X216B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X216BB);
	op_stkvar	(x,	0);
	create_insn	(x=0X216BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X216C5);
	op_stkvar	(x,	0);
	create_insn	(x=0X216CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X216D3);
	op_stkvar	(x,	0);
	create_insn	(x=0X216DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X216E4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X216EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X216ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X216F5);
	op_stkvar	(x,	1);
	create_insn	(0X21705);
	create_insn	(x=0X21713);
	op_stkvar	(x,	1);
	create_insn	(x=0X21721);
	op_stkvar	(x,	1);
	create_insn	(x=0X21728);
	op_stkvar	(x,	1);
	create_insn	(x=0X2172E);
	op_stkvar	(x,	1);
	create_insn	(x=0X21731);
	op_stkvar	(x,	1);
	create_insn	(x=0X2173A);
	op_stkvar	(x,	1);
	create_insn	(0X21750);
	create_insn	(x=0X21761);
	op_stkvar	(x,	0);
	create_insn	(x=0X21766);
	op_stkvar	(x,	1);
	create_insn	(x=0X2177D);
	op_stkvar	(x,	1);
	create_insn	(x=0X21780);
	op_stkvar	(x,	1);
	create_insn	(0X21794);
	create_insn	(x=0X21797);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(0X217B4);
	create_insn	(0X217BF);
	create_insn	(0X21864);
	create_insn	(0X218BA);
	create_insn	(x=0X218BE);
	op_hex		(x,	0);
	set_cmt	(0X218C2,	"DMA page register 74LS612:\nChannel 5 (address bits 17-23)",	0);
	create_insn	(x=0X218C2);
	op_hex		(x,	0);
	create_insn	(0X21997);
	create_insn	(x=0X219DA);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X219DF);
	op_stkvar	(x,	1);
	create_insn	(x=0X219E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X219E9);
	op_stkvar	(x,	0);
	create_insn	(x=0X219F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X219FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A0E);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A25);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X21A30);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X21A35);
	op_stkvar	(x,	1);
	create_insn	(x=0X21A38);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X21A3F);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A46);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A53);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A57);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A5D);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A6A);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A74);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A87);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A8B);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A91);
	op_stkvar	(x,	0);
	create_insn	(x=0X21A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X21A9C);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X21AA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AA9);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AB0);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AB3);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AB6);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ABF);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AC3);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ACA);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ACE);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AD2);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AD5);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AD8);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ADB);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AE4);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AE7);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AEA);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AF5);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AF9);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AFC);
	op_stkvar	(x,	0);
	create_insn	(x=0X21AFF);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B02);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B05);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B08);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B0B);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B0E);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B11);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B14);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B17);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B1A);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B1D);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B20);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B23);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B26);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B29);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B2F);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B32);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B35);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B39);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B3C);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B3F);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B42);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B45);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B48);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B4B);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B4E);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B51);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B54);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B57);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B5A);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B5D);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B60);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B63);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B66);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B69);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B6C);
	op_stkvar	(x,	0);
	create_insn	(x=0X21B73);
	op_stkvar	(x,	1);
	create_insn	(x=0X21B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X21B95);
	op_stkvar	(x,	1);
	create_insn	(x=0X21BC2);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(0X21BDA);
	create_insn	(x=0X21BDC);
	op_hex		(x,	1);
	create_insn	(x=0X21C0C);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X21C1B);
	op_stkvar	(x,	0);
	create_insn	(x=0X21C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X21C31);
	op_stkvar	(x,	0);
	create_insn	(x=0X21C39);
	op_stkvar	(x,	1);
	create_insn	(x=0X21C6E);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X21C87);
	op_stkvar	(x,	0);
	create_insn	(x=0X21C8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X21C8D);
	op_hex		(x,	1);
	create_insn	(x=0X21CA0);
	op_stkvar	(x,	0);
	create_insn	(x=0X21CA9);
	op_stkvar	(x,	1);
	create_insn	(x=0X21CC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X21CDC);
	op_hex		(x,	1);
	create_insn	(x=0X21CE9);
	op_stkvar	(x,	1);
	create_insn	(x=0X21CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D31);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D3D);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D44);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X21D49);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D55);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D6A);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X21D6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D72);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D7B);
	op_stkvar	(x,	0);
	create_insn	(x=0X21D7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X21D85);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D98);
	op_stkvar	(x,	0);
	create_insn	(x=0X21D9C);
	op_stkvar	(x,	0);
	create_insn	(x=0X21DA3);
	op_stkvar	(x,	1);
	create_insn	(x=0X21DA6);
	op_hex		(x,	1);
	create_insn	(x=0X21DAD);
	op_hex		(x,	1);
	create_insn	(x=0X21DB4);
	op_hex		(x,	1);
	create_insn	(0X21DBB);
	create_insn	(0X21DD4);
	create_insn	(x=0X21DE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X21DF3);
	op_stkvar	(x,	1);
	create_insn	(x=0X21E0D);
	op_stkvar	(x,	1);
	create_insn	(0X21E20);
	create_insn	(x=0X21E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X21E27);
	op_stkvar	(x,	1);
	create_insn	(x=0X21E2A);
	op_hex		(x,	1);
	create_insn	(0X21E3C);
	create_insn	(x=0X21E70);
	op_dec		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X21E76);
	op_stkvar	(x,	1);
	create_insn	(x=0X21E81);
	op_stkvar	(x,	0);
	create_insn	(0X21E90);
	create_insn	(x=0X21E9D);
	op_hex		(x,	1);
	create_insn	(x=0X21EA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X21EAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X21EB1);
	op_hex		(x,	1);
	create_insn	(x=0X21EC5);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ECA);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ECD);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ED2);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ED5);
	op_stkvar	(x,	0);
	create_insn	(x=0X21ED8);
	op_stkvar	(x,	0);
	create_insn	(x=0X21EE1);
	op_hex		(x,	1);
	create_insn	(x=0X21EED);
	op_stkvar	(x,	1);
	create_insn	(x=0X21EF0);
	op_hex		(x,	1);
	create_insn	(x=0X21EF5);
	op_stkvar	(x,	0);
	create_insn	(x=0X21EFC);
	op_stkvar	(x,	0);
	create_insn	(x=0X21F07);
	op_stkvar	(x,	0);
	create_insn	(x=0X21F0A);
	op_stkvar	(x,	0);
	create_insn	(x=0X21F0D);
	op_stkvar	(x,	1);
	create_insn	(x=0X21F10);
	op_hex		(x,	1);
	create_insn	(x=0X21F29);
	op_stkvar	(x,	1);
	create_insn	(x=0X21F42);
	op_hex		(x,	1);
	create_insn	(x=0X21F4B);
	op_stkvar	(x,	1);
	create_insn	(x=0X21F56);
	op_stkvar	(x,	0);
	create_insn	(x=0X21F59);
	op_stkvar	(x,	0);
	create_insn	(x=0X21F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X21F81);
	op_hex		(x,	1);
	create_insn	(x=0X21F8A);
	op_stkvar	(x,	0);
	create_insn	(x=0X21F8E);
	op_stkvar	(x,	1);
	create_insn	(0X21FA0);
	create_insn	(0X21FA2);
	create_insn	(x=0X21FAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FAD);
	op_hex		(x,	1);
	create_insn	(x=0X21FB6);
	op_stkvar	(x,	0);
	create_insn	(x=0X21FBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FCB);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FD3);
	op_hex		(x,	1);
	create_insn	(x=0X21FE2);
	op_hex		(x,	1);
	create_insn	(x=0X21FE9);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FFB);
	op_stkvar	(x,	1);
	create_insn	(x=0X22002);
	op_hex		(x,	1);
	create_insn	(x=0X2200B);
	op_hex		(x,	1);
	create_insn	(x=0X22010);
	op_stkvar	(x,	1);
	create_insn	(x=0X2201A);
	op_hex		(x,	1);
	create_insn	(x=0X22025);
	op_hex		(x,	1);
	create_insn	(x=0X2202E);
	op_hex		(x,	1);
	create_insn	(0X22033);
	create_insn	(x=0X2203C);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22040);
	op_stkvar	(x,	1);
	create_insn	(x=0X22043);
	op_stkvar	(x,	1);
	create_insn	(x=0X2204C);
	op_stkvar	(x,	0);
	create_insn	(x=0X22058);
	op_hex		(x,	1);
	create_insn	(x=0X22062);
	op_stkvar	(x,	1);
	create_insn	(x=0X22075);
	op_hex		(x,	1);
	create_insn	(x=0X2207E);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X2208B);
	op_stkvar	(x,	0);
	create_insn	(x=0X2208E);
	op_stkvar	(x,	1);
	create_insn	(x=0X2209A);
	op_stkvar	(x,	0);
	create_insn	(x=0X220A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X220A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X220AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X220BA);
	op_hex		(x,	1);
	create_insn	(x=0X220C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X220DF);
	op_stkvar	(x,	0);
	create_insn	(x=0X220E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X220E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X220F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X220FF);
	op_hex		(x,	1);
	create_insn	(x=0X22114);
	op_stkvar	(x,	0);
	create_insn	(x=0X2211B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2211F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22129);
	op_stkvar	(x,	1);
	create_insn	(x=0X22138);
	op_hex		(x,	1);
	create_insn	(x=0X22149);
	op_stkvar	(x,	0);
	create_insn	(x=0X2215F);
	op_stkvar	(x,	0);
	create_insn	(x=0X22164);
	op_stkvar	(x,	1);
	create_insn	(x=0X2216C);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22179);
	op_stkvar	(x,	0);
	create_insn	(x=0X2217C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22188);
	op_stkvar	(x,	0);
	create_insn	(x=0X2218F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22192);
	op_stkvar	(x,	1);
	create_insn	(x=0X2219D);
	op_stkvar	(x,	1);
	create_insn	(x=0X221A6);
	op_hex		(x,	1);
	create_insn	(x=0X221B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X221C7);
	op_stkvar	(x,	0);
	create_insn	(x=0X221CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X221CD);
	op_stkvar	(x,	1);
	create_insn	(x=0X221E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X221E7);
	op_hex		(x,	1);
	create_insn	(x=0X221FA);
	op_stkvar	(x,	0);
	create_insn	(x=0X22201);
	op_stkvar	(x,	1);
	create_insn	(x=0X22204);
	op_stkvar	(x,	1);
	create_insn	(x=0X22207);
	op_stkvar	(x,	1);
	create_insn	(x=0X2221C);
	op_hex		(x,	1);
	create_insn	(x=0X22221);
	op_stkvar	(x,	1);
	create_insn	(x=0X2222E);
	op_stkvar	(x,	0);
	create_insn	(0X22244);
	create_insn	(x=0X22256);
	op_stkvar	(x,	0);
	create_insn	(x=0X22260);
	op_stkvar	(x,	0);
	create_insn	(0X2226B);
	create_insn	(0X22272);
	create_insn	(x=0X22275);
	op_stkvar	(x,	0);
	create_insn	(x=0X2227C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2227F);
	op_stkvar	(x,	1);
	create_insn	(0X22284);
	create_insn	(x=0X22288);
	op_stkvar	(x,	0);
	create_insn	(0X22296);
	create_insn	(x=0X2229B);
	op_stkvar	(x,	0);
	create_insn	(x=0X222AB);
	op_stkvar	(x,	0);
	create_insn	(x=0X222B5);
	op_stkvar	(x,	1);
	create_insn	(x=0X222CB);
	op_hex		(x,	1);
	create_insn	(x=0X222D1);
	op_hex		(x,	1);
	create_insn	(x=0X222DA);
	op_hex		(x,	1);
	create_insn	(x=0X222EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X22302);
	op_hex		(x,	1);
	create_insn	(x=0X2230C);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(0X2237F);
	create_insn	(0X22385);
	create_insn	(x=0X22443);
	op_hex		(x,	1);
	create_insn	(0X2244A);
	create_insn	(x=0X22454);
	op_hex		(x,	1);
	create_insn	(x=0X22462);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X2246E);
	op_hex		(x,	1);
	create_insn	(x=0X22478);
	op_hex		(x,	1);
	create_insn	(x=0X22493);
	op_hex		(x,	1);
	create_insn	(0X224A8);
	create_insn	(0X22538);
	create_insn	(0X2254F);
	create_insn	(x=0X2259A);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X225A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X225A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X225A7);
	op_stkvar	(x,	0);
	create_insn	(x=0X225AB);
	op_stkvar	(x,	1);
	create_insn	(x=0X225AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X225B3);
	op_stkvar	(x,	0);
	create_insn	(0X225BF);
	create_insn	(x=0X225C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X225C5);
	op_stkvar	(x,	1);
	create_insn	(x=0X225C9);
	op_stkvar	(x,	0);
	create_insn	(x=0X225D1);
	op_stkvar	(x,	0);
	create_insn	(x=0X225D4);
	op_stkvar	(x,	0);
	create_insn	(x=0X225D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X225DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X225DE);
	op_stkvar	(x,	0);
	create_insn	(x=0X225E9);
	op_hex		(x,	1);
	create_insn	(x=0X225EC);
	op_hex		(x,	1);
	create_insn	(x=0X225EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X225F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X225F7);
	op_stkvar	(x,	0);
	create_insn	(x=0X225FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X225FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X22601);
	op_stkvar	(x,	0);
	create_insn	(x=0X22607);
	op_hex		(x,	1);
	create_insn	(x=0X2260E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22618);
	op_stkvar	(x,	1);
	create_insn	(x=0X2261C);
	op_hex		(x,	1);
	create_insn	(x=0X22624);
	op_stkvar	(x,	0);
	create_insn	(x=0X22628);
	op_stkvar	(x,	0);
	create_insn	(x=0X2262C);
	op_stkvar	(x,	0);
	create_insn	(x=0X22633);
	op_stkvar	(x,	0);
	create_insn	(x=0X22637);
	op_stkvar	(x,	0);
	create_insn	(0X22642);
	create_insn	(x=0X22645);
	op_stkvar	(x,	1);
	create_insn	(x=0X22648);
	op_hex		(x,	1);
	create_insn	(0X22650);
	create_insn	(x=0X22656);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X2265C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2265F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22662);
	op_stkvar	(x,	1);
	create_insn	(x=0X2266E);
	op_stkvar	(x,	1);
	create_insn	(0X2267D);
	create_insn	(x=0X2268A);
	op_stkvar	(x,	0);
	create_insn	(x=0X2268D);
	op_stkvar	(x,	0);
	create_insn	(x=0X22698);
	op_stkvar	(x,	0);
	create_insn	(x=0X226A7);
	op_stkvar	(x,	0);
	create_insn	(x=0X226B8);
	op_stkvar	(x,	0);
	create_insn	(x=0X226BB);
	op_stkvar	(x,	0);
	create_insn	(x=0X226C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X226CF);
	op_hex		(x,	1);
	create_insn	(x=0X226D7);
	op_hex		(x,	1);
	create_insn	(x=0X226DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X226E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X226E5);
	op_stkvar	(x,	0);
	create_insn	(x=0X22702);
	op_stkvar	(x,	1);
	create_insn	(x=0X22705);
	op_stkvar	(x,	1);
	create_insn	(x=0X22708);
	op_stkvar	(x,	1);
	create_insn	(x=0X22719);
	op_stkvar	(x,	0);
	create_insn	(x=0X22725);
	op_stkvar	(x,	0);
	create_insn	(x=0X2272B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2272E);
	op_hex		(x,	1);
	create_insn	(x=0X22735);
	op_stkvar	(x,	0);
	create_insn	(x=0X22738);
	op_stkvar	(x,	1);
	create_insn	(x=0X2273B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2274D);
	op_stkvar	(x,	0);
	create_insn	(x=0X22751);
	op_stkvar	(x,	0);
	create_insn	(x=0X22754);
	op_stkvar	(x,	0);
	create_insn	(x=0X22761);
	op_stkvar	(x,	0);
	create_insn	(x=0X22768);
	op_stkvar	(x,	0);
	create_insn	(x=0X2276E);
	op_stkvar	(x,	0);
	create_insn	(x=0X22779);
	op_stkvar	(x,	0);
	create_insn	(x=0X2277C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2278F);
	op_stkvar	(x,	0);
	create_insn	(x=0X2279C);
	op_stkvar	(x,	0);
	create_insn	(x=0X227A6);
	op_stkvar	(x,	0);
	create_insn	(x=0X227AC);
	op_stkvar	(x,	0);
	create_insn	(x=0X227AF);
	op_stkvar	(x,	0);
	create_insn	(x=0X227BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X227C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X227D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X227DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X227DE);
	op_hex		(x,	1);
	create_insn	(x=0X227E1);
	op_hex		(x,	1);
	create_insn	(x=0X227E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X227E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X227EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X227F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X227FB);
	op_hex		(x,	1);
	create_insn	(x=0X22801);
	op_hex		(x,	1);
	create_insn	(x=0X22806);
	op_stkvar	(x,	1);
	create_insn	(0X22816);
	create_insn	(x=0X2281B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2281E);
	op_stkvar	(x,	0);
	create_insn	(x=0X22822);
	op_stkvar	(x,	0);
	create_insn	(x=0X22826);
	op_stkvar	(x,	0);
	create_insn	(x=0X22833);
	op_stkvar	(x,	1);
	create_insn	(x=0X22839);
	op_hex		(x,	1);
	create_insn	(x=0X22841);
	op_stkvar	(x,	0);
	create_insn	(x=0X22845);
	op_stkvar	(x,	0);
	create_insn	(x=0X2285A);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22860);
	op_stkvar	(x,	1);
	create_insn	(x=0X22863);
	op_stkvar	(x,	1);
	create_insn	(x=0X22866);
	op_stkvar	(x,	1);
	create_insn	(x=0X22873);
	op_stkvar	(x,	1);
	create_insn	(x=0X22880);
	op_stkvar	(x,	0);
	create_insn	(x=0X2288C);
	op_stkvar	(x,	0);
	create_insn	(x=0X22892);
	op_stkvar	(x,	1);
	create_insn	(x=0X22895);
	op_hex		(x,	1);
	create_insn	(x=0X2289A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2289D);
	op_hex		(x,	1);
	create_insn	(x=0X228A8);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X228AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X228B1);
	op_stkvar	(x,	1);
	create_insn	(x=0X228B9);
	op_stkvar	(x,	0);
	create_insn	(x=0X228BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X228CA);
	op_hex		(x,	1);
	create_insn	(x=0X228DF);
	op_hex		(x,	1);
	create_insn	(x=0X228E9);
	op_stkvar	(x,	0);
	create_insn	(x=0X228EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X228EF);
	op_stkvar	(x,	0);
	create_insn	(0X228F8);
	create_insn	(x=0X22900);
	op_stkvar	(x,	0);
	create_insn	(x=0X22908);
	op_stkvar	(x,	0);
	create_insn	(0X2290F);
	create_insn	(x=0X2291F);
	op_hex		(x,	1);
	create_insn	(x=0X22922);
	op_stkvar	(x,	0);
	create_insn	(x=0X22925);
	op_stkvar	(x,	0);
	create_insn	(x=0X22928);
	op_stkvar	(x,	0);
	create_insn	(x=0X22943);
	op_stkvar	(x,	0);
	create_insn	(x=0X2294B);
	op_stkvar	(x,	0);
	create_insn	(x=0X22951);
	op_stkvar	(x,	0);
	create_insn	(x=0X22958);
	op_stkvar	(x,	0);
	create_insn	(x=0X2295B);
	op_stkvar	(x,	0);
	create_insn	(x=0X2295E);
	op_stkvar	(x,	0);
	create_insn	(x=0X22968);
	op_stkvar	(x,	0);
	create_insn	(x=0X2296B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2297C);
	op_stkvar	(x,	0);
	create_insn	(x=0X22986);
	op_stkvar	(x,	0);
	create_insn	(x=0X22989);
	op_stkvar	(x,	0);
	create_insn	(x=0X22996);
	op_stkvar	(x,	1);
	create_insn	(x=0X22999);
	op_stkvar	(x,	1);
	create_insn	(x=0X229A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X229A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X229B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X229BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X229C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X229CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X229D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X229D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X229E4);
	op_hex		(x,	1);
	create_insn	(x=0X229E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X229F2);
	op_stkvar	(x,	0);
	create_insn	(x=0X229F6);
	op_stkvar	(x,	0);
	create_insn	(x=0X229FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A0D);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A13);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A23);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A26);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A35);
	op_hex		(x,	1);
	create_insn	(x=0X22A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A43);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A46);
	op_hex		(x,	1);
	create_insn	(x=0X22A4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A56);
	op_stkvar	(x,	1);
	create_insn	(0X22A65);
	create_insn	(x=0X22A69);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A77);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A83);
	op_stkvar	(x,	0);
	create_insn	(x=0X22A86);
	op_stkvar	(x,	0);
	create_insn	(x=0X22A89);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A90);
	op_hex		(x,	1);
	create_insn	(x=0X22A98);
	op_hex		(x,	1);
	create_insn	(x=0X22AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X22AB5);
	op_stkvar	(x,	0);
	create_insn	(x=0X22AB9);
	op_stkvar	(x,	1);
	create_insn	(x=0X22ABF);
	op_stkvar	(x,	0);
	create_insn	(x=0X22AC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X22AD1);
	op_stkvar	(x,	1);
	create_insn	(x=0X22ADB);
	op_stkvar	(x,	1);
	create_insn	(x=0X22ADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X22AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22AF1);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B01);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B13);
	op_stkvar	(x,	0);
	create_insn	(x=0X22B17);
	op_stkvar	(x,	0);
	create_insn	(x=0X22B22);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B26);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B31);
	op_hex		(x,	1);
	create_insn	(x=0X22B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B39);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B46);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B4D);
	op_hex		(x,	1);
	create_insn	(x=0X22B52);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B55);
	op_hex		(x,	1);
	create_insn	(x=0X22B5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B65);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B69);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B78);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22B7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B81);
	op_stkvar	(x,	0);
	create_insn	(x=0X22B85);
	op_stkvar	(x,	0);
	create_insn	(x=0X22B89);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B97);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B9A);
	op_hex		(x,	1);
	create_insn	(x=0X22B9F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BBD);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BC4);
	op_hex		(x,	1);
	create_insn	(x=0X22BCC);
	op_hex		(x,	1);
	create_insn	(x=0X22BD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BDF);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BE3);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C00);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C09);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C0C);
	op_hex		(x,	1);
	create_insn	(x=0X22C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C1A);
	op_hex		(x,	1);
	create_insn	(x=0X22C1E);
	op_stkvar	(x,	0);
	create_insn	(x=0X22C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C2B);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C43);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C46);
	op_stkvar	(x,	1);
	create_insn	(0X22C58);
	create_insn	(x=0X22C5B);
	op_stkvar	(x,	0);
	create_insn	(x=0X22C69);
	op_stkvar	(x,	0);
	create_insn	(x=0X22C6C);
	op_stkvar	(x,	0);
	create_insn	(x=0X22C72);
	op_stkvar	(x,	0);
	create_insn	(x=0X22C79);
	op_stkvar	(x,	0);
	create_insn	(x=0X22C7C);
	op_stkvar	(x,	0);
	create_insn	(x=0X22C7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C86);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C89);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CA1);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X22CB0);
	op_stkvar	(x,	0);
	create_insn	(x=0X22CB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CB9);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CBD);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CCA);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CD3);
	op_stkvar	(x,	0);
	create_insn	(x=0X22CD7);
	op_stkvar	(x,	0);
	create_insn	(x=0X22CDB);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CEB);
	op_stkvar	(x,	0);
	create_insn	(x=0X22CEE);
	op_stkvar	(x,	0);
	create_insn	(x=0X22CF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CFC);
	op_hex		(x,	1);
	create_insn	(x=0X22D03);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D06);
	op_stkvar	(x,	1);
	create_insn	(0X22D0F);
	create_insn	(x=0X22D18);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D1B);
	op_stkvar	(x,	1);
	create_insn	(x=0X22D2C);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22D41);
	op_stkvar	(x,	1);
	create_insn	(x=0X22D44);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D47);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D4A);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D51);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D55);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D58);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D5C);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D70);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22D76);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22D7F);
	op_hex		(x,	1);
	create_insn	(x=0X22D88);
	op_stkvar	(x,	0);
	create_insn	(x=0X22D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22D9F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22DA7);
	op_stkvar	(x,	0);
	create_insn	(x=0X22DB0);
	op_stkvar	(x,	0);
	create_insn	(x=0X22DB9);
	op_stkvar	(x,	0);
	create_insn	(x=0X22DC7);
	op_hex		(x,	1);
	create_insn	(x=0X22DCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X22DD9);
	op_stkvar	(x,	1);
	create_insn	(x=0X22DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X22DF7);
	op_stkvar	(x,	0);
	create_insn	(x=0X22DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E0B);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E0F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E17);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E37);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E3B);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E49);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E51);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E54);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E57);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E6B);
	op_hex		(x,	1);
	create_insn	(x=0X22E72);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E76);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E7A);
	op_stkvar	(x,	0);
	create_insn	(0X22E8A);
	create_insn	(x=0X22E91);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E95);
	op_stkvar	(x,	0);
	create_insn	(x=0X22E99);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22EA7);
	op_stkvar	(x,	0);
	create_insn	(x=0X22EAB);
	op_stkvar	(x,	0);
	create_insn	(x=0X22EAE);
	op_stkvar	(x,	0);
	create_insn	(x=0X22EB4);
	op_stkvar	(x,	0);
	create_insn	(x=0X22EC0);
	op_stkvar	(x,	0);
	create_insn	(x=0X22EC4);
	op_stkvar	(x,	0);
	create_insn	(x=0X22EC8);
	op_stkvar	(x,	0);
	create_insn	(x=0X22ECB);
	op_stkvar	(x,	1);
	create_insn	(x=0X22ECE);
	op_stkvar	(x,	1);
	create_insn	(x=0X22EE2);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22EE7);
	op_stkvar	(x,	1);
	create_insn	(x=0X22EEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22EED);
	op_hex		(x,	1);
	create_insn	(x=0X22F0A);
	op_stkvar	(x,	0);
	create_insn	(x=0X22F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F17);
	op_hex		(x,	1);
	create_insn	(x=0X22F26);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22F2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F31);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F42);
	op_stkvar	(x,	0);
	create_insn	(x=0X22F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F56);
	op_hex		(x,	1);
	create_insn	(x=0X22F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F77);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F7A);
	op_hex		(x,	1);
	create_insn	(x=0X22F8C);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X22F92);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F95);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F9C);
	op_hex		(x,	1);
	create_insn	(x=0X22FA4);
	op_hex		(x,	1);
	create_insn	(x=0X22FC3);
	op_stkvar	(x,	0);
	create_insn	(x=0X22FCE);
	op_stkvar	(x,	0);
	create_insn	(x=0X22FD5);
	op_stkvar	(x,	0);
	create_insn	(x=0X22FD8);
	op_stkvar	(x,	0);
	create_insn	(x=0X22FE4);
	op_stkvar	(x,	0);
	create_insn	(x=0X22FE8);
	op_stkvar	(x,	0);
	create_insn	(x=0X22FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X22FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X22FFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X23005);
	op_hex		(x,	1);
	create_insn	(x=0X2300A);
	op_hex		(x,	1);
	create_insn	(x=0X23011);
	op_stkvar	(x,	1);
	create_insn	(x=0X2301C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2302F);
	op_stkvar	(x,	1);
	create_insn	(x=0X2303A);
	op_stkvar	(x,	1);
	create_insn	(0X23050);
	create_insn	(x=0X23054);
	op_stkvar	(x,	1);
	create_insn	(x=0X23057);
	op_stkvar	(x,	1);
	create_insn	(x=0X23061);
	op_stkvar	(x,	1);
	create_insn	(x=0X23078);
	op_stkvar	(x,	1);
	create_insn	(x=0X2308F);
	op_stkvar	(x,	0);
	create_insn	(0X2309E);
	create_insn	(x=0X230A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X230A5);
	op_stkvar	(x,	1);
	create_insn	(x=0X230B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X230C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X230D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X230E6);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X230EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X230EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X230FD);
	op_stkvar	(x,	1);
	create_insn	(x=0X23104);
	op_stkvar	(x,	0);
	create_insn	(x=0X23108);
	op_stkvar	(x,	0);
	create_insn	(x=0X23116);
	op_stkvar	(x,	0);
	create_insn	(x=0X23119);
	op_stkvar	(x,	1);
	create_insn	(x=0X2311C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2311F);
	op_stkvar	(x,	1);
	create_insn	(x=0X23126);
	op_stkvar	(x,	0);
	create_insn	(x=0X23131);
	op_stkvar	(x,	0);
	create_insn	(x=0X2314A);
	op_stkvar	(x,	0);
	create_insn	(x=0X23155);
	op_stkvar	(x,	0);
	create_insn	(x=0X2315C);
	op_stkvar	(x,	0);
	create_insn	(x=0X23167);
	op_stkvar	(x,	1);
	create_insn	(x=0X2316C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23178);
	op_stkvar	(x,	1);
	create_insn	(0X23186);
	create_insn	(0X2318B);
	create_insn	(x=0X23194);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X2319A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2319D);
	op_stkvar	(x,	0);
	create_insn	(x=0X231A2);
	op_stkvar	(x,	1);
	create_insn	(0X231B1);
	create_insn	(x=0X231BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X231C1);
	op_hex		(x,	1);
	create_insn	(x=0X231CA);
	op_hex		(x,	1);
	create_insn	(x=0X231D8);
	op_stkvar	(x,	0);
	create_insn	(x=0X231DF);
	op_stkvar	(x,	1);
	create_insn	(x=0X231ED);
	op_stkvar	(x,	0);
	create_insn	(x=0X231F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X231F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X23205);
	op_stkvar	(x,	0);
	create_insn	(x=0X23208);
	op_stkvar	(x,	1);
	create_insn	(x=0X2321A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23228);
	op_stkvar	(x,	0);
	create_insn	(x=0X2322F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23236);
	op_stkvar	(x,	0);
	create_insn	(x=0X2323D);
	op_stkvar	(x,	0);
	create_insn	(x=0X23243);
	op_stkvar	(x,	1);
	create_insn	(x=0X2324A);
	op_hex		(x,	1);
	create_insn	(x=0X23250);
	op_hex		(x,	1);
	create_insn	(x=0X23257);
	op_stkvar	(x,	0);
	create_insn	(x=0X2325C);
	op_stkvar	(x,	0);
	create_insn	(x=0X23262);
	op_stkvar	(x,	0);
	create_insn	(x=0X23268);
	op_stkvar	(x,	0);
	create_insn	(x=0X2326F);
	op_stkvar	(x,	1);
	create_insn	(x=0X23274);
	op_stkvar	(x,	1);
	create_insn	(x=0X2327B);
	op_hex		(x,	1);
	create_insn	(x=0X23281);
	op_hex		(x,	1);
	create_insn	(x=0X23286);
	op_stkvar	(x,	1);
	create_insn	(x=0X23296);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X2329C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2329F);
	op_stkvar	(x,	1);
	create_insn	(x=0X232AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X232B2);
	op_stkvar	(x,	0);
	create_insn	(x=0X232BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X232C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X232C7);
	op_hex		(x,	1);
	create_insn	(x=0X232CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X232CF);
	op_hex		(x,	1);
	create_insn	(x=0X232DA);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X232E0);
	op_stkvar	(x,	0);
	create_insn	(x=0X232E4);
	op_stkvar	(x,	0);
	create_insn	(x=0X232EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X232F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X232FA);
	op_stkvar	(x,	0);
	create_insn	(x=0X232FD);
	op_stkvar	(x,	1);
	create_insn	(x=0X23301);
	op_stkvar	(x,	1);
	create_insn	(x=0X2330C);
	op_stkvar	(x,	0);
	create_insn	(x=0X2331B);
	op_stkvar	(x,	0);
	create_insn	(x=0X2331F);
	op_stkvar	(x,	0);
	create_insn	(x=0X2332A);
	op_stkvar	(x,	0);
	create_insn	(x=0X2332F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23332);
	op_stkvar	(x,	1);
	create_insn	(x=0X2333B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2334A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23354);
	op_stkvar	(x,	1);
	create_insn	(x=0X2335E);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23364);
	op_stkvar	(x,	1);
	create_insn	(x=0X23367);
	op_stkvar	(x,	1);
	create_insn	(x=0X23371);
	op_stkvar	(x,	0);
	create_insn	(0X23381);
	create_insn	(x=0X2338B);
	op_stkvar	(x,	0);
	create_insn	(x=0X2338E);
	op_stkvar	(x,	0);
	create_insn	(x=0X23398);
	op_stkvar	(x,	1);
	create_insn	(x=0X233A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X233AF);
	op_stkvar	(x,	0);
	create_insn	(x=0X233B3);
	op_stkvar	(x,	0);
	create_insn	(x=0X233BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X233C1);
	op_stkvar	(x,	0);
	create_insn	(x=0X233CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X233DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X233DF);
	op_stkvar	(x,	1);
	create_insn	(x=0X233E6);
	op_stkvar	(x,	0);
	create_insn	(x=0X233ED);
	op_stkvar	(x,	0);
	create_insn	(x=0X233F0);
	op_stkvar	(x,	0);
	create_insn	(x=0X233F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X233F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X233FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X23401);
	op_stkvar	(x,	0);
	create_insn	(x=0X23407);
	op_stkvar	(x,	1);
	create_insn	(x=0X23412);
	op_stkvar	(x,	0);
	create_insn	(x=0X23415);
	op_stkvar	(x,	0);
	create_insn	(x=0X2341C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23420);
	op_stkvar	(x,	0);
	create_insn	(x=0X23424);
	op_stkvar	(x,	1);
	create_insn	(x=0X23427);
	op_stkvar	(x,	0);
	create_insn	(x=0X2342E);
	op_stkvar	(x,	1);
	create_insn	(x=0X23431);
	op_stkvar	(x,	1);
	create_insn	(x=0X23438);
	op_stkvar	(x,	0);
	create_insn	(x=0X2344D);
	op_stkvar	(x,	1);
	create_insn	(x=0X23450);
	op_stkvar	(x,	1);
	create_insn	(x=0X23456);
	op_stkvar	(x,	0);
	create_insn	(x=0X23459);
	op_stkvar	(x,	1);
	create_insn	(x=0X2345C);
	op_stkvar	(x,	0);
	create_insn	(x=0X2345F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23464);
	op_stkvar	(x,	1);
	create_insn	(x=0X23467);
	op_stkvar	(x,	1);
	create_insn	(x=0X2346A);
	op_stkvar	(x,	0);
	create_insn	(x=0X2346D);
	op_stkvar	(x,	0);
	create_insn	(x=0X23470);
	op_stkvar	(x,	1);
	create_insn	(x=0X23475);
	op_stkvar	(x,	1);
	create_insn	(x=0X23480);
	op_stkvar	(x,	1);
	create_insn	(x=0X23483);
	op_stkvar	(x,	1);
	create_insn	(x=0X2348C);
	op_stkvar	(x,	1);
	create_insn	(x=0X234BA);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X234C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X234C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X234D5);
	op_stkvar	(x,	0);
	create_insn	(x=0X234ED);
	op_stkvar	(x,	0);
	create_insn	(x=0X234F0);
	op_stkvar	(x,	0);
	create_insn	(x=0X234F7);
	op_stkvar	(x,	0);
	create_insn	(x=0X234FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X234FD);
	op_stkvar	(x,	1);
	create_insn	(x=0X2350D);
	op_stkvar	(x,	1);
	create_insn	(x=0X23518);
	op_stkvar	(x,	1);
	create_insn	(x=0X23520);
	op_stkvar	(x,	0);
	create_insn	(x=0X23527);
	op_stkvar	(x,	1);
	create_insn	(x=0X2352D);
	op_hex		(x,	1);
	create_insn	(x=0X23530);
	op_stkvar	(x,	0);
	create_insn	(x=0X23537);
	op_stkvar	(x,	0);
	create_insn	(x=0X23542);
	op_stkvar	(x,	0);
	create_insn	(x=0X23545);
	op_stkvar	(x,	1);
	create_insn	(x=0X2354B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2357C);
	op_stkvar	(x,	0);
	create_insn	(x=0X2358B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2358E);
	op_stkvar	(x,	1);
	create_insn	(x=0X2359D);
	op_stkvar	(x,	1);
	create_insn	(x=0X235B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X235C9);
	op_stkvar	(x,	1);
	create_insn	(x=0X235F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X235F9);
	op_hex		(x,	1);
	create_insn	(x=0X235FE);
	op_hex		(x,	1);
	create_insn	(x=0X23603);
	op_stkvar	(x,	0);
	create_insn	(x=0X23610);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23616);
	op_stkvar	(x,	1);
	create_insn	(x=0X23619);
	op_stkvar	(x,	1);
	create_insn	(x=0X2361D);
	op_stkvar	(x,	1);
	create_insn	(x=0X23628);
	op_stkvar	(x,	0);
	create_insn	(x=0X23642);
	op_hex		(x,	1);
	create_insn	(x=0X23647);
	op_stkvar	(x,	0);
	create_insn	(0X23655);
	create_insn	(x=0X2365F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23666);
	op_stkvar	(x,	1);
	create_insn	(x=0X23669);
	op_stkvar	(x,	1);
	create_insn	(x=0X23678);
	op_stkvar	(x,	1);
	create_insn	(x=0X23685);
	op_stkvar	(x,	1);
	create_insn	(x=0X2369E);
	op_stkvar	(x,	0);
	create_insn	(x=0X236AA);
	op_stkvar	(x,	1);
	create_insn	(0X236B8);
	create_insn	(x=0X236C0);
	op_stkvar	(x,	0);
	create_insn	(x=0X236C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X236C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X236D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X236E3);
	op_stkvar	(x,	1);
	create_insn	(x=0X236E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X236ED);
	op_hex		(x,	1);
	create_insn	(x=0X236F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X236F5);
	op_hex		(x,	1);
	create_insn	(x=0X23702);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23708);
	op_stkvar	(x,	1);
	create_insn	(x=0X2370B);
	op_stkvar	(x,	1);
	create_insn	(x=0X2370F);
	op_stkvar	(x,	1);
	create_insn	(x=0X2371A);
	op_stkvar	(x,	0);
	create_insn	(0X23729);
	create_insn	(x=0X23730);
	op_stkvar	(x,	1);
	create_insn	(x=0X2373B);
	op_stkvar	(x,	0);
	create_insn	(x=0X23747);
	op_stkvar	(x,	0);
	create_insn	(x=0X2374C);
	op_stkvar	(x,	0);
	create_insn	(x=0X23756);
	op_stkvar	(x,	0);
	create_insn	(x=0X23764);
	op_stkvar	(x,	1);
	create_insn	(x=0X2376F);
	op_stkvar	(x,	1);
	create_insn	(x=0X23774);
	op_stkvar	(x,	1);
	create_insn	(0X2379E);
	create_insn	(x=0X237A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X237A5);
	op_stkvar	(x,	1);
	create_insn	(x=0X237AD);
	op_stkvar	(x,	1);
	create_insn	(x=0X237B5);
	op_stkvar	(x,	1);
	create_insn	(x=0X237BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X237BF);
	op_stkvar	(x,	1);
	create_insn	(x=0X237D2);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X237D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X237DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X237E7);
	op_stkvar	(x,	0);
	create_insn	(x=0X237EE);
	op_stkvar	(x,	0);
	create_insn	(x=0X23808);
	op_stkvar	(x,	1);
	create_insn	(x=0X23816);
	op_stkvar	(x,	0);
	create_insn	(x=0X2381A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23821);
	op_stkvar	(x,	0);
	create_insn	(x=0X23828);
	op_stkvar	(x,	1);
	create_insn	(x=0X2382B);
	op_stkvar	(x,	1);
	create_insn	(x=0X23837);
	op_stkvar	(x,	0);
	create_insn	(x=0X2383C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23843);
	op_stkvar	(x,	1);
	create_insn	(x=0X2384C);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23852);
	op_stkvar	(x,	1);
	create_insn	(x=0X23855);
	op_stkvar	(x,	1);
	create_insn	(x=0X23861);
	op_stkvar	(x,	0);
	create_insn	(x=0X23866);
	op_stkvar	(x,	1);
	create_insn	(x=0X23878);
	op_stkvar	(x,	0);
	create_insn	(x=0X2387B);
	op_stkvar	(x,	0);
	create_insn	(x=0X2388C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23897);
	op_stkvar	(x,	0);
	create_insn	(x=0X238A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X238B7);
	op_stkvar	(x,	1);
	create_insn	(x=0X238C0);
	op_stkvar	(x,	0);
	create_insn	(x=0X238CC);
	op_stkvar	(x,	0);
	create_insn	(x=0X238D1);
	op_stkvar	(x,	0);
	create_insn	(x=0X238D6);
	op_stkvar	(x,	0);
	create_insn	(x=0X238E0);
	op_stkvar	(x,	0);
	create_insn	(x=0X238E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X238EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X238F6);
	op_stkvar	(x,	0);
	create_insn	(0X23903);
	create_insn	(x=0X23905);
	op_stkvar	(x,	0);
	create_insn	(x=0X2390E);
	op_stkvar	(x,	1);
	create_insn	(x=0X2391C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23922);
	op_stkvar	(x,	1);
	create_insn	(x=0X23935);
	op_stkvar	(x,	0);
	create_insn	(x=0X2393B);
	op_stkvar	(x,	0);
	create_insn	(x=0X23940);
	op_stkvar	(x,	1);
	create_insn	(x=0X23946);
	op_stkvar	(x,	0);
	create_insn	(x=0X2394A);
	op_stkvar	(x,	0);
	create_insn	(x=0X23954);
	op_stkvar	(x,	1);
	create_insn	(x=0X23969);
	op_stkvar	(x,	0);
	create_insn	(x=0X2396C);
	op_stkvar	(x,	0);
	create_insn	(x=0X23972);
	op_stkvar	(x,	0);
	create_insn	(x=0X23976);
	op_stkvar	(x,	0);
	create_insn	(x=0X23980);
	op_stkvar	(x,	0);
	create_insn	(x=0X23994);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X2399A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2399D);
	op_stkvar	(x,	1);
	create_insn	(x=0X239AA);
	op_stkvar	(x,	0);
	create_insn	(x=0X239B2);
	op_stkvar	(x,	0);
	create_insn	(x=0X239B6);
	op_stkvar	(x,	0);
	create_insn	(x=0X239C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X239C7);
	op_hex		(x,	1);
	create_insn	(x=0X239CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X239D4);
	op_hex		(x,	1);
	create_insn	(x=0X239DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X239E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X239FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A05);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A19);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A20);
	op_hex		(x,	1);
	create_insn	(x=0X23A26);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A32);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A36);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A49);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A4F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A57);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A5A);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A6B);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A74);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A77);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A7D);
	op_stkvar	(x,	0);
	create_insn	(x=0X23A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A83);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A96);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23A9B);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X23AAB);
	op_stkvar	(x,	0);
	create_insn	(x=0X23AB3);
	op_stkvar	(x,	0);
	create_insn	(x=0X23ABF);
	op_stkvar	(x,	1);
	create_insn	(x=0X23AC2);
	op_hex		(x,	1);
	create_insn	(x=0X23AC7);
	op_stkvar	(x,	1);
	create_insn	(x=0X23AD6);
	op_stkvar	(x,	0);
	create_insn	(x=0X23AD9);
	op_stkvar	(x,	0);
	create_insn	(x=0X23AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X23AEE);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X23AF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X23B0A);
	op_stkvar	(x,	0);
	create_insn	(x=0X23B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X23B1B);
	op_hex		(x,	1);
	create_insn	(x=0X23B2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X23B3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23B3D);
	op_hex		(x,	1);
	create_insn	(0X23B4E);
	create_insn	(x=0X23B52);
	op_stkvar	(x,	1);
	create_insn	(x=0X23B55);
	op_stkvar	(x,	1);
	create_insn	(0X23B6E);
	create_insn	(x=0X23B76);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23B7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X23B90);
	op_stkvar	(x,	0);
	create_insn	(x=0X23B93);
	op_stkvar	(x,	0);
	create_insn	(x=0X23BA0);
	op_stkvar	(x,	0);
	create_insn	(x=0X23BAB);
	op_stkvar	(x,	1);
	create_insn	(x=0X23BAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X23BC3);
	op_stkvar	(x,	0);
	create_insn	(x=0X23BC7);
	op_stkvar	(x,	0);
	create_insn	(x=0X23BD0);
	op_stkvar	(x,	0);
	create_insn	(x=0X23BD3);
	op_stkvar	(x,	1);
	create_insn	(x=0X23BD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X23BDA);
	op_stkvar	(x,	0);
	create_insn	(x=0X23BE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X23BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C13);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C27);
	op_stkvar	(x,	0);
	create_insn	(x=0X23C2A);
	op_stkvar	(x,	0);
	create_insn	(x=0X23C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C33);
	op_stkvar	(x,	0);
	create_insn	(x=0X23C36);
	op_stkvar	(x,	0);
	create_insn	(0X23C3D);
	create_insn	(0X23C42);
	create_insn	(0X23C47);
	create_insn	(x=0X23C50);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23C55);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C58);
	op_stkvar	(x,	0);
	create_insn	(x=0X23C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C67);
	op_stkvar	(x,	0);
	create_insn	(x=0X23C86);
	op_stkvar	(x,	0);
	create_insn	(x=0X23C89);
	op_stkvar	(x,	0);
	create_insn	(0X23C8E);
	create_insn	(x=0X23C90);
	op_stkvar	(x,	0);
	create_insn	(x=0X23C93);
	op_stkvar	(x,	0);
	create_insn	(x=0X23C99);
	op_stkvar	(x,	1);
	create_insn	(x=0X23C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23CA4);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23CAA);
	op_stkvar	(x,	0);
	create_insn	(x=0X23CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X23CB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X23CB6);
	op_stkvar	(x,	1);
	create_insn	(0X23CCE);
	create_insn	(x=0X23CD2);
	op_stkvar	(x,	0);
	create_insn	(x=0X23CD5);
	op_stkvar	(x,	1);
	create_insn	(0X23CEF);
	create_insn	(x=0X23CF5);
	op_stkvar	(x,	1);
	create_insn	(x=0X23D00);
	op_stkvar	(x,	0);
	create_insn	(0X23D07);
	create_insn	(0X23D0B);
	create_insn	(x=0X23D14);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23D1A);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D28);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D2B);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D2F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D39);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D3D);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D47);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D4E);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D51);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D55);
	op_stkvar	(x,	1);
	create_insn	(x=0X23D6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D71);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D7F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D82);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D85);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D8C);
	op_stkvar	(x,	0);
	create_insn	(x=0X23D91);
	op_stkvar	(x,	1);
	create_insn	(x=0X23D9A);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X23DA3);
	op_stkvar	(x,	1);
	create_insn	(x=0X23DBA);
	op_stkvar	(x,	0);
	create_insn	(x=0X23DBD);
	op_stkvar	(x,	0);
	create_insn	(x=0X23DCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X23DCD);
	op_stkvar	(x,	1);
	create_insn	(x=0X23DD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X23DE7);
	op_stkvar	(x,	1);
	create_insn	(0X23DEC);
	create_insn	(x=0X23DF6);
	op_hex		(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X23DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X23DFF);
	op_stkvar	(x,	1);
	create_insn	(x=0X23E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X23E0E);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E14);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E19);
	op_hex		(x,	1);
	create_insn	(x=0X23E24);
	op_hex		(x,	1);
	create_insn	(x=0X23E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X23E31);
	op_hex		(x,	1);
	create_insn	(x=0X23E52);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E56);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E5B);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X23E6A);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E7F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X23E87);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E8B);
	op_stkvar	(x,	0);
	create_insn	(x=0X23E8F);
	op_stkvar	(x,	1);
	create_insn	(x=0X23E9F);
	op_stkvar	(x,	1);
	create_insn	(x=0X23EA2);
	op_hex		(x,	1);
	create_insn	(0X23EAF);
	create_insn	(x=0X23EB1);
	op_stkvar	(x,	1);
	create_insn	(x=0X23EB4);
	op_hex		(x,	1);
	create_insn	(x=0X23EC2);
	op_stkvar	(x,	0);
	create_insn	(x=0X23EC8);
	op_stkvar	(x,	0);
	create_insn	(x=0X23ED7);
	op_stkvar	(x,	1);
	create_insn	(x=0X23EE7);
	op_stkvar	(x,	0);
	create_insn	(x=0X23EEA);
	op_stkvar	(x,	0);
	create_insn	(x=0X23EF2);
	op_stkvar	(x,	0);
	create_insn	(x=0X23EF7);
	op_stkvar	(x,	0);
	create_insn	(x=0X23EFB);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F13);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F1F);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F22);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F25);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F29);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F32);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F36);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F3D);
	op_hex		(x,	1);
	create_insn	(0X23F4A);
	create_insn	(x=0X23F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F4F);
	op_hex		(x,	1);
	create_insn	(x=0X23F5D);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F60);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F6C);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F74);
	op_stkvar	(x,	0);
	create_insn	(x=0X23F77);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F81);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F9A);
	op_stkvar	(x,	0);
	create_insn	(x=0X23FA1);
	op_stkvar	(x,	0);
	create_insn	(x=0X23FA5);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FC1);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FCF);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FDB);
	op_stkvar	(x,	0);
	create_insn	(x=0X23FDF);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FEB);
	op_stkvar	(x,	0);
	create_insn	(x=0X23FEF);
	op_stkvar	(x,	0);
	create_insn	(x=0X23FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FFB);
	op_stkvar	(x,	1);
	create_insn	(x=0X23FFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X24005);
	op_stkvar	(x,	1);
	create_insn	(x=0X24012);
	op_hex		(x,	1);
	create_insn	(x=0X24018);
	op_stkvar	(x,	1);
	create_insn	(x=0X2401B);
	op_hex		(x,	1);
	create_insn	(x=0X24020);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X24026);
	op_stkvar	(x,	1);
	create_insn	(x=0X2402D);
	op_hex		(x,	1);
	create_insn	(x=0X24035);
	op_hex		(x,	1);
	create_insn	(x=0X2403C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2403F);
	op_hex		(x,	1);
	create_insn	(x=0X24046);
	op_hex		(x,	1);
	create_insn	(x=0X2404D);
	op_stkvar	(x,	0);
	create_insn	(x=0X24050);
	op_stkvar	(x,	1);
	create_byte	(0X24059);
	make_array	(0X24059,	0X7);
	set_cmt	(0X24060,	"WINME LOGO BMP",	0);
	create_strlit	(0X24060,	0X24062);
	set_name	(0X24060,	"BMP");
	create_dword	(0X24062);
	create_dword	(0X24066);
	create_dword	(0X2406A);
	create_dword	(0X2406E);
	create_dword	(0X24072);
	create_dword	(0X24076);
	create_word	(0X2407A);
	create_word	(0X2407C);
	create_dword	(0X2407E);
	create_dword	(0X24082);
	create_dword	(0X24086);
	create_dword	(0X2408A);
	create_dword	(0X2408E);
	create_dword	(0X24092);
	create_byte	(0X24096);
	make_array	(0X24096,	0X400);
	create_byte	(0X24496);
	make_array	(0X24496,	0XFA00);
	create_byte	(0X33E96);
	make_array	(0X33E96,	0XFA00);
	create_dword	(0X43896);
	create_dword	(0X4389A);
	create_strlit	(0X4389E,	0X438A9);
	set_name	(0X4389E,	"aCWindows");
	create_byte	(0X438A9);
	create_word	(x=0X438AA);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	set_cmt	(0X438AC,	"WINDATA segment\n(offset 43890h from beginning of WinME IO.SYS + 700h)",	0);
	create_word	(0X438AC);
	create_strlit	(0X438AE,	0X438B9);
	set_name	(0X438AE,	"aAsd_wizard");
	create_strlit	(0X438BA,	0X438C5);
	set_name	(0X438BA,	"aAsd_exeW");
	create_byte	(0X438C5);
	create_word	(0X438C6);
	create_strlit	(0X438C8,	0X438F2);
	set_name	(0X438C8,	"aSoftwareMicrosoftWin_0");
	create_strlit	(0X438F2,	0X43922);
	set_name	(0X438F2,	"aSoftwareMicrosoftWin_1");
	create_strlit	(0X43922,	0X4394B);
	set_name	(0X43922,	"aSystemCurrentcontrol_0");
	create_byte	(0X4394B);
	create_strlit	(0X4394C,	0X43978);
	set_name	(0X4394C,	"aSystemCurrentcontrol_1");
	create_strlit	(0X43978,	0X439B8);
	set_name	(0X43978,	"aSoftwareMicrosoftWin_2");
	create_strlit	(0X439B8,	0X439EA);
	set_name	(0X439B8,	"aSoftwareMicrosoftWin_3");
	create_strlit	(0X439EA,	0X43A18);
	set_name	(0X439EA,	"aSystemCurrentcontrol_2");
	create_strlit	(0X43A18,	0X43A54);
	set_name	(0X43A18,	"aSystemCurrentcontrol_3");
	create_word	(x=0X43A54);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A56);
	create_word	(x=0X43A58);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A5A);
	create_word	(x=0X43A5C);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A5E);
	create_word	(x=0X43A60);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A62);
	create_word	(x=0X43A64);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A66);
	create_word	(x=0X43A68);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A6A);
	create_word	(x=0X43A6C);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A6E);
	create_word	(x=0X43A70);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A72);
	create_word	(x=0X43A74);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A76);
	create_word	(x=0X43A78);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A7A);
	create_word	(x=0X43A7C);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A7E);
	create_word	(x=0X43A80);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A82);
	create_word	(x=0X43A84);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A86);
	create_word	(x=0X43A88);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A8A);
	create_word	(x=0X43A8C);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A8E);
	create_word	(x=0X43A90);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A92);
	create_word	(x=0X43A94);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43A96);
	create_strlit	(0X43A98,	0X43AA3);
	set_name	(0X43A98,	"aSystemroot");
	create_strlit	(0X43AA3,	0X43AAD);
	set_name	(0X43AA3,	"aBootcount");
	create_strlit	(0X43AAD,	0X43AB7);
	set_name	(0X43AAD,	"aLastdrive_0");
	create_strlit	(0X43AB7,	0X43AC4);
	set_name	(0X43AB7,	"aDoublebuffer_0");
	create_strlit	(0X43AC4,	0X43AD4);
	set_name	(0X43AC4,	"aWin31filesystem");
	create_strlit	(0X43AD4,	0X43ADB);
	set_name	(0X43AD4,	"aSetupn");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_7(void) {
        auto x;
#define id x

	create_strlit	(0X43ADB,	0X43AE5);
	set_name	(0X43ADB,	"aInstalled");
	create_strlit	(0X43AE5,	0X43AF6);
	set_name	(0X43AE5,	"aGetdevparmsioctl");
	create_strlit	(0X43AF6,	0X43AFC);
	set_name	(0X43AF6,	"aDoscp");
	create_strlit	(0X43AFC,	0X43B02);
	set_name	(0X43AFC,	"aOemcc");
	create_strlit	(0X43B02,	0X43B0A);
	set_name	(0X43B02,	"aKybtype");
	create_strlit	(0X43B0A,	0X43B14);
	set_name	(0X43B0A,	"aKyblayout");
	create_strlit	(0X43B14,	0X43B1B);
	set_name	(0X43B14,	"aLangid");
	create_strlit	(0X43B1B,	0X43B28);
	set_name	(0X43B1B,	"aCountryfname");
	create_strlit	(0X43B28,	0X43B36);
	set_name	(0X43B28,	"aCodepagefname");
	create_strlit	(0X43B36,	0X43B3F);
	set_name	(0X43B36,	"aKybfname");
	create_byte	(0X43B3F);
	set_name	(0X43B3F,	"aZeroByte");
	create_word	(x=0X43B40);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B42);
	create_word	(x=0X43B44);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B46);
	create_word	(x=0X43B48);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B4A);
	create_word	(x=0X43B4C);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B4E);
	create_word	(x=0X43B50);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B52);
	create_word	(x=0X43B54);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B56);
	create_word	(x=0X43B58);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B5A);
	create_word	(x=0X43B5C);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B5E);
	create_word	(x=0X43B60);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B62);
	create_word	(x=0X43B64);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B66);
	create_word	(x=0X43B68);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B6A);
	create_word	(x=0X43B6C);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B6E);
	create_word	(x=0X43B70);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B72);
	create_word	(x=0X43B74);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B76);
	create_word	(x=0X43B78);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B7A);
	create_word	(x=0X43B7C);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B7E);
	create_word	(x=0X43B80);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43B82);
	create_strlit	(0X43B84,	0X43B95);
	set_name	(0X43B84,	"a0123456789abcdef");
	create_byte	(0X43B95);
	create_strlit	(0X43B96,	0X43BBD);
	set_name	(0X43B96,	"aXxx");
	create_strlit	(0X43BBD,	0X43BBF);
	set_name	(0X43BBD,	"aP");
	create_strlit	(0X43BBF,	0X43BC7);
	set_name	(0X43BBF,	"aAsd_dat");
	create_strlit	(0X43BC7,	0X43BF1);
	set_name	(0X43BC7,	"aSystemCurrentcontrolse");
	create_strlit	(0X43BF1,	0X43C23);
	set_name	(0X43BF1,	"aSoftwareMicrosoftWindo");
	create_byte	(0X43C23);
	create_strlit	(0X43C24,	0X43C31);
	set_name	(0X43C24,	"aVmmhiber_w9x");
	create_byte	(x=0X43C31);
	make_array	(x,	0X15);
	op_dec		(x,	0);
	create_word	(0X43C46);
	create_byte	(x=0X43C48);
	make_array	(x,	0X14);
	op_dec		(x,	0);
	create_word	(0X43C5E);
	create_strlit	(0X43C60,	0X43C62);
	set_name	(0X43C60,	"HK_1");
	create_word	(0X43C62);
	create_word	(0X43C64);
	create_byte	(0X43C66);
	make_array	(0X43C66,	0X8);
	create_dword	(0X43C6E);
	create_word	(0X43C72);
	create_dword	(0X43C76);
	create_byte	(0X43C7A);
	make_array	(0X43C7A,	0X8);
	create_dword	(0X43C82);
	create_word	(0X43C86);
	create_strlit	(0X43C88,	0X43C8A);
	set_name	(0X43C88,	"HK_2");
	create_word	(0X43C8A);
	create_byte	(0X43C8C);
	create_byte	(0X43C8D);
	make_array	(0X43C8D,	0X9);
	create_dword	(0X43C96);
	create_dword	(0X43C9A);
	create_dword	(0X43C9E);
	create_byte	(0X43CA2);
	make_array	(0X43CA2,	0X8);
	create_dword	(0X43CAA);
	create_word	(0X43CAE);
	create_strlit	(0X43CB0,	0X43CB2);
	set_name	(0X43CB0,	"HK_3");
	create_word	(0X43CB2);
	create_byte	(0X43CB4);
	create_byte	(0X43CB5);
	make_array	(0X43CB5,	0X9);
	create_dword	(0X43CBE);
	create_dword	(0X43CC2);
	create_byte	(x=0X43CC6);
	make_array	(x,	0XC);
	op_dec		(x,	0);
	create_dword	(0X43CD2);
	create_word	(0X43CD6);
	create_byte	(0X43CD8);
	make_array	(0X43CD8,	0X8);
	create_word	(x=0X43CE0);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43CE2);
	create_word	(x=0X43CE4);
	op_plain_offset	(x,	0,	0X43890);
	op_plain_offset	(x,	128,	0X43890);
	create_word	(0X43CE6);
	create_byte	(x=0X43CE8);
	make_array	(x,	0X18);
	op_dec		(x,	0);
	create_strlit	(0X43D00,	0X43D11);
	set_name	(0X43D00,	"aSoftwareClasses");
	create_byte	(0X43D11);
	create_strlit	(0X43D12,	0X43D1B);
	set_name	(0X43D12,	"a_default");
	create_byte	(0X43D1B);
	make_array	(0X43D1B,	0X9);
	create_dword	(0X43D24);
	create_dword	(0X43D28);
	create_strlit	(0X43D2C,	0X43D34);
	set_name	(0X43D2C,	"aClasses");
	create_word	(0X43D34);
	create_strlit	(0X43D36,	0X43D3F);
	set_name	(0X43D36,	"aSoftware");
	create_word	(0X43D3F);
	create_byte	(0X43D41);
	make_array	(0X43D41,	0X5);
	create_strlit	(0X43D46,	0X43D52);
	set_name	(0X43D46,	"aClasses_dat");
	create_word	(0X43D52);
	create_byte	(x=0X43D54);
	make_array	(x,	0XAC);
	op_dec		(x,	0);
}

static Functions_0(void) {

	add_func    (0X2AB,0X2B0);
	set_func_flags(0X2AB,0x400);
	add_func    (0X355,0X385);
	set_func_flags(0X355,0x4400);
	set_frame_size(0X355, 0, 0, 0);
	add_func    (0X385,0X3B4);
	set_func_flags(0X385,0x4400);
	set_frame_size(0X385, 0, 0, 0);
	add_func    (0X690,0X6A3);
	set_func_flags(0X690,0x4402);
	set_frame_size(0X690, 0, 0, 0);
	add_func    (0XB15,0XB78);
	set_func_flags(0XB15,0x4400);
	add_func    (0XB78,0XBA8);
	set_func_flags(0XB78,0x4400);
	set_frame_size(0XB78, 0, 0, 0);
	set_name(0XB85, "getboot1", SN_LOCAL);
	set_name(0XB9A, "erret", SN_LOCAL);
	set_name(0XB9E, "getboot2", SN_LOCAL);
	add_func    (0XBA8,0X1115);
	set_func_flags(0XBA8,0x4400);
	set_frame_size(0XBA8, 0X4, 0, 0);
	set_name(0XC04, "setret_err", SN_LOCAL);
	set_name(0XC08, "bs_magic_ok", SN_LOCAL);
	set_name(0XC18, "chk_valid_bs", SN_LOCAL);
	set_name(0XC4B, "chk_valid_fat_1", SN_LOCAL);
	set_name(0XC51, "chk_valid_fat_2", SN_LOCAL);
	set_name(0XC6E, "chk_valid_fat_3", SN_LOCAL);
	set_name(0XC9A, "chk_act_part", SN_LOCAL);
	set_name(0XCA1, "act_part1", SN_LOCAL);
	set_name(0XCCB, "got_good_act1", SN_LOCAL);
	set_name(0XCD1, "no_act1", SN_LOCAL);
	set_name(0XCDD, "act_part2", SN_LOCAL);
	set_name(0XD07, "got_good_act2", SN_LOCAL);
	set_name(0XD0D, "no_act2", SN_LOCAL);
	set_name(0XD16, "setret", SN_LOCAL);
	set_name(0XD1A, "set1", SN_LOCAL);
	set_name(0XD24, "okdrive_1", SN_LOCAL);
	set_name(0XD33, "set_lba_flag", SN_LOCAL);
	set_name(0XD58, "okdrive", SN_LOCAL);
	set_name(0XD84, "set3", SN_LOCAL);
	set_name(0XD92, "set3_lba_read", SN_LOCAL);
	set_name(0XDAB, "okdrive_2", SN_LOCAL);
	set_name(0XDE7, "oknotmini", SN_LOCAL);
	set_name(0XE06, "set3_lba_rd_ok", SN_LOCAL);
	set_name(0XE1E, "set3_rd_bkup_bs", SN_LOCAL);
	set_name(0XE35, "check_1", SN_LOCAL);
	set_name(0XE47, "check_1_ok", SN_LOCAL);
	set_name(0XE60, "ck_power_of_two", SN_LOCAL);
	set_name(0XE66, "check_2", SN_LOCAL);
	set_name(0XE7A, "valid_boot_record", SN_LOCAL);
	set_name(0XE8B, "try5", SN_LOCAL);
	set_name(0XE9E, "unknown_j", SN_LOCAL);
	set_name(0XEA1, "no_os2", SN_LOCAL);
	set_name(0XEB4, "copybpb", SN_LOCAL);
	set_name(0XEEC, "chk_fat_bootsig", SN_LOCAL);
	set_name(0XEF8, "not_fat_system", SN_LOCAL);
	set_name(0XF2C, "already_nonz", SN_LOCAL);
	set_name(0XF50, "copy_totsec", SN_LOCAL);
	set_name(0XF55, "fat_big_small", SN_LOCAL);
	set_name(0XF8D, "fat_16bit", SN_LOCAL);
	set_name(0XF99, "add_fat_size", SN_LOCAL);
	set_name(0XF9E, "single_fat", SN_LOCAL);
	set_name(0XFBB, "chk_clust_limit", SN_LOCAL);
	set_name(0XFE3, "set_toobig_flag", SN_LOCAL);
	set_name(0XFEC, "set_fat16_flag", SN_LOCAL);
	set_name(0XFF2, "copymediaid", SN_LOCAL);
	set_name(0XFFB, "unknown", SN_LOCAL);
	set_name(0X1001, "unknown3_0_j", SN_LOCAL);
	set_name(0X1014, "scan", SN_LOCAL);
	set_name(0X101F, "gotparm", SN_LOCAL);
	set_name(0X1064, "dobig", SN_LOCAL);
	set_name(0X1077, "notbigbig", SN_LOCAL);
	set_name(0X1090, "dobigbig", SN_LOCAL);
	set_name(0X10AE, "dobig1", SN_LOCAL);
	set_name(0X10C6, "dobig2", SN_LOCAL);
	set_name(0X10DE, "massage_bpb", SN_LOCAL);
	set_name(0X1106, "goodret", SN_LOCAL);
	set_name(0X1110, "ret_hard_err", SN_LOCAL);
	add_func    (0X1115,0X1155);
	set_func_flags(0X1115,0x4400);
	set_frame_size(0X1115, 0, 0, 0);
	set_name(0X1131, "cfb_chk_totalsecs", SN_LOCAL);
	set_name(0X1151, "cfb_retit", SN_LOCAL);
	add_func    (0X115B,0X12A2);
	set_func_flags(0X115B,0x4400);
	set_frame_size(0X115B, 0, 0, 0);
	add_func    (0X12A2,0X12DF);
	set_func_flags(0X12A2,0x4400);
	set_frame_size(0X12A2, 0, 0, 0);
	set_name(0X12AD, "domini_loop", SN_LOCAL);
	set_name(0X12D6, "domininext", SN_LOCAL);
	set_name(0X12DE, "dominiret", SN_LOCAL);
	add_func    (0X12E8,0X13F8);
	set_func_flags(0X12E8,0x4400);
	set_frame_size(0X12E8, 0X2, 0, 0);
	set_name(0X1309, "fmpgot_lba", SN_LOCAL);
	set_name(0X1375, "fmpgot_lba_rd", SN_LOCAL);
	set_name(0X13BB, "fmpgot_chs_rd", SN_LOCAL);
	set_name(0X13E1, "fmpgot_cont", SN_LOCAL);
	set_name(0X13F6, "fmpnextfound", SN_LOCAL);
	add_func    (0X1408,0X1431);
	set_func_flags(0X1408,0x4400);
	set_frame_size(0X1408, 0, 0, 0);
	add_func    (0X1431,0X147F);
	set_func_flags(0X1431,0x4400);
	set_frame_size(0X1431, 0X4, 0, 0);
	set_name(0X1435, "setmini_1", SN_LOCAL);
	set_name(0X1447, "setmini_2", SN_LOCAL);
	set_name(0X1456, "setmini_3", SN_LOCAL);
	set_name(0X145E, "setmini_4", SN_LOCAL);
	set_name(0X147C, "setmini_5", SN_LOCAL);
	add_func    (0X147F,0X1495);
	set_func_flags(0X147F,0x4400);
	set_frame_size(0X147F, 0, 0, 0);
	set_name(0X1494, "dmax_ok", SN_LOCAL);
	add_func    (0X1495,0X14C4);
	set_func_flags(0X1495,0x4400);
	set_frame_size(0X1495, 0X2, 0, 0);
	set_name(0X149B, "xinstall_bds_1", SN_LOCAL);
	set_name(0X14A6, "xinstall_bds_2", SN_LOCAL);
	add_func    (0X14C4,0X14F8);
	set_func_flags(0X14C4,0x4400);
	set_frame_size(0X14C4, 0, 0, 0);
	add_func    (0X47D0,0X47DE);
	set_func_flags(0X47D0,0x4400);
	set_frame_size(0X47D0, 0, 0, 0);
	add_func    (0X49EE,0X4A97);
	set_func_flags(0X49EE,0x4400);
	set_frame_size(0X49EE, 0, 0, 0);
	add_func    (0X4AA5,0X4B0C);
	set_func_flags(0X4AA5,0x4400);
	set_frame_size(0X4AA5, 0, 0, 0);
	add_func    (0X4B0C,0X4B52);
	set_func_flags(0X4B0C,0x4400);
	set_frame_size(0X4B0C, 0, 0, 0);
	add_func    (0X4B52,0X4B6C);
	set_func_flags(0X4B52,0x4400);
	set_frame_size(0X4B52, 0X2, 0, 0);
	add_func    (0X4D71,0X4D8D);
	set_func_flags(0X4D71,0x4400);
	set_frame_size(0X4D71, 0, 0, 0);
	add_func    (0X4EC1,0X4EE7);
	set_func_flags(0X4EC1,0x4400);
	set_frame_size(0X4EC1, 0, 0, 0);
	set_name(0X4EE2, "evdh_ret", SN_LOCAL);
	add_func    (0X4FA4,0X4FDD);
	set_func_flags(0X4FA4,0x4400);
	set_frame_size(0X4FA4, 0, 0, 0);
	set_name(0X4FC1, "alt_ext_chk", SN_LOCAL);
	set_name(0X4FD4, "not_ext", SN_LOCAL);
	set_name(0X4FD8, "alt_save", SN_LOCAL);
	set_name(0X4FDC, "keyret", SN_LOCAL);
	add_func    (0X502D,0X503E);
	set_func_flags(0X502D,0x400);
	add_func    (0X5099,0X50DE);
	set_func_flags(0X5099,0x4400);
	set_frame_size(0X5099, 0, 0, 0);
	add_func    (0X5143,0X5169);
	set_func_flags(0X5143,0x4400);
	set_frame_size(0X5143, 0, 0, 0);
	add_func    (0X5169,0X5174);
	set_func_flags(0X5169,0x4400);
	set_frame_size(0X5169, 0, 0, 0);
	add_func    (0X5174,0X522E);
	set_func_flags(0X5174,0x4400);
	set_frame_size(0X5174, 0X4, 0, 0);
	set_name(0X5194, "read_ok", SN_LOCAL);
	set_name(0X51D4, "century_19", SN_LOCAL);
	set_name(0X51FA, "leap_year", SN_LOCAL);
	set_name(0X5201, "eap_adjustment", SN_LOCAL);
	set_name(0X5206, "no_leap_adjustment", SN_LOCAL);
	set_name(0X5227, "r_d_ret", SN_LOCAL);
	add_func    (0X522E,0X5270);
	set_func_flags(0X522E,0x4400);
	set_frame_size(0X522E, 0, 0, 0);
	add_func    (0X5270,0X5295);
	set_func_flags(0X5270,0x4400);
	set_frame_size(0X5270, 0, 0, 0);
	add_func    (0X5295,0X52D6);
	set_func_flags(0X5295,0x4400);
	set_frame_size(0X5295, 0, 0, 0);
	add_func    (0X52D6,0X52EF);
	set_func_flags(0X52D6,0x4400);
	set_frame_size(0X52D6, 0, 0, 0);
	add_func    (0X52EF,0X5313);
	set_func_flags(0X52EF,0x4400);
	set_frame_size(0X52EF, 0, 0, 0);
	add_func    (0X5313,0X53D1);
	set_func_flags(0X5313,0x4400);
	set_frame_size(0X5313, 0, 0, 0);
	add_func    (0X53D1,0X53D9);
	set_func_flags(0X53D1,0x4400);
	set_frame_size(0X53D1, 0, 0, 0);
	add_func    (0X53D9,0X53E3);
	set_func_flags(0X53D9,0x4400);
	set_frame_size(0X53D9, 0, 0, 0);
	add_func    (0X5486,0X549A);
	set_func_flags(0X5486,0x4400);
	set_frame_size(0X5486, 0, 0, 0);
	set_name(0X548A, "X_Scan_Loop", SN_LOCAL);
	set_name(0X5499, "X_SetDrv", SN_LOCAL);
	add_func    (0X5512,0X5545);
	set_func_flags(0X5512,0x4400);
	set_frame_size(0X5512, 0, 0, 0);
	add_func    (0X558F,0X55C8);
	set_func_flags(0X558F,0x4400);
	set_frame_size(0X558F, 0X2, 0, 0);
	set_name(0X55BE, "ci_bigfat", SN_LOCAL);
	add_func    (0X55C8,0X5750);
	set_func_flags(0X55C8,0x4400);
	set_frame_size(0X55C8, 0, 0, 0);
	set_name(0X56AA, "is_floppy", SN_LOCAL);
	set_name(0X56C8, "has8", SN_LOCAL);
	set_name(0X5735, "getret", SN_LOCAL);
	set_name(0X5739, "getret_exit", SN_LOCAL);
	set_name(0X573A, "getbp_err_ret_brdg", SN_LOCAL);
	set_name(0X5745, "got_unknown_medium", SN_LOCAL);
	add_func    (0X5750,0X57D1);
	set_func_flags(0X5750,0x4400);
	set_frame_size(0X5750, 0, 0, 0);
	add_func    (0X57D1,0X5824);
	set_func_flags(0X57D1,0x4400);
	set_frame_size(0X57D1, 0, 0, 0);
	set_name(0X57EE, "mmi_chk_fat", SN_LOCAL);
	set_name(0X5802, "mmi_fat32", SN_LOCAL);
	set_name(0X581F, "mmi_retn", SN_LOCAL);
	set_name(0X5821, "mmi_not_ext", SN_LOCAL);
	add_func    (0X5824,0X586C);
	set_func_flags(0X5824,0x4400);
	set_frame_size(0X5824, 0X2, 0, 0);
	set_name(0X5830, "rd_ret", SN_LOCAL);
	set_name(0X583B, "rd_rty", SN_LOCAL);
	set_name(0X5854, "err_rd_ret", SN_LOCAL);
	set_name(0X5857, "okret2", SN_LOCAL);
	add_func    (0X58C0,0X5947);
	set_func_flags(0X58C0,0x4400);
	set_frame_size(0X58C0, 0X4, 0, 0);
	add_func    (0X594E,0X594F);
	set_func_flags(0X594E,0x4400);
	set_frame_size(0X594E, 0, 0, 0);
	add_func    (0X594F,0X5955);
	set_func_flags(0X594F,0x400);
	add_func    (0X5955,0X5A6D);
	set_func_flags(0X5955,0x4400);
	set_frame_size(0X5955, 0, 0, 0);
	add_func    (0X5A6D,0X5A90);
	set_func_flags(0X5A6D,0x4400);
	set_frame_size(0X5A6D, 0, 0, 0);
	add_func    (0X5A90,0X5A9A);
	set_func_flags(0X5A90,0x400);
	add_func    (0X5ABA,0X5ABB);
	set_func_flags(0X5ABA,0x4400);
	set_frame_size(0X5ABA, 0, 0, 0);
	add_func    (0X5ABB,0X5B30);
	set_func_flags(0X5ABB,0x4400);
	set_frame_size(0X5ABB, 0, 0, 0);
	add_func    (0X5B33,0X5C92);
	set_func_flags(0X5B33,0x4400);
	set_frame_size(0X5B33, 0, 0, 0);
	add_func    (0X5C92,0X5CAC);
	set_func_flags(0X5C92,0x4400);
	set_frame_size(0X5C92, 0, 0, 0);
	add_func    (0X5CAC,0X5CC6);
	set_func_flags(0X5CAC,0x4400);
	set_frame_size(0X5CAC, 0, 0, 0);
	add_func    (0X5CC6,0X5CE7);
	set_func_flags(0X5CC6,0x4400);
	set_frame_size(0X5CC6, 0, 0, 0);
	set_name(0X5CD6, "setaccess", SN_LOCAL);
	set_name(0X5CE4, "done_set", SN_LOCAL);
	add_func    (0X5CE7,0X5CF4);
	set_func_flags(0X5CE7,0x4400);
	set_frame_size(0X5CE7, 0, 0, 0);
	set_name(0X5CF1, "dont_dec_retry_count", SN_LOCAL);
	add_func    (0X5D04,0X5D1A);
	set_func_flags(0X5D04,0x4400);
	set_frame_size(0X5D04, 0, 0, 0);
	add_func    (0X5D1A,0X5DC6);
	set_func_flags(0X5D1A,0x4400);
	set_frame_size(0X5D1A, 0, 0, 0);
	add_func    (0X5DC6,0X5DD3);
	set_func_flags(0X5DC6,0x4400);
	set_frame_size(0X5DC6, 0, 0, 0);
	add_func    (0X6191,0X621C);
	set_func_flags(0X6191,0x4400);
	set_frame_size(0X6191, 0, 0, 0);
	add_func    (0X621C,0X6227);
	set_func_flags(0X621C,0x4400);
	set_frame_size(0X621C, 0, 0, 0);
	add_func    (0X6227,0X622F);
	set_func_flags(0X6227,0x4400);
	set_frame_size(0X6227, 0, 0, 0);
	add_func    (0X622F,0X627D);
	set_func_flags(0X622F,0x4400);
	set_frame_size(0X622F, 0, 0, 0);
	add_func    (0X627D,0X6321);
	set_func_flags(0X627D,0x4400);
	set_frame_size(0X627D, 0, 0, 0);
	add_func    (0X6321,0X633C);
	set_func_flags(0X6321,0x4400);
	set_frame_size(0X6321, 0, 0, 0);
	add_func    (0X633C,0X6381);
	set_func_flags(0X633C,0x4400);
	set_frame_size(0X633C, 0X4, 0, 0);
	add_func    (0X63C8,0X63F4);
	set_func_flags(0X63C8,0x4400);
	set_frame_size(0X63C8, 0, 0, 0);
	add_func    (0X64AA,0X6537);
	set_func_flags(0X64AA,0x4400);
	set_frame_size(0X64AA, 0X2, 0, 0);
	add_func    (0X6537,0X6562);
	set_func_flags(0X6537,0x4400);
	set_frame_size(0X6537, 0, 0, 0);
	add_func    (0X663E,0X6656);
	set_func_flags(0X663E,0x4400);
	set_frame_size(0X663E, 0X2, 0, 0);
	add_func    (0X67F6,0X6ACB);
	set_func_flags(0X67F6,0x402);
	set_frame_size(0X67F6, 0, 0, 0);
	add_func    (0X6ACB,0X6B0B);
	set_func_flags(0X6ACB,0x4400);
	set_frame_size(0X6ACB, 0X2, 0, 0);
	add_func    (0X6B0B,0X6B84);
	set_func_flags(0X6B0B,0x4400);
	set_frame_size(0X6B0B, 0X4, 0, 0);
	add_func    (0X6B84,0X6BE5);
	set_func_flags(0X6B84,0x4400);
	set_frame_size(0X6B84, 0, 0, 0);
	add_func    (0X6BE9,0X6C04);
	set_func_flags(0X6BE9,0x4400);
	set_frame_size(0X6BE9, 0, 0, 0);
	add_func    (0X6C04,0X6C7B);
	set_func_flags(0X6C04,0x4400);
	set_frame_size(0X6C04, 0X4, 0, 0);
	add_func    (0X6C7B,0X6C8F);
	set_func_flags(0X6C7B,0x4400);
	set_frame_size(0X6C7B, 0, 0, 0);
	add_func    (0X6C8F,0X6CA9);
	set_func_flags(0X6C8F,0x4400);
	set_frame_size(0X6C8F, 0, 0, 0);
	set_name(0X6CA8, "doint_ret", SN_LOCAL);
	add_func    (0X6F6B,0X6FB2);
	set_func_flags(0X6F6B,0x4400);
	set_frame_size(0X6F6B, 0, 0, 0);
	add_func    (0X6FB2,0X701C);
	set_func_flags(0X6FB2,0x4402);
	set_frame_size(0X6FB2, 0X2, 0, 0);
	add_func    (0X701C,0X7027);
	set_func_flags(0X701C,0x4400);
	set_frame_size(0X701C, 0, 0, 0);
	add_func    (0X7027,0X702D);
	set_func_flags(0X7027,0x4400);
	set_frame_size(0X7027, 0, 0, 0);
	add_func    (0X702D,0X7075);
	set_func_flags(0X702D,0x4400);
	set_frame_size(0X702D, 0, 0, 0);
	add_func    (0X7075,0X7095);
	set_func_flags(0X7075,0x400);
	set_frame_size(0X7075, 0, 0, 0);
	add_func    (0X7095,0X7096);
	set_func_flags(0X7095,0x4400);
	set_frame_size(0X7095, 0, 0, 0);
	add_func    (0X7096,0X7113);
	set_func_flags(0X7096,0x4400);
	add_func    (0X7113,0X7137);
	set_func_flags(0X7113,0x4400);
	set_frame_size(0X7113, 0, 0, 0);
	add_func    (0X7137,0X7141);
	set_func_flags(0X7137,0x4400);
	set_frame_size(0X7137, 0, 0, 0);
	add_func    (0X7141,0X7144);
	set_func_flags(0X7141,0x400);
	add_func    (0X7144,0X7156);
	set_func_flags(0X7144,0x4400);
	set_frame_size(0X7144, 0, 0, 0);
	add_func    (0X7156,0X7190);
	set_func_flags(0X7156,0x4400);
	set_frame_size(0X7156, 0, 0, 0);
	add_func    (0X7190,0X71AB);
	set_func_flags(0X7190,0x4400);
	set_frame_size(0X7190, 0, 0, 0);
	add_func    (0X71AB,0X71B2);
	set_func_flags(0X71AB,0x4400);
	set_frame_size(0X71AB, 0, 0, 0);
	add_func    (0X71B2,0X71B8);
	set_func_flags(0X71B2,0x4400);
	set_frame_size(0X71B2, 0, 0, 0);
	add_func    (0X71B8,0X71BF);
	set_func_flags(0X71B8,0x4400);
	set_frame_size(0X71B8, 0, 0, 0);
	add_func    (0X71BF,0X71DF);
	set_func_flags(0X71BF,0x4400);
	set_frame_size(0X71BF, 0, 0, 0);
	add_func    (0X71E3,0X72AC);
	set_func_flags(0X71E3,0x4400);
	set_frame_size(0X71E3, 0, 0, 0);
	add_func    (0X72AC,0X72C3);
	set_func_flags(0X72AC,0x4400);
	set_frame_size(0X72AC, 0X4, 0, 0);
	add_func    (0X72C3,0X72D8);
	set_func_flags(0X72C3,0x4400);
	set_frame_size(0X72C3, 0X2, 0, 0);
	add_func    (0X72D8,0X72E8);
	set_func_flags(0X72D8,0x4400);
	set_frame_size(0X72D8, 0, 0, 0);
	add_func    (0X732A,0X73B9);
	set_func_flags(0X732A,0x4400);
	set_frame_size(0X732A, 0, 0, 0);
	add_func    (0X73B9,0X743D);
	set_func_flags(0X73B9,0x4400);
	set_frame_size(0X73B9, 0, 0, 0);
	add_func    (0X743D,0X745F);
	set_func_flags(0X743D,0x4400);
	set_frame_size(0X743D, 0, 0, 0);
	add_func    (0X745F,0X748B);
	set_func_flags(0X745F,0x4400);
	set_frame_size(0X745F, 0X2, 0, 0);
	set_name(0X7487, "dblspc_fic_ret", SN_LOCAL);
	add_func    (0X748B,0X74AD);
	set_func_flags(0X748B,0x4400);
	set_frame_size(0X748B, 0, 0, 0);
	set_name(0X74AB, "sobl_ret", SN_LOCAL);
	add_func    (0X74BD,0X74D6);
	set_func_flags(0X74BD,0x4400);
	set_frame_size(0X74BD, 0X2, 0, 0);
	set_name(0X74C7, "wrt8bhn_loop", SN_LOCAL);
	add_func    (0X7A7F,0X7A8A);
	set_func_flags(0X7A7F,0x4400);
	set_frame_size(0X7A7F, 0, 0, 0);
	add_func    (0X7A8A,0X7AA2);
	set_func_flags(0X7A8A,0x4400);
	set_frame_size(0X7A8A, 0, 0, 0);
	add_func    (0X7CEF,0X7D23);
	set_func_flags(0X7CEF,0x4400);
	set_frame_size(0X7CEF, 0X4, 0, 0);
	add_func    (0X7E69,0X7EC1);
	set_func_flags(0X7E69,0x4400);
	set_frame_size(0X7E69, 0X8, 0, 0);
	add_func    (0X7EC1,0X7F58);
	set_func_flags(0X7EC1,0x4400);
	set_frame_size(0X7EC1, 0X6, 0, 0);
	add_func    (0X7F90,0X818C);
	set_func_flags(0X7F90,0x4400);
	set_frame_size(0X7F90, 0X2, 0, 0);
	add_func    (0X818C,0X81D2);
	set_func_flags(0X818C,0x4400);
	set_frame_size(0X818C, 0X4, 0, 0);
	add_func    (0X8224,0X82FC);
	set_func_flags(0X8224,0x4410);
	set_frame_size(0X8224, 0X12, 2, 0);
	add_func    (0X82FC,0X835B);
	set_func_flags(0X82FC,0x4400);
	set_frame_size(0X82FC, 0, 0, 0);
	add_func    (0X88C8,0X88DF);
	set_func_flags(0X88C8,0x400);
	set_frame_size(0X88C8, 0, 0, 0);
	add_func    (0X88DF,0X88FE);
	set_func_flags(0X88DF,0x4400);
	set_frame_size(0X88DF, 0, 0, 0);
	add_func    (0X88FE,0X8908);
	set_func_flags(0X88FE,0x4400);
	set_frame_size(0X88FE, 0, 0, 0);
	add_func    (0X8914,0X897D);
	set_func_flags(0X8914,0x4400);
	set_frame_size(0X8914, 0, 0, 0);
	set_name(0X8927, "AbsSetup1", SN_LOCAL);
	set_name(0X893E, "AbsSetup2", SN_LOCAL);
	add_func    (0X8981,0X8A2B);
	set_func_flags(0X8981,0x4402);
	set_frame_size(0X8981, 0, 0, 0);
	set_name(0X89A3, "absdrd_1", SN_LOCAL);
	set_name(0X89DD, "ERR_LEAVE", SN_LOCAL);
	set_name(0X89F0, "LEAVECODE", SN_LOCAL);
	set_name(0X8A23, "ILEAVE_EXTD", SN_LOCAL);
	add_func    (0X8A30,0X8AFC);
	set_func_flags(0X8A30,0x4402);
	set_frame_size(0X8A30, 0, 0, 0);
	set_name(0X8A4B, "absdwrt_1", SN_LOCAL);
	set_name(0X8A7C, "absdwrt_hlt", SN_LOCAL);
	set_name(0X8A7F, "absdrwt_2", SN_LOCAL);
	set_name(0X8AA1, "absdrwt_3", SN_LOCAL);
	set_name(0X8AC7, "absdrwt_4", SN_LOCAL);
	set_name(0X8AD8, "absdrwt_5", SN_LOCAL);
	set_name(0X8ADD, "absdrwt_6", SN_LOCAL);
	set_name(0X8AF6, "absdrwt_7", SN_LOCAL);
	add_func    (0X8AFC,0X8B3B);
	set_func_flags(0X8AFC,0x4400);
	set_frame_size(0X8AFC, 0, 0, 0);
	set_name(0X8B17, "SKIPGET", SN_LOCAL);
	set_name(0X8B1B, "GETBP_@f", SN_LOCAL);
	set_name(0X8B27, "GETBP_err", SN_LOCAL);
	set_name(0X8B2F, "GETBP_CDSGETBP_CDS", SN_LOCAL);
	add_func    (0X8B3B,0X8B44);
	set_func_flags(0X8B3B,0x4400);
	set_frame_size(0X8B3B, 0, 0, 0);
	add_func    (0X8B63,0X8B6F);
	set_func_flags(0X8B63,0x4400);
	set_frame_size(0X8B63, 0, 0, 0);
	add_func    (0X8B6F,0X8B87);
	set_func_flags(0X8B6F,0x4400);
	set_frame_size(0X8B6F, 0X2, 0, 0);
	set_name(0X8B82, "EXTENDED_NORMAL", SN_LOCAL);
	add_func    (0X8B87,0X8BBE);
	set_func_flags(0X8B87,0x4400);
	set_frame_size(0X8B87, 0, 0, 0);
	set_name(0X8B93, "TABLK1", SN_LOCAL);
	set_name(0X8BA1, "GOT_VALS", SN_LOCAL);
	set_name(0X8BAB, "NO_SET_ACT", SN_LOCAL);
	set_name(0X8BB2, "NO_SET_CLS", SN_LOCAL);
	set_name(0X8BBA, "NO_SET_LOC", SN_LOCAL);
	add_func    (0X8BBE,0X8BF9);
	set_func_flags(0X8BBE,0x4400);
	set_frame_size(0X8BBE, 0, 0, 0);
	set_name(0X8BD0, "TABLK2", SN_LOCAL);
	set_name(0X8BE2, "NOT_IN_TABLE", SN_LOCAL);
	set_name(0X8BE6, "GOT_CALL", SN_LOCAL);
	set_name(0X8BEA, "CHECK_CODE", SN_LOCAL);
	set_name(0X8BF2, "NO_MAP", SN_LOCAL);
	add_func    (0X8BF9,0X8C0A);
	set_func_flags(0X8BF9,0x4400);
	set_frame_size(0X8BF9, 0, 0, 0);
	add_func    (0X8D59,0X8D9A);
	set_func_flags(0X8D59,0x4400);
	set_frame_size(0X8D59, 0, 0, 0);
	add_func    (0X8E74,0X8E99);
	set_func_flags(0X8E74,0x4400);
	set_frame_size(0X8E74, 0, 0, 0);
	add_func    (0X8E99,0X8F0A);
	set_func_flags(0X8E99,0x4400);
	set_frame_size(0X8E99, 0X4, 0, 0);
	add_func    (0X8F0A,0X8F16);
	set_func_flags(0X8F0A,0x400);
	add_func    (0X8F16,0X8F2C);
	set_func_flags(0X8F16,0x4400);
	add_func    (0X8F2C,0X8F9C);
	set_func_flags(0X8F2C,0x400);
	add_func    (0X8F9C,0X8FAF);
	set_func_flags(0X8F9C,0x4400);
	set_frame_size(0X8F9C, 0, 0, 0);
	add_func    (0X8FAF,0X8FB9);
	set_func_flags(0X8FAF,0x4400);
	set_frame_size(0X8FAF, 0, 0, 0);
	add_func    (0X8FE9,0X8FEA);
	set_func_flags(0X8FE9,0x4400);
	set_frame_size(0X8FE9, 0, 0, 0);
	add_func    (0X9017,0X9047);
	set_func_flags(0X9017,0x4400);
	set_frame_size(0X9017, 0, 0, 0);
	add_func    (0X92CF,0X9375);
	set_func_flags(0X92CF,0x4400);
	set_frame_size(0X92CF, 0, 0, 0);
	set_name(0X92FE, "mcc_1", SN_LOCAL);
	set_name(0X9316, "mcc_2", SN_LOCAL);
	set_name(0X9329, "mcc_3", SN_LOCAL);
	set_name(0X933E, "mcc_4", SN_LOCAL);
	set_name(0X9351, "mcc_5", SN_LOCAL);
	set_name(0X9366, "mcc_6", SN_LOCAL);
	add_func    (0X9382,0X942C);
	set_func_flags(0X9382,0);
	set_name(0X93F4, "gdrvfspc_7303_1", SN_LOCAL);
	set_name(0X940B, "gdrvfspc_7303_2", SN_LOCAL);
	add_func    (0X9462,0X9472);
	set_func_flags(0X9462,0x4400);
	set_frame_size(0X9462, 0, 0, 0);
	add_func    (0X9496,0X94A0);
	set_func_flags(0X9496,0x4400);
	set_frame_size(0X9496, 0, 0, 0);
	add_func    (0X9688,0X9882);
	set_func_flags(0X9688,0x4400);
	set_frame_size(0X9688, 0, 0, 0);
	set_name(0X969B, "not_fat32_extension", SN_LOCAL);
	set_name(0X96AF, "setdpb_1", SN_LOCAL);
	set_name(0X96BC, "nofat", SN_LOCAL);
	set_name(0X96C7, "chk_yesfat", SN_LOCAL);
	set_name(0X96D3, "yesfat", SN_LOCAL);
	set_name(0X96DD, "LOG2LOOP", SN_LOCAL);
	set_name(0X96E7, "SAVLOG", SN_LOCAL);
	set_name(0X9719, "savlog1", SN_LOCAL);
	set_name(0X971E, "savlog2", SN_LOCAL);
	set_name(0X9754, "savlog3", SN_LOCAL);
	set_name(0X9755, "setdpb_2", SN_LOCAL);
	set_name(0X9768, "setdpb_3", SN_LOCAL);
	set_name(0X9769, "setdpb_4", SN_LOCAL);
	set_name(0X978F, "setdpb_5", SN_LOCAL);
	set_name(0X9794, "setdpb_6", SN_LOCAL);
	set_name(0X97A0, "setdpb_7", SN_LOCAL);
	set_name(0X97B6, "setdpb_8", SN_LOCAL);
	set_name(0X97C8, "setdpb_9", SN_LOCAL);
	set_name(0X97D1, "setend", SN_LOCAL);
	set_name(0X97EB, "setend1", SN_LOCAL);
	set_name(0X980C, "setend2", SN_LOCAL);
	set_name(0X9816, "setend_fat12", SN_LOCAL);
	set_name(0X982C, "setend_fat16", SN_LOCAL);
	set_name(0X9833, "setend3", SN_LOCAL);
	set_name(0X9836, "setend4", SN_LOCAL);
	set_name(0X986B, "setend_fat_1", SN_LOCAL);
	set_name(0X986D, "setend_fat_2", SN_LOCAL);
	add_func    (0X9882,0X98A0);
	set_func_flags(0X9882,0x4400);
	set_frame_size(0X9882, 0, 0, 0);
	add_func    (0X9BF9,0X9CA0);
	set_func_flags(0X9BF9,0x400);
	set_frame_size(0X9BF9, 0X2, 0, 0);
	set_name(0X9C14, "CreateCopy", SN_LOCAL);
	set_name(0X9C44, "Create_dup_jfn", SN_LOCAL);
	set_name(0X9C7C, "CreateStash", SN_LOCAL);
	set_name(0X9C93, "Create_PDB_cont", SN_LOCAL);
	add_func    (0X9CA0,0X9D1C);
	set_func_flags(0X9CA0,0x4400);
	set_frame_size(0X9CA0, 0, 0, 0);
	add_func    (0X9D35,0X9D4D);
	set_func_flags(0X9D35,0x4400);
	set_frame_size(0X9D35, 0X2, 0, 0);
	set_name(0X9D4C, "tstrdf_retn", SN_LOCAL);
	add_func    (0X9D4D,0X9D6F);
	set_func_flags(0X9D4D,0x4400);
	set_frame_size(0X9D4D, 0X4, 0, 0);
	set_name(0X9D50, "Cmplp", SN_LOCAL);
	set_name(0X9D6B, "PopRet", SN_LOCAL);
	add_func    (0X9D6F,0X9D7E);
	set_func_flags(0X9D6F,0x4400);
	set_frame_size(0X9D6F, 0, 0, 0);
	set_name(0X9D70, "CPYLoop", SN_LOCAL);
	add_func    (0X9D7E,0X9D87);
	set_func_flags(0X9D7E,0x4400);
	set_frame_size(0X9D7E, 0, 0, 0);
	set_name(0X9D7F, "FCPYLoop", SN_LOCAL);
	add_func    (0X9D87,0X9D95);
	set_func_flags(0X9D87,0x4400);
	set_frame_size(0X9D87, 0X2, 0, 0);
	add_func    (0X9D95,0X9D9F);
	set_func_flags(0X9D95,0x4400);
	set_frame_size(0X9D95, 0, 0, 0);
	add_func    (0X9D9F,0X9DA6);
	set_func_flags(0X9D9F,0x4400);
	set_frame_size(0X9D9F, 0, 0, 0);
	add_func    (0X9DA6,0X9DD1);
	set_func_flags(0X9DA6,0x4410);
	set_frame_size(0X9DA6, 0X2, 2, 0);
	define_local_var(0X9DA6, 0X9DD1, "[bp+0X4]", "TFrame.Index");
	define_local_var(0X9DA6, 0X9DD1, "[bp+0X6]", "TFrame.Tab");
	set_name(0X9DCC, "TableError", SN_LOCAL);
	add_func    (0X9DD1,0X9DF6);
	set_func_flags(0X9DD1,0x4400);
	set_frame_size(0X9DD1, 0, 0, 0);
	set_name(0X9DF4, "CMCRet", SN_LOCAL);
	add_func    (0X9DF6,0X9DFC);
	set_func_flags(0X9DF6,0x4400);
	set_frame_size(0X9DF6, 0, 0, 0);
	add_func    (0X9E25,0X9E34);
	set_func_flags(0X9E25,0x4400);
	set_frame_size(0X9E25, 0, 0, 0);
	add_func    (0X9E68,0X9E9B);
	set_func_flags(0X9E68,0x4400);
	set_frame_size(0X9E68, 0, 0, 0);
	set_name(0X9E7F, "ECritDisk_1", SN_LOCAL);
	set_name(0X9E92, "ECritDisk_4", SN_LOCAL);
	add_func    (0X9EA8,0X9EC2);
	set_func_flags(0X9EA8,0x4400);
	set_frame_size(0X9EA8, 0, 0, 0);
	set_name(0X9EBF, "ECritDev_2", SN_LOCAL);
	add_func    (0X9EC2,0X9F00);
	set_func_flags(0X9EC2,0x400);
	set_frame_size(0X9EC2, 0, 0, 0);
	set_name(0X9ED9, "LCritDisk_1", SN_LOCAL);
	set_name(0X9EF0, "LCritDisk_3", SN_LOCAL);
	add_func    (0X9F00,0X9F1A);
	set_func_flags(0X9F00,0x4400);
	set_frame_size(0X9F00, 0, 0, 0);
	set_name(0X9F17, "LCritDev_2", SN_LOCAL);
	add_func    (0X9F29,0X9F3B);
	set_func_flags(0X9F29,0x4400);
	set_frame_size(0X9F29, 0, 0, 0);
	add_func    (0X9F3B,0X9FB5);
	set_func_flags(0X9F3B,0x4400);
	set_frame_size(0X9F3B, 0, 0, 0);
	set_name(0X9F4A, "INTEST", SN_LOCAL);
	set_name(0X9F68, "no_sys_wait", SN_LOCAL);
	set_name(0X9F8A, "NoUpdate", SN_LOCAL);
	set_name(0X9F92, "GET", SN_LOCAL);
	add_func    (0X9FC1,0XA070);
	set_func_flags(0X9FC1,0x400);
	set_name(0X9FDB, "NOEDIT", SN_LOCAL);
	set_name(0X9FDD, "EDITON", SN_LOCAL);
	set_name(0X9FFF, "GOTCH", SN_LOCAL);
	set_name(0XA053, "BACKSPJ", SN_LOCAL);
	set_name(0XA055, "BUFFUL", SN_LOCAL);
	set_name(0XA05C, "ESCAPE", SN_LOCAL);
	set_name(0XA05F, "NTXLINE", SN_LOCAL);
	set_name(0XA066, "ENDLIN", SN_LOCAL);
	add_func    (0XA070,0XA07C);
	set_func_flags(0XA070,0x4400);
	set_frame_size(0XA070, 0, 0, 0);
	add_func    (0XA0C6,0XA126);
	set_func_flags(0XA0C6,0x4400);
	set_frame_size(0XA0C6, 0, 0, 0);
	set_name(0XA0E3, "OLDBAK", SN_LOCAL);
	set_name(0XA0EB, "OLDBAK_RETN", SN_LOCAL);
	set_name(0XA0EC, "OLDBAK2", SN_LOCAL);
	set_name(0XA0F4, "BAKTAB", SN_LOCAL);
	set_name(0XA100, "FNDPOS", SN_LOCAL);
	set_name(0XA10C, "CHKCNT", SN_LOCAL);
	set_name(0XA10E, "FIGTAB", SN_LOCAL);
	set_name(0XA113, "HAVTAB", SN_LOCAL);
	set_name(0XA11F, "TABBAK", SN_LOCAL);
	add_func    (0XA126,0XA129);
	set_func_flags(0XA126,0x400);
	add_func    (0XA129,0XA138);
	set_func_flags(0XA129,0x400);
	add_func    (0XA17C,0XA1AC);
	set_func_flags(0XA17C,0x4400);
	set_frame_size(0XA17C, 0, 0, 0);
	set_name(0XA18B, "FINDSETUP", SN_LOCAL);
	set_name(0XA1A8, "NOTFND", SN_LOCAL);
	add_func    (0XA1CD,0XA1D7);
	set_func_flags(0XA1CD,0x400);
	add_func    (0XA21F,0XA254);
	set_func_flags(0XA21F,0x4400);
	set_frame_size(0XA21F, 0X2, 0, 0);
	set_name(0XA24C, "RAWRET", SN_LOCAL);
	set_name(0XA24D, "RAWRET1", SN_LOCAL);
	set_name(0XA24F, "RAWNORM", SN_LOCAL);
	add_func    (0XA254,0XA259);
	set_func_flags(0XA254,0x400);
	add_func    (0XA259,0XA27D);
	set_func_flags(0XA259,0x4400);
	set_frame_size(0XA259, 0, 0, 0);
	add_func    (0XA27D,0XA2A4);
	set_func_flags(0XA27D,0x4400);
	set_frame_size(0XA27D, 0, 0, 0);
	set_name(0XA28E, "save_packet_xchg", SN_LOCAL);
	set_name(0XA294, "save_packet", SN_LOCAL);
	add_func    (0XA2AC,0XA2AD);
	set_func_flags(0XA2AC,0x4400);
	set_frame_size(0XA2AC, 0, 0, 0);
	add_func    (0XA2AF,0XA325);
	set_func_flags(0XA2AF,0x400);
	add_func    (0XA325,0XA335);
	set_func_flags(0XA325,0x4400);
	set_frame_size(0XA325, 0, 0, 0);
	add_func    (0XA33E,0XA341);
	set_func_flags(0XA33E,0x4c0);
	add_func    (0XA349,0XA366);
	set_func_flags(0XA349,0x4400);
	set_frame_size(0XA349, 0, 0, 0);
	set_name(0XA362, "CTRLU", SN_LOCAL);
	add_func    (0XA4AE,0XA550);
	set_func_flags(0XA4AE,0x4400);
	set_frame_size(0XA4AE, 0, 0, 0);
	set_name(0XA4C3, "SaveNoShare", SN_LOCAL);
	set_name(0XA4F9, "SetFCBBits", SN_LOCAL);
	set_name(0XA50C, "SaveNoShareDev", SN_LOCAL);
	set_name(0XA51E, "SaveSFN", SN_LOCAL);
	set_name(0XA52F, "SaveNoSFN", SN_LOCAL);
	set_name(0XA54B, "SimpleStuff", SN_LOCAL);
	add_func    (0XA550,0XA574);
	set_func_flags(0XA550,0x4400);
	set_frame_size(0XA550, 0, 0, 0);
	set_name(0XA561, "ovScan", SN_LOCAL);
	set_name(0XA569, "ovLoop", SN_LOCAL);
	add_func    (0XA574,0XA65D);
	set_func_flags(0XA574,0x4400);
	set_frame_size(0XA574, 0, 0, 0);
	set_name(0XA58F, "gotlocalSFT", SN_LOCAL);
	set_name(0XA59B, "lru1", SN_LOCAL);
	set_name(0XA5AF, "findSFT", SN_LOCAL);
	set_name(0XA5C3, "hackpoint", SN_LOCAL);
	set_name(0XA5DB, "lru4", SN_LOCAL);
	set_name(0XA5F0, "lru5", SN_LOCAL);
	set_name(0XA5FE, "gotSFT", SN_LOCAL);
	set_name(0XA610, "notinvalid", SN_LOCAL);
	set_name(0XA613, "zerolocalSFT", SN_LOCAL);
	set_name(0XA61E, "gotnetSFT", SN_LOCAL);
	set_name(0XA62A, "closenet", SN_LOCAL);
	set_name(0XA632, "LRUClose", SN_LOCAL);
	set_name(0XA641, "errorbadSFT", SN_LOCAL);
	set_name(0XA644, "LRUDone", SN_LOCAL);
	set_name(0XA649, "LRUDead", SN_LOCAL);
	set_name(0XA65A, "LruFCB_err", SN_LOCAL);
	add_func    (0XA65D,0XA665);
	set_func_flags(0XA65D,0x4400);
	set_frame_size(0XA65D, 0, 0, 0);
	add_func    (0XA665,0XA75D);
	set_func_flags(0XA665,0x4400);
	set_frame_size(0XA665, 0, 0, 0);
	set_name(0XA681, "RegenDead", SN_LOCAL);
	set_name(0XA682, "FCBRegen_retn", SN_LOCAL);
	set_name(0XA683, "RegenNoSharing", SN_LOCAL);
	set_name(0XA6EC, "RegenDeadJ", SN_LOCAL);
	set_name(0XA6F0, "RegenFileNoSharing", SN_LOCAL);
	add_func    (0XA75D,0XA778);
	set_func_flags(0XA75D,0x4400);
	set_frame_size(0XA75D, 0, 0, 0);
	add_func    (0XA778,0XA7DF);
	set_func_flags(0XA778,0x4400);
	set_frame_size(0XA778, 0, 0, 0);
	set_name(0XA7B1, "CheckD", SN_LOCAL);
	set_name(0XA7BF, "BadSFT", SN_LOCAL);
	set_name(0XA7C1, "CheckNet", SN_LOCAL);
	set_name(0XA7CB, "CheckNoShare", SN_LOCAL);
	add_func    (0XA7DF,0XA813);
	set_func_flags(0XA7DF,0x4400);
	set_frame_size(0XA7DF, 0X4, 0, 0);
	set_name(0XA804, "Set_SFT", SN_LOCAL);
	add_func    (0XA813,0XA851);
	set_func_flags(0XA813,0x4400);
	set_frame_size(0XA813, 0, 0, 0);
	set_name(0XA83F, "fcbharderr_fat32", SN_LOCAL);
	set_name(0XA84C, "fcbharderr_fat", SN_LOCAL);
	add_func    (0XA851,0XA85E);
	set_func_flags(0XA851,0x4400);
	set_frame_size(0XA851, 0, 0, 0);
	set_name(0XA85B, "GetBye", SN_LOCAL);
	add_func    (0XAAEE,0XAB23);
	set_func_flags(0XAAEE,0x4400);
	set_frame_size(0XAAEE, 0, 0, 0);
	set_name(0XAAF3, "main_kill_tail", SN_LOCAL);
	set_name(0XAB01, "find_check_dot", SN_LOCAL);
	set_name(0XAB0D, "got_ext", SN_LOCAL);
	set_name(0XAB15, "ext_kill_tail", SN_LOCAL);
	set_name(0XAB1F, "find_done", SN_LOCAL);
	add_func    (0XAC9C,0XACA1);
	set_func_flags(0XAC9C,0x400);
	add_func    (0XACA1,0XACB0);
	set_func_flags(0XACA1,0x4400);
	set_frame_size(0XACA1, 0, 0, 0);
	add_func    (0XACD4,0XB036);
	set_func_flags(0XACD4,0x400);
	set_name(0X8B5D, "DO_RET", SN_LOCAL);
	set_name(0XACE6, "ioctl_bad_funj2", SN_LOCAL);
	set_name(0XACEE, "ioctl_bad_handle", SN_LOCAL);
	set_name(0XACF0, "ioctl_error", SN_LOCAL);
	set_name(0XACF3, "ioctl_check_permissions", SN_LOCAL);
	set_name(0XAD03, "ioctl_check_device", SN_LOCAL);
	set_name(0XAD13, "ioctl_ok", SN_LOCAL);
	set_name(0XAD16, "ioctl_read", SN_LOCAL);
	set_name(0XAD2E, "ioctl_no_high", SN_LOCAL);
	set_name(0XAD36, "ioctl_ok_j", SN_LOCAL);
	set_name(0XAD5A, "ioctl_get_status", SN_LOCAL);
	set_name(0XAD63, "DO_IOFUNC", SN_LOCAL);
	set_name(0XAD6E, "ioctl_status_ret", SN_LOCAL);
	set_name(0XAD80, "IOCTL_drvnum", SN_LOCAL);
	set_name(0XADB3, "GenIOCTL_chk_net", SN_LOCAL);
	set_name(0XADBF, "Do_GenIOCTL", SN_LOCAL);
	set_name(0XADC9, "GenIOCTL_extended", SN_LOCAL);
	set_name(0XADD5, "GenIOCTL_extd1", SN_LOCAL);
	set_name(0XADE0, "GenIOCTL_extd2", SN_LOCAL);
	set_name(0XADFA, "GenIOCTL_lock", SN_LOCAL);
	set_name(0XADFF, "GenIOCTL_OK", SN_LOCAL);
	set_name(0XAE02, "GenIOCTL_normal", SN_LOCAL);
	set_name(0XAE0E, "GenIOCTL_GSMID", SN_LOCAL);
	set_name(0XAE49, "GenIOCTL_FAT32", SN_LOCAL);
	set_name(0XAE4B, "GenIOCTL_FAT", SN_LOCAL);
	set_name(0XAE4D, "GenIOCTL_normal2", SN_LOCAL);
	set_name(0XAE69, "SetIOCtlBlock", SN_LOCAL);
	set_name(0XAE9B, "ioctl_bad_handle_j", SN_LOCAL);
	set_name(0XAEAC, "ioctl_rm_1", SN_LOCAL);
	set_name(0XAEC6, "ioctl_rm_2", SN_LOCAL);
	set_name(0XAEE9, "ioctl_rm_3", SN_LOCAL);
	set_name(0XAF21, "ioctl_da_ok_j", SN_LOCAL);
	set_name(0XAF39, "ioctl_drive_attr2", SN_LOCAL);
	set_name(0XAF49, "IOCTLShare", SN_LOCAL);
	set_name(0XAF62, "IOCTLLocal", SN_LOCAL);
	set_name(0XAF6D, "ioctl_set_DX", SN_LOCAL);
	set_name(0XAF82, "ioctl_got_sft", SN_LOCAL);
	set_name(0XAF88, "ioctl_bad_funj4", SN_LOCAL);
	set_name(0XAF98, "ioctl_gd_1", SN_LOCAL);
	set_name(0XAFB2, "ioctl_gd_2", SN_LOCAL);
	set_name(0XAFD4, "ioctl_gd_3", SN_LOCAL);
	set_name(0XAFD6, "ioctl_do_string", SN_LOCAL);
	set_name(0XAFEB, "ioctl_control_call", SN_LOCAL);
	set_name(0XB00F, "ioctl_do_IO", SN_LOCAL);
	add_func    (0XB036,0XB071);
	set_func_flags(0XB036,0x4400);
	set_frame_size(0XB036, 0, 0, 0);
	set_name(0XB06E, "got_dev_ptr", SN_LOCAL);
	set_name(0XB06F, "ioctl_bad_drv", SN_LOCAL);
	add_func    (0XB071,0XB07B);
	set_func_flags(0XB071,0x4400);
	set_frame_size(0XB071, 0, 0, 0);
	add_func    (0XB0C5,0XB233);
	set_func_flags(0XB0C5,0x4400);
	set_frame_size(0XB0C5, 0, 0, 0);
	set_name(0XB0D0, "LOCAL_DELETE", SN_LOCAL);
	set_name(0XB0E2, "SKPNUL", SN_LOCAL);
	set_name(0XB0F6, "TEST_QUEST", SN_LOCAL);
	set_name(0XB115, "CHECK_ATTS", SN_LOCAL);
	set_name(0XB123, "NOT_ALL", SN_LOCAL);
	set_name(0XB133, "No_file", SN_LOCAL);
	set_name(0XB136, "ErrorReturn", SN_LOCAL);
	set_name(0XB13B, "_bad_path", SN_LOCAL);
	set_name(0XB140, "Del_found", SN_LOCAL);
	set_name(0XB149, "Del_access_err", SN_LOCAL);
	set_name(0XB14E, "NOT_DIR", SN_LOCAL);
	set_name(0XB152, "DELFILE", SN_LOCAL);
	set_name(0XB171, "DoDelete", SN_LOCAL);
	set_name(0XB179, "DEL_SHARE_OK", SN_LOCAL);
	set_name(0XB186, "yesdirty", SN_LOCAL);
	set_name(0XB1A1, "yesdirty_fc_1", SN_LOCAL);
	set_name(0XB1BA, "yesdirty_fc_2", SN_LOCAL);
	set_name(0XB1BF, "yesdirty_fc_3", SN_LOCAL);
	set_name(0XB1D2, "yesdirty_fc_4", SN_LOCAL);
	set_name(0XB1D8, "DELNXT", SN_LOCAL);
	set_name(0XB222, "No_Set_Flag", SN_LOCAL);
	set_name(0XB226, "DelError", SN_LOCAL);
	set_name(0XB22D, "No_fileJ", SN_LOCAL);
	set_name(0XB230, "Del_access_errJ", SN_LOCAL);
	add_func    (0XB233,0XB292);
	set_func_flags(0XB233,0x4400);
	set_frame_size(0XB233, 0, 0, 0);
	add_func    (0XB292,0XB4CA);
	set_func_flags(0XB292,0x4400);
	set_frame_size(0XB292, 0, 0, 0);
	set_name(0XB29D, "LOCAL_RENAME", SN_LOCAL);
	set_name(0XB2BA, "SAMEDRV", SN_LOCAL);
	set_name(0XB2DE, "GOTERR", SN_LOCAL);
	set_name(0XB2DF, "RENAME_POP", SN_LOCAL);
	set_name(0XB2E8, "Check_Dev", SN_LOCAL);
	set_name(0XB300, "notdir", SN_LOCAL);
	set_name(0XB319, "REN_OK1", SN_LOCAL);
	set_name(0XB34A, "BAD_ACC", SN_LOCAL);
	set_name(0XB34E, "RENAME_CLEAN", SN_LOCAL);
	set_name(0XB369, "BAD_ERR", SN_LOCAL);
	set_name(0XB370, "NODEST", SN_LOCAL);
	set_name(0XB37D, "BAD_PATH", SN_LOCAL);
	set_name(0XB384, "SAVEDEST", SN_LOCAL);
	set_name(0XB39D, "BUILDDEST", SN_LOCAL);
	set_name(0XB3F8, "builddst_1", SN_LOCAL);
	set_name(0XB41B, "BAD_ACCJ", SN_LOCAL);
	set_name(0XB41E, "builddst_2", SN_LOCAL);
	set_name(0XB42A, "GOT_DEST", SN_LOCAL);
	set_name(0XB43D, "GOT_DEST2", SN_LOCAL);
	set_name(0XB45A, "SIMPLE_RENAME", SN_LOCAL);
	set_name(0XB46D, "DIRTY_IT", SN_LOCAL);
	set_name(0XB480, "DIRTY_IT_OK", SN_LOCAL);
	set_name(0XB499, "NOT_DIR2", SN_LOCAL);
	set_name(0XB4C0, "REN_OK2", SN_LOCAL);
	set_name(0XB4C6, "RENAME_OVER", SN_LOCAL);
	add_func    (0XB4CA,0XB4F6);
	set_func_flags(0XB4CA,0x4400);
	set_frame_size(0XB4CA, 0, 0, 0);
	set_name(0XB4E7, "gs_cont", SN_LOCAL);
	set_name(0XB4F5, "gs_ret_label", SN_LOCAL);
	add_func    (0XB4F6,0XB502);
	set_func_flags(0XB4F6,0x4400);
	set_frame_size(0XB4F6, 0, 0, 0);
	set_name(0XB4FD, "NOCHG", SN_LOCAL);
	add_func    (0XB502,0XB563);
	set_func_flags(0XB502,0x4400);
	set_frame_size(0XB502, 0, 0, 0);
	set_name(0XB50D, "LOCAL_INFO", SN_LOCAL);
	set_name(0XB520, "info_no_file", SN_LOCAL);
	set_name(0XB523, "BadRet", SN_LOCAL);
	set_name(0XB524, "JustRet", SN_LOCAL);
	set_name(0XB528, "bad_path1", SN_LOCAL);
	set_name(0XB52D, "info_check_dev", SN_LOCAL);
	set_name(0XB53F, "not_root", SN_LOCAL);
	set_name(0XB55F, "NO_SIZE", SN_LOCAL);
	add_func    (0XB563,0XB5E7);
	set_func_flags(0XB563,0x4400);
	set_frame_size(0XB563, 0, 0, 0);
	set_name(0XB568, "_BAD_ACC", SN_LOCAL);
	set_name(0XB57C, "set_look", SN_LOCAL);
	set_name(0XB589, "LOCAL_SET", SN_LOCAL);
	set_name(0XB59A, "set_check_device", SN_LOCAL);
	set_name(0XB5A4, "set_check_share", SN_LOCAL);
	set_name(0XB5B6, "cannot_set_root", SN_LOCAL);
	set_name(0XB5BC, "set_do", SN_LOCAL);
	set_name(0XB5D8, "yesdirty3", SN_LOCAL);
	set_name(0XB5E3, "OK_BYE", SN_LOCAL);
	add_func    (0XB5E7,0XB5FD);
	set_func_flags(0XB5E7,0x4400);
	set_frame_size(0XB5E7, 0, 0, 0);
	set_name(0XB5F9, "DO_INC", SN_LOCAL);
	add_func    (0XB6D4,0XB725);
	set_func_flags(0XB6D4,0x4400);
	set_frame_size(0XB6D4, 0, 0, 0);
	set_name(0XB6E3, "Set_Media_ID_1", SN_LOCAL);
	set_name(0XB6FA, "Set_Media_ID_2", SN_LOCAL);
	set_name(0XB703, "NoName", SN_LOCAL);
	set_name(0XB706, "doset", SN_LOCAL);
	set_name(0XB71F, "geterr", SN_LOCAL);
	add_func    (0XB725,0XB739);
	set_func_flags(0XB725,0x4400);
	set_frame_size(0XB725, 0, 0, 0);
	set_name(0XB738, "NOTEX", SN_LOCAL);
	add_func    (0XB86D,0XB89E);
	set_func_flags(0XB86D,0x4400);
	set_frame_size(0XB86D, 0X2, 0, 0);
	set_name(0XB882, "CheckShareMode", SN_LOCAL);
	set_name(0XB887, "CheckAccessMode", SN_LOCAL);
	set_name(0XB898, "Make_Bad_Access", SN_LOCAL);
	add_func    (0XB89E,0XB9B7);
	set_func_flags(0XB89E,0x4400);
	set_frame_size(0XB89E, 0, 0, 0);
	set_name(0XB8B1, "LOCAL_DSK_INFO", SN_LOCAL);
	set_name(0XB8F7, "dsk_info_1", SN_LOCAL);
	set_name(0XB924, "dsk_info_2", SN_LOCAL);
	set_name(0XB937, "SCANFREE", SN_LOCAL);
	set_name(0XB946, "NOTFREECLUS", SN_LOCAL);
	set_name(0XB96C, "NOTFREECLUS2", SN_LOCAL);
	set_name(0XB97C, "ReturnVals", SN_LOCAL);
	set_name(0XB99B, "ReturnVals2", SN_LOCAL);
	set_name(0XB9AB, "ReturnVals3", SN_LOCAL);
	set_name(0XB9AF, "CRIT_LEAVE", SN_LOCAL);
	set_name(0XB9B3, "GotVal", SN_LOCAL);
	add_func    (0XB9B7,0XBB14);
	set_func_flags(0XB9B7,0x4400);
	set_frame_size(0XB9B7, 0, 0, 0);
	set_name(0XBA02, "u_fat32_inf_1", SN_LOCAL);
	set_name(0XBA6E, "u_fat32_inf_2", SN_LOCAL);
	set_name(0XBA7B, "u_fat32_inf_3", SN_LOCAL);
	set_name(0XBA94, "u_fat32_inf_4", SN_LOCAL);
	set_name(0XBAA5, "u_fat32_inf_5", SN_LOCAL);
	set_name(0XBAC2, "u_fat32_inf_6", SN_LOCAL);
	set_name(0XBAD0, "u_fat32_inf_7", SN_LOCAL);
	set_name(0XBAE8, "u_fat32_inf_8", SN_LOCAL);
	set_name(0XBAEA, "u_fat32_inf_9", SN_LOCAL);
	set_name(0XBAF2, "u_fat32_inf_10", SN_LOCAL);
	set_name(0XBAF9, "u_fat32_inf_11", SN_LOCAL);
	set_name(0XBB08, "u_fat32_inf_12", SN_LOCAL);
	set_name(0XBB0E, "u_fat32_inf_13", SN_LOCAL);
	set_name(0XBB13, "u_fat32_inf_14", SN_LOCAL);
	add_func    (0XBB14,0XBBD9);
	set_func_flags(0XBB14,0x4400);
	set_frame_size(0XBB14, 0, 0, 0);
	set_name(0XBB23, "TEST_RE_NET2", SN_LOCAL);
	set_name(0XBB2B, "TEST_RE_NET3", SN_LOCAL);
	set_name(0XBB31, "LOCAL_SEARCH_FIRST", SN_LOCAL);
	set_name(0XBB43, "norm_GETPATH", SN_LOCAL);
	set_name(0XBB51, "BadBye", SN_LOCAL);
	set_name(0XBB56, "bad_path3", SN_LOCAL);
	set_name(0XBB5B, "find_check_dev", SN_LOCAL);
	set_name(0XBB69, "found_entry", SN_LOCAL);
	set_name(0XBB8B, "NOTKANJB", SN_LOCAL);
	set_name(0XBBB9, "OKSTORE", SN_LOCAL);
	set_name(0XBBBD, "DOSREL", SN_LOCAL);
	set_name(0XBBD2, "NO05", SN_LOCAL);
	add_func    (0XBBD9,0XBC25);
	set_func_flags(0XBBD9,0x4400);
	set_frame_size(0XBBD9, 0, 0, 0);
	set_name(0XBBEA, "LOCAL_SEARCH_NEXT", SN_LOCAL);
	add_func    (0XBC25,0XBC72);
	set_func_flags(0XBC25,0x4400);
	set_frame_size(0XBC25, 0, 0, 0);
	add_func    (0XBC72,0XBC84);
	set_func_flags(0XBC72,0x4400);
	set_frame_size(0XBC72, 0, 0, 0);
	set_name(0XBC79, "getnext", SN_LOCAL);
	set_name(0XBC83, "NO_Question", SN_LOCAL);
	add_func    (0XBC84,0XBCEF);
	set_func_flags(0XBC84,0x4400);
	set_frame_size(0XBC84, 0, 0, 0);
	set_name(0XBC8E, "reset_free_jfn", SN_LOCAL);
	set_name(0XBCB7, "FCBTest", SN_LOCAL);
	set_name(0XBCC0, "FCBNext", SN_LOCAL);
	set_name(0XBCC5, "FCBScanDone", SN_LOCAL);
	set_name(0XBCC7, "Scan", SN_LOCAL);
	set_name(0XBCCF, "Scan1", SN_LOCAL);
	set_name(0XBCEC, "scan_next", SN_LOCAL);
	add_func    (0XBD09,0XBE33);
	set_func_flags(0XBD09,0x4400);
	set_frame_size(0XBD09, 0, 0, 0);
	set_name(0XBD1D, "LocalClose", SN_LOCAL);
	set_name(0XBD64, "CloseEntry2", SN_LOCAL);
	set_name(0XBD6F, "CloseEntry3", SN_LOCAL);
	set_name(0XBD95, "CLOSE_GO", SN_LOCAL);
	set_name(0XBDA9, "setattr", SN_LOCAL);
	set_name(0XBDAE, "close_clean", SN_LOCAL);
	set_name(0XBDE7, "yesdirty4", SN_LOCAL);
	set_name(0XBE2C, "NoFree", SN_LOCAL);
	add_func    (0XBE33,0XBE40);
	set_func_flags(0XBE33,0x4400);
	set_frame_size(0XBE33, 0, 0, 0);
	set_name(0XBE3B, "SetCount", SN_LOCAL);
	add_func    (0XBE40,0XBE72);
	set_func_flags(0XBE40,0x4400);
	set_frame_size(0XBE40, 0, 0, 0);
	set_name(0XBE59, "localcommit_retn", SN_LOCAL);
	set_name(0XBE5A, "LOCAL_COMMIT", SN_LOCAL);
	add_func    (0XBE72,0XBE8C);
	set_func_flags(0XBE72,0x4400);
	set_frame_size(0XBE72, 0, 0, 0);
	set_name(0XBE8B, "localcommit_retn", SN_LOCAL);
	add_func    (0XBF78,0XBF98);
	set_func_flags(0XBF78,0x4400);
	set_frame_size(0XBF78, 0, 0, 0);
	add_func    (0XBFC9,0XC10D);
	set_func_flags(0XBFC9,0x4400);
	set_frame_size(0XBFC9, 0, 0, 0);
	set_name(0XBFD4, "LOCAL_CHDIR", SN_LOCAL);
	set_name(0XBFE8, "nojoin", SN_LOCAL);
	set_name(0XC001, "ChDirDone", SN_LOCAL);
	set_name(0XC010, "LOCAL_RMDIR", SN_LOCAL);
	set_name(0XC032, "LOCAL_RMDIR_cont", SN_LOCAL);
	set_name(0XC04F, "NOPATH", SN_LOCAL);
	set_name(0XC055, "NOTDIRPATHPOP", SN_LOCAL);
	set_name(0XC057, "NOTDIRPATHPOP2", SN_LOCAL);
	set_name(0XC058, "NOTDIRPATH", SN_LOCAL);
	set_name(0XC05B, "rmdir_get_buf", SN_LOCAL);
	set_name(0XC0D5, "rmdir_dlne", SN_LOCAL);
	set_name(0XC0EE, "rmdir_fde", SN_LOCAL);
	add_func    (0XC10D,0XC113);
	set_func_flags(0XC10D,0x4400);
	set_frame_size(0XC10D, 0, 0, 0);
	add_func    (0XC113,0XC127);
	set_func_flags(0XC113,0x4400);
	set_frame_size(0XC113, 0, 0, 0);
	add_func    (0XC127,0XC358);
	set_func_flags(0XC127,0x4400);
	set_frame_size(0XC127, 0, 0, 0);
	set_name(0XC138, "READ_NO_MODE", SN_LOCAL);
	set_name(0XC148, "NoIORet", SN_LOCAL);
	set_name(0XC14A, "LOCAL_READ", SN_LOCAL);
	set_name(0XC160, "READDEV", SN_LOCAL);
	set_name(0XC179, "ENDRDDEVJ3", SN_LOCAL);
	set_name(0XC17C, "TESTRAW", SN_LOCAL);
	set_name(0XC189, "DVRDRAW", SN_LOCAL);
	set_name(0XC19B, "ReadRawRetry", SN_LOCAL);
	set_name(0XC1D5, "DEVIOFERR", SN_LOCAL);
	set_name(0XC1DD, "CRDROK", SN_LOCAL);
	set_name(0XC1E7, "NOTRDCON", SN_LOCAL);
	set_name(0XC201, "DVRDLP", SN_LOCAL);
	set_name(0XC22C, "CRDOK", SN_LOCAL);
	set_name(0XC23E, "DVRDIGN", SN_LOCAL);
	set_name(0XC254, "ENDRDDEVJ", SN_LOCAL);
	set_name(0XC257, "do_polling", SN_LOCAL);
	set_name(0XC260, "do_io", SN_LOCAL);
	set_name(0XC28A, "check_busy", SN_LOCAL);
	set_name(0XC2C4, "next_char", SN_LOCAL);
	set_name(0XC2D0, "devrderr", SN_LOCAL);
	set_name(0XC2D9, "no_char", SN_LOCAL);
	set_name(0XC2E2, "pop_done_read", SN_LOCAL);
	set_name(0XC2E3, "done_read", SN_LOCAL);
	set_name(0XC2EB, "TRANBUF", SN_LOCAL);
	set_name(0XC2F4, "NORMCH", SN_LOCAL);
	set_name(0XC301, "ENDRDCON", SN_LOCAL);
	set_name(0XC30A, "ENDRDDEV", SN_LOCAL);
	set_name(0XC31B, "SETSFTC", SN_LOCAL);
	set_name(0XC31F, "READCON", SN_LOCAL);
	set_name(0XC337, "GETBUF", SN_LOCAL);
	add_func    (0XC358,0XC4CD);
	set_func_flags(0XC358,0x4400);
	set_frame_size(0XC358, 0, 0, 0);
	set_name(0XC366, "BadMode", SN_LOCAL);
	set_name(0XC369, "Check_FCB_RO", SN_LOCAL);
	set_name(0XC377, "WRITE_NO_MODE", SN_LOCAL);
	set_name(0XC385, "LOCAL_WRITE", SN_LOCAL);
	set_name(0XC3A9, "nocommit", SN_LOCAL);
	set_name(0XC3AD, "DVWRTRAW", SN_LOCAL);
	set_name(0XC3E4, "CWRFERR", SN_LOCAL);
	set_name(0XC3E8, "CWRTROK", SN_LOCAL);
	set_name(0XC3ED, "ENDWRDEV", SN_LOCAL);
	set_name(0XC3F7, "WRTNUL", SN_LOCAL);
	set_name(0XC3F9, "WRTCOOKJ", SN_LOCAL);
	set_name(0XC3FC, "WRTDEV", SN_LOCAL);
	set_name(0XC41F, "TEST_DEV_CON", SN_LOCAL);
	set_name(0XC43E, "DVWRTLP", SN_LOCAL);
	set_name(0XC468, "CWROK", SN_LOCAL);
	set_name(0XC471, "DVWRTIGN", SN_LOCAL);
	set_name(0XC490, "WRTCOOKDONE", SN_LOCAL);
	set_name(0XC496, "WRITECON", SN_LOCAL);
	set_name(0XC4AE, "WRITECON1", SN_LOCAL);
	set_name(0XC4BE, "WRITECON2", SN_LOCAL);
	set_name(0XC4C3, "CONEOF", SN_LOCAL);
	add_func    (0XC4CD,0XC4F3);
	set_func_flags(0XC4CD,0x4400);
	set_frame_size(0XC4CD, 0, 0, 0);
	set_name(0XC4D5, "GetNormal", SN_LOCAL);
	set_name(0XC4E4, "RET44P", SN_LOCAL);
	set_name(0XC4E7, "GetRedir", SN_LOCAL);
	add_func    (0XC4F3,0XC50D);
	set_func_flags(0XC4F3,0x4400);
	set_frame_size(0XC4F3, 0, 0, 0);
	set_name(0XC509, "DO_ERR", SN_LOCAL);
	add_func    (0XC50D,0XC5A8);
	set_func_flags(0XC50D,0x4400);
	set_frame_size(0XC50D, 0, 0, 0);
	set_name(0XC57B, "setup_1", SN_LOCAL);
	set_name(0XC580, "setup_2", SN_LOCAL);
	set_name(0XC58D, "NOSETSTUFF", SN_LOCAL);
	set_name(0XC59D, "NoDec", SN_LOCAL);
	set_name(0XC5A1, "setup_OK", SN_LOCAL);
	set_name(0XC5A2, "EOFERR", SN_LOCAL);
	set_name(0XC5A5, "NOROOM", SN_LOCAL);
	add_func    (0XC5A8,0XC680);
	set_func_flags(0XC5A8,0x4400);
	set_name(0XC5B7, "NOTVOLSRCH", SN_LOCAL);
	set_name(0XC5C4, "SRCH2", SN_LOCAL);
	set_name(0XC5E9, "CHKFNAM", SN_LOCAL);
	set_name(0XC600, "NO_E5", SN_LOCAL);
	set_name(0XC611, "FREE", SN_LOCAL);
	set_name(0XC620, "TSTALL", SN_LOCAL);
	set_name(0XC62D, "NEXTENT2", SN_LOCAL);
	set_name(0XC62E, "NEXTENT3", SN_LOCAL);
	set_name(0XC639, "FOUND", SN_LOCAL);
	set_name(0XC654, "check_one_volume_id", SN_LOCAL);
	set_name(0XC665, "RETFF", SN_LOCAL);
	set_name(0XC66D, "SETESRET", SN_LOCAL);
	set_name(0XC67F, "SETESRETN", SN_LOCAL);
	add_func    (0XC680,0XC701);
	set_func_flags(0XC680,0x4400);
	set_frame_size(0XC680, 0, 0, 0);
	set_name(0XC6A7, "nextentry_cont", SN_LOCAL);
	set_name(0XC6D2, "NONE", SN_LOCAL);
	set_name(0XC6D4, "HAVIT", SN_LOCAL);
	set_name(0XC6D9, "SAMECLUS", SN_LOCAL);
	add_func    (0XC701,0XC731);
	set_func_flags(0XC701,0x4400);
	add_func    (0XC7C1,0XC81E);
	set_func_flags(0XC7C1,0x4400);
	set_frame_size(0XC7C1, 0, 0, 0);
	set_name(0XC7EA, "UNP_OK", SN_LOCAL);
	add_func    (0XC81E,0XC883);
	set_func_flags(0XC81E,0x4400);
	set_frame_size(0XC81E, 0, 0, 0);
	set_name(0XC84B, "sdsrch_fat_3", SN_LOCAL);
	set_name(0XC84E, "SETROOTSRCH_FAT", SN_LOCAL);
	set_name(0XC882, "setdirsrch_retn", SN_LOCAL);
	add_func    (0XC883,0XC8CC);
	set_func_flags(0XC883,0x4400);
	set_frame_size(0XC883, 0, 0, 0);
	set_name(0XC88C, "set_sftfcbe_1", SN_LOCAL);
	set_name(0XC89C, "set_sftfcbe_2", SN_LOCAL);
	set_name(0XC8CA, "set_sftfcbe_3", SN_LOCAL);
	add_func    (0XC8CC,0XC8FF);
	set_func_flags(0XC8CC,0x4400);
	set_frame_size(0XC8CC, 0, 0, 0);
	set_name(0XC8DB, "f_sfte_1", SN_LOCAL);
	set_name(0XC8F0, "f_sfte_2", SN_LOCAL);
	set_name(0XC8FD, "f_sfte_3", SN_LOCAL);
	add_func    (0XC8FF,0XC948);
	set_func_flags(0XC8FF,0x4400);
	set_frame_size(0XC8FF, 0, 0, 0);
	set_name(0XC90E, "scan_next_sftfcb", SN_LOCAL);
	set_name(0XC932, "sfte_i_found", SN_LOCAL);
	set_name(0XC942, "sfte_i_notfound", SN_LOCAL);
	set_name(0XC944, "find_sfte_i_error", SN_LOCAL);
	add_func    (0XC948,0XC95F);
	set_func_flags(0XC948,0x4400);
	set_frame_size(0XC948, 0, 0, 0);
	set_name(0XC95D, "sftf_1", SN_LOCAL);
	add_func    (0XC95F,0XC9FE);
	set_func_flags(0XC95F,0x4400);
	set_name(0XC985, "Build_devJ", SN_LOCAL);
	set_name(0XC99E, "MoveLoop", SN_LOCAL);
	set_name(0XC9A6, "NoSave", SN_LOCAL);
	set_name(0XC9B3, "InternalError", SN_LOCAL);
	set_name(0XC9B5, "CrackIt", SN_LOCAL);
	set_name(0XC9D6, "NO_CURR_D", SN_LOCAL);
	set_name(0XC9E3, "CrackIt2", SN_LOCAL);
	set_name(0XC9FA, "SETFERR", SN_LOCAL);
	set_name(0XCA2E, "ROOTPATH", SN_LOCAL);
	set_name(0XCA45, "FINDPATH", SN_LOCAL);
	set_name(0XCA6B, "NOIDS", SN_LOCAL);
	set_name(0XCA80, "GetNam", SN_LOCAL);
	set_name(0XCA96, "StoNam", SN_LOCAL);
	set_name(0XCA99, "_SetExt", SN_LOCAL);
	set_name(0XCA9C, "GetExt", SN_LOCAL);
	set_name(0XCAAC, "StoExt", SN_LOCAL);
	set_name(0XCAAF, "_GetDone", SN_LOCAL);
	set_name(0XCABE, "check_device", SN_LOCAL);
	set_name(0XCACD, "NOT_LAST", SN_LOCAL);
	set_name(0XCADD, "GO_BDEV", SN_LOCAL);
	set_name(0XCAE1, "FindFile", SN_LOCAL);
	set_name(0XCAED, "NOE5", SN_LOCAL);
	set_name(0XCAFB, "LOAD_BUF", SN_LOCAL);
	set_name(0XCB08, "GO_NEXT", SN_LOCAL);
	set_name(0XCB1E, "NEXT_ONE", SN_LOCAL);
	set_name(0XCB23, "SetDir", SN_LOCAL);
	set_name(0XCB3B, "SetDir2", SN_LOCAL);
	set_name(0XCB5F, "SKIP_GETB", SN_LOCAL);
	set_name(0XCB6A, "SET_THE_BUF", SN_LOCAL);
	set_name(0XCB87, "find_bad_name", SN_LOCAL);
	set_name(0XCB88, "_BADPATH", SN_LOCAL);
	set_name(0XCB8C, "FILEINPATH", SN_LOCAL);
	set_name(0XCB99, "INCRET", SN_LOCAL);
	set_name(0XCB9B, "_SETRET", SN_LOCAL);
	set_name(0XCB9C, "BADPATHPOP", SN_LOCAL);
	set_name(0XCBA3, "BADPRET", SN_LOCAL);
	add_func    (0XC9FE,0XCA2E);
	set_func_flags(0XC9FE,0x4400);
	set_frame_size(0XC9FE, 0, 0, 0);
	set_name(0XCA0A, "TESTLOOP", SN_LOCAL);
	set_name(0XCA1D, "NOTDEV", SN_LOCAL);
	set_name(0XCA1F, "TESTDEVICE", SN_LOCAL);
	add_func    (0XCBAB,0XCBBF);
	set_func_flags(0XCBAB,0x4400);
	set_frame_size(0XCBAB, 0, 0, 0);
	add_func    (0XCBBF,0XCBCC);
	set_func_flags(0XCBBF,0x4400);
	set_frame_size(0XCBBF, 0, 0, 0);
	add_func    (0XCBCC,0XCC2D);
	set_func_flags(0XCBCC,0x4400);
	set_frame_size(0XCBCC, 0X4, 0, 0);
	set_name(0XCBE0, "NOKTR", SN_LOCAL);
	set_name(0XCBEA, "LOOKIO", SN_LOCAL);
	set_name(0XCC03, "SKIPDEV", SN_LOCAL);
	set_name(0XCC0A, "RET31", SN_LOCAL);
	set_name(0XCC0B, "RETNV", SN_LOCAL);
	set_name(0XCC18, "IOCHK", SN_LOCAL);
	add_func    (0XCC2D,0XCC5B);
	set_func_flags(0XCC2D,0x4400);
	set_frame_size(0XCC2D, 0, 0, 0);
	add_func    (0XCC5B,0XCD44);
	set_func_flags(0XCC5B,0x4410);
	set_frame_size(0XCC5B, 0X6, 2, 0);
	define_local_var(0XCC5B, 0XCD44, "[bp-0X6]", "SaveCDS");
	define_local_var(0XCC5B, 0XCD44, "[bp-0X2]", "Temp");
	set_name(0XCC7C, "_DoSplice", SN_LOCAL);
	set_name(0XCCDE, "DoChdir", SN_LOCAL);
	set_name(0XCD06, "DoChdir2", SN_LOCAL);
	set_name(0XCD16, "SetCluster", SN_LOCAL);
	set_name(0XCD28, "_setdirclus", SN_LOCAL);
	set_name(0XCD2C, "RestoreCDS", SN_LOCAL);
	set_name(0XCD3A, "FatFail", SN_LOCAL);
	add_func    (0XCD44,0XCD89);
	set_func_flags(0XCD44,0x4400);
	set_frame_size(0XCD44, 0X4, 0, 0);
	set_name(0XCD66, "ParseDev", SN_LOCAL);
	set_name(0XCD7C, "SkipSearch", SN_LOCAL);
	set_name(0XCD7E, "CheckReturn", SN_LOCAL);
	set_name(0XCD83, "Check_Done", SN_LOCAL);
	set_name(0XCD86, "NotDevice", SN_LOCAL);
	add_func    (0XCDAA,0XCECC);
	set_func_flags(0XCDAA,0x4400);
	set_frame_size(0XCDAA, 0, 0, 0);
	set_name(0XCDCA, "IOTO22", SN_LOCAL);
	set_name(0XCDD3, "IOTO33", SN_LOCAL);
	set_name(0XCDEA, "_no_sys_wait", SN_LOCAL);
	set_name(0XCE1B, "OKDevIO", SN_LOCAL);
	set_name(0XCE2A, "DNODRD", SN_LOCAL);
	set_name(0XCE49, "not_fail_ret", SN_LOCAL);
	set_name(0XCE4F, "DevErr", SN_LOCAL);
	set_name(0XCE5F, "NO_RETRY", SN_LOCAL);
	set_name(0XCE6E, "not_fail", SN_LOCAL);
	set_name(0XCE70, "IOTOFILE", SN_LOCAL);
	set_name(0XCE7D, "IOIST", SN_LOCAL);
	set_name(0XCE91, "IOIST2", SN_LOCAL);
	set_name(0XCE9D, "IOUT1", SN_LOCAL);
	set_name(0XCEBC, "IOUT2", SN_LOCAL);
	set_name(0XCEC2, "IOUT", SN_LOCAL);
	add_func    (0XCECC,0XCEEC);
	set_func_flags(0XCECC,0x4400);
	set_frame_size(0XCECC, 0, 0, 0);
	add_func    (0XCEEC,0XCF1C);
	set_func_flags(0XCEEC,0x400);
	add_func    (0XCF1C,0XCF2E);
	set_func_flags(0XCF1C,0x400);
	add_func    (0XCF2E,0XCF36);
	set_func_flags(0XCF2E,0x400);
	add_func    (0XCF36,0XCFA6);
	set_func_flags(0XCF36,0x4400);
	set_frame_size(0XCF36, 0, 0, 0);
	set_name(0XCF65, "OPCLS_RETRY", SN_LOCAL);
	set_name(0XCF92, "BLKDEV", SN_LOCAL);
	set_name(0XCF96, "HRDERR", SN_LOCAL);
	set_name(0XCFA0, "OPCLS_DONEP", SN_LOCAL);
	set_name(0XCFA1, "OPCLS_DONE", SN_LOCAL);
	add_func    (0XCFA6,0XCFA9);
	set_func_flags(0XCFA6,0x400);
	add_func    (0XCFA9,0XD05D);
	set_func_flags(0XCFA9,0x4400);
	set_frame_size(0XCFA9, 0, 0, 0);
	set_name(0XCFBD, "call_ecritdev", SN_LOCAL);
	set_name(0XCFDA, "chkext", SN_LOCAL);
	set_name(0XD002, "chksector", SN_LOCAL);
	set_name(0XD012, "chardev2", SN_LOCAL);
	set_name(0XD046, "dev_exit", SN_LOCAL);
	set_name(0XD05A, "dev_exit2", SN_LOCAL);
	add_func    (0XD05D,0XD090);
	set_func_flags(0XD05D,0x4400);
	set_frame_size(0XD05D, 0X2, 0, 0);
	add_func    (0XD090,0XD09C);
	set_func_flags(0XD090,0x4400);
	set_frame_size(0XD090, 0X2, 0, 0);
	add_func    (0XD09C,0XD1AE);
	set_func_flags(0XD09C,0x4400);
	set_frame_size(0XD09C, 0, 0, 0);
	set_name(0XD0A6, "CHECK_IF_ROOT", SN_LOCAL);
	set_name(0XD0B4, "builddir_stc_retn", SN_LOCAL);
	set_name(0XD0B5, "builddir_retn", SN_LOCAL);
	set_name(0XD0CC, "NEWDIR2", SN_LOCAL);
	set_name(0XD0FB, "NULLDIR", SN_LOCAL);
	set_name(0XD107, "builddir_retn_j", SN_LOCAL);
	set_name(0XD12C, "ADDINGDIR", SN_LOCAL);
	set_name(0XD153, "NOTFIRSTGROW", SN_LOCAL);
	set_name(0XD15A, "GOTDIRREC", SN_LOCAL);
	set_name(0XD162, "ZERODIR", SN_LOCAL);
	set_name(0XD171, "GET_SSIZE", SN_LOCAL);
	set_name(0XD18C, "EVENZ", SN_LOCAL);
	set_name(0XD19C, "yesdirty7", SN_LOCAL);
	add_func    (0XD1AE,0XD1F6);
	set_func_flags(0XD1AE,0x4400);
	set_frame_size(0XD1AE, 0, 0, 0);
	set_name(0XD1E6, "SETDOTENT_cont", SN_LOCAL);
	add_func    (0XD1F6,0XD244);
	set_func_flags(0XD1F6,0x4400);
	set_frame_size(0XD1F6, 0, 0, 0);
	set_name(0XD232, "make_node1", SN_LOCAL);
	set_name(0XD234, "make_node2", SN_LOCAL);
	set_name(0XD23E, "make_err_4", SN_LOCAL);
	set_name(0XD265, "make_exists", SN_LOCAL);
	set_name(0XD28E, "make_share", SN_LOCAL);
	set_name(0XD2A7, "make_err_ret_5P", SN_LOCAL);
	set_name(0XD2A8, "make_err_ret_5", SN_LOCAL);
	set_name(0XD2AC, "make_exists_dir", SN_LOCAL);
	set_name(0XD2FB, "MakeEndShare", SN_LOCAL);
	add_func    (0XD244,0XD265);
	set_func_flags(0XD244,0x4400);
	set_frame_size(0XD244, 0, 0, 0);
	set_name(0XD25C, "make_type2", SN_LOCAL);
	set_name(0XD2BD, "make_new", SN_LOCAL);
	add_func    (0XD2B0,0XD2BD);
	set_func_flags(0XD2B0,0x4400);
	set_frame_size(0XD2B0, 0, 0, 0);
	set_name(0XD2BA, "make_save_err", SN_LOCAL);
	add_func    (0XD30D,0XD3DC);
	set_func_flags(0XD30D,0x4400);
	set_frame_size(0XD30D, 0, 0, 0);
	set_name(0XD327, "ERRRET3", SN_LOCAL);
	set_name(0XD328, "newentry_retn", SN_LOCAL);
	set_name(0XD329, "EXISTENT", SN_LOCAL);
	set_name(0XD330, "NOT_DEV1", SN_LOCAL);
	set_name(0XD335, "FREESPOT", SN_LOCAL);
	set_name(0XD343, "NOTVOLID", SN_LOCAL);
	set_name(0XD381, "updnxt", SN_LOCAL);
	set_name(0XD39B, "yesdirty9", SN_LOCAL);
	set_name(0XD3CC, "GotADevice", SN_LOCAL);
	add_func    (0XD3DC,0XD48E);
	set_func_flags(0XD3DC,0x4400);
	set_frame_size(0XD3DC, 0, 0, 0);
	set_name(0XD3F1, "DEV_SFT0", SN_LOCAL);
	set_name(0XD405, "DEV_SFT1", SN_LOCAL);
	set_name(0XD41A, "DEV_SFT2", SN_LOCAL);
	set_name(0XD42C, "FILE_SFT0", SN_LOCAL);
	set_name(0XD448, "FILE_SFT1", SN_LOCAL);
	set_name(0XD47F, "DEV_SFT3", SN_LOCAL);
	set_name(0XD482, "FILE_SFT2", SN_LOCAL);
	add_func    (0XD48E,0XD506);
	set_func_flags(0XD48E,0x4400);
	set_frame_size(0XD48E, 0, 0, 0);
	set_name(0XD4A7, "freeent1", SN_LOCAL);
	set_name(0XD4C6, "freeent2", SN_LOCAL);
	set_name(0XD4CB, "freeent3", SN_LOCAL);
	set_name(0XD4EA, "freeent_retn", SN_LOCAL);
	set_name(0XD4EB, "GET_BUF_BACK", SN_LOCAL);
	set_name(0XD504, "RET1", SN_LOCAL);
	add_func    (0XD506,0XD522);
	set_func_flags(0XD506,0x4400);
	set_frame_size(0XD506, 0, 0, 0);
	set_name(0XD51F, "ALL_CLOSED", SN_LOCAL);
	add_func    (0XD522,0XD58C);
	set_func_flags(0XD522,0x400);
	set_name(0XD532, "DEFDRV", SN_LOCAL);
	set_name(0XD541, "FILLB", SN_LOCAL);
	set_name(0XD54E, "FILLB2", SN_LOCAL);
	set_name(0XD564, "SKPSPC", SN_LOCAL);
	set_name(0XD567, "NOSCAN", SN_LOCAL);
	set_name(0XD585, "BADDRV", SN_LOCAL);
	set_name(0XD587, "HAVDRV", SN_LOCAL);
	set_name(0XD58A, "NODRV", SN_LOCAL);
	add_func    (0XD58C,0XD5B6);
	set_func_flags(0XD58C,0x4400);
	set_frame_size(0XD58C, 0, 0, 0);
	set_name(0XD5A6, "VOLOK", SN_LOCAL);
	set_name(0XD5A9, "contvol", SN_LOCAL);
	set_name(0XD5AC, "NODOT", SN_LOCAL);
	add_func    (0XD5BA,0XD5C0);
	set_func_flags(0XD5BA,0x400);
	set_name(0XD5B6, "NONAM", SN_LOCAL);
	add_func    (0XD5C0,0XD5EC);
	set_func_flags(0XD5C0,0x4400);
	set_frame_size(0XD5C0, 0, 0, 0);
	set_name(0XD5D1, "MustCheckCX", SN_LOCAL);
	set_name(0XD5DC, "NOSTAR", SN_LOCAL);
	set_name(0XD5E6, "FILLNAM", SN_LOCAL);
	add_func    (0XD5EC,0XD5F4);
	set_func_flags(0XD5EC,0x400);
	set_frame_size(0XD5EC, 0, 0, 0);
	add_func    (0XD5F4,0XD621);
	set_func_flags(0XD5F4,0x4400);
	set_frame_size(0XD5F4, 0, 0, 0);
	add_func    (0XD660,0XD661);
	set_func_flags(0XD660,0x400);
	add_func    (0XD661,0XD686);
	set_func_flags(0XD661,0x4400);
	set_frame_size(0XD661, 0X2, 0, 0);
	set_name(0XD66F, "gl_1", SN_LOCAL);
	set_name(0XD67D, "gl_2", SN_LOCAL);
	add_func    (0XD686,0XD689);
	set_func_flags(0XD686,0x4400);
	set_frame_size(0XD686, 0X2, 0, 0);
	add_func    (0XD689,0XD691);
	set_func_flags(0XD689,0x4400);
	set_frame_size(0XD689, 0, 0, 0);
	add_func    (0XD691,0XD699);
	set_func_flags(0XD691,0x4400);
	set_frame_size(0XD691, 0, 0, 0);
	add_func    (0XD699,0XD6B1);
	set_func_flags(0XD699,0x4400);
	set_frame_size(0XD699, 0, 0, 0);
	set_name(0XD6AB, "gct_80", SN_LOCAL);
	set_name(0XD6AE, "gct_90", SN_LOCAL);
	add_func    (0XD6B1,0XD6BE);
	set_func_flags(0XD6B1,0x4400);
	set_frame_size(0XD6B1, 0, 0, 0);
	set_name(0XD6B8, "GotFor", SN_LOCAL);
	set_name(0XD6BB, "PathRet", SN_LOCAL);
	add_func    (0XD6C4,0XD6E3);
	set_func_flags(0XD6C4,0x4400);
	set_frame_size(0XD6C4, 0, 0, 0);
	set_name(0XD6E1, "POPFRET", SN_LOCAL);
	add_func    (0XD6E3,0XD766);
	set_func_flags(0XD6E3,0x4420);
	set_frame_size(0XD6E3, 0, 0, 0);
	set_name(0XD725, "dskstatchk1", SN_LOCAL);
	set_name(0XD730, "RET36", SN_LOCAL);
	set_name(0XD736, "_GotCh", SN_LOCAL);
	set_name(0XD87B, "around_deadlock", SN_LOCAL);
	set_name(0XD887, "NOSWAP", SN_LOCAL);
	set_name(0XD8CE, "ctrlc_repeat", SN_LOCAL);
	set_name(0XD8D5, "COMMANDJ", SN_LOCAL);
	set_name(0XD8D8, "ctrlc_try_new", SN_LOCAL);
	add_func    (0XD766,0XD822);
	set_func_flags(0XD766,0x4400);
	set_frame_size(0XD766, 0X2, 0, 0);
	set_name(0XD76F, "STATCHK2", SN_LOCAL);
	set_name(0XD799, "NOSTOP", SN_LOCAL);
	set_name(0XD7A6, "check_next", SN_LOCAL);
	set_name(0XD7AA, "check_end", SN_LOCAL);
	set_name(0XD7AC, "STATCHK3", SN_LOCAL);
	set_name(0XD7B0, "_RET18P", SN_LOCAL);
	set_name(0XD7B2, "_RET18", SN_LOCAL);
	set_name(0XD7B5, "PAUSOLP", SN_LOCAL);
	set_name(0XD7B8, "PAUSOSTRT", SN_LOCAL);
	set_name(0XD7BF, "INCHK", SN_LOCAL);
	set_name(0XD7D9, "PRINT_ON_OFF", SN_LOCAL);
	set_name(0XD80D, "NORM_PR", SN_LOCAL);
	set_name(0XD81A, "PRNOPN", SN_LOCAL);
	set_name(0XD81D, "RETP6", SN_LOCAL);
	add_func    (0XD822,0XD865);
	set_func_flags(0XD822,0x4400);
	set_frame_size(0XD822, 0, 0, 0);
	set_name(0XD83F, "rest32bitregs_cont", SN_LOCAL);
	add_func    (0XD93B,0XD96C);
	set_func_flags(0XD93B,0x4400);
	set_frame_size(0XD93B, 0, 0, 0);
	set_name(0XD94E, "chard1", SN_LOCAL);
	set_name(0XD951, "ctrlp", SN_LOCAL);
	add_func    (0XD96C,0XDA06);
	set_func_flags(0XD96C,0x400);
	set_name(0XD980, "NOSETWRPERR", SN_LOCAL);
	set_name(0XD9A2, "TESTDIR", SN_LOCAL);
	set_name(0XD9C0, "TESTDIR1", SN_LOCAL);
	set_name(0XD9E5, "ERRINT1", SN_LOCAL);
	set_name(0XD9EC, "TESTDIR2", SN_LOCAL);
	set_name(0XD9F0, "TESTDIR4", SN_LOCAL);
	set_name(0XD9F8, "ERRINT2", SN_LOCAL);
	set_name(0XD9FA, "ERRINT", SN_LOCAL);
	add_func    (0XDA06,0XDA0A);
	set_func_flags(0XDA06,0x400);
	add_func    (0XDA0A,0XDA1A);
	set_func_flags(0XDA0A,0x400);
	add_func    (0XDA1A,0XDB82);
	set_func_flags(0XDA1A,0x402);
	set_frame_size(0XDA1A, 0, 0, 0);
	set_name(0XDA31, "NoSetFail", SN_LOCAL);
	set_name(0XDA4C, "_NoFree", SN_LOCAL);
	set_name(0XDA68, "i24yes", SN_LOCAL);
	set_name(0XDA81, "passi24", SN_LOCAL);
	set_name(0XDA97, "FailRet", SN_LOCAL);
	set_name(0XDAAE, "DoFail", SN_LOCAL);
	set_name(0XDABD, "CleanUp", SN_LOCAL);
	set_name(0XDACC, "CleanUp2", SN_LOCAL);
	set_name(0XDADE, "CheckIgnore", SN_LOCAL);
	set_name(0XDAE8, "CheckRetry", SN_LOCAL);
	set_name(0XDAF2, "DoAbort", SN_LOCAL);
	set_name(0XDAFE, "NOSWAP2", SN_LOCAL);
	set_name(0XDB0F, "reset_environment", SN_LOCAL);
	set_name(0XDB47, "reset_to_parent", SN_LOCAL);
	set_name(0XDB4C, "reset_return", SN_LOCAL);
	set_name(0XE25E, "abort_inner", SN_LOCAL);
	add_func    (0XDBA5,0XDBCC);
	set_func_flags(0XDBA5,0x4400);
	set_frame_size(0XDBA5, 0, 0, 0);
	set_name(0XDBBE, "NoTrans", SN_LOCAL);
	add_func    (0XDBD2,0XDBDC);
	set_func_flags(0XDBD2,0x4400);
	set_frame_size(0XDBD2, 0, 0, 0);
	set_name(0X11315, "flshbuf_1", SN_LOCAL);
	set_name(0X1131E, "flshbuf_2", SN_LOCAL);
	set_name(0X11331, "scan_buf_queue", SN_LOCAL);
	set_name(0X11346, "free_the_buf", SN_LOCAL);
	set_name(0X1134B, "ont_free_the_buf", SN_LOCAL);
	set_name(0X11354, "end_scan", SN_LOCAL);
	set_name(0X1135E, "flushbuf_retn", SN_LOCAL);
	add_func    (0XE144,0XE153);
	set_func_flags(0XE144,0x4400);
	set_frame_size(0XE144, 0, 0, 0);
	add_func    (0XE153,0XE15E);
	set_func_flags(0XE153,0x4400);
	set_frame_size(0XE153, 0X2, 0, 0);
	add_func    (0XE15E,0XE16C);
	set_func_flags(0XE15E,0x4400);
	set_frame_size(0XE15E, 0X2, 0, 0);
	add_func    (0XE16C,0XE17D);
	set_func_flags(0XE16C,0x4400);
	set_frame_size(0XE16C, 0, 0, 0);
	add_func    (0XE17D,0XE18B);
	set_func_flags(0XE17D,0x4400);
	set_frame_size(0XE17D, 0, 0, 0);
	add_func    (0XE18B,0XE1A2);
	set_func_flags(0XE18B,0x400);
	set_frame_size(0XE18B, 0, 0, 0);
	set_name(0XE190, "Scan0", SN_LOCAL);
	add_func    (0XE1A2,0XE1F0);
	set_func_flags(0XE1A2,0x4400);
	set_frame_size(0XE1A2, 0, 0, 0);
	set_name(0XE1B5, "GetEntries", SN_LOCAL);
	set_name(0XE1C9, "sse_next_char", SN_LOCAL);
	set_name(0XE1DE, "Not_Matched", SN_LOCAL);
	set_name(0XE1E1, "SkipOne", SN_LOCAL);
	set_name(0XE1EF, "End_List", SN_LOCAL);
	add_func    (0XE280,0XE28F);
	set_func_flags(0XE280,0x4400);
	set_frame_size(0XE280, 0, 0, 0);
	set_name(0XE28E, "_sub_unk2_ret", SN_LOCAL);
	add_func    (0XE293,0XE30C);
	set_func_flags(0XE293,0x4400);
	set_frame_size(0XE293, 0, 0, 0);
	add_func    (0XE30C,0XE3D2);
	set_func_flags(0XE30C,0x4400);
	set_frame_size(0XE30C, 0, 0, 0);
	add_func    (0XE3D2,0XE3E9);
	set_func_flags(0XE3D2,0x4400);
	set_frame_size(0XE3D2, 0, 0, 0);
	add_func    (0XE3E9,0XE401);
	set_func_flags(0XE3E9,0x4400);
	set_frame_size(0XE3E9, 0, 0, 0);
	add_func    (0XE402,0XE435);
	set_func_flags(0XE402,0x400);
	set_name(0XE406, "arena_free_process_start", SN_LOCAL);
	set_name(0XE40C, "arena_free_process_loop", SN_LOCAL);
	set_name(0XE41A, "arena_free_next", SN_LOCAL);
	set_name(0XE424, "arena_chk_umbs", SN_LOCAL);
	add_func    (0XE435,0XE44C);
	set_func_flags(0XE435,0x4400);
	add_func    (0XE44C,0XE46E);
	set_func_flags(0XE44C,0x400);
	add_func    (0XE46E,0XE5CB);
	set_func_flags(0XE46E,0x400);
	set_name(0XE491, "norm_alloc", SN_LOCAL);
	set_name(0XE4A2, "start_scan", SN_LOCAL);
	set_name(0XE4AB, "alloc_scan", SN_LOCAL);
	set_name(0XE4B3, "alloc_next", SN_LOCAL);
	set_name(0XE4D7, "norm_strat", SN_LOCAL);
	set_name(0XE4DA, "alloc_chk_end", SN_LOCAL);
	set_name(0XE4E1, "alloc_err", SN_LOCAL);
	set_name(0XE4E7, "alloc_errj", SN_LOCAL);
	set_name(0XE4EA, "alloc_end", SN_LOCAL);
	set_name(0XE51B, "alloc_free", SN_LOCAL);
	set_name(0XE52B, "alloc_test", SN_LOCAL);
	set_name(0XE53D, "alloc_best", SN_LOCAL);
	set_name(0XE553, "alloc_make_best", SN_LOCAL);
	set_name(0XE558, "alloc_last", SN_LOCAL);
	set_name(0XE560, "alloc_do_split_high", SN_LOCAL);
	set_name(0XE578, "alloc_do_split", SN_LOCAL);
	set_name(0XE5A6, "alloc_set_sizes", SN_LOCAL);
	set_name(0XE5BB, "alloc_set_owner", SN_LOCAL);
	add_func    (0XE5CE,0XE5F2);
	set_func_flags(0XE5CE,0x400);
	set_name(0XE5DC, "setblock_bad", SN_LOCAL);
	set_name(0XE5DF, "setblock_grab", SN_LOCAL);
	add_func    (0XE5F2,0XE628);
	set_func_flags(0XE5F2,0x400);
	set_name(0XE5CB, "alloc_ok", SN_LOCAL);
	set_name(0XE60B, "deallocate", SN_LOCAL);
	set_name(0XE620, "dealloc_err", SN_LOCAL);
	add_func    (0XE6B5,0XE6F6);
	set_func_flags(0XE6B5,0x4400);
	set_frame_size(0XE6B5, 0, 0, 0);
	set_name(0XE6C4, "GLA_next", SN_LOCAL);
	set_name(0XE6D9, "GLA_chkumb", SN_LOCAL);
	set_name(0XE6DB, "GLA_@f", SN_LOCAL);
	set_name(0XE6DD, "GLA_done", SN_LOCAL);
	set_name(0XE6F0, "GLA_ret", SN_LOCAL);
	set_name(0XE6F3, "GLA_err", SN_LOCAL);
	add_func    (0XE817,0XE834);
	set_func_flags(0XE817,0x4400);
	set_frame_size(0XE817, 0, 0, 0);
	set_name(0XE830, "ReturnCarry_inv_hndl", SN_LOCAL);
	add_func    (0XE834,0XE84E);
	set_func_flags(0XE834,0x4400);
	set_frame_size(0XE834, 0, 0, 0);
	set_name(0XE84A, "ReturnCarry_inv_hndl2", SN_LOCAL);
	add_func    (0XE84E,0XE879);
	set_func_flags(0XE84E,0x4400);
	set_frame_size(0XE84E, 0, 0, 0);
	set_name(0XE858, "sfsfn5", SN_LOCAL);
	set_name(0XE86C, "sfsfn7", SN_LOCAL);
	add_func    (0XE879,0XE88C);
	set_func_flags(0XE879,0x4400);
	set_frame_size(0XE879, 0, 0, 0);
	set_name(0XE87B, "jfnf1", SN_LOCAL);
	set_name(0XE889, "jfnf5", SN_LOCAL);
	set_name(0XE88B, "jfnfx", SN_LOCAL);
	add_func    (0XE88C,0XE8D5);
	set_func_flags(0XE88C,0x4400);
	set_frame_size(0XE88C, 0, 0, 0);
	set_name(0XE88F, "sfnf5", SN_LOCAL);
	set_name(0XE8A2, "sfnf7", SN_LOCAL);
	set_name(0XE8A5, "sfnf10", SN_LOCAL);
	set_name(0XE8B9, "sfnf20", SN_LOCAL);
	set_name(0XE8D1, "sfnf95", SN_LOCAL);
	add_func    (0XE8D5,0XE908);
	set_func_flags(0XE8D5,0x400);
	set_name(0XE8F4, "FreeJFN", SN_LOCAL);
	set_name(0XE8FB, "PostFree", SN_LOCAL);
	add_func    (0XE9E6,0XEA30);
	set_func_flags(0XE9E6,0x400);
	set_name(0XE98F, "CommitErrorj", SN_LOCAL);
	set_name(0XE9DB, "ok_done_j", SN_LOCAL);
	set_name(0XE9E0, "CommitErrorj2", SN_LOCAL);
	set_name(0XE9E4, "CommitErrorj3", SN_LOCAL);
	set_name(0XE9F8, "ReadSetup", SN_LOCAL);
	set_name(0XEA0F, "needi24", SN_LOCAL);
	set_name(0XEA2C, "READ_OK", SN_LOCAL);
	add_func    (0XEA30,0XEA49);
	set_func_flags(0XEA30,0x4400);
	set_frame_size(0XEA30, 0, 0, 0);
	add_func    (0XEA4E,0XEAB7);
	set_func_flags(0XEA4E,0x400);
	set_name(0XEA55, "CHKOWN_OK", SN_LOCAL);
	set_name(0XEA61, "LSeekError2", SN_LOCAL);
	set_name(0XEA64, "LSeekDisp", SN_LOCAL);
	set_name(0XEA72, "LSeekStore", SN_LOCAL);
	set_name(0XEA75, "LSeekSetpos", SN_LOCAL);
	set_name(0XEA85, "LSeekEOF", SN_LOCAL);
	set_name(0XEA8C, "LOCAL_LSeek", SN_LOCAL);
	set_name(0XEA96, "Check_LSeek_Mode", SN_LOCAL);
	set_name(0XEAAE, "NET_LSEEK", SN_LOCAL);
	add_func    (0XEB65,0XEB7F);
	set_func_flags(0XEB65,0x4400);
	set_frame_size(0XEB65, 0, 0, 0);
	set_name(0XEB7B, "cdv_1", SN_LOCAL);
	set_name(0XEB7C, "cdv_2", SN_LOCAL);
	add_func    (0XEBAE,0XEBB2);
	set_func_flags(0XEBAE,0x4400);
	set_frame_size(0XEBAE, 0, 0, 0);
	add_func    (0XEBEF,0XEC04);
	set_func_flags(0XEBEF,0x4400);
	set_frame_size(0XEBEF, 0, 0, 0);
	set_name(0XEBF4, "fdpb5", SN_LOCAL);
	set_name(0XEC02, "fdpb10", SN_LOCAL);
	set_name(0XEC03, "ret_label15", SN_LOCAL);
	add_func    (0XEC04,0XEC51);
	set_func_flags(0XEC04,0x4400);
	set_frame_size(0XEC04, 0, 0, 0);
	set_name(0XEC4D, "icds5", SN_LOCAL);
	set_name(0XEC4F, "icdsx", SN_LOCAL);
	add_func    (0XECA5,0XECC3);
	set_func_flags(0XECA5,0x4400);
	set_frame_size(0XECA5, 0, 0, 0);
	set_name(0XECBB, "GetVisdrv_err", SN_LOCAL);
	add_func    (0XECC3,0XED1A);
	set_func_flags(0XECC3,0x4400);
	set_frame_size(0XECC3, 0, 0, 0);
	set_name(0XECCC, "GTD10", SN_LOCAL);
	set_name(0XECFE, "GTD20", SN_LOCAL);
	set_name(0XED0A, "GTD30", SN_LOCAL);
	set_name(0XED17, "GTDX", SN_LOCAL);
	add_func    (0XED1A,0XED3E);
	set_func_flags(0XED1A,0x4400);
	set_frame_size(0XED1A, 0, 0, 0);
	set_name(0XED23, "GetCDS", SN_LOCAL);
	add_func    (0XED3E,0XEDA0);
	set_func_flags(0XED3E,0x410);
	set_frame_size(0XED3E, 0X10, 2, 0);
	define_local_var(0XED3E, 0XEDA0, "[bp-0X10]", "FCBTmp");
	set_name(0XED69, "GetDrive", SN_LOCAL);
	set_name(0XED76, "FCBScan", SN_LOCAL);
	set_name(0XED99, "BadPack", SN_LOCAL);
	set_name(0XED9C, "FCBRet", SN_LOCAL);
	add_func    (0XEDA0,0XEE82);
	set_func_flags(0XEDA0,0x4400);
	set_name(0XEDA6, "SetSplice", SN_LOCAL);
	set_name(0XEDF3, "NoServerSplice", SN_LOCAL);
	set_name(0XEE02, "NoPath", SN_LOCAL);
	set_name(0XEE05, "CheckUNC", SN_LOCAL);
	set_name(0XEE29, "UNCCpy", SN_LOCAL);
	set_name(0XEE40, "UNCDone", SN_LOCAL);
	set_name(0XEE43, "UNCTerm", SN_LOCAL);
	set_name(0XEE46, "CheckDevice", SN_LOCAL);
	set_name(0XEE4C, "file_not_found", SN_LOCAL);
	set_name(0XEE50, "CheckPath", SN_LOCAL);
	set_name(0XEE75, "CanonBad", SN_LOCAL);
	set_name(0XEE7C, "PathEnc", SN_LOCAL);
	set_name(0XEE81, "CanonBad_retn", SN_LOCAL);
	set_name(0XEE85, "DoFile", SN_LOCAL);
	set_name(0XEEA1, "DoFile_jc", SN_LOCAL);
	set_name(0XEEC0, "GetOrig", SN_LOCAL);
	set_name(0XEECE, "SkipPath", SN_LOCAL);
	set_name(0XEED9, "PathAssure", SN_LOCAL);
	set_name(0XEEDC, "DoCanon", SN_LOCAL);
	set_name(0XEF04, "DoSplice", SN_LOCAL);
	set_name(0XEF16, "SkipSplice", SN_LOCAL);
	set_name(0XEF36, "Done", SN_LOCAL);
	add_func    (0XEF37,0XEF9C);
	set_func_flags(0XEF37,0x4400);
	set_frame_size(0XEF37, 0, 0, 0);
	set_name(0XEF44, "CanonDec", SN_LOCAL);
	set_name(0XEF45, "CanonLoop", SN_LOCAL);
	set_name(0XEF57, "DoTerminate", SN_LOCAL);
	set_name(0XEF5A, "CanonBad", SN_LOCAL);
	set_name(0XEF63, "PathEnc", SN_LOCAL);
	set_name(0XEF65, "DoComponent", SN_LOCAL);
	set_name(0XEF78, "Skip1", SN_LOCAL);
	set_name(0XEF81, "CanonNormal", SN_LOCAL);
	set_name(0XEF83, "CanonPath", SN_LOCAL);
	set_name(0XEF93, "CanonPathLoop", SN_LOCAL);
	add_func    (0XEF9C,0XEF9E);
	set_func_flags(0XEF9C,0x400);
	add_func    (0XEF9E,0XEFA6);
	set_func_flags(0XEF9E,0x4400);
	set_frame_size(0XEF9E, 0, 0, 0);
	add_func    (0XEFA6,0XEFB9);
	set_func_flags(0XEFA6,0x4400);
	set_frame_size(0XEFA6, 0, 0, 0);
	set_name(0XEFB5, "SkipBad", SN_LOCAL);
	add_func    (0XEFB9,0XF047);
	set_func_flags(0XEFB9,0x4400);
	set_frame_size(0XEFB9, 0XE, 0, 0);
	set_name(0XEFDB, "NulTerm", SN_LOCAL);
	set_name(0XEFE3, "NormalComp", SN_LOCAL);
	set_name(0XF006, "DoPack", SN_LOCAL);
	set_name(0XF02A, "_GoodRet", SN_LOCAL);
	set_name(0XF02D, "CopyBad", SN_LOCAL);
	set_name(0XF035, "CopyBadPath", SN_LOCAL);
	set_name(0XF038, "CopyEnd", SN_LOCAL);
	add_func    (0XF047,0XF0CE);
	set_func_flags(0XF047,0x4400);
	set_frame_size(0XF047, 0, 0, 0);
	set_name(0XF05F, "SpliceScan", SN_LOCAL);
	set_name(0XF073, "SpliceSkip", SN_LOCAL);
	set_name(0XF076, "SpliceFound", SN_LOCAL);
	set_name(0XF084, "SpliceDo", SN_LOCAL);
	set_name(0XF09C, "NoPoke", SN_LOCAL);
	set_name(0XF0A4, "SpliceCopy", SN_LOCAL);
	set_name(0XF0AF, "SpliceDone", SN_LOCAL);
	set_name(0XF0B9, "AllDone", SN_LOCAL);
	set_name(0XF0BB, "DoSet", SN_LOCAL);
	add_func    (0XF0F3,0XF10A);
	set_func_flags(0XF0F3,0x4400);
	set_frame_size(0XF0F3, 0, 0, 0);
	add_func    (0XF10A,0XF112);
	set_func_flags(0XF10A,0x400);
	set_frame_size(0XF10A, 0, 0, 0);
	add_func    (0XF112,0XF12B);
	set_func_flags(0XF112,0x4400);
	set_frame_size(0XF112, 0, 0, 0);
	set_name(0XF129, "Prefix", SN_LOCAL);
	add_func    (0XF12B,0XF135);
	set_func_flags(0XF12B,0x4400);
	set_frame_size(0XF12B, 0, 0, 0);
	add_func    (0XF137,0XF20A);
	set_func_flags(0XF137,0x400);
	set_frame_size(0XF137, 0, 0, 0);
	set_name(0XF161, "OpenFailJ", SN_LOCAL);
	set_name(0XF164, "SaveJFN", SN_LOCAL);
	set_name(0XF196, "OpenCleanJ", SN_LOCAL);
	set_name(0XF198, "SetSearch", SN_LOCAL);
	set_name(0XF1B0, "_DoOper", SN_LOCAL);
	set_name(0XF1E4, "OpenClean", SN_LOCAL);
	set_name(0XF1E5, "OpenE", SN_LOCAL);
	set_name(0XF1F3, "OpenFail", SN_LOCAL);
	set_name(0XF1F5, "OpenCritLeave", SN_LOCAL);
	add_func    (0XF20A,0XF217);
	set_func_flags(0XF20A,0x400);
	add_func    (0XF242,0XF28C);
	set_func_flags(0XF242,0x400);
	set_name(0XAC6F, "mkdir_x", SN_LOCAL);
	set_name(0XF217, "chmod_x", SN_LOCAL);
	set_name(0XF22E, "chmod_x_1", SN_LOCAL);
	set_name(0XF23E, "chmod_x_2", SN_LOCAL);
	set_name(0XF240, "chmod_errj", SN_LOCAL);
	set_name(0XF26F, "chmod_errj2", SN_LOCAL);
	set_name(0XF271, "ChModGet", SN_LOCAL);
	set_name(0XF27C, "OpenOkj", SN_LOCAL);
	set_name(0XF27F, "ChModSet", SN_LOCAL);
	set_name(0XF2B9, "rename_x", SN_LOCAL);
	set_name(0XF2D3, "epjc2", SN_LOCAL);
	set_name(0XF2FF, "rnloop", SN_LOCAL);
	set_name(0XF30D, "rnerr", SN_LOCAL);
	set_name(0XF314, "dorn", SN_LOCAL);
	add_func    (0XF28C,0XF2B2);
	set_func_flags(0XF28C,0x400);
	add_func    (0XF32D,0XF334);
	set_func_flags(0XF32D,0x400);
	add_func    (0XF334,0XF345);
	set_func_flags(0XF334,0x4400);
	set_frame_size(0XF334, 0, 0, 0);
	set_name(0XF337, "bta_nxtnb", SN_LOCAL);
	add_func    (0XF3CF,0XF3DF);
	set_func_flags(0XF3CF,0x4400);
	set_frame_size(0XF3CF, 0, 0, 0);
	set_name(0XF3D9, "Set", SN_LOCAL);
	add_func    (0XF59C,0XF5F8);
	set_func_flags(0XF59C,0x4400);
	set_frame_size(0XF59C, 0, 0, 0);
	add_func    (0XF5F8,0XF660);
	set_func_flags(0XF5F8,0x4400);
	set_frame_size(0XF5F8, 0, 0, 0);
	set_name(0XF649, "chk_ln_1", SN_LOCAL);
	set_name(0XF651, "chk_ln_2", SN_LOCAL);
	set_name(0XF65C, "chk_ln_retn", SN_LOCAL);
	add_func    (0XF662,0XF767);
	set_func_flags(0XF662,0x4400);
	set_frame_size(0XF662, 0, 0, 0);
	set_name(0XF6C3, "dlne_1", SN_LOCAL);
	set_name(0XF6D4, "dlne_2", SN_LOCAL);
	set_name(0XF6EE, "dlne_3", SN_LOCAL);
	set_name(0XF6F5, "dlne_4", SN_LOCAL);
	set_name(0XF704, "dlne_5", SN_LOCAL);
	set_name(0XF712, "dlne_6", SN_LOCAL);
	set_name(0XF72B, "dlne_7", SN_LOCAL);
	set_name(0XF762, "dlne_8", SN_LOCAL);
	set_name(0XF765, "dlne_error", SN_LOCAL);
	add_func    (0XF767,0XF781);
	set_func_flags(0XF767,0x4400);
	set_frame_size(0XF767, 0, 0, 0);
	set_name(0XF780, "mlnep_ret", SN_LOCAL);
	add_func    (0XF78C,0XF7D3);
	set_func_flags(0XF78C,0x4400);
	set_frame_size(0XF78C, 0, 0, 0);
	add_func    (0XF9F6,0XFA1F);
	set_func_flags(0XF9F6,0x4400);
	set_frame_size(0XF9F6, 0, 0, 0);
	add_func    (0XFA1F,0XFA33);
	set_func_flags(0XFA1F,0x4400);
	set_frame_size(0XFA1F, 0X2, 0, 0);
	add_func    (0XFA33,0XFA3F);
	set_func_flags(0XFA33,0x4400);
	set_frame_size(0XFA33, 0, 0, 0);
	add_func    (0XFA3F,0XFA4B);
	set_func_flags(0XFA3F,0x4400);
	set_frame_size(0XFA3F, 0, 0, 0);
	add_func    (0XFA4B,0XFA4E);
	set_func_flags(0XFA4B,0x400);
	add_func    (0XFA4E,0XFA63);
	set_func_flags(0XFA4E,0x4400);
	set_frame_size(0XFA4E, 0X6, 0, 0);
	add_func    (0XFA63,0XFA82);
	set_func_flags(0XFA63,0x4400);
	set_frame_size(0XFA63, 0, 0, 0);
	add_func    (0XFA82,0XFA8F);
	set_func_flags(0XFA82,0x4400);
	set_frame_size(0XFA82, 0, 0, 0);
	add_func    (0XFB62,0XFBAC);
	set_func_flags(0XFB62,0x4400);
	set_frame_size(0XFB62, 0, 0, 0);
	set_name(0XFBA9, "PopDone", SN_LOCAL);
	add_func    (0XFBAC,0XFC50);
	set_func_flags(0XFBAC,0x4400);
	set_name(0XFBBD, "SubDir", SN_LOCAL);
	set_name(0XFBC9, "DoRead", SN_LOCAL);
	set_name(0XFBFD, "SKPCLLP", SN_LOCAL);
	set_name(0XFC1C, "HAVESKIPPED", SN_LOCAL);
	set_name(0XFC4F, "dirread_retn", SN_LOCAL);
	add_func    (0XFC50,0XFCBB);
	set_func_flags(0XFC50,0x400);
	set_name(0XFC7D, "FATSECRD_cont", SN_LOCAL);
	set_name(0XFC7F, "NXTFAT", SN_LOCAL);
	set_name(0XFCA4, "NXTFAT2", SN_LOCAL);
	set_name(0XFCA9, "NXTFAT3", SN_LOCAL);
	add_func    (0XFCBB,0XFCD5);
	set_func_flags(0XFCBB,0x4400);
	set_frame_size(0XFCBB, 0, 0, 0);
	add_func    (0XFCE5,0XFCF0);
	set_func_flags(0XFCE5,0x4400);
	set_frame_size(0XFCE5, 0, 0, 0);
	set_name(0XFCEF, "WRITE_OK", SN_LOCAL);
	add_func    (0XFCF0,0XFCFB);
	set_func_flags(0XFCF0,0x4400);
	set_frame_size(0XFCF0, 0, 0, 0);
	set_name(0XFCFA, "READLOCK_OK", SN_LOCAL);
	add_func    (0XFCFB,0XFD0B);
	set_func_flags(0XFCFB,0x400);
	set_frame_size(0XFCFB, 0X4, 0, 0);
	add_func    (0XFD0B,0XFD24);
	set_func_flags(0XFD0B,0x4400);
	set_frame_size(0XFD0B, 0, 0, 0);
	set_name(0XFD23, "NO_CAR2", SN_LOCAL);
	add_func    (0XFD24,0XFD53);
	set_func_flags(0XFD24,0x4400);
	set_frame_size(0XFD24, 0X4, 0, 0);
	add_func    (0XFD53,0XFD7D);
	set_func_flags(0XFD53,0x4400);
	set_frame_size(0XFD53, 0, 0, 0);
	set_name(0XFD6A, "SAVFIR", SN_LOCAL);
	add_func    (0XFD7D,0XFE7F);
	set_func_flags(0XFD7D,0x400);
	set_frame_size(0XFD7D, 0, 0, 0);
	set_name(0XFD9B, "ENUF", SN_LOCAL);
	set_name(0XFDA1, "_READ_OK", SN_LOCAL);
	set_name(0XFDBC, "RDERR", SN_LOCAL);
	set_name(0XFDCD, "SKIPERR", SN_LOCAL);
	set_name(0XFDF0, "RDMID", SN_LOCAL);
	set_name(0XFE17, "RDLP", SN_LOCAL);
	set_name(0XFE62, "RDLAST", SN_LOCAL);
	add_func    (0XFE7F,0XFEAE);
	set_func_flags(0XFE7F,0x400);
	add_func    (0XFEAE,0XFEB9);
	set_func_flags(0XFEAE,0x4400);
	set_frame_size(0XFEAE, 0, 0, 0);
	add_func    (0XFEB9,0XFF42);
	set_func_flags(0XFEB9,0x4400);
	set_frame_size(0XFEB9, 0, 0, 0);
	set_name(0XFEDB, "bufq", SN_LOCAL);
	set_name(0XFEE8, "bufq01", SN_LOCAL);
	set_name(0XFEF2, "bufq02", SN_LOCAL);
	set_name(0XFEF4, "bufq1", SN_LOCAL);
	set_name(0XFEFD, "bufx", SN_LOCAL);
	set_name(0XFEFE, "bufq2", SN_LOCAL);
	set_name(0XFF33, "bufq3", SN_LOCAL);
	add_func    (0XFF42,0X10323);
	set_func_flags(0XFF42,0x4400);
	set_frame_size(0XFF42, 0, 0, 0);
	set_name(0XFF48, "WRTEOFJ", SN_LOCAL);
	set_name(0XFF4F, "_WRITE_OK", SN_LOCAL);
	set_name(0XFF90, "CALCLUS2", SN_LOCAL);
	set_name(0XFFAF, "CALCLUS", SN_LOCAL);
	set_name(0XFFD8, "NORND", SN_LOCAL);
	set_name(0XFFF7, "lowsec", SN_LOCAL);
	set_name(0XFFFF, "yesgrow", SN_LOCAL);
	set_name(0X10028, "HAVSTART", SN_LOCAL);
	set_name(0X10054, "WRTERR", SN_LOCAL);
	set_name(0X10061, "TESTTAIL", SN_LOCAL);
	set_name(0X10067, "SETGRW", SN_LOCAL);
	set_name(0X1006E, "NOGROW", SN_LOCAL);
	set_name(0X100FC, "NOSKIP", SN_LOCAL);
	set_name(0X1011C, "DOWRT", SN_LOCAL);
	set_name(0X10132, "dskwrt_1", SN_LOCAL);
	set_name(0X10136, "WRTMID", SN_LOCAL);
	set_name(0X10166, "WRTLP", SN_LOCAL);
	set_name(0X1017F, "DWRITE_LUP", SN_LOCAL);
	set_name(0X1019B, "DWRITE_OKAY", SN_LOCAL);
	set_name(0X101B6, "DWRITE_DISK_FULL", SN_LOCAL);
	set_name(0X101C4, "SET_ACC_ERRW", SN_LOCAL);
	set_name(0X101C7, "WRTLAST", SN_LOCAL);
	set_name(0X101E1, "FINWRT", SN_LOCAL);
	set_name(0X101F2, "UPDATE_size", SN_LOCAL);
	set_name(0X101FD, "SAMSIZ", SN_LOCAL);
	set_name(0X10200, "WRTEOF", SN_LOCAL);
	set_name(0X10227, "WRTEOF2", SN_LOCAL);
	set_name(0X10284, "UPDATE", SN_LOCAL);
	set_name(0X1029E, "RELFILE", SN_LOCAL);
	set_name(0X102CA, "SKIPRESET", SN_LOCAL);
	set_name(0X102E1, "dskwrt_2", SN_LOCAL);
	set_name(0X102E7, "KILLFIL", SN_LOCAL);
	set_name(0X1031E, "dskwrt_3", SN_LOCAL);
	add_func    (0X10323,0X103A9);
	set_func_flags(0X10323,0x4400);
	set_frame_size(0X10323, 0X2, 0, 0);
	set_name(0X10354, "sc01", SN_LOCAL);
	set_name(0X10364, "sc02", SN_LOCAL);
	set_name(0X1036D, "sc5", SN_LOCAL);
	set_name(0X1036E, "nosc", SN_LOCAL);
	set_name(0X10371, "_bufq", SN_LOCAL);
	set_name(0X1037E, "bufq04", SN_LOCAL);
	set_name(0X10388, "bufq05", SN_LOCAL);
	set_name(0X10393, "bufq4", SN_LOCAL);
	set_name(0X1039D, "bufq5", SN_LOCAL);
	set_name(0X1039F, "bufq6", SN_LOCAL);
	add_func    (0X103A9,0X103B8);
	set_func_flags(0X103A9,0x4400);
	set_frame_size(0X103A9, 0, 0, 0);
	set_name(0X103AC, "WILDCRD", SN_LOCAL);
	set_name(0X103B7, "MetaRet", SN_LOCAL);
	add_func    (0X103B8,0X10474);
	set_func_flags(0X103B8,0x4400);
	set_frame_size(0X103B8, 0, 0, 0);
	add_func    (0X10474,0X1049D);
	set_func_flags(0X10474,0x4400);
	set_frame_size(0X10474, 0, 0, 0);
	add_func    (0X1049D,0X104AF);
	set_func_flags(0X1049D,0x4400);
	set_frame_size(0X1049D, 0, 0, 0);
	add_func    (0X104AF,0X104FF);
	set_func_flags(0X104AF,0x4400);
	set_frame_size(0X104AF, 0, 0, 0);
	set_name(0X104E7, "scerror", SN_LOCAL);
	set_name(0X104FD, "sc2end", SN_LOCAL);
	add_func    (0X104FF,0X10510);
	set_func_flags(0X104FF,0x400);
	set_name(0X1053C, "noSC", SN_LOCAL);
	add_func    (0X10510,0X1053C);
	set_func_flags(0X10510,0x4400);
	set_frame_size(0X10510, 0, 0, 0);
	add_func    (0X1053E,0X1056D);
	set_func_flags(0X1053E,0x400);
	set_name(0X10569, "FINDIT", SN_LOCAL);
	add_func    (0X1056D,0X105C3);
	set_func_flags(0X1056D,0x4400);
	set_frame_size(0X1056D, 0, 0, 0);
	set_name(0X105C2, "fndclus_retn", SN_LOCAL);
	add_func    (0X105C3,0X1060F);
	set_func_flags(0X105C3,0x4400);
	set_frame_size(0X105C3, 0, 0, 0);
	set_name(0X1060E, "bufsec_retn", SN_LOCAL);
	add_func    (0X1060F,0X1064A);
	set_func_flags(0X1060F,0x4400);
	set_frame_size(0X1060F, 0, 0, 0);
	set_name(0X1061A, "BUF_OK", SN_LOCAL);
	set_name(0X10646, "RBUFPLACEDC", SN_LOCAL);
	set_name(0X10647, "RBUFPLACED", SN_LOCAL);
	add_func    (0X1064A,0X106B1);
	set_func_flags(0X1064A,0x4400);
	set_frame_size(0X1064A, 0, 0, 0);
	set_name(0X10667, "NOREAD", SN_LOCAL);
	set_name(0X1069D, "yesdirty10", SN_LOCAL);
	set_name(0X106AD, "WBUFPLACED", SN_LOCAL);
	add_func    (0X106B1,0X106FA);
	set_func_flags(0X106B1,0x4400);
	set_frame_size(0X106B1, 0, 0, 0);
	set_name(0X106F3, "SAVPOS", SN_LOCAL);
	set_name(0X106F6, "CLRET", SN_LOCAL);
	set_name(0X106F8, "NONEXT", SN_LOCAL);
	add_func    (0X106FA,0X107C7);
	set_func_flags(0X106FA,0x4400);
	set_frame_size(0X106FA, 0, 0, 0);
	set_name(0X1070E, "OPTCLUS", SN_LOCAL);
	set_name(0X1074B, "clusgot3", SN_LOCAL);
	set_name(0X1074D, "FINCLUS", SN_LOCAL);
	set_name(0X107A8, "OP_ERR", SN_LOCAL);
	set_name(0X107AD, "BLKDON", SN_LOCAL);
	add_func    (0X107C7,0X10808);
	set_func_flags(0X107C7,0x4400);
	set_frame_size(0X107C7, 0, 0, 0);
	set_name(0X107F4, "figrec1", SN_LOCAL);
	set_name(0X107F9, "figrec2", SN_LOCAL);
	add_func    (0X10808,0X1080F);
	set_func_flags(0X10808,0x4402);
	set_frame_size(0X10808, 0, 0, 0);
	add_func    (0X1080F,0X109F3);
	set_func_flags(0X1080F,0x4400);
	set_frame_size(0X1080F, 0, 0, 0);
	set_name(0X1085F, "ads0", SN_LOCAL);
	set_name(0X10864, "ads1", SN_LOCAL);
	set_name(0X1086A, "ads2", SN_LOCAL);
	set_name(0X1087A, "ads3", SN_LOCAL);
	set_name(0X1088B, "FINDFRE", SN_LOCAL);
	set_name(0X1089A, "ads4", SN_LOCAL);
	set_name(0X1089F, "ads5", SN_LOCAL);
	set_name(0X108D0, "ads6", SN_LOCAL);
	set_name(0X10907, "ads7", SN_LOCAL);
	set_name(0X10914, "ads8", SN_LOCAL);
	set_name(0X10919, "NO_ALLOC", SN_LOCAL);
	set_name(0X10960, "ads9", SN_LOCAL);
	set_name(0X109AD, "ads_ret", SN_LOCAL);
	set_name(0X109AE, "ads10", SN_LOCAL);
	set_name(0X109BC, "ads11", SN_LOCAL);
	set_name(0X109C2, "ads12", SN_LOCAL);
	set_name(0X109EC, "alloc_disk_full", SN_LOCAL);
	add_func    (0X109F3,0X10A0F);
	set_func_flags(0X109F3,0x4400);
	set_frame_size(0X109F3, 0X2, 0, 0);
	add_func    (0X10A0F,0X10A7C);
	set_func_flags(0X10A0F,0x4400);
	set_name(0X10A4B, "relblks_1", SN_LOCAL);
	set_name(0X10A58, "relblks_2", SN_LOCAL);
	set_name(0X10A5D, "NO_DEALLOC", SN_LOCAL);
	set_name(0X10A67, "NO_DEALLOC2", SN_LOCAL);
	set_name(0X10A6C, "RELEASE_flush", SN_LOCAL);
	add_func    (0X10A7C,0X10ABB);
	set_func_flags(0X10A7C,0x4400);
	set_frame_size(0X10A7C, 0, 0, 0);
	set_name(0X10A82, "GETEOF2", SN_LOCAL);
	set_name(0X10AB2, "GETEOF1", SN_LOCAL);
	add_func    (0X10ABB,0X10AF8);
	set_func_flags(0X10ABB,0x4400);
	set_frame_size(0X10ABB, 0, 0, 0);
	set_name(0X10AC2, "IsEOF_FAT", SN_LOCAL);
	set_name(0X10ACE, "IsEOF_FAT32", SN_LOCAL);
	set_name(0X10AE5, "IsEOF_other", SN_LOCAL);
	set_name(0X10AE6, "EOF12_1", SN_LOCAL);
	set_name(0X10AF3, "EOF12_2", SN_LOCAL);
	add_func    (0X10AF8,0X10BE1);
	set_func_flags(0X10AF8,0x4400);
	set_frame_size(0X10AF8, 0, 0, 0);
	set_name(0X10AFC, "up_cont", SN_LOCAL);
	set_name(0X10B09, "up_1", SN_LOCAL);
	set_name(0X10B25, "up_fat32", SN_LOCAL);
	set_name(0X10B36, "up_2", SN_LOCAL);
	set_name(0X10B4C, "up_3", SN_LOCAL);
	set_name(0X10B58, "up_4", SN_LOCAL);
	set_name(0X10B5D, "up_5", SN_LOCAL);
	set_name(0X10B81, "High12", SN_LOCAL);
	set_name(0X10B86, "Unpack12", SN_LOCAL);
	set_name(0X10B8D, "HURTFAT", SN_LOCAL);
	set_name(0X10BA3, "chk_set_fa_1", SN_LOCAL);
	set_name(0X10BB4, "chk_set_fa_2", SN_LOCAL);
	set_name(0X10BB9, "HURTFAT2", SN_LOCAL);
	set_name(0X10BDF, "OKU_RET", SN_LOCAL);
	add_func    (0X10BE1,0X10CCD);
	set_func_flags(0X10BE1,0x4400);
	set_frame_size(0X10BE1, 0, 0, 0);
	set_name(0X10BE7, "p_cont", SN_LOCAL);
	set_name(0X10C1E, "pack1", SN_LOCAL);
	set_name(0X10C28, "PACKIN", SN_LOCAL);
	set_name(0X10C2A, "PACKIN2", SN_LOCAL);
	set_name(0X10C3C, "yesdirty11", SN_LOCAL);
	set_name(0X10C84, "yesdirty12", SN_LOCAL);
	set_name(0X10C8F, "POPP_RET", SN_LOCAL);
	set_name(0X10C98, "pack_retn", SN_LOCAL);
	set_name(0X10C99, "pack2", SN_LOCAL);
	set_name(0X10CA3, "pack3", SN_LOCAL);
	set_name(0X10CAD, "pack4", SN_LOCAL);
	set_name(0X10CB2, "p_clust_0", SN_LOCAL);
	add_func    (0X10CCD,0X10DC2);
	set_func_flags(0X10CCD,0x4400);
	set_frame_size(0X10CCD, 0X4, 0, 0);
	set_name(0X10CEF, "mapcl1", SN_LOCAL);
	set_name(0X10CF9, "mapcl2", SN_LOCAL);
	set_name(0X10D00, "Map16", SN_LOCAL);
	set_name(0X10D3B, "MAPRET", SN_LOCAL);
	set_name(0X10D4F, "MapSet", SN_LOCAL);
	set_name(0X10D53, "mapcl3", SN_LOCAL);
	set_name(0X10D60, "mapcl4", SN_LOCAL);
	set_name(0X10D79, "mapcl5", SN_LOCAL);
	set_name(0X10D7F, "mapcl6", SN_LOCAL);
	set_name(0X10D83, "MAP_POP", SN_LOCAL);
	set_name(0X10D88, "mapcl7", SN_LOCAL);
	add_func    (0X10DC2,0X10DD4);
	set_func_flags(0X10DC2,0x4400);
	set_frame_size(0X10DC2, 0, 0, 0);
	add_func    (0X10DD4,0X10E43);
	set_func_flags(0X10DD4,0x4400);
	set_frame_size(0X10DD4, 0, 0, 0);
	set_name(0X10E00, "frcd20", SN_LOCAL);
	set_name(0X10E37, "frcd25", SN_LOCAL);
	set_name(0X10E3D, "NO_CHANGE", SN_LOCAL);
	add_func    (0X10E8A,0X1116F);
	set_func_flags(0X10E8A,0x4400);
	set_frame_size(0X10E8A, 0, 0, 0);
	set_name(0X10E43, "FATERR", SN_LOCAL);
	set_name(0X10E59, "chk_set_fa_1", SN_LOCAL);
	set_name(0X10E6A, "chk_set_fa_2", SN_LOCAL);
	set_name(0X10E6F, "chk_set_fa_3", SN_LOCAL);
	set_name(0X10E88, "FATERR_fail", SN_LOCAL);
	set_name(0X10EDB, "fgdpb_1", SN_LOCAL);
	set_name(0X10EF1, "CHECK_BYT", SN_LOCAL);
	set_name(0X10EF9, "CHECK_ZR", SN_LOCAL);
	set_name(0X10EFD, "DISK_CHNG_ERR", SN_LOCAL);
	set_name(0X10F32, "FAIL_OPJ2", SN_LOCAL);
	set_name(0X10F37, "CHKBUFFDIRT", SN_LOCAL);
	set_name(0X10F41, "nbuffer", SN_LOCAL);
	set_name(0X10F50, "FAIL_OP", SN_LOCAL);
	set_name(0X10F54, "lfnxt", SN_LOCAL);
	set_name(0X10F5D, "NEWDSK", SN_LOCAL);
	set_name(0X10F60, "nxbuffer", SN_LOCAL);
	set_name(0X10F75, "lfnxt2", SN_LOCAL);
	set_name(0X10F77, "skpbuff", SN_LOCAL);
	set_name(0X10F93, "GOGETBPB", SN_LOCAL);
	set_name(0X10FD0, "GETFREEBUF", SN_LOCAL);
	set_name(0X10FF2, "unpack_ok", SN_LOCAL);
	set_name(0X10FF5, "GOTGETBUF", SN_LOCAL);
	set_name(0X11064, "gotgetbuf1", SN_LOCAL);
	set_name(0X110AB, "gotgetbuf2", SN_LOCAL);
	set_name(0X110D0, "gotgetbuf3", SN_LOCAL);
	set_name(0X110F8, "gotgetbuf4", SN_LOCAL);
	set_name(0X1110D, "gotgetbuf5", SN_LOCAL);
	set_name(0X1111E, "gotgetbuf6", SN_LOCAL);
	set_name(0X11123, "gotgetbuf7", SN_LOCAL);
	set_name(0X11134, "gotgetbuf8", SN_LOCAL);
	set_name(0X11140, "gotgetbuf9", SN_LOCAL);
	set_name(0X11156, "gotgetbuf10", SN_LOCAL);
	set_name(0X1115A, "gotgetbuf11", SN_LOCAL);
	set_name(0X1115F, "gotgetbuf12", SN_LOCAL);
	add_func    (0X1116F,0X1117A);
	set_func_flags(0X1116F,0x4400);
	set_frame_size(0X1116F, 0, 0, 0);
	add_func    (0X1117A,0X11181);
	set_func_flags(0X1117A,0x4400);
	set_frame_size(0X1117A, 0, 0, 0);
	add_func    (0X11181,0X111BE);
	set_func_flags(0X11181,0x4400);
	set_frame_size(0X11181, 0X6, 0, 0);
	set_name(0X11199, "not_first", SN_LOCAL);
	set_name(0X111AF, "nret", SN_LOCAL);
	set_name(0X111BD, "pbx", SN_LOCAL);
	add_func    (0X111CD,0X111CF);
	set_func_flags(0X111CD,0x400);
	add_func    (0X111CF,0X1130C);
	set_func_flags(0X111CF,0x4400);
	set_frame_size(0X111CF, 0, 0, 0);
	set_name(0X11203, "getb1", SN_LOCAL);
	set_name(0X11211, "getb10", SN_LOCAL);
	set_name(0X11227, "getb11", SN_LOCAL);
	set_name(0X1122E, "getb12", SN_LOCAL);
	set_name(0X1123E, "getb12x", SN_LOCAL);
	set_name(0X11253, "getb13", SN_LOCAL);
	set_name(0X11278, "getb14", SN_LOCAL);
	set_name(0X11283, "getb15", SN_LOCAL);
	set_name(0X11288, "getb17", SN_LOCAL);
	set_name(0X112A4, "getb19", SN_LOCAL);
	set_name(0X112AB, "getb20", SN_LOCAL);
	set_name(0X112C3, "getb25", SN_LOCAL);
	set_name(0X112DC, "getb27", SN_LOCAL);
	set_name(0X112F2, "getb26", SN_LOCAL);
	set_name(0X112F7, "getb30", SN_LOCAL);
	set_name(0X11309, "getbx", SN_LOCAL);
	add_func    (0X1135F,0X11395);
	set_func_flags(0X1135F,0x4400);
	set_frame_size(0X1135F, 0, 0, 0);
	set_name(0X11366, "chkflush_retn", SN_LOCAL);
	set_name(0X11367, "chkflush1", SN_LOCAL);
	set_name(0X1137D, "DOBUFFER", SN_LOCAL);
	set_name(0X11393, "LEAVE_BUF", SN_LOCAL);
	add_func    (0X11395,0X1143B);
	set_func_flags(0X11395,0x4400);
	set_frame_size(0X11395, 0, 0, 0);
	set_name(0X113DD, "NO_IGNORE", SN_LOCAL);
	set_name(0X113E9, "WRTAGAIN", SN_LOCAL);
	set_name(0X11412, "NBUFFINHMA", SN_LOCAL);
	set_name(0X11421, "NOSET", SN_LOCAL);
	add_func    (0X1143B,0X1144E);
	set_func_flags(0X1143B,0x4400);
	set_frame_size(0X1143B, 0, 0, 0);
	add_func    (0X1144E,0X11454);
	set_func_flags(0X1144E,0x4400);
	set_frame_size(0X1144E, 0, 0, 0);
	add_func    (0X11454,0X11462);
	set_func_flags(0X11454,0x4400);
	set_frame_size(0X11454, 0, 0, 0);
	set_name(0X11461, "ddcx", SN_LOCAL);
	add_func    (0X115F8,0X116DC);
	set_func_flags(0X115F8,0x4400);
	set_frame_size(0X115F8, 0X2, 0, 0);
	set_name(0X11603, "ep_contep_cont", SN_LOCAL);
	set_name(0X1164D, "ep_done1", SN_LOCAL);
	set_name(0X11650, "ep_chkpatch2", SN_LOCAL);
	set_name(0X1167D, "ep_patchcode2", SN_LOCAL);
	set_name(0X1169C, "ep_chkpatch3", SN_LOCAL);
	set_name(0X116D4, "ep_notpacked", SN_LOCAL);
	add_func    (0X116DC,0X116F0);
	set_func_flags(0X116DC,0x4400);
	set_frame_size(0X116DC, 0, 0, 0);
	set_name(0X116EF, "ccs_done", SN_LOCAL);
	add_func    (0X116F0,0X11711);
	set_func_flags(0X116F0,0x4400);
	set_frame_size(0X116F0, 0X2, 0, 0);
	set_name(0X11700, "ep_chksum", SN_LOCAL);
	set_name(0X1170F, "cp_fail", SN_LOCAL);
	add_func    (0X119E8,0X11A0F);
	set_func_flags(0X119E8,0x4400);
	set_frame_size(0X119E8, 0, 0, 0);
	add_func    (0X11A22,0X11A76);
	set_func_flags(0X11A22,0x4400);
	set_frame_size(0X11A22, 0, 0, 0);
	set_name(0X11A31, "ps_set1", SN_LOCAL);
	set_name(0X11A41, "ps_set2", SN_LOCAL);
	set_name(0X11A4D, "ps_set3", SN_LOCAL);
	set_name(0X11A5D, "ps_set4", SN_LOCAL);
	set_name(0X11A6E, "ps_set5", SN_LOCAL);
	add_func    (0X11BA1,0X11C92);
	set_func_flags(0X11BA1,0x402);
	set_frame_size(0X11BA1, 0X6, 0, 0);
	set_name(0X11C15, "foundbad02", SN_LOCAL);
	set_name(0X11C23, "longpath", SN_LOCAL);
	set_name(0X11C28, "lploopp", SN_LOCAL);
	set_name(0X11C4D, "skip_nmis", SN_LOCAL);
	set_name(0X11C7D, "write_fatal_msg", SN_LOCAL);
	set_name(0X11C82, "fatal_loop", SN_LOCAL);
	add_func    (0X13740,0X13755);
	set_func_flags(0X13740,0x4400);
	set_frame_size(0X13740, 0, 0, 0);
	add_func    (0X13755,0X1376E);
	set_func_flags(0X13755,0x4400);
	set_frame_size(0X13755, 0, 0, 0);
	add_func    (0X1376E,0X13788);
	set_func_flags(0X1376E,0x4400);
	set_frame_size(0X1376E, 0X2, 0, 0);
	add_func    (0X13788,0X13804);
	set_func_flags(0X13788,0x4400);
	set_frame_size(0X13788, 0, 0, 0);
	add_func    (0X13858,0X138AD);
	set_func_flags(0X13858,0x4401);
	set_frame_size(0X13858, 0, 0, 0);
	add_func    (0X138AD,0X138D4);
	set_func_flags(0X138AD,0x4400);
	set_frame_size(0X138AD, 0X2, 0, 0);
	add_func    (0X138D4,0X138F3);
	set_func_flags(0X138D4,0x4400);
	set_frame_size(0X138D4, 0, 0, 0);
	add_func    (0X139BD,0X139F2);
	set_func_flags(0X139BD,0x4400);
	set_frame_size(0X139BD, 0, 0, 0);
	add_func    (0X139FF,0X13A69);
	set_func_flags(0X139FF,0x4400);
	set_frame_size(0X139FF, 0, 0, 0);
	add_func    (0X13A69,0X13A99);
	set_func_flags(0X13A69,0x400);
	add_func    (0X13AAC,0X13AF7);
	set_func_flags(0X13AAC,0x4400);
	set_frame_size(0X13AAC, 0, 0, 0);
	add_func    (0X13AF7,0X13B52);
	set_func_flags(0X13AF7,0x4400);
	set_frame_size(0X13AF7, 0, 0, 0);
	add_func    (0X13B52,0X13B78);
	set_func_flags(0X13B52,0x400);
	add_func    (0X13BE9,0X13C51);
	set_func_flags(0X13BE9,0x400);
	add_func    (0X13E8D,0X1409A);
	set_func_flags(0X13E8D,0x4400);
	set_frame_size(0X13E8D, 0, 0, 0);
	add_func    (0X1409A,0X140B7);
	set_func_flags(0X1409A,0x4400);
	set_frame_size(0X1409A, 0, 0, 0);
	add_func    (0X140B7,0X140F2);
	set_func_flags(0X140B7,0x4400);
	set_frame_size(0X140B7, 0, 0, 0);
	add_func    (0X140F2,0X14251);
	set_func_flags(0X140F2,0x4400);
	set_frame_size(0X140F2, 0, 0, 0);
	add_func    (0X14251,0X14278);
	set_func_flags(0X14251,0x4400);
	set_frame_size(0X14251, 0, 0, 0);
	add_func    (0X14587,0X14623);
	set_func_flags(0X14587,0x4400);
	set_frame_size(0X14587, 0X4, 0, 0);
	add_func    (0X14623,0X14698);
	set_func_flags(0X14623,0x4400);
	set_frame_size(0X14623, 0, 0, 0);
	add_func    (0X14698,0X146B4);
	set_func_flags(0X14698,0x4400);
	set_frame_size(0X14698, 0, 0, 0);
	add_func    (0X146B4,0X146CD);
	set_func_flags(0X146B4,0x4400);
	set_frame_size(0X146B4, 0, 0, 0);
	add_func    (0X146CD,0X146F5);
	set_func_flags(0X146CD,0x4400);
	set_frame_size(0X146CD, 0, 0, 0);
	add_func    (0X146F5,0X14716);
	set_func_flags(0X146F5,0x4400);
	set_frame_size(0X146F5, 0X2, 0, 0);
	add_func    (0X14716,0X14724);
	set_func_flags(0X14716,0x4400);
	set_frame_size(0X14716, 0, 0, 0);
	add_func    (0X14724,0X147F7);
	set_func_flags(0X14724,0x4400);
	set_frame_size(0X14724, 0, 0, 0);
	add_func    (0X147F7,0X14885);
	set_func_flags(0X147F7,0x4400);
	set_frame_size(0X147F7, 0, 0, 0);
	add_func    (0X149ED,0X14A01);
	set_func_flags(0X149ED,0x4400);
	set_frame_size(0X149ED, 0, 0, 0);
	add_func    (0X14A01,0X14A11);
	set_func_flags(0X14A01,0x4400);
	set_frame_size(0X14A01, 0X2, 0, 0);
	add_func    (0X14A11,0X14A50);
	set_func_flags(0X14A11,0x4400);
	set_frame_size(0X14A11, 0X2, 0, 0);
	add_func    (0X14A50,0X14A67);
	set_func_flags(0X14A50,0x4400);
	set_frame_size(0X14A50, 0, 0, 0);
	add_func    (0X14A67,0X14A76);
	set_func_flags(0X14A67,0x4400);
	set_frame_size(0X14A67, 0, 0, 0);
	add_func    (0X14A76,0X14A84);
	set_func_flags(0X14A76,0x4400);
	add_func    (0X14A84,0X14AB8);
	set_func_flags(0X14A84,0x4400);
	set_frame_size(0X14A84, 0, 0, 0);
	add_func    (0X14AB8,0X14AC5);
	set_func_flags(0X14AB8,0x4400);
	set_frame_size(0X14AB8, 0, 0, 0);
	add_func    (0X14AC5,0X14AC6);
	set_func_flags(0X14AC5,0x4400);
	set_frame_size(0X14AC5, 0, 0, 0);
	add_func    (0X14AC6,0X14ADB);
	set_func_flags(0X14AC6,0x400);
	add_func    (0X14ADB,0X14C00);
	set_func_flags(0X14ADB,0x4400);
	set_frame_size(0X14ADB, 0, 0, 0);
	add_func    (0X14C00,0X14C32);
	set_func_flags(0X14C00,0x4400);
	set_frame_size(0X14C00, 0X4, 0, 0);
	add_func    (0X14C32,0X14C5E);
	set_func_flags(0X14C32,0x4400);
	add_func    (0X14C5E,0X14C6B);
	set_func_flags(0X14C5E,0x4400);
	set_frame_size(0X14C5E, 0, 0, 0);
	add_func    (0X14C6B,0X14C97);
	set_func_flags(0X14C6B,0x4400);
	set_frame_size(0X14C6B, 0X4, 0, 0);
	add_func    (0X14CC1,0X14D70);
	set_func_flags(0X14CC1,0x4400);
	set_frame_size(0X14CC1, 0, 0, 0);
	add_func    (0X14D70,0X14D7C);
	set_func_flags(0X14D70,0x4400);
	set_frame_size(0X14D70, 0, 0, 0);
	add_func    (0X14D7C,0X14DD9);
	set_func_flags(0X14D7C,0x4400);
	set_frame_size(0X14D7C, 0X2, 0, 0);
	add_func    (0X14DD9,0X14EED);
	set_func_flags(0X14DD9,0x4400);
	set_frame_size(0X14DD9, 0X2, 0, 0);
	add_func    (0X14EED,0X14F08);
	set_func_flags(0X14EED,0x4400);
	set_frame_size(0X14EED, 0, 0, 0);
	add_func    (0X14F08,0X14F36);
	set_func_flags(0X14F08,0x4400);
	set_frame_size(0X14F08, 0, 0, 0);
	add_func    (0X14F36,0X14F4A);
	set_func_flags(0X14F36,0x4400);
	set_frame_size(0X14F36, 0, 0, 0);
	add_func    (0X14F80,0X14F96);
	set_func_flags(0X14F80,0x4400);
	set_frame_size(0X14F80, 0, 0, 0);
	add_func    (0X14F96,0X14F9E);
	set_func_flags(0X14F96,0x4400);
	set_frame_size(0X14F96, 0, 0, 0);
	add_func    (0X14F9E,0X14FE4);
	set_func_flags(0X14F9E,0x4400);
	add_func    (0X14FE4,0X14FE9);
	set_func_flags(0X14FE4,0x4400);
	set_frame_size(0X14FE4, 0, 0, 0);
	add_func    (0X14FE9,0X15008);
	set_func_flags(0X14FE9,0x4400);
	set_frame_size(0X14FE9, 0, 0, 0);
	add_func    (0X15008,0X1500E);
	set_func_flags(0X15008,0x4400);
	set_frame_size(0X15008, 0, 0, 0);
	add_func    (0X15478,0X154A7);
	set_func_flags(0X15478,0x400);
	add_func    (0X154A7,0X1550B);
	set_func_flags(0X154A7,0x4400);
	set_frame_size(0X154A7, 0, 0, 0);
	add_func    (0X1550B,0X15521);
	set_func_flags(0X1550B,0x4400);
	set_frame_size(0X1550B, 0, 0, 0);
	add_func    (0X15521,0X159D7);
	set_func_flags(0X15521,0x4400);
	set_frame_size(0X15521, 0, 0, 0);
	set_name(0X15827, "so_msg_loop", SN_LOCAL);
	set_name(0X15895, "skipstack", SN_LOCAL);
	set_name(0X158AB, "rcclloop", SN_LOCAL);
	set_name(0X158C3, "goaux", SN_LOCAL);
	set_name(0X158D6, "goaux2", SN_LOCAL);
	set_name(0X15914, "startrearm", SN_LOCAL);
	set_name(0X15923, "finishrearm", SN_LOCAL);
	set_name(0X1593B, "mae1_msg_loop", SN_LOCAL);
	set_name(0X15968, "mae2_msg_loop", SN_LOCAL);
	add_func    (0X159D7,0X15A4D);
	set_func_flags(0X159D7,0x400);
	set_frame_size(0X159D7, 0X2, 0, 0);
	set_name(0X159EA, "installfilename", SN_LOCAL);
	set_name(0X159EF, "got_installparm", SN_LOCAL);
	set_name(0X159F9, "done_installparm", SN_LOCAL);
	set_name(0X15A08, "install_seg_set", SN_LOCAL);
	set_name(0X15A20, "no_envdata2", SN_LOCAL);
	add_func    (0X15A5A,0X15A63);
	set_func_flags(0X15A5A,0x4400);
	set_frame_size(0X15A5A, 0, 0, 0);
	add_func    (0X15A9F,0X15ACB);
	set_func_flags(0X15A9F,0x4400);
	set_frame_size(0X15A9F, 0, 0, 0);
	set_name(0X15AB3, "sum1", SN_LOCAL);
	set_name(0X15AB9, "sum_sys_code", SN_LOCAL);
	set_name(0X15AC2, "sum2", SN_LOCAL);
	add_func    (0X15AD1,0X15AE6);
	set_func_flags(0X15AD1,0x400);
	add_func    (0X15AE6,0X15B1A);
	set_func_flags(0X15AE6,0x4400);
	set_frame_size(0X15AE6, 0, 0, 0);
	add_func    (0X15B1A,0X15B79);
	set_func_flags(0X15B1A,0x4400);
	set_frame_size(0X15B1A, 0, 0, 0);
	add_func    (0X15B79,0X15BB1);
	set_func_flags(0X15B79,0x4400);
	set_frame_size(0X15B79, 0X2, 0, 0);
	add_func    (0X15BB1,0X15BD9);
	set_func_flags(0X15BB1,0x4400);
	set_frame_size(0X15BB1, 0, 0, 0);
	add_func    (0X15BD9,0X15EFC);
	set_func_flags(0X15BD9,0x4400);
	set_frame_size(0X15BD9, 0, 0, 0);
	add_func    (0X15EFC,0X15F1C);
	set_func_flags(0X15EFC,0x4400);
	set_frame_size(0X15EFC, 0, 0, 0);
	add_func    (0X16884,0X16901);
	set_func_flags(0X16884,0x4401);
	set_frame_size(0X16884, 0, 0, 0);
	add_func    (0X16901,0X1690A);
	set_func_flags(0X16901,0x4401);
	add_func    (0X16934,0X16967);
	set_func_flags(0X16934,0x4400);
	set_frame_size(0X16934, 0, 0, 0);
	add_func    (0X16967,0X16A43);
	set_func_flags(0X16967,0x4400);
	set_frame_size(0X16967, 0, 0, 0);
	add_func    (0X16A84,0X16B11);
	set_func_flags(0X16A84,0x4400);
	set_frame_size(0X16A84, 0, 0, 0);
	add_func    (0X16B21,0X16B58);
	set_func_flags(0X16B21,0x4400);
	set_frame_size(0X16B21, 0, 0, 0);
	add_func    (0X16B58,0X16B83);
	set_func_flags(0X16B58,0x4400);
	set_frame_size(0X16B58, 0X4, 0, 0);
}

static Functions_1(void) {

	add_func    (0X16B98,0X16BB2);
	set_func_flags(0X16B98,0x4400);
	set_frame_size(0X16B98, 0X2, 0, 0);
	add_func    (0X16C8A,0X16D8C);
	set_func_flags(0X16C8A,0x4400);
	set_frame_size(0X16C8A, 0, 0, 0);
	add_func    (0X16D8C,0X16DB1);
	set_func_flags(0X16D8C,0x4400);
	set_frame_size(0X16D8C, 0, 0, 0);
	add_func    (0X16DB1,0X16DC4);
	set_func_flags(0X16DB1,0x4400);
	set_frame_size(0X16DB1, 0, 0, 0);
	add_func    (0X16DC4,0X16E15);
	set_func_flags(0X16DC4,0x4400);
	set_frame_size(0X16DC4, 0, 0, 0);
	add_func    (0X16E15,0X16E2D);
	set_func_flags(0X16E15,0x4400);
	set_frame_size(0X16E15, 0, 0, 0);
	add_func    (0X16E2D,0X16E46);
	set_func_flags(0X16E2D,0x4400);
	set_frame_size(0X16E2D, 0, 0, 0);
	add_func    (0X16E46,0X16EBC);
	set_func_flags(0X16E46,0x4400);
	set_frame_size(0X16E46, 0, 0, 0);
	add_func    (0X16EBC,0X16F1E);
	set_func_flags(0X16EBC,0x4400);
	set_frame_size(0X16EBC, 0X2, 0, 0);
	add_func    (0X16F1E,0X1703F);
	set_func_flags(0X16F1E,0x4400);
	set_frame_size(0X16F1E, 0, 0, 0);
	add_func    (0X1703F,0X17088);
	set_func_flags(0X1703F,0x4400);
	set_frame_size(0X1703F, 0, 0, 0);
	add_func    (0X17088,0X1720B);
	set_func_flags(0X17088,0x4400);
	set_frame_size(0X17088, 0, 0, 0);
	add_func    (0X1720B,0X1723E);
	set_func_flags(0X1720B,0x4400);
	set_frame_size(0X1720B, 0, 0, 0);
	add_func    (0X1723E,0X1725B);
	set_func_flags(0X1723E,0x4400);
	set_frame_size(0X1723E, 0, 0, 0);
	add_func    (0X1725B,0X17280);
	set_func_flags(0X1725B,0x4400);
	set_frame_size(0X1725B, 0, 0, 0);
	add_func    (0X17280,0X17361);
	set_func_flags(0X17280,0x4400);
	set_frame_size(0X17280, 0, 0, 0);
	add_func    (0X17361,0X17512);
	set_func_flags(0X17361,0x4400);
	set_frame_size(0X17361, 0, 0, 0);
	add_func    (0X1776E,0X178F0);
	set_func_flags(0X1776E,0x4400);
	set_frame_size(0X1776E, 0, 0, 0);
	add_func    (0X178F0,0X179F5);
	set_func_flags(0X178F0,0x4400);
	set_frame_size(0X178F0, 0, 0, 0);
	add_func    (0X179F5,0X17A3C);
	set_func_flags(0X179F5,0x4400);
	set_frame_size(0X179F5, 0, 0, 0);
	add_func    (0X17A3C,0X17A78);
	set_func_flags(0X17A3C,0x4400);
	set_frame_size(0X17A3C, 0, 0, 0);
	add_func    (0X17A78,0X17AF2);
	set_func_flags(0X17A78,0x4400);
	set_frame_size(0X17A78, 0, 0, 0);
	add_func    (0X17AF2,0X17B31);
	set_func_flags(0X17AF2,0x4400);
	set_frame_size(0X17AF2, 0, 0, 0);
	add_func    (0X17B31,0X17B3C);
	set_func_flags(0X17B31,0x4400);
	set_frame_size(0X17B31, 0, 0, 0);
	add_func    (0X17C79,0X17DF4);
	set_func_flags(0X17C79,0x4400);
	set_frame_size(0X17C79, 0, 0, 0);
	add_func    (0X17DF4,0X17E26);
	set_func_flags(0X17DF4,0x4400);
	set_frame_size(0X17DF4, 0, 0, 0);
	add_func    (0X17E26,0X17E28);
	set_func_flags(0X17E26,0x4400);
	set_frame_size(0X17E26, 0, 0, 0);
	add_func    (0X17E28,0X17E4D);
	set_func_flags(0X17E28,0x4400);
	set_frame_size(0X17E28, 0X2, 0, 0);
	add_func    (0X17E4D,0X17E59);
	set_func_flags(0X17E4D,0x4400);
	set_frame_size(0X17E4D, 0, 0, 0);
	add_func    (0X17E59,0X17EBC);
	set_func_flags(0X17E59,0x4400);
	set_frame_size(0X17E59, 0, 0, 0);
	add_func    (0X17EBC,0X17F41);
	set_func_flags(0X17EBC,0x4400);
	set_frame_size(0X17EBC, 0X2, 0, 0);
	add_func    (0X17F41,0X17FF2);
	set_func_flags(0X17F41,0x4400);
	set_frame_size(0X17F41, 0, 0, 0);
	add_func    (0X17FF2,0X18018);
	set_func_flags(0X17FF2,0x4400);
	set_frame_size(0X17FF2, 0X4, 0, 0);
	add_func    (0X18018,0X18037);
	set_func_flags(0X18018,0x4400);
	set_frame_size(0X18018, 0X2, 0, 0);
	add_func    (0X18037,0X1807C);
	set_func_flags(0X18037,0x4400);
	set_frame_size(0X18037, 0, 0, 0);
	add_func    (0X1807C,0X180A0);
	set_func_flags(0X1807C,0x4400);
	set_frame_size(0X1807C, 0, 0, 0);
	add_func    (0X180A0,0X18191);
	set_func_flags(0X180A0,0x4400);
	set_frame_size(0X180A0, 0, 0, 0);
	add_func    (0X18191,0X181A3);
	set_func_flags(0X18191,0x4400);
	set_frame_size(0X18191, 0, 0, 0);
	add_func    (0X181A3,0X181B1);
	set_func_flags(0X181A3,0x4400);
	set_frame_size(0X181A3, 0, 0, 0);
	add_func    (0X181B1,0X1821A);
	set_func_flags(0X181B1,0x4400);
	set_frame_size(0X181B1, 0X4, 0, 0);
	add_func    (0X1821A,0X182BD);
	set_func_flags(0X1821A,0x4400);
	set_frame_size(0X1821A, 0X4, 0, 0);
	add_func    (0X182BD,0X1832E);
	set_func_flags(0X182BD,0x4400);
	set_frame_size(0X182BD, 0X6, 0, 0);
	add_func    (0X1832E,0X18343);
	set_func_flags(0X1832E,0x4400);
	set_frame_size(0X1832E, 0X2, 0, 0);
	add_func    (0X18343,0X18387);
	set_func_flags(0X18343,0x4400);
	set_frame_size(0X18343, 0, 0, 0);
	add_func    (0X18387,0X183AD);
	set_func_flags(0X18387,0x4400);
	set_frame_size(0X18387, 0, 0, 0);
	add_func    (0X183AD,0X183E3);
	set_func_flags(0X183AD,0x4400);
	set_frame_size(0X183AD, 0X2, 0, 0);
	add_func    (0X183E3,0X18444);
	set_func_flags(0X183E3,0x4400);
	set_frame_size(0X183E3, 0X2, 0, 0);
	add_func    (0X18444,0X18462);
	set_func_flags(0X18444,0x4400);
	set_frame_size(0X18444, 0, 0, 0);
	add_func    (0X18462,0X184B8);
	set_func_flags(0X18462,0x4400);
	set_frame_size(0X18462, 0, 0, 0);
	add_func    (0X188B9,0X189A9);
	set_func_flags(0X188B9,0x4400);
	set_frame_size(0X188B9, 0, 0, 0);
	add_func    (0X189A9,0X189BE);
	set_func_flags(0X189A9,0x400);
	add_func    (0X1912E,0X1912F);
	set_func_flags(0X1912E,0x4440);
	set_frame_size(0X1912E, 0, 0, 0);
	add_func    (0X1912F,0X191A5);
	set_func_flags(0X1912F,0x4400);
	set_frame_size(0X1912F, 0, 0, 0);
	add_func    (0X192CB,0X192E9);
	set_func_flags(0X192CB,0x4400);
	set_frame_size(0X192CB, 0, 0, 0);
	add_func    (0X1936A,0X1939A);
	set_func_flags(0X1936A,0x4400);
	set_frame_size(0X1936A, 0X2, 0, 0);
	add_func    (0X195D6,0X195F1);
	set_func_flags(0X195D6,0x4400);
	set_frame_size(0X195D6, 0, 0, 0);
	add_func    (0X195F1,0X19618);
	set_func_flags(0X195F1,0x4400);
	set_frame_size(0X195F1, 0, 0, 0);
	add_func    (0X19620,0X1962D);
	set_func_flags(0X19620,0x4402);
	set_frame_size(0X19620, 0, 0, 0);
	add_func    (0X1964A,0X1966A);
	set_func_flags(0X1964A,0x4400);
	set_frame_size(0X1964A, 0, 0, 0);
	add_func    (0X1966A,0X1967C);
	set_func_flags(0X1966A,0x4400);
	set_frame_size(0X1966A, 0, 0, 0);
	add_func    (0X1967C,0X196AA);
	set_func_flags(0X1967C,0x4400);
	set_frame_size(0X1967C, 0, 0, 0);
	add_func    (0X196AA,0X19723);
	set_func_flags(0X196AA,0x4400);
	set_frame_size(0X196AA, 0, 0, 0);
	add_func    (0X19723,0X19742);
	set_func_flags(0X19723,0x4400);
	set_frame_size(0X19723, 0, 0, 0);
	add_func    (0X19742,0X1975F);
	set_func_flags(0X19742,0x4400);
	set_frame_size(0X19742, 0, 0, 0);
	add_func    (0X1975F,0X1977C);
	set_func_flags(0X1975F,0x4400);
	set_frame_size(0X1975F, 0, 0, 0);
	add_func    (0X1977C,0X198F1);
	set_func_flags(0X1977C,0x4400);
	set_frame_size(0X1977C, 0, 0, 0);
	add_func    (0X198F1,0X198F4);
	set_func_flags(0X198F1,0x400);
	add_func    (0X198F4,0X19915);
	set_func_flags(0X198F4,0x4400);
	set_frame_size(0X198F4, 0, 0, 0);
	add_func    (0X19915,0X19927);
	set_func_flags(0X19915,0x4400);
	set_frame_size(0X19915, 0, 0, 0);
	add_func    (0X19927,0X1995B);
	set_func_flags(0X19927,0x4400);
	set_frame_size(0X19927, 0, 0, 0);
	add_func    (0X1995B,0X199B2);
	set_func_flags(0X1995B,0x4400);
	set_frame_size(0X1995B, 0X4, 0, 0);
	add_func    (0X199B2,0X199C8);
	set_func_flags(0X199B2,0x4400);
	set_frame_size(0X199B2, 0, 0, 0);
	add_func    (0X199C8,0X199D8);
	set_func_flags(0X199C8,0x4400);
	set_frame_size(0X199C8, 0, 0, 0);
	add_func    (0X199D8,0X19A18);
	set_func_flags(0X199D8,0x4400);
	set_frame_size(0X199D8, 0X2, 0, 0);
	add_func    (0X19A18,0X19A75);
	set_func_flags(0X19A18,0x4400);
	set_frame_size(0X19A18, 0, 0, 0);
	add_func    (0X19A75,0X19A89);
	set_func_flags(0X19A75,0x4400);
	set_frame_size(0X19A75, 0, 0, 0);
	add_func    (0X19A89,0X19A94);
	set_func_flags(0X19A89,0x4400);
	set_frame_size(0X19A89, 0, 0, 0);
	add_func    (0X19A94,0X19A9F);
	set_func_flags(0X19A94,0x4400);
	set_frame_size(0X19A94, 0, 0, 0);
	add_func    (0X19A9F,0X19AC1);
	set_func_flags(0X19A9F,0x4400);
	set_frame_size(0X19A9F, 0X6, 0, 0);
	add_func    (0X19AC1,0X19AF5);
	set_func_flags(0X19AC1,0x4400);
	set_frame_size(0X19AC1, 0, 0, 0);
	add_func    (0X19AF5,0X19B09);
	set_func_flags(0X19AF5,0x4400);
	set_frame_size(0X19AF5, 0X4, 0, 0);
	add_func    (0X19B0B,0X19B3F);
	set_func_flags(0X19B0B,0x4400);
	set_frame_size(0X19B0B, 0, 0, 0);
	add_func    (0X19B3F,0X19B94);
	set_func_flags(0X19B3F,0x4400);
	set_frame_size(0X19B3F, 0X2, 0, 0);
	add_func    (0X19B94,0X19BB1);
	set_func_flags(0X19B94,0x4400);
	set_frame_size(0X19B94, 0, 0, 0);
	add_func    (0X19BB1,0X19BBF);
	set_func_flags(0X19BB1,0x4400);
	set_frame_size(0X19BB1, 0, 0, 0);
	add_func    (0X19BBF,0X19BD7);
	set_func_flags(0X19BBF,0x4400);
	set_frame_size(0X19BBF, 0X2, 0, 0);
	add_func    (0X19BD7,0X19BF1);
	set_func_flags(0X19BD7,0x4400);
	set_frame_size(0X19BD7, 0, 0, 0);
	add_func    (0X19BF1,0X19C33);
	set_func_flags(0X19BF1,0x4400);
	set_frame_size(0X19BF1, 0, 0, 0);
	add_func    (0X19C33,0X19C45);
	set_func_flags(0X19C33,0x4400);
	set_frame_size(0X19C33, 0, 0, 0);
	add_func    (0X19C45,0X19C4D);
	set_func_flags(0X19C45,0x4400);
	set_frame_size(0X19C45, 0, 0, 0);
	add_func    (0X19C65,0X19CAA);
	set_func_flags(0X19C65,0x4400);
	set_frame_size(0X19C65, 0, 0, 0);
	add_func    (0X19CAA,0X19CB2);
	set_func_flags(0X19CAA,0x4400);
	set_frame_size(0X19CAA, 0, 0, 0);
	add_func    (0X19CB2,0X19CCA);
	set_func_flags(0X19CB2,0x4400);
	set_frame_size(0X19CB2, 0X4, 0, 0);
	add_func    (0X19CCA,0X19CDF);
	set_func_flags(0X19CCA,0x4400);
	set_frame_size(0X19CCA, 0X4, 0, 0);
	add_func    (0X19CE8,0X19CFB);
	set_func_flags(0X19CE8,0x4400);
	set_frame_size(0X19CE8, 0, 0, 0);
	add_func    (0X19CFB,0X19D26);
	set_func_flags(0X19CFB,0x4400);
	set_frame_size(0X19CFB, 0, 0, 0);
	add_func    (0X19D26,0X19D32);
	set_func_flags(0X19D26,0x4400);
	set_frame_size(0X19D26, 0, 0, 0);
	add_func    (0X19D32,0X19D39);
	set_func_flags(0X19D32,0x4400);
	set_frame_size(0X19D32, 0, 0, 0);
	add_func    (0X19D39,0X19D5D);
	set_func_flags(0X19D39,0x4400);
	set_frame_size(0X19D39, 0, 0, 0);
	add_func    (0X19D5D,0X19D7A);
	set_func_flags(0X19D5D,0x4400);
	set_frame_size(0X19D5D, 0, 0, 0);
	add_func    (0X19D7A,0X19DAB);
	set_func_flags(0X19D7A,0x4400);
	set_frame_size(0X19D7A, 0, 0, 0);
	add_func    (0X19DAB,0X19DEE);
	set_func_flags(0X19DAB,0x4400);
	set_frame_size(0X19DAB, 0X2, 0, 0);
	add_func    (0X19DEE,0X19DFF);
	set_func_flags(0X19DEE,0x4400);
	set_frame_size(0X19DEE, 0, 0, 0);
	add_func    (0X19DFF,0X19E5C);
	set_func_flags(0X19DFF,0x4400);
	set_frame_size(0X19DFF, 0X2, 0, 0);
	add_func    (0X19E5C,0X19EAC);
	set_func_flags(0X19E5C,0x4400);
	set_frame_size(0X19E5C, 0X2, 0, 0);
	add_func    (0X19EAC,0X19ED4);
	set_func_flags(0X19EAC,0x4400);
	set_frame_size(0X19EAC, 0, 0, 0);
	add_func    (0X19ED4,0X19F02);
	set_func_flags(0X19ED4,0x4400);
	set_frame_size(0X19ED4, 0, 0, 0);
	add_func    (0X19F02,0X19F26);
	set_func_flags(0X19F02,0x4400);
	set_frame_size(0X19F02, 0, 0, 0);
	add_func    (0X19F26,0X19F63);
	set_func_flags(0X19F26,0x4400);
	set_frame_size(0X19F26, 0, 0, 0);
	add_func    (0X19F63,0X19F77);
	set_func_flags(0X19F63,0x4400);
	set_frame_size(0X19F63, 0X4, 0, 0);
	add_func    (0X19F77,0X19FA1);
	set_func_flags(0X19F77,0x4400);
	set_frame_size(0X19F77, 0X4, 0, 0);
	add_func    (0X19FA1,0X19FB1);
	set_func_flags(0X19FA1,0x4400);
	set_frame_size(0X19FA1, 0, 0, 0);
	add_func    (0X19FB1,0X19FD6);
	set_func_flags(0X19FB1,0x4400);
	set_frame_size(0X19FB1, 0, 0, 0);
	add_func    (0X19FD6,0X19FE6);
	set_func_flags(0X19FD6,0x4400);
	set_frame_size(0X19FD6, 0, 0, 0);
	add_func    (0X19FE6,0X1A00E);
	set_func_flags(0X19FE6,0x4400);
	set_frame_size(0X19FE6, 0, 0, 0);
	add_func    (0X1A00E,0X1A03B);
	set_func_flags(0X1A00E,0x4400);
	set_frame_size(0X1A00E, 0, 0, 0);
	add_func    (0X1A03B,0X1A056);
	set_func_flags(0X1A03B,0x4400);
	set_frame_size(0X1A03B, 0, 0, 0);
	add_func    (0X1A056,0X1A06E);
	set_func_flags(0X1A056,0x4400);
	set_frame_size(0X1A056, 0X2, 0, 0);
	add_func    (0X1A06E,0X1A080);
	set_func_flags(0X1A06E,0x4400);
	set_frame_size(0X1A06E, 0, 0, 0);
	add_func    (0X1A080,0X1A0E9);
	set_func_flags(0X1A080,0x4400);
	set_frame_size(0X1A080, 0, 0, 0);
	add_func    (0X1A0E9,0X1A104);
	set_func_flags(0X1A0E9,0x4400);
	set_frame_size(0X1A0E9, 0, 0, 0);
	add_func    (0X1A104,0X1A123);
	set_func_flags(0X1A104,0x4400);
	set_frame_size(0X1A104, 0, 0, 0);
	add_func    (0X1A123,0X1A155);
	set_func_flags(0X1A123,0x4400);
	set_frame_size(0X1A123, 0, 0, 0);
	add_func    (0X1A155,0X1A1A4);
	set_func_flags(0X1A155,0x4400);
	set_frame_size(0X1A155, 0, 0, 0);
	add_func    (0X1A1A4,0X1A1E8);
	set_func_flags(0X1A1A4,0x4400);
	set_frame_size(0X1A1A4, 0, 0, 0);
	add_func    (0X1A1E8,0X1A205);
	set_func_flags(0X1A1E8,0x4400);
	set_frame_size(0X1A1E8, 0, 0, 0);
	add_func    (0X1A205,0X1A219);
	set_func_flags(0X1A205,0x4400);
	set_frame_size(0X1A205, 0, 0, 0);
	add_func    (0X1A219,0X1A22C);
	set_func_flags(0X1A219,0x4400);
	set_frame_size(0X1A219, 0, 0, 0);
	add_func    (0X1A22C,0X1A265);
	set_func_flags(0X1A22C,0x4400);
	set_frame_size(0X1A22C, 0, 0, 0);
	add_func    (0X1A265,0X1A28A);
	set_func_flags(0X1A265,0x4400);
	set_frame_size(0X1A265, 0, 0, 0);
	add_func    (0X1A28A,0X1A2B8);
	set_func_flags(0X1A28A,0x4400);
	set_frame_size(0X1A28A, 0, 0, 0);
	add_func    (0X1A2B8,0X1A300);
	set_func_flags(0X1A2B8,0x4400);
	set_frame_size(0X1A2B8, 0X2, 0, 0);
	add_func    (0X1A300,0X1A30C);
	set_func_flags(0X1A300,0x4400);
	set_frame_size(0X1A300, 0, 0, 0);
	add_func    (0X1A30C,0X1A353);
	set_func_flags(0X1A30C,0x4400);
	set_frame_size(0X1A30C, 0, 0, 0);
	add_func    (0X1A353,0X1A371);
	set_func_flags(0X1A353,0x4400);
	set_frame_size(0X1A353, 0, 0, 0);
	add_func    (0X1A371,0X1A390);
	set_func_flags(0X1A371,0x4400);
	set_frame_size(0X1A371, 0, 0, 0);
	add_func    (0X1A390,0X1A3BF);
	set_func_flags(0X1A390,0x4400);
	set_frame_size(0X1A390, 0, 0, 0);
	add_func    (0X1A3BF,0X1A3E0);
	set_func_flags(0X1A3BF,0x4400);
	set_frame_size(0X1A3BF, 0, 0, 0);
	add_func    (0X1A3E0,0X1A49F);
	set_func_flags(0X1A3E0,0x4400);
	set_frame_size(0X1A3E0, 0, 0, 0);
	add_func    (0X1A49F,0X1A4DB);
	set_func_flags(0X1A49F,0x4400);
	set_frame_size(0X1A49F, 0, 0, 0);
	add_func    (0X1A4DB,0X1A4EF);
	set_func_flags(0X1A4DB,0x4400);
	set_frame_size(0X1A4DB, 0, 0, 0);
	add_func    (0X1A4EF,0X1A566);
	set_func_flags(0X1A4EF,0x4400);
	set_frame_size(0X1A4EF, 0, 0, 0);
	add_func    (0X1A566,0X1A593);
	set_func_flags(0X1A566,0x4400);
	set_frame_size(0X1A566, 0, 0, 0);
	add_func    (0X1A593,0X1A5C1);
	set_func_flags(0X1A593,0x4400);
	set_frame_size(0X1A593, 0, 0, 0);
	add_func    (0X1A5C1,0X1A600);
	set_func_flags(0X1A5C1,0x4400);
	set_frame_size(0X1A5C1, 0, 0, 0);
	add_func    (0X1A600,0X1A634);
	set_func_flags(0X1A600,0x4400);
	set_frame_size(0X1A600, 0X2, 0, 0);
	add_func    (0X1A6AF,0X1A72F);
	set_func_flags(0X1A6AF,0x4400);
	set_frame_size(0X1A6AF, 0, 0, 0);
	add_func    (0X1A72F,0X1A802);
	set_func_flags(0X1A72F,0x4400);
	set_frame_size(0X1A72F, 0, 0, 0);
	add_func    (0X1A802,0X1A82B);
	set_func_flags(0X1A802,0x4400);
	set_frame_size(0X1A802, 0X2, 0, 0);
	add_func    (0X1A82B,0X1A872);
	set_func_flags(0X1A82B,0x4400);
	set_frame_size(0X1A82B, 0X4, 0, 0);
	add_func    (0X1A872,0X1A8F5);
	set_func_flags(0X1A872,0x4400);
	set_frame_size(0X1A872, 0, 0, 0);
	add_func    (0X1A8F5,0X1A93A);
	set_func_flags(0X1A8F5,0x4400);
	set_frame_size(0X1A8F5, 0X2, 0, 0);
	add_func    (0X1A93A,0X1A947);
	set_func_flags(0X1A93A,0x4400);
	set_frame_size(0X1A93A, 0, 0, 0);
	add_func    (0X1A947,0X1A96E);
	set_func_flags(0X1A947,0x4400);
	set_frame_size(0X1A947, 0X2, 0, 0);
	add_func    (0X1A96E,0X1A9AC);
	set_func_flags(0X1A96E,0x4400);
	set_frame_size(0X1A96E, 0, 0, 0);
	add_func    (0X1A9AC,0X1A9D2);
	set_func_flags(0X1A9AC,0x4400);
	set_frame_size(0X1A9AC, 0, 0, 0);
	add_func    (0X1A9D2,0X1A9EA);
	set_func_flags(0X1A9D2,0x4400);
	set_frame_size(0X1A9D2, 0, 0, 0);
	add_func    (0X1A9EA,0X1AA0D);
	set_func_flags(0X1A9EA,0x4400);
	set_frame_size(0X1A9EA, 0, 0, 0);
	add_func    (0X1AA0D,0X1AA2B);
	set_func_flags(0X1AA0D,0x4400);
	set_frame_size(0X1AA0D, 0, 0, 0);
	add_func    (0X1AA57,0X1AA85);
	set_func_flags(0X1AA57,0x4400);
	set_frame_size(0X1AA57, 0, 0, 0);
	add_func    (0X1AA94,0X1AC84);
	set_func_flags(0X1AA94,0x4400);
	set_frame_size(0X1AA94, 0, 0, 0);
	add_func    (0X1AC84,0X1ACE5);
	set_func_flags(0X1AC84,0x4400);
	set_frame_size(0X1AC84, 0, 0, 0);
	add_func    (0X1ACE5,0X1AD29);
	set_func_flags(0X1ACE5,0x4400);
	set_frame_size(0X1ACE5, 0X2, 0, 0);
	add_func    (0X1AD29,0X1AD33);
	set_func_flags(0X1AD29,0x4400);
	set_frame_size(0X1AD29, 0, 0, 0);
	add_func    (0X1AD33,0X1AD70);
	set_func_flags(0X1AD33,0x4400);
	set_frame_size(0X1AD33, 0, 0, 0);
	add_func    (0X1AD70,0X1ADD8);
	set_func_flags(0X1AD70,0x4400);
	set_frame_size(0X1AD70, 0X2, 0, 0);
	add_func    (0X1ADD8,0X1ADE1);
	set_func_flags(0X1ADD8,0x4400);
	set_frame_size(0X1ADD8, 0X2, 0, 0);
	add_func    (0X1ADE1,0X1AE13);
	set_func_flags(0X1ADE1,0x4400);
	set_frame_size(0X1ADE1, 0, 0, 0);
	add_func    (0X1AE15,0X1AE2A);
	set_func_flags(0X1AE15,0x4402);
	add_func    (0X1AF85,0X1AFC2);
	set_func_flags(0X1AF85,0x4400);
	set_frame_size(0X1AF85, 0, 0, 0);
	add_func    (0X1B0E2,0X1B121);
	set_func_flags(0X1B0E2,0x4400);
	set_frame_size(0X1B0E2, 0X4, 0, 0);
	add_func    (0X1B3CC,0X1B4DE);
	set_func_flags(0X1B3CC,0x4400);
	set_frame_size(0X1B3CC, 0, 0, 0);
	add_func    (0X1B4DE,0X1B4EC);
	set_func_flags(0X1B4DE,0x4401);
	add_func    (0X1B507,0X1B512);
	set_func_flags(0X1B507,0x4401);
	add_func    (0X1B53D,0X1B548);
	set_func_flags(0X1B53D,0x4401);
	add_func    (0X1B55B,0X1B582);
	set_func_flags(0X1B55B,0x4401);
	set_frame_size(0X1B55B, 0, 0, 0);
	add_func    (0X1B590,0X1B62B);
	set_func_flags(0X1B590,0x4400);
	set_frame_size(0X1B590, 0, 0, 0);
	add_func    (0X1E451,0X1E48E);
	set_func_flags(0X1E451,0x4400);
	set_frame_size(0X1E451, 0, 0, 0);
	add_func    (0X1E48E,0X1E4E2);
	set_func_flags(0X1E48E,0x4400);
	set_frame_size(0X1E48E, 0, 0, 0);
	add_func    (0X1E4E2,0X1E4ED);
	set_func_flags(0X1E4E2,0x4400);
	set_frame_size(0X1E4E2, 0, 0, 0);
	add_func    (0X1E4ED,0X1E50C);
	set_func_flags(0X1E4ED,0x4400);
	set_frame_size(0X1E4ED, 0, 0, 0);
	add_func    (0X1E522,0X1E5D1);
	set_func_flags(0X1E522,0x4400);
	set_frame_size(0X1E522, 0, 0, 0);
	add_func    (0X1E5D1,0X1E5DA);
	set_func_flags(0X1E5D1,0x4400);
	set_frame_size(0X1E5D1, 0, 0, 0);
	add_func    (0X1E5DA,0X1E5EC);
	set_func_flags(0X1E5DA,0x4400);
	set_frame_size(0X1E5DA, 0, 0, 0);
	add_func    (0X1E5EC,0X1E5F6);
	set_func_flags(0X1E5EC,0x4400);
	set_frame_size(0X1E5EC, 0, 0, 0);
	add_func    (0X1E5F6,0X1E63C);
	set_func_flags(0X1E5F6,0x4410);
	set_frame_size(0X1E5F6, 0X20, 14, 0);
	add_func    (0X1E654,0X1E6C6);
	set_func_flags(0X1E654,0x4400);
	set_frame_size(0X1E654, 0, 0, 0);
	add_func    (0X1E6C6,0X1E6ED);
	set_func_flags(0X1E6C6,0x4400);
	set_frame_size(0X1E6C6, 0, 0, 0);
	add_func    (0X1E71F,0X1E7A6);
	set_func_flags(0X1E71F,0x4400);
	set_frame_size(0X1E71F, 0, 0, 0);
	add_func    (0X1E7BB,0X1E7DF);
	set_func_flags(0X1E7BB,0x4400);
	set_frame_size(0X1E7BB, 0, 0, 0);
	add_func    (0X1E824,0X1E83D);
	set_func_flags(0X1E824,0x4412);
	set_frame_size(0X1E824, 0X2, 2, 0);
	add_func    (0X1E83E,0X1EA04);
	set_func_flags(0X1E83E,0x4412);
	set_frame_size(0X1E83E, 0X2A, 2, 0);
	add_func    (0X1EA04,0X1EA7C);
	set_func_flags(0X1EA04,0x4412);
	set_frame_size(0X1EA04, 0XC, 2, 0);
	add_func    (0X1EA7C,0X1EAC4);
	set_func_flags(0X1EA7C,0x4412);
	set_frame_size(0X1EA7C, 0X8, 2, 0);
	add_func    (0X1EAC4,0X1EB23);
	set_func_flags(0X1EAC4,0x4412);
	set_frame_size(0X1EAC4, 0X10, 2, 0);
	add_func    (0X1EB24,0X1EC03);
	set_func_flags(0X1EB24,0x4412);
	set_frame_size(0X1EB24, 0X104, 2, 0);
	add_func    (0X1EC04,0X1EDC3);
	set_func_flags(0X1EC04,0x4412);
	set_frame_size(0X1EC04, 0X10E, 2, 0);
	add_func    (0X1EE74,0X1F0D9);
	set_func_flags(0X1EE74,0x4412);
	set_frame_size(0X1EE74, 0X26, 2, 0);
	add_func    (0X1F0DA,0X1F10B);
	set_func_flags(0X1F0DA,0x4412);
	set_frame_size(0X1F0DA, 0X4, 2, 0);
	add_func    (0X1F10C,0X1F184);
	set_func_flags(0X1F10C,0x4412);
	set_frame_size(0X1F10C, 0X4, 2, 0);
	add_func    (0X1F184,0X1F1B4);
	set_func_flags(0X1F184,0x4412);
	set_frame_size(0X1F184, 0X2, 2, 0);
	add_func    (0X1F1B4,0X1F23B);
	set_func_flags(0X1F1B4,0x4412);
	set_frame_size(0X1F1B4, 0X8, 2, 0);
	add_func    (0X1F23C,0X1F2D4);
	set_func_flags(0X1F23C,0x4412);
	set_frame_size(0X1F23C, 0X4, 2, 0);
	add_func    (0X1F2D4,0X1F5A4);
	set_func_flags(0X1F2D4,0x4412);
	set_frame_size(0X1F2D4, 0X44, 2, 0);
	add_func    (0X1F8B4,0X1F989);
	set_func_flags(0X1F8B4,0x4402);
	set_frame_size(0X1F8B4, 0, 0, 0);
	add_func    (0X1F989,0X1FA31);
	set_func_flags(0X1F989,0x4412);
	set_frame_size(0X1F989, 0X6, 2, 0);
	add_func    (0X1FCA4,0X1FCA9);
	set_func_flags(0X1FCA4,0x4402);
	set_frame_size(0X1FCA4, 0, 0, 0X8);
	add_func    (0X1FCDC,0X1FCFD);
	set_func_flags(0X1FCDC,0x4410);
	set_frame_size(0X1FCDC, 0, 2, 0X4);
	add_func    (0X1FCFD,0X1FD19);
	set_func_flags(0X1FCFD,0x4410);
	set_frame_size(0X1FCFD, 0, 2, 0X6);
	add_func    (0X1FD19,0X1FD1D);
	set_func_flags(0X1FD19,0x400);
	add_func    (0X1FD1D,0X1FD40);
	set_func_flags(0X1FD1D,0x4410);
	set_frame_size(0X1FD1D, 0, 2, 0X8);
	add_func    (0X1FD40,0X1FD6C);
	set_func_flags(0X1FD40,0x4410);
	set_frame_size(0X1FD40, 0X4, 2, 0X6);
	add_func    (0X1FD6C,0X1FD81);
	set_func_flags(0X1FD6C,0x4410);
	set_frame_size(0X1FD6C, 0X4, 2, 0X2);
	add_func    (0X1FD81,0X1FD93);
	set_func_flags(0X1FD81,0x4410);
	set_frame_size(0X1FD81, 0X4, 2, 0X2);
	add_func    (0X1FD94,0X1FDEE);
	set_func_flags(0X1FD94,0x4410);
	set_frame_size(0X1FD94, 0, 2, 0XA);
	add_func    (0X1FDEE,0X1FE14);
	set_func_flags(0X1FDEE,0x4410);
	set_frame_size(0X1FDEE, 0, 2, 0X6);
	add_func    (0X1FE14,0X1FE3B);
	set_func_flags(0X1FE14,0x4410);
	set_frame_size(0X1FE14, 0X4, 2, 0X2);
	add_func    (0X1FE3B,0X1FE4D);
	set_func_flags(0X1FE3B,0x4410);
	set_frame_size(0X1FE3B, 0X4, 2, 0X4);
	add_func    (0X1FE4D,0X1FE9B);
	set_func_flags(0X1FE4D,0x4410);
	set_frame_size(0X1FE4D, 0X4, 2, 0X6);
	add_func    (0X1FE9C,0X1FEBE);
	set_func_flags(0X1FE9C,0x4410);
	set_frame_size(0X1FE9C, 0, 2, 0X4);
	add_func    (0X1FEBE,0X1FED9);
	set_func_flags(0X1FEBE,0x4410);
	set_frame_size(0X1FEBE, 0, 2, 0X6);
	add_func    (0X1FED9,0X1FEF0);
	set_func_flags(0X1FED9,0x4410);
	set_frame_size(0X1FED9, 0, 2, 0X4);
	add_func    (0X1FEF0,0X1FF0A);
	set_func_flags(0X1FEF0,0x4410);
	set_frame_size(0X1FEF0, 0, 2, 0X8);
	add_func    (0X1FF0A,0X1FF25);
	set_func_flags(0X1FF0A,0x4410);
	set_frame_size(0X1FF0A, 0, 2, 0X4);
	add_func    (0X1FF66,0X1FF8C);
	set_func_flags(0X1FF66,0x4410);
	set_frame_size(0X1FF66, 0X2, 2, 0X4);
	add_func    (0X1FFAE,0X1FFC9);
	set_func_flags(0X1FFAE,0x4402);
	set_frame_size(0X1FFAE, 0, 0, 0);
	add_func    (0X1FFCA,0X201BE);
	set_func_flags(0X1FFCA,0x4410);
	set_frame_size(0X1FFCA, 0X12, 2, 0XA);
	add_func    (0X201BE,0X202C8);
	set_func_flags(0X201BE,0x410);
	set_frame_size(0X201BE, 0XE, 2, 0);
	add_func    (0X202C8,0X20332);
	set_func_flags(0X202C8,0x4400);
	set_frame_size(0X202C8, 0, 0, 0X8);
	add_func    (0X20332,0X2033E);
	set_func_flags(0X20332,0x410);
	set_frame_size(0X20332, 0XC, 2, 0);
	add_func    (0X2033E,0X2034C);
	set_func_flags(0X2033E,0x400);
	set_frame_size(0X2033E, 0X2, 0, 0);
	add_func    (0X2044E,0X206B8);
	set_func_flags(0X2044E,0x4410);
	set_frame_size(0X2044E, 0X110, 2, 0X4);
	add_func    (0X206EA,0X20723);
	set_func_flags(0X206EA,0x4410);
	set_frame_size(0X206EA, 0XC, 2, 0X2);
	add_func    (0X20724,0X207C3);
	set_func_flags(0X20724,0x4410);
	set_frame_size(0X20724, 0X8, 2, 0X4);
	add_func    (0X207C4,0X208A6);
	set_func_flags(0X207C4,0x4410);
	set_frame_size(0X207C4, 0X8, 2, 0XA);
	add_func    (0X2091A,0X20975);
	set_func_flags(0X2091A,0x4410);
	set_frame_size(0X2091A, 0XA, 2, 0X4);
	add_func    (0X20976,0X20A00);
	set_func_flags(0X20976,0x4410);
	set_frame_size(0X20976, 0X6, 2, 0X10);
	add_func    (0X20A00,0X20AE4);
	set_func_flags(0X20A00,0x4410);
	set_frame_size(0X20A00, 0X10, 2, 0X8);
	add_func    (0X20AE4,0X2117A);
	set_func_flags(0X20AE4,0x4410);
	set_frame_size(0X20AE4, 0X3C, 2, 0XE);
	add_func    (0X2120A,0X212E2);
	set_func_flags(0X2120A,0x4410);
	set_frame_size(0X2120A, 0X12, 2, 0X14);
	add_func    (0X212E2,0X213C5);
	set_func_flags(0X212E2,0x4410);
	set_frame_size(0X212E2, 0X10, 2, 0X10);
	add_func    (0X213C6,0X214DA);
	set_func_flags(0X213C6,0x4410);
	set_frame_size(0X213C6, 0X6, 2, 0X1C);
	add_func    (0X215F4,0X216E3);
	set_func_flags(0X215F4,0x4410);
	set_frame_size(0X215F4, 0X16, 2, 0XE);
	add_func    (0X216E4,0X21794);
	set_func_flags(0X216E4,0x4410);
	set_frame_size(0X216E4, 0XC, 2, 0XE);
	add_func    (0X218BA,0X218DA);
	set_func_flags(0X218BA,0x400);
	add_func    (0X219DA,0X21A30);
	set_func_flags(0X219DA,0x4410);
	set_frame_size(0X219DA, 0X8, 2, 0X2);
	add_func    (0X21A30,0X21A9C);
	set_func_flags(0X21A30,0x4410);
	set_frame_size(0X21A30, 0X8, 2, 0X6);
	add_func    (0X21A9C,0X21BC2);
	set_func_flags(0X21A9C,0x4410);
	set_frame_size(0X21A9C, 0X7C, 2, 0);
	add_func    (0X21BDA,0X21C0B);
	set_func_flags(0X21BDA,0x4400);
	set_frame_size(0X21BDA, 0, 0, 0);
	add_func    (0X21C0C,0X21C6E);
	set_func_flags(0X21C0C,0x4410);
	set_frame_size(0X21C0C, 0XC, 2, 0);
	add_func    (0X21C6E,0X21D43);
	set_func_flags(0X21C6E,0x4410);
	set_frame_size(0X21C6E, 0X6, 2, 0);
	add_func    (0X21D44,0X21D6A);
	set_func_flags(0X21D44,0x4410);
	set_frame_size(0X21D44, 0X6, 2, 0X4);
	add_func    (0X21D6A,0X21E1F);
	set_func_flags(0X21D6A,0x4410);
	set_frame_size(0X21D6A, 0X6, 2, 0X4);
	add_func    (0X21E20,0X21E3B);
	set_func_flags(0X21E20,0x4410);
	set_frame_size(0X21E20, 0X2, 2, 0X4);
	add_func    (0X21E3C,0X21E6F);
	set_func_flags(0X21E3C,0x4400);
	set_frame_size(0X21E3C, 0X2, 0, 0);
	add_func    (0X21E70,0X2203C);
	set_func_flags(0X21E70,0x4410);
	set_frame_size(0X21E70, 0X116, 2, 0X4);
	add_func    (0X2203C,0X2207E);
	set_func_flags(0X2203C,0x4410);
	set_frame_size(0X2203C, 0X4, 2, 0X4);
	add_func    (0X2207E,0X2216C);
	set_func_flags(0X2207E,0x4410);
	set_frame_size(0X2207E, 0XA, 2, 0X8);
	add_func    (0X2216C,0X22244);
	set_func_flags(0X2216C,0x4410);
	set_frame_size(0X2216C, 0XA, 2, 0X6);
	add_func    (0X22244,0X22271);
	set_func_flags(0X22244,0x4410);
	set_frame_size(0X22244, 0, 2, 0X8);
	add_func    (0X22272,0X22295);
	set_func_flags(0X22272,0x4410);
	set_frame_size(0X22272, 0, 2, 0X4);
	add_func    (0X22296,0X2230C);
	set_func_flags(0X22296,0x4410);
	set_frame_size(0X22296, 0X4, 2, 0X4);
	add_func    (0X2259A,0X22656);
	set_func_flags(0X2259A,0x4410);
	set_frame_size(0X2259A, 0X14, 2, 0X12);
	add_func    (0X22656,0X22816);
	set_func_flags(0X22656,0x4410);
	set_frame_size(0X22656, 0X18, 2, 0XC);
	add_func    (0X22816,0X22859);
	set_func_flags(0X22816,0x4410);
	set_frame_size(0X22816, 0X4, 2, 0XC);
	add_func    (0X2285A,0X228A8);
	set_func_flags(0X2285A,0x4410);
	set_frame_size(0X2285A, 0X8, 2, 0XA);
	add_func    (0X228A8,0X22B78);
	set_func_flags(0X228A8,0x4410);
	set_frame_size(0X228A8, 0X20, 2, 0XC);
	add_func    (0X22B78,0X22BFF);
	set_func_flags(0X22B78,0x4410);
	set_frame_size(0X22B78, 0X8, 2, 0X8);
	add_func    (0X22C00,0X22CCA);
	set_func_flags(0X22C00,0x4410);
	set_frame_size(0X22C00, 0XC, 2, 0X10);
	add_func    (0X22CCA,0X22D70);
	set_func_flags(0X22CCA,0x4410);
	set_frame_size(0X22CCA, 0X12, 2, 0XE);
	add_func    (0X22D70,0X22EE1);
	set_func_flags(0X22D70,0x4410);
	set_frame_size(0X22D70, 0X16, 2, 0X8);
	add_func    (0X22EE2,0X22F26);
	set_func_flags(0X22EE2,0x4410);
	set_frame_size(0X22EE2, 0X6, 2, 0X4);
	add_func    (0X22F26,0X22F8B);
	set_func_flags(0X22F26,0x4410);
	set_frame_size(0X22F26, 0X8, 2, 0X4);
	add_func    (0X22F8C,0X2304F);
	set_func_flags(0X22F8C,0x4410);
	set_frame_size(0X22F8C, 0XC, 2, 0X4);
	add_func    (0X23050,0X2309E);
	set_func_flags(0X23050,0x4410);
	set_frame_size(0X23050, 0X2, 2, 0X4);
	add_func    (0X2309E,0X230E5);
	set_func_flags(0X2309E,0x4410);
	set_frame_size(0X2309E, 0X2, 2, 0X4);
	add_func    (0X230E6,0X23193);
	set_func_flags(0X230E6,0x4410);
	set_frame_size(0X230E6, 0X14, 2, 0X4);
	add_func    (0X23194,0X23296);
	set_func_flags(0X23194,0x4410);
	set_frame_size(0X23194, 0XC, 2, 0X6);
	add_func    (0X23296,0X232DA);
	set_func_flags(0X23296,0x4410);
	set_frame_size(0X23296, 0X8, 2, 0X8);
	add_func    (0X232DA,0X2335D);
	set_func_flags(0X232DA,0x4410);
	set_frame_size(0X232DA, 0XC, 2, 0XC);
	add_func    (0X2335E,0X234B9);
	set_func_flags(0X2335E,0x4410);
	set_frame_size(0X2335E, 0X1C, 2, 0X4);
	add_func    (0X234BA,0X23610);
	set_func_flags(0X234BA,0x4410);
	set_frame_size(0X234BA, 0XE, 2, 0X6);
	add_func    (0X23610,0X23702);
	set_func_flags(0X23610,0x4410);
	set_frame_size(0X23610, 0X14, 2, 0X8);
	add_func    (0X23702,0X237D1);
	set_func_flags(0X23702,0x4410);
	set_frame_size(0X23702, 0X12, 2, 0XC);
	add_func    (0X237D2,0X2384C);
	set_func_flags(0X237D2,0x4410);
	set_frame_size(0X237D2, 0X10, 2, 0X4);
	add_func    (0X2384C,0X23993);
	set_func_flags(0X2384C,0x4410);
	set_frame_size(0X2384C, 0XC, 2, 0XA);
	add_func    (0X23994,0X23A96);
	set_func_flags(0X23994,0x4410);
	set_frame_size(0X23994, 0X12, 2, 0X8);
	add_func    (0X23A96,0X23AEE);
	set_func_flags(0X23A96,0x4410);
	set_frame_size(0X23A96, 0XA, 2, 0X4);
	add_func    (0X23AEE,0X23B4E);
	set_func_flags(0X23AEE,0x4410);
	set_frame_size(0X23AEE, 0X8, 2, 0X4);
	add_func    (0X23B4E,0X23B75);
	set_func_flags(0X23B4E,0x4410);
	set_frame_size(0X23B4E, 0X2, 2, 0X4);
	add_func    (0X23B76,0X23C4F);
	set_func_flags(0X23B76,0x4410);
	set_frame_size(0X23B76, 0X30, 2, 0X6);
	add_func    (0X23C50,0X23CA4);
	set_func_flags(0X23C50,0x4410);
	set_frame_size(0X23C50, 0X6, 2, 0X6);
	add_func    (0X23CA4,0X23D13);
	set_func_flags(0X23CA4,0x4410);
	set_frame_size(0X23CA4, 0X8, 2, 0XA);
	add_func    (0X23D14,0X23D9A);
	set_func_flags(0X23D14,0x4410);
	set_frame_size(0X23D14, 0XA, 2, 0X10);
	add_func    (0X23D9A,0X23DF5);
	set_func_flags(0X23D9A,0x4410);
	set_frame_size(0X23D9A, 0X8, 2, 0X6);
	add_func    (0X23DF6,0X24059);
	set_func_flags(0X23DF6,0x4410);
	set_frame_size(0X23DF6, 0X1A, 2, 0X10);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
	Functions_1();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0,"es",0XFFFFFFFF,3);
	split_sreg_range(0XF3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X271,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X27C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X283,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X28A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X291,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X298,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X29E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6D7,"es",0X50,3);
	split_sreg_range(0X730,"es",0,3);
	split_sreg_range(0X78F,"es",0,3);
	split_sreg_range(0X7B5,"es",0XFFFFFFFF,3);
	split_sreg_range(0X7C2,"es",0XFFFFFFFF,3);
	split_sreg_range(0X80B,"es",0X1218,3);
	split_sreg_range(0X8A2,"es",0X1218,3);
	split_sreg_range(0X8B5,"es",0,3);
	split_sreg_range(0X915,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X918,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X92E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X95E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X99C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA1B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA27,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAF0,"es",0,3);
	split_sreg_range(0XB19,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB23,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB33,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB3E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB41,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB4B,"es",0XFFFFFFFF,3);
	split_sreg_range(0XB73,"es",0X1218,3);
	split_sreg_range(0XB83,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB9C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBED,"es",0XFFFFFFFF,3);
	split_sreg_range(0XBF8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDFE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE06,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1111,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1161,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1296,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1299,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13DE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13E1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13EC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1478,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X148D,"es",0X1218,3);
	split_sreg_range(0X1494,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X3440,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4790,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X47D6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X488A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X48CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X48E2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X499B,"es",0XB800,3);
	split_sreg_range(0X49CD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X49D4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4A1D,"es",0X479,3);
	split_sreg_range(0X4A82,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4AB2,"es",0,3);
	split_sreg_range(0X4B08,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B19,"es",0,3);
	split_sreg_range(0X4B4E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4D79,"es",0,3);
	split_sreg_range(0X4D95,"es",0X70,3);
	split_sreg_range(0X4DD5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4DE2,"es",0,3);
	split_sreg_range(0X4E02,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4E0C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4ECA,"es",0X70,3);
	split_sreg_range(0X4ED7,"es",0XFFFF,3);
	split_sreg_range(0X4EE3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X501B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5180,"es",0X70,3);
	split_sreg_range(0X5228,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5480,"es",0,3);
	split_sreg_range(0X548A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5493,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X54F1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X54F6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5581,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5833,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5839,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X584A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5850,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X58DA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X58EE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5909,"es",0,3);
	split_sreg_range(0X5911,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5926,"es",0,3);
	split_sreg_range(0X592F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X593C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5944,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X59ED,"es",0,3);
	split_sreg_range(0X59F5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5A00,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5AAA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5AB8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5C9F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5CA7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5CB0,"es",0X479,3);
	split_sreg_range(0X5CC3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E2E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E47,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F0D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5FFE,"es",0X70,3);
	split_sreg_range(0X616B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X616F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X618B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6191,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X629A,"es",0,3);
	split_sreg_range(0X629F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X62B0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X62DD,"es",0,3);
	split_sreg_range(0X62E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X62EE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X631E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X634C,"es",0,3);
	split_sreg_range(0X6351,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6364,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X637B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X637E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X638C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X639D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X63E4,"es",0,3);
	split_sreg_range(0X63EF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6407,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6432,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6479,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X648E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X64D9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X64E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6598,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X65A6,"es",0X479,3);
	split_sreg_range(0X65B8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X65BB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6845,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6871,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X687B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X68E2,"es",0X479,3);
	split_sreg_range(0X68F7,"es",0X70,3);
	split_sreg_range(0X6920,"es",0X479,3);
	split_sreg_range(0X6930,"es",0X479,3);
	split_sreg_range(0X696D,"es",0X479,3);
	split_sreg_range(0X6A6B,"es",0X70,3);
	split_sreg_range(0X6A74,"es",0X479,3);
	split_sreg_range(0X6A9D,"es",0X479,3);
	split_sreg_range(0X6AD1,"es",0XFFFF,3);
	split_sreg_range(0X6C72,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6C7F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6C88,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6CDA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6CE4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6DA4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6DAE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E12,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E19,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E26,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E46,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E8A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EA1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EAB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EB8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6FC2,"es",0,3);
	split_sreg_range(0X6FDC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7196,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X71A3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X71AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X71EC,"es",0X479,3);
	split_sreg_range(0X71FA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X728E,"es",0X479,3);
	split_sreg_range(0X729D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X73CC,"es",0,3);
	split_sreg_range(0X73EB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7418,"es",0,3);
	split_sreg_range(0X7431,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X749B,"es",0X479,3);
	split_sreg_range(0X74AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X79AB,"es",0X479,3);
	split_sreg_range(0X79B7,"es",0X479,3);
	split_sreg_range(0X79F1,"es",0X479,3);
	split_sreg_range(0X7A12,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X807A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8132,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X827B,"es",0,3);
	split_sreg_range(0X8398,"es",0X10,3);
	split_sreg_range(0X83AA,"es",0,3);
	split_sreg_range(0X83BE,"es",0X479,3);
	split_sreg_range(0X85F4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88CD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88E4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88FC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X89E0,"es",0X479,3);
	split_sreg_range(0X89F1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X89F7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X89FB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A16,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A21,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A29,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B1F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B33,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C88,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8CAB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8CC2,"es",0XFFFFFFFFFFFFFFFE,3);
	split_sreg_range(0X8CD4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8CE0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8DD2,"es",0X479,3);
	split_sreg_range(0X8DD5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E7F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FF4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X908A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X90A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X90CC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9267,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X928D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9298,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X92B7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9390,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9468,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X949A,"es",0,3);
	split_sreg_range(0X94BD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X94F3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X94F7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X955F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X95A9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X965A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9666,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9986,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X99A7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9A18,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9A39,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9AC9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C16,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C7D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9CA6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9DA3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9DD6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9DDB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9FC5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA074,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA197,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA19F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA1BA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA1E2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA29A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA2A2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA446,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA4B3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA55A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA570,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA58F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA59F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA64D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA652,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA657,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6BB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6D1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA783,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7FC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA809,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA818,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA826,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA89A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA91A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA94A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA98D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA9BE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA9E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAA1B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAA5F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAAA8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAAC4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB55,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XABA9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XABEE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XABFC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAC28,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAC35,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAC60,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAD2A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAD4D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XADA0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE91,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAED3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAEEA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAF0C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAF3F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAFBE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAFD5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB00C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB049,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB052,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB058,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB05F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB06E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB0AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB0FD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1DC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1EC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB20D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB221,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB23A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB276,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB28C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB354,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB386,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB39F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB3CD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB3ED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB42E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB455,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB465,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB4DA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5C0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5EC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB5F1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB623,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB628,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB62E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB653,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB674,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB6AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB6C9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB70F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB723,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB747,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB752,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB758,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB790,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB7A1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB7CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB835,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB83C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB9F6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBB0C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBB18,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBB6D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBB79,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBBDD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC07,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC0B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC27,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC4A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC89,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBCA4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBCF1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD0D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD8D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBDF3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE19,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE1E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE44,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBECE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF15,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF48,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBFA3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC070,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC0BC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC12B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC16D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC1DA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC2D6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC316,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC342,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC35C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC39D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC3F1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC4E6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC53F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC58D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC5A3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC5ED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC60A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC632,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC669,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC66F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC8D6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC8DB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC8F7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC8FE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC908,"es",0X479,3);
	split_sreg_range(0XC944,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC992,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC9BE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC9E1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC9F3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA04,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA66,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA6F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCAB7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCAD0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCAD4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCAF5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCBAF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC81,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCA0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCB5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCC9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCD2F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCD40,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCDDF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCE37,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCE5C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCEAB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCF29,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCF4E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCF67,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCFA5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD066,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD17A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD19D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD221,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD228,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD260,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD27D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD29B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD2CD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD2DA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD2F1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD306,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD311,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD347,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD39F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD3AB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD3CE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD3E8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD3F5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD51A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD51F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD5FC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD6FE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD734,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD762,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD7EC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD81F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD894,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD904,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDA18,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDA38,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDA9C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDB83,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDCA6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDCCD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDCF1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDD2E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDE94,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDEC3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDEF1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDF05,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE000,"es",0X70,3);
	split_sreg_range(0XE00D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE01A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE03D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE0FD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE126,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE13F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE1AF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE1FC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE271,"es",0,3);
	split_sreg_range(0XE2A8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE30A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE32D,"es",0,3);
	split_sreg_range(0XE348,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE362,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE377,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE3D1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE3D6,"es",0,3);
	split_sreg_range(0XE43E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE54B,"es",0,3);
	split_sreg_range(0XE551,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE573,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE5A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE6BC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE786,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE7A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE7C1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE81C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE821,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE82D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE853,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE858,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE865,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE931,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE979,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE9B9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE9BD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEC0A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEC68,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEC8E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XECF9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XED46,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XED88,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEDC4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEDF9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEE9D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEF1C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF027,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF03B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF05D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF0C3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF0E1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF1B4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF1BA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF1D0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF2FD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF364,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF38F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF5A8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF5C7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF5F0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF6C7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF6D2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF71B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF72C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF775,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF77F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF7A0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF7C5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF84B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF852,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF8D0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF9EF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFB97,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFBAB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFD40,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFDA5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFE83,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFF26,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFF2F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFF6B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1005F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X101E5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1021E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10225,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10288,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X102A3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X102CB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X102EE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10311,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1046F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X104E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1052A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10543,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1056A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X105BD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10601,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10618,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10620,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1062E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1068B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10997,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X109AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10A79,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10DC6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10DDA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10DE9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10E00,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10E41,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10E84,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10EB7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10EBD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F03,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F0A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F1A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F1F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10FEE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1102B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1102F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X110C7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X110CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11247,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1129D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X112A6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X113B5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11409,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11411,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11472,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1149C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11614,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X116D9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11728,"es",0X70,3);
	split_sreg_range(0X1172D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X117AF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X118EA,"es",0,3);
	split_sreg_range(0X11952,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11964,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11985,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A05,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A0E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A27,"es",0,3);
	split_sreg_range(0X11A68,"es",0X3B4,3);
	split_sreg_range(0X11A75,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A80,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11BAA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11BD7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11BE2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11C04,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11C64,"es",0,3);
	split_sreg_range(0X13060,"es",0XFFFFFFFFFFFFF142,3);
	split_sreg_range(0X1306A,"es",0XFFFFFFFFFFFFF142,3);
	split_sreg_range(0X130E7,"es",0,3);
	split_sreg_range(0X1310B,"es",0,3);
	split_sreg_range(0X13172,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X131D9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X131F6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13212,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1321A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X132D7,"es",0X1198,3);
	split_sreg_range(0X13321,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1333A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13468,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X134D4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13524,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1361B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13626,"es",0,3);
	split_sreg_range(0X136F3,"es",0X70,3);
	split_sreg_range(0X13710,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1371F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1372C,"es",0XFFFFFFFFFFFFFFFE,3);
	split_sreg_range(0X13780,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13785,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1379D,"es",0XFFFF,3);
	split_sreg_range(0X137E2,"es",0XFFFF,3);
	split_sreg_range(0X13802,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1386F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13880,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1389F,"es",0XFFFF,3);
	split_sreg_range(0X138AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X138B8,"es",0X70,3);
	split_sreg_range(0X138D2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X138FD,"es",0X11A8,3);
	split_sreg_range(0X139B9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13B09,"es",0X11A8,3);
	split_sreg_range(0X13B15,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13BEC,"es",0X11A8,3);
	split_sreg_range(0X13C22,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X144E9,"es",0X11A8,3);
	split_sreg_range(0X14533,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14547,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14555,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1456F,"es",0X40,3);
	split_sreg_range(0X1457E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14590,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1461F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14732,"es",0X40,3);
	split_sreg_range(0X1476B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14C25,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14D00,"es",0X20,3);
	split_sreg_range(0X14D6A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14DEC,"es",0X11A8,3);
	split_sreg_range(0X14DF6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14F34,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14F4F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14F7E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14FA0,"es",0X11A8,3);
	split_sreg_range(0X1547C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X154A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15559,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1559B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X155E8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1566F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X156BD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X157CA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X157DE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1584C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X158FF,"es",0XF000,3);
	split_sreg_range(0X15924,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15952,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15989,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15995,"es",0XFFFFFFFFFFFFFFFE,3);
	split_sreg_range(0X159A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X159B4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X159D2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X159DB,"es",0X11A8,3);
	split_sreg_range(0X15A3A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15A3F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15A51,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15A7B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15BAC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15C0C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15C42,"es",0,3);
	split_sreg_range(0X15C97,"es",0XF000,3);
	split_sreg_range(0X15C9E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15CD7,"es",0XF000,3);
	split_sreg_range(0X15CDE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D17,"es",0XF000,3);
	split_sreg_range(0X15D1E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D57,"es",0XF000,3);
	split_sreg_range(0X15D5E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D97,"es",0XF000,3);
	split_sreg_range(0X15D9E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15DD7,"es",0XF000,3);
	split_sreg_range(0X15DDE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E17,"es",0XF000,3);
	split_sreg_range(0X15E1E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E57,"es",0XF000,3);
	split_sreg_range(0X15E5E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E97,"es",0XF000,3);
	split_sreg_range(0X15E9E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15ED7,"es",0XF000,3);
	split_sreg_range(0X15EDE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X166DD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16727,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16785,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1685E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X168AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X168D1,"es",0X11A8,3);
	split_sreg_range(0X168FE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16943,"es",0X11A8,3);
	split_sreg_range(0X1696F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16B36,"es",0XF000,3);
	split_sreg_range(0X16B57,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16B64,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16BC5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16C01,"es",0,3);
	split_sreg_range(0X16C8F,"es",0X11A8,3);
	split_sreg_range(0X16DE0,"es",0X70,3);
	split_sreg_range(0X16DF4,"es",0,3);
	split_sreg_range(0X16E19,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16E23,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16E32,"es",0X11A8,3);
	split_sreg_range(0X16E4D,"es",0X11A8,3);
	split_sreg_range(0X16EBA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16EFE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16F23,"es",0X11A8,3);
	split_sreg_range(0X16FE3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1705D,"es",0X11A8,3);
	split_sreg_range(0X1708B,"es",0X11A8,3);
	split_sreg_range(0X17231,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17283,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X172D4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X172E7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17310,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17323,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17414,"es",0X11A8,3);
	split_sreg_range(0X17770,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X177D4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X177E7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17883,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1797F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X179B0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18058,"es",0X11A8,3);
	split_sreg_range(0X18072,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1807A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18482,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X188D1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1893F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18957,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X189C3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18D84,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18E8C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18E99,"es",0X11A8,3);
	split_sreg_range(0X18EB6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18F7B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18F9F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18FAE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19017,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1901B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19026,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1903D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X190B3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19109,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19119,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19138,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1915A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19166,"es",0,3);
	split_sreg_range(0X19185,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X191FF,"es",0X11A8,3);
	split_sreg_range(0X1920D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1926D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1928A,"es",0X11A8,3);
	split_sreg_range(0X192A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X192B5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19586,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X195DE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X195F0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X195F7,"es",0X11A8,3);
	split_sreg_range(0X19617,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19681,"es",0X11A8,3);
	split_sreg_range(0X196A9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X197EF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X197F2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19815,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19864,"es",0X70,3);
	split_sreg_range(0X19869,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19881,"es",0X70,3);
	split_sreg_range(0X19886,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X198A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X198A8,"es",0X70,3);
	split_sreg_range(0X198CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X198D3,"es",0X70,3);
	split_sreg_range(0X198EF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19901,"es",0X11A8,3);
	split_sreg_range(0X19913,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1992D,"es",0X11A8,3);
	split_sreg_range(0X19957,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1996A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19983,"es",0,3);
	split_sreg_range(0X199A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X199AD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X199BA,"es",0X11A8,3);
	split_sreg_range(0X199BF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X199F9,"es",0X11A8,3);
	split_sreg_range(0X19A00,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19A15,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19A82,"es",0X11A8,3);
	split_sreg_range(0X19A87,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19AA5,"es",0X11A8,3);
	split_sreg_range(0X19ABD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19ACE,"es",0X11A8,3);
	split_sreg_range(0X19AF0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19AFA,"es",0X11A8,3);
	split_sreg_range(0X19B06,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19BD4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19BFD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19C1D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19C30,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19C77,"es",0X11A8,3);
	split_sreg_range(0X19C7E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19C94,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19CA6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19CE2,"es",0X11A8,3);
	split_sreg_range(0X19CE7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19D21,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19D24,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19D86,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19DA4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19DE0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19DE4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19E2C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19E59,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19EA5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19EA9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19EB5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19ECF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19ED2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19F36,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19F5C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19F5F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19F73,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19F84,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19F96,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19F9E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19FC9,"es",0X11A8,3);
	split_sreg_range(0X19FD0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19FEF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A009,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A00C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A06B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A15B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A1A3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A1FB,"es",0X11A8,3);
	split_sreg_range(0X1A3EE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A41F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A439,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A470,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A48A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A4A6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A4AB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A4EB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A504,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A51E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A536,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A542,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A554,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A57F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A589,"es",0XFFFFFFFFFFFFFFFE,3);
	split_sreg_range(0X1A592,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A5A2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A5BF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A61D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A650,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A67D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A68E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A713,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A72D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A738,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A7F0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A800,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A838,"es",0X11A8,3);
	split_sreg_range(0X1A86E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A8F8,"es",0X11A8,3);
	split_sreg_range(0X1A973,"es",0X11A8,3);
	split_sreg_range(0X1A9AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A9B6,"es",0,3);
	split_sreg_range(0X1A9CC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AA49,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AA5E,"es",0X11A8,3);
	split_sreg_range(0X1AA83,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AAC6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AAED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1ABC0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1ABDD,"es",0XA000,3);
	split_sreg_range(0X1AC1E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AC81,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1ACBC,"es",0XA000,3);
	split_sreg_range(0X1ACED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AD06,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AF83,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AF8D,"es",0X11A8,3);
	split_sreg_range(0X1AFAD,"es",0X11A8,3);
	split_sreg_range(0X1AFD8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B04F,"es",0X11A8,3);
	split_sreg_range(0X1B134,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B473,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B487,"es",0X11A8,3);
	split_sreg_range(0X1B4E9,"es",0,3);
	split_sreg_range(0X1B506,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B598,"es",0X11A8,3);
	split_sreg_range(0X1B5C2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B629,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B694,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B6D6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B716,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E450,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E45B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E48C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E574,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E60E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E61A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E637,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E657,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E6C5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7B2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7B6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7E0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7FB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E818,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E820,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E84D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E8E5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E974,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E98B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E9C3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EAA0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EAFB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EB3F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EB53,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EB69,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EBD0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EBE1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EC2F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1ECDD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EEA8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EEB6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EEFC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EF32,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EF8A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EFF2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F04A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F06D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F07C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F083,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0A6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0B7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0C6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0E8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0FD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F128,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F139,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F149,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F162,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F1C3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F1D8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F1ED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F218,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F227,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F24D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F399,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F3B8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F660,"es",0,3);
	split_sreg_range(0X1F95D,"es",0XFFFF,3);
	split_sreg_range(0X1F985,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FA24,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FA71,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FDA0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FDF7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FE43,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FE62,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FE7C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FEFC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FF70,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FF82,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FFD3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2000E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2001F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20053,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20062,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2006B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2007D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20090,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2009C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X200ED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2012C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20134,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20140,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2014B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20157,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20160,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20187,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20196,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201C7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20202,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20213,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20247,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2027F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2029C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202F3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X202FF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2030E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20379,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20395,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203A2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203AB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203B2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203D7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203EC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X203FF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2042F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2045A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20495,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X204D8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20507,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2051A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2056E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20578,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20587,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20597,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X205F0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20657,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X206AA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X206C2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X206DD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20703,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20730,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20734,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20740,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20760,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2076E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2077B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20786,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2078D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20794,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2079B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X207B3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X207D0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20884,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X208EB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2093B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2098B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20995,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20998,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X209A6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X209B0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X209C1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X209CA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X209D3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X209E6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X209F2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X209F8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20A24,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20A4F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20A72,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20A83,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20A8E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20AFA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20B47,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20BA4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20C08,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20C2E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20C55,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20C72,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20CCB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20D01,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20D44,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20DBA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20DC5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20DD2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20DDD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20DF8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20E13,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20E38,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20E71,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20E7C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20E88,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20E8F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20E96,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20EA3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20EC6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20ED3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20EE3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20EFD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20F06,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20F0F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20F39,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20F8A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2100A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X210D2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X210E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X210F0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X210FB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21102,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21109,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21112,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21120,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2112B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21169,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21216,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2121D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2123E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X212A2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X212A9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X212EB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21324,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21333,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21379,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21394,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2139B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X213AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X213DC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X213E3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X213EA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21402,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21423,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21438,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21449,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21457,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21474,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21479,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21481,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X214A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X214BD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X214C4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2150B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21520,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2157C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2159D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X215AD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X215C6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X215E5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21616,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2161D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2162A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X216A0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X216A7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X216F0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X216F8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21724,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2172B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21734,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2173D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21769,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21780,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2180B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21868,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X218AC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21906,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21920,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21935,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X219AE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X219C8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21B78,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21B89,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21B9A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21BED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21C25,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21C8D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21CAC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21CCA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21CFF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21D08,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21D0C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21D11,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21D1D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21D29,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21D58,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21D75,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21DA6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21DDD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21DE5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21DEE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21E04,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21E10,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21E2A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21E52,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21E79,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21EB1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21EF0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F2F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F42,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F6E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F81,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21FAD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21FE2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21FEC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21FF7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21FFE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22013,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22046,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22091,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X220A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X220E5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22122,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2217F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22192,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X221CD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22207,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22224,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2231B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22323,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22351,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22359,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22364,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22388,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22395,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X223A0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X223B5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X223C0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X223D3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X223DE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X223F3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22400,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2241D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22424,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2242B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22432,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22439,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22443,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22454,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2246E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22486,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X224A1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X224AE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X224B9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X224CB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X224D6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X224E7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X224F2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22504,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2250F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22516,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22523,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2252D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22545,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22555,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22560,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22568,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22572,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22589,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22671,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22694,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X226CB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2272E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X227C6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X227ED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X227F7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22809,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22836,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22839,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22876,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22887,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22895,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2289D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X228B4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2296E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2299C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X229BF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X229CE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22A16,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22A46,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22A51,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22A59,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22A7A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22A8C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22AA7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22AD4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22AED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22AF4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B04,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B29,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B31,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B49,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B4D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B55,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B61,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B6C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22B9A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22BA2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22BAD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22BC0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22BD5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22BE9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22C0C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22C2E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22C82,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22CB6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22CC0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22CFC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22D09,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22D32,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22D7F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22DA2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22DD1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22DDC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22DEF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22E12,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22E32,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22E5F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22ED1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22EED,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22F17,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22F34,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22F4F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22F6F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22F7A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22F98,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X22FF5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23014,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2301F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23032,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2303D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2305A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23064,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2307B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X230A8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X230B9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X230C4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X230D7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X230F2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23100,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23122,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2316F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23173,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2317B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X231A5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X231BA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X231F9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2320B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2321D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23246,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23277,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23289,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X232A2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X232B9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X232C7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X232CF,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23304,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23308,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23313,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23335,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2333B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23343,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2334D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2336A,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2336F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2339B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X233A4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X233BD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X233D1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23434,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23478,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23486,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2348F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X234C6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23500,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23510,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23525,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2354E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23583,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23591,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X235A0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X235A6,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X235CC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X235D2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X235F5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23620,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23624,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2366C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2367B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23688,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23690,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X236AD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X236C9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X236DA,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X236E9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X236F5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23712,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23716,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23733,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23743,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23777,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X237A8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X237B0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X237B8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X237C2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X237DE,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X237F8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2380B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2381D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2382E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2383F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23858,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23869,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2388F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23911,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23914,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2391F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23925,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2392C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23957,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X239A0,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X239C7,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X239F4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23A01,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23A08,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23A15,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23A1C,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23A39,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23A6E,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23A86,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23AA1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23AC2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23AE3,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23AFC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23B17,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23B31,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23B3D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23B58,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23B82,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23BB2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23C07,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23C67,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23CB9,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23CD8,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23DAC,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23DD5,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23E05,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23E61,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23EA2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23F3D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23F84,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23F8D,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23FB1,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23FBD,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23FC4,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23FCB,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23FD2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X23FE2,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X24001,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2401B,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X24029,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2403F,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43896,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X6B3,"ss",0,3);
	split_sreg_range(0X3440,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4790,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4A12,"ss",0X479,3);
	split_sreg_range(0X4A90,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X84B0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X85DA,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X89A0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A1B,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A9E,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD890,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDA71,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDA81,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDB7F,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE139,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF7F4,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11771,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X119DC,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A80,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11BDE,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11BF5,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13062,"ss",0XFFFFFFFFFFFFF142,3);
	split_sreg_range(0X15A74,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E450,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7E0,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43896,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"ds",0XFFFFFFFF,3);
	split_sreg_range(0X2C2,"ds",0,3);
	split_sreg_range(0X2D4,"ds",0X70,3);
	split_sreg_range(0X34E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X3E2,"ds",0,3);
	split_sreg_range(0X3F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4EB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4FC,"ds",0,3);
	split_sreg_range(0X6C5,"ds",0X1218,3);
	split_sreg_range(0X6CE,"ds",0,3);
	split_sreg_range(0X852,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X882,"ds",0X1218,3);
	split_sreg_range(0X8AA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B3,"ds",0,3);
	split_sreg_range(0X901,"ds",0X40,3);
	split_sreg_range(0X906,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X96F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9AB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB91,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDA6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE05,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1112,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X119C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1294,"ds",0,3);
	split_sreg_range(0X12D7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1427,"ds",0,3);
	split_sreg_range(0X1430,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1479,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14D1,"ds",0,3);
	split_sreg_range(0X14F7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X3440,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X41B5,"ds",0X344,3);
	split_sreg_range(0X41B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4790,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X486F,"ds",0X70,3);
	split_sreg_range(0X48D6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X48DE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X48E3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4958,"ds",0,3);
	split_sreg_range(0X4999,"ds",0XB800,3);
	split_sreg_range(0X49CE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X49D5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X49F4,"ds",0X70,3);
	split_sreg_range(0X49FB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4A83,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4AB7,"ds",0X70,3);
	split_sreg_range(0X4B09,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B1E,"ds",0X70,3);
	split_sreg_range(0X4B4F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4B57,"ds",0,3);
	split_sreg_range(0X4D73,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4DA8,"ds",0,3);
	split_sreg_range(0X4DD6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4DDD,"ds",0X70,3);
	split_sreg_range(0X4E04,"ds",0X7504,3);
	split_sreg_range(0X4E0D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4E2A,"ds",0X479,3);
	split_sreg_range(0X4E53,"ds",0X70,3);
	split_sreg_range(0X4E57,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4E6B,"ds",0,3);
	split_sreg_range(0X4EAC,"ds",0XB800,3);
	split_sreg_range(0X4EBB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4EEC,"ds",0X479,3);
	split_sreg_range(0X4F29,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5149,"ds",0X70,3);
	split_sreg_range(0X5168,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X517B,"ds",0X479,3);
	split_sreg_range(0X5229,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5231,"ds",0X479,3);
	split_sreg_range(0X526F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X55EA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5659,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5666,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X567A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X57D0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5830,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5A87,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5A8F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5ADA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5AEC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5D6D,"ds",0X479,3);
	split_sreg_range(0X5D73,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5D85,"ds",0X479,3);
	split_sreg_range(0X5D88,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5E9F,"ds",0X70,3);
	split_sreg_range(0X5EAA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5EAD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5ED8,"ds",0X70,3);
	split_sreg_range(0X5EDF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F0C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F44,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F47,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F69,"ds",0X70,3);
	split_sreg_range(0X5F6F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X5F8E,"ds",0X70,3);
	split_sreg_range(0X5FA1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6024,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6027,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X603F,"ds",0X70,3);
	split_sreg_range(0X607F,"ds",0X70,3);
	split_sreg_range(0X60F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X60F5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6101,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X61F3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X61FB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X631D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X63C3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X63E0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X63F0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X640B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X643E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6452,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X647E,"ds",0X70,3);
	split_sreg_range(0X6482,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6485,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6490,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6495,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X64A9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6566,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6569,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X657D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6580,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X65C2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X65C5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6602,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6605,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6825,"ds",0X70,3);
	split_sreg_range(0X6847,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X685F,"ds",0X70,3);
	split_sreg_range(0X6868,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6876,"ds",0X70,3);
	split_sreg_range(0X687A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6881,"ds",0X70,3);
	split_sreg_range(0X6885,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X688A,"ds",0X479,3);
	split_sreg_range(0X68B1,"ds",0X70,3);
	split_sreg_range(0X692A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6936,"ds",0X479,3);
	split_sreg_range(0X6950,"ds",0X479,3);
	split_sreg_range(0X696E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X697D,"ds",0X70,3);
	split_sreg_range(0X6A58,"ds",0X70,3);
	split_sreg_range(0X6A63,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6B2B,"ds",0X479,3);
	split_sreg_range(0X6B81,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6B90,"ds",0X479,3);
	split_sreg_range(0X6BE3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6CED,"ds",0X70,3);
	split_sreg_range(0X6D0D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6DBE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6DC2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E27,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E2D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E8B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6E95,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EC3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EC7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6EF9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6F1C,"ds",0X70,3);
	split_sreg_range(0X6F25,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6F50,"ds",0X70,3);
	split_sreg_range(0X6F71,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X6FA2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70A3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70B4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70C1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70CC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X70F9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7149,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7155,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7237,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X729E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X72A9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X72B2,"ds",0X479,3);
	split_sreg_range(0X72BF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X72C8,"ds",0X479,3);
	split_sreg_range(0X72D5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7330,"ds",0X479,3);
	split_sreg_range(0X73B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X73CE,"ds",0,3);
	split_sreg_range(0X73EC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7401,"ds",0X70,3);
	split_sreg_range(0X740A,"ds",0X479,3);
	split_sreg_range(0X742B,"ds",0,3);
	split_sreg_range(0X7435,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X7476,"ds",0X479,3);
	split_sreg_range(0X79F3,"ds",0X479,3);
	split_sreg_range(0X7A13,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8298,"ds",0,3);
	split_sreg_range(0X82AF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X839A,"ds",0X10,3);
	split_sreg_range(0X83A8,"ds",0,3);
	split_sreg_range(0X846C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X84A3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X84B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8561,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8572,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X85CD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X85F3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8603,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8619,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X884B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8897,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88A0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88A5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88AC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88B1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88BC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X88DA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8903,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8907,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X892C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X893F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8955,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X896B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X898A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X89A7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A3B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A4C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A5C,"ds",0,3);
	split_sreg_range(0X8A6B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8A88,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8AA5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8AF6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8B8F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8BBD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8BC4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8BF8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C02,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C08,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8C40,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D00,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D02,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D0B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D2E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D55,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D8B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D90,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8D98,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8DE1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E18,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E1E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E47,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E5A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E5E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E6E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8E79,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8EB3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8EB7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F1B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F85,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F89,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F96,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8F9A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FBB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FCE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FD2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X8FF8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9054,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9057,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X90AF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9146,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9192,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9202,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9258,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X94B6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9508,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9550,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X95AE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9646,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9979,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X99AC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9A37,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9AA8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9B56,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9BFE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C07,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C10,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C2B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C2E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C33,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C3F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C93,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C99,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9C9F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9CA4,"ds",0,3);
	split_sreg_range(0X9CCD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9DA2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9DED,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9DF1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9E3C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9E3E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F43,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F79,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9F88,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X9FA4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA073,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA1B9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA239,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA23E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA245,"ds",0,3);
	split_sreg_range(0XA24C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA298,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA2A3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA2D7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA39F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA3E9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA43F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA486,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA57D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6C7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6D3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6E3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA6EE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA708,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA7FD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA872,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA890,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA895,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA946,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XA99B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAA3F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAA86,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAACC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAAD3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB36,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB3A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB44,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB53,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAB99,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XABBA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XABC0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAC18,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XACA3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XACD8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE1A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE1F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE22,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE2E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE33,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE4C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAE93,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAF08,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XAF16,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB008,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB0A8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB0B6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB160,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB16F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB177,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB1A2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB246,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB263,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB291,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB2F0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB301,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB327,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB484,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB544,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB560,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB70D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB721,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB7DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB7E3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB802,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB827,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB82B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB8D4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB8DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XB9E4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBB0B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBB91,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBBBD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBBD4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC24,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC43,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC74,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBC9A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD28,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD4A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD56,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD69,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBD8F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBDEB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBDFB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE06,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBE32,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBED2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBEDB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF64,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBF87,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XBFB3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC065,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC06E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC089,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC09C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC100,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC18B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC1AA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC1D2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC1EB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC1FE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC201,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC23B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC23E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC26B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC26F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC288,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC2A3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC2C2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC2C5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC2E3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC303,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC30C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC3B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC3E2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC3EA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC415,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC43B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC43E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC481,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC485,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC493,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC499,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC49D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC4C7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC4D7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC4E2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC4F1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC511,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC518,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC5C9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC606,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC612,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC62E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC63C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC6E5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XC6FA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCA2A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCAFF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCB16,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCB23,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCB4B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCB8F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC05,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC0F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC69,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC8B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCC8F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCA8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCAD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCC0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCE0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCCF5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCD1B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCD73,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCD7E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCDDD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCE0F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCE1F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCF02,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCF63,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XCFA9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD1CE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD1D9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD368,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD374,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD3B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD3C4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD402,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD411,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD41A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD41E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD48C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD493,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD4B3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD67B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD67D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD6F5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD6FC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD715,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD723,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD727,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD732,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD75B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD760,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD82A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD864,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD87D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD89A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD8B3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD8BF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD8D5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD8E3,"ds",0,3);
	split_sreg_range(0XD8EC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD8F2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD8F9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD906,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XD929,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDA47,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDA4C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDAD8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDADD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDAF4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDB2D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDB4E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDB7A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDB8B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDBA4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDBB2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDBC2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDC92,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDC9D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDCC6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDCDD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDCE4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDCF0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDDA9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDDE2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDE3E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDE5C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDE64,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDEAE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDED8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDEDF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDEE9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDF14,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDF90,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XDFDB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE031,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE039,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE07E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE083,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE095,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE09A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE0A2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE0A5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE0D9,"ds",0,3);
	split_sreg_range(0XE0EA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE0FA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE10E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE121,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE141,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE185,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE18A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE18E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE20C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE26D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE2B2,"ds",0,3);
	split_sreg_range(0XE2DE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE2F1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE2FB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE30B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE31C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE387,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE39B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE3C7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE410,"ds",0,3);
	split_sreg_range(0XE4AD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE565,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE58D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE594,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE5BD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE5E1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE6C6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE6E7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE741,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE7AB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE8DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE90F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE944,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE980,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE99C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE9AB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XE9BE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEA1E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEA3B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEB15,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEB55,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEB8A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEBF4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEC00,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEC4F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEC77,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XECB1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XECB8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XED19,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XED2A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XED8A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEDE5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEDF5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEE42,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEE74,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEE81,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEE9F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEEAA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEEC3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEEE3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEEEB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEF06,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XEF18,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF00B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF03D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF088,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF0C0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF0E3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF0ED,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF18A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF1BD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF1C5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF1EE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF256,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF2A2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF2BE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF2D2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF2E9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF320,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF387,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF39F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF3B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF4DE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF51D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF51F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF566,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF5B7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF5F1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF5FB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF650,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF65F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF7BA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF7C2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF849,"ds",0,3);
	split_sreg_range(0XF84A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF851,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF8B9,"ds",0X479,3);
	split_sreg_range(0XF9EE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFB92,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFC49,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFC4F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFD35,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFD3A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFD3F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFDC6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFE2C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFE47,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10179,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X101A4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X101B8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10471,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X104E5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10523,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10622,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10633,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10649,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10671,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10690,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X106B0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10B8C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10C2F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10C44,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10C54,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10C5B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10C77,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10C91,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10D32,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10D8C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10DB2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10DB9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10DFB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10E10,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10E14,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10E3D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10E8C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10EB6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10EBC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F10,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F30,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F4E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F52,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F97,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10F9F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10FCC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10FDB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X10FFC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1102A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11031,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1103F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1106C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X110AB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X110CC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1115C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11165,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1116C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11174,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11278,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X112A4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1130B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11356,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11410,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11416,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11437,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1149D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11624,"ds",0X479,3);
	split_sreg_range(0X116DA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11723,"ds",0X3B4,3);
	split_sreg_range(0X1173C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X117A6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X117F9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1181E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11868,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X118AF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X118D4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X118E8,"ds",0,3);
	split_sreg_range(0X1195A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11975,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X119B1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X119D3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A1A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A21,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A80,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11C59,"ds",0X70,3);
	split_sreg_range(0X11C7F,"ds",0X11A8,3);
	split_sreg_range(0X1303C,"ds",0X11A8,3);
	split_sreg_range(0X1307B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X130C3,"ds",0X70,3);
	split_sreg_range(0X130F8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13101,"ds",0X70,3);
	split_sreg_range(0X1312C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13143,"ds",0X11A8,3);
	split_sreg_range(0X13231,"ds",0X70,3);
	split_sreg_range(0X13235,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1326A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13278,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X132AF,"ds",0X11A8,3);
	split_sreg_range(0X132BD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X132BF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X132C2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X132CE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X132FF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13308,"ds",0X11A8,3);
	split_sreg_range(0X1348D,"ds",0X70,3);
	split_sreg_range(0X134B3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X134B9,"ds",0X1EB5,3);
	split_sreg_range(0X134C4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X135EB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X135F7,"ds",0X70,3);
	split_sreg_range(0X1360D,"ds",0X11A8,3);
	split_sreg_range(0X13615,"ds",0X11A8,3);
	split_sreg_range(0X13645,"ds",0XFFFFFFFF,3);
	split_sreg_range(0X1364B,"ds",0XFFFFFFFF,3);
	split_sreg_range(0X1367D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13685,"ds",0X11A8,3);
	split_sreg_range(0X136D3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X136DB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13798,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X137E6,"ds",0,3);
	split_sreg_range(0X137FC,"ds",0X70,3);
	split_sreg_range(0X13803,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1385C,"ds",0,3);
	split_sreg_range(0X13894,"ds",0X11A8,3);
	split_sreg_range(0X138FB,"ds",0X11A8,3);
	split_sreg_range(0X139BA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X139E8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X139F1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13A06,"ds",0X11A8,3);
	split_sreg_range(0X13A3F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13A68,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13A6C,"ds",0X11A8,3);
	split_sreg_range(0X13AAB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X13AAF,"ds",0X11A8,3);
	split_sreg_range(0X13AEC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14199,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1419F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X141AD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X141B3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14257,"ds",0,3);
	split_sreg_range(0X14276,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14290,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14296,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14416,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1441A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14487,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1449A,"ds",0X11A8,3);
	split_sreg_range(0X1449E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X144AE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X144B2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14544,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14591,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14620,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X146C1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X146C9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1471C,"ds",0X11A8,3);
	split_sreg_range(0X14720,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14C07,"ds",0X11A8,3);
	split_sreg_range(0X14C70,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14C94,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14CB4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14CC6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14D09,"ds",0X40,3);
	split_sreg_range(0X14D0E,"ds",0X7504,3);
	split_sreg_range(0X14D17,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14D1D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14F4E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14F7D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14FB4,"ds",0X11A8,3);
	split_sreg_range(0X154A3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15510,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15512,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1551B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15527,"ds",0X70,3);
	split_sreg_range(0X15534,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15589,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15594,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X155DE,"ds",0X11A8,3);
	split_sreg_range(0X155EB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X155F0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15636,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15642,"ds",0X70,3);
	split_sreg_range(0X15646,"ds",0X4E9,3);
	split_sreg_range(0X1564D,"ds",0X11A8,3);
	split_sreg_range(0X1568F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15692,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15699,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X156A2,"ds",0X11A8,3);
	split_sreg_range(0X156EE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X156FB,"ds",0X11A8,3);
	split_sreg_range(0X1576A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15777,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15795,"ds",0X11A8,3);
	split_sreg_range(0X1579D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X157AF,"ds",0X11A8,3);
	split_sreg_range(0X157DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X157E7,"ds",0X11A8,3);
	split_sreg_range(0X1586B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15890,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15895,"ds",0X11A8,3);
	split_sreg_range(0X159DC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15A52,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15A7A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15A92,"ds",0X11A8,3);
	split_sreg_range(0X15AA6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15ACA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15B0E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15B19,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15B5E,"ds",0X11A8,3);
	split_sreg_range(0X15B70,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15B9F,"ds",0X11A8,3);
	split_sreg_range(0X15BAF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15BDB,"ds",0X11A8,3);
	split_sreg_range(0X15C08,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15C77,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15CA1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15CB0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15CB7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15CE1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15CF0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15CF7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D21,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D30,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D37,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D61,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D70,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15D77,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15DA1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15DB0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15DB7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15DE1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15DF0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15DF7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E21,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E30,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E37,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E61,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E70,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15E77,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15EA1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15EB0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15EB7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15EE1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15EF0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15EF6,"ds",0X70,3);
	split_sreg_range(0X15F0E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X15F14,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1681E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16895,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16900,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16933,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1693A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16941,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16963,"ds",0X11A8,3);
	split_sreg_range(0X16A4F,"ds",0,3);
	split_sreg_range(0X16A59,"ds",0,3);
	split_sreg_range(0X16A68,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16A99,"ds",0,3);
	split_sreg_range(0X16AA3,"ds",0,3);
	split_sreg_range(0X16AC3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16B10,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16BBD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16BC7,"ds",0X11A8,3);
	split_sreg_range(0X16C1E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16C66,"ds",0X11A8,3);
	split_sreg_range(0X16C78,"ds",0X11A8,3);
	split_sreg_range(0X16C8D,"ds",0X11A8,3);
	split_sreg_range(0X16DD9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16DEA,"ds",0X11A8,3);
	split_sreg_range(0X16E0C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16E30,"ds",0X11A8,3);
	split_sreg_range(0X16E4B,"ds",0X11A8,3);
	split_sreg_range(0X16EFF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X16F21,"ds",0X11A8,3);
	split_sreg_range(0X170AE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X170B6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X170E4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X170EA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17113,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1711E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X172CD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X172E4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1730B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17320,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1743E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17444,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X174BF,"ds",0X40,3);
	split_sreg_range(0X174C8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17508,"ds",0X70,3);
	split_sreg_range(0X1750F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X177B4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X177B9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17899,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1789D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17AD8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X17AE2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18478,"ds",0,3);
	split_sreg_range(0X18487,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1849E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X184B7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X188BB,"ds",0X11A8,3);
	split_sreg_range(0X18955,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18984,"ds",0X11A8,3);
	split_sreg_range(0X189AB,"ds",0X11A8,3);
	split_sreg_range(0X18A29,"ds",0X11A8,3);
	split_sreg_range(0X18A35,"ds",0X11A8,3);
	split_sreg_range(0X18B07,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18C3C,"ds",0X70,3);
	split_sreg_range(0X18C51,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18D06,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18DC4,"ds",0X11A8,3);
	split_sreg_range(0X18DD1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18DED,"ds",0X11A8,3);
	split_sreg_range(0X18E7F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18E8E,"ds",0X11A8,3);
	split_sreg_range(0X18EA0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18EAC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18EB4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18EBE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18EEE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18EF8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18F0F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18F29,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18F2D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18F50,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18F55,"ds",0X11A8,3);
	split_sreg_range(0X18F59,"ds",0X11A8,3);
	split_sreg_range(0X18F72,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X18F7D,"ds",0X11A8,3);
	split_sreg_range(0X18FA7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19012,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X190AB,"ds",0X11A8,3);
	split_sreg_range(0X190C0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X190FA,"ds",0X11A8,3);
	split_sreg_range(0X19107,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X191A0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19204,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1920E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1927C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X192B7,"ds",0X11A8,3);
	split_sreg_range(0X19555,"ds",0X70,3);
	split_sreg_range(0X19587,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X195F5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19616,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19625,"ds",0X11A8,3);
	split_sreg_range(0X1963E,"ds",0X11A8,3);
	split_sreg_range(0X19649,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1966C,"ds",0X11A8,3);
	split_sreg_range(0X19683,"ds",0X11A8,3);
	split_sreg_range(0X196A8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X196E1,"ds",0X70,3);
	split_sreg_range(0X196F4,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1970E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19714,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19748,"ds",0X40,3);
	split_sreg_range(0X1975E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1976D,"ds",0X40,3);
	split_sreg_range(0X19775,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19855,"ds",0,3);
	split_sreg_range(0X198F0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X198FD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19914,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1991C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19926,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X199CD,"ds",0X11A8,3);
	split_sreg_range(0X199D2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X199DD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19A16,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19A79,"ds",0X11A8,3);
	split_sreg_range(0X19A7D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19AD0,"ds",0X11A8,3);
	split_sreg_range(0X19AF1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19B91,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19BD5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19C50,"ds",0X11A8,3);
	split_sreg_range(0X19C64,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19CA7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19CAD,"ds",0X11A8,3);
	split_sreg_range(0X19CB1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19CB7,"ds",0X11A8,3);
	split_sreg_range(0X19CC7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19CCF,"ds",0X11A8,3);
	split_sreg_range(0X19CDC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19CEC,"ds",0X11A8,3);
	split_sreg_range(0X19CF1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19D2A,"ds",0X11A8,3);
	split_sreg_range(0X19D2E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19DF6,"ds",0X11A8,3);
	split_sreg_range(0X19DFB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19F74,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19FA6,"ds",0X11A8,3);
	split_sreg_range(0X19FAB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19FB5,"ds",0X11A8,3);
	split_sreg_range(0X19FB9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X19FDB,"ds",0X11A8,3);
	split_sreg_range(0X19FE0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A06C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A107,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A114,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A16C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A1A1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A1A7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A1E7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A23C,"ds",0X11A8,3);
	split_sreg_range(0X1A297,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A2B7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A3E6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A3EA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A3FC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A49E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A4AF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A5A7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A5B7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A5C0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A646,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A672,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A68A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A699,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A6B6,"ds",0X70,3);
	split_sreg_range(0X1A6C6,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A715,"ds",0X11A8,3);
	split_sreg_range(0X1A72E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A76F,"ds",0X70,3);
	split_sreg_range(0X1A780,"ds",0,3);
	split_sreg_range(0X1A7FF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A841,"ds",0X11A8,3);
	split_sreg_range(0X1A86F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A884,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A893,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A89F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A8D5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A8DD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A97D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A985,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A991,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A9A0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A9AB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1A9BB,"ds",0X11A8,3);
	split_sreg_range(0X1A9F1,"ds",0X70,3);
	split_sreg_range(0X1AA0C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AA14,"ds",0X70,3);
	split_sreg_range(0X1AA2A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AA4A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AA5C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AA84,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AA9C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AADB,"ds",0XA000,3);
	split_sreg_range(0X1AAFE,"ds",0X70,3);
	split_sreg_range(0X1AB35,"ds",0X11A8,3);
	split_sreg_range(0X1AB4D,"ds",0X2476,3);
	split_sreg_range(0X1ABA3,"ds",0X70,3);
	split_sreg_range(0X1ABB8,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1ABE5,"ds",0X2476,3);
	split_sreg_range(0X1AC14,"ds",0X2C76,3);
	split_sreg_range(0X1AC17,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AC2F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AC3B,"ds",0X70,3);
	split_sreg_range(0X1AC82,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AE04,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AE12,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AF7B,"ds",0X11A8,3);
	split_sreg_range(0X1AF84,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AF8B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1AFAB,"ds",0X11A8,3);
	split_sreg_range(0X1AFC7,"ds",0X11A8,3);
	split_sreg_range(0X1AFD9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B07E,"ds",0X11A8,3);
	split_sreg_range(0X1B505,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B5B1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B62A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B63A,"ds",0X43F9,3);
	split_sreg_range(0X1B707,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1B729,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E450,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E458,"ds",0,3);
	split_sreg_range(0X1E48D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E6C9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E6EC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E6F8,"ds",0,3);
	split_sreg_range(0X1E71E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E737,"ds",0X4E9,3);
	split_sreg_range(0X1E7A3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7AD,"ds",0X1E45,3);
	split_sreg_range(0X1E7B7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7BE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7DE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7E0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E80E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E813,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E821,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E82D,"ds",0X43F9,3);
	split_sreg_range(0X1E83B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E84A,"ds",0X43F9,3);
	split_sreg_range(0X1EA00,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EA10,"ds",0X43F9,3);
	split_sreg_range(0X1EA13,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EA78,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EA88,"ds",0X43F9,3);
	split_sreg_range(0X1EAC0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EAD0,"ds",0X43F9,3);
	split_sreg_range(0X1EB1F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EB30,"ds",0X43F9,3);
	split_sreg_range(0X1EBCD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EBE0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EBEA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EBFF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EC10,"ds",0X43F9,3);
	split_sreg_range(0X1EDBF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EDCF,"ds",0X43F9,3);
	split_sreg_range(0X1EE6F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1EE80,"ds",0X43F9,3);
	split_sreg_range(0X1F037,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0CD,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0D5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0E5,"ds",0X43F9,3);
	split_sreg_range(0X1F0EC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F0FC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F106,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F107,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F117,"ds",0X43F9,3);
	split_sreg_range(0X1F125,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F138,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F142,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F176,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F17F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F180,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F18D,"ds",0X43F9,3);
	split_sreg_range(0X1F1B2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F1C0,"ds",0X43F9,3);
	split_sreg_range(0X1F1C7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F1D7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F1E1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F1FE,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F226,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F230,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F237,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F247,"ds",0X43F9,3);
	split_sreg_range(0X1F257,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F2D0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F2E0,"ds",0X43F9,3);
	split_sreg_range(0X1F312,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F5A0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F5B0,"ds",0X43F9,3);
	split_sreg_range(0X1F5FB,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F693,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F69F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F6A9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F8CF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F8D5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F984,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F9B7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1F9C1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FA2D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FCE5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FCF9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FD06,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FD15,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FD2E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FD3C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FD9D,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FDEA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FE10,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FEA5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FEB3,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FECA,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FED5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FEE2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FEEC,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FEF9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FF06,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FF15,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FF21,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FF2F,"ds",0X43F9,3);
	split_sreg_range(0X1FF63,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1FF95,"ds",0X43F9,3);
	split_sreg_range(0X1FFC7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2000B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2001E,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20028,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X201FF,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20212,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2021C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X204C9,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X204D7,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X204E1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20509,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20519,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X20523,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X208B0,"ds",0X43F9,3);
	split_sreg_range(0X20916,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X214E5,"ds",0X43F9,3);
	split_sreg_range(0X215F1,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X2179F,"ds",0X43F9,3);
	split_sreg_range(0X2181F,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X219D5,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21B7A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21B80,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21B8B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21B91,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21B9C,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21BA2,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F31,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F41,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F4B,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F70,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F80,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X21F8A,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43896,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X3440,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4790,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A80,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E450,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7E0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43896,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X3440,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4790,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X11A80,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E450,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X1E7E0,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X43896,"gs",0XFFFFFFFFFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
	Bytes_4();
	Bytes_5();
	Bytes_6();
	Bytes_7();
        end_type_updating(UTP_STRUCT);
}

// End of file.
