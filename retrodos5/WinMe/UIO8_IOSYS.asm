

;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : D106B52E6C9D4019D419811F4A7D0B0A5907A92963F85CF9770E540ED48B116F
; Input MD5    : D12F58044D314A4C6D06724386E9FF49
; Input CRC32  : 117C33B1

; ---------------------------------------------------------------------------
; File Name   : C:\Users\Erdo_an\Desktop\UIO8.SYS
; Format      : Binary file
; Base Address: 0000h Range: 0000h - 44600h Loaded length: 00044600h

                .686p
                .mmx
                .model flat

; ===========================================================================

; Segment type: Pure data
BIOSDATA        segment byte public 'DATA' use16
                assume cs:BIOSDATA

loc_0:                                  ; ...
                jmp     init
; ---------------------------------------------------------------------------
DosDataSg       dw 0                    ; ...
; ---------------------------------------------------------------------------
                jmp     loc_431
; ---------------------------------------------------------------------------
inHMA           db 0                    ; ...
                                        ; flags
int19sem        db 10h                  ; ...
unk_A           db    0
unk_B           db    0                 ; ...
model_byte      db 0FFh                 ; ...
secondary_model_byte db 0               ; ...
word_E          dw 0                    ; ...
                dw 0
ptrsav          dw 2 dup(0)             ; ...
res_dev_list    dw offset auxdev2       ; ...
                                        ; CONHeader
word_18         dw 70h
word_1A         dw 8013h
                dw offset strategy
off_1E          dw offset con_entry
aCon            db 'CON     '
auxdev2         dw 3Ah                  ; ...
dword_2A        dd 80000070h
word_2E         dw 262h
off_30          dw offset aux0_entry
aAux            db 'AUX     '           ; ...
prndev2         dw offset timdev
word_3C         dw 70h
                dw 0A0C0h
off_40          dw offset strategy      ; ...
                dw offset prn0_entry
aPrn            db 'PRN     '           ; ...
timdev          dd 70005Eh              ; ...
                dw 8008h
                dw offset strategy
off_54          dw offset tim_entry     ; ...
aClock          db 'CLOCK$  '           ; ...
dskdev          dw offset com1dev
word_60         dw 70h
word_62         dw 8C2h
word_64         dw 262h                 ; ...
off_66          dw offset dsk_entry     ; ...
drvmax          db 4                    ; ...
keyrd_func      db 0                    ; ...
com1dev         dw 7Ch                  ; ...
word_6C         dw 70h                  ; ...
ds_006Eh        dw 8000h                ; ...
off_70          dw offset strategy
                dw 293h
aCom1           db 'COM1    '           ; ...
word_7C         dw 8Eh
                dw 70h
                dw 0A0C0h
off_82          dw offset strategy
off_84          dw offset prn1_entry    ; ...
aLpt1           db 'LPT1    '           ; ...
word_8E         dw 0A0h
word_90         dw 70h                  ; ...
                dw 0A0C0h
off_94          dw offset strategy      ; ...
                dw offset prn2_entry
aLpt2           db 'LPT2    '
off_A0          dw offset com2dev       ; ...
                dw 70h
ds_00A4h        db 0C0h                 ; ...
unk_A5          db 0A0h
off_A6          dw offset strategy      ; ...
off_A8          dw offset prn3_entry    ; ...
aLpt3           db 'LPT3    '
keysts_func     db 1                    ; ...
                db 0EAh
Orig13          dd 0                    ; ...
com2dev         dw offset com3dev       ; ...
                dw 70h
word_BC         dw 8000h                ; ...
                dw offset strategy
off_C0          dw offset aux1_entry
asc_C2          db 'COM2    '
com3dev         dw offset com4dev       ; ...
word_CC         dw 70h
word_CE         dw 8000h
                dw offset strategy
                dw offset aux2_entry
aCom3           db 'COM3    '
com4dev         dw offset himemsysdev   ; ...
                dw 70h
                dw 8000h
                dw offset strategy
                dw offset aux3_entry
aCom4           db 'COM4    '
; ---------------------------------------------------------------------------

tim_entry:                              ; ...
                call    cdev_entry
                repne pop es

dsk_entry:                              ; ...
                call    cdev_entry
                mov     dl, 0Ch
; ---------------------------------------------------------------------------
start_bds       dw offset bds1          ; ...
start_bds_seg   dw 1218h                ; ...
                                        ; SYSINIT segment
disksector      dd 0                    ; ...
RomVectors      db 10h                  ; ...
Old10           dd 0
                db 13h
Old13           dd 0                    ; ...
                db 15h
Old15           dd 0                    ; ...
                db 19h
Old19           dd 0
                db 1Bh
Old1B           dd 0
                db 4Fh
Old4Fh          dd 0                    ; ...
                db 8
Old8            dd 0
                db 0Fh
Old0F           dd 0
                db 16h
Old16           dd 0                    ; ...
harddrv         db 80h
cdev            dd 4E900D5h             ; ...
                dw offset loc_492E
                dw 4E9h
i13x            dd 4E92557h             ; ...
dword_13A       dd 4E90247h             ; ...
dword_13E       dd 4E9024Ch             ; ...
dword_142       dd 4E905FDh             ; ...
dword_146       dd 4E90648h             ; ...
dword_14A       dd 4E906B8h             ; ...
dword_14E       dd 4E90757h             ; ...
dword_152       dd 4E92066h             ; ...
dword_156       dd 0                    ; ...
dword_15A       dd 0                    ; ...
Orig16          dd 0                    ; ...
Orig4F          dd 0                    ; ...
                db    0
                db    0
                db    1
                db    2
                db    0
                db    0
                db    2
                db    2
                db    0
                db    0
                db    3
                db    2
                db    0
                db    0
                db    4
                db    2
                db    0
                db    0
                db    5
                db    2
                db    0
                db    0
                db    6
                db    2
                db    0
                db    0
                db    7
                db    2
                db    0
                db    0
                db    8
                db    2
                db    0
                db    0
                db    9
                db    2
                db    0
                db    0
                db  0Ah
                db    2
                db    0
                db    0
                db  0Bh
                db    2
                db    0
                db    0
                db  0Ch
                db    2
                db    0
                db    0
                db  0Dh
                db    2
                db    0
                db    0
unk_19C         db  0Eh                 ; ...
                db    2
word_19E        dw 0                    ; ...
                db  0Fh
                db    2
                db    0
                db    0
                db  10h
                db    2
                db    0
                db    0
                db  11h
                db    2
                db    0
                db    0
                db  12h
                db    2
                db    0
                db    0
                db  13h
                db    2
                db    0
                db    0
                db  14h
                db    2
                db    0
                db    0
; ---------------------------------------------------------------------------
                adc     ax, 2
                add     ds:2, dl
                add     [bx], dl
                add     al, [bx+si]
; ---------------------------------------------------------------------------
                db    0
; ---------------------------------------------------------------------------
                sbb     [bp+si], al
; ---------------------------------------------------------------------------
                db    0
                db    0
                db  19h
                db    2
                db    0
                db    0
                db  1Ah
                db    2
                db    0
                db    0
                db  1Bh
                db    2
                db    0
                db    0
                db  1Ch
                db    2
                db    0
                db    0
                db  1Dh
                db    2
                db    0
                db    0
                db  1Eh
                db    2
                db    0
                db    0
                db  1Fh
                db    2
                db    0
                db    0
unk_1E4         db  20h
                db    2
                db    0
                db    0
unk_1E8         db  21h ; !
                db    2
                db    0
                db    0
unk_1EC         db  22h ; "
                db    2
                db    0
                db    0
                db  23h ; #
                db    2
                db    0
                db    0
                db  24h ; $
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
; ---------------------------------------------------------------------------

strategy:                               ; ...
                mov     cs:ptrsav, bx
                mov     cs:ptrsav+2, es
                retf
; ---------------------------------------------------------------------------

himemsys_entry:                         ; ...
                call    cdev_entry
                pop     es
; ---------------------------------------------------------------------------
                db 8
; ---------------------------------------------------------------------------

con_entry:                              ; ...
                call    cdev_entry
                aad     7

prn0_entry:                             ; ...
                call    cdev_entry
                in      al, dx
                pop     es
; ---------------------------------------------------------------------------
                db 0
                db 0
; ---------------------------------------------------------------------------

prn1_entry:                             ; ...
                call    cdev_entry
                in      al, dx
                pop     es
                add     [bx+di], al

prn2_entry:                             ; ...
                call    cdev_entry
                in      al, dx
                pop     es
                add     [bp+si], ax

prn3_entry:                             ; ...
                call    cdev_entry
                in      al, dx
                pop     es
                add     al, [bp+di]

aux0_entry:                             ; ...
                call    cdev_entry
                out     dx, ax
                pop     es
; ---------------------------------------------------------------------------
                db 0
; ---------------------------------------------------------------------------

aux1_entry:                             ; ...
                call    cdev_entry
                out     dx, ax
                pop     es
; ---------------------------------------------------------------------------
                db 1
; ---------------------------------------------------------------------------

aux2_entry:                             ; ...
                call    cdev_entry
                out     dx, ax
                pop     es
; ---------------------------------------------------------------------------
                db 2
; ---------------------------------------------------------------------------

aux3_entry:                             ; ...
                call    cdev_entry
                out     dx, ax
                pop     es
; ---------------------------------------------------------------------------
                db 3

; =============== S U B R O U T I N E =======================================


cdev_entry      proc near               ; ...
                jmp     cs:cdev
cdev_entry      endp

; ---------------------------------------------------------------------------
                db 0
                db 0
                db    0
                db    1
                db 0
                db 1
; ---------------------------------------------------------------------------

locret_2B6:                             ; ...
                iret
; ---------------------------------------------------------------------------
                dw offset loc_2BB
                dw 70h
; ---------------------------------------------------------------------------

loc_2BB:                                ; ...
                push    eax
                push    ds
                sub     ax, ax
                mov     ds, ax
                mov     ax, word ptr dword_46C
                test    al, 1
                jnz     loc_34D
                sti
                push    bx
                push    cx
                push    dx
                mov     ax, 70h
                mov     ds, ax
                mov     dl, ds:2B0h
                test    dl, dl
                jz      short loc_34A
                push    dx
                mov     dx, 3DAh
                mov     bx, 40h ; '@'
                sub     cx, cx

loc_2E5:                                ; ...
                in      al, dx          ; Video status bits:
                                        ; 0: retrace.  1=display is in vert or horiz retrace.
                                        ; 1: 1=light pen is triggered; 0=armed
                                        ; 2: 1=light pen switch is open; 0=closed
                                        ; 3: 1=vertical sync pulse is occurring.
                test    al, 8

loc_2E8:                                ; ...
                jz      short loc_2F5
                loop    loc_2E5
                dec     bx
                jnz     short loc_2E5
                mov     byte ptr cs:loc_2E8, 0EBh

loc_2F5:                                ; ...
                mov     bx, 40h ; '@'
                sub     cx, cx

loc_2FA:                                ; ...
                in      al, dx          ; Video status bits:
                                        ; 0: retrace.  1=display is in vert or horiz retrace.
                                        ; 1: 1=light pen is triggered; 0=armed
                                        ; 2: 1=light pen switch is open; 0=closed
                                        ; 3: 1=vertical sync pulse is occurring.
                test    al, 8

loc_2FD:                                ; ...
                jnz     short loc_30A

loc_2FF:
                loop    loc_2FA
                dec     bx

loc_302:
                jnz     short loc_2FA

loc_304:
                mov     byte ptr cs:loc_2FD, 0EBh

loc_30A:                                ; ...
                pop     dx
                call    sub_355
                push    eax
                mov     cl, ds:2B1h
                mov     bl, ds:2B5h

loc_318:                                ; ...
                add     dl, bl
                call    sub_355
                sub     dl, bl

loc_31F:
                call    sub_385

loc_322:
                add     dl, bl

loc_324:
                dec     cl

loc_326:
                jnz     short loc_318

loc_328:
                pop     eax

loc_32A:
                call    sub_385
; ---------------------------------------------------------------------------
                db  80h
word_32E        dw 0B43Eh
word_330        dw 2
word_332        dw 1674h
unk_334         db 0FEh
                db  0Eh
                db 0B4h
                db    2
                db  75h ; u
                db  10h
word_33A        dw 1EF6h
unk_33C         db 0B5h
                db    2
unk_33E         db 0A0h
                db 0B1h
unk_340         db    2
                db 0A2h
unk_342         db 0B4h
                db    2
unk_344         db 0F6h
                db 0E3h
unk_346         db    0
                db    6
unk_348         db 0B0h
                db    2
; ---------------------------------------------------------------------------

loc_34A:                                ; ...
                pop     dx
; ---------------------------------------------------------------------------
byte_34B        db 59h
byte_34C        db 5Bh
; ---------------------------------------------------------------------------

loc_34D:                                ; ...
                pop     ds

loc_34E:
                pop     eax
; ---------------------------------------------------------------------------
                dw 0FF2Eh
                db 2Eh
                db  56h ; V
                db    1

; =============== S U B R O U T I N E =======================================


sub_355         proc near               ; ...
                mov     al, dl

loc_357:                                ; VGA video DAC state
                mov     dx, 3C7h

loc_35A:
                out     dx, al

loc_35B:
                inc     dx

loc_35C:
                inc     dx

loc_35D:
                ror     eax, 8
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_363:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_365:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_367:                                ; ...
                in      al, dx

loc_368:
                ror     eax, 8

loc_36C:
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_36E:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_370:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_372:                                ; ...
                in      al, dx
                ror     eax, 8
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_379:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_37B:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_37D:                                ; ...
                in      al, dx

loc_37E:
                ror     eax, 8
                mov     dl, al
                retn
sub_355         endp


; =============== S U B R O U T I N E =======================================


sub_385         proc near               ; ...
                mov     al, dl

loc_387:                                ; VGA video DAC PEL address
                mov     dx, 3C8h

loc_38A:
                out     dx, al
                inc     dx

loc_38C:
                ror     eax, 8
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_392:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_394:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_396:                                ; ...
                out     dx, al
                ror     eax, 8
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_39D:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_39F:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_3A1:                                ; ...
                out     dx, al

loc_3A2:
                ror     eax, 8
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_3A8:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_3AA:                                ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_3AC:                                ; ...
                out     dx, al
                ror     eax, 8
                mov     dl, al
                retn
sub_385         endp

; ---------------------------------------------------------------------------

locret_3B4:                             ; ...
                iret
; ---------------------------------------------------------------------------
                mov     cx, 7003h
                add     ds:1EFFh, ch

loc_3BC:
                xor     al, [bx+di]
                jmp     cs:dword_15A
; ---------------------------------------------------------------------------

block13:                                ; ...
                jmp     cs:i13x
; ---------------------------------------------------------------------------

int15:                                  ; ...
                cmp     ah, 4Fh ; 'O'
                jnz     short loc_3F4
                jmp     short loc_3D8
; ---------------------------------------------------------------------------
                cmp     al, 1
                jnz     short loc_3D8
                jmp     cs:dword_13E
; ---------------------------------------------------------------------------

loc_3D8:                                ; ...
                cmp     al, 53h ; 'S'
                jnz     short loc_3F3
                push    ax
                push    ds
                sub     ax, ax
                mov     ds, ax
                mov     al, byte ptr loc_416+1
                and     al, 0Ch
                cmp     al, 0Ch
                jnz     short loc_3F1
                pushf
                call    cs:dword_13A

loc_3F1:                                ; ...
                pop     ds
                pop     ax

loc_3F3:                                ; ...
                stc

loc_3F4:                                ; ...
                jmp     cs:Old15
; ---------------------------------------------------------------------------

int16:                                  ; ...
                sti
                pushf
                test    cs:int19sem, 20h
                jnz     short loc_416

loc_403:                                ; ...
                cli
                call    cs:Orig16
                pushf
; ---------------------------------------------------------------------------
                db  2Eh ; .
                db 0FFh
                db  0Eh
                db  4Eh ; N
word_40E        dw 7504h                ; ...
                db    1
                db  90h
                db  9Dh
word_413        dw 2CAh                 ; ...
                db    0
; ---------------------------------------------------------------------------

loc_416:                                ; ...
                call    cs:dword_142
                jmp     short loc_403
; ---------------------------------------------------------------------------

int19:                                  ; ...
                call    cs:dword_146
                int     19h             ; DISK BOOT
                                        ; causes reboot of disk system
; ---------------------------------------------------------------------------
altah           db 0                    ; ...
; ---------------------------------------------------------------------------

int1B:                                  ; ...
                mov     cs:altah, 3

_iret:                                  ; ...
                iret
; ---------------------------------------------------------------------------

int29:                                  ; ...
                jmp     cs:dword_14A
; ---------------------------------------------------------------------------

loc_431:                                ; ...
                jmp     cs:dword_152
; ---------------------------------------------------------------------------
                jmp     dsk_entry
; ---------------------------------------------------------------------------
                call    cs:dword_14E
                retf
; ---------------------------------------------------------------------------

Jmp_far_Orig4F:                         ; ...
                jmp     cs:Orig4F
; ---------------------------------------------------------------------------
daycnt2         dw 0                    ; ...
word_446        dw 0                    ; ...
word_448        dw 0                    ; ...
word_44A        dw 0C8h                 ; ...
                dw 0C8h
word_44E        dw 0                    ; ...
himemsysdev     dw 0FFFFh               ; ...
                dw 70h
                dw 0A000h
                dw offset strategy
                dw offset himemsys_entry
aXmsxxxx0       db 'XMSXXXX0'
byte_462        db 0                    ; ...
                db    0
                db    0
                db  7Fh ; 
                db    0
                db 0B5h
                db    1
                db    1
                db    0
                db    0
dword_46C       dd 0                    ; ...
                db    0
                db    0
                db    0
                db    0
                db    0
byte_475        db 0                    ; ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
byte_484        db 0                    ; ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
byte_496        db 0                    ; ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dw 0
                dw 0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    3
i13_ds          dw 0                    ; ...
; ---------------------------------------------------------------------------

call_orig13:                            ; get caller's ds register
                mov     ds, ds:i13_ds
                lea     bp, [bp+0]
                pushf
                cli
                call    cs:Orig13       ; call far [cs:Orig13]
                mov     cs:i13_ds, ds
                push    cs
                pop     ds
                lea     bp, [bp+0]
                retf
; ---------------------------------------------------------------------------
drvfat          dw 0                    ; ...
boot_media_id   dw 0                    ; ...
msloader_bpb    dd 0                    ; ...
fbigfat         db 0                    ; ...
init_bootseg    dw 0                    ; ...
rom_drv_num     db 80h                  ; ...
FAT32_Partition db 0                    ; ...
backup_bs_read  db 0                    ; ...
dsktnum         db 1                    ; ...
                db 2
                db 9
                dw 28h
fakefloppydrv   db 0                    ; ...
disktable2      dd 32680                ; ...
                dw 803h
word_51A        dw 512                  ; ...
                dw 0
                dd 40000h
                dw 402h
                dw 512
                dw 40h
                dd 80000h
                dw 803h
                dw 512
                dw 40h
                dd 100000h
                dw 1004h
                dw 512
word_53A        dw 40h                  ; ...
                dd 200000h
                dw 2005h
                dw 512
                dw 40h
                dd 400000h
word_54A        dw 4006h
                dw 512
                dw 40h
                dd 800000h
                dw 8007h
                dw 512
                dw 40h
disktable3      dd 82000h               ; ...
                dw 100h
                dw 0
                dw 60h
                dd 1000000h
                dw 803h
word_56A        dw 0
word_56C        dw 60h
                dd 2000000h
dword_572       dd 1004h
word_576        dw 60h
dword_578       dd 4000000h
word_57C        dw 2005h
                dw 0
dword_580       dd 0FFFF0060h
dword_584       dd 4006FFFFh
word_588        dw 0
word_58A        dw 60h
SYSINITSEG      dw 1218h                ; ...
rom_minidisk_num db 0                   ; ...
hnum            db 0                    ; ...
word_590        dw 5DDh                 ; ...
mini_hdlim      dw 0                    ; ...
mini_seclim     dw 0                    ; ...
bios_date       db '01/10/84',0         ; used for checking at rom bios   date.
                db 90h
BPB48T          dw 200h                 ; ...
dword_5A2       dd 2000102h             ; ...
                dw 112
                dw 720
byte_5AA        db 0FDh
word_5AB        dw 2
word_5AD        dw 9
word_5AF        dw 2
word_5B1        dw 0
word_5B3        dw 0
word_5B5        dw 0
word_5B7        dw 0
dword_5B9       dd 7 dup(0)
                db 0
BPB96T          dw 512                  ; ...
byte_5D8        db 1
                dw 1
                db 2
                dw 224
                dw 2400
                db 0F9h
word_5E1        dw 7
word_5E3        dw 15
                dw 2
word_5E7        dw 4 dup(0)
dword_5EF       dd 7 dup(0)
byte_60B        db 0
BPB35           dw 512                  ; ...
word_60E        dw 102h
byte_610        db 0
word_611        dw 7002h
                db    0
                dw 1440
                db 0F9h
                dw 3
                dw 9
word_61B        dw 2
word_61D        dw 0
                dw 0
                dw 0
                dw 0
                dd 7 dup(0)
                db 0
BPB288          dw 512                  ; ...
                db 2
                dw 1
                db 2
                dw 240
                dw 5760
                db 0F0h
                dw 9
                dw 36
                dw 2
                dw 0
                dw 0
                dw 0
                dw 0
                dd 7 dup(0)
                db 0
bpb_table       dw offset BPB48T        ; ...
                dw offset BPB96T
                dw offset BPB35
                dw offset BPB35
                dw offset BPB35
                dw offset BPB35
                dw offset BPB35
                dw offset BPB35
                dw offset BPB35
                dw offset BPB288
single          db 0                    ; ...
flp_drvs        db 0                    ; ...
bdata_ret_addr  dw 0                    ; ...

; =============== S U B R O U T I N E =======================================


call_bios_code  proc far                ; ...
                pop     cs:bdata_ret_addr ; return address to the caller
                push    cs
                push    cs:bdata_ret_addr
                push    offset addr_of_bcretf
                push    4E9h            ; push Bios_Code segment
                push    bp              ; utility function offset
                retf
call_bios_code  endp ; sp-analysis failed

; ---------------------------------------------------------------------------

init:                                   ; ...
                cli
                cld
                sub     si, si          ; 0
                mov     word ptr cs:msloader_bpb, bp ;
                                        ; MSLOADERSEG:000Ah, points to copy of BS BPB
                mov     word ptr cs:msloader_bpb+2, ss ; MSLOADERSEG
                mov     ss, si          ; 0
                mov     sp, 700h
                mov     cs:drvfat, dx
                mov     cs:boot_media_id, dx
                mov     ds, cs:SYSINITSEG
                mov     ds:word_12F92, ax
                mov     ds:word_12F94, bx
                mov     ds, si          ; 0
                mov     ah, 0Fh
                int     10h             ; - VIDEO - GET CURRENT VIDEO MODE
                                        ; Return: AH = number of columns on screen
                                        ; AL = current video mode
                                        ; BH = current active display page
                mov     ax, 50h
                mov     es, ax
                mov     di, 3Ch         ; Win ME IO.SYS special table at 50h:3Ch
                mov     ax, word_413    ; memory size in KB, low word
                stosw
                mov     ax, word_40E    ; memory size in KB, high word
                stosw
                mov     cx, 32          ; 1st 32 (hardware) interrupt vectors
                                        ; to 50h:40h
                rep movsd
                mov     dword ptr es:0A4h, 0 ; write zero to (copied) INT 19h vector pos
                mov     si, 100h        ; copy INT 40h,41h,42h,43h vectors to 50h:0C0h
                mov     cx, 4
                rep movsd
                add     si, 8           ; skip INT 44h and 45h
                movsd                   ; copy INT 46h vector to 50h:0D0h
; START OF FUNCTION CHUNK FOR sub_16DC4

loc_700:                                ; ...
                add     si, 10h         ; skip INT vectors till INT 4Ah
; END OF FUNCTION CHUNK FOR sub_16DC4
; ---------------------------------------------------------------------------
                dw 0A566h               ; copy INT 4Ah vector to 50h:0D4h
                db  83h                 ; skip 3 INT vectors
                db 0C6h
                db  0Ch
word_708        dw 0A566h               ; ...
                                        ; copy INT 4Eh vector to 50h:0D8h
                db 0BEh                 ; INT 70h and 71h vectors
                db 0C0h
                db    1
                db 0B9h
                db    8
                db    0
                db 0F3h                 ; copy INT 70h and INT 71h vectors to 50h:0DCh
                db  66h ; f
unk_712         db 0A5h                 ; ...
; ---------------------------------------------------------------------------
                in      al, 0A1h        ; ...
                                        ; Interrupt Controller #2, 8259A
                mov     ah, al          ; IRQ 8-15 interrupt mask status (on bits = disabled IRQ)
                in      al, 21h         ; Interrupt controller, 8259A.
                                        ; IRQ 0-7 interrupt mask status (on bits = disabled IRQ)
                stosw                   ; save IRQ 0-15 interrupt status at 50h:0E4h (2 bytes)
                mov     cx, di          ; di = 0E6h
                mov     di, 3Ch
                sub     cx, di          ; cx = 170 (0AAh) bytes
                shr     cx, 1           ; cx = 85 words
                sub     ax, ax          ; 0

chsum_loop:                             ; ...
                add     ax, es:[di]     ; sum (checksum) of 50h:3Ch table
                add     di, 2
                loop    chsum_loop
                stosw                   ; save summing result (chksum value)
                push    cs
                pop     es
                mov     cx, 9
                mov     si, offset RomVectors

next_int_:                              ; ...
                lods    byte ptr es:[si] ; interrupt number
                cbw
                shl     ax, 2           ; vector address
                mov     di, ax
                xchg    si, di          ; xchange source with destination
                movsd                   ; save original int vectors (ds:si)
                                        ; to OldInt (RomVectors) table in BIOSDATA segment
                xchg    si, di
                loop    next_int_
                mov     eax, es:Old13   ; save old13 in orig13 also
                mov     es:Orig13, eax
                mov     bx, cs
                mov     word ptr timdev, offset block13
                mov     word ptr timdev+2, bx ; set up int 13 for new action
                mov     off_54, offset int15
                mov     word ptr aClock, bx ; "CLOCK$  "
                mov     ax, offset int16
; ---------------------------------------------------------------------------
                db 87h
                db    6
                db  58h ; X
                db    0
                db  26h ; &
                db 0A3h
                db  5Eh ; ^
                db    1
                db  8Bh
                db 0C3h
                db  87h
                db    6
                db  5Ah ; Z
                db    0
                db  26h ; &
                db 0A3h
                db  60h ; `
                db    1
; ---------------------------------------------------------------------------
                mov     word_64, offset int19
                mov     off_66, bx
                sub     ax, ax          ; 0
                mov     drvfat, ax      ; 0
                mov     word ptr msloader_bpb, ax ; 0
                push    ds
                pop     es              ; 0
                mov     di, 530h
                stosd                   ; clear 50h:30h dword
                stosd                   ; clear 50h:34h dword
                mov     word_6C, offset int1B
                mov     ds_006Eh, bx
                mov     word ptr ds_00A4h, offset int29
                mov     off_A6, bx
                mov     di, 4
                mov     ax, offset _iret
                push    es
                push    di
; ---------------------------------------------------------------------------
chk_jp_sign     db 26h                  ; check INT 01h vector for 'JP' signature
                db 0C4h
word_7B4        dw 833Dh                ; ...
word_7B6        dw 2FFh                 ; ...
                db  72h ; r
                db    6
                db  26h ; &             ; 'JP'
                                        ; INT 01h handler's start address - 2 contains 'JP'
                db  81h
                db  7Dh ; }
                db 0FEh
                db  4Ah ; J
                db  50h ; P
chk_jp_1        db  5Fh ; _
                db    7
                db  74h ; t             ; skip INT 01h, 03h replacement
                db  0Bh
                db 0ABh                 ; set INT 01h hadler to cs:int01 ('iret')
                db  93h
                db 0ABh                 ; cs
                db  83h                 ; skip int 02h
                db 0C7h
                db    4
                db  93h
                db 0ABh                 ; int01
                db  93h
                db 0ABh                 ; cs
                db  93h                 ; ax = int01 (only 'iret' instruction)
chk_jp_2        db 0BFh                 ; int 04h vector
                db  10h
                db    0
                db 0ABh                 ; int01 (iret)
                db  93h
                db 0ABh                 ; cs
                db 0FBh
                db  32h ; 2
                db 0C9h
                db 0B4h
                db    8
                db 0B2h
                db    0
; ---------------------------------------------------------------------------
                int     13h             ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
                                        ; DL = drive number
                                        ; Return: CF set on error, AH = status code, BL = drive type
                                        ; DL = number of consecutive drives
                                        ; DH = maximum value for head number, ES:DI -> drive parameter
                jnb     short save_fd_count
                int     11h             ; EQUIPMENT DETERMINATION
                                        ; Return: AX = equipment flag bits
                test    ax, 1           ; floppy disk(s) installed ?
                jnz     short normalfloppydrv ; yes
                xor     dl, dl          ; 0
                jmp     short save_fd_count
; ---------------------------------------------------------------------------

normalfloppydrv:                        ; ...
                shr     al, 6
                mov     dl, al          ; number of floppies installed less 1 (if bit 0 set)
                inc     dl

save_fd_count:                          ; ...
                mov     cs:flp_drvs, dl ; number of floppies
; ---------------------------------------------------------------------------
                db  2Eh ; .
dword_7F8       dd 8D06B60Fh            ; ...
                db    6
                db  0Bh
                db 0C0h
                db  75h ; u
                db  10h
                db  40h ; @
                db  2Eh ; .             ; al = 1
                db 0A2h
                db  13h
                db    5
                dw 8E2Eh
                dw 8C06h
                db    5
; ---------------------------------------------------------------------------
                mov     es:byte_12F59, al
                jmp     short settwodrive
; ---------------------------------------------------------------------------

got_num_flp_drvs:                       ; make zero based
                dec     ax
                and     ax, 3           ; only look at bits 0 & 1
                jnz     short notsingle ; zero means single drive system
                inc     ax

settwodrive:                            ; ...
                inc     cs:single

notsingle:                              ; ...
                inc     ax
                mov     cs:drvmax, al
                test    byte ptr cs:drvfat, 80h
                jnz     short gothrd
                xor     ax, ax

gothrd:                                 ; ...
                mov     byte ptr cs:drvfat, al
                mov     ah, 0C0h
                int     15h             ; SYSTEM - GET CONFIGURATION
                                        ;  (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
                jb      short no_rom_system_conf
                mov     al, es:[bx+2]
                mov     cs:model_byte, al
                mov     al, es:[bx+3]
                mov     cs:secondary_model_byte, al

no_rom_system_conf:                     ; ...
                int     12h             ; MEMORY SIZE -
                                        ; Return: AX = number of contiguous 1K blocks of memory
                shl     ax, 6
                mov     dx, ax
                push    ax
                lds     bx, dword ptr word_BC
; ---------------------------------------------------------------------------
word_852        dw 7F81h                ; ...
word_854        dw 5203h                ; ...
                db  50h ; P
                db  75h ; u
                db  13h
                db  80h
word_85A        dw 57Fh                 ; ...
word_85C        dw 754Ch                ; ...
dword_85E       dd 0B8C88B0Dh           ; ...
word_862        dw 4A06h                ; ...
; ---------------------------------------------------------------------------

loc_864:                                ; ...
                int     2Fh

loc_866:                                ; ...
                mov     ax, dx
                cmp     ax, cx
                jnz     short loc_86E
                sub     dx, dx

loc_86E:                                ; ...
                sub     ax, 20h ; ' '
                mov     word ptr cs:disksector+2, ax
                sub     ax, 40h ; '@'
                mov     cs:init_bootseg, ax
                pop     ax
                mov     ds, cs:SYSINITSEG
                mov     word ptr ds:14C3h, offset res_dev_list
                mov     word ptr ds:14C5h, cs
                mov     ds:150Ch, ax
                mov     ds:14DEh, dx
                mov     ax, cs:drvfat
                inc     ax
                mov     ds:14E0h, al
                mov     ax, cs:boot_media_id
                push    ds
                push    ds
                pop     es
                mov     di, 4708h
                lds     si, cs:msloader_bpb
                mov     cx, 31h ; '1'
                rep movsw
                pop     ds
                stosw
                push    cs
                pop     ds
                push    cs
                pop     es
                mov     cl, ss:byte_496
                test    cl, 10h
                jz      short org_key
                mov     keyrd_func, 10h
                mov     keysts_func, 11h

org_key:                                ; ...
                or      word ptr inHMA, 20h
                mov     bp, 9E4h
                call    near ptr call_bios_code
                mov     word ptr loc_0, 12Dh
                mov     al, drvmax
                mov     dsktnum, al
                xor     ax, ax
                mov     hnum, al
                mov     dl, 80h
                mov     ah, 8
                int     13h             ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
                                        ; DL = drive number
                                        ; Return: CF set on error, AH = status code, BL = drive type
                                        ; DL = number of consecutive drives
                                        ; DH = maximum value for head number, ES:DI -> drive parameter
                jnb     short loc_8EF
                mov     dl, 0

loc_8EF:                                ; ...
                add     dl, hnum
                mov     hnum, dl
                mov     byte ptr loc_0+2, dl
                push    ds
                mov     ax, 40h ; '@'
                mov     ds, ax
                mov     ds:75h, dl
                pop     ds
                xor     dl, dl
                mov     di, 0F8h
                cmp     byte ptr ds:513h, 1
                jnz     short loc_920
                les     di, es:[di]
                les     di, es:[di]
                mov     word ptr es:[di], 0FFFFh
                jmp     dohard
; ---------------------------------------------------------------------------

loc_920:                                ; ...
                cmp     dl, ds:68h
                jb      short loc_929
                jmp     done_drives
; ---------------------------------------------------------------------------

loc_929:                                ; ...
                xor     cx, cx
                les     di, es:[di]
                mov     dh, 0
                mov     word ptr ds:511h, 28h ; '('
                push    ds
                push    es
                pusha
                push    dx
                xor     bx, bx
                mov     ah, 8
                int     13h             ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
                                        ; DL = drive number
                                        ; Return: CF set on error, AH = status code, BL = drive type
                                        ; DL = number of consecutive drives
                                        ; DH = maximum value for head number, ES:DI -> drive parameter
                pop     ax
                jb      loc_9F6
                cmp     bl, 10h
                jnz     short loc_97B
                call    sub_14C4
                jb      short loc_97B
                mov     ds:511h, cx
                mov     ds:50Fh, dh
                mov     ds:510h, al
                mov     es, word ptr ds:130h
                cmp     al, es:0C5Ch
                jbe     short loc_969
                mov     es:0C5Ch, al

loc_969:                                ; ...
                test    bl, 2
                popa
                pop     es
                pop     ds
                jz      short loc_9CC
                or      cl, 2
                or      word ptr ds:8, 2
                jmp     short loc_9CC
; ---------------------------------------------------------------------------

loc_97B:                                ; ...
                inc     dh
                mov     ds:50Fh, dh
                push    cx
                and     cl, 3Fh
                mov     ds:510h, cl
                pop     cx
                xchg    ch, cl
                shr     ch, 6
                inc     cx
                mov     ds:511h, cx
                mov     cl, ds:510h
                mov     es, word ptr ds:130h
                cmp     cl, es:0C5Ch
                jbe     short loc_9A8
                mov     es:0C5Ch, cl

loc_9A8:                                ; ...
                popa
                pop     es
                pop     ds
                mov     ah, 15h
                int     13h             ; DISK - DISK - GET TYPE (AT,XT2,XT286,CONV,PS)
                                        ; DL = drive ID
                                        ; Return: CF set on error, AH = disk type (3 = hard drive)
                                        ; CX:DX = number of sectors on the media
; ---------------------------------------------------------------------------
                db  72h ; r
byte_9B0        db 0Dh                  ; ...
byte_9B1        db 80h                  ; ...
word_9B2        dw 2FCh                 ; ...
word_9B4        dw 875h                 ; ...
; ---------------------------------------------------------------------------
                or      cl, 2
                or      word ptr ds:8, 2
                cmp     word ptr ds:511h, 28h ; '('
                jnz     short loc_9D0
                cmp     byte ptr ds:510h, 9
                jbe     short loc_A27

loc_9CC:                                ; ...
                mov     dh, 7
                jmp     short loc_A27
; ---------------------------------------------------------------------------

loc_9D0:                                ; ...
                cmp     word ptr ds:511h, 50h ; 'P'
                jnz     short loc_9CC
                mov     dh, 9
                cmp     byte ptr ds:510h, 24h ; '$'
                jz      short loc_A27
                cmp     byte ptr ds:510h, 0Fh
                jz      short loc_9F2
                cmp     byte ptr ds:510h, 9
                jnz     short loc_9CC
                mov     dh, 2
                jmp     short loc_A27
; ---------------------------------------------------------------------------

loc_9F2:                                ; ...
                mov     dh, 1
                jmp     short loc_A27
; ---------------------------------------------------------------------------

loc_9F6:                                ; ...
                popa
                pop     es
                pop     ds
                mov     ah, 15h
                int     13h             ; DISK - DISK - GET TYPE (AT,XT2,XT286,CONV,PS)
                                        ; DL = drive ID
                                        ; Return: CF set on error, AH = disk type (3 = hard drive)
                                        ; CX:DX = number of sectors on the media
                jb      short loc_A27
                cmp     ah, 2
                jnz     short loc_A27
                or      cl, 2
                or      word ptr ds:8, 2
                mov     word ptr ds:511h, 50h ; 'P'
                mov     dh, 1
                mov     al, 0Fh
                push    es
                mov     es, word ptr ds:130h
                cmp     al, es:0C5Ch
                jbe     short loc_A26
                mov     es:0C5Ch, al

loc_A26:                                ; ...
                pop     es

loc_A27:                                ; ...
                or      cl, 20h
                mov     bh, dl
                cmp     byte ptr ds:68Ch, 1
                jbe     short loc_A38
                dec     bh
                xor     cl, 20h

loc_A38:                                ; ...
                xor     ax, ax
                mov     al, ds:50Fh
                mov     es:[di+52h], ax
                mov     al, ds:510h
                mov     es:[di+50h], ax
                mov     es:[di+3Fh], cx
                mov     es:[di+3Eh], dh
                mov     es:[di+5], dl
                mov     es:[di+4], bh
                mov     bx, ds:511h
                mov     es:[di+41h], bx
                cmp     byte ptr ds:68Ch, 1
                jnz     short loc_A7E
                inc     byte ptr ds:68Ch
                or      word ptr ds:8, 4
                or      cx, 10h
                or      es:[di+3Fh], cx
                les     di, es:[di]
                inc     dl
                jmp     short loc_A27
; ---------------------------------------------------------------------------

loc_A7E:                                ; ...
                inc     dl
                jmp     loc_920
; ---------------------------------------------------------------------------

done_drives:                            ; ...
                mov     word ptr es:[di], 0FFFFh

dohard:                                 ; ...
                mov     dh, ds:hnum
                or      dh, dh
                jz      short configdone
                mov     dl, 80h

dohard1:                                ; ...
                push    dx
                mov     di, ds:word_590
                mov     bl, ds:drvmax
                mov     bh, 0
                call    sethard

loc_AA0:
                jb      short hardfile_err

loc_AA2:
                call    dmax_check
                jnb     short hardfile_err
                call    xinstall_bds

hardfile_err:                           ; ...
                pop     dx
                inc     dl
                dec     dh
                jnz     short dohard1
                call    domini
                mov     dh, ds:hnum     ; ...
                mov     dl, 80h

dohardx1:                               ; ...
                mov     bh, 1

dohardx2:
                push    dx
                push    bx
                mov     di, ds:word_590
                mov     bl, ds:drvmax
                call    sethard
                jb      short dohardx4
; ---------------------------------------------------------------------------
                db 0E8h
                db 0B1h
byte_ACD        db 9                    ; ...
                db  73h ; s
                db    9
                db 0E8h
                db 0C2h
                db    9
                db  5Bh ; [
                db  5Ah ; Z
                db 0FEh
                db 0C7h
                db 0EBh
                db 0E3h
; ---------------------------------------------------------------------------

dohardx4:                               ; ...
                pop     bx

loc_ADA:
                pop     dx

loc_ADB:
                inc     dl
                dec     dh

loc_ADF:
                jnz     short dohardx1

loc_AE1:
                cmp     ds:dsktnum, 2

loc_AE6:
                jbe     short configdone

loc_AE8:
                call    remap

configdone:                             ; ...
                mov     di, offset end_of_biosdata

loc_AEE:
                push    cs
                pop     es

loc_AF0:
                add     di, 0Fh
                shr     di, 4

loc_AF6:
                add     di, 70h
                mov     ds:DosDataSg, di
                mov     ax, ds:drvfat   ; get drive and fat id
                mov     bp, offset SetDrive
                call    near ptr call_bios_code
                mov     bp, offset GetBp
                call    near ptr call_bios_code
                call    setdrvparms
                jmp     far ptr 1218h:15B9h

; =============== S U B R O U T I N E =======================================


remap           proc near               ; ...
                les     di, dword ptr ds:start_bds

loc_B19:                                ; ...
                cmp     byte ptr es:[di+4], 80h
                jz      short loc_B2A
                les     di, es:[di]
                cmp     di, 0FFFFh
                jnz     short loc_B19
                jmp     short locret_B77
; ---------------------------------------------------------------------------

loc_B2A:                                ; ...
                mov     al, 2

loc_B2C:                                ; ...
                mov     es:[di+5], al
                les     di, es:[di]
                inc     al
                cmp     di, 0FFFFh      ; ...
                jnz     short loc_B2C
                les     di, dword ptr ds:start_bds
                les     di, es:[di]
                mov     ah, ds:dsktnum  ; ...
; ---------------------------------------------------------------------------
                db  80h
                dw 2ECh
word_B48        dw 0C426h               ; ...
word_B4A        dw 263Dh                ; ...
word_B4C        dw 4588h                ; ...
                db    5
                db 0FEh
                db 0C0h
                db 0FEh
                db 0CCh
                db  75h ; u
                db 0F3h
; ---------------------------------------------------------------------------
                mov     al, byte ptr ds:drvfat
                cmp     al, 2
                jb      short locret_B77
                sub     al, ds:dsktnum
                jb      short loc_B66
; ---------------------------------------------------------------------------
byte_B62        db 4                    ; ...
word_B63        dw 0EB02h               ; ...
                db    4
; ---------------------------------------------------------------------------

loc_B66:                                ; ...
                add     al, ds:drvmax
                mov     byte ptr ds:drvfat, al
                inc     al
                mov     es, ds:SYSINITSEG
                mov     es:DEFAULT_DRIVE, al

locret_B77:                             ; ...
                retn
remap           endp


; =============== S U B R O U T I N E =======================================


getboot         proc near               ; ...
                push    dx
                push    es
                push    si
                mov     si, 3           ; retry count
                mov     es, cs:init_bootseg
                sub     bx, bx          ; offset 0

getboot1:                               ; ...
                mov     ax, 201h
                xor     dh, dh          ; head 0
                mov     cx, 1
                int     13h             ; DISK - READ SECTORS INTO MEMORY
                                        ; AL = number of sectors to read, CH = track, CL = sector
                                        ; DH = head, DL = drive, ES:BX -> buffer to fill
                                        ; Return: CF set on error, AH = status, AL = number of sectors read
                push    es
                pop     ds
                jb      short getboot2
                cmp     word ptr [bx+1FEh], 0AA55h
                clc

erret:                                  ; ...
                pop     si
                pop     es
                pop     dx
                retn
; ---------------------------------------------------------------------------

getboot2:                               ; ...
                dec     si
                stc
                jz      short erret
                xor     ax, ax
                int     13h             ; DISK - RESET DISK SYSTEM
                                        ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
                jmp     short getboot1
getboot         endp


; =============== S U B R O U T I N E =======================================


sethard         proc near               ; ...
                push    di
                push    bx
                push    ds
                push    es
                mov     es:[di+5], bl   ; [es:di+BDS.drivelet]
                mov     es:[di+4], dl   ; [es:di+BDS.drivenum]
                or      byte ptr es:[di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
                mov     byte ptr es:[di+3Eh], 5 ; [es:di+BDS.formfactor], ffHardFile
                mov     ds:fbigfat, 0   ; assume 12 bit FAT
                mov     dh, bh
                push    dx
                mov     ah, 8
                int     13h             ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
                                        ; DL = drive number
                                        ; Return: CF set on error, AH = status code, BL = drive type
                                        ; DL = number of consecutive drives
                                        ; DH = maximum value for head number, ES:DI -> drive parameter
                inc     dh
                mov     es:[di+15h], dh ; [di+BDS.heads]
                pop     dx              ; requested partition number
                                        ; (0 = first primary dos, active partition)
                jb      setret          ; error if no hard disk
                and     cl, 3Fh
                mov     es:[di+13h], cl ; [es:di+BDS.secpertrack]
                call    getboot
                jnb     chk_act_part
                or      dh, dh          ; ...
; ---------------------------------------------------------------------------
                dw 0FF9h
; ---------------------------------------------------------------------------

loc_BE7:                                ; ...
                test    [si], bp
                add     ds:71Eh, ax
                mov     ax, 201h
                mov     dh, 1           ; head 1
                mov     cx, 1
                int     13h             ; DISK - READ SECTORS INTO MEMORY
                                        ; AL = number of sectors to read, CH = track, CL = sector
                                        ; DH = head, DL = drive, ES:BX -> buffer to fill
                                        ; Return: CF set on error, AH = status, AL = number of sectors read
                pop     es
                jb      setret
                cmp     word ptr [bx+1FEh], 0AA55h
                jz      short bs_magic_ok

setret_err:                             ; ...
                stc
                jmp     setret
; ---------------------------------------------------------------------------

bs_magic_ok:                            ; ...
                cmp     byte ptr [bx], 0E9h ; near jump ?
                jz      short chk_valid_bs ; yes
                cmp     byte ptr [bx], 0EBh ; short jump ?
                jnz     short setret_err ; no
                cmp     byte ptr [bx+2], 90h ; nop after short jump ?
                jnz     short setret_err ; no

chk_valid_bs:                           ; ...
                mov     cs:FAT32_Partition, 0
                cmp     word ptr [bx+16h], 0 ; BPB_FATSz16 ; 16 bit FAT sectors field
                jnz     short chk_valid_fat_1 ; FAT volume/fs
                cmp     byte ptr [bx+42h], 29h ; check for FAT32 extended boot signature
                jnz     short setret_err ; no, error
                cmp     dword ptr [bx+24h], 0 ; BPB_FATSz32 ; 32 bit FAT sectors
                jz      short setret_err ; zero, error
                cmp     dword ptr [bx+2Ch], 2 ; BPB_FATSz32 ; root dir's cluster number
                jb      short setret_err ; < 2, invalid, error
                cmp     word ptr [bx+2Ah], 0 ; BPB_FSVer ; File system version, must be 0
                ja      short setret_err ; > 0, error
                inc     cs:FAT32_Partition ; FAT32 partition/volume/fs = true
                or      cs:fbigfat, 20h ; fbigbig ; FAT32 flag
                jmp     short chk_valid_fat_2
; ---------------------------------------------------------------------------

chk_valid_fat_1:                        ; ...
                cmp     byte ptr [bx+26h], 29h ; BS_BootSig
                jnz     short setret_err ; invalid (dos) boot sector

chk_valid_fat_2:                        ; ...
                cmp     byte ptr [bx+10h], 0 ; BPB_NumFATs
                jz      short setret_err
                mov     al, [bx+15h]    ; BPB_Media
                and     al, 0F0h
                cmp     al, 0F0h
                jnz     short setret_err
                cmp     word ptr [bx+0Bh], 512 ; BPB_BytsPerSec
                jnz     short setret_err
                mov     al, [bx+0Dh]    ; BPB_SecPerClus
                or      al, al
                jz      short setret_err

chk_valid_fat_3:                        ; ...
                shr     al, 1
                jnb     short chk_valid_fat_3
                jnz     short setret_err
                mov     ax, [bx+0Bh]    ; BPB_BytsPerSec
                mov     es:[di+6], ax
                mov     ax, [bx+13h]    ; BPB_TotSec16
                mov     es:[di+0Eh], ax
                mov     al, [bx+15h]    ; BPB_Media
                mov     es:[di+10h], al ; BPB_NumFATs
                mov     ax, [bx+1Ch]    ; BPB_HiddSec
                mov     es:[di+17h], ax
                mov     ax, [bx+1Eh]    ; BPB_HiddSec+2
                mov     es:[di+19h], ax
                jmp     copybpb_fat
; ---------------------------------------------------------------------------

chk_act_part:                           ; ...
                jnz     setret_err      ; not a valid boot sector
                mov     bx, 1C2h        ; partition table offset

act_part1:                              ; ...
                mov     cs:FAT32_Partition, 0
                test    byte ptr [bx-4], 80h
                jz      short no_act1
                cmp     byte ptr [bx], 1 ; FAT12
                jz      short got_good_act1
                cmp     byte ptr [bx], 4 ; FAT16
                jz      short got_good_act1
                cmp     byte ptr [bx], 6 ; FAT16 big
                jz      short got_good_act1
                cmp     byte ptr [bx], 0Bh ; FAT32 CHS
                jz      short got_good_act1
                cmp     byte ptr [bx], 0Eh ; FAT16 LBA
                jz      short got_good_act1
                cmp     byte ptr [bx], 0Ch ; FAT32 LBA
                jnz     short no_act1

got_good_act1:                          ; ...
                or      dh, dh
                jz      short set1
                dec     dh

no_act1:                                ; ...
                add     bx, 16
                cmp     bx, 1FEh        ; end of partition table
                jb      short act_part1
                mov     bx, 1C2h

act_part2:                              ; ...
                mov     cs:FAT32_Partition, 0
                test    byte ptr [bx-4], 80h
                jnz     short no_act2
                cmp     byte ptr [bx], 1 ; FAT12
                jz      short got_good_act2
                cmp     byte ptr [bx], 4 ; FAT16 (<= 32MB)
                jz      short got_good_act2
                cmp     byte ptr [bx], 6 ; FAT16 big (> 32MB)
                jz      short got_good_act2
                cmp     byte ptr [bx], 0Bh ; FAT32 CHS
                jz      short got_good_act2
                cmp     byte ptr [bx], 0Eh ; FAT16 LBA
                jz      short got_good_act2
                cmp     byte ptr [bx], 0Ch ; FAT32 LBA
                jnz     short no_act2

got_good_act2:                          ; ...
                or      dh, dh          ; is this our target partition #?
                                        ; (0 = first primary dos or active partition)
                jz      short set1      ; yes
                dec     dh              ; count down

no_act2:                                ; ...
                add     bx, 16          ; next pte
                cmp     bx, 1FEh        ; end of partition table
                jb      short act_part2

setret:                                 ; ...
                stc                     ; error
                jmp     ret_hard_err
; ---------------------------------------------------------------------------

set1:                                   ; ...
                cmp     byte ptr [bx], 0Bh ; FAT32 CHS
                jnz     short okdrive_1
                inc     cs:FAT32_Partition

okdrive_1:                              ; ...
                cmp     byte ptr [bx], 0Eh ; FAT16 LBA
                jz      short set_lba_flag
                cmp     byte ptr [bx], 0Ch ; FAT32 LBA
                jnz     short set2
                inc     cs:FAT32_Partition

set_lba_flag:                           ; ...
                or      word ptr es:[di+3Fh], 400h ; fLBArw ; LBA r/w flag

set2:                                   ; ...
                mov     cs:rom_drv_num, dl
                mov     ax, [bx+4]      ; start sector (LBA) of the partition
                mov     dx, [bx+6]
                sub     ax, 1
                sbb     dx, 0           ; -1 for end sector calculation
                add     ax, [bx+8]      ; start LBA + partition size in sectors
                adc     dx, [bx+0Ah]
                jnb     short okdrive
                or      cs:fbigfat, 80h ; ftoobig
                                        ; end sector num of the partition is too big

okdrive:                                ; ...
                mov     ax, [bx+4]      ; start sector (LBA) of the partition
                add     es:[di+17h], ax ; [di+BDS.hiddensectors]
                mov     ax, [bx+6]

loc_D62:                                ; [di+BDS.hiddensectors+2]
                adc     es:[di+19h], ax

loc_D66:                                ; partition size (total sectors) hw
                mov     dx, [bx+0Ah]
                mov     ax, [bx+8]      ; partition size (total sectors) lw
                mov     word ptr es:[di+0Eh], 0 ; [di+BDS.totalsecs16]
                mov     es:[di+1Dh], dx ; [di+BDS.totalsecs32+2]
                mov     es:[di+1Bh], ax ; [di+BDS.totalsecs32]
                cmp     dx, 0
                ja      short set3
                cmp     ax, 64          ; if partition size > 64
                jb      short setret    ; error

set3:                                   ; ...
                mov     cs:backup_bs_read, 0
                mov     dx, es:[di+19h] ; [es:di+BDS.hiddensecs+2]
                mov     ax, es:[di+17h] ; [es:di+BDS.hiddensecs]

set3_lba_read:                          ; ...
                test    word ptr es:[di+3Fh], 400h ; fLBArw ; LBA read/write flag
                jz      short okdrive_2
                mov     ch, cs:rom_drv_num
                mov     cl, 1
                lds     bx, cs:disksector
                call    LBA_read
                jmp     short set3_lba_rd_ok
; ---------------------------------------------------------------------------

okdrive_2:                              ; ...
                movzx   ebx, byte ptr es:[di+13h] ; [di+BDS.secpertrack]
                movzx   eax, ax
                shl     edx, 16
; ---------------------------------------------------------------------------
byte_DB9        db 66h
                dw 0C20Bh
word_DBC        dw 3366h
                db 0D2h
                db  66h ; f
                db 0F7h
                db 0F3h
                db  8Ah
                db 0CAh
                db 0FEh
                db 0C1h
                db  66h ; f             ; [di+BDS.heads]
                db  26h ; &
                db  0Fh
                db 0B6h
                db  5Dh ; ]
                db  15h
                db  66h ; f
                db  33h ; 3
                db 0D2h
                db  66h ; f
                db 0F7h
                db 0F3h
; ---------------------------------------------------------------------------
                cmp     eax, 1024       ; if ax (cylinder number) > 1024
                ja      setret          ; error (out of CHS limit)
                cmp     word ptr es:[di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
                jnz     short oknotmini
                add     ax, es:[di+7Bh] ; [di+BDS.bdsm_hidden_trks] ; set the physical track number

oknotmini:                              ; ...
                ror     ah, 2           ; move high two bits of cyl to high
                and     ah, 0C0h        ; turn off remainder of bits
                or      cl, ah          ;  move two bits to correct spot
                mov     ch, al          ; ch iscylinder (low 8 bits)
                                        ; cl is sector + 2 high bits of cylinder
                mov     dh, dl          ; dh is head
                mov     dl, cs:rom_drv_num ; dl is drive number
                push    es
                les     bx, cs:disksector ; for convenience,
                                        ; we are going to read the logical boot sector
                                        ; into cs:disksector area.
                mov     ax, 201h
                int     13h             ; DISK - READ SECTORS INTO MEMORY
                                        ; AL = number of sectors to read, CH = track, CL = sector
                                        ; DH = head, DL = drive, ES:BX -> buffer to fill
                                        ; Return: CF set on error, AH = status, AL = number of sectors read
                push    es
                pop     ds
                pop     es

set3_lba_rd_ok:                         ; ...
                jnb     short check_1
                cmp     cs:FAT32_Partition, 0
                stc
                jz      setret          ; if not FAT32 partition/volume, read with error
                cmp     cs:backup_bs_read, 0 ; FAT32 backup boot sector already read ?
                stc
                jnz     setret          ; yes, read with error

set3_rd_bkup_bs:                        ; ...
                mov     cs:backup_bs_read, 1 ; TRUE
                mov     dx, es:[di+19h] ; [di+BDS.hiddensecs+2]
                mov     ax, es:[di+17h] ; [di+BDS.hiddensecs]
                add     ax, 6           ; + backup boot sector (BPB_BkBootSec) offset
                adc     dx, 0
                jmp     set3_lba_read   ; read backup boot sector
; ---------------------------------------------------------------------------

check_1:                                ; ...
                push    bx
                push    ax
                cmp     byte ptr [bx], 0E9h ; is it a near jump?
                jz      short check_1_ok ; yes
                cmp     byte ptr [bx], 0EBh ; is it a short jump?
                jnz     short check_2   ; no
                cmp     byte ptr [bx+2], 90h ; yes, is the next one a nop?
                jnz     short check_2   ; yes

check_1_ok:                             ; ...
                lea     bx, [bx+0Bh]    ; disksector+EXT_BOOT.BPB
                                        ; point to the bpb in the boot record
                mov     al, [bx+0Ah]    ; [bx+EBPB.MEDIADESCRIPTOR]
                                        ; get the mediadescriptor byte
                and     al, 0F0h        ; mask off low nibble
                cmp     al, 0F0h        ; is high nibble = 0Fh?
                jnz     short check_2   ; no, invalid boot record
                cmp     word ptr [bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
                jnz     short check_2   ; invalidate non 512 byte sectors
                mov     al, [bx+2]      ; make sure the sectorspercluster
                                        ; is a power of 2
                or      al, al          ; is it zero?
                jz      short check_2   ; yes, invalid bs

ck_power_of_two:                        ; ...
                shr     al, 1           ; shift until first bit emerges
                jnb     short ck_power_of_two
                jz      short valid_boot_record

check_2:                                ; ...
                pop     ax
                pop     bx
                cmp     cs:FAT32_Partition, 0 ; FAT32 volume/fs ?
                jz      short unknown_j ; no
                cmp     cs:backup_bs_read, 0 ; backup booot sector already read ?
                jnz     short unknown_j
                jmp     short set3_rd_bkup_bs ; read (FAT32 fs) backup boot sector
; ---------------------------------------------------------------------------

valid_boot_record:                      ; ...
                pop     ax
                pop     bx
                cmp     word ptr [bx+8], 2E32h ; '2.' (NASM syntax)
                jnz     short try5
                cmp     byte ptr [bx+0Ah], 30h ; '0'
                jnz     short try5
                jmp     short copybpb
; ---------------------------------------------------------------------------

try5:                                   ; ...
                call    cover_fdisk_bug
                cmp     word ptr [bx+8], 2E30h ; '0.' (NASM syntax)
                jnz     short no_os2
                mov     al, [bx+7]
                sub     al, 31h ; '1'
                and     al, 0FEh
                jz      short copybpb

unknown_j:                              ; ...
                jmp     unknown
; ---------------------------------------------------------------------------

no_os2:                                 ; ...
                cmp     word ptr [bx+8], 2E33h ; '3.' (NASM syntax)
                jb      unknown3_0_j
                jnz     short copybpb
                cmp     byte ptr [bx+10], 31h ; '1'
                jb      unknown3_0_j

copybpb:                                ; ...
                cmp     word ptr [bx+22], 0 ; BPB_FATSz16
                jnz     short chk_fat_bootsig

loc_EBA:                                ; BS_BootSig (FAT32 boot sector)
                cmp     byte ptr [bx+66], 29h

loc_EBE:
                jnz     short not_fat_system

loc_EC0:                                ; BPB_NumFATs
                cmp     byte ptr [bx+16], 0

loc_EC4:
                jz      short not_fat_system

loc_EC6:                                ; BPB_RootClus
                cmp     dword ptr [bx+44], 2

loc_ECB:
                jb      short not_fat_system

loc_ECD:                                ; BPB_FATSz32
                cmp     dword ptr [bx+36], 0

loc_ED2:
                jz      short not_fat_system

loc_ED4:                                ; BPB_FSVer
                cmp     word ptr [bx+42], 0
                ja      short not_fat_system

loc_EDA:                                ; is it FAT32 partition?
                cmp     cs:FAT32_Partition, 0
                jz      set_toobig_flag ; no
                or      cs:fbigfat, 20h ; set FAT32 fs (volume) flag
                jmp     short copybpb_fat
; ---------------------------------------------------------------------------

chk_fat_bootsig:                        ; ...
                cmp     byte ptr [bx+26h], 29h ; BS_BootSig ; FAT
                                        ; Extended boot signature (0x29)

loc_EF0:
                jnz     short copybpb_fat

loc_EF2:                                ; BPB.fats
                cmp     byte ptr [bx+10h], 0 ; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
                jnz     short copybpb_fat ; a fat system.

not_fat_system:                         ; ...
                or      word ptr es:[di+3Fh], 200h
                push    di
                lea     si, [bx+0Bh]    ; disksector+EXT_BOOT.BPB
                add     di, 6           ; add di,BDS.BPB
                cmp     word ptr [si+8], 0
                jnz     short already_nonz
                cmp     word ptr [si+15h], 0
                jnz     short already_nonz
                cmp     word ptr [si+17h], 0
                jnz     short already_nonz
                mov     ax, es:[di+8]
                mov     [si+8], ax
                mov     ax, es:[di+15h]
                mov     [si+15h], ax
                mov     ax, es:[di+17h]
                mov     [si+17h], ax

already_nonz:                           ; ...
                mov     cx, 53
                rep movsb
                pop     di
                mov     bp, offset mov_media_ids
                call    near ptr call_bios_code
                jmp     goodret
; ---------------------------------------------------------------------------

copybpb_fat:                            ; ...
                lea     si, [bx+0Bh]    ; disksector+EXT_BOOT.BPB
                movzx   eax, word ptr [si+8] ; BPB.totalsecs16
                or      ax, ax
                jnz     short copy_totsec
                mov     eax, [si+15h]   ; BPB.totalsecs32
                or      eax, eax
                jz      short fat_big_small

copy_totsec:                            ; ...
                mov     es:[di+1Bh], eax ; [es:di+BDS.totalsecs32]

fat_big_small:                          ; ...
                mov     eax, es:[di+1Bh]
                push    bx

loc_F5B:                                ; BPB_NumFATs
                mov     bl, [si+5]
                mov     es:[di+0Bh], bl ; [es:di+BDS.fats] ; number of FATs
                movzx   ebx, word ptr [si+3] ; BPB.resectors
                mov     es:[di+9], bx   ; [es:di+BDS.resectors]
                                        ; reserved sectors
                sub     eax, ebx
                mov     bx, [si+0Bh]    ; BPB_FATSz16
                mov     es:[di+11h], bx ; [es:di+BDS.fatsecs] ; 16 bit fat sectors
                or      bx, bx
                jnz     short fat_16bit
                push    si              ; FAT32 volume/fs boot sector
                push    di
                lea     si, [si+19h]    ; BPB_FATSz32
                lea     di, [di+1Fh]    ; [es:di+BDS.fatsecs32]
                mov     cx, 14          ; copy from BPB_FATSz32 to BPB_FSInfo
                cld
                rep movsw
                pop     di
                pop     si
                mov     ebx, [si+19h]   ; BPB.FATSz32

fat_16bit:                              ; ...
                mov     edx, ebx
                movzx   cx, byte ptr [si+5] ; BPB_NumFATs ; Number of FATs
                jcxz    short single_fat
                dec     cx
                jz      short single_fat

add_fat_size:                           ; ...
                add     ebx, edx
                loop    add_fat_size

single_fat:                             ; ...
                sub     eax, ebx
                movzx   ebx, word ptr [si+6] ; root directory entries
                mov     es:[di+0Ch], bx ; [es:di+BDS.direntries]
                cmp     word ptr [si+0Bh], 0 ; BPB.fatsecs ; 16 bit fat sectors
                jz      short chk_clust_limit ; FAT32 volume/fs
                add     ebx, 15
                shr     ebx, 4          ; result: bx = root directory sectors
                sub     eax, ebx        ; result: eax = data sectors
                                        ;        (for cluster count calculation)

chk_clust_limit:                        ; ...
                pop     bx
                movzx   ecx, byte ptr [si+2] ; BPB.secperclus
                mov     es:[di+8], cl   ; [es:di+BDS.secperclus]
                xor     edx, edx
                div     ecx
                cmp     eax, 0FF6h      ; FAT12 cluster number limit: 0FF6h
                jb      short copymediaid
                cmp     eax, 0FFF6h     ; FAT16 cluster number limit: 0FFF6h
                jb      short set_fat16_flag
                test    cs:fbigfat, 20h ; fbigbig
                jnz     short copymediaid

set_toobig_flag:                        ; ...
                or      cs:fbigfat, 80h ; toobig
                jmp     goodret
; ---------------------------------------------------------------------------

set_fat16_flag:                         ; ...
                or      cs:fbigfat, 40h ; fbig

copymediaid:                            ; ...
                mov     bp, offset mov_media_ids
                call    near ptr call_bios_code
                jmp     massage_bpb
; ---------------------------------------------------------------------------

unknown:                                ; ...
                or      word ptr es:[di+3Fh], 200h ; [di+BDS.flags+1] ; unformatted_media
                                        ; Set unformatted media flag.

unknown3_0_j:                           ; ...
                mov     eax, es:[di+1Bh] ; [es:di+BDS.totalsecs32]
                mov     si, offset disktable2 ; FAT default disk parms table
                cmp     cs:FAT32_Partition, 0
                jz      short scan
                mov     si, offset disktable3 ; FAT32 default disk parms table

scan:                                   ; ...
                cmp     eax, cs:[si]
                jbe     short gotparm
                add     si, 10
                jmp     short scan
; ---------------------------------------------------------------------------

gotparm:                                ; ...
                mov     cl, cs:[si+8]   ; fat size for fbigfat flag
                or      cs:fbigfat, cl  ; (fbig flag, 40h or 0)
                mov     cx, cs:[si+4]   ; ch = number of sectors per cluster
                                        ; cl = log base 2 of ch
                mov     dx, cs:[si+6]   ; dx = number of root dir entries
                mov     es:[di+0Ch], dx ; [es:di+BDS.direntries]
                                        ; save number of (root) dir entries
                mov     eax, es:[di+1Bh] ; [es:di+BDS.totalsecs32]
                mov     es:[di+8], ch   ; [es:di+BDS.secperclus]
                                        ; save sectors per cluster
                test    cs:fbigfat, 60h ; [es:di+BDS.fatsiz] ; fat size flag
                                        ; fbig (40h, FAT16) + fbigbig (20h, FAT32)
                jnz     short dobig
                xor     bx, bx          ; FAT12 volume/fs
                mov     bl, ch          ; spc
                dec     bx              ; dec spc for cluster number round up
                add     bx, ax
                shr     bx, cl          ; result: bx = number of clusters (volume size)
                inc     bx              ; number of clusters in FAT
                and     bl, 0FEh        ; clear bit 0 (make even number)
                mov     si, bx
                shr     bx, 1
                add     bx, si          ; bx = 1.5 * bx = number of FAT bytes
                                        ; (after make even cluster count -round down-)
                add     bx, 511         ; round up
                shr     bh, 1           ; convert byte count to sector count
                mov     es:[di+11h], bh ; [di+BDS.fatsecs]
                jmp     short massage_bpb
; ---------------------------------------------------------------------------

dobig:                                  ; ...
                test    cs:fbigfat, 20h ; fbigbig (FAT32) flag
                jz      short notbigbig
                mov     byte ptr es:[di+0Bh], 2 ; [es:di+BDS.fats] ; number of FATs
                mov     word ptr es:[di+9], 32 ; [es:di+BDS.resectors]
                                        ; set reserved sectors to 32 (FAT32 de facto)

notbigbig:                              ; ...
                test    cs:fbigfat, 20h ; fbigbig (FAT32) flag
                jnz     short dobigbig
                movzx   edx, word ptr es:[di+0Ch] ; [es:di+BDS.direntries]
                add     edx, 15         ; 16 directory entries per sector
                                        ; (round up sector count by adding 15)
                shr     edx, 4          ; (rounded) dir entries / 16
                sub     eax, edx        ;
                                        ; ; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
                                        ; ; 27/09/2022
                                        ; ; (Microsoft FAT32 File System Specification,
                                        ; ; December 2000, Page 21)
                                        ; ; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
                                        ; ; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
                                        ; ; 8/8/2023 (Retro DOS v5.0)
                                        ; ; If(FATType == FAT32)
                                        ; ;   TmpVal2 = TmpVal2 / 2;
                                        ; ; FATsz = (TmpVal1+(TmpVal2-1))/TmpVal2
                                        ; ; 8/8/2023 (Retro DOS v5.0)
                                        ; ; If(FATType == FAT32) {
                                        ; ;   BPB_FATSz16 = 0;
                                        ; ;   BPB_FATSz32 = FATSz;
                                        ; ;} else {
                                        ; ;   BPB_FATSz16 = LOWORD(FATSz);
                                        ; ;/* there is no BPB_FATSz32 in a FAT16 BPB */
                                        ; ;}

dobigbig:                               ; ...
                movzx   edx, word ptr es:[di+9] ; [es:di+BDS.resectors]
                sub     eax, edx        ; TmpVal1
                movzx   ebx, byte ptr es:[di+0Bh] ; [es:di+BDS.fats]
                mov     bh, es:[di+8]   ; [es:di+BDS.secperclus]
                                        ; bx = TmpVal2
                test    cs:fbigfat, 20h ; fbigbig (FAT32) flag
                jz      short dobig1
                shr     ebx, 1          ; If(FATType == FAT32)
                                        ;    TmpVal2 = TmpVal2 / 2;

dobig1:                                 ; ...
                add     eax, ebx        ; FATsz = (TmpVal1+(TmpVal2-1))/TmpVal2
                dec     eax
                xor     edx, edx
                div     ebx
                xor     ecx, ecx        ; ecx = 0
                test    cs:fbigfat, 20h ; fbigbig (FAT32) flag
                jz      short dobig2    ; not FAT32
                xchg    eax, ecx        ; eax = 0

dobig2:                                 ; ...
                mov     es:[di+11h], ax ; [es:di+BDS.fatsecs] ; 16 bit fat secs
                mov     es:[di+1Fh], ecx ; [es:di+BDS.fatsecs32]
                mov     bl, cs:fbigfat
                mov     es:[di+3Bh], bl ; [es:di+BDS.fatsiz] ; fat size flag
                                        ;
                                        ; set the default filesys_id,
                                        ;  volume label, serial number
                mov     bp, offset clear_ids
                call    near ptr call_bios_code

massage_bpb:                            ; ...
                mov     dx, es:[di+1Dh] ; [es:di+BDS.totalsecs32+2]
                mov     ax, es:[di+1Bh] ; [es:di+BDS.totalsecs32]
                cmp     dx, 0
                ja      short goodret
                cmp     word ptr es:[di+19h], 0 ; [es:di+BDS.hiddensecs+2]
                ja      short goodret
                add     ax, es:[di+17h] ; [es:di+BDS.hiddensecs]
                jb      short goodret
                mov     ax, es:[di+1Bh] ; [es:di+BDS.totalsecs32]
                mov     es:[di+0Eh], ax ; [es:di+BDS.totalsecs16]
                mov     word ptr es:[di+1Bh], 0

goodret:                                ; ...
                mov     bl, cs:fbigfat
                mov     es:[di+3Bh], bl ; [es:di+BDS.fatsiz]
                                        ; set size of fat on media
                clc

ret_hard_err:                           ; ...
                pop     es
                pop     ds
                pop     bx
                pop     di
                retn
sethard         endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


cover_fdisk_bug proc near               ; ...
                push    ax
                push    dx
                push    si
                cmp     word ptr [bx+16h], 0 ; BPB_FATSz16
                jz      short cfb_retit ; nothing to do for FAT32 volume/fs
                cmp     byte ptr [bx+26h], 29h ; [disksector+EXT_BOOT.SIG],
                                        ; EXT_BOOT_SIGNATURE
                jz      short cfb_retit
                cmp     word ptr [bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
                jnz     short cfb_chk_totalsecs
                cmp     byte ptr [bx+0Ah], 30h ; '0'
                jnz     short cfb_retit

cfb_chk_totalsecs:                      ; ...
                lea     si, [bx+0Bh]    ; disksector+EXT_BOOT.BPB
                cmp     word ptr [si+8], 0 ; [si+EBPB.TOTALSECTORS]
                jz      short cfb_retit
                mov     ax, [si+8]
                add     ax, [si+11h]    ; [si+EBPB.HIDDENSECTORS]
                jnb     short cfb_retit
                jnz     short cfb_retit ;
                                        ; if carry set and ax=0
                dec     word ptr [si+8] ; 0 -> 0FFFFh
                                        ; then decrease BPB_TOTALSECTORS by 1

loc_1147:                               ; [di+BDS.totalsecs32]
                sub     word ptr es:[di+1Bh], 1
                sbb     word ptr es:[di+1Dh], 0 ; [di+BDS.totalsecs32+2]

cfb_retit:                              ; ...
                pop     si
                pop     dx
                pop     ax
                retn
cover_fdisk_bug endp

; ---------------------------------------------------------------------------
                db    2
                db    0
                db    3
                db    0
                db    0
                db    2

; =============== S U B R O U T I N E =======================================


setdrvparms     proc near               ; ...
                xor     bx, bx
                les     di, dword ptr ds:start_bds

loc_1161:                               ; ...
                push    es
                push    di
                mov     bl, es:[di+3Eh]
                cmp     bl, 5
                jnz     short loc_11A2
                movzx   eax, word ptr es:[di+0Eh]
                or      ax, ax
                jnz     short loc_117B
                mov     eax, es:[di+1Bh]

loc_117B:                               ; ...
                push    eax
                mov     ax, es:[di+15h]
                mul     word ptr es:[di+13h]
                movzx   ecx, ax
                pop     eax
                xor     edx, edx
                div     ecx
                or      dx, dx
                jz      short loc_1196
                inc     ax

loc_1196:                               ; ...
                mov     es:[di+41h], ax
                push    es
                pop     ds
                lea     si, [di+6]
                jmp     loc_128A
; ---------------------------------------------------------------------------

loc_11A2:                               ; ...
                cmp     ds:fakefloppydrv, 1
                jz      loc_1294
                cmp     bl, 7
                jnz     loc_1283
                movzx   eax, word ptr es:[di+52h]
                movzx   ecx, word ptr es:[di+50h]
                mul     ecx
                movzx   ecx, word ptr es:[di+41h]
                mul     ecx
                mov     es:[di+58h], eax
                test    eax, 0FFFF0000h
                jz      short loc_124D
                mov     word ptr es:[di+4Bh], 0
                mov     si, 514h
                cmp     eax, 100000h
                jb      short loc_11F1
                mov     word ptr es:[di+46h], 20h ; ' '
                mov     si, 55Ah

loc_11F1:                               ; ...
                cmp     eax, cs:[si]
                jbe     short loc_11FC
                add     si, 0Ah
                jmp     short loc_11F1
; ---------------------------------------------------------------------------

loc_11FC:                               ; ...
                mov     bl, cs:[si+8]
                mov     cx, cs:[si+4]
                movzx   edx, word ptr cs:[si+6]
                mov     es:[di+49h], dx
                mov     es:[di+45h], ch
                shr     edx, 4
                sub     eax, edx
                movzx   edx, word ptr es:[di+46h]
                sub     eax, edx
                movzx   ecx, byte ptr es:[di+48h]
                mov     ch, es:[di+45h]
                test    bl, 20h
                jz      short loc_1234
                shr     ecx, 1

loc_1234:                               ; ...
                add     eax, ecx
                dec     eax
                xor     edx, edx
                div     ecx
                test    bl, 20h
                jz      short loc_127D
                mov     es:[di+5Ch], eax
                xor     ax, ax
                jmp     short loc_127D
; ---------------------------------------------------------------------------

loc_124D:                               ; ...
                mov     es:[di+4Bh], ax
                dec     ax
                mov     dl, 1

loc_1254:                               ; ...
                cmp     ax, 0FF6h
                jb      short loc_125F
                shr     ax, 1
                shl     dl, 1
                jmp     short loc_1254
; ---------------------------------------------------------------------------

loc_125F:                               ; ...
                cmp     dl, 1
                jz      short loc_126A
                mov     word ptr es:[di+49h], 0F0h

loc_126A:                               ; ...
                mov     es:[di+45h], dl
                mul     word ptr ds:1157h
                div     word ptr ds:1155h
                xor     dx, dx
                div     word ptr ds:1159h
                inc     ax

loc_127D:                               ; ...
                mov     es:[di+4Eh], ax
                jmp     short loc_1294
; ---------------------------------------------------------------------------

loc_1283:                               ; ...
                shl     bx, 1
                mov     si, offset bpb_table
                mov     si, [bx+si]

loc_128A:                               ; ...
                lea     di, [di+43h]
                mov     cx, 35h ; '5'
                rep movsb
                push    cs
                pop     ds

loc_1294:                               ; ...
                pop     di
                pop     es
                les     di, es:[di]
                cmp     di, 0FFFFh
                jz      short locret_12A1
                jmp     loc_1161
; ---------------------------------------------------------------------------

locret_12A1:                            ; ...
                retn
setdrvparms     endp


; =============== S U B R O U T I N E =======================================


domini          proc near               ; ...
                mov     dh, hnum
                cmp     dh, 0
                jz      short dominiret
                mov     dl, 80h

domini_loop:                            ; ...
                push    dx
                mov     rom_minidisk_num, dl
                mov     ah, 8
                int     13h             ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
                                        ; DL = drive number
                                        ; Return: CF set on error, AH = status code, BL = drive type
                                        ; DL = number of consecutive drives
                                        ; DH = maximum value for head number, ES:DI -> drive parameter
                inc     dh

loc_12B8:
                xor     ax, ax
                mov     al, dh
                mov     mini_hdlim, ax
                and     cl, 3Fh
                mov     al, cl
                mov     mini_seclim, ax

loc_12C7:
                mov     dl, rom_minidisk_num
                push    ds
                call    getboot         ; read master boot record into
                                        ; initbootsegment:bootbias
                jb      short domininext
                jnz     short domininext
                call    find_mini_partition

domininext:                             ; ...
                pop     ds
                pop     dx
                inc     dl
                dec     dh
                jnz     short domini_loop

dominiret:                              ; ...
                retn
domini          endp

; ---------------------------------------------------------------------------
ep_start_sector dw 2 dup(0)             ; ...
ep_hidden_sectors dw 2 dup(0)           ; ...
lba_rd          db 0                    ; ...

; =============== S U B R O U T I N E =======================================


find_mini_partition proc near           ; ...
                push    bx              ; buffer offset
                lea     bx, [bx+1C2h]
                mov     cs:lba_rd, 0

fmpnext:                                ; ...
                cmp     byte ptr [bx], 5 ; EXTENDED DOS CHS
                jz      short fmpgot
                cmp     byte ptr [bx], 0Fh ; EXTENDED DOS LBA
                jz      short fmpgot_lba
                add     bx, 16

loc_1300:
                cmp     bx, 1FEh
                jb      short fmpnext

loc_1306:
                jmp     fmpnextfound
; ---------------------------------------------------------------------------

fmpgot_lba:                             ; ...
                mov     cs:lba_rd, 1
                mov     ax, [bx+4]
                mov     cs:ep_start_sector, ax
                mov     ax, [bx+6]
                mov     cs:ep_start_sector+2, ax
                mov     cs:ep_hidden_sectors, 0

loc_1324:
                mov     cs:ep_hidden_sectors+2, 0

fmpgot:                                 ; ...
                call    dmax_check
                jnb     fmpnextfound

loc_1332:
                mov     di, cs:word_590

loc_1337:
                or      word ptr es:[di+3Fh], 1
                mov     byte ptr es:[di+3Eh], 5
                mov     cs:fbigfat, 0
                mov     ax, cs:mini_hdlim
                mov     es:[di+15h], ax
                mov     ax, cs:mini_seclim
                mov     es:[di+13h], ax
                mov     al, cs:rom_minidisk_num
                mov     es:[di+4], al
                mov     al, cs:drvmax
                mov     es:[di+5], al
                cmp     word ptr [bx+0Ah], 0
                ja      short fmpgot_lba_rd
                cmp     word ptr [bx+8], 64
                jb      fmpnextfound

fmpgot_lba_rd:                          ; ...
                cmp     cs:lba_rd, 0
                jz      short fmpgot_chs_rd
                or      word ptr es:[di+3Fh], 400h ; set fLBArw flag ; LBA read/write ok/ready
                mov     ax, [bx+4]
                add     ax, cs:ep_hidden_sectors
                mov     dx, [bx+6]
                adc     dx, cs:ep_hidden_sectors+2
                push    ax
                mov     ax, cs:ep_start_sector
                mov     cs:ep_hidden_sectors, ax
                mov     ax, cs:ep_start_sector+2
                mov     cs:ep_hidden_sectors+2, ax
                pop     ax
                mov     es:[di+17h], ax ; [di+BDS.hiddensectors]
                mov     es:[di+19h], dx ; [di+BDS.hiddensectors+2]
                mov     ch, cs:rom_minidisk_num
                mov     cl, 1
                pop     bx
                push    bx
                call    LBA_read
                jmp     short fmpgot_cont
; ---------------------------------------------------------------------------

fmpgot_chs_rd:                          ; ...
                mov     dh, [bx-2]      ; cylinder
                and     dh, 0C0h        ; get higher bits of cyl
                rol     dh, 2
                mov     dl, [bx-1]      ; cyl byte
                mov     es:[di+7Bh], dx ; [di+BDS.bdsm_hidden_trks] ; set hidden trks
                mov     cx, [bx-2]      ; cylinder,cylinder/sector
                mov     dh, [bx-3]      ; head
                mov     dl, cs:rom_minidisk_num
                mov     ax, 201h
                pop     bx              ; buffer offset (bootbias)
                push    bx
                push    es
                push    ds
                pop     es
                int     13h             ; DISK - READ SECTORS INTO MEMORY
                                        ; AL = number of sectors to read, CH = track, CL = sector
                                        ; DH = head, DL = drive, ES:BX -> buffer to fill
                                        ; Return: CF set on error, AH = status, AL = number of sectors read
                pop     es

fmpgot_cont:                            ; ...
                jb      short fmpnextfound
                lea     bx, [bx+1C2h]
                push    es
                call    setmini         ; install a mini disk.
                                        ; bx value saved.
                pop     es
                jb      fmpnext
                call    xinstall_bds    ; -- install the bdsm into table
                jmp     fmpnext
; ---------------------------------------------------------------------------

fmpnextfound:                           ; ...
                pop     bx
                retn
find_mini_partition endp

; ---------------------------------------------------------------------------
_DAP_           dw 10h                  ; ...
_dap_scount     dw 1                    ; ...
_dap_b_offset   dw 0                    ; ...
_dap_b_segment  dw 0                    ; ...
_dap_sector_lw  dw 0                    ; ...
_dap_sector_hw  dw 0                    ; ...
_dap_sector_hd  dd 0

; =============== S U B R O U T I N E =======================================


LBA_read        proc near               ; ...
                mov     cs:_dap_b_offset, bx
                mov     cs:_dap_b_segment, ds
                mov     cs:_dap_sector_lw, ax
                mov     cs:_dap_sector_hw, dx
                mov     dl, ch
                xor     ch, ch
                mov     cs:_dap_scount, cx
                push    ds
                push    cs
                pop     ds
                mov     si, offset _DAP_
                mov     ax, 4200h
                int     13h             ; DISK - IBM/MS Extension
                                        ; EXTENDED READ (DL - drive, DS:SI - disk address packet)
                pop     ds
                retn
LBA_read        endp


; =============== S U B R O U T I N E =======================================


setmini         proc near               ; ...
                push    di
                push    bx
                push    ds
                push    es

setmini_1:                              ; ...
                mov     cs:FAT32_Partition, 0 ; false
                cmp     byte ptr [bx], 0Bh
                jnz     short setmini_2
                inc     cs:FAT32_Partition ; true
                jmp     short setmini_5
; ---------------------------------------------------------------------------

setmini_2:                              ; ...
                cmp     byte ptr [bx], 0Eh
                jz      short setmini_3
                cmp     byte ptr [bx], 0Ch
                jnz     short setmini_4
                inc     cs:FAT32_Partition ; true

setmini_3:                              ; ...
                or      word ptr es:[di+3Fh], 400h
                jmp     short setmini_5
; ---------------------------------------------------------------------------

setmini_4:                              ; ...
                cmp     byte ptr [bx], 1
                jz      short setmini_5
                cmp     byte ptr [bx], 4
                jz      short setmini_5
                cmp     byte ptr [bx], 6
                jz      short setmini_5
                add     bx, 16
                cmp     bx, 1FEh
                jb      short setmini_1
                stc
                pop     es
                pop     ds
                pop     bx
                pop     di
                retn
; ---------------------------------------------------------------------------

setmini_5:                              ; ...
                jmp     set2
setmini         endp


; =============== S U B R O U T I N E =======================================


dmax_check      proc near               ; ...
                cmp     cs:drvmax, 26
                jb      short dmax_ok
                push    es
                mov     es, cs:SYSINITSEG
                mov     es:TOOMANYDRIVESFLAG, 1
                pop     es

dmax_ok:                                ; ...
                retn
dmax_check      endp


; =============== S U B R O U T I N E =======================================


xinstall_bds    proc near               ; ...
                push    si
                mov     si, cs:start_bds ; get first bds

xinstall_bds_1:                         ; ...
                cmp     word ptr es:[si], 0FFFFh ; is this the last one?
                jz      short xinstall_bds_2 ; skip ahead if so
                mov     si, es:[si]     ; chain through list
                jmp     short xinstall_bds_1
; ---------------------------------------------------------------------------

xinstall_bds_2:                         ; ...
                mov     es:[si], di     ; [si+BDS.link]
                mov     word ptr es:[si+2], es ; [si+BDS.link+2]
                mov     word ptr es:[di], 0FFFFh ; [di+BDS.link] ; null ptr
                mov     word ptr es:[di+2], es ; [di+BDS.link+2]
                inc     cs:drvmax
                add     cs:word_590, 150 ; BDS.size = 150
                pop     si
                retn
xinstall_bds    endp


; =============== S U B R O U T I N E =======================================


sub_14C4        proc near               ; ...
                push    ds
                push    si
                sub     sp, 1Ah
                mov     si, sp
                mov     dl, al
                mov     ax, ss
                mov     ds, ax
                mov     word ptr [si], 1Ah
                mov     ah, 48h ; 'H'
                int     13h             ; DISK - IBM/MS Extension
                                        ; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
                jb      short loc_14F0
                xor     bl, bl
                mov     dh, [si+8]
                mov     al, [si+0Ch]
                mov     cx, [si+4]
                test    word ptr [si+2], 10h
                jz      short loc_14F0
                or      bl, 2

loc_14F0:                               ; ...
                lahf
                add     sp, 1Ah
                sahf
                pop     si
                pop     ds
                retn
sub_14C4        endp

; ---------------------------------------------------------------------------
                db 8 dup(0)
end_of_biosdata db 8000 dup(0)          ; ...
BIOSDATA        ends

; ===========================================================================

; Segment type: Pure data
DOSDATA         segment byte public 'DATA' use16
                assume cs:DOSDATA
                dw 0
no_bq           dw 0                    ; ...
DataVersion     dw 1
WinoldPatch1    db 8 dup(0)
MYNUM           dw 0                    ; ...
FCBLRU          dw 0                    ; ...
OpenLRU         dw 0
OEM_HANDLER     dd 0FFFFFFFFh
LeaveAddr       dw offset LeaveDOS      ; DOSCODE:LeaveDOS
RetryCount      dw 3                    ; ...
RetryLoop       dw 1                    ; ...
LastBuffer      dd 0FFFFFFFFh           ; ...
CONTPOS         dw 0                    ; ...
arena_head      dw 0                    ; ...
DPBHEAD         dd 0FFFFFFFFh           ; ...
SFT_ADDR        dw offset SFTABL        ; ...
SFT_ADDR_seg    dw 0                    ; ...
BCLOCK          dd 0                    ; ...
BCON            dd 0                    ; ...
MAXSEC          dw 128                  ; ...
BUFFHEAD        dd 0                    ; ...
CDSADDR         dd 0                    ; ...
SFTFCB          dd 0                    ; ...
KEEPCOUNT       dw 0
NUMIO           db 0                    ; ...
CDSCOUNT        db 0                    ; ...
NULDEV          dd 0                    ; ...
                dw 8004h
                dw offset SNULDEV
                dw offset INULDEV
                db 'NUL     '
SPLICES         db 0                    ; ...
Special_Entries dw 0
UU_IFS_DOS_CALL dd 0                    ; ...
ChkCopyProt     dw 0                    ; ...
                dw 0
                dw 0
                dw 0
BOOTDRIVE       db 0
DDMOVE          db 1
EXT_MEM_SIZE    dw 0
BufferQueue     dd 0                    ; ...
DirtyBufferCount dw 0                   ; ...
SC_CACHE_PTR    dd 0                    ; ...
SC_CACHE_COUNT  dw 0                    ; ...
BuffInHMA       db 0                    ; ...
LoMemBuff       dd 0                    ; ...
                dw offset ecritdisk_c
                dw offset word_476C
                db 0
IoStatFail      db 0                    ; ...
ALLOCMSAVE      db 0                    ; ...
A20OFF_COUNT    db 0                    ; ...
DOS_FLAG        db 40h                  ; ...
UNPACK_OFFSET   dw 0                    ; ...
UMBFLAG         db 0                    ; ...
SAVE_AX         dw 0                    ; ...
UMB_HEAD        dw 0FFFFh               ; ...
START_ARENA     dw 1                    ; ...
JShare          dd offset BadCall       ; ...
                dd offset OKCall
                dd offset OKCall
                dd offset BadCall
                dd offset BadCall
                dd offset BadCall
                dd offset BadCall
                dd offset BadCall
                dd offset OKCall
                dd offset BadCall
                dd offset BadCall
                dd offset BadCall
                dd offset OKCall
                dd offset BadCall
                dd offset BadCall
SFTABL          dd 0FFFFFFFFh           ; ...
                dw 5
SFT0_SFTable    db 295 dup(0)           ; ...
CARPOS          db 0                    ; ...
STARTPOS        db 0                    ; ...
INBUF           db 128 dup(0)           ; ...
CONBUF          db 131 dup(0)           ; ...
PFLAG           db 0                    ; ...
VDERFLG         db 0                    ; ...
CHARCO          db 3                    ; ...
chSwitch        db '/'
AllocMethod     db 0                    ; ...
fShare          db 0
DIFFNAM         db 1                    ; ...
MYNAME          db 10h dup(20h)         ; ...
CritPatch       dw offset redir_patch   ; ...
                dw offset redir_patch
                dw offset redir_patch
                dw offset redir_patch
                dw 0
                db 90h
ERRORMODE       db 0                    ; ...
INDOS           db 0                    ; ...
WPERR           db 0FFh                 ; ...
EXTERR_LOCUS    db 0                    ; ...
EXTERR          dw 0                    ; ...
EXTERR_ACTION   db 0                    ; ...
EXTERR_CLASS    db 0                    ; ...
EXTERRPT        dd 0                    ; ...
DMAADD          dd 80h                  ; ...
CurrentPDB      dw 0                    ; ...
ConC_Spsave     dw 0                    ; ...
exit_code       dw 0                    ; ...
CURDRV          db 0                    ; ...
CNTCFLAG        db 0                    ; ...
                db 0
                db 0
USER_IN_AX      dw 0                    ; ...
PROC_ID         dw 0                    ; ...
USER_ID         dw 0                    ; ...
FirstArena      dw 0                    ; ...
BestArena       dw 0                    ; ...
LastArena       dw 0                    ; ...
ENDMEM          dw 0                    ; ...
LASTENT         dw 0                    ; ...
FAILERR         db 0                    ; ...
ALLOWED         db 0                    ; ...
NoSetDir        db 0                    ; ...
DidCTRLC        db 0                    ; ...
SpaceFlag       db 0                    ; ...
                db 0
DAY             dw 0                    ; ...
YEAR            dw 0                    ; ...
DAYCNT          dw 0FFFFh
WEEKDAY         db 0                    ; ...
CONSWAP         db 0                    ; ...
IDLEINT         db 1                    ; ...
fAborting       db 0                    ; ...
DEVCALL_REQLEN  db 0                    ; ...
                                        ; offset DEVCALL
DEVCALL_REQUNIT db 0                    ; ...
DEVCALL_REQFUNC db 0                    ; ...
DEVCALL_REQSTAT dw 0                    ; ...
                db 8 dup(0)
CALLUNIT        db 0                    ; ...
CALLBR          db 0                    ; ...
CALLVIDM        db 0                    ; ...
CALLXAD_2       dw 0                    ; ...
CALLBPB         dw 0                    ; ...
CALLSSEC        dw 0                    ; ...
CALLVIDRW       dd 0                    ; ...
CALLNEWSC       dw 2 dup(0)             ; ...
CALLDEVAD       dw 2 dup(0)             ; ...
IOCALL          db 0                    ; ...
IOCALL_REQUNIT  db 0                    ; ...
IOCALL_REQFUNC  db 0                    ; ...
IOCALL_REQSTAT  dw 0                    ; ...
                db 8 dup(0)
IOMED           db 0                    ; ...
IOXAD           dw 2 dup(0)             ; ...
IOSCNT          dw 0                    ; ...
IOSSEC          dw 0                    ; ...
DSKSTCALL       db 14                   ; ...
                db 0
DSKSTCOM        db 5                    ; ...
DSKSTST         dw 0                    ; ...
                db 8 dup(0)
DSKCHRET        db 0                    ; ...
DEVIOBUF_PTR    dw offset DEVIOBUF      ; ...
DOSSEG_INIT     dw 0                    ; ...
DSKSTCNT        dw 1                    ; ...
                dw 0
CreatePDB       db 0                    ; ...
Lock_Buffer     dd 0                    ; ...
                dd 0
                db 90h
USERNUM         dw 0                    ; ...
USERNUM_2       dw 0FF00h               ; ...
TIMEBUF         dw 3 dup(0)             ; ...
DEVIOBUF        dw 0                    ; ...
OPENBUF         db 128 dup(0)           ; ...
RENBUF          db 128 dup(0)           ; ...
SEARCHBUF       db 53 dup(0)            ; ...
DUMMYCDS        db 88 dup(0)            ; ...
NAME1           db 12 dup(0)            ; ...
NAME2           db 13 dup(0)            ; ...
DESTSTART       dw 0                    ; ...
                db 5 dup(0)
ATTRIB          db 0                    ; ...
EXTFCB          db 0                    ; ...
SATTRIB         db 0                    ; ...
OPEN_ACCESS     db 0                    ; ...
FOUNDDEL        db 0                    ; ...
FOUND_DEV       db 0                    ; ...
FSPLICE         db 0                    ; ...
FSHARING        db 0                    ; ...
SECCLUSPOS      db 0                    ; ...
TRANS           db 0                    ; ...
READOP          db 0                    ; ...
THISDRV         db 0                    ; ...
CLUSFAC         db 0                    ; ...
CLUSSPLIT       db 0                    ; ...
INSMODE         db 0                    ; ...
CMETA           db 0                    ; ...
VOLID           db 0                    ; ...
EXIT_TYPE       dw 0                    ; ...
CREATING        db 0                    ; ...
DELALL          db 0                    ; ...
EXITHOLD        dd 0                    ; ...
USER_SP         dw 0                    ; ...
USER_SS         dw 0                    ; ...
CONTSTK         dw 0                    ; ...
THISDPB         dd 0                    ; ...
CLUSSAVE        dw 0                    ; ...
CLUSSEC         dd 0                    ; ...
PREREAD         dw 0                    ; ...
FATBYT          dw 0                    ; ...
FATBYTE         dw 0                    ; ...
DEVPT           dd 0                    ; ...
THISSFT         dd 0                    ; ...
THISCDS         dd 0                    ; ...
THISFCB         dd 0                    ; ...
SFN             dw 0FFFFh               ; ...
JFN             dw 0                    ; ...
PJFN            dd 0                    ; ...
WFP_START       dw 0                    ; ...
REN_WFP         dw 0                    ; ...
CURR_DIR_END    dw 0                    ; ...
NEXTADD         dw 0                    ; ...
LASTPOS         dw 0                    ; ...
CLUSNUM         dw 0                    ; ...
DIRSEC          dd 0                    ; ...
DIRSTART        dw 0                    ; ...
SECPOS          dd 0                    ; ...
VALSEC          dd 0                    ; ...
BYTSECPOS       dw 0                    ; ...
BYTPOS          dd 0                    ; ...
BYTCNT1         dw 0                    ; ...
BYTCNT2         dw 0                    ; ...
SECCNT          dw 0                    ; ...
ENTFREE         dw 0                    ; ...
ENTLAST         dw 0                    ; ...
NXTCLUSNUM      dw 0                    ; ...
GROWCNT         dd 0                    ; ...
CURBUF          dd 0                    ; ...
CONSFT          dw 2 dup(0)             ; ...
SAVEBX          dw 0                    ; ...
SAVEDS          dw 0                    ; ...
RESTORE_TMP     dw 0                    ; ...
NSS             dw 0                    ; ...
NSP             dw 0                    ; ...
EXTOPEN_FLAG    dw 0                    ; ...
EXTOPEN_ON      db 0                    ; ...
EXTOPEN_IO_MODE dw 0                    ; ...
SAVE_DI         dw 0
SAVE_ES         dw 0
SAVE_DX         dw 0
SAVE_CX         dw 0                    ; ...
SAVE_BX         dw 0                    ; ...
SAVE_SI         dw 0                    ; ...
SAVE_DS         dw 0
HIGH_SECTOR     dw 0                    ; ...
OffsetMagicPatch dw offset MagicPatch   ; ...
DISK_FULL       db 0                    ; ...
TEMP_VAR        dw 0                    ; ...
TEMP_VAR_2      dw 0                    ; ...
DrvErr          db 0                    ; ...
DOS34_FLAG      dw 0                    ; ...
                dd 0
                dd 0
AbsRdWr_SS      dw 0                    ; ...
AbsRdWr_SP      dw 0                    ; ...
                db 0
RENAMEDMA       db 384 dup(0)           ; ...
AUXSTACK        db 384 dup(0)           ; ...
DSKSTACK        db 384 dup(0)           ; ...
PRINTER_FLAG    db 0                    ; ...
VOLCHNG_FLAG    db 0                    ; ...
VIRTUAL_OPEN    db 0                    ; ...
LNE_COUNT       dw 0                    ; ...
LNE_DIRSTART    dd 0                    ; ...
LNE_DIRSECTOR   dd 0                    ; ...
LNE_CLUSTER     dd 0                    ; ...
LNE_LASTENT     dw 0                    ; ...
ENTLAST_PREV    dw 0                    ; ...
SRC_LNE         db 18 dup(0)            ; ...
DEST_LNE        db 18 dup(0)            ; ...
absdrw_extd     db 0                    ; ...
DIRSTART_HW     dw 0                    ; ...
CLUSNUM_HW      dw 0                    ; ...
NXTCLUSNUM_HW   dw 0                    ; ...
LASTPOS_HW      dw 0                    ; ...
FATBYT_HW       dw 0                    ; ...
DESTSTART_HW    dw 0                    ; ...
CLUSTNUM_HW     dw 0                    ; ...
CLUSDATA_HW     dw 0                    ; ...
CCONTENT_HW     dw 0                    ; ...
ROOTCLUST_HW    dw 0                    ; ...
CCOUNT_HW       dw 0                    ; ...
CLUSTERS_HW     dw 0                    ; ...
                dw 0
                dw 0
                db 0
SWAP_END        db 0                    ; ...
UCASE_TAB       dw 128                  ; ...
UCASE_TAB_2     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 3 dup(45h) ; ...
                db 3 dup(49h), 8Eh, 8Fh, 90h, 2 dup(92h), 4Fh, 99h, 4Fh
                db 2 dup(55h), 59h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh
                db 41h, 49h, 4Fh, 55h, 2 dup(0A5h), 0A6h, 0A7h, 0A8h, 0A9h
                db 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h
                db 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh
                db 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h
                db 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh
                db 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h
                db 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
                db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h
                db 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h
                db 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh
                db 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
FILE_UCASE_TAB  dw 80h                  ; ...
FILE_UCASE_TAB_2 db 80h, 9Ah, 90h, 5Fh, 8Eh, 5Fh, 8Fh, 80h, 6 dup(5Fh) ; ...
                db 8Eh, 8Fh, 90h, 2 dup(92h), 5Fh, 99h, 4 dup(5Fh), 99h
                db 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 4 dup(5Fh), 2 dup(0A5h)
                db 0A6h, 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh
                db 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
                db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h
                db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h
                db 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h
                db 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh
                db 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
                db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh
                db 0EEh, 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h
                db 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
COLLATE_TAB     dw 256                  ; ...
                db 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
                db 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
                db 29, 30, 31
                db ' !"#$%&',27h,'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                db '[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~'
                db 127
                db 'CUEAAAACEEEIIIAAEAAOOOUUYOU$$$$$AIOUNN'
                db 166
                db 167
                db '?'
                db 169, 170, 171, 172
                db '!""'
                db 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186
                db 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197
                db 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208
                db 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219
                db 220, 221, 222, 223, 224
                db 'S'
                db 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236
                db 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247
                db 248, 249, 250, 251, 252, 253, 254, 255
DBCS_TAB        db 20 dup(0)            ; ...
MSVERSION       db 8                    ; MSMAJORV
                db 0                    ; MSMINORV
YRTAB           db 200, 166
                db 200, 165
                db 200, 165
                db 200, 165
MONTAB          db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
FILE_CHAR_TAB   dw 22                   ; ...
                db 1, 0, 255
                db 0, 0, 20h
                db 2, 14
                db '."/\[]:|<>+=;,'
                db 24 dup(0)
SysInitTable    dw offset DPBHEAD       ; ...
                dw 3B4h
                dw offset COUNTRY_CDPG
                dw 3B4h
                db 3 dup(0)
TEMPSEG         dw 0                    ; ...
redir_patch     db 0                    ; ...
FixExePatch     dw 0                    ; ...
; ---------------------------------------------------------------------------

MAP_CASE:                               ; ...
                cmp     al, 80h
                jb      short L_RET
                sub     al, 80h
                push    ds
                push    bx
                mov     bx, offset UCASE_TAB_2 ; UCASE_TAB+2
                push    cs
                pop     ds
                xlat
                pop     bx
                pop     ds

L_RET:                                  ; ...
                retf
; ---------------------------------------------------------------------------
                db 34 dup(0)
USER_SP_2F      dw offset FAKE_STACK_2F ; ...
FAKE_STACK_2F   dw 14 dup(0)            ; ...
SCAN_FLAG       db 0                    ; ...
DATE_FLAG       dw 0                    ; ...
AbsDskErr       dw 0                    ; ...
NO_NAME_ID      db 'NO NAME    '        ; ...
                db 0
; ---------------------------------------------------------------------------

SNULDEV:                                ; ...
                or      word ptr es:[bx+3], 100h

INULDEV:                                ; ...
                retf
; ---------------------------------------------------------------------------
                db 0
                db 5 dup(0)
                db    0
                db    0
                db    0
                db    0
ERR_TABLE_21    db 1, 7, 4, 0FFh, 2, 8, 3, 2, 3, 8, 3, 2, 4, 1, 4, 1, 5 ; ...
                db 2 dup(3), 0FFh, 6, 7, 4, 1, 2 dup(7), 2 dup(5), 8, 1
                db 4, 5, 9, 7, 4, 5, 0Ah, 7, 4, 5, 0Bh, 9, 3, 1, 0Ch, 7
                db 4, 1, 0Dh, 9, 4, 1, 0Fh, 8, 3, 2, 10h, 2 dup(3), 2
                db 11h, 0Dh, 3, 2, 12h, 8, 3, 2, 50h, 0Ch, 3, 2, 20h, 0Ah
                db 2 dup(2), 21h, 0Ah, 2 dup(2), 54h, 1, 4, 0FFh, 56h
                db 2 dup(3), 1, 52h, 1, 4, 2, 32h, 9, 2 dup(3), 55h, 0Ch
                db 2 dup(3), 57h, 9, 3, 1, 53h, 0Dh, 4, 1, 24h, 1, 4, 5
                db 26h, 1, 4, 1, 27h, 1, 4, 1, 5Ah, 0Dh, 4, 2, 4 dup(0FFh)
ERR_TABLE_24    db 13h, 0Bh, 7, 2, 14h, 4, 5, 1, 15h, 5, 7, 0FFh, 16h ; ...
                db 4, 5, 1, 17h, 0Bh, 4, 2, 18h, 4, 5, 1, 19h, 5, 1, 2
                db 1Ah, 0Bh, 7, 2, 1Bh, 0Bh, 4, 2, 1Ch, 2, 7, 4, 1Dh, 5
                db 4, 0FFh, 1Eh, 5, 4, 0FFh, 1Fh, 0Dh, 4, 0FFh, 20h, 0Ah
                db 2 dup(2), 21h, 0Ah, 2 dup(2), 22h, 0Bh, 7, 2, 32h, 9
                db 2 dup(3), 23h, 7, 4, 1, 24h, 1, 4, 5, 0FFh, 0Dh, 5
                db 0FFh
ErrMap24        db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah, 1Bh, 1Ch, 1Dh ; ...
                db 1Eh, 3 dup(1Fh), 22h
SPECIAL_VERSION dw 0                    ; ...
OLD_FIRSTCLUS   dw 0
exec_init_SP    dw 0                    ; ...
exec_init_SS    dw 0                    ; ...
exec_init_IP    dw 0                    ; ...
exec_init_CS    dw 0                    ; ...
exec_signature  dw 0                    ; ...
exec_len_mod_512 dw 0
exec_pages      dw 0                    ; ...
exec_rle_count  dw 0                    ; ...
exec_par_dir    dw 0                    ; ...
exec_min_BSS    dw 0                    ; ...
exec_max_BSS    dw 0                    ; ...
exec_SS         dw 0                    ; ...
exec_SP         dw 0                    ; ...
exec_chksum     dw 0
exec_IP         dw 0                    ; ...
exec_CS         dw 0
exec_rle_table  dw 0                    ; ...
Win386_Info     db 4, 0
                dd 0
Win386_Inf_Virt_Dev_Ptr dd 0
                dd 0
Instance_Data_Ptr dw offset Instance_Table
Instance_Table_Seg dw 0FFFFh            ; ...
                dw offset Unknown_Table
Unknown_Table_Seg dw 0FFFFh             ; ...
Instance_Table  dw offset CONTPOS       ; ...
CONTPOS_seg     dw 0FFFFh               ; ...
                dw 2
                dw offset BCON
                dw 0FFFFh
                dw 4
                dw offset CARPOS
                dw 0FFFFh
                dw 106h
                dw offset CHARCO
                dw 0FFFFh
                dw 1
                dw offset exec_init_SP
                dw 0FFFFh
                dw 22h
                dw offset UMBFLAG
                dw 0FFFFh
                dw 1
                dw offset UMB_HEAD
                dw 0FFFFh
UMB_HEAD_parm   dw 2                    ; ...
                dw offset DOS_FLAG
                dw 0FFFFh
                dw 1
                dw offset INDOS_FLAG
                dw 0FFFFh
                dw 1
                dw offset DEVIO_IN_PROGRESS
                dw 0FFFFh
                dw 1
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
Unknown_Table   dw 0                    ; ...
Unknown_Table_2 dw 0FFFFh               ; ...
                dw offset SFTABL
                dw offset CARPOS
                dw 0FFFFh
Unknown1_Ptr    dw offset UNKNOWN1      ; ...
                dw 0
                dw 0
Win386_DOSVars  db 5
                db 0
                dw offset SAVEDS
                dw offset SAVEBX
                dw offset INDOS
                dw offset USER_ID
                dw offset CritPatch
                dw offset UMB_HEAD
IsWin386        db 2 dup(0)             ; ...
                db 36h, 0F6h, 6, 20h, 3, 0FFh ; Patch for Sidekick
                db 75h, 0Ch
                db 36h, 0FFh, 36h, 58h, 3
                db 0CDh, 28h
byte_43AC       db 80h, 3Eh, 20h, 3, 0  ; ...
                                        ; Patch for PortOfEntry
                db 75h, 37h
                db 0BCh, 0A0h, 0Ah
LocalSFT        dd 0                    ; ...
                dw 0
                dw 0
; ---------------------------------------------------------------------------

RatBugCode:
                push    cx
                mov     cx, ds:10h

rbc_loop:                               ; ...
                loop    rbc_loop
                pop     cx
                retf
; ---------------------------------------------------------------------------
                db 68h dup(0)
byte_442F       db 35h dup(0)
word_4464       dw 0                    ; ...
                db 0C9h dup(0)
byte_452F       db 5Ch dup(0)
UNKNOWN1        dw 0                    ; ...
                db 0A2h dup(0)
byte_462F       db 35h dup(0)
word_4664       dw 0                    ; ...
                dw 0
                dw 0
COUNTRY_CDPG    db 8 dup(0)             ; ...
aCountry_sys    db '\COUNTRY.SYS',0
                db 51 dup(0)
                dw 437
                dw 6
                db 2
                dw offset UCASE_TAB
                dw 3B4h
                db 4
                dw offset FILE_UCASE_TAB
                dw 3B4h
                db 5
                dw offset FILE_CHAR_TAB
                dw 3B4h
                db 6
                dw offset COLLATE_TAB
                dw 3B4h
                db 7
                dw offset DBCS_TAB
                dw 3B4h
                db 1
                dw 38
                dw 1
                dw 437
                dw 0
                db '$',0,0,0,0
                db ',',0
                db '.',0
                db '-',0
                db ':',0
                db 0
                db 2
                db 0
                dw offset MAP_CASE
                dw 3B4h                 ; DOSDATA segment
                db ',',0
                dw 5 dup(0)
INDOS_FLAG      db 0                    ; ...
DEVIO_IN_PROGRESS db 0                  ; ...
_ENU            db 'ENU',0
_USA            db 'USA',0
_US             db 'US'
                dw 1
                db 2
byte_4707       db 0
                dw 0
_AM             db 'AM',0
_PM             db 'PM',0
_MMDDYY         db 'M/d/yy     dddd,MMMMdd,yyyy         '
ecritdisk_c     db 0                    ; ...
                db 0
crit_sess_extr  db 0                    ; ...
                db 0
VxDpath         db 8 dup(0)             ; db 'c:\wina20.386',0 (PCDOS 7.1 DOSDATA:12F8h)
dosdata_1300h   db 4 dup(0)             ; ...
crit_sess_ptr   dw 2 dup(0)             ; ...
drive_flags     db 26 dup(0)            ; ...
                db 6 dup(0)
dword_4768      dd 0                    ; ...
word_476C       dw 4                    ; ...
                dw offset INDOS_FLAG
                dw offset drive_flags
                dw offset dword_4776
                dw offset _divov_
dword_4776      dd 0                    ; ...
_divov_         dd 0                    ; ...
; ---------------------------------------------------------------------------

MagicPatch:                             ; ...
                retf
; ---------------------------------------------------------------------------
                db 90h
                db 90h
                db 90h
                db 90h
                db 90h
                db 12 dup(0)
DOSDATA         ends

; ===========================================================================

; Segment type: Pure code
BIOSCODE        segment byte public 'CODE' use16
                assume cs:BIOSCODE
                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_4790      dd 0                    ; ...
                db    0
                db    0
                db    0
                db    0
word_4798       dw 0
unk_479A        db    0
unk_479B        db    0
unk_479C        db    0
unk_479D        db    0
unk_479E        db    0
unk_479F        db    0
                db    0
                db    0
dword_47A2      dd 0
unk_47A6        db    0
                db    0
unk_47A8        db    0
unk_47A9        db    0
                db    0
unk_47AB        db    0
                db    0
                db    0
word_47AE       dw 2 dup(0)             ; ...
                db    0
                db    0
unk_47B4        db    0
                db    0
unk_47B6        db    0
                db    0
unk_47B8        db    0
                db    0
unk_47BA        db    0
                db    0
unk_47BC        db    0
                db    0
unk_47BE        db    0
                db    0
unk_47C0        db  4Dh ; M
                db  53h ; S
unk_47C2        db 0FFh
                db 0FFh
unk_47C4        db    0
                db    0
unk_47C6        db    0
                db    0
unk_47C8        db    0
                db    0
unk_47CA        db    0
                db    0
unk_47CC        db    0
                db    0
                db    0
                db    0

; =============== S U B R O U T I N E =======================================


bc_cmderr       proc near               ; ...
                mov     al, 3

bc_err_cnt:                             ; ...
                les     bx, dword ptr ds:ptrsav

loc_47D6:
                sub     es:[bx+18], cx
                mov     ah, 81h
                stc
                retn
bc_cmderr       endp

; ---------------------------------------------------------------------------

loc_47DE:                               ; ...
                call    bc_cmderr
                jmp     loc_48DA
; ---------------------------------------------------------------------------
BIOSDATAWORD    dw 70h                  ; ...
byte_47E6       db 116 dup(0)
                db    0
                db    0
; ---------------------------------------------------------------------------

jmp_DIVOV:                              ; ...
                jmp     DIVOV
; ---------------------------------------------------------------------------
                db 6 dup(0)
; ---------------------------------------------------------------------------

chardev_entry:
                pusha
                push    ds
                push    es
                mov     bp, sp
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                mov     bx, [bp+14h]    ; get return address (dispatch table)
                mov     si, [bx]        ; point to the device dispatch table
                cmp     si, offset con_table
                jz      short loc_4886
                mov     ax, [bx+2]
                mov     cs:auxnum, al
                mov     byte ptr cs:printdev, ah

loc_4886:                               ; ...
                les     bx, ds:12h
                mov     al, es:[bx+1]
                mov     ah, es:[bx+0Dh]
                mov     cx, es:[bx+12h]
                mov     dx, es:[bx+14h]
                cmp     si, 0CB2h
                jnz     short loc_48B9
                mov     cs:word_53F9, 0
                cmp     dx, 0FFFFh
                jnz     short loc_48B9
                mov     dx, es:[bx+1Ch]
                mov     cs:word_53F9, dx
                mov     dx, es:[bx+1Ah]

loc_48B9:                               ; ...
                xchg    ax, di
                mov     al, es:[bx+2]
                cmp     al, cs:[si]
                jnb     loc_47DE
                cbw
                shl     ax, 1
                add     si, ax
                xchg    ax, di
                les     di, es:[bx+0Eh]
                cld

loc_48D0:
                push    ds
                call    word ptr cs:[si+1]
                pop     ds
                assume ds:nothing
                jb      short loc_48DA
                mov     ah, 1

loc_48DA:                               ; ...
                lds     bx, ds:12h
                mov     [bx+3], ax
                pop     es
                pop     ds
                popa
                add     sp, 2

addr_of_bcretf:                         ; ...
                retf
; ---------------------------------------------------------------------------
i19_lst         db 2                    ; ...
int19old02      dd 0FFFFFFFFh
                db 8
                dd 0FFFFFFFFh
                db 9
                dd 0FFFFFFFFh
                db 0Ah
                dd 0FFFFFFFFh
                db 0Bh
                dd 0FFFFFFFFh
                db 0Ch
                dd 0FFFFFFFFh
                db 0Dh
                dd 0FFFFFFFFh
                db 0Eh
int19old0E      dd 0FFFFFFFFh
                db 70h
                dd 0FFFFFFFFh
                db 72h
                dd 0FFFFFFFFh
                db 73h
                dd 0FFFFFFFFh
                db 74h
                dd 0FFFFFFFFh
                db 76h
                dd 0FFFFFFFFh
                db 77h
int19old77      dd 0FFFFFFFFh
; ---------------------------------------------------------------------------

loc_492E:                               ; ...
                sti
                or      ah, ah
                jnz     short loc_493B
                cmp     al, 7Fh
                jz      short locret_493A

loc_4937:                               ; ...
                call    sub_49EE

locret_493A:                            ; ...
                retf
; ---------------------------------------------------------------------------

loc_493B:                               ; ...
                cmp     ah, 11h
                jz      short loc_4937
                cmp     ah, 0Eh
                jnz     short locret_493A
                cmp     al, 7
                jz      short locret_493A
                cmp     al, 8
                jz      short locret_493A
                pusha
                push    ds
                push    es
                cmp     al, 0Dh
                jz      short loc_49D3
                sub     dx, dx
                mov     ds, dx
                assume ds:BIOSDATA
                mov     dx, himemsysdev
                cmp     dh, byte_484
                jnz     short loc_49D3
                mov     ah, byte ptr word_448+1
                cmp     ah, 7
                jz      short loc_4975
                cmp     ah, 2
                jb      short loc_49D3
                cmp     ah, 3

loc_4973:
                ja      short loc_49D3

loc_4975:                               ; ...
                cmp     word_44A, 80
                jnz     short loc_49D3

loc_497C:
                cmp     byte_462, 0
                jnz     short loc_49D3
                cmp     al, 10
                jz      short loc_498C
                cmp     dl, 79
                jnz     short loc_49D3

loc_498C:                               ; ...
                mov     si, 0B000h
                cmp     ah, 7
                jz      short loc_4997
                mov     si, 0B800h

loc_4997:                               ; ...
                mov     ds, si
                assume ds:nothing
                mov     es, si
                assume es:nothing
                mov     si, 160
                sub     di, di
                movzx   cx, dh
                imul    cx, si
                mov     bx, cx
                shr     cx, 2
                cmp     al, 10
                jz      short loc_49BE
                add     dl, dl
                mov     dh, 0
                add     bx, dx
                mov     [bx], al
                sub     bx, dx
                mov     ax, 0E0Dh
                int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
                                        ; AL = character, BH = display page (alpha modes)
                                        ; BL = foreground color (graphics modes)

loc_49BE:                               ; ...
                cld
                rep movsd
                mov     al, 20h ; ' '
                mov     ah, [bx+1]
                mov     cx, 80
                rep stosw
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                popa
                add     sp, 4
                iret
; ---------------------------------------------------------------------------

loc_49D3:                               ; ...
                pop     es
                pop     ds
                popa
                retf
; ---------------------------------------------------------------------------
                call    EraseVDiskHead
                iret
; ---------------------------------------------------------------------------
byte_49DB       db 0                    ; ...
; ---------------------------------------------------------------------------
                call    sub_49EE
                adc     cs:byte_49DB, 0
                push    bp
                mov     bp, sp
                and     byte ptr [bp+6], 0FEh
                pop     bp
                iret

; =============== S U B R O U T I N E =======================================


sub_49EE        proc near               ; ...
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                btr     word ptr ds:inHMA, 0Dh
                pop     ds
                assume ds:nothing
                jnb     locret_4A96
                inc     cs:byte_4D70
                jnz     short loc_4A15
                mov     cs:word_4D6E, ss
                mov     cs:word_4D6C, sp
                push    cs
                pop     ss
                assume ss:BIOSCODE
                mov     sp, 5DCh

loc_4A15:                               ; ...
                call    sub_4B0C
                pusha
                push    ds
                push    es
                push    ss
                pop     es
                assume es:BIOSCODE
                sub     sp, 38
                mov     di, sp
                call    sub_4B52
                cmp     byte ptr ds:484h, 2Ah ; '*'
                jnz     short loc_4A3B
                mov     ax, 1201h
                mov     bl, 30h ; '0'
                pushf
                cli
                call    dword ptr ds:85Ah
                mov     dx, ds:word_4C18

loc_4A3B:                               ; ...
                mov     ah, 0
                mov     al, ds:449h
                or      al, 80h
                pushf
                cli
                call    dword ptr ds:85Ah
                call    sub_4D71
                add     sp, 38
                cmp     es:byte_4C14, 2Ah ; '*'
                jb      short loc_4A69
                ja      short loc_4A5D
                mov     es:word_4C18, dx

loc_4A5D:                               ; ...
                mov     ax, 1112h
                mov     bl, 0
                pushf
                cli
                call    dword ptr es:loc_4FEA

loc_4A69:                               ; ...
                movzx   bx, es:byte_4BF2
                mov     di, bx
                mov     dx, es:[bx+di+450h]
                mov     bh, bl
                mov     ah, 2
                pushf
                cli
                call    dword ptr es:loc_4FEA
                pop     es
                assume es:nothing
                pop     ds
                popa
                dec     cs:byte_4D70
                jns     short loc_4A95

loc_4A8B:
                mov     ss, cs:word_4D6E
                assume ss:nothing

loc_4A90:
                mov     sp, cs:word_4D6C

loc_4A95:                               ; ...
                stc

locret_4A96:                            ; ...
                retn
sub_49EE        endp

; ---------------------------------------------------------------------------
off_4A97        dw offset locret_2B6    ; ...
                dw offset word_47AE+2
                dw offset dword_156
                dw offset locret_3B4
                dw offset off_40
                dw offset dword_15A
                dw 0

; =============== S U B R O U T I N E =======================================


sub_4AA5        proc near               ; ...
                cli
                cld
                pusha
                push    ds
                push    es
                push    eax
                push    edx
                sub     ax, ax

loc_4AB0:
                mov     es, ax
                assume es:BIOSDATA

loc_4AB2:
                mov     ax, 70h

loc_4AB5:
                mov     ds, ax
                assume ds:nothing

loc_4AB7:
                test    ds:int19sem, 20h

loc_4ABC:
                jz      short loc_4B03

loc_4ABE:
                rol     eax, 16

loc_4AC2:
                mov     si, offset off_4A97

loc_4AC5:                               ; ...
                lods    word ptr cs:[si]
                or      ax, ax

loc_4AC9:
                jz      short loc_4AFE
                xchg    ax, bx

loc_4ACC:                               ; iret
                cmp     byte ptr [bx], 0CFh

loc_4ACF:
                jz      short loc_4AE3

loc_4AD1:
                cmp     word ptr [bx+3], 70h

loc_4AD5:
                jz      short loc_4ADE

loc_4AD7:
                lea     ax, [bx+5]

loc_4ADA:
                mov     [bx+1], eax

loc_4ADE:                               ; ...
                add     si, 4
                jmp     short loc_4AC5
; ---------------------------------------------------------------------------

loc_4AE3:                               ; ...
                mov     byte ptr [bx], 0EAh

loc_4AE6:
                lods    word ptr cs:[si]
                xchg    ax, bx

loc_4AE9:
                xchg    eax, es:[bx]

loc_4AED:
                mov     bx, cs:[si]
                add     si, 2
                mov     [bx], eax

loc_4AF6:
                mov     ax, ds

loc_4AF8:
                rol     eax, 10h

loc_4AFC:
                jmp     short loc_4AC5
; ---------------------------------------------------------------------------

loc_4AFE:                               ; ...
                mov     byte ptr ds:3CDh, 3Ch ; '<'

loc_4B03:                               ; ...
                pop     edx
                pop     eax
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                popa
                sti
                retn
sub_4AA5        endp


; =============== S U B R O U T I N E =======================================


sub_4B0C        proc near               ; ...
                cli
                cld

loc_4B0E:
                pusha

loc_4B0F:
                push    ds

loc_4B10:
                push    es
                push    eax
                push    edx
                sub     ax, ax
                mov     es, ax
                assume es:BIOSDATA

loc_4B19:
                mov     ax, 70h

loc_4B1C:
                mov     ds, ax
                assume ds:nothing

loc_4B1E:
                rol     eax, 10h

loc_4B22:
                mov     si, 307h

loc_4B25:                               ; ...
                lods    word ptr cs:[si]
                or      ax, ax
                jz      short loc_4B44
                xchg    ax, bx
                cmp     byte ptr [bx], 0CFh

loc_4B2F:
                jz      short loc_4B3F

loc_4B31:
                lods    word ptr cs:[si]

loc_4B33:
                lods    word ptr cs:[si]
                xchg    ax, di
                mov     edx, [di]
                mov     [bx+1], edx
                jmp     short loc_4B25
; ---------------------------------------------------------------------------

loc_4B3F:                               ; ...
                add     si, 4
                jmp     short loc_4B25
; ---------------------------------------------------------------------------

loc_4B44:                               ; ...
                mov     byte ptr ds:3CDh, 0EBh
                pop     edx

loc_4B4B:
                pop     eax
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                popa
                sti
                retn
sub_4B0C        endp


; =============== S U B R O U T I N E =======================================


sub_4B52        proc near               ; ...
                push    di
                sub     cx, cx
                mov     ds, cx
                assume ds:BIOSDATA
                cld
                mov     si, 410h
                movsb
                mov     si, 449h
                mov     cl, 30
                rep movsb
                mov     si, 484h
                mov     cl, 7
                rep movsb
                pop     di
                retn
sub_4B52        endp

; ---------------------------------------------------------------------------
                db 3Fh dup(0)
                db 9 dup(0)
                db 22h dup(0)
                db    0
                db    0
                db    0
                db    0
                db 6 dup(0)
                db 12h dup(0)
byte_4BF2       db 0                    ; ...
                db 21h dup(0)
byte_4C14       db 0                    ; ...
                db    0
                db    0
                db    0
word_4C18       dw 0                    ; ...
                db 27h dup(0)
                db 34h dup(0)
                db 4 dup(0)
                db 48h dup(0)
                db 16h dup(0)
byte_4CD7       db 27h dup(0)
byte_4CFE       db 16h dup(0)
unk_4D14        db    0
                db    0
unk_4D16        db    0
                db    0
unk_4D18        db    0
                db    0
unk_4D1A        db    0
                db    0
unk_4D1C        db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_4D26        db    0
                db    0
                db    0
                db    0
unk_4D2A        db    0
                db    0
unk_4D2C        db    0
                db    0
dword_4D2E      dd 0
unk_4D32        db    0
                db    0
unk_4D34        db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_4D3A        db    0
                db    0
unk_4D3C        db    0
                db    0
unk_4D3E        db    0
                db    0
unk_4D40        db    0
                db    0
unk_4D42        db    0
                db    0
unk_4D44        db    0
                db    0
unk_4D46        db    0
                db    0
unk_4D48        db    0
                db    0
unk_4D4A        db    0
                db    0
unk_4D4C        db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_4D52        db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
byte_4D62       db 0Ah dup(0)
word_4D6C       dw 0                    ; ...
word_4D6E       dw 0                    ; ...
byte_4D70       db 0FFh                 ; ...

; =============== S U B R O U T I N E =======================================


sub_4D71        proc near               ; ...
                push    es

loc_4D72:
                pop     ds
                assume ds:nothing

loc_4D73:
                mov     si, di
                sub     cx, cx
                mov     es, cx
                assume es:BIOSDATA
                cld

loc_4D7A:
                mov     di, 410h
                movsb
                mov     di, 449h
                mov     cl, 30

loc_4D83:
                rep movsb

loc_4D85:
                mov     di, 484h
                mov     cl, 7
                rep movsb
                retn
sub_4D71        endp

; ---------------------------------------------------------------------------
                push    ax
                push    ds

loc_4D8F:
                push    es

loc_4D90:
                mov     es, cs:BIOSDATAWORD
                assume es:nothing

loc_4D95:
                and     ah, 0EFh

loc_4D98:
                cmp     ah, 1

loc_4D9B:
                jb      short loc_4DD1

loc_4D9D:
                jz      short loc_4DA4

loc_4D9F:
                cmp     ah, 2

loc_4DA2:
                ja      short loc_4DD4

loc_4DA4:                               ; ...
                sub     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     ax, word ptr dword_46C ; Counter for Interrupt 1Ah

loc_4DAB:
                cmp     ax, es:word_446
                jnz     short loc_4DC4
                inc     es:word_448
                mov     ax, es:word_44A
                cmp     es:word_448, ax
                jb      short loc_4DD4
                jmp     short loc_4DD1
; ---------------------------------------------------------------------------

loc_4DC4:                               ; ...
                mov     es:word_446, ax
                mov     es:word_448, 0
                jmp     short loc_4DD4
; ---------------------------------------------------------------------------

loc_4DD1:                               ; ...
                call    sub_49EE

loc_4DD4:                               ; ...
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                pop     ax
                retf
; ---------------------------------------------------------------------------
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                cld
                sub     dx, dx
                mov     es, dx          ; 0
                assume es:BIOSDATA
                or      dx, es:word_40E
                jz      short restore_romvects ; ROMBIOS data area lw is zero
                mov     ax, 0
                sub     es:word_413, ax
                shl     ax, 9
                jz      short restore_romvects
                mov     cx, es:word_413
                shl     cx, 6
                push    ds
                push    es
                mov     es, cx
                assume es:nothing
                mov     ds, dx
                assume ds:nothing
                xchg    ax, cx
                sub     si, si
                sub     di, di
                rep movsw
                pop     es
                pop     ds
                assume ds:nothing
                mov     es:40Eh, ax

restore_romvects:                       ; ...
                mov     cx, 9
                mov     si, offset RomVectors

next_int:                               ; ...
                lodsb
                cbw
                shl     ax, 2
                xchg    ax, di
                movsw
                movsw
                loop    next_int
                test    ds:int19sem, 1
                jz      short doint19
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     si, offset i19_lst
                mov     cx, 14

i19_restore_loop:                       ; ...
                lodsb
                cbw
                xchg    ax, di
                lodsw
                xchg    ax, bx
                lodsw
                cmp     bx, 0FFFFh
                jz      short i19_restor_1
                shl     di, 2
                xchg    ax, bx
                stosw
                xchg    ax, bx
                stosw

i19_restor_1:                           ; ...
                loop    i19_restore_loop

doint19:                                ; ...
                call    EraseVDiskHead
                retf
; ---------------------------------------------------------------------------
                push    ax
                push    si
                push    di
                push    bp
                push    bx
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                mov     ds, ds:DosDataSg
                assume ds:nothing
                test    ds:DOS_FLAG, 10h
                mov     ah, 0Eh
                mov     bx, 7
                jz      short loc_4EB8
                cmp     al, 0Dh
                jz      short loc_4EB8
                xor     si, si
                mov     ds, si
                assume ds:BIOSDATA
                cmp     al, 20h ; ' '
                jb      short loc_4EB1
                cmp     byte ptr word_448+1, 3
                jnz     short loc_4EB1
                cmp     word_44A, 50h ; 'P'
                jnz     short loc_4EB1
                cmp     byte_462, 0
                jnz     short loc_4EB1
                cmp     byte ptr himemsysdev, 4Fh ; 'O'
                jz      short loc_4EB1
                push    dx
                mov     bl, al
                mov     di, word_44E
                mov     dx, himemsysdev
                inc     byte ptr himemsysdev
                mov     ax, 0A0h
                mul     dh
                xor     dh, dh
                shl     dx, 1
                add     ax, dx
                add     di, ax
                mov     ax, 0B800h
                mov     ds, ax
                assume ds:nothing
                mov     [di], bl
                pop     dx
                jmp     short loc_4EBA
; ---------------------------------------------------------------------------

loc_4EB1:                               ; ...
                pushf
                call    dword ptr ds:40h
                jmp     short loc_4EBA
; ---------------------------------------------------------------------------

loc_4EB8:                               ; ...
                int     10h             ; - VIDEO -

loc_4EBA:                               ; ...
                pop     ds
                assume ds:nothing
                pop     bx
                pop     bp
                pop     di
                pop     si
                pop     ax
                iret

; =============== S U B R O U T I N E =======================================


EraseVDiskHead  proc near               ; ...
                push    ax
                push    cx
                push    di
                push    es
                mov     es, cs:BIOSDATAWORD
                assume es:nothing
                test    es:inHMA, 1
                jz      short evdh_ret
                mov     ax, 0FFFFh
                mov     es, ax
                assume es:nothing
                mov     di, 10h
                mov     cx, 10h
                sub     ax, ax
                cld
                rep stosw               ; clear it

evdh_ret:                               ; ...
                pop     es
                assume es:nothing
                pop     di
                pop     cx
                pop     ax
                retn
EraseVDiskHead  endp

; ---------------------------------------------------------------------------
                push    si
                push    ds
                cld
                push    cs
                pop     ds
                assume ds:BIOSCODE
                dec     ax
                jnz     short loc_4EF8
                mov     si, offset sngmsg ; "\r\nInsert diskette for drive "
                add     si, word_74EE
                jmp     short loc_4F1A
; ---------------------------------------------------------------------------

loc_4EF8:                               ; ...
                dec     ax
                jnz     short loc_4F04
                mov     si, offset sngmsg ; "\r\nInsert diskette for drive "
                add     si, word_74F0
                jmp     short loc_4F1A
; ---------------------------------------------------------------------------

loc_4F04:                               ; ...
                dec     ax
                jnz     short loc_4F10
                mov     si, offset sngmsg ; "\r\nInsert diskette for drive "
                add     si, word_74F2
                jmp     short loc_4F1A
; ---------------------------------------------------------------------------

loc_4F10:                               ; ...
                dec     ax
                jnz     short loc_4F28
                mov     si, offset sngmsg ; "\r\nInsert diskette for drive "
                add     si, word_74F4

loc_4F1A:                               ; ...
                lodsb
                cmp     al, 24h ; '$'
                jz      short loc_4F28
                mov     ah, 0Eh
                mov     bx, 7
                int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
                                        ; AL = character, BH = display page (alpha modes)
                                        ; BL = foreground color (graphics modes)
                jmp     short loc_4F1A
; ---------------------------------------------------------------------------

loc_4F28:                               ; ...
                pop     ds
                assume ds:nothing
                pop     si
                retf
; ---------------------------------------------------------------------------
printdev        dw 0                    ; ...
wait_count      dw 4 dup(50h)           ; retry counts for printers
auxnum          db 0                    ; ...
                db 5 dup(0)
base_century    db 19                   ; ...
base_year       db 80                   ; ...
month_tab       db 31
february        db 28                   ; ...
                db 31
                db 30
                db 31
                db 30
                db 31
                db 31
                db 30
                db 31
                db 30
                db 31
bin_date_time   db 4 dup(0)             ; ...
month_table     dw 0                    ; ...
                dw 31
                dw 59
                dw 90
                dw 120
                dw 151
                dw 181
                dw 212
                dw 243
                dw 273
                dw 304
                dw 334
con_table       db 11                   ; ...
                dw offset bc_exvec
                dw offset bc_exvec
                dw offset bc_exvec
                dw offset bc_cmderr
                dw offset con_read
                dw offset con_rdnd
                dw offset bc_exvec
                dw offset con_flush
                dw offset con_writ
                dw offset con_writ
                dw offset bc_exvec
prn_table       db 1
                dw offset bc_exvec
aux_table       db 1
                dw offset bc_exvec
tim_table       db 10
                dw offset bc_exvec
                dw offset bc_exvec
                dw offset bc_exvec
                dw offset bc_cmderr
                dw offset tim_read
                dw offset z_bus_exit
                dw offset bc_exvec
                dw offset bc_exvec
                dw offset tim_writ
                dw offset tim_writ
himemsys_table  db 1
                dw offset bc_exvec
; ---------------------------------------------------------------------------

con_read:                               ; ...
                jcxz    short con_exit

con_loop:                               ; ...
                call    chrin
                stosb
                loop    con_loop

con_exit:                               ; ...
                clc
                retn

; =============== S U B R O U T I N E =======================================


chrin           proc near               ; ...
                mov     ah, ds:keyrd_func
                xor     al, al
                xchg    al, ds:altah
                or      al, al
                jnz     short keyret
                int     16h             ; KEYBOARD -
                or      ax, ax
                jz      short chrin
                cmp     ax, 7200h       ; check for ctrl-prtsc
                jnz     short alt_ext_chk
                mov     al, 10h
                jmp     short keyret
; ---------------------------------------------------------------------------

alt_ext_chk:                            ; ...
                cmp     ds:keyrd_func, 0
                jz      short not_ext
                cmp     al, 0E0h
                jnz     short not_ext
                or      ah, ah
                jz      short keyret
                xor     al, al
                jmp     short alt_save
; ---------------------------------------------------------------------------

not_ext:                                ; ...
                or      al, al
                jnz     short keyret

alt_save:                               ; ...
                mov     ds:altah, ah

keyret:                                 ; ...
                retn
chrin           endp

; ---------------------------------------------------------------------------

con_rdnd:                               ; ...
                mov     al, ds:altah
                or      al, al
                jnz     short rdexit
                mov     ah, ds:keysts_func
                int     16h             ; KEYBOARD -

loc_4FEA:                               ; ...
                jnz     short gotchr

z_bus_exit:                             ; ...
                stc
                mov     ah, 3
                retn
; ---------------------------------------------------------------------------

gotchr:                                 ; ...
                or      ax, ax
                jnz     short notbrk
                mov     ah, ds:keyrd_func
                int     16h             ; KEYBOARD -
                jmp     short con_rdnd
; ---------------------------------------------------------------------------

notbrk:                                 ; ...
                cmp     ax, 7200h       ; check for ctrl-prtsc
                jnz     short rd_ext_chk
                mov     al, 10h
                jmp     short rdexit
; ---------------------------------------------------------------------------

rd_ext_chk:                             ; ...
                cmp     ds:keyrd_func, 0
                jz      short rdexit
                cmp     al, 0E0h
                jnz     short rdexit
                cmp     ah, 0
                jz      short rdexit
                mov     al, 0

rdexit:                                 ; ...
                les     bx, dword ptr ds:ptrsav
                mov     es:[bx+0Dh], al

bc_exvec:                               ; ...
                clc
                retn
; ---------------------------------------------------------------------------

con_writ:                               ; ...
                jcxz    short bc_exvec

loc_5023:                               ; ...
                mov     al, es:[di]
                inc     di
                int     29h             ; DOS 2+ internal - FAST PUTCHAR
                                        ; AL = character to display
                loop    loc_5023
; START OF FUNCTION CHUNK FOR con_flush

loc_502B:                               ; ...
                clc
                retn
; END OF FUNCTION CHUNK FOR con_flush

; =============== S U B R O U T I N E =======================================


con_flush       proc near               ; ...

; FUNCTION CHUNK AT 089B SIZE 00000002 BYTES

                mov     ds:altah, 0

loc_5032:                               ; ...
                mov     ah, 1
                int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                        ; Return: ZF clear if character in buffer
                                        ; AH = scan code, AL = character
                                        ; ZF set if no character in buffer
                jz      short loc_502B
                xor     ah, ah
                int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                        ; Return: AH = scan code, AL = character
                jmp     short loc_5032
con_flush       endp

; ---------------------------------------------------------------------------

tim_writ:                               ; ...
                mov     ax, es:[di]
                push    ax
                cmp     cx, 6
                jb      short loc_5096
                mov     al, es:[di+3]
                cmp     al, 18h
                jnb     short loc_5096
                call    sub_53D1
                mov     ch, al
                mov     al, es:[di+2]
                cmp     al, 3Ch ; '<'
                jnb     short loc_5096
                call    sub_53D1
                mov     cl, al
                mov     al, es:[di+5]
                cmp     al, 3Ch ; '<'
                jnb     short loc_5096
                call    sub_53D1
                mov     dh, al
                mov     dl, 0
                cli
                mov     ah, 3
                int     1Ah             ; CLOCK - SET REAL TIME CLOCK (AT,XT286,CONV,PS)
                                        ; CH = hours in BCD, CL = minutes in BCD
                                        ;  DH = seconds in BCD,DL = 01h if daylight savings, 00h if standard time
                                        ; Return: CMOS clock set
                sti
                mov     cx, es:[di+2]
                mov     dx, es:[di+4]
                call    sub_5099
                cli
                mov     ah, 1
                int     1Ah             ; CLOCK - SET TIME OF DAY
                                        ; CX:DX = clock count
                                        ; Return: time of day set
                pop     word ptr ds:444h
                sti
                call    sub_5313
                cli
                mov     ah, 5
                int     1Ah             ; CLOCK - SET DATE IN REAL TIME CLOCK (AT,XT286,CONV,PS)
                                        ; DL = day in BCD, DH = month in BCD, CL = year in BCD
                                        ; CH = century (19h or 20h)
                                        ; Return: CMOS clock set
                sti
                jmp     short loc_5097
; ---------------------------------------------------------------------------

loc_5096:                               ; ...
                pop     ax

loc_5097:                               ; ...
                clc
                retn

; =============== S U B R O U T I N E =======================================


sub_5099        proc near               ; ...
                mov     al, 3Ch ; '<'
                mul     ch
                mov     ch, 0
                add     ax, cx
                mov     cx, 1770h
                mov     bx, dx
                mul     cx
                mov     cx, ax
                mov     al, 64h ; 'd'
                mul     bh
                add     cx, ax
                adc     dx, 0
                mov     bh, 0
                add     cx, bx
                adc     dx, 0
                xchg    ax, dx
                xchg    ax, cx
                mov     bx, 0E90Bh
                mul     bx
                xchg    dx, cx
                xchg    ax, dx
                mul     bx
                add     ax, cx
                adc     dx, 0
                xchg    ax, dx
                mov     bx, 5
                div     bl
                mov     cl, al
                mov     ch, 0
                mov     al, ah
                cbw
                xchg    ax, dx
                div     bx
                mov     dx, ax
                retn
sub_5099        endp

; ---------------------------------------------------------------------------
byte_50DE       db 0FFh                 ; ...
; ---------------------------------------------------------------------------

loc_50DF:                               ; ...
                call    sub_5169
                dec     cs:byte_50DE
                jmp     short loc_50F5
; ---------------------------------------------------------------------------

tim_read:                               ; ...
                inc     word ptr ds:448h
                cmp     cs:byte_50DE, 0
                jnz     short loc_50DF

loc_50F5:                               ; ...
                call    GetTickCnt
                mov     ax, cx
                mov     bx, dx
                shl     dx, 1
                rcl     cx, 1
                shl     dx, 1
                rcl     cx, 1
                add     dx, bx
                adc     ax, cx
                xchg    ax, dx
                mov     cx, 0E90Bh
                div     cx
                mov     bx, ax
                xor     ax, ax
                div     cx
                mov     dx, bx
                mov     cx, 0C8h
                div     cx
                cmp     dl, 64h ; 'd'
                jb      short loc_5123
                sub     dl, 64h ; 'd'

loc_5123:                               ; ...
                cmc
                mov     bl, dl
                rcl     ax, 1
                mov     dl, 0
                rcl     dx, 1
                mov     cx, 3Ch ; '<'
                div     cx
                mov     bh, dl
                div     cl
                xchg    al, ah
                push    ax
                mov     ax, ds:444h
                stosw
                pop     ax
                stosw
                mov     ax, bx
                stosw
                clc
                retn

; =============== S U B R O U T I N E =======================================


GetTickCnt      proc near               ; ...
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                sub     ah, ah
                int     1Ah             ; CLOCK - GET TIME OF DAY
                                        ; Return: CX:DX = clock count
                                        ; AL = 00h if clock was read or written (via AH=0,1) since the previous
                                        ; midnight
                                        ; Otherwise, AL > 0
                test    byte ptr ds:8, 80h
                jnz     short loc_515C
                xor     ah, ah
                add     ds:444h, ax
                jmp     short loc_5167
; ---------------------------------------------------------------------------

loc_515C:                               ; ...
                or      al, al
                jz      short loc_5167
                inc     word ptr ds:444h
                call    sub_5169

loc_5167:                               ; ...
                pop     ds
                assume ds:nothing
                retn
GetTickCnt      endp


; =============== S U B R O U T I N E =======================================


sub_5169        proc near               ; ...
                call    read_real_date
                call    sub_522E
                mov     ah, 1
                int     1Ah             ; CLOCK - SET TIME OF DAY
                                        ; CX:DX = clock count
                                        ; Return: time of day set
                retn
sub_5169        endp


; =============== S U B R O U T I N E =======================================


read_real_date  proc near               ; ...
                push    ax
                push    bx
                push    cx
                push    dx
                push    ds
                push    cs
                pop     ds
                assume ds:BIOSCODE
                push    es
                mov     es, BIOSDATAWORD
                assume es:nothing
                xor     ah, ah
                int     1Ah             ; CLOCK - GET TIME OF DAY
                                        ; Return: CX:DX = clock count
                                        ; AL = 00h if clock was read or written (via AH=0,1) since the previous
                                        ; midnight
                                        ; Otherwise, AL > 0
                mov     es:daycnt2, 1
                mov     ah, 4
                int     1Ah             ; CLOCK - READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
                                        ; Return: DL = day in BCD
                                        ; DH = month in BCD
                                        ; CL = year in BCD
                                        ; CH = century (19h or 20h)
                jnb     short read_ok
                jmp     r_d_ret
; ---------------------------------------------------------------------------

read_ok:                                ; ...
                mov     bin_date_time, ch
                mov     bin_date_time+1, cl
                mov     bin_date_time+2, dh
                mov     bin_date_time+3, dl
                mov     es:daycnt2, 2
                call    bcd_verify
                jb      short r_d_ret
                mov     es:daycnt2, 3
                call    date_verify
                jb      short r_d_ret
                mov     es:daycnt2, 0
                call    in_bin
                mov     al, bin_date_time+1
                cbw
                cmp     bin_date_time, 20
                jnz     short century_19
                add     ax, 100

century_19:                             ; ...
                sub     ax, 80
                mov     cl, 4
                div     cl
                mov     bl, ah
                cbw
                mov     cx, 1461
                mul     cx
                mov     es:daycnt2, ax
                mov     al, bl
                cbw
                or      ax, ax
                jz      short leap_year
                mov     cx, 365
                mul     cx
                add     es:daycnt2, ax
                jmp     short eap_adjustment
; ---------------------------------------------------------------------------

leap_year:                              ; ...
                cmp     bin_date_time+2, 2
                jbe     short no_leap_adjustment

eap_adjustment:                         ; ...
                inc     es:daycnt2

no_leap_adjustment:                     ; ...
                mov     cl, bin_date_time+3
                xor     ch, ch
                dec     cx
                add     es:daycnt2, cx
                mov     cl, bin_date_time+2

loc_5216:
                xor     ch, ch
                dec     cx
                shl     cx, 1
                mov     bx, offset month_table
                add     bx, cx
                mov     ax, [bx]
                add     es:daycnt2, ax

r_d_ret:                                ; ...
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                retn
read_real_date  endp


; =============== S U B R O U T I N E =======================================


sub_522E        proc near               ; ...
                push    ds
                push    cs
                pop     ds
                assume ds:BIOSCODE

loc_5231:
                mov     ah, 2
                int     1Ah             ; CLOCK - READ REAL TIME CLOCK (AT,XT286,CONV,PS)
                                        ; Return: CH = hours in BCD
                                        ; CL = minutes in BCD
                                        ; DH = seconds in BCD
                jb      short loc_526A
                mov     bin_date_time, ch
                mov     bin_date_time+1, cl
                mov     bin_date_time+2, dh
                mov     bin_date_time+3, 0
                call    bcd_verify
                jb      short loc_526A
                call    sub_52D6
                jb      short loc_526A
                call    in_bin
                mov     ch, bin_date_time
                mov     cl, bin_date_time+1
                mov     dh, bin_date_time+2
                mov     dl, bin_date_time+3
                call    sub_5099

loc_5268:
                jmp     short loc_526E
; ---------------------------------------------------------------------------

loc_526A:                               ; ...
                xor     cx, cx

loc_526C:
                xor     dx, dx

loc_526E:                               ; ...
                pop     ds
                assume ds:nothing
                retn
sub_522E        endp


; =============== S U B R O U T I N E =======================================


in_bin          proc near               ; ...
                mov     al, ds:7B9h
                call    sub_53D9

loc_5276:
                mov     ds:7B9h, al

loc_5279:
                mov     al, ds:7BAh

loc_527C:
                call    sub_53D9

loc_527F:
                mov     ds:7BAh, al
                mov     al, ds:7BBh
                call    sub_53D9

loc_5288:
                mov     ds:7BBh, al
                mov     al, ds:7BCh
                call    sub_53D9
                mov     ds:7BCh, al
                retn
in_bin          endp


; =============== S U B R O U T I N E =======================================


date_verify     proc near               ; ...
                push    ax
                cmp     byte ptr ds:7B9h, 20h ; ' '
                ja      short loc_52D3
                jz      short loc_52AD
                cmp     byte ptr ds:7B9h, 19h
                jb      short loc_52D3
                cmp     byte ptr ds:7BAh, 80h
                jb      short loc_52D3

loc_52AD:                               ; ...
                cmp     byte ptr ds:7BAh, 99h
                ja      short loc_52D3
                cmp     byte ptr ds:7BBh, 12h
                ja      short loc_52D3
                cmp     byte ptr ds:7BBh, 0
                jbe     short loc_52D3
                cmp     byte ptr ds:7BCh, 31h ; '1'
                ja      short loc_52D3
                cmp     byte ptr ds:7BCh, 0
                jbe     short loc_52D3
                clc
                pop     ax
                retn
; ---------------------------------------------------------------------------

loc_52D3:                               ; ...
                pop     ax
                stc
                retn
date_verify     endp


; =============== S U B R O U T I N E =======================================


sub_52D6        proc near               ; ...
                cmp     byte ptr ds:7B9h, 24h ; '$'
                ja      short loc_52ED
                cmp     byte ptr ds:7BAh, 59h ; 'Y'
                ja      short loc_52ED
                cmp     byte ptr ds:7BBh, 59h ; 'Y'
                ja      short loc_52ED
                clc
                retn
; ---------------------------------------------------------------------------

loc_52ED:                               ; ...
                stc
                retn
sub_52D6        endp


; =============== S U B R O U T I N E =======================================


bcd_verify      proc near               ; ...
                mov     cx, 4
                mov     bx, 7B9h

loc_52F5:                               ; ...
                mov     al, [bx]
                mov     ah, al
                and     ax, 0F00Fh
                cmp     al, 0Ah
                ja      short loc_5311
                shr     ah, 4
                and     ah, 0Fh
                cmp     ah, 0Ah
                ja      short loc_5311
                inc     bx
                dec     cx
                jnz     short loc_52F5
                clc
                retn
; ---------------------------------------------------------------------------

loc_5311:                               ; ...
                stc
                retn
bcd_verify      endp


; =============== S U B R O U T I N E =======================================


sub_5313        proc near               ; ...
                push    word ptr ds:444h
                cmp     word ptr ds:444h, 1C89h
                jnb     short loc_532D
                mov     cs:base_century, 13h
                mov     cs:base_year, 50h ; 'P'
                jmp     short loc_533F
; ---------------------------------------------------------------------------

loc_532D:                               ; ...
                mov     cs:base_century, 14h
                mov     cs:base_year, 0
                sub     word ptr ds:444h, 1C89h

loc_533F:                               ; ...
                xor     dx, dx
                mov     ax, ds:444h
                mov     bx, 5B5h
                div     bx
                mov     ds:444h, dx
                mov     bl, 4
                mul     bl
                add     cs:base_year, al
                inc     word ptr ds:444h
                cmp     word ptr ds:444h, 16Eh
                jbe     short loc_5385
                inc     cs:base_year
                sub     word ptr ds:444h, 16Eh
                mov     cx, 3

loc_5370:                               ; ...
                cmp     word ptr ds:444h, 16Dh
                jbe     short loc_538B
                inc     cs:base_year
                sub     word ptr ds:444h, 16Dh
                loop    loc_5370

loc_5385:                               ; ...
                mov     cs:february, 1Dh

loc_538B:                               ; ...
                xor     bx, bx
                xor     dx, dx
                mov     ax, ds:444h
                mov     si, 7ADh
                mov     cx, 0Ch

loc_5398:                               ; ...
                inc     bl
                mov     dl, cs:[si]
                cmp     ax, dx
                jbe     short loc_53A6
                inc     si
                sub     ax, dx
                loop    loc_5398

loc_53A6:                               ; ...
                mov     cs:february, 1Ch
                mov     dl, bl
                mov     dh, cs:base_year
                mov     cl, cs:base_century
                call    sub_53D1
                xchg    dl, al
                call    sub_53D1
                xchg    dh, al
                call    sub_53D1
                xchg    cl, al
                call    sub_53D1
                mov     ch, al
                pop     word ptr ds:444h
                retn
sub_5313        endp


; =============== S U B R O U T I N E =======================================


sub_53D1        proc near               ; ...
                aam
                shl     ah, 4
                or      al, ah
                retn
sub_53D1        endp


; =============== S U B R O U T I N E =======================================


sub_53D9        proc near               ; ...
                mov     ah, al
                and     al, 0Fh
                shr     ah, 4
                aad
                retn
sub_53D9        endp

; ---------------------------------------------------------------------------
step_drv        db 0FEh                 ; ...
accesscount     db 0                    ; ...
tim_drv         db 0FFh                 ; ...
byte_53E6       db 0                    ; ...
rflag           dw 2                    ; ...
word_53E9       dw 0                    ; ...
byte_53EB       db 0                    ; ...
byte_53EC       db 9                    ; ...
dword_53ED      dd 0                    ; ...
byte_53F1       db 0                    ; ...
byte_53F2       db 0                    ; ...
word_53F3       dw 0                    ; ...
word_53F5       dw 0                    ; ...
word_53F7       dw 0                    ; ...
word_53F9       dw 0                    ; ...
word_53FB       dw 0                    ; ...
word_53FD       dw 0                    ; ...
word_53FF       dw 0                    ; ...
set_id_flag     db 0                    ; ...
fat_12_id       db 'FAT12   ',0         ; ...
fat_16_id       db 'FAT16   ',0         ; ...
fat_32_id       db 'FAT32   ',0         ; ...
vol_no_name     db 'NO NAME    ',0      ; ...
                db    3
                db    9
                db  70h ; p
                db 0A0h
                db    5
                db    2
                db    2
                db 0CCh
                db  80h
                db  40h ; @
                db  10h
                db    8
                db    6
                db    4
                db    3
byte_5438       db 0                    ; ...
                db  0Ah
                db    2
                db    6
                db    4
                db    4
                db  0Fh
                db    8
                db    0
                db  0Ch
DSKTBL          db 26
                dw offset dsk_init
                dw offset media_chk
                dw offset get_bpb
                dw offset bc_cmderr
                dw offset dsk_read
                dw offset x_bus_exit
                dw offset ret_carry_clear
                dw offset ret_carry_clear
                dw offset dsk_writ
                dw offset dsk_writv
                dw offset ret_carry_clear
                dw offset ret_carry_clear
                dw offset bc_cmderr
                dw offset dsk_open
                dw offset dsk_close
                dw offset dsk_rem
                dw offset ret_carry_clear
                dw offset ret_carry_clear
                dw offset ret_carry_clear
                dw offset do_generic_ioctl
                dw offset ret_carry_clear
                dw offset ret_carry_clear
                dw offset ret_carry_clear
                dw offset ioctl_getown
                dw offset ioctl_setown
                dw offset ioctl_support_query
; ---------------------------------------------------------------------------

dsk_init:                               ; ...
                mov     ah, ds:drvmax
                mov     es, cs:sysi_bds_seg
                assume es:BIOSDATA
                mov     di, offset bpb_array
                jmp     SetPtrSav

; =============== S U B R O U T I N E =======================================


SetDrive        proc near               ; ...
                les     di, dword ptr ds:start_bds
                assume es:nothing

X_Scan_Loop:                            ; ...
                cmp     es:[di+5], al
                jz      short X_SetDrv
                les     di, es:[di]     ; [es:di+BDS.link] ; Go to next bds
                cmp     di, 0FFFFh
                jnz     short X_Scan_Loop
                stc

X_SetDrv:                               ; ...
                retn
SetDrive        endp

; ---------------------------------------------------------------------------

media_chk:                              ; ...
                call    SetDrive
                mov     si, 1
                test    byte ptr es:[di+40h], 1
                jz      short loc_54BF
                and     word ptr es:[di+3Fh], 0FEFFh
                mov     cs:tim_drv, 0FFh
                test    byte ptr es:[di+3Fh], 1
                jz      short loc_54C6
                mov     si, 0FFFFh
                jmp     short loc_54EC
; ---------------------------------------------------------------------------

loc_54BF:                               ; ...
                test    byte ptr es:[di+3Fh], 1
                jnz     short loc_54EC

loc_54C6:                               ; ...
                xor     si, si
                test    byte ptr ds:8, 2
                jz      short loc_54D9
                call    mediacheck
                jb      short loc_550C
                call    haschange
                jnz     short loc_54EC

loc_54D9:                               ; ...
                mov     si, 1
                mov     al, cs:tim_drv
                cmp     al, es:[di+4]
                jnz     short loc_54EB
                call    Check_Time_Of_Access
                jmp     short loc_54EC
; ---------------------------------------------------------------------------

loc_54EB:                               ; ...
                dec     si

loc_54EC:                               ; ...
                push    es
                les     bx, dword ptr ds:ptrsav

loc_54F1:
                mov     es:[bx+0Eh], si
                pop     es

loc_54F6:
                or      si, si
                jns     short ret_carry_clear
                test    byte ptr ds:8, 2
                jz      short loc_5504
                call    media_set_vid

loc_5504:                               ; ...
                mov     cs:tim_drv, 0FFh

ret_carry_clear:                        ; ...
                clc
                retn
; ---------------------------------------------------------------------------

loc_550C:                               ; ...
                call    maperror

loc_550F:                               ; ...
                mov     ah, 81h
                retn

; =============== S U B R O U T I N E =======================================


Check_Time_Of_Access proc near          ; ...
                mov     si, 1
                call    GetTickCnt
                mov     ax, es:[di+79h]
                sub     dx, ax
                mov     ax, es:[di+7Bh]
                sbb     cx, ax
                jnz     short loc_5543
                or      dx, dx
                jnz     short loc_553E
                inc     cs:accesscount
                cmp     cs:accesscount, 5
                jb      short locret_5544
                dec     cs:accesscount
                jmp     short loc_5543
; ---------------------------------------------------------------------------

loc_553E:                               ; ...
                cmp     dx, 24h ; '$'
                jbe     short locret_5544

loc_5543:                               ; ...
                dec     si

locret_5544:                            ; ...
                retn
Check_Time_Of_Access endp

; ---------------------------------------------------------------------------

get_bpb:                                ; ...
                mov     ah, es:[di]

loc_5548:
                call    SetDrive

loc_554B:                               ; [es:di+BDS.flags]
                test    byte ptr es:[di+3Fh], 1
                jnz     short already_gotbpb
                call    clear_ids
                mov     cs:set_id_flag, 1
                call    GetBp
                jb      short loc_550F
                cmp     cs:set_id_flag, 2
                mov     cs:set_id_flag, 0
                jz      short already_gotbpb
                test    ds:inHMA, 2     ; fhave96 bit ?
                jz      short already_gotbpb
                call    set_volume_id

already_gotbpb:                         ; ...
                add     di, 6

SetPtrSav:                              ; ...
                mov     cx, es
                les     bx, dword ptr ds:ptrsav
                mov     es:[bx+0Dh], ah ; [es:bx+media]
                mov     es:[bx+12h], di ; [es:bx+count]
                mov     es:[bx+14h], cx ; [es:bx+count+2]
                clc
                retn

; =============== S U B R O U T I N E =======================================


clear_ids       proc near               ; ...
                push    di
                xor     cx, cx          ; 0
                mov     es:[di+89h], cx ; [es:di+BDS.vol_serial]
                mov     es:[di+8Bh], cx ; [es:di+BDS.vol_serial+2]
                mov     cx, 0Bh
                mov     si, offset vol_no_name ; "NO NAME    "
                add     di, 125         ; BDS.volid
                rep movsb
                mov     si, offset fat_32_id ; "FAT32   "
                test    byte ptr es:[di+3Bh], 20h ; [es:di+BDS.fatsiz], fbigbig ; FAT32
                                        ;
                                        ; (here, es:di points to the BDS offset +136)
                                        ;
                                        ; ! NOTE - 11/08/2023 - Erdogan Tan
                                        ; Microsoft code has a bug here because the BDS's
                                        ; .volid and .filesys_id fields will be reset
                                        ; (to their default text) according to 'BDS.fatsiz' flags
                                        ; at the BDS offset 59 but current (this) code checks flags
                                        ; at ES:DI+59 while DI points the BDS offset 136!?
                                        ;
                                        ; Correct Code:
                                        ; test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig
                                        ;
                                        ; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
                                        ; as 'test byte [ES:DI+59],20h' (PCDOS 7.1 BUG note: 26/06/2023)
                                        ;
                                        ; (Why this bug did not affect Win Me and PCDOS 7.x applications:
                                        ; 'clear_ids' is used for floppy disks only and the default
                                        ; option of 'clear_ids' is FAT12 volid and filesys_id text
                                        ; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
                jnz     short ci_bigfat
                mov     si, offset fat_16_id ; "FAT16   "
                test    byte ptr es:[di+3Bh], 40h ; [es:di+BDS.fatsiz], fbig
                jnz     short ci_bigfat
                mov     si, offset fat_12_id ; "FAT12   "

ci_bigfat:                              ; ...
                mov     cx, 8
                add     di, 5
                rep movsb
                pop     di
                retn
clear_ids       endp


; =============== S U B R O U T I N E =======================================


GetBp           proc near               ; ...
                test    byte ptr es:[di+3Fh], 5 ; [es:di+BDS.flags],
                                        ; return_fake_bpb|fnon_removable
                jnz     getret_exit
                push    cx
                push    dx
                push    ebx
                call    readbootsec
                jb      getbp_err_ret_brdg
                or      cx, cx
                jnz     loc_566C
                push    di
                push    esi
                push    ds
                lds     si, ds:disksector
                mov     bx, si
                lea     si, [si+0Bh]
                push    di
                lea     di, [di+6]
                mov     cx, 53
                cld
                rep movsb
                pop     di
                movzx   esi, word ptr es:[di+0Eh]
                or      si, si
                jz      short loc_5610
                mov     es:[di+1Bh], esi
                xor     si, si
                mov     es:[di+17h], esi

loc_5610:                               ; ...
                cmp     word ptr es:[di+11h], 0
                jz      short loc_5644
                xor     esi, esi
                mov     es:[di+1Fh], esi
                mov     es:[di+27h], esi
                mov     es:[di+2Fh], esi
                mov     es:[di+33h], esi
                mov     es:[di+37h], esi
                mov     es:[di+25h], si
                mov     es:[di+23h], si
                dec     si
                mov     es:[di+2Bh], si
                mov     es:[di+2Dh], si

loc_5644:                               ; ...
                cmp     cs:set_id_flag, 1
                clc

loc_564B:
                jnz     short loc_5665

loc_564D:
                call    mov_media_ids

loc_5650:
                jb      short loc_5658

loc_5652:
                mov     cs:set_id_flag, 2

loc_5658:                               ; ...
                pop     ds
                push    ds

loc_565A:
                test    byte ptr ds:8, 2

loc_565F:
                jz      short loc_5665

loc_5661:
                call    sub_71B2
                clc

loc_5665:                               ; ...
                pop     ds

loc_5666:
                pop     esi
                pop     di

loc_5669:
                jmp     getret
; ---------------------------------------------------------------------------

loc_566C:                               ; ...
                push    ds
                mov     dh, 0

loc_566F:
                mov     cx, 2
                call    read_sector
                jb      short loc_5679
                mov     ah, [bx]

loc_5679:                               ; ...
                pop     ds
                jb      getbp_err_ret_brdg

loc_567E:
                test    byte ptr ds:8, 2
                jz      short loc_5688

loc_5685:
                call    sub_7156

loc_5688:                               ; ...
                cmp     byte ptr es:[di+3Eh], 2
                jnz     short is_floppy
                cmp     ah, 0F9h
                jnz     got_unknown_medium

loc_5696:                               ; ...
                mov     bx, 0C99h
                mov     al, cs:[bx]
                mov     cx, cs:[bx+3]
                mov     dx, cs:[bx+5]
                mov     bx, cs:[bx+1]
                jmp     short Has1
; ---------------------------------------------------------------------------

is_floppy:                              ; ...
                cmp     ah, 0F8h
                jb      got_unknown_medium
                mov     al, 1
                mov     bx, 4008h
                mov     cx, 140h
                mov     dx, 101h
                test    ah, 2
                jnz     short has8
                inc     al
                inc     bl
                add     cx, 28h ; '('

has8:                                   ; ...
                test    ah, 1
                jz      short Has1

loc_56CD:
                add     cx, cx
                mov     bh, 70h ; 'p'
                inc     dh
                inc     dl

Has1:                                   ; ...
                mov     es:[di+8], dh
                xor     dh, dh
                mov     es:[di+15h], dx
                mov     dl, bh
                mov     es:[di+0Ch], dx
                mov     es:[di+0Eh], cx

loc_56E9:
                mov     es:[di+1Bh], cx
                mov     es:[di+10h], ah
                movzx   ax, al
                mov     es:[di+11h], ax
                movzx   bx, bl
                mov     es:[di+13h], bx
                xor     ebx, ebx        ; 0
                mov     es:[di+17h], ebx
                mov     es:[di+1Fh], ebx
                mov     es:[di+27h], ebx
                mov     es:[di+2Fh], ebx
                mov     es:[di+33h], ebx
                mov     es:[di+37h], ebx
                mov     es:[di+1Dh], bx
                mov     es:[di+23h], bx
                mov     es:[di+25h], bx
                dec     bx
                mov     es:[di+2Bh], bx
                mov     es:[di+2Dh], bx

getret:                                 ; ...
                pop     ebx
                pop     dx
                pop     cx

getret_exit:                            ; ...
                retn
; ---------------------------------------------------------------------------

getbp_err_ret_brdg:                     ; ...
                mov     cs:set_id_flag, 0
                call    maperror
                jmp     short getret
; ---------------------------------------------------------------------------

got_unknown_medium:                     ; ...
                mov     cs:set_id_flag, 0
                mov     al, 7
                stc
                jmp     short getret
GetBp           endp


; =============== S U B R O U T I N E =======================================


readbootsec     proc near               ; ...
                push    ds
                mov     dh, 0
                mov     cx, 1
                call    read_sector
                jb      short loc_57CF
                sub     cx, cx
                cmp     byte ptr [bx], 69h ; 'i'
                jz      short loc_5772
                cmp     byte ptr [bx], 0E9h
                jz      short loc_5772
                cmp     byte ptr [bx], 0EBh
                jnz     short loc_57CD
                cmp     byte ptr [bx+2], 90h
                jnz     short loc_57CD

loc_5772:                               ; ...
                mov     al, [bx+15h]
                and     al, 0F0h
                cmp     al, 0F0h
                jnz     short loc_57CD
                and     byte ptr es:[di+40h], 0F7h
                cmp     word ptr [bx+3], 534Dh ; 'MS'
                jnz     short loc_579A
                cmp     word ptr [bx+5], 4D44h ; 'DM'
                jnz     short loc_579A
                cmp     word ptr [bx+7], 3346h ; 'F3'
                jnz     short loc_579A
                or      byte ptr es:[di+40h], 8

loc_579A:                               ; ...
                mov     al, [bx+15h]
                cmp     al, 0F0h
                jz      short loc_57CE
                cmp     al, 0F8h
                jz      short loc_57CE
                test    al, 1
                jnz     short loc_57CE
                cmp     word ptr [bx+16h], 0
                jz      short loc_57CE
                cmp     byte ptr [bx+26h], 29h ; ')'
                jz      short loc_57CE
                cmp     byte ptr [bx+9], 2Eh ; '.'
                jnz     short loc_57C7
                cmp     byte ptr [bx+8], 33h ; '3'
                ja      short loc_57CE
                cmp     byte ptr [bx+0Ah], 32h ; '2'
                jnb     short loc_57CE

loc_57C7:                               ; ...
                mov     byte ptr [bx+0Dh], 1
                jmp     short loc_57CE
; ---------------------------------------------------------------------------

loc_57CD:                               ; ...
                inc     cx

loc_57CE:                               ; ...
                clc

loc_57CF:                               ; ...
                pop     ds
                retn
readbootsec     endp


; =============== S U B R O U T I N E =======================================


mov_media_ids   proc near               ; ...
                pusha
                cmp     word ptr [bx+16h], 0
                jnz     short mmi_chk_fat
                cmp     byte ptr [bx+42h], 29h
                jnz     short mmi_not_ext
                mov     cx, [bx+43h]
                mov     dx, [bx+45h]
                lea     si, [bx+52h]
                mov     ax, si
                lea     si, [bx+47h]
                jmp     short mmi_fat32
; ---------------------------------------------------------------------------

mmi_chk_fat:                            ; ...
                cmp     byte ptr [bx+26h], 29h
                jnz     short mmi_not_ext
                mov     cx, [bx+27h]
                mov     dx, [bx+29h]
                lea     si, [bx+36h]
                mov     ax, si
                lea     si, [bx+2Bh]

mmi_fat32:                              ; ...
                mov     es:[di+89h], cx
                mov     es:[di+8Bh], dx
                mov     cx, 11
                add     di, 125
                rep movsb
                mov     cx, 8
                mov     si, ax
                add     di, 5
                rep movsb
                clc

mmi_retn:                               ; ...
                popa
                retn
; ---------------------------------------------------------------------------

mmi_not_ext:                            ; ...
                stc
                jmp     short mmi_retn
mov_media_ids   endp


; =============== S U B R O U T I N E =======================================


read_sector     proc near               ; ...
                push    bp
                mov     bp, 3
                mov     dl, es:[di+4]
                lds     bx, ds:disksector

rd_ret:                                 ; ...
                push    es
                push    ds
                pop     es
                mov     ax, 201h
                int     13h             ; DISK - READ SECTORS INTO MEMORY
                                        ; AL = number of sectors to read, CH = track, CL = sector
                                        ; DH = head, DL = drive, ES:BX -> buffer to fill
                                        ; Return: CF set on error, AH = status, AL = number of sectors read
                pop     es
                jnb     short okret2

rd_rty:                                 ; ...
                call    again
                jz      short err_rd_ret
                test    byte ptr es:[di+3Fh], 1
                jnz     short rd_ret
                push    es
                push    ds
                pop     es
                mov     ax, 201h
                int     13h             ; DISK - READ SECTORS INTO MEMORY
                                        ; AL = number of sectors to read, CH = track, CL = sector
                                        ; DH = head, DL = drive, ES:BX -> buffer to fill
                                        ; Return: CF set on error, AH = status, AL = number of sectors read
                pop     es
                jnb     short okret2
                jmp     short rd_rty
; ---------------------------------------------------------------------------

err_rd_ret:                             ; ...
                mov     dl, 0FFh
                stc

okret2:                                 ; ...
                mov     cs:step_drv, dl
                mov     cs:tim_drv, dl
                mov     es:[di+78h], ch
                pushf
                call    set_tim
                popf
                pop     bp
                retn
read_sector     endp

; ---------------------------------------------------------------------------

dsk_open:                               ; ...
                test    ds:inHMA, 2     ; fhave96 flag
                jz      short dsk_open_exit
                call    SetDrive
                inc     word ptr es:[di+3Ch]

dsk_open_exit:                          ; ...
                clc
                retn
; ---------------------------------------------------------------------------

dsk_close:                              ; ...
                test    ds:inHMA, 2
                jz      short exitjx
                call    SetDrive
                cmp     word ptr es:[di+3Ch], 0
                jz      short exitjx
                dec     word ptr es:[di+3Ch]

exitjx:                                 ; ...
                clc
                retn
; ---------------------------------------------------------------------------

dsk_rem:                                ; ...
                call    SetDrive
                test    byte ptr es:[di+3Fh], 1
                jnz     short x_bus_exit
                clc
                retn
; ---------------------------------------------------------------------------

x_bus_exit:                             ; ...
                mov     ah, 3
                stc

dsk_ret:                                ; ...
                retn
; ---------------------------------------------------------------------------

dsk_writv:                              ; ...
                mov     cs:rflag, 103h
                jmp     short dsk_cl
; ---------------------------------------------------------------------------

dsk_writ:                               ; ...
                mov     cs:rflag, 3

dsk_cl:                                 ; ...
                call    diskio

dsk_io:                                 ; ...
                jnb     short dsk_ret
                jmp     bc_err_cnt
; ---------------------------------------------------------------------------

dsk_read:                               ; ...
                call    DISKRD
                jmp     short dsk_io

; =============== S U B R O U T I N E =======================================


checksingle     proc near               ; ...
                push    ax
                push    bx
                mov     bx, es:[di+3Fh]
                test    bl, 21h
                jnz     short loc_5944
                test    bl, 10h
                jz      short loc_5944
                mov     al, es:[di+4]
                push    es
                push    di
                les     di, ds:0F8h

loc_58DA:                               ; ...
                cmp     es:[di+4], al
                jnz     short loc_5939
                mov     bl, 20h ; ' '
                test    es:[di+3Fh], bl
                jz      short loc_5939
                xor     es:[di+3Fh], bl
                pop     di
                pop     es
                or      es:[di+3Fh], bl
                test    byte ptr ds:8, 8
                jz      short loc_5913
                cmp     byte ptr es:[di+4], 0
                jnz     short loc_5944
                mov     al, es:[di+5]
                push    es
                sub     bx, bx
                mov     es, bx
                assume es:BIOSDATA
                mov     large byte ptr es:msloader_bpb, al
                pop     es
                assume es:nothing
                jmp     short loc_5944
; ---------------------------------------------------------------------------

loc_5913:                               ; ...
                test    byte ptr ds:8, 4
                jz      short loc_5934
                push    ax
                mov     al, es:[di+5]
                mov     ah, al
                push    es
                sub     bx, bx
                mov     es, bx
                assume es:BIOSDATA
                xchg    al, large byte ptr es:msloader_bpb
                pop     es
                assume es:nothing
                cmp     ah, al
                pop     ax
                jz      short loc_5944

loc_5934:                               ; ...
                call    near ptr sub_6FB2
                jmp     short loc_5944
; ---------------------------------------------------------------------------

loc_5939:                               ; ...
                les     di, es:[di]
                cmp     di, 0FFFFh
                jnz     short loc_58DA
                stc
                pop     di
                pop     es

loc_5944:                               ; ...
                pop     bx
                pop     ax
                retn
checksingle     endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR diskio

loc_5947:                               ; ...
                mov     al, 8
                jmp     short loc_594D
; ---------------------------------------------------------------------------

loc_594B:                               ; ...
                mov     al, 7

loc_594D:                               ; ...
                stc
; END OF FUNCTION CHUNK FOR diskio

; =============== S U B R O U T I N E =======================================


nullsub_18      proc near               ; ...
                retn
nullsub_18      endp


; =============== S U B R O U T I N E =======================================


DISKRD          proc near               ; ...
                mov     byte ptr cs:rflag, 2
DISKRD          endp


; =============== S U B R O U T I N E =======================================


diskio          proc near               ; ...

; FUNCTION CHUNK AT 11B7 SIZE 00000007 BYTES

                mov     bx, di
                mov     cs:word_5DDE, es
                call    SetDrive
                mov     al, es:[di+10h]
                mov     cs:byte_53E6, al
                jcxz    short nullsub_18
                test    byte ptr es:[di+40h], 8
                jz      short loc_5992
                cmp     word ptr es:[di+0Eh], 0
                jnz     short loc_597F
                cmp     cs:word_53F9, 0
                jnz     short loc_5988

loc_597F:                               ; ...
                or      dx, dx
                jnz     short loc_5988
                cmp     cx, 1
                jz      short loc_5992

loc_5988:                               ; ...
                mov     al, 0
                cmp     byte ptr cs:rflag, 3
                jz      short loc_594D

loc_5992:                               ; ...
                test    byte ptr es:[di+40h], 2
                jnz     short loc_594B
                mov     cs:word_53E9, cx
                mov     cs:word_53F5, sp
                mov     ax, dx
                xor     si, si
                add     dx, cx
                adc     si, 0
                cmp     word ptr es:[di+0Eh], 0
                jz      short loc_59C0
                cmp     si, 0
                jnz     short loc_5947
                cmp     dx, es:[di+0Eh]
                ja      short loc_5947
                jmp     short loc_59D7
; ---------------------------------------------------------------------------

loc_59C0:                               ; ...
                add     si, cs:word_53F9
                cmp     si, es:[di+1Dh]
                jb      short loc_59D7
                ja      loc_5947
                cmp     dx, es:[di+1Bh]
                ja      loc_5947

loc_59D7:                               ; ...
                mov     dx, cs:word_53F9
                add     ax, es:[di+17h]
                adc     dx, es:[di+19h]
                mov     cs:word_53FB, ax
                push    es
                sub     ax, ax
                mov     es, ax
                assume es:BIOSDATA
                les     si, large dword ptr es:aCom1+4 ; "    "
                assume es:nothing
                mov     word ptr cs:dword_53ED, si
                mov     word ptr cs:dword_53ED+2, es
                pop     es
                test    byte ptr es:[di+3Fh], 1
                jnz     short loc_5A17
                call    checksingle
                test    byte ptr ds:8, 2
                jz      short loc_5A14
                call    sub_7075

loc_5A14:                               ; ...
                call    sub_5A6D

loc_5A17:                               ; ...
                call    sub_5D04
                mov     ax, dx
                xor     dx, dx
                div     word ptr es:[di+13h]
                mov     cs:word_53F7, ax
                mov     ax, cs:word_53FB
                div     word ptr es:[di+13h]
                inc     dl
                mov     cs:byte_53F1, dl
                mov     cx, es:[di+15h]
                push    ax
                xor     dx, dx
                mov     ax, cs:word_53F7
                div     cx
                mov     cs:word_53F7, ax
                pop     ax

loc_5A47:
                div     cx
                cmp     cs:word_53F7, 0
                ja      short loc_5A6A
                cmp     ax, 400h
                jnb     short loc_5A6A

loc_5A56:
                mov     cs:byte_53F2, dl
                mov     cs:word_53F3, ax
                mov     ax, cs:word_53E9
                call    sub_5ABB
                call    sub_5A90
                retn
; ---------------------------------------------------------------------------

loc_5A6A:                               ; ...
                jmp     loc_5947
diskio          endp


; =============== S U B R O U T I N E =======================================


sub_5A6D        proc near               ; ...
                mov     al, es:[di+4]
                mov     cs:tim_drv, al
                cmp     cs:byte_5DE1, 0
                jnz     short locret_5A8F
                mov     al, cs:byte_53EC
                push    ds
                lds     si, cs:dword_53ED
                xchg    al, [si+4]
                mov     cs:byte_53EB, al
                pop     ds

locret_5A8F:                            ; ...
                retn
sub_5A6D        endp


; =============== S U B R O U T I N E =======================================


sub_5A90        proc near               ; ...
                test    byte ptr es:[di+3Fh], 1
                jnz     short nullsub_13

loc_5A97:
                call    set_tim
sub_5A90        endp

; START OF FUNCTION CHUNK FOR sub_5B33

loc_5A9A:                               ; ...
                pushf
                cmp     cs:byte_5DE1, 0
                jnz     short loc_5AB9
                push    ax
                push    es
                les     si, cs:dword_53ED
                mov     al, cs:byte_53EB
                mov     es:[si+4], al
                mov     byte ptr es:[si+3], 2
                pop     es

loc_5AB8:
                pop     ax

loc_5AB9:                               ; ...
                popf
; END OF FUNCTION CHUNK FOR sub_5B33

; =============== S U B R O U T I N E =======================================


nullsub_13      proc near               ; ...
                retn
nullsub_13      endp


; =============== S U B R O U T I N E =======================================


sub_5ABB        proc near               ; ...
                or      ax, ax
                jz      short nullsub_13
                test    byte ptr es:[di+3Fh], 1
                jz      short loc_5AD3

loc_5AC6:
                test    byte ptr ds:9, 2
                jz      short loc_5AEC
                call    sub_5B33
                xor     ax, ax
                retn
; ---------------------------------------------------------------------------

loc_5AD3:                               ; ...
                push    ds
                push    si
                lds     si, cs:dword_53ED
                mov     cl, cs:byte_53F1
                add     cl, al
                dec     cx
                cmp     [si+4], cl
                ja      short loc_5AEA
                mov     [si+4], cl

loc_5AEA:                               ; ...
                pop     si
                pop     ds

loc_5AEC:                               ; ...
                mov     cl, es:[di+13h]
                inc     cl
                sub     cl, cs:byte_53F1
                xor     ch, ch
                cmp     ax, cx
                jnb     short loc_5AFF
                mov     cx, ax

loc_5AFF:                               ; ...
                test    word ptr es:[di+3Fh], 800h
                jz      short loc_5B1F
                push    ax
                mov     al, cs:byte_53F1
                cmp     al, 12h
                ja      short loc_5B1E
                add     al, cl
                cmp     al, 13h
                jbe     short loc_5B1E
                mov     cx, 13h
                sub     cl, cs:byte_53F1

loc_5B1E:                               ; ...
                pop     ax

loc_5B1F:                               ; ...
                push    ax
                push    cx
                mov     ax, cx
                call    sub_5B33
                pop     cx
                pop     ax
                sub     ax, cx
                shl     cl, 1
                add     bh, cl
                jmp     short sub_5ABB
sub_5ABB        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_5B33

loc_5B30:                               ; ...
                jmp     loc_5C3B
; END OF FUNCTION CHUNK FOR sub_5B33

; =============== S U B R O U T I N E =======================================


sub_5B33        proc near               ; ...

; FUNCTION CHUNK AT 130A SIZE 00000020 BYTES
; FUNCTION CHUNK AT 13A0 SIZE 00000003 BYTES

                mov     bp, 5
                mov     ah, byte ptr cs:rflag
                test    byte ptr es:[di+3Fh], 1
                jz      short loc_5B4A
                cmp     ah, 4
                jnz     short loc_5B4A
                mov     bp, 2

loc_5B4A:                               ; ...
                mov     cs:word_53FD, bp
                mov     cs:word_53FF, bp

loc_5B54:                               ; ...
                push    ax
                mov     dx, cs:word_53F3
                test    byte ptr es:[di+3Fh], 1
                jz      short loc_5B6C
                cmp     word ptr es:[di+79h], 1
                jnz     short loc_5B6C
                add     dx, es:[di+7Bh]

loc_5B6C:                               ; ...
                ror     dh, 1
                ror     dh, 1
                or      dh, cs:byte_53F1
                mov     cx, dx
                xchg    ch, cl
                mov     dh, cs:byte_53F2
                mov     dl, es:[di+4]
                cmp     byte ptr es:[di+3Eh], 5
                jz      short loc_5B9D
                cmp     cs:step_drv, 0FFh
                jz      short loc_5C05
                cmp     ah, 2
                jz      short loc_5B9D
                cmp     ah, 4
                jz      short loc_5B9D
                jmp     short loc_5C05
; ---------------------------------------------------------------------------

loc_5B9D:                               ; ...
                call    sub_5C92

loc_5BA0:                               ; ...
                jb      short loc_5B30
                cmp     bp, 5
                jnz     short loc_5BAC
                cmp     ah, 0BBh
                jz      short loc_5B30

loc_5BAC:                               ; ...
                mov     cs:step_drv, dl
                mov     es:[di+78h], ch
                cmp     cs:rflag, 103h
                jz      short loc_5C17

loc_5BBE:                               ; ...
                pop     ax
                test    byte ptr es:[di+3Fh], 1
                jz      short loc_5BCD
                test    byte ptr ds:9, 2
                jnz     short loc_5C03

loc_5BCD:                               ; ...
                and     cl, 3Fh
                xor     ah, ah
                sub     cs:word_53E9, ax
                add     cl, al
                mov     cs:byte_53F1, cl
                cmp     cl, es:[di+13h]
                jbe     short loc_5C03
                mov     cs:byte_53F1, 1
                mov     dh, cs:byte_53F2
                inc     dh
                cmp     dh, es:[di+15h]
                jb      short loc_5BFE
                xor     dh, dh
                inc     cs:word_53F3

loc_5BFE:                               ; ...
                mov     cs:byte_53F2, dh

loc_5C03:                               ; ...
                clc
                retn
; ---------------------------------------------------------------------------

loc_5C05:                               ; ...
                cmp     dl, cs:step_drv
                jnz     short loc_5C12
                cmp     ch, es:[di+78h]
                jz      short loc_5B9D

loc_5C12:                               ; ...
                call    sub_5C92
                jmp     short loc_5BA0
; ---------------------------------------------------------------------------

loc_5C17:                               ; ...
                pop     ax
                push    ax
                mov     ah, 4
                call    sub_5C92
                jnb     short loc_5BBE
                cmp     ah, 11h
                jnz     short loc_5C31
                dec     cs:word_53FF
                jz      short loc_5BBE
                call    ResetDisk
                jmp     short loc_5C73
; ---------------------------------------------------------------------------

loc_5C31:                               ; ...
                call    ResetDisk
                dec     cs:word_53FD
                jmp     short loc_5C59
; ---------------------------------------------------------------------------

loc_5C3B:                               ; ...
                test    byte ptr ds:8, 2
                jz      short loc_5C45
                call    sub_7113

loc_5C45:                               ; ...
                test    word ptr ds:8, 800h
                jz      short loc_5C56
                mov     bp, 1
                and     word ptr ds:8, 0F7FFh

loc_5C56:                               ; ...
                call    again

loc_5C59:                               ; ...
                jz      short loc_5C7C
                test    byte ptr es:[di+3Fh], 1
                jnz     short loc_5C67
                cmp     ah, 80h
                jz      short loc_5C7C

loc_5C67:                               ; ...
                cmp     ah, 0CCh
                jz      short loc_5C77
                mov     cs:word_53FF, 5

loc_5C73:                               ; ...
                pop     ax
                jmp     loc_5B54
; ---------------------------------------------------------------------------

loc_5C77:                               ; ...
                mov     bp, 1
                jmp     short loc_5C73
; ---------------------------------------------------------------------------

loc_5C7C:                               ; ...
                call    maperror

loc_5C7F:                               ; ...
                mov     cs:tim_drv, 0FFh
                mov     cx, cs:word_53E9
                mov     sp, cs:word_53F5
                jmp     loc_5A9A
sub_5B33        endp


; =============== S U B R O U T I N E =======================================


sub_5C92        proc near               ; ...
                test    byte ptr es:[di+3Bh], 80h
                jnz     short loc_5CA8
                push    es
                mov     es, cs:word_5DDE
                int     13h             ; DISK -
                mov     cs:word_5DDE, es
                pop     es
                retn
; ---------------------------------------------------------------------------

loc_5CA8:                               ; ...
                stc
                mov     ah, 80h
                retn
sub_5C92        endp


; =============== S U B R O U T I N E =======================================


maperror        proc near               ; ...
                push    cx
                push    es
                push    cs
                pop     es
                assume es:BIOSCODE
                mov     al, ah
                mov     es:byte_5438, al
                mov     cx, 9
                mov     di, 0CA0h
                repne scasb
                mov     al, es:[di+8]
                pop     es
                assume es:nothing
                pop     cx
                stc
                retn
maperror        endp


; =============== S U B R O U T I N E =======================================


set_tim         proc near               ; ...
                push    ax
                call    GetTickCnt
                cmp     dx, es:[di+79h]
                jnz     short setaccess
                cmp     cx, es:[di+7Bh]
                jz      short done_set

setaccess:                              ; ...
                mov     cs:accesscount, 0
                mov     es:[di+79h], dx
                mov     es:[di+7Bh], cx

done_set:                               ; ...
                clc
                pop     ax
                retn
set_tim         endp


; =============== S U B R O U T I N E =======================================


again           proc near               ; ...
                call    ResetDisk
                cmp     ah, 6           ; If it is a media change error
                                        ; do not decrement retry count
                jz      short dont_dec_retry_count
                dec     bp              ; decrement retry count
                retn
; ---------------------------------------------------------------------------

dont_dec_retry_count:                   ; ...
                or      ah, ah
                retn
again           endp

; ---------------------------------------------------------------------------
                db  10h
                db    0
word_5CF6       dw 0                    ; ...
word_5CF8       dw 0                    ; ...
word_5CFA       dw 0                    ; ...
word_5CFC       dw 0                    ; ...
word_5CFE       dw 0                    ; ...
                db    0
                db    0
                db    0
                db    0

; =============== S U B R O U T I N E =======================================


sub_5D04        proc near               ; ...
                test    word ptr es:[di+3Fh], 400h
                jnz     short loc_5D0D
                retn
; ---------------------------------------------------------------------------

loc_5D0D:                               ; ...
                add     sp, 2
                mov     ax, cs:word_53E9
                call    sub_5D1A
                xor     ax, ax
                retn
sub_5D04        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_5D1A        proc near               ; ...
                mov     cs:word_5CF6, ax
                mov     ax, cs:word_53FB
                cmp     word ptr es:[di+79h], 1
                jnz     short loc_5D38
                cmp     word ptr es:[di+7Bh], 0
                jz      short loc_5D38
                add     ax, es:[di+17h]
                adc     dx, es:[di+19h]

loc_5D38:                               ; ...
                mov     cs:word_5CFC, ax
                mov     cs:word_5CFE, dx
                mov     cs:word_5CF8, bx
                mov     ax, cs:word_5DDE
                mov     cs:word_5CFA, ax
                mov     bp, 5
                mov     cs:word_53FD, bp
                mov     cs:word_53FF, bp
                mov     ah, byte ptr cs:rflag

loc_5D60:                               ; ...
                push    ax
                mov     dl, es:[di+4]
                add     ah, 40h ; '@'
                xor     al, al
                push    ds
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     si, 1564h
                int     13h             ; DISK - IBM/MS Extension - EXTENDED READ (DL - drive, DS:SI - disk address packet)
                pop     ds
                assume ds:nothing
                jb      short loc_5D8D
                cmp     cs:rflag, 103h
                jnz     short loc_5D8A
                pop     ax
                push    ax
                mov     ah, 44h ; 'D'
                push    ds
                push    cs
                pop     ds
                assume ds:BIOSCODE
                int     13h             ; DISK - IBM/MS Extension - VERIFY SECTORS (DL - drive, DS:SI - disk address packet)
                pop     ds
                assume ds:nothing
                jb      short loc_5D8F

loc_5D8A:                               ; ...
                pop     ax
                clc
                retn
; ---------------------------------------------------------------------------

loc_5D8D:                               ; ...
                jmp     short loc_5DAA
; ---------------------------------------------------------------------------

loc_5D8F:                               ; ...
                cmp     ah, 11h
                jnz     short loc_5DA0
                dec     cs:word_53FF
                jz      short loc_5D8A
                call    ResetDisk
                jmp     short loc_5DBB
; ---------------------------------------------------------------------------

loc_5DA0:                               ; ...
                call    ResetDisk
                dec     cs:word_53FD
                jmp     short loc_5DAD
; ---------------------------------------------------------------------------

loc_5DAA:                               ; ...
                call    sub_5DC6

loc_5DAD:                               ; ...
                jz      short loc_5DC3
                cmp     ah, 0CCh
                jz      short loc_5DBE
                mov     cs:word_53FF, 5

loc_5DBB:                               ; ...
                pop     ax
                jmp     short loc_5D60
; ---------------------------------------------------------------------------

loc_5DBE:                               ; ...
                mov     bp, 1
                jmp     short loc_5DBB
; ---------------------------------------------------------------------------

loc_5DC3:                               ; ...
                jmp     loc_5C7C
sub_5D1A        endp


; =============== S U B R O U T I N E =======================================


sub_5DC6        proc near               ; ...
                call    ResetDisk
                cmp     ah, 6
                jz      short loc_5DD0
                dec     bp
                retn
; ---------------------------------------------------------------------------

loc_5DD0:                               ; ...
                or      ah, ah
                retn
sub_5DC6        endp

; ---------------------------------------------------------------------------
dword_5DD3      dd 0FFFFFFFFh           ; ...
byte_5DD7       db 8                    ; ...
byte_5DD8       db 0                    ; ...
word_5DD9       dw 0                    ; ...
byte_5DDB       db 0                    ; ...
byte_5DDC       db 0                    ; ...
byte_5DDD       db 1                    ; ...
word_5DDE       dw 0                    ; ...
byte_5DE0       db 0                    ; ...
byte_5DE1       db 0                    ; ...
byte_5DE2       db 0                    ; ...
word_5DE3       dw 24h                  ; ...
                db 8
IoReadJumpTable dw offset GetDeviceParameters
                dw offset ReadTrack
                dw offset loc_60ED
                dw offset Cmd_Error_Proc
                dw offset Cmd_Error_Proc
                dw offset Cmd_Error_Proc
                dw offset loc_63F4
                dw offset loc_6562
                dw offset loc_65BE
IoWriteJumpTable db    9                ; ...
                dw offset loc_5F40
                dw offset loc_6160
                dw offset loc_6020
                dw offset Cmd_Error_Proc
                dw offset Cmd_Error_Proc
                dw offset Cmd_Error_Proc
                dw offset loc_643F
                dw offset loc_6579
                dw offset loc_65FE
                dw offset loc_6623
IOC_DC_Table    db  60h ; `
                db  40h ; @
                db  61h ; a
                db  41h ; A
                db  62h ; b
                db  42h ; B
                db  66h ; f
                db  46h ; F
                db  67h ; g
                db  47h ; G
                db  68h ; h
                db  48h ; H
                db  49h ; I
; ---------------------------------------------------------------------------

do_generic_ioctl:                       ; ...
                call    SetDrive
                mov     cs:byte_5DDB, 0
                mov     cs:byte_5DDC, 0
                push    es
                les     bx, dword ptr ds:ptrsav
                cmp     byte ptr es:[bx+0Dh], 8
                jz      short loc_5E42
                cmp     byte ptr es:[bx+0Dh], 48h ; 'H'
                jnz     short loc_5E42
                mov     cs:byte_5DDB, 1

loc_5E42:                               ; ...
                mov     al, es:[bx+0Eh]
                pop     es
                jnz     short loc_5EA3
                mov     si, 1655h
                test    al, 20h
                jnz     short loc_5E53
                mov     si, offset IoWriteJumpTable

loc_5E53:                               ; ...
                test    byte ptr es:[di+3Bh], 20h
                jz      short NotGenericWrite
                cmp     cs:byte_5DDB, 0
                jnz     short NotGenericWrite
                cmp     al, 46h ; 'F'
                jz      short loc_5EA3
                cmp     al, 47h ; 'G'
                jz      short loc_5EA3
                cmp     cs:byte_5DDD, 0
                jz      short loc_5E82
                cmp     al, 60h ; '`'
                mov     cs:byte_5DDC, 1
                jz      short NotGenericWrite
                mov     cs:byte_5DDC, 0

loc_5E82:                               ; ...
                and     al, 0DFh
                cmp     al, 46h ; 'F'
                jb      short loc_5EA3

NotGenericWrite:                        ; ...
                and     al, 0DFh
                sub     al, 40h ; '@'
                cmp     al, cs:[si]
                ja      short loc_5EA3
                cbw
                shl     ax, 1
                inc     si
                add     si, ax
                call    word ptr cs:[si]
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                mov     ah, 81h
                retn
; ---------------------------------------------------------------------------

Cmd_Error_Proc:                         ; ...
                pop     dx

loc_5EA3:                               ; ...
                jmp     bc_cmderr
; ---------------------------------------------------------------------------

GetDeviceParameters:                    ; ...
                lds     bx, ds:12h
                assume ds:nothing
                lds     bx, [bx+13h]
                mov     al, es:[di+3Eh]
                mov     [bx+1], al
                mov     ax, es:[di+3Fh]
                and     ax, 3
                mov     [bx+2], ax
                mov     ax, es:[di+41h]
                mov     [bx+4], ax
                xor     al, al
                mov     [bx+6], al
                lea     si, [di+43h]
                test    byte ptr [bx], 1
                jz      short loc_5EF3
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                call    checksingle
                call    GetBp
                pop     ds
                assume ds:nothing
                jb      short locret_5F3F
                lea     si, [di+6]
                test    byte ptr [bx], 1
                jz      short loc_5EF3
                mov     ax, es:[di+3Fh]
                and     ax, 800h
                or      [bx+2], ax

loc_5EF3:                               ; ...
                mov     cx, 1Fh
                xor     dx, dx
                cmp     cs:byte_5DDB, 0
                jz      short loc_5F06
                mov     cx, 35h ; '5'
                mov     dx, 20h ; ' '

loc_5F06:                               ; ...
                lea     di, [bx+7]
                push    ds
                push    es
                pop     ds
                pop     es
                push    di
                push    si
                rep movsb
                or      dx, dx
                jz      short loc_5F1B
                mov     cx, dx
                mov     al, 0
                rep stosb

loc_5F1B:                               ; ...
                pop     si
                pop     di
                cmp     cs:byte_5DDC, 0
                jz      short locret_5F3F
                mov     word ptr es:[di+6], 200h
                mov     eax, [si+19h]
                test    eax, 0FFFF0000h
                jz      short loc_5F3A
                mov     ax, 0FFFFh

loc_5F3A:                               ; ...
                mov     es:[di+0Bh], ax
                clc

locret_5F3F:                            ; ...
                retn
; ---------------------------------------------------------------------------

loc_5F40:                               ; ...
                lds     bx, ds:12h
                lds     bx, [bx+13h]
                or      word ptr es:[di+3Fh], 140h
                test    byte ptr [bx], 2
                jnz     short loc_5FD0
                mov     al, [bx+1]
                mov     es:[di+3Eh], al
                mov     ax, [bx+4]
                mov     es:[di+41h], ax
                mov     ax, [bx+2]
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                test    byte ptr ds:8, 2
                pop     ds
                assume ds:nothing
                jnz     short loc_5F74
                and     ax, 0FFFDh

loc_5F74:                               ; ...
                and     ax, 3
                mov     cx, es:[di+3Fh]
                and     cx, 0FDF4h
                or      ax, cx
                mov     es:[di+3Fh], ax
                mov     al, [bx+6]
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                mov     cs:byte_5DE0, al
                mov     cx, 1Fh
                cmp     cs:byte_5DDB, 0
                jz      short loc_5FA0
                mov     cx, 35h ; '5'

loc_5FA0:                               ; ...
                pop     ds
                assume ds:nothing
                or      word ptr es:[di+3Fh], 80h
                push    di
                test    byte ptr [bx], 1
                jnz     short loc_5FBF
                test    word ptr es:[di+3Fh], 4
                jz      short loc_5FBA
                and     word ptr es:[di+3Fh], 0FFFBh

loc_5FBA:                               ; ...
                lea     di, [di+43h]
                jmp     short loc_5FC7
; ---------------------------------------------------------------------------

loc_5FBF:                               ; ...
                or      word ptr es:[di+3Fh], 4
                lea     di, [di+6]

loc_5FC7:                               ; ...
                lea     si, [bx+7]
                rep movsb
                call    sub_63C8
                pop     di

loc_5FD0:                               ; ...
                mov     cx, [bx+26h]
                cmp     cs:byte_5DDB, 0
                jz      short loc_5FDE
                mov     cx, [bx+5Ch]

loc_5FDE:                               ; ...
                mov     cs:word_5DE3, cx
                and     word ptr es:[di+3Fh], 0FFF7h
                test    byte ptr [bx], 4
                jz      short loc_5FF2
                or      word ptr es:[di+3Fh], 8

loc_5FF2:                               ; ...
                cmp     cx, 3Fh ; '?'
                ja      short loc_601C
                jcxz    short loc_601A
                mov     es, cs:BIOSDATAWORD
                assume es:nothing
                mov     di, 166h
                lea     si, [bx+28h]
                cmp     cs:byte_5DDB, 0
                jz      short loc_600F
                lea     si, [bx+5Eh]

loc_600F:                               ; ...
                inc     di
                inc     di
                lodsw
                stosb
                lodsw
                call    sub_621C
                stosb
                loop    loc_600F

loc_601A:                               ; ...
                clc
                retn
; ---------------------------------------------------------------------------

loc_601C:                               ; ...
                mov     al, 0Ch
                stc
                retn
; ---------------------------------------------------------------------------

loc_6020:                               ; ...
                lds     bx, ds:12h
                lds     bx, [bx+13h]
                test    byte ptr [bx], 1
                jz      short loc_6033
                call    sub_627D
                mov     [bx], al
                clc
                retn
; ---------------------------------------------------------------------------

loc_6033:                               ; ...
                cmp     byte ptr es:[di+3Eh], 5
                jnz     short loc_6042
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                jmp     loc_60ED
; ---------------------------------------------------------------------------

loc_6042:                               ; ...
                and     byte ptr es:[di+40h], 0F7h
                mov     cx, [bx+1]
                mov     dx, [bx+3]
                test    byte ptr [bx], 2
                jz      short loc_6055
                jmp     loc_6153
; ---------------------------------------------------------------------------

loc_6055:                               ; ...
                call    sub_627D
                cmp     al, 1
                jz      short loc_6062
                cmp     al, 3
                jnz     short loc_6067
                jmp     short loc_60D6
; ---------------------------------------------------------------------------

loc_6062:                               ; ...
                push    dx
                call    sub_622F
                pop     dx

loc_6067:                               ; ...
                call    checksingle
                mov     ax, dx
                mov     cs:word_5DD9, ax
                mov     cs:byte_5DD8, cl
                mov     ah, cl
                mov     bx, (offset loc_866 - offset loc_700)
                mov     ds, cs:BIOSDATAWORD
                mov     cx, cs:word_5DE3

loc_6084:                               ; ...
                mov     [bx], ax
                add     bx, 4
                loop    loc_6084
                mov     cx, 5

loc_608E:                               ; ...
                push    cx
                mov     bx, 166h
                mov     al, byte ptr cs:word_5DE3
                mov     ah, 5
                mov     cs:word_5DDE, ds
                call    sub_633C
                pop     cx
                jb      short loc_60BB
                push    cx
                push    bx
                xor     bx, bx
                mov     cs:word_5DDE, bx
                mov     al, byte ptr cs:word_5DE3
                mov     ah, 4
                mov     cl, 1
                call    sub_633C
                pop     bx
                pop     cx
                jnb     short loc_60E6

loc_60BB:                               ; ...
                call    ResetDisk
                mov     cs:byte_5DE2, 1
                push    ax
                push    cx
                push    dx
                call    sub_627D
                cmp     al, 1
                jnz     short loc_60D1
                call    sub_622F

loc_60D1:                               ; ...
                pop     dx
                pop     cx
                pop     ax
                loop    loc_608E

loc_60D6:                               ; ...
                mov     cs:byte_5DE2, 1
                cmp     ah, 6
                jnz     short loc_60E3
                mov     ah, 80h

loc_60E3:                               ; ...
                jmp     maperror
; ---------------------------------------------------------------------------

loc_60E6:                               ; ...
                mov     cs:byte_5DE2, 0
                retn
; ---------------------------------------------------------------------------

loc_60ED:                               ; ...
                push    ds
                lds     bx, ds:12h
                assume ds:nothing
                lds     bx, [bx+13h]
                mov     cx, [bx+3]
                mov     ax, [bx+1]
                mov     dx, [bx+5]
                mov     bl, [bx]
                pop     ds
                mov     byte ptr cs:rflag, 4
                mov     cs:word_53F3, cx
                mov     cs:byte_53F2, al
                mov     cx, cs:word_5DE3
                test    bl, 2
                jz      short loc_613E
                mov     ax, dx
                or      ah, ah
                jnz     short loc_6153
                mul     cl
                or      ah, ah
                jnz     short loc_6153
                mov     cx, ax
                test    word ptr es:[di+3Fh], 1
                jz      short loc_613E
                test    word ptr ds:8, 200h
                jz      short loc_613E
                or      word ptr ds:8, 800h

loc_613E:                               ; ...
                xor     ax, ax
                xor     bx, bx
                mov     cs:word_5DDE, bx
                call    sub_6191
                pushf
                and     word ptr ds:8, 0F7FFh
                popf
                retn
; ---------------------------------------------------------------------------

loc_6153:                               ; ...
                mov     ah, 1
                jmp     maperror
; ---------------------------------------------------------------------------

ReadTrack:                              ; ...
                mov     byte ptr cs:rflag, 2
                jmp     short loc_6166
; ---------------------------------------------------------------------------

loc_6160:                               ; ...
                mov     byte ptr cs:rflag, 3

loc_6166:                               ; ...
                push    es
                les     bx, ds:12h
                assume es:nothing
                les     bx, es:[bx+13h]
                mov     ax, es:[bx+3]
                mov     cs:word_53F3, ax
                mov     ax, es:[bx+1]
                mov     cs:byte_53F2, al
                mov     ax, es:[bx+5]
                mov     cx, es:[bx+7]
                les     bx, es:[bx+9]
                mov     cs:word_5DDE, es
                pop     es

; =============== S U B R O U T I N E =======================================


sub_6191        proc near               ; ...
                mov     cs:word_53F5, sp
                call    checksingle
                cmp     cs:byte_5DE1, 1
                jz      short loc_61A8
                push    ax
                push    cx
                call    sub_5A6D
                pop     cx
                pop     ax

loc_61A8:                               ; ...
                mov     si, 166h
                shl     ax, 2
                add     si, ax
                mov     dx, 1
                test    word ptr es:[di+3Fh], 8
                jz      short loc_61BD
                xchg    dx, cx

loc_61BD:                               ; ...
                push    cx
                push    dx
                inc     si
                inc     si
                lodsb
                mov     cs:byte_53F1, al
                test    word ptr es:[di+3Fh], 1
                jz      short loc_61E4
                test    word ptr ds:8, 200h
                jz      short loc_61E4
                mov     cs:word_53E9, dx
                mov     ax, dx
                call    sub_5B33
                pop     dx
                pop     cx
                clc
                retn
; ---------------------------------------------------------------------------

loc_61E4:                               ; ...
                lodsb
                push    ax
                push    si
                push    ds
                push    ax
                mov     ah, cs:byte_53EC
                lds     si, cs:dword_53ED
                mov     [si+3], al
                mov     [si+4], ah
                pop     ax
                pop     ds
                mov     al, dl
                mov     cs:word_53E9, ax
                call    sub_5B33
                pop     si
                pop     ax
                call    sub_6227
                add     bx, ax
                pop     dx
                pop     cx
                loop    loc_61BD
                cmp     cs:byte_5DE1, 1
                jz      short loc_621A
                call    sub_5A90

loc_621A:                               ; ...
                clc
                retn
sub_6191        endp


; =============== S U B R O U T I N E =======================================


sub_621C        proc near               ; ...
                cmp     ah, 2
                ja      short loc_6224
                mov     al, ah
                retn
; ---------------------------------------------------------------------------

loc_6224:                               ; ...
                mov     al, 3
                retn
sub_621C        endp


; =============== S U B R O U T I N E =======================================


sub_6227        proc near               ; ...
                mov     cl, al
                mov     ax, 80h
                shl     ax, cl
                retn
sub_6227        endp


; =============== S U B R O U T I N E =======================================


sub_622F        proc near               ; ...
                cmp     cs:byte_5DE2, 1
                jz      short loc_6245
                test    word ptr es:[di+3Fh], 80h
                jz      short loc_6273
                and     word ptr es:[di+3Fh], 0FF7Fh

loc_6245:                               ; ...
                mov     cs:byte_5DE2, 0
                mov     al, 4
                cmp     byte ptr es:[di+3Eh], 2
                jz      short loc_626B
                cmp     byte ptr es:[di+3Eh], 1
                jz      short loc_625F
                mov     al, 1
                jmp     short loc_626B
; ---------------------------------------------------------------------------

loc_625F:                               ; ...
                mov     al, 2
                cmp     cs:byte_5DE0, 0
                jnz     short loc_626B
                mov     al, 3

loc_626B:                               ; ...
                mov     ah, 17h
                mov     dl, es:[di+4]
                int     13h             ; DISK - DISK - SET TYPE (AT,XT2,XT286,CONV,PS
                                        ; AL = disk type AL = 03h - high-capacity disk in high-capacity drive

loc_6273:                               ; ...
                mov     ah, es:[di+13h]
                mov     cs:byte_5DD7, ah
                retn
sub_622F        endp


; =============== S U B R O U T I N E =======================================


sub_627D        proc near               ; ...
                push    cx
                push    dx
                cmp     cs:byte_5DE2, 1
                jz      short loc_62B0
                xor     al, al
                cmp     cs:byte_5DE1, 1
                jnz     short loc_6294
                jmp     loc_631E
; ---------------------------------------------------------------------------

loc_6294:                               ; ...
                push    es
                push    si
                sub     si, si
                mov     es, si
                assume es:BIOSDATA
                les     si, dword ptr es:aCom1+4 ; "    "
                assume es:nothing
                mov     word ptr cs:dword_53ED, si
                mov     word ptr cs:dword_53ED+2, es
                mov     byte ptr es:[si+9], 0Fh
                pop     si
                pop     es

loc_62B0:                               ; ...
                mov     cx, es:[di+41h]
                dec     cx
                and     ch, 3
                ror     ch, 1
                ror     ch, 1
                xchg    ch, cl
                or      cl, es:[di+13h]
                mov     dl, es:[di+4]
                push    es
                push    ds
                push    si
                push    di
                mov     ah, 18h
                int     13h             ; DISK - SET MEDIA TYPE FOR FORMAT (AT model 3x9,XT2,XT286,PS)
                                        ; DL = drive number, CH = lower 8 bits of number of tracks, CL = sectors per track
                jb      short loc_6306
                cmp     cs:byte_5DE2, 1
                jz      short loc_62FE
                push    es
                sub     si, si
                mov     es, si
                assume es:BIOSDATA
                push    es
                les     si, dword ptr es:aCom1+4 ; "    "
                assume es:nothing
                mov     word ptr cs:dword_5DD3, si
                mov     word ptr cs:dword_5DD3+2, es
                pop     es
                mov     es:78h, di
                pop     word ptr es:7Ah
                mov     cs:byte_5DE1, 1

loc_62FE:                               ; ...
                xor     al, al
                mov     cs:byte_5DE2, al
                jmp     short loc_631A
; ---------------------------------------------------------------------------

loc_6306:                               ; ...
                cmp     ah, 0Ch
                jz      short loc_6314
                cmp     ah, 80h
                jz      short loc_6318
                mov     al, 1
                jmp     short loc_631A
; ---------------------------------------------------------------------------

loc_6314:                               ; ...
                mov     al, 2
                jmp     short loc_631A
; ---------------------------------------------------------------------------

loc_6318:                               ; ...
                mov     al, 3

loc_631A:                               ; ...
                pop     di
                pop     si
                pop     ds
                pop     es

loc_631E:                               ; ...
                pop     dx
                pop     cx
                retn
sub_627D        endp


; =============== S U B R O U T I N E =======================================


ResetDisk       proc near               ; ...
                push    ax
                cmp     cs:byte_5DE1, 1
                jnz     short loc_6330
                mov     cs:byte_5DE2, 1

loc_6330:                               ; ...
                xor     ah, ah
                int     13h             ; DISK - RESET DISK SYSTEM
                                        ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
                mov     cs:step_drv, 0FFh
                pop     ax
                retn
ResetDisk       endp


; =============== S U B R O U T I N E =======================================


sub_633C        proc near               ; ...
                push    bx
                push    si
                test    cs:byte_5DE1, 1
                jnz     short loc_6365
                push    ax
                push    es
                sub     si, si
                mov     es, si
                assume es:BIOSDATA
                les     si, dword ptr es:aCom1+4 ; "    "
                assume es:nothing
                mov     word ptr cs:dword_53ED, si
                mov     word ptr cs:dword_53ED+2, es
                mov     al, cs:byte_5DD7
                mov     es:[si+4], al
                pop     es
                pop     ax

loc_6365:                               ; ...
                mov     dx, cs:word_5DD9
                mov     ch, dl
                mov     dl, es:[di+4]
                mov     dh, cs:byte_5DD8
                push    es
                mov     es, cs:word_5DDE
                int     13h             ; DISK -
                pop     es
                pop     si
                pop     bx
                retn
sub_633C        endp

; ---------------------------------------------------------------------------

ioctl_getown:                           ; ...
                call    SetDrive
                mov     al, es:[di+4]
                les     di, ds:0F8h

loc_638C:                               ; ...
                cmp     es:[di+4], al
                jnz     short loc_639A
                test    word ptr es:[di+3Fh], 20h
                jnz     short loc_63AF

loc_639A:                               ; ...
                les     di, es:[di]
                jmp     short loc_638C
; ---------------------------------------------------------------------------

ioctl_setown:                           ; ...
                call    SetDrive
                or      word ptr ds:8, 8
                call    checksingle
                and     word ptr ds:8, 0FFF7h

loc_63AF:                               ; ...
                xor     cl, cl
                test    word ptr es:[di+3Fh], 10h
                jz      short loc_63BF
                mov     cl, es:[di+5]
                inc     cl

loc_63BF:                               ; ...
                lds     bx, ds:12h
                mov     [bx+1], cl
                clc
                retn

; =============== S U B R O U T I N E =======================================


sub_63C8        proc near               ; ...
                push    ax
                xor     al, al
                mov     cs:byte_5DE2, al
                xchg    al, cs:byte_5DE1
                or      al, al
                jz      short loc_63F1
                push    si
                push    ds
                push    es
                lds     si, cs:dword_5DD3
                sub     ax, ax
                mov     es, ax
                assume es:BIOSDATA
                mov     word ptr es:aCom1+4, si ; "    "
                mov     word ptr es:aCom1+6, ds ; "  "
                pop     es
                assume es:nothing
                pop     ds
                pop     si

loc_63F1:                               ; ...
                pop     ax
                clc
                retn
sub_63C8        endp

; ---------------------------------------------------------------------------

loc_63F4:                               ; ...
                call    sub_6537
                mov     byte ptr cs:rflag, 2
                call    sub_64AA
                push    ds
                jb      short loc_643D
                les     di, ds:12h
                lds     si, ds:0FCh
                cmp     byte ptr [si+15h], 0F0h
                jb      short loc_643A
                cmp     word ptr [si+16h], 0
                jnz     short loc_6422
                cmp     byte ptr [si+42h], 29h ; ')'
                jnz     short loc_643A
                add     si, 43h ; 'C'
                jmp     short loc_642B
; ---------------------------------------------------------------------------

loc_6422:                               ; ...
                cmp     byte ptr [si+26h], 29h ; ')'
                jnz     short loc_643A
                add     si, 27h ; '''

loc_642B:                               ; ...
                mov     cx, 17h
                les     di, es:[bx+13h]
                add     di, 2
                rep movsb
                clc
                jmp     short loc_643D
; ---------------------------------------------------------------------------

loc_643A:                               ; ...
                mov     al, 7
                stc

loc_643D:                               ; ...
                pop     ds
                retn
; ---------------------------------------------------------------------------

loc_643F:                               ; ...
                call    sub_6537
                mov     byte ptr cs:rflag, 2
                call    sub_64AA
                push    ds
                jb      short loc_64A8
                lds     si, ds:0FCh
                cmp     byte ptr [si+15h], 0F0h
                jb      short loc_64A5
                cmp     word ptr [si+16h], 0
                jnz     short loc_646A
                cmp     byte ptr [si+42h], 29h ; ')'
                jnz     short loc_64A5
                push    di
                lea     di, [si+43h]
                jmp     short loc_6474
; ---------------------------------------------------------------------------

loc_646A:                               ; ...
                cmp     byte ptr [si+26h], 29h ; ')'
                jnz     short loc_64A5
                push    di
                lea     di, [si+27h]

loc_6474:                               ; ...
                push    ds
                push    si
                push    es
                push    ds
                pop     es
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                lds     si, ds:12h
                assume ds:nothing
                lds     si, [si+13h]
                add     si, 2
                mov     cx, 17h
                rep movsb
                pop     es
                pop     bx
                pop     ds
                pop     di
                call    mov_media_ids
                pop     ds
                mov     byte ptr cs:rflag, 3
                call    sub_64AA
                mov     cs:tim_drv, 0FFh
                retn
; ---------------------------------------------------------------------------

loc_64A5:                               ; ...
                mov     al, 7
                stc

loc_64A8:                               ; ...
                pop     ds
                retn

; =============== S U B R O U T I N E =======================================


sub_64AA        proc near               ; ...
                push    si
                xor     si, si
                cmp     word ptr es:[di+11h], 0
                jnz     short loc_64C4
                mov     si, es:[di+2Dh]
                or      si, si
                jz      short loc_64C4
                cmp     si, es:[di+9]
                jb      short loc_64C4
                xor     si, si

loc_64C4:                               ; ...
                push    dx
                push    bx
                xor     dx, dx
                mov     cs:word_53F9, dx

loc_64CD:                               ; ...
                push    es
                push    di
                push    dx
                push    si
                mov     al, es:[di+5]
                les     di, ds:0FCh
                mov     cx, 1
                call    diskio
                pop     si
                pop     dx
                pop     di
                pop     es
                jnb     short loc_64F3
                or      si, 8000h
                test    si, 3FFFh
                jnz     short loc_64F3
                or      si, 4000h

loc_64F3:                               ; ...
                test    si, 3FFFh
                jz      short loc_6527
                push    si
                and     si, 3FFFh
                cmp     dx, si
                pop     si
                jz      short loc_6527
                mov     dx, si
                and     dx, 3FFFh
                cmp     byte ptr cs:rflag, 3
                jz      short loc_6517
                test    si, 8000h
                jz      short loc_6527

loc_6517:                               ; ...
                test    si, 8000h
                jz      short loc_6521
                or      si, 4000h

loc_6521:                               ; ...
                and     si, 7FFFh
                jmp     short loc_64CD
; ---------------------------------------------------------------------------

loc_6527:                               ; ...
                pop     bx
                pop     dx
                and     si, 0C000h
                cmp     si, 0C000h
                clc
                jnz     short loc_6535
                stc

loc_6535:                               ; ...
                pop     si
                retn
sub_64AA        endp


; =============== S U B R O U T I N E =======================================


sub_6537        proc near               ; ...
                mov     dl, es:[di+4]
                or      dl, dl
                js      short locret_6561
                test    word ptr es:[di+3Fh], 4
                jnz     short locret_6561
                test    byte ptr ds:8, 2
                jz      short locret_6561
                call    haschange
                jz      short locret_6561
                mov     ah, 16h
                int     13h             ; DISK - FLOPPY DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
                                        ; DL = drive to check
                                        ; Return: AH = disk change status
                jnb     short locret_6561
                push    bx
                mov     bx, 40h ; '@'
                call    sub_7190
                pop     bx

locret_6561:                            ; ...
                retn
sub_6537        endp

; ---------------------------------------------------------------------------

loc_6562:                               ; ...
                lds     bx, ds:12h
                lds     bx, [bx+13h]
                mov     al, 0
                test    word ptr es:[di+3Fh], 200h
                jnz     short loc_6575
                inc     al

loc_6575:                               ; ...
                mov     [bx+1], al
                retn
; ---------------------------------------------------------------------------

loc_6579:                               ; ...
                lds     bx, ds:12h
                lds     bx, [bx+13h]
                and     word ptr es:[di+3Fh], 0FDFFh
                cmp     byte ptr [bx+1], 0
                jnz     short locret_6592
                or      word ptr es:[di+3Fh], 200h

locret_6592:                            ; ...
                retn
; ---------------------------------------------------------------------------

ioctl_support_query:                    ; ...
                push    es
                les     bx, ds:12h
                mov     ax, es:[bx+0Dh]
                cmp     al, 8
                jz      short loc_65A4
                cmp     al, 48h ; 'H'
                jnz     short loc_65BA

loc_65A4:                               ; ...
                push    cs
                pop     es
                assume es:BIOSCODE
                mov     cx, 0Dh
                mov     di, 167Dh
                xchg    al, ah
                repne scasb
                jnz     short loc_65BA
                mov     ax, 100h
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_65B7:                               ; ...
                pop     es
                assume es:nothing
                clc
                retn
; ---------------------------------------------------------------------------

loc_65BA:                               ; ...
                pop     es
                jmp     bc_cmderr
; ---------------------------------------------------------------------------

loc_65BE:                               ; ...
                lds     bx, ds:12h
                lds     bx, [bx+13h]
                mov     word ptr [bx], 0
                mov     dl, es:[di+4]
                xor     dh, dh
                mov     ah, 20h ; ' '
                int     13h             ; DISK - QCACHE - DISMOUNT
                jb      short loc_65EC
                inc     byte ptr [bx]

loc_65D7:                               ; ...
                dec     al
                cmp     al, 2
                jz      short loc_65E7
                add     al, 4
                cmp     al, 7
                jz      short loc_65E7
                cmp     al, 9
                jnz     short loc_65F8

loc_65E7:                               ; ...
                mov     [bx+1], al
                clc
                retn
; ---------------------------------------------------------------------------

loc_65EC:                               ; ...
                cmp     ah, 32h ; '2'
                jz      short loc_65D7
                mov     al, 2
                cmp     ah, 31h ; '1'
                jz      short loc_65FA

loc_65F8:                               ; ...
                mov     al, 7

loc_65FA:                               ; ...
                mov     ah, 81h
                stc
                retn
; ---------------------------------------------------------------------------

loc_65FE:                               ; ...
                lds     bx, ds:12h
                lds     bx, [bx+13h]
                mov     dl, es:[di+4]
                call    sub_663E
                mov     al, 3
                jb      short loc_6620
                mov     al, [bx]
                mov     ah, 45h ; 'E'
                int     13h             ; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, DS:SI - disk address packet)
                mov     [bx+1], al
                jnb     short loc_6620
                mov     al, ah
                call    maperror

loc_6620:                               ; ...
                mov     ah, 81h
                retn
; ---------------------------------------------------------------------------

loc_6623:                               ; ...
                mov     dl, es:[di+4]
                call    sub_663E
                mov     al, 3
                jb      short loc_663B
                mov     ah, 46h ; 'F'
                xor     al, al
                int     13h             ; DISK - IBM/MS Extension - EJECT MEDIA (DL - drive) AL =lock media in drive
                jnb     short loc_663B
                mov     al, ah
                call    maperror

loc_663B:                               ; ...
                mov     ah, 81h
                retn

; =============== S U B R O U T I N E =======================================


sub_663E        proc near               ; ...
                mov     ah, 41h ; 'A'
                push    bx
                mov     bx, 55AAh
                int     13h             ; DISK - Check for INT 13h Extensions
                                        ; BX = 55AAh, DL = drive number
                                        ; Return: CF set if not supported
                                        ; AH = extensions version
                                        ; BX = AA55h
                                        ; CX = Interface support bit map
                cmp     bx, 0AA55h
                pop     bx
                jnz     short loc_6654
                test    cl, 2
                jz      short loc_6654
                clc
                retn
; ---------------------------------------------------------------------------

loc_6654:                               ; ...
                stc
                retn
sub_663E        endp

; ---------------------------------------------------------------------------
word_6656       dw 0                    ; ...
word_6658       dw 0Eh                  ; ...
aCSystem_dat    db 'C:\SYSTEM.DAT',0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db  44h ; D
                db    4
                db  70h ; p
                db    0
                db    4
                db    0
word_66B0       dw 0                    ; ...
word_66B2       dw 0                    ; ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dw offset unk_66C4
word_66BE       dw 4E9h                 ; ...
                dw offset unk_66F8
word_66C2       dw 4E9h                 ; ...
unk_66C4        db    0                 ; ...
                db    0
                db  50h ; P
                db    0
                db    1
                db    0
                db    4
                db    0
                db  50h ; P
                db    0
                db    1
                db    0
                db  0Eh
                db    0
                db  50h ; P
                db    0
                db  14h
                db    0
                db  30h ; 0
                db    0
                db  50h ; P
                db    0
                db    4
                db    0
                db  12h
                db    0
                db  70h ; p
                db    0
                db    4
                db    0
                db  24h ; $
                db    4
                db  70h ; p
                db    0
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_66F8        db    0                 ; ...
                db    0
                db  50h ; P
                db    0
                db    0
                db    2
                db    0
                db    0
                db  70h ; p
                db    0
                db    0
                db  15h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_6712       dw 0                    ; ...
word_6714       dw 0                    ; ...
byte_6716       db 0                    ; ...
byte_6717       db 0                    ; ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 6Ah dup(0)
                db    0
aCWinboot_ini   db 'C:\WINBOOT.INI',0
                db 0

; =============== S U B R O U T I N E =======================================


i2f             proc far                ; ...
                cmp     ah, 8
                jz      short loc_684A
                cmp     ah, 13h
                jz      short loc_681D
                cmp     ah, 16h
                jz      loc_689B
                cmp     ax, 4B28h
                jz      loc_6A64
                cmp     ax, 4B29h
                jz      loc_6A6F
                cmp     ah, 4Ah ; 'J'
                jz      loc_6A2E
                iret
; ---------------------------------------------------------------------------

loc_681D:                               ; ...
                push    ax
                mov     ax, ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                push    word ptr ds:Orig13
                push    word ptr ds:Orig13+2
                push    word ptr ds:Old13
                push    word ptr ds:Old13+2
                mov     word ptr ds:Orig13, dx
                mov     word ptr ds:Orig13+2, ax
                mov     word ptr ds:Old13, bx
                mov     word ptr ds:Old13+2, es
                pop     es
                pop     bx
                pop     ds
                assume ds:nothing
                pop     dx
                pop     ax
                iret
; ---------------------------------------------------------------------------

loc_684A:                               ; ...
                or      al, al
                jnz     short loc_6851
                mov     al, 0FFh
                iret
; ---------------------------------------------------------------------------

loc_6851:                               ; ...
                cmp     al, 1
                jz      short loc_686D
                cmp     al, 3
                jz      short loc_687C
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                mov     ds:12h, bx
                mov     word ptr ds:14h, es
                pop     ds
                assume ds:nothing
                jmp     far ptr 70h:436h
; ---------------------------------------------------------------------------

loc_686D:                               ; ...
                push    es
                push    ds
                push    ds
                pop     es
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                call    sub_6F6B
                pop     ds
                assume ds:nothing
                pop     es
                iret
; ---------------------------------------------------------------------------

loc_687C:                               ; ...
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                lds     di, ds:0F8h
                assume ds:nothing
                iret
; ---------------------------------------------------------------------------

loc_6886:                               ; ...
                sub     ax, ax
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     dx, 1F88h
                mov     si, 1FD6h
                mov     bh, cs:byte_6716
                mov     bl, cs:byte_6717
                iret
; ---------------------------------------------------------------------------

loc_689B:                               ; ...
                cmp     al, 11h
                jz      short loc_6886
                push    ds
                cmp     al, 13h
                jz      loc_6934
                cmp     al, 14h
                jz      loc_694E
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                cmp     al, 0Eh
                jz      loc_697D
                cmp     al, 0Fh
                jz      loc_69E3
                cmp     al, 12h
                jz      short loc_692B
                cmp     al, 5
                jz      short loc_68FC
                cmp     al, 6
                jz      short loc_68E4
                cmp     al, 7
                jz      short loc_68F0
                cmp     al, 90h
                jz      short loc_68D3
                jmp     short loc_6929
; ---------------------------------------------------------------------------

loc_68D3:                               ; ...
                mov     cs:word_6712, bx
                mov     cs:word_6714, es
                mov     bx, 1F7Eh
                push    cs
                pop     es
                assume es:BIOSCODE
                jmp     short loc_6929
; ---------------------------------------------------------------------------

loc_68E4:                               ; ...
                test    dl, 1
                jnz     short loc_6929
                and     byte ptr ds:8, 0BFh
                jmp     short loc_6929
; ---------------------------------------------------------------------------

loc_68F0:                               ; ...
                cmp     bx, 0Dh
                jnz     short loc_6929
                push    ds
                pop     es
                assume es:nothing
                mov     di, 409h
                jmp     short loc_6929
; ---------------------------------------------------------------------------

loc_68FC:                               ; ...
                test    dx, 1
                jnz     short loc_6929
                or      byte ptr ds:8, 40h
                mov     cs:word_66B0, bx
                mov     cs:word_66B2, es
                mov     cs:word_66BE, cs
                mov     cs:word_66C2, cs
                mov     bx, 1F1Eh
                push    cs
                pop     es
                assume es:BIOSCODE
                cmp     byte ptr es:[bx], 0
                jnz     short loc_6929
                or      cx, 0FFFFh

loc_6929:                               ; ...
                pop     ds
                assume ds:nothing
                iret
; ---------------------------------------------------------------------------

loc_692B:                               ; ...
                mov     bx, 1F18h
                push    cs
                pop     es
                xor     ax, ax
                jmp     short loc_6929
; ---------------------------------------------------------------------------

loc_6934:                               ; ...
                push    cs
                pop     ds
                assume ds:BIOSCODE
                push    di
                push    si
                push    cx
                mov     ax, word_6658
                cmp     cx, ax
                jb      short loc_6949
                xchg    ax, cx
                mov     si, 1ECAh
                cld

loc_6945:                               ; ...
                rep movsb
                xor     ax, ax

loc_6949:                               ; ...
                pop     cx
                pop     si
                pop     di
                jmp     short loc_6929
; ---------------------------------------------------------------------------

loc_694E:                               ; ...
                push    cs
                pop     ds
                push    di
                push    si
                push    cx
                xor     ax, ax
                mov     cx, 4Eh ; 'N'
                cld
                repne scasb
                mov     ax, 4Eh ; 'N'
                jcxz    short loc_6949
                dec     di
                neg     cx
                add     cx, ax
                mov     word_6658, cx
                push    di
                push    es
                push    ds
                pop     es
                pop     ds
                assume ds:nothing
                pop     si
                mov     di, 1EC9h
                add     di, cx
                std
                jmp     short loc_6945
; ---------------------------------------------------------------------------

loc_6977:                               ; ...
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing

loc_697D:                               ; ...
                cmp     bl, 1
                jz      short loc_69CA
                ja      short loc_69D0
                mov     dx, cs:word_6656
                xor     ax, ax
                test    byte ptr ds:9, 20h
                jz      short loc_6929
                dec     ax
                jmp     short loc_6929
; ---------------------------------------------------------------------------

loc_6995:                               ; ...
                cmp     bl, 6
                ja      short loc_6929
                mov     dl, ds:4E4h
                xor     ax, ax
                jmp     short loc_6929
; ---------------------------------------------------------------------------

loc_69A2:                               ; ...
                cmp     bl, 5
                jb      short loc_69B0
                ja      short loc_6995
                and     byte ptr ds:9, 0DFh
                jmp     short loc_69D7
; ---------------------------------------------------------------------------

loc_69B0:                               ; ...
                or      byte ptr ds:9, 20h
                mov     ax, ds:44Ch
                mov     ds:44Ah, ax
                mov     al, 0FFh
                sub     al, ds:2B1h
                mov     ds:2B0h, al
                mov     ax, ds:2B2h
                mov     ds:2B4h, ax

loc_69CA:                               ; ...
                call    sub_4AA5
                jmp     loc_6929
; ---------------------------------------------------------------------------

loc_69D0:                               ; ...
                cmp     bl, 3
                jz      short loc_69DD
                ja      short loc_69A2

loc_69D7:                               ; ...
                call    sub_4B0C
                jmp     loc_6929
; ---------------------------------------------------------------------------

loc_69DD:                               ; ...
                call    sub_49EE
                jmp     loc_6929
; ---------------------------------------------------------------------------

loc_69E3:                               ; ...
                cmp     byte ptr ds:locret_3B4, 0CFh
                jz      loc_6929
                cmp     bl, 1
                ja      loc_6929
                cli
                mov     ax, 0
                jz      short loc_6A04
                mov     dx, ds:15Ah
                mov     cx, ds:15Ch
                jmp     loc_6929
; ---------------------------------------------------------------------------

loc_6A04:                               ; ...
                push    ax
                push    bx
                mov     ax, ds:15Ah
                mov     bx, ds:15Ch
                cmp     ax, ds:3B5h
                jnz     short loc_6A21
                cmp     bx, ds:3B7h
                jnz     short loc_6A21
                mov     ds:3B5h, dx
                mov     ds:3B7h, cx

loc_6A21:                               ; ...
                mov     ds:15Ah, dx
                mov     ds:15Ch, cx
                pop     bx
                pop     ax
                jmp     loc_6929
; ---------------------------------------------------------------------------

loc_6A2E:                               ; ...
                cmp     al, 16h
                jnz     short loc_6A36
                call    sub_732A
                iret
; ---------------------------------------------------------------------------

loc_6A36:                               ; ...
                cmp     al, 17h
                jnz     short loc_6A3E
                call    sub_73B9
                iret
; ---------------------------------------------------------------------------

loc_6A3E:                               ; ...
                cmp     al, 18h
                jnz     short loc_6A46
                call    sub_743D
                iret
; ---------------------------------------------------------------------------

loc_6A46:                               ; ...
                cmp     al, 21h ; '!'
                jnz     short loc_6A4E
                call    dblspace_flush_ic
                iret
; ---------------------------------------------------------------------------

loc_6A4E:                               ; ...
                cmp     al, 50h ; 'P'
                jnz     short loc_6A7A
                push    ds
                mov     ds, cs:BIOSDATAWORD
                sub     ax, ax
                mov     cl, ds:462h
                mov     dx, ds:463h
                pop     ds
                assume ds:nothing
                iret
; ---------------------------------------------------------------------------

loc_6A64:                               ; ...
                sub     ax, ax
                mov     es, cs:BIOSDATAWORD
                assume es:nothing
                mov     di, 465h
                iret
; ---------------------------------------------------------------------------

loc_6A6F:                               ; ...
                mov     bx, 2D46h
                push    cs
                pop     es
                assume es:BIOSCODE
                mov     ax, es:[bx+8]
                inc     ax
                iret
; ---------------------------------------------------------------------------

loc_6A7A:                               ; ...
                cmp     al, 31h ; '1'
                jnz     short loc_6A81
                mov     [si], cl
                iret
; ---------------------------------------------------------------------------

loc_6A81:                               ; ...
                cmp     al, 32h ; '2'
                jz      loc_6977
                cmp     al, 33h ; '3'
                jz      loc_6886
                cmp     al, 1
                jnz     short loc_6A95
                call    sub_6ACB
                iret
; ---------------------------------------------------------------------------

loc_6A95:                               ; ...
                cmp     al, 4
                jnz     short loc_6AA1
                sub     ax, ax
                push    cs
                pop     es
                mov     di, 30h ; '0'
                iret
; ---------------------------------------------------------------------------

loc_6AA1:                               ; ...
                push    cx
                push    dx
                cmp     al, 2
                jnz     short loc_6AC5
                push    bp
                mov     bp, sp
                mov     cx, [bp+8]
                pop     bp
                sub     dx, dx

loc_6AB0:                               ; ...
                cmp     dl, 2
                jnz     short loc_6ABA
                call    sub_6B84
                jmp     short loc_6AC2
; ---------------------------------------------------------------------------

loc_6ABA:                               ; ...
                or      cx, cx
                jnz     short loc_6ABF
                inc     cx

loc_6ABF:                               ; ...
                call    sub_6B0B

loc_6AC2:                               ; ...
                pop     dx
                pop     cx
                iret
; ---------------------------------------------------------------------------

loc_6AC5:                               ; ...
                cmp     al, 3
                jnz     short loc_6AC2
                jmp     short loc_6AB0
i2f             endp


; =============== S U B R O U T I N E =======================================


sub_6ACB        proc near               ; ...
                push    si
                mov     si, 0FFFFh
                mov     es, si
                assume es:nothing
                mov     si, 30h ; '0'
                sub     bx, bx
                cmp     es:[si+4], bx
                jz      short loc_6AFF

loc_6ADC:                               ; ...
                cmp     word ptr es:[si], 534Dh
                jnz     short loc_6AFF
                cmp     word ptr es:[si+2], 0
                jnz     short loc_6AF7
                cmp     es:[si+4], bx
                jbe     short loc_6AF7
                mov     bx, es:[si+4]
                lea     di, [si+10h]

loc_6AF7:                               ; ...
                mov     si, es:[si+6]
                test    si, si
                jnz     short loc_6ADC

loc_6AFF:                               ; ...
                sub     bx, 10h
                ja      short loc_6B09
                sub     bx, bx
                lea     di, [bx-1]

loc_6B09:                               ; ...
                pop     si
                retn
sub_6ACB        endp


; =============== S U B R O U T I N E =======================================


sub_6B0B        proc near               ; ...
                push    ax
                push    si
                lea     si, [bx+0Fh]
                and     si, 0FFF0h
                xchg    ax, bx
                cmp     dl, 1
                ja      short loc_6B22
                call    sub_6ACB
                jz      short loc_6B22
                cmp     si, bx
                jbe     short loc_6B28

loc_6B22:                               ; ...
                xchg    ax, bx
                mov     di, 0FFFFh
                jmp     short loc_6B81
; ---------------------------------------------------------------------------

loc_6B28:                               ; ...
                push    ds
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     ax, si
                test    dl, dl
                jz      short loc_6B53
                lea     si, [bx+di+10h]
                sub     si, ax
                xchg    si, di
                mov     word ptr [si-0Eh], 0
                xchg    ax, bx
                sub     ax, bx
                mov     [si-0Ch], ax
                mov     [di-0Eh], cx
                lea     cx, [di-10h]
                xchg    cx, [si-0Ah]
                mov     ax, bx
                lea     si, [di-10h]
                jmp     short loc_6B68
; ---------------------------------------------------------------------------

loc_6B53:                               ; ...
                add     si, di
                mov     [di-0Eh], cx
                mov     [di-0Ch], ax
                mov     cx, si
                xchg    cx, [di-0Ah]
                xchg    ax, bx
                sub     ax, bx
                mov     word ptr [si+2], 0

loc_6B68:                               ; ...
                mov     word ptr [si], 534Dh
                mov     [si+4], ax
                mov     [si+6], cx
                sub     ax, ax
                mov     [si+8], ax
                mov     [si+0Ah], ax
                mov     [si+0Ch], ax
                mov     [si+0Eh], ax
                pop     ds
                assume ds:nothing

loc_6B81:                               ; ...
                pop     si
                pop     ax
                retn
sub_6B0B        endp


; =============== S U B R O U T I N E =======================================


sub_6B84        proc near               ; ...
                pusha
                push    ds
                mov     ax, cs
                mov     dx, es
                cmp     ax, dx
                jnz     short loc_6BE2
                mov     ds, ax
                assume ds:BIOSCODE
                sub     di, 10h
                cmp     word ptr [di], 534Dh
                jnz     short loc_6BE2
                mov     si, 30h ; '0'
                cmp     si, di
                jz      short loc_6BC4

loc_6BA0:                               ; ...
                cmp     [si+6], di
                jz      short loc_6BB0
                cmp     word ptr [si+6], 0
                jz      short loc_6BDD
                mov     si, [si+6]
                jmp     short loc_6BA0
; ---------------------------------------------------------------------------

loc_6BB0:                               ; ...
                cmp     word ptr [si+2], 0
                jnz     short loc_6BC4
                mov     ax, [di+4]
                add     ax, 10h
                add     [si+4], ax
                add     [si+6], ax
                mov     di, si

loc_6BC4:                               ; ...
                mov     si, [di+6]
                test    si, si
                jz      short loc_6BDD
                cmp     word ptr [si+2], 0
                jnz     short loc_6BDD
                mov     ax, [si+4]
                add     ax, 10h
                add     [di+4], ax
                add     [di+6], ax

loc_6BDD:                               ; ...
                mov     word ptr [di+2], 0

loc_6BE2:                               ; ...
                pop     ds
                assume ds:nothing
                popa
                retn
sub_6B84        endp

; ---------------------------------------------------------------------------
prevoper        dw 0                    ; ...
byte_6BE7       db 0                    ; ...
ec35flag        db 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_6BE9        proc near               ; ...
                cld
                push    cx
                mov     cx, 100h
                cmp     si, 0FE00h
                ja      short loc_6BFE
                cmp     di, 0FE00h
                ja      short loc_6BFE
                rep movsw
                pop     cx
                retn
; ---------------------------------------------------------------------------

loc_6BFE:                               ; ...
                shl     cx, 1
                rep movsb
                pop     cx
                retn
sub_6BE9        endp


; =============== S U B R O U T I N E =======================================


sub_6C04        proc near               ; ...
                push    ax
                push    bx
                push    es
                push    di
                call    sub_6C7B
                jb      short loc_6C6F
                test    word ptr es:[di+3Fh], 1
                jz      short loc_6C6F
                mov     bx, es:[di+13h]
                mov     ax, cx
                and     ax, 3Fh
                cmp     ax, bx
                jbe     short loc_6C6F
                div     bl
                or      ah, ah
                jnz     short loc_6C2C
                mov     ah, bl
                dec     al

loc_6C2C:                               ; ...
                and     cl, 0C0h
                or      cl, ah
                xor     ah, ah
                inc     ax
                add     al, dh
                adc     ah, 0
                cmp     ax, es:[di+15h]
                jbe     short loc_6C75
                push    dx
                xor     dx, dx
                mov     bx, es:[di+15h]
                div     bx
                or      dx, dx
                jnz     short loc_6C53
                mov     dx, bx
                or      ax, ax
                jz      short loc_6C53
                dec     ax

loc_6C53:                               ; ...
                mov     bh, dl
                pop     dx
                dec     bh
                mov     dh, bh
                mov     bh, cl
                and     bh, 3Fh
                mov     bl, 6
                xchg    cl, bl
                shr     bl, cl
                add     ch, al
                adc     bl, ah
                shl     bl, cl
                xchg    bl, cl
                or      cl, bh

loc_6C6F:                               ; ...
                clc
                pop     di
                pop     es
                assume es:nothing
                pop     bx
                pop     ax
                retn
; ---------------------------------------------------------------------------

loc_6C75:                               ; ...
                mov     dh, al
                dec     dh
                jmp     short loc_6C6F
sub_6C04        endp


; =============== S U B R O U T I N E =======================================


sub_6C7B        proc near               ; ...
                les     di, ds:0F8h

loc_6C7F:                               ; ...
                cmp     es:[di+4], dl
                jz      short locret_6C8E
                les     di, es:[di]
                cmp     di, 0FFFFh
                jnz     short loc_6C7F
                stc

locret_6C8E:                            ; ...
                retn
sub_6C7B        endp


; =============== S U B R O U T I N E =======================================


doint           proc near               ; ...
                mov     dl, [bp+8]      ; [bp+INT13FRAME.olddx] ; drive number
                xor     ah, ah
                or      al, al
                jz      short doint_ret
                mov     ah, [bp+3]      ; [bp+INT13FRAME.oldax+1] ; function
                push    word ptr [bp+0Eh] ; [bp+INT13FRAME.oldf] ; flags
                popf
                call    far ptr 70h:4E7h ; call BIOSDATA:call_orig13
                pushf
                pop     word ptr [bp+0Eh] ; [bp+INT13FRAME.oldf] ; flags

doint_ret:                              ; ...
                retn
doint           endp

; ---------------------------------------------------------------------------
dtype_array     dd 400090h              ; ...
                                        ; 40h:90h
; ---------------------------------------------------------------------------

loc_6CAD:                               ; ...
                test    byte ptr ds:8, 2
                jz      short loc_6CFA
                push    bx
                mov     bx, 140h
                call    sub_7190
                pop     bx
                jmp     short loc_6CFA
; ---------------------------------------------------------------------------

loc_6CBE:                               ; ...
                test    dl, dl
                js      short loc_6D02
                push    ax
                push    cx
                mov     cl, dl
                mov     al, 1
                shl     al, cl
                test    cs:ec35flag, al
                pop     cx
                pop     ax
                jz      short loc_6D02
                push    bx
                push    es
                les     bx, cs:dtype_array
                add     bl, dl
                adc     bh, 0
                mov     byte ptr es:[bx], 93h
                pop     es
                pop     bx
                jmp     short loc_6D02
; ---------------------------------------------------------------------------

i13z:
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                pop     ds:i13_ds       ; save ds
                mov     cs:prevoper, ax
                cmp     ah, 5
                jz      short loc_6CAD

loc_6CFA:                               ; ...
                cmp     cs:ec35flag, 0
                jnz     short loc_6CBE

loc_6D02:                               ; ...
                call    far ptr 70h:4E7h ; call BIOSDATA:call_orig13
                jb      short loc_6D2D

loc_6D09:                               ; ...
                mov     ds, ds:i13_ds   ; restore ds
                assume ds:nothing
                retf    2
; ---------------------------------------------------------------------------

loc_6D10:                               ; ...
                jnb     short loc_6D09

loc_6D12:                               ; ...
                cmp     ah, 6
                jnz     short loc_6D2A
                or      dl, dl
                js      short loc_6D2A
                test    byte ptr ds:8, 2
                jz      short loc_6D2A
                push    bx
                mov     bx, 40h ; '@'
                call    sub_7190
                pop     bx

loc_6D2A:                               ; ...
                stc
                jmp     short loc_6D09
; ---------------------------------------------------------------------------

loc_6D2D:                               ; ...
                cmp     ah, 9
                jnz     short loc_6D35
                jmp     loc_6DC6
; ---------------------------------------------------------------------------

loc_6D35:                               ; ...
                cmp     ah, 11h
                jnz     short loc_6D12
                cmp     cs:byte_5DE1, 1
                jz      short loc_6D12
                cmp     byte ptr cs:prevoper+1, 42h ; 'B'
                jnz     short loc_6D4D
                jmp     loc_6EEE
; ---------------------------------------------------------------------------

loc_6D4D:                               ; ...
                cmp     byte ptr cs:prevoper+1, 2
                jnz     short loc_6D12
                xor     ah, ah
                call    far ptr 70h:4E7h
                mov     ax, cs:prevoper
                xor     ah, ah
                cmp     al, 1
                jz      short loc_6D09
                push    bx
                push    cx
                push    dx
                mov     cs:byte_6BE7, al

loc_6D6D:                               ; ...
                mov     ax, 201h
                call    sub_6C04
                call    far ptr 70h:4E7h
                jnb     short loc_6D88
                cmp     ah, 9
                jz      short loc_6D9E
                cmp     ah, 11h
                jnz     short loc_6D97
                mov     ah, 0
                xor     ax, ax

loc_6D88:                               ; ...
                dec     cs:byte_6BE7
                jz      short loc_6D98
                inc     cl
                inc     bh
                inc     bh
                jmp     short loc_6D6D
; ---------------------------------------------------------------------------

loc_6D97:                               ; ...
                stc

loc_6D98:                               ; ...
                pop     dx
                pop     cx
                pop     bx
                jmp     loc_6D10
; ---------------------------------------------------------------------------

loc_6D9E:                               ; ...
                push    es
                push    bx
                les     bx, ds:0FCh
                mov     ax, 201h
                call    far ptr 70h:4E7h
                pop     bx
                pop     es
                jnb     short loc_6DB5
                cmp     ah, 11h
                jnz     short loc_6D97

loc_6DB5:                               ; ...
                push    si
                push    di
                mov     di, bx
                push    ds
                lds     si, ds:0FCh
                call    sub_6BE9
                pop     ds
                pop     di
                pop     si
                jmp     short loc_6D88
; ---------------------------------------------------------------------------

loc_6DC6:                               ; ...
                mov     ax, cs:prevoper
                sti
                cmp     ah, 2
                jb      short loc_6E06
                cmp     ah, 4
                jz      short loc_6E0C
                cmp     ah, 5
                jz      short loc_6E1C
                ja      short loc_6E06
                push    dx
                push    cx
                push    bx
                push    ax
                push    bp
                mov     bp, sp
                mov     dx, es
                shl     dx, 4
                add     dx, bx
                add     dx, 1FFh
                jnb     short loc_6DF3
                jmp     loc_6E75
; ---------------------------------------------------------------------------

loc_6DF3:                               ; ...
                shr     dh, 1
                mov     ah, 80h
                sub     ah, dh
                cmp     ah, al
                jb      short loc_6E31
                mov     dh, [bp+9]
                call    doint
                jmp     loc_6EDF
; ---------------------------------------------------------------------------

loc_6E06:                               ; ...
                mov     ah, 9
                stc
                jmp     loc_6D09
; ---------------------------------------------------------------------------

loc_6E0C:                               ; ...
                push    es
                push    bx

loc_6E0E:                               ; ...
                les     bx, ds:disksector
                call    far ptr 70h:4E7h
                pop     bx
                pop     es
                jmp     loc_6D10
; ---------------------------------------------------------------------------

loc_6E1C:                               ; ...
                push    es
                push    bx
                push    si
                push    di
                push    ds
                push    es
                les     di, ds:0FCh
                pop     ds
                mov     si, bx
                call    sub_6BE9
                pop     ds
                pop     di
                pop     si
                jmp     short loc_6E0E
; ---------------------------------------------------------------------------

loc_6E31:                               ; ...
                mov     dx, [bp+8]
                push    cx
                push    es
                push    di
                call    sub_6C7B
                mov     cx, es:[di+13h]
                test    word ptr es:[di+3Fh], 1
                pop     di
                pop     es
                mov     al, ah
                jz      short loc_6E4E
                mov     ah, 3Fh ; '?'
                sub     ah, cl

loc_6E4E:                               ; ...
                pop     cx

loc_6E4F:                               ; ...
                cmp     ah, al
                jnb     short loc_6E58
                push    ax
                mov     al, ah
                jmp     short loc_6E5B
; ---------------------------------------------------------------------------

loc_6E58:                               ; ...
                mov     ah, al
                push    ax

loc_6E5B:                               ; ...
                call    doint
                jb      short loc_6EDF
                pop     ax
                sub     [bp+2], ah
                add     cl, ah
                add     bh, ah
                add     bh, ah
                cmp     ah, al
                jz      short loc_6E78
                sub     al, ah
                call    sub_6C04
                jmp     short loc_6E4F
; ---------------------------------------------------------------------------

loc_6E75:                               ; ...
                mov     dh, [bp+9]

loc_6E78:                               ; ...
                push    bx
                mov     ah, [bp+3]
                cmp     ah, 3
                jnz     short loc_6EA5
                push    es
                push    ds
                push    si
                push    di
                push    es
                les     di, ds:0FCh
                pop     ds
                push    di
                mov     si, bx
                call    sub_6BE9
                pop     bx
                pop     di
                pop     si
                pop     ds
                mov     al, 1
                mov     dl, [bp+8]
                call    sub_6C04
                call    doint
                pop     es
                jb      short loc_6EDF
                jmp     short loc_6EC9
; ---------------------------------------------------------------------------

loc_6EA5:                               ; ...
                push    es
                push    bx
                les     bx, ds:0FCh
                mov     al, 1
                mov     dl, [bp+8]
                call    sub_6C04
                call    doint
                pop     bx
                pop     es
                jb      short loc_6EDF
                push    si
                push    di
                mov     di, bx
                push    ds
                lds     si, ds:0FCh
                call    sub_6BE9
                pop     ds
                pop     di
                pop     si

loc_6EC9:                               ; ...
                pop     bx
                add     bh, 2
                inc     cx
                mov     al, [bp+2]
                clc
                dec     al
                jz      short loc_6EDF
                mov     dl, [bp+8]
                call    sub_6C04
                call    doint

loc_6EDF:                               ; ...
                mov     sp, bp
                pop     bp
                pop     bx
                pop     bx
                pop     cx
                pop     dx
                jb      short loc_6EEB
                jmp     loc_6D09
; ---------------------------------------------------------------------------

loc_6EEB:                               ; ...
                jmp     loc_6D35
; ---------------------------------------------------------------------------

loc_6EEE:                               ; ...
                xor     ah, ah
                call    far ptr 70h:4E7h
                mov     ds, word ptr ds:4E5h
                mov     ax, [si+2]
                cmp     ax, 1
                jz      short loc_6F50
                push    cx
                push    word ptr [si+2]
                push    word ptr [si+4]
                push    word ptr [si+8]
                push    word ptr [si+0Ah]
                mov     cx, ax

loc_6F10:                               ; ...
                mov     word ptr [si+2], 1
                mov     ah, 42h ; 'B'
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                call    far ptr 70h:4E7h
                mov     ds, ds:i13_ds
                assume ds:nothing
                jnb     short loc_6F2D
                cmp     ah, 11h
                stc
                jnz     short loc_6F3E

loc_6F2D:                               ; ...
                add     word ptr [si+4], 200h
                add     word ptr [si+8], 1
                adc     word ptr [si+0Ah], 0
                loop    loc_6F10
                xor     ax, ax

loc_6F3E:                               ; ...
                pop     word ptr [si+0Ah]
                pop     word ptr [si+8]
                pop     word ptr [si+4]
                pop     word ptr [si+2]
                pop     cx
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing

loc_6F50:                               ; ...
                jmp     loc_6D10
; ---------------------------------------------------------------------------
                db  4Eh ; N
                db  4Fh ; O
                db  20h
                db  4Eh ; N
                db  41h ; A
                db  4Dh ; M
                db  45h ; E
                db  20h
                db  20h
                db  20h
                db  20h
                db    0
                db  4Eh ; N
                db  4Fh ; O
                db  20h
                db  4Eh ; N
                db  41h ; A
                db  4Dh ; M
                db  45h ; E
                db  20h
                db  20h
                db  20h
                db  20h
                db    0

; =============== S U B R O U T I N E =======================================


sub_6F6B        proc near               ; ...
                push    ds
                mov     si, 0F8h

loc_6F6F:                               ; ...
                lds     si, [si]
                assume ds:nothing
                mov     al, es:[di+4]
                cmp     [si+4], al
                jnz     short loc_6F92
                mov     bl, 10h
                or      es:[di+3Fh], bl
                or      [si+3Fh], bl
                and     byte ptr es:[di+3Fh], 0DFh
                mov     bl, [si+3Fh]
                and     bl, 2
                or      es:[di+3Fh], bl

loc_6F92:                               ; ...
                cmp     word ptr [si], 0FFFFh
                jnz     short loc_6F6F
                mov     word ptr [si+2], es
                mov     [si], di
                mov     word ptr es:[di], 0FFFFh
                pop     ds
                mov     al, es:[di+50h]
                cmp     al, cs:byte_53EC
                jbe     short locret_6FB1
                mov     cs:byte_53EC, al

locret_6FB1:                            ; ...
                retn
sub_6F6B        endp


; =============== S U B R O U T I N E =======================================


sub_6FB2        proc far                ; ...
                push    bx
                push    cx
                push    dx
                test    byte ptr ds:8, 40h
                jz      short loc_6FDD
                push    di
                push    es
                sub     di, di
                mov     es, di
                assume es:BIOSDATA
                mov     bx, 15h
                mov     ax, 1684h
                int     2Fh             ; - Multiplex - MS WINDOWS - GET DEVICE API ENTRY POINT
                                        ; BX = virtual device (VxD) ID, ES:DI = 0000h:0000h
                                        ; Return: ES:DI -> VxD API entry point, or 0:0 if the VxD does not support an API
                mov     ax, es
                or      ax, di
                jz      short loc_6FDB
                push    cs
                mov     ax, 284Bh
                push    ax
                push    es
                push    di
                mov     ax, 1
                retf
; ---------------------------------------------------------------------------

loc_6FDB:                               ; ...
                pop     es
                assume es:nothing
                pop     di

loc_6FDD:                               ; ...
                mov     dl, es:[di+5]
                mov     dh, dl
                xor     dh, 1
                sub     cx, cx
                mov     ax, 4A00h
                int     2Fh
                inc     cx
                jz      short loc_7018
                add     dl, 41h ; 'A'
                mov     si, 2D68h
                add     si, cs:word_74EA
                call    sub_701C
                mov     al, dl
                int     29h             ; DOS 2+ internal - FAST PUTCHAR
                                        ; AL = character to display
                mov     al, 3Ah ; ':'
                int     29h             ; DOS 2+ internal - FAST PUTCHAR
                                        ; AL = character to display
                mov     si, 2D68h
                add     si, cs:word_74EC
                call    sub_701C
                call    con_flush
                sub     ah, ah
                int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                        ; Return: AH = scan code, AL = character

loc_7018:                               ; ...
                pop     dx
                pop     cx
                pop     bx
                retn
sub_6FB2        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_701C        proc near               ; ...
                lods    byte ptr cs:[si]
                or      al, al
                jz      short locret_7026
                int     29h             ; DOS 2+ internal - FAST PUTCHAR
                                        ; AL = character to display
                jmp     short sub_701C
; ---------------------------------------------------------------------------

locret_7026:                            ; ...
                retn
sub_701C        endp


; =============== S U B R O U T I N E =======================================


sub_7027        proc near               ; ...
                cmp     word ptr es:[di+3Ch], 0
                retn
sub_7027        endp


; =============== S U B R O U T I N E =======================================


mediacheck      proc near               ; ...
                call    checksingle
                xor     si, si
                call    haschange
                jz      short locret_7067
                call    sub_71AB
                jnz     short loc_7068
                push    ax
                push    dx
                mov     dl, es:[di+4]
                mov     ah, 16h
                int     13h             ; DISK - FLOPPY DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
                                        ; DL = drive to check
                                        ; Return: AH = disk change status
                pop     dx
                pop     ax
                jb      short loc_7068
                mov     si, 1
                mov     bl, cs:tim_drv
                cmp     es:[di+4], bl
                jz      short locret_7067
                push    ax
                push    cx
                push    dx
                call    Check_Time_Of_Access
                pop     dx
                pop     cx
                pop     ax
                or      si, si
                jz      short loc_7068
                xor     si, si

locret_7067:                            ; ...
                retn
; ---------------------------------------------------------------------------

loc_7068:                               ; ...
                call    GetBp
                jb      short locret_7067
                call    loc_709D
                jnb     short locret_7067
                jmp     maperror
mediacheck      endp


; =============== S U B R O U T I N E =======================================


sub_7075        proc near               ; ...
                call    sub_7027
                jz      short nullsub_7
                call    sub_71AB
                jz      short nullsub_7
                call    GetBp
                jb      short loc_7093
                call    loc_709D
                jb      short loc_7090
                or      si, si
                jns     short nullsub_7
                call    sub_7137

loc_7090:                               ; ...
                call    maperror

loc_7093:                               ; ...
                stc
                pop     si
sub_7075        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


nullsub_7       proc near               ; ...
                retn
nullsub_7       endp


; =============== S U B R O U T I N E =======================================


sub_7096        proc near               ; ...
                call    sub_72D8
                or      si, si
                js      short loc_70E4

loc_709D:                               ; ...
                push    si
                push    ds
                lds     si, ds:0FCh
                cmp     word ptr [si+16h], 0
                jnz     short loc_70AF
                cmp     byte ptr [si+42h], 29h ; ')'
                jmp     short loc_70B3
; ---------------------------------------------------------------------------

loc_70AF:                               ; ...
                cmp     byte ptr [si+26h], 29h ; ')'

loc_70B3:                               ; ...
                pop     ds
                pop     si
                jz      short loc_70EC
                call    haschange
                jz      short nullsub_7
                push    ds
                lds     si, ds:0FCh
                cmp     byte ptr [si+10h], 0
                jz      short loc_70CB
                cmp     word ptr [si+16h], 0

loc_70CB:                               ; ...
                pop     ds
                mov     si, 0
                jz      short locret_70E3
                call    sub_71E3
                jb      short locret_70E3
                call    sub_72C3
                mov     si, 0FFFFh
                jnz     short loc_70E4
                inc     si

loc_70DF:                               ; ...
                call    sub_71B2
                clc

locret_70E3:                            ; ...
                retn
; ---------------------------------------------------------------------------

loc_70E4:                               ; ...
                clc
                mov     cs:tim_drv, 0FFh
                retn
; ---------------------------------------------------------------------------

loc_70EC:                               ; ...
                push    ax
                push    ds
                lds     si, ds:0FCh
                mov     ax, [si+27h]
                mov     si, [si+29h]
                pop     ds
                cmp     ax, es:[di+89h]
                jnz     short loc_710C
                cmp     si, es:[di+8Bh]
                jnz     short loc_710C
                xor     si, si
                pop     ax
                jmp     short loc_70DF
; ---------------------------------------------------------------------------

loc_710C:                               ; ...
                pop     ax
                mov     si, 0FFFFh
                clc
                jmp     short loc_70E4
sub_7096        endp


; =============== S U B R O U T I N E =======================================


sub_7113        proc near               ; ...
                cmp     ah, 6
                jnz     short locret_70E3
                call    sub_7027
                jz      short locret_70E3
                call    GetBp
                jb      short loc_7134
                call    sub_7096
                jb      short loc_7130
                or      si, si
                js      short loc_712D
                inc     bp
                retn
; ---------------------------------------------------------------------------

loc_712D:                               ; ...
                call    sub_7137

loc_7130:                               ; ...
                stc
                jmp     loc_5C7C
; ---------------------------------------------------------------------------

loc_7134:                               ; ...
                jmp     loc_5C7F
sub_7113        endp


; =============== S U B R O U T I N E =======================================


sub_7137        proc near               ; ...
                mov     si, 16h
                call    sub_7144
                mov     ah, 6
                stc
                retn
sub_7137        endp


; =============== S U B R O U T I N E =======================================


media_set_vid   proc near               ; ...
                mov     si, 0Fh
media_set_vid   endp


; =============== S U B R O U T I N E =======================================


sub_7144        proc near               ; ...
                push    ds
                lds     bx, ds:12h
                add     di, 7Dh ; '}'
                mov     [bx+si], di
                sub     di, 7Dh ; '}'
                mov     word ptr [bx+si+2], es
                pop     ds
                retn
sub_7144        endp


; =============== S U B R O U T I N E =======================================


sub_7156        proc near               ; ...
                test    word ptr es:[di+3Fh], 2
                jz      short locret_718F
                cmp     byte ptr es:[di+3Eh], 2
                jz      short locret_718F
                cmp     ah, 0F9h
                jnz     short locret_718F
                cmp     byte ptr es:[di+3Eh], 7
                jz      short loc_7189
                cmp     byte ptr es:[di+3Eh], 9
                jz      short loc_7189
                mov     al, 7
                mov     bx, 0E00Fh
                mov     cx, 960h
                mov     dx, 102h
                add     sp, 2
                jmp     Has1
; ---------------------------------------------------------------------------

loc_7189:                               ; ...
                add     sp, 2
                jmp     loc_5696
; ---------------------------------------------------------------------------

locret_718F:                            ; ...
                retn
sub_7156        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_7190        proc near               ; ...
                push    es
                push    di
                les     di, ds:0F8h

loc_7196:                               ; ...
                cmp     es:[di+4], dl
                jnz     short loc_71A0
                or      es:[di+3Fh], bx

loc_71A0:                               ; ...
                les     di, es:[di]
                cmp     di, 0FFFFh
                jnz     short loc_7196
                pop     di
                pop     es
                retn
sub_7190        endp


; =============== S U B R O U T I N E =======================================


sub_71AB        proc near               ; ...
                test    word ptr es:[di+3Fh], 40h
                retn
sub_71AB        endp


; =============== S U B R O U T I N E =======================================


sub_71B2        proc near               ; ...
                and     word ptr es:[di+3Fh], 0FFBFh
                retn
sub_71B2        endp


; =============== S U B R O U T I N E =======================================


haschange       proc near               ; ...
                test    word ptr es:[di+3Fh], 2
                retn
haschange       endp


; =============== S U B R O U T I N E =======================================


set_volume_id   proc near               ; ...
                push    dx
                push    ax
                call    haschange
                jz      short loc_71D8
                cmp     word ptr es:[di+11h], 0
                jz      short loc_71D8
                call    sub_71E3
                jb      short loc_71DC
                call    sub_72AC
                call    sub_71B2

loc_71D8:                               ; ...
                clc
                pop     ax
                pop     dx
                retn
; ---------------------------------------------------------------------------

loc_71DC:                               ; ...
                pop     dx
                pop     dx
                retn
set_volume_id   endp

; ---------------------------------------------------------------------------
dword_71DF      dd 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_71E3        proc near               ; ...
                push    dx
                push    cx
                push    bx
                push    ax
                push    ds
                push    es
                push    di
                push    cs
                pop     es
                assume es:BIOSCODE
                mov     di, 27CFh
                mov     si, 27C3h
                mov     cx, 0Ch
                rep movs byte ptr es:[di], byte ptr cs:[si]
                pop     di
                pop     es
                assume es:nothing
                cmp     word ptr es:[di+11h], 0
                jnz     short loc_7207
                mov     ah, 4
                stc
                jmp     loc_72A8
; ---------------------------------------------------------------------------

loc_7207:                               ; ...
                movzx   eax, byte ptr es:[di+0Bh]
                movzx   ecx, word ptr es:[di+11h]
                or      cx, cx
                jnz     short loc_721C
                mov     ecx, es:[di+1Fh]

loc_721C:                               ; ...
                mul     ecx
                movzx   ecx, word ptr es:[di+9]
                add     eax, ecx
                mov     cs:dword_71DF, eax
                mov     ax, es:[di+0Ch]
                shr     ax, 4
                mov     cx, ax

loc_7236:                               ; ...
                pop     ds
                push    ds
                push    cx
                mov     eax, cs:dword_71DF
                movzx   ecx, word ptr es:[di+13h]
                xor     edx, edx
                div     ecx
                inc     dx
                mov     cl, dl
                mov     edx, eax
                shr     edx, 10h
                div     word ptr es:[di+15h]
                mov     dh, dl
                mov     ch, al
                call    read_sector
                jb      short loc_72A7
                mov     cx, 10h
                mov     al, 8

loc_7266:                               ; ...
                cmp     byte ptr [bx], 0
                jz      short loc_72A4
                cmp     byte ptr [bx], 0E5h
                jz      short loc_7275
                test    [bx+0Bh], al
                jnz     short loc_7287

loc_7275:                               ; ...
                add     bx, 20h ; ' '
                loop    loc_7266
                pop     cx
                inc     cs:dword_71DF
                loop    loc_7236

loc_7283:                               ; ...
                xor     si, si
                jmp     short loc_729D
; ---------------------------------------------------------------------------

loc_7287:                               ; ...
                pop     cx
                mov     si, bx
                push    es
                push    di
                push    cs
                pop     es
                assume es:BIOSCODE
                mov     di, 27CFh
                mov     cx, 0Bh
                rep movsb
                xor     al, al
                stosb
                xor     si, si
                pop     di
                pop     es
                assume es:nothing

loc_729D:                               ; ...
                pop     ds
                pop     ax
                clc

loc_72A0:                               ; ...
                pop     bx
                pop     cx
                pop     dx
                retn
; ---------------------------------------------------------------------------

loc_72A4:                               ; ...
                pop     cx
                jmp     short loc_7283
; ---------------------------------------------------------------------------

loc_72A7:                               ; ...
                pop     cx

loc_72A8:                               ; ...
                pop     ds
                pop     si
                jmp     short loc_72A0
sub_71E3        endp


; =============== S U B R O U T I N E =======================================


sub_72AC        proc near               ; ...
                push    di
                push    si
                push    cx
                push    ds
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     si, 27CFh
                add     di, 7Dh ; '}'
                mov     cx, 0Ch
                cld
                rep movsb
                pop     ds
                assume ds:nothing
                pop     cx
                pop     si
                pop     di
                retn
sub_72AC        endp


; =============== S U B R O U T I N E =======================================


sub_72C3        proc near               ; ...
                push    di
                push    cx
                push    ds
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     si, 27CFh
                add     di, 7Dh ; '}'
                mov     cx, 0Ch
                cld
                repe cmpsb
                pop     ds
                assume ds:nothing
                pop     cx
                pop     di
                retn
sub_72C3        endp


; =============== S U B R O U T I N E =======================================


sub_72D8        proc near               ; ...
                push    ax
                xor     si, si
                mov     al, cs:byte_53E6
                cmp     al, es:[di+10h]
                jz      short loc_72E6
                dec     si

loc_72E6:                               ; ...
                pop     ax
                retn
sub_72D8        endp

; ---------------------------------------------------------------------------
sysi_bds_seg    dw 0                    ; ...
bootlog_txt     db 'C:\BOOTLOG.TXT',0   ; ...
bootlog_prv     db 'C:\BOOTLOG.PRV'     ; ...
                db 0
byte_7308       db 1                    ; ...
bootlog_mf      dw 2041h                ; ...
                                        ; bootlog.txt file open mode and flags
                                        ; (for extended open/create)
bootlog_fh      dw 0FFFFh               ; ...
                                        ; bootlog.txt file handle
bootlog_fo      dw 0                    ; ...
                                        ; bootlog.txt file open flag (open if > 0)
byte_730F       db 2                    ; ...
byte_7310       db 30h                  ; ...
                db    0
word_7312       dw 0                    ; ...
MDF             db 'MDF??'              ; ...
msgLogoDisabled db '(Logo disabled)',0Dh,0Ah ; ...

; =============== S U B R O U T I N E =======================================


sub_732A        proc near               ; ...
                push    ds
                push    cx
                push    dx
                push    si
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     ax, 0FFFFh
                cmp     byte_730F, 1
                jz      short loc_73B4
                cmp     byte_730F, 0
                jz      short loc_7346
                mov     byte_7310, 30h ; '0'

loc_7346:                               ; ...
                mov     bx, bootlog_fh
                or      bx, bx
                jns     short loc_73AE
                xor     al, al
                xchg    al, byte_7308
                mov     dl, 11h
                or      al, al
                jz      short loc_738D
                cmp     byte_7310, 33h ; '3'
                jb      short loc_736B
                mov     byte_730F, 1
                mov     ax, 0FFFFh
                jmp     short loc_73B4
; ---------------------------------------------------------------------------

loc_736B:                               ; ...
                cmp     byte_7310, 30h ; '0'
                jnz     short loc_7378
                or      bootlog_mf, 4000h ; auto commit on every write

loc_7378:                               ; ...
                mov     ax, 3305h
                int     21h             ; DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)
                add     dl, 40h         ; drive number (1) -> drive letter ('A')
                mov     byte ptr bootlog_txt, dl ; "C:\\BOOTLOG.TXT"
                mov     byte ptr bootlog_prv, dl ; "C:\\BOOTLOG.PRV"
                call    save_old_bootlog
                mov     dl, 12h         ; create/replace action

loc_738D:                               ; ...
                mov     bx, bootlog_mf
                mov     ax, 6C00h
                mov     cx, 2
                xor     dh, dh
                mov     si, offset bootlog_txt ; "C:\\BOOTLOG.TXT"
                int     21h             ; DOS - 4.0 - EXTENDED OPEN/CREATE
                                        ; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
                                        ; BH = flags, CX = create attribute, DL = action if file exists/does not exists
                                        ; DH = 00h (reserved), DS:SI -> ASCIZ file name
                jb      short loc_73B4
                mov     bootlog_fh, ax  ; file handle
                mov     bx, ax
                xor     cx, cx
                mov     dx, cx
                mov     ax, 4202h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from end of file

loc_73AE:                               ; ...
                inc     bootlog_fo
                xor     ax, ax          ; clc, ax = 0, there is not an error

loc_73B4:                               ; ...
                pop     si
                pop     dx
                pop     cx
                pop     ds
                assume ds:nothing
                retn
sub_732A        endp


; =============== S U B R O U T I N E =======================================


sub_73B9        proc near               ; ...
                mov     bx, cs:bootlog_fh
                or      bx, bx
                js      short bootlog_w_ret
                push    cx
                push    edx
                push    di
                push    ds
                push    es
                sub     ax, ax
                mov     es, ax          ; 0
                assume es:BIOSDATA
                mov     ds, ax          ; 0
                assume ds:BIOSDATA
                mov     edx, dword_46C
                mov     di, 604h
                mov     al, 5Bh ; '['
                stosb
                call    write_dword_hex_num
                mov     word ptr [di], 205Dh ; '] '
                mov     cx, 11
                mov     dx, 604h        ; Buffer at 0:604h
                mov     ah, 40h
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                pop     di
                pop     edx
                pop     cx
                jb      short bootlog_w_ret
                mov     ah, 40h
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                jb      short bootlog_w_ret
                push    cx
                push    dx
                push    si
                push    ds
                mov     ds, cs:BIOSDATAWORD
                assume ds:nothing
                test    ds:int19sem, 20h
                jnz     short loc_7431
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     si, offset msgLogoDisabled ; "(Logo disabled)\r\n"
                cmp     byte ptr [si], 0 ; (*)
                jz      short loc_7431
                push    es
                push    di
                sub     di, di
                mov     es, di
                assume es:BIOSDATA
                mov     di, 604h        ; MSG buffer at 0:604h
                mov     dx, di
                mov     cx, 17
                cld
                push    cx
                rep movsb
                pop     cx
                mov     byte ptr [si-11h], 0 ; put zero in the 1st byte of 'msgLogoDisabled:' (*)
                push    es
                pop     ds
                assume ds:BIOSDATA
                mov     ah, 40h
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                pop     di
                pop     es
                assume es:nothing

loc_7431:                               ; ...
                call    dblspace_flush_ic
                pop     ds
                assume ds:nothing
                pop     si
                pop     dx
                pop     cx
                jb      short bootlog_w_ret
                xor     ax, ax

bootlog_w_ret:                          ; ...
                retn
sub_73B9        endp


; =============== S U B R O U T I N E =======================================


sub_743D        proc near               ; ...
                mov     ax, cs:bootlog_fo
                dec     ax
                js      short locret_745E
                mov     cs:bootlog_fo, ax
                jnz     short locret_745E
                mov     bx, cs:bootlog_fh
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                mov     cs:bootlog_fh, 0FFFFh
                jb      short locret_745E
                xor     ax, ax

locret_745E:                            ; ...
                retn
sub_743D        endp


; =============== S U B R O U T I N E =======================================


dblspace_flush_ic proc near             ; ...
                push    bx              ; DBLSPACE.BIN
                                        ; - IOCTL - FLUSH OR INVALIDATE INTERNAL CACHES
                                        ; 'MD'
                                        ; 'F' -> flush internal caches
                                        ; '??' -> result, must be, 'OK' (4F4Bh)
                push    cx
                push    dx
                test    cs:bootlog_mf, 4000h
                jz      short dblspc_fic_ret
                mov     bx, cs:word_7312 ; BL = drive number, 0 = default, 1 = 'A'
                or      bx, bx
                jz      short dblspc_fic_ret
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     word ptr MDF+3, '??' ; "??"
                mov     dx, offset MDF  ; "MDF??"
                mov     ax, 4404h
                mov     cx, 5
                int     21h             ; DOS - 2+ - IOCTL -

dblspc_fic_ret:                         ; ...
                pop     dx
                pop     cx
                pop     bx
                retn
dblspace_flush_ic endp


; =============== S U B R O U T I N E =======================================


save_old_bootlog proc near              ; ...
                push    es
                mov     dx, offset bootlog_prv ; "C:\\BOOTLOG.PRV"
                mov     ah, 41h
                int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)
                mov     dx, offset bootlog_txt ; "C:\\BOOTLOG.TXT"
                mov     di, offset bootlog_prv ; "C:\\BOOTLOG.PRV"
                push    cs
                pop     es
                assume es:BIOSCODE
                mov     ah, 56h
                int     21h             ; DOS - 2+ - RENAME A FILE
                                        ; DS:DX -> ASCIZ old name (drive and path allowed, no wildcards)
                                        ; ES:DI -> ASCIZ new name
                jnb     short sobl_ret
                cmp     al, 2           ; file not found error ?
                jnz     short sobl_ret
                or      bootlog_mf, 4000h ; commit (fflush) file

sobl_ret:                               ; ...
                pop     es
                assume es:nothing
                retn
save_old_bootlog endp

; ---------------------------------------------------------------------------
hex_digits      db '0123456789ABCDEF'   ; ...

; =============== S U B R O U T I N E =======================================


write_dword_hex_num proc near           ; ...
                push    bx
                cld
                mov     bx, offset hex_digits ; "0123456789ABCDEF"
                mov     ah, 0Fh
                mov     cx, 8           ; 8 hex digits: ????????h

wrt8bhn_loop:                           ; ...
                rol     edx, 4
                mov     al, dl
                and     al, ah
                xlat    byte ptr cs:[bx]
                stosb
                loop    wrt8bhn_loop
                pop     bx
                retn
write_dword_hex_num endp

; ---------------------------------------------------------------------------
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    6
                db    0
                dw offset sngmsg        ; "\r\nInsert diskette for drive "
                db    0
                db    1
                dw 242h
word_74EA       dw 0                    ; ...
word_74EC       dw 1Dh                  ; ...
word_74EE       dw 3Fh                  ; ...
word_74F0       dw 0A8h                 ; ...
word_74F2       dw 141h                 ; ...
word_74F4       dw 18Eh                 ; ...
                dw 242h
sngmsg          db 0Dh,0Ah              ; ...
                db 'Insert diskette for drive '
                db 0
aAndPressAnyKeyWhenRead db ' and press any key when ready',0Dh,0Ah
                db 0Dh,0Ah,0
aYourProgramCausedADivi db 0Dh,0Ah
                db 'Your program caused a divide overflow error.',0Dh,0Ah
                db 'If the problem persists, contact your program vendor.',0Dh,0Ah
                db '$',0,'Windows has disabled direct disk access to protect your lon'
                db 'g filenames.',0Dh,0Ah
                db 'To override this protection, see the LOCK /? command for more inf'
                db 'ormation.',0Dh,0Ah
                db 0Dh,0Ah
                db '$',0,'The system has been halted.  Press Ctrl+Alt+Del to restart '
                db 'your computer.',0Dh,0Ah
                db '$',0
aYouStartedYourComputer db 0Dh,0Ah
                db 'You started your computer with a version of MS-DOS incompatible w'
                db 'ith this',0Dh,0Ah
                db 'version of Windows. Insert a Startup diskette matching this versi'
                db 'on of',0Dh,0Ah
                db 'Windows and then restart.',0Dh,0Ah
                db 0Dh,0Ah
                db '$',0
IOSYS_MSG       db 'IOSYSMSG'
                dw 258h
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A'
                db 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P'
                db 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M'
                db 'P', 'A', 'D', 'M', 'P', 'A', 'D', 'M', 'P', 'A', 'D'
                db 'M', 'P', 'A', 'D'
                dd 0
dword_7988      dd 0                    ; ...
dword_798C      dd 0                    ; ...
                dw 1
                dw 0
; ---------------------------------------------------------------------------
                cmp     ah, 43h ; 'C'
                jz      short loc_799E

loc_7999:                               ; ...
                jmp     cs:dword_798C
; ---------------------------------------------------------------------------

loc_799E:                               ; ...
                or      al, al
                jnz     short loc_79A5
                mov     al, 80h
                iret
; ---------------------------------------------------------------------------

loc_79A5:                               ; ...
                cmp     al, 10h
                jnz     short loc_79AF
                push    cs
                pop     es
                assume es:BIOSCODE
                mov     bx, 3253h
                iret
; ---------------------------------------------------------------------------

loc_79AF:                               ; ...
                cmp     al, 9
                jnz     short loc_7999
                mov     al, ah
                push    cs
                pop     es
                mov     bx, 34F8h
                iret
; ---------------------------------------------------------------------------
                db 2
                dw 0AA35h
                dw 0AA32h
                db  32h ; 2
                db 0AFh
                db  32h ; 2
                db 0CFh
                db  32h ; 2
                db 0EFh
                db  32h ; 2
                db 0FAh
                db  32h ; 2
                db  12h
                db  33h ; 3
                db  93h
                db  35h ; 5
                db 0CDh
                db  35h ; 5
                db 0E6h
                db  35h ; 5
                db  94h
                db  3Ah ; :
                db  0Ch
                db  35h ; 5
                db  3Fh ; ?
                db  35h ; 5
                db  6Dh ; m
                db  36h ; 6
                db 0B6h
                db  36h ; 6
word_79DB       dw 0C300h               ; ...
                db    0
                db  32h ; 2
                db    1
                db    0
                db  4Dh ; M
                db  53h ; S
; ---------------------------------------------------------------------------
                jmp     short loc_79E8
; ---------------------------------------------------------------------------
                nop
                nop
                nop

loc_79E8:                               ; ...
                push    si
                push    di
                push    cx
                push    ds
                push    es
                pushf
                cld
                push    ds
                pop     es
                push    cs
                pop     ds
                movzx   di, ah
                and     di, 7Fh
                cmp     di, 10h
                jnb     short loc_7A17
                test    ah, ah
                jns     short loc_7A0A
                bt      word_79DB, di
                jnb     short loc_7A17

loc_7A0A:                               ; ...
                shl     di, 1
                call    word ptr [di+322Bh]

loc_7A10:                               ; ...
                popf
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                pop     cx
                pop     di
                pop     si
                retf
; ---------------------------------------------------------------------------

loc_7A17:                               ; ...
                xor     ax, ax
                mov     bl, 80h
                jmp     short loc_7A10
; ---------------------------------------------------------------------------
                cmp     ah, 88h
                jz      short loc_7A33
                cmp     ax, 0E801h
                jz      short loc_7A31
                cmp     ah, 87h
                jz      short loc_7A36
                jmp     cs:dword_7988
; ---------------------------------------------------------------------------

loc_7A31:                               ; ...
                xor     bx, bx

loc_7A33:                               ; ...
                xor     ax, ax
                iret
; ---------------------------------------------------------------------------

loc_7A36:                               ; ...
                cli
                hlt
; ---------------------------------------------------------------------------
                jmp     short loc_7A36
; ---------------------------------------------------------------------------
                mov     bl, 91h
                xor     ax, ax
                retn
; ---------------------------------------------------------------------------
                cli
                cmp     word ptr ds:3202h, 1
                jz      short loc_7A54
                call    sub_7A7F
                or      ax, ax
                jz      short loc_7A5A
                mov     word ptr ds:3202h, 1

loc_7A54:                               ; ...
                mov     ax, 1
                xor     bl, bl
                retn
; ---------------------------------------------------------------------------

loc_7A5A:                               ; ...
                mov     bl, 82h
                xor     ax, ax
                retn
; ---------------------------------------------------------------------------
                cli
                cmp     word ptr ds:3202h, 0
                jz      short loc_7A74
                call    sub_7A8A
                or      ax, ax
                jz      short loc_7A7A
                mov     word ptr ds:3202h, 0

loc_7A74:                               ; ...
                mov     ax, 1
                xor     bl, bl
                retn
; ---------------------------------------------------------------------------

loc_7A7A:                               ; ...
                mov     bl, 82h
                xor     ax, ax
                retn

; =============== S U B R O U T I N E =======================================


sub_7A7F        proc near               ; ...
                cli
                inc     word ptr ds:3200h
                mov     ax, 1
                xor     bl, bl
                retn
sub_7A7F        endp


; =============== S U B R O U T I N E =======================================


sub_7A8A        proc near               ; ...
                cli
                cmp     word ptr ds:3200h, 0
                jz      short loc_7A9C
                dec     word ptr ds:3200h
                mov     ax, 1
                xor     bl, bl

locret_7A9B:                            ; ...
                retn
; ---------------------------------------------------------------------------

loc_7A9C:                               ; ...
                mov     bl, 82h
                xor     ax, ax
                jmp     short locret_7A9B
sub_7A8A        endp

; ---------------------------------------------------------------------------
                mov     ax, 1
                xor     bl, bl
                retn
; ---------------------------------------------------------------------------
                db 480 dup(0)
                dw 0A01h
word_7C8A       dw 30h                  ; ...
word_7C8C       dw 3318h                ; ...
                db    0
                db    0
word_7C90       dw 0                    ; ...
; ---------------------------------------------------------------------------
                mov     ax, 300h
                mov     bx, 363h
                mov     dx, 1
                retn
; ---------------------------------------------------------------------------
                cli
                call    sub_7CEF
                jnb     short loc_7CC4
                mov     bx, dx
                cmp     byte ptr [bx+1], 0FFh
                jz      short loc_7CC8
                inc     byte ptr [bx+1]
                mov     dx, [bx+4]
                mov     bx, [bx+2]
                mov     ax, bx
                shl     dx, 0Ah
                shl     bx, 0Ah
                shr     ax, 6
                or      dx, ax
                mov     ax, 1
                retn
; ---------------------------------------------------------------------------

loc_7CC4:                               ; ...
                mov     bl, 0A2h
                jmp     short loc_7CCA
; ---------------------------------------------------------------------------

loc_7CC8:                               ; ...
                mov     bl, 0ACh

loc_7CCA:                               ; ...
                xor     ax, ax
                mov     dx, ax
                retn
; ---------------------------------------------------------------------------
                cli
                call    sub_7CEF
                jnb     short loc_7CEA
                mov     bx, dx
                cmp     byte ptr [bx+1], 0
                jz      short loc_7CE6
                dec     byte ptr [bx+1]
                mov     ax, 1
                xor     bl, bl
                retn
; ---------------------------------------------------------------------------

loc_7CE6:                               ; ...
                mov     bl, 0AAh
                jmp     short loc_7CEC
; ---------------------------------------------------------------------------

loc_7CEA:                               ; ...
                mov     bl, 0A2h

loc_7CEC:                               ; ...
                xor     ax, ax
                retn

; =============== S U B R O U T I N E =======================================


sub_7CEF        proc near               ; ...
                push    ax
                push    bx
                push    cx
                push    dx
                mov     bx, dx
                cmp     bx, cs:word_7C8C
                jb      short loc_7D20
                cmp     bx, cs:word_7C90
                ja      short loc_7D20
                sub     dx, cs:word_7C8C
                mov     ax, dx
                xor     dx, dx
                mov     cx, 0Ah
                div     cx
                or      dx, dx
                jnz     short loc_7D20
                cmp     byte ptr [bx], 2
                jnz     short loc_7D20
                stc

loc_7D1B:                               ; ...
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                retn
; ---------------------------------------------------------------------------

loc_7D20:                               ; ...
                clc
                jmp     short loc_7D1B
sub_7CEF        endp

; ---------------------------------------------------------------------------
                test    ah, 80h
                jnz     sub_7E69
                push    si
                push    di
                push    eax
                push    ecx
                push    edx
                call    sub_7E69
                mov     si, ax
                cmp     eax, 0FFFFh
                jbe     short loc_7D42
                mov     si, 0FFFFh

loc_7D42:                               ; ...
                mov     di, dx
                cmp     edx, 0FFFFh
                jbe     short loc_7D50
                mov     di, 0FFFFh

loc_7D50:                               ; ...
                pop     edx
                pop     ecx
                pop     eax
                mov     ax, si
                mov     dx, di
                pop     di
                pop     si
                retn
; ---------------------------------------------------------------------------
                test    ah, 80h
                jnz     sub_7EC1
                push    si
                push    edx
                movzx   edx, dx
                call    sub_7EC1
                mov     si, dx
                pop     edx
                mov     dx, si
                pop     si
                retn
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_7F90

loc_7D76:                               ; ...
                cli
                push    si
                push    di
                push    cx
                push    edx
                push    eax
                push    ebx
                call    sub_7CEF
                jnb     short loc_7DED
                mov     si, dx
                cmp     byte ptr [si+1], 0
                jnz     short loc_7DF3
                mov     byte ptr [si], 4
                cmp     dword ptr [si+6], 0
                jz      short loc_7DCB
                mov     byte ptr [si], 1

loc_7D9A:                               ; ...
                mov     ebx, [si+2]
                mov     eax, ebx
                add     eax, [si+6]
                mov     di, cs:word_7C8C
                mov     cx, cs:word_7C8A

loc_7DAF:                               ; ...
                cmp     byte ptr [di], 1
                jnz     short loc_7DC6
                mov     edx, [di+2]
                cmp     edx, eax
                jz      short loc_7DDC
                add     edx, [di+6]
                cmp     edx, ebx
                jz      short loc_7DDA

loc_7DC6:                               ; ...
                add     di, 0Ah
                loop    loc_7DAF

loc_7DCB:                               ; ...
                pop     ebx
                pop     eax
                mov     ax, 1
                xor     bl, bl

loc_7DD4:                               ; ...
                pop     edx
                pop     cx
                pop     di
                pop     si
                retn
; ---------------------------------------------------------------------------

loc_7DDA:                               ; ...
                xchg    si, di

loc_7DDC:                               ; ...
                mov     edx, [si+6]
                add     edx, [di+6]
                mov     [si+6], edx
                mov     byte ptr [di], 4
                jmp     short loc_7D9A
; ---------------------------------------------------------------------------

loc_7DED:                               ; ...
                pop     ebx
                mov     bl, 0A2h
                jmp     short loc_7DF7
; ---------------------------------------------------------------------------

loc_7DF3:                               ; ...
                pop     ebx
                mov     bl, 0ABh

loc_7DF7:                               ; ...
                pop     eax
                xor     ax, ax
                jmp     short loc_7DD4
; END OF FUNCTION CHUNK FOR sub_7F90
; ---------------------------------------------------------------------------
                test    ah, 80h
                jnz     loc_7F58
                cli
                push    cx
                push    si
                call    sub_7CEF
                jnb     short loc_7E3F
                mov     si, dx
                cmp     word ptr [si+8], 0
                jnz     short loc_7E3F
                xor     ax, ax
                mov     bx, cs:word_7C8C
                mov     cx, cs:word_7C8A

loc_7E20:                               ; ...
                cmp     byte ptr [bx], 2
                jz      short loc_7E26
                inc     ax

loc_7E26:                               ; ...
                add     bx, 0Ah
                loop    loc_7E20
                mov     dx, [si+6]
                mov     bh, [si+1]
                or      ah, ah
                jz      short loc_7E37
                mov     al, 0FFh

loc_7E37:                               ; ...
                pop     si
                pop     cx
                mov     bl, al
                mov     ax, 1
                retn
; ---------------------------------------------------------------------------

loc_7E3F:                               ; ...
                pop     si
                pop     cx
                mov     bl, 0A2h
                xor     ax, ax
                retn
; ---------------------------------------------------------------------------
                test    ah, 80h
                jnz     sub_7F90
                push    si
                push    di

loc_7E4F:
                push    eax
                push    ebx
                movzx   ebx, bx
                call    sub_7F90
                mov     si, ax
                mov     di, bx
                pop     ebx
                mov     bx, di
                pop     eax
                mov     ax, si
                pop     di
                pop     si
                retn

; =============== S U B R O U T I N E =======================================


sub_7E69        proc near               ; ...
                push    esi
                push    edi
                xor     eax, eax
                xor     edx, edx
                xor     esi, esi
                mov     bx, cs:word_7C8C
                mov     cx, cs:word_7C8A

loc_7E80:                               ; ...
                cmp     byte ptr [bx], 4
                jz      short loc_7EAB
                mov     edi, [bx+2]
                add     edi, [bx+6]
                dec     edi
                cmp     esi, edi
                jnb     short loc_7E97
                mov     esi, edi

loc_7E97:                               ; ...
                cmp     byte ptr [bx], 1
                jnz     short loc_7EAB
                mov     edi, [bx+6]
                add     edx, edi
                cmp     eax, edi
                jnb     short loc_7EAB
                mov     eax, edi

loc_7EAB:                               ; ...
                add     bx, 0Ah
                loop    loc_7E80
                mov     ecx, esi
                mov     bl, 0A0h
                or      edx, edx
                jz      short loc_7EBC
                xor     bl, bl

loc_7EBC:                               ; ...
                pop     edi
                pop     esi
                retn
sub_7E69        endp


; =============== S U B R O U T I N E =======================================


sub_7EC1        proc near               ; ...
                cli
                push    cx
                push    si
                push    di
                xor     si, si
                mov     di, si
                mov     bx, cs:word_7C8C
                mov     cx, cs:word_7C8A

loc_7ED3:                               ; ...
                or      si, si
                jnz     short loc_7EE6
                cmp     byte ptr [bx], 1
                jnz     short loc_7EE6
                cmp     edx, [bx+6]
                ja      short loc_7EFB
                mov     si, bx
                jmp     short loc_7EF6
; ---------------------------------------------------------------------------

loc_7EE6:                               ; ...
                or      di, di
                jnz     short loc_7EFB
                cmp     byte ptr [bx], 4
                jnz     short loc_7EFB
                mov     di, bx
                cmp     si, 0
                jz      short loc_7EFB

loc_7EF6:                               ; ...
                cmp     di, 0
                jnz     short loc_7F19

loc_7EFB:                               ; ...
                add     bx, 0Ah
                loop    loc_7ED3
                or      si, si
                jnz     short loc_7F3E
                or      di, di
                jz      short loc_7F50
                or      edx, edx
                jnz     short loc_7F4C
                mov     si, di
                mov     dword ptr [si+6], 0
                jmp     short loc_7F3E
; ---------------------------------------------------------------------------

loc_7F19:                               ; ...
                push    eax
                mov     eax, [si+2]
                add     eax, edx
                mov     [di+2], eax
                mov     eax, edx
                xchg    eax, [si+6]
                sub     eax, edx
                mov     [di+6], eax
                mov     byte ptr [di], 1
                jnz     short loc_7F3C
                mov     byte ptr [di], 4

loc_7F3C:                               ; ...
                pop     eax

loc_7F3E:                               ; ...
                mov     byte ptr [si], 2
                mov     dx, si
                mov     ax, 1
                xor     bl, bl

loc_7F48:                               ; ...
                pop     di
                pop     si
                pop     cx
                retn
; ---------------------------------------------------------------------------

loc_7F4C:                               ; ...
                mov     bl, 0A0h
                jmp     short loc_7F52
; ---------------------------------------------------------------------------

loc_7F50:                               ; ...
                mov     bl, 0A1h

loc_7F52:                               ; ...
                xor     ax, ax
                mov     dx, ax
                jmp     short loc_7F48
sub_7EC1        endp

; ---------------------------------------------------------------------------

loc_7F58:                               ; ...
                cli
                push    cx
                push    si
                call    sub_7CEF
                jnb     short loc_7F89
                mov     si, dx
                xor     ax, ax
                mov     bx, cs:word_7C8C
                mov     cx, cs:word_7C8A

loc_7F6E:                               ; ...
                cmp     byte ptr [bx], 2
                jz      short loc_7F74
                inc     ax

loc_7F74:                               ; ...
                add     bx, 0Ah
                loop    loc_7F6E
                mov     edx, [si+6]
                mov     bh, [si+1]
                xchg    ax, cx
                pop     si
                pop     cx
                mov     ax, 1
                xor     bl, bl
                retn
; ---------------------------------------------------------------------------

loc_7F89:                               ; ...
                pop     si
                pop     cx
                mov     bl, 0A2h
                xor     ax, ax
                retn

; =============== S U B R O U T I N E =======================================


sub_7F90        proc near               ; ...

; FUNCTION CHUNK AT 35E6 SIZE 00000087 BYTES

                cli
                push    bp
                push    edx
                push    si
                push    di
                call    sub_7CEF
                mov     si, dx
                mov     edx, ebx
                mov     bl, 0A2h
                jnb     short loc_7FDF
                cmp     byte ptr [si+1], 0
                mov     bl, 0ABh
                jnz     short loc_7FDF
                cmp     edx, [si+6]
                ja      short loc_8025
                jb      short loc_7FBD

loc_7FB2:                               ; ...
                mov     ax, 1
                xor     bl, bl
                pop     di
                pop     si
                pop     edx
                pop     bp
                retn
; ---------------------------------------------------------------------------

loc_7FBD:                               ; ...
                push    edx
                call    sub_818C
                pop     edx
                or      bp, bp
                jz      short loc_7FE7
                mov     eax, [si+6]
                sub     eax, edx
                mov     [si+6], edx
                add     ds:[bp+6], eax
                sub     ds:[bp+2], eax
                jmp     short loc_7FB2
; ---------------------------------------------------------------------------

loc_7FDF:                               ; ...
                xor     ax, ax
                pop     di
                pop     si
                pop     edx
                pop     bp
                retn
; ---------------------------------------------------------------------------

loc_7FE7:                               ; ...
                push    cx
                mov     di, cs:word_7C8C
                mov     cx, cs:word_7C8A

loc_7FF2:                               ; ...
                cmp     byte ptr [di], 4
                jz      short loc_8001
                add     di, 0Ah
                loop    loc_7FF2
                pop     cx
                mov     bl, 0A1h
                jmp     short loc_7FDF
; ---------------------------------------------------------------------------

loc_8001:                               ; ...
                pop     cx
                mov     eax, edx
                add     eax, [si+2]
                mov     [di+2], eax
                mov     eax, [si+6]
                sub     eax, edx
                mov     [di+6], eax
                mov     byte ptr [di], 1
                mov     byte ptr [di+1], 0
                mov     [si+6], edx
                jmp     short loc_7FB2
; ---------------------------------------------------------------------------

loc_8025:                               ; ...
                push    edx
                call    sub_818C
                pop     edx
                or      bp, bp
                jz      short loc_8058
                mov     eax, edx
                sub     eax, [si+6]
                cmp     eax, ds:[bp+6]
                ja      short loc_8058
                jz      short loc_804C
                sub     ds:[bp+6], eax
                add     ds:[bp+2], eax
                jmp     short loc_8051
; ---------------------------------------------------------------------------

loc_804C:                               ; ...
                mov     byte ptr ds:[bp+0], 4

loc_8051:                               ; ...
                mov     [si+6], edx
                jmp     loc_7FB2
; ---------------------------------------------------------------------------

loc_8058:                               ; ...
                or      di, di
                jz      short loc_8072
                mov     eax, [di+6]
                add     eax, [si+6]
                or      bp, bp
                jz      short loc_806D
                add     eax, ds:[bp+6]

loc_806D:                               ; ...
                cmp     edx, eax
                jbe     short loc_8075

loc_8072:                               ; ...
                jmp     loc_8117
; ---------------------------------------------------------------------------

loc_8075:                               ; ...
                sub     sp, 10h
                push    ss
                pop     es
                mov     bx, sp
                push    large dword ptr [si+6]
                or      bp, bp
                jz      short loc_8092
                mov     eax, ds:[bp+6]
                add     [si+6], eax
                mov     byte ptr ds:[bp+0], 4

loc_8092:                               ; ...
                mov     eax, [di+6]
                add     [si+6], eax
                push    large dword ptr [si+2]
                mov     eax, [di+2]
                mov     [si+2], eax
                inc     byte ptr [di+1]
                inc     byte ptr [si+1]
                mov     es:[bx+4], si
                mov     es:[bx+0Ah], si
                mov     dword ptr es:[bx+0Ch], 0
                pop     eax
                sub     eax, [si+2]
                shl     eax, 0Ah
                mov     es:[bx+6], eax
                pop     eax
                shl     eax, 0Ah
                mov     es:[bx], eax
                push    si
                push    di
                push    edx
                mov     si, bx
                call    sub_8224
                pop     edx
                pop     di
                pop     si
                add     sp, 10h
                cli
                dec     byte ptr [di+1]
                dec     byte ptr [si+1]
                mov     eax, [si+6]
                sub     eax, edx
                mov     [si+6], edx
                jz      short loc_8109
                add     edx, [si+2]
                mov     [di+2], edx
                mov     [di+6], eax
                jmp     loc_7FB2
; ---------------------------------------------------------------------------

loc_8109:                               ; ...
                mov     byte ptr [di], 4
                jmp     loc_7FB2
; ---------------------------------------------------------------------------

loc_810F:                               ; ...
                xor     ax, ax
                pop     di
                pop     si
                pop     edx
                pop     bp
                retn
; ---------------------------------------------------------------------------

loc_8117:                               ; ...
                push    si
                push    dx
                call    sub_7EC1
                cli
                mov     di, dx
                pop     dx
                pop     si
                or      ax, ax
                mov     bl, 0A0h
                jz      short loc_810F
                inc     byte ptr [di+1]
                inc     byte ptr [si+1]
                sub     sp, 10h
                push    ss
                pop     es
                mov     bx, sp
                mov     es:[bx+4], si
                mov     es:[bx+0Ah], di
                xor     eax, eax
                mov     es:[bx+0Ch], eax
                mov     es:[bx+6], eax
                mov     eax, [si+6]
                shl     eax, 0Ah
                mov     es:[bx], eax
                push    si
                push    di
                mov     si, bx
                call    sub_8224
                pop     di
                pop     si
                add     sp, 10h
                cli
                mov     eax, [si+2]
                xchg    eax, [di+2]
                mov     [si+2], eax
                mov     eax, [si+6]
                xchg    eax, [di+6]
                mov     [si+6], eax
                dec     byte ptr [si+1]
                dec     byte ptr [di+1]
                mov     ax, di
                pop     di
                pop     si
                pop     edx
                mov     dx, ax
                pop     bp
                jmp     loc_7D76
sub_7F90        endp


; =============== S U B R O U T I N E =======================================


sub_818C        proc near               ; ...
                mov     eax, [si+2]
                mov     edx, [si+6]
                add     edx, eax
                xor     di, di
                mov     bp, di
                mov     bx, cs:word_7C8C
                mov     cx, cs:word_7C8A
                push    esi

loc_81A7:                               ; ...
                cmp     byte ptr [bx], 1
                jnz     short loc_81CA
                mov     esi, [bx+2]
                cmp     edx, esi
                jnz     short loc_81BB
                mov     bp, bx
                or      di, di
                jnz     short loc_81CF

loc_81BB:                               ; ...
                add     esi, [bx+6]
                cmp     esi, eax
                jnz     short loc_81CA
                mov     di, bx
                or      bp, bp
                jnz     short loc_81CF

loc_81CA:                               ; ...
                add     bx, 0Ah
                loop    loc_81A7

loc_81CF:                               ; ...
                pop     esi
                retn
sub_818C        endp

; ---------------------------------------------------------------------------
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db  9Fh
                db    0
                db    0
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db  93h
                db 0CFh
                db    0
GDTPtr          db 18h, 5 dup(0)        ; ...
dword_81F0      dd 0                    ; ...
unk_81F4        db    0                 ; ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
unk_8206        db    0                 ; ...
                db    0
                db    0
                db  93h
                db    0
                db    0
                db 0FFh
                db 0FFh
unk_820E        db    0                 ; ...
                db    0
                db    0
                db  93h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_8224        proc near               ; ...

var_12          = dword ptr -12h
var_E           = dword ptr -0Eh
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4

; FUNCTION CHUNK AT 3C24 SIZE 00000071 BYTES

                sti
                push    bp
                mov     bp, sp
                sub     sp, 12h
                push    eax
                push    ecx
                push    esi
                push    edi
                push    bx
                xor     ax, ax
                mov     [bp+var_6], ax
                mov     [bp+var_8], ax
                mov     [bp+var_A], ax
                mov     ecx, es:[si]
                mov     [bp+var_4], ecx
                shr     [bp+var_4], 1
                jb      loc_82EB
                jz      short loc_82BD
                lea     bx, [si+4]
                call    sub_82FC
                jb      loc_82EF
                xchg    esi, edi
                mov     [bp+var_8], bx
                lea     bx, [di+0Ah]
                call    sub_82FC
                jb      loc_82F7
                mov     [bp+var_A], bx
                smsw    ax
                shr     ax, 1
                jb      MEM3_MoveBlock
                xor     cx, cx
                mov     es, cx
                assume es:BIOSDATA
                mov     ax, cs
                shl     eax, 10h
                mov     ax, 3BCBh
                cli
                push    large [dword ptr ds:3A60h]
                xchg    eax, dword ptr es:aAux+2 ; "X     "
                mov     ds:3A60h, eax
                sti
                push    ds
                mov     ds, cx
                assume ds:BIOSDATA
                mov     ecx, [bp+var_4]
                shr     ecx, 1
                cld
                rep movs dword ptr es:[edi], dword ptr [esi]
                db      67h
                nop
                rcl     ecx, 1
                rep movs word ptr es:[edi], word ptr [esi]
                db      67h
                nop
                pop     ds
                assume ds:nothing
                pop     eax
                cli
                xchg    eax, ds:3A60h
                mov     dword ptr es:aAux+2, eax ; "X     "
                sti

loc_82BD:                               ; ...
                mov     bx, [bp+var_8]
                or      bx, bx
                jz      short loc_82C7
                dec     byte ptr [bx+1]

loc_82C7:                               ; ...
                mov     bx, [bp+var_A]
                or      bx, bx
                jz      short loc_82D1
                dec     byte ptr [bx+1]

loc_82D1:                               ; ...
                pop     bx
                pop     edi
                pop     esi
                pop     ecx
                pop     eax
                mov     ax, 1
                cmp     [bp+var_6], 0
                jz      short loc_82E7
                dec     ax
                mov     bl, byte ptr [bp+var_6]

loc_82E7:                               ; ...
                mov     sp, bp
                pop     bp
                retn
; ---------------------------------------------------------------------------

loc_82EB:                               ; ...
                mov     bl, 0A7h
                jmp     short loc_82F7
; ---------------------------------------------------------------------------

loc_82EF:                               ; ...
                cmp     bl, 0A7h
                jz      short loc_82F7
                sub     bl, 2

loc_82F7:                               ; ...
                mov     byte ptr [bp+var_6], bl
                jmp     short loc_82BD
sub_8224        endp


; =============== S U B R O U T I N E =======================================


sub_82FC        proc near               ; ...
                cli
                mov     edi, es:[bx+2]
                mov     bx, es:[bx]
                or      bx, bx
                jz      short loc_8331
                cmp     byte ptr [bx], 2
                jnz     short loc_8352
                mov     eax, [bx+6]
                shl     eax, 0Ah
                sub     eax, edi
                jb      short loc_8356
                cmp     eax, ecx
                jb      short loc_834E
                inc     byte ptr [bx+1]
                mov     eax, [bx+2]
                shl     eax, 0Ah
                add     edi, eax

loc_832E:                               ; ...
                clc
                sti
                retn
; ---------------------------------------------------------------------------

loc_8331:                               ; ...
                movzx   eax, di
                shr     edi, 10h
                shl     edi, 4
                add     edi, eax
                mov     eax, edi
                add     eax, ecx
                cmp     eax, 10FFF0h
                jbe     short loc_832E

loc_834E:                               ; ...
                mov     bl, 0A7h
                jmp     short loc_8358
; ---------------------------------------------------------------------------

loc_8352:                               ; ...
                mov     bl, 0A5h
                jmp     short loc_8358
; ---------------------------------------------------------------------------

loc_8356:                               ; ...
                mov     bl, 0A6h

loc_8358:                               ; ...
                stc
                sti
                retn
sub_82FC        endp

; ---------------------------------------------------------------------------

Int13Handler:                           ; himem.sys
                push    bp              ;
                                        ; Handler for int 13 during our rep moves
                                        ; ;If it is a real interrupt, jump to the old handler
                                        ; ;If it is a fault, set Real Big Mode and return
                mov     bp, sp
                push    ax
                mov     al, 0Bh
                out     20h, al         ; Interrupt controller, 8259A.
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_8365:                               ; ...
                in      al, 20h         ; Interrupt controller, 8259A.
                test    al, 20h
                jnz     short loc_83AD
                mov     ax, cs
                cmp     [bp+4], ax
                jnz     short loc_83AD
                cmp     word ptr [bp+2], 3B10h
                jz      short LoadDescriptorCache
                cmp     word ptr [bp+2], 3B19h
                jnz     short loc_83AD

LoadDescriptorCache:                    ; ...
                mov     bx, 10h         ; descRealBig - OurGDT ; Special 4Gb selector
                lgdt    fword ptr cs:GDTPtr
; ---------------------------------------------------------------------------
                db  0Fh
word_838A       dw 0C020h               ; ...
; ---------------------------------------------------------------------------

loc_838C:                               ; ...
                or      al, 1           ; Go into Protected Mode
                                        ; NOTE: NMIs will kill us!!!
                mov     cr0, eax
                jmp     far ptr 8:3C06h ; db 0EAh              ; jmp far flush_prot
                                        ; dw offset flush_prot ; Clears the prefetch
                                        ; dw descCS - OurGDT
; ---------------------------------------------------------------------------

flush_prot:
                mov     es, bx
                assume es:nothing
                mov     ds, bx
                assume ds:nothing
                and     al, 0FEh        ; Return to Real Mode
                mov     cr0, eax
                jmp     far ptr 0:3C14h ; db 0EAh     ; jmp far flush_real
                                        ; dw offset flush_real
; ---------------------------------------------------------------------------

flush_real:
                xor     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     es, ax
                assume es:BIOSDATA
                pop     ax
                pop     bp
                iret
; ---------------------------------------------------------------------------

loc_83AD:                               ; ...
                pop     ax
                pop     bp
                jmp     cs:dword_81F0
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_8224

MEM3_MoveBlock:                         ; ...
                mov     [bp+var_E], esi ; Set up GDT and call int 15h Move Block
                                        ; [bp.SrcLinear]
                mov     [bp+var_12], edi ; [bp.DstLinear]
                push    cs
                pop     es
                assume es:BIOSCODE

loc_83BE:                               ; ...
                mov     ecx, 512
                cmp     ecx, [bp+var_4] ; [bp.Count]
                jbe     short loc_83CE
                mov     ecx, [bp+var_4]

loc_83CE:                               ; ...
                push    ecx
                lea     si, unk_81F4
                lea     di, unk_8206
                mov     eax, [bp+var_E] ; [bp.SrcLinear]
                cli
                cld
                stosw
                shr     eax, 16
                stosb
                mov     es:[di+2], ah
                lea     di, unk_820E
                mov     eax, [bp+var_12] ; [bp.DstLinear]
                stosw
                shr     eax, 16
                stosb
                mov     es:[di+2], ah
                clc
                mov     ah, 87h
                int     15h             ; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
                                        ; CX = number of words to move, ES:SI -> global descriptor table
                                        ; Return: CF set on error, AH = status
                sti
                pop     ecx
                jb      short loc_8419
                sub     [bp+var_4], ecx
                jz      loc_82BD
                shl     ecx, 1
                add     [bp+var_E], ecx
                add     [bp+var_12], ecx
                jmp     short loc_83BE
; ---------------------------------------------------------------------------

loc_8419:                               ; ...
                xor     bh, bh
                mov     bl, ah
                mov     bl, cs:byte_8425[bx]
                jmp     loc_82F7
; END OF FUNCTION CHUNK FOR sub_8224
; ---------------------------------------------------------------------------
byte_8425       db 0                    ; ...
                db 0A9h
                db 0A7h
                db  82h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DSKSTATCHK

COMMAND:                                ; ...
                cli
                cmp     ah, 73h ; 's'   ; MAXCOM
                ja      BADCALL

SAVREGS:                                ; ...
                cmp     ah, 33h ; '3'
                jb      short loc_845D
                jz      loc_8898
                cmp     ah, 64h ; 'd'
                ja      short loc_845D
                jz      $SET_PRINTER_FLAG
                cmp     ah, 51h ; 'Q'

loc_844D:                               ; ...
                jz      $GET_CURRENT_PDB
                cmp     ah, 50h ; 'P'
                jz      $SET_CURRENT_PDB
                cmp     ah, 62h ; 'b'
                jz      short loc_844D

loc_845D:                               ; ...
                push    es
                push    ds
                push    bp
                push    di
                push    si
                push    dx
                push    cx
                push    bx
                push    ax
                push    ds
                mov     ds, cs:DosDSeg
                assume ds:nothing
                pop     ds:SAVEDS
                mov     ds:SAVEBX, bx
                mov     bx, ds:USER_SP
                mov     ds:NSP, bx
                mov     bx, ds:USER_SS
                mov     ds:NSS, bx
                mov     ds:FSHARING, 0
                inc     ds:INDOS
                inc     ds:INDOS_FLAG
                mov     ds:USER_SP, sp
                mov     ds:USER_SS, ss
                mov     bx, ds:CurrentPDB
                mov     ds:PROC_ID, bx
                mov     ds, bx
                mov     ds:2Eh, sp      ; [PDB.USER_STACK]
                mov     word ptr ds:30h, ss ; [PDB.USER_STACK+2]
                mov     ss, cs:DosDSeg

REDISP:                                 ; ...
                mov     sp, offset AUXSTACK ; Enough stack for interrupts
                sti
                mov     bx, ss
                mov     ds, bx
                mov     ds:DISK_FULL, 0
                mov     ds:EXTOPEN_ON, 0
                and     ds:DOS34_FLAG, 800h
                mov     ds:CONSWAP, 0
                mov     ds:NoSetDir, 0
                mov     ds:FAILERR, 0
                mov     ds:IDLEINT, 1
                movzx   bx, ah
                shl     bx, 1
                cld
                or      ah, ah
                jz      short loc_84FC
                cmp     ah, 59h ; 'Y'
                jz      short loc_8563
                cmp     ah, 0Ch
                ja      short loc_84FC
                cmp     ds:ERRORMODE, 0
                jnz     short loc_8563
                mov     sp, offset PRINTER_FLAG
                jmp     short loc_8563
; ---------------------------------------------------------------------------

loc_84FC:                               ; ...
                mov     ds:USER_IN_AX, ax
                mov     ds:EXTERR_LOCUS, 1
                mov     ds:ERRORMODE, 0
                mov     ds:WPERR, 0FFh
                call    end_critical_section
                mov     ds:IDLEINT, 0
                mov     sp, offset DSKSTACK
                test    ds:CNTCFLAG, 0FFh
                jz      short loc_8563
                ror     eax, 10h
                ror     ebx, 10h
                ror     ecx, 10h
                ror     edx, 10h
                ror     edi, 10h
                push    ax
                push    bx
                push    cx
                push    dx
                push    di
                ror     eax, 10h
                ror     ebx, 10h
                ror     ecx, 10h
                ror     edx, 10h
                ror     edi, 10h
                push    ax
                mov     al, 0
                call    DSKSTATCHK
                pop     ax
                mov     bx, cs:DISPATCH[bx]
                xchg    bx, ds:SAVEBX
                mov     ds, ds:SAVEDS
                jmp     short loc_859F
; ---------------------------------------------------------------------------

loc_8563:                               ; ...
                mov     bx, cs:DISPATCH[bx]
                xchg    bx, ss:SAVEBX
                mov     ds, ss:SAVEDS
                ror     eax, 10h
                ror     ebx, 10h
                ror     ecx, 10h
                ror     edx, 10h
                ror     edi, 10h
                push    ax
                push    bx
                push    cx
                push    dx
                push    di
                ror     eax, 10h
                ror     ebx, 10h
                ror     ecx, 10h
                ror     edx, 10h
                ror     edi, 10h

loc_859F:                               ; ...
                call    ss:SAVEBX       ; near call
                pop     di
                pop     dx
                pop     cx
                pop     bx
                pop     si
                push    ax
                mov     ax, si
                shl     eax, 10h
                shl     ebx, 10h
                shl     ecx, 10h
                shl     edx, 10h
                shl     edi, 10h
                pop     ax
                and     ss:DOS_FLAG, 0DBh

LeaveDOS:                               ; ...
                cli
                mov     ds, cs:DosDSeg
                dec     ds:INDOS
                dec     ds:INDOS_FLAG
                lss     sp, dword ptr ds:USER_SP
                mov     bp, sp
                mov     [bp+0], al
                mov     ax, ds:NSP
                mov     ds:USER_SP, ax
                mov     ax, ds:NSS
                mov     ds:USER_SS, ax
                pop     ax
                pop     bx
                pop     cx
                pop     dx
                pop     si
                pop     di
                pop     bp
                pop     ds
                pop     es
                assume es:nothing
                iret
; END OF FUNCTION CHUNK FOR DSKSTATCHK
; ---------------------------------------------------------------------------

QUIT:                                   ; ...
                xor     ah, ah
                jmp     SAVREGS
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DSKSTATCHK

BADCALL:                                ; ...
                xor     al, al
                iret
; END OF FUNCTION CHUNK FOR DSKSTATCHK
; ---------------------------------------------------------------------------

CALL_ENTRY:                             ; ...
                push    ds              ; System call entry point and dispatcher
                mov     ds, cs:DosDSeg
                pop     ds:SAVEDS
                pop     ax
                pop     ax
                pop     ds:USER_SP
                pushf
                cli
                push    ax
                push    ds:USER_SP
                push    ds:SAVEDS
                pop     ds
                cmp     cl, 36          ; MAXCALL
                ja      short BADCALL
                mov     ah, cl
                jmp     SAVREGS
; ---------------------------------------------------------------------------
                db 0Dh dup(0)
BioDataSeg      dw 70h
DosDSeg         dw 0                    ; ...
MSMAJOR         db 8
MSMINOR         db 0
I21_MAP_E_TAB   db 38h, 2, 1, 2, 39h, 2 dup(3), 2, 5, 3Ah, 4, 10h, 3, 2 ; ...
                db 5, 3Bh, 2 dup(2), 3, 3Ch, 4, 3, 2, 4, 5, 3Dh, 6, 3
                db 2, 0Ch, 4, 1Ah, 5, 3Eh, 1, 6, 3Fh, 2, 6, 5, 40h, 2
                db 6, 5, 41h, 2 dup(3), 2, 5, 42h, 2, 6, 1, 43h, 4, 3
                db 2, 1, 5, 44h, 5, 0Fh, 0Dh, 1, 6, 5, 45h, 2, 6, 4, 46h
                db 2, 6, 4, 47h, 2, 1Ah, 0Fh, 48h, 2, 7, 8, 49h, 2, 7
                db 9, 4Ah, 3, 7, 9, 8, 4Bh, 8, 3, 1, 2, 4, 0Bh, 0Ah, 8
                db 5, 4Eh, 2 dup(3), 2, 12h, 4Fh, 1, 12h, 56h, 5, 11h
                db 3, 2, 10h, 5, 57h, 4, 6, 8, 0Dh, 1, 58h, 2 dup(1), 5Ah
                db 4, 3, 2, 4, 5, 5Bh, 5, 50h, 3, 2, 4, 5, 5Ch, 4, 6, 1
                db 24h, 21h, 65h, 2, 1, 2, 66h, 2, 1, 2, 68h, 1, 6, 67h
                db 3, 4, 8, 1, 6Ch, 0Ah, 3, 2, 0Ch, 4, 50h, 8, 1Ah, 0Dh
                db 1, 5, 69h, 4, 0Fh, 0Dh, 1, 5, 70h, 2 dup(1), 0FFh
                db 0
DISPATCH        dw offset $ABORT        ; ...
                dw offset $STD_CON_INPUT
                dw offset $STD_CON_OUTPUT
                dw offset $STD_AUX_INPUT
                dw offset $STD_AUX_OUTPUT
                dw offset $STD_PRINTER_OUTPUT
                dw offset $RAW_CON_IO
                dw offset $RAW_CON_INPUT
                dw offset $STD_CON_INPUT_NO_ECHO
                dw offset $STD_CON_STRING_OUTPUT
                dw offset $STD_CON_STRING_INPUT
                dw offset $STD_CON_INPUT_STATUS
                dw offset $STD_CON_INPUT_FLUSH
                dw offset $DISK_RESET
                dw offset $SET_DEFAULT_DRIVE
                dw offset $FCB_OPEN
                dw offset $FCB_CLOSE
                dw offset $DIR_SEARCH_FIRST
                dw offset $DIR_SEARCH_NEXT
                dw offset $FCB_DELETE
                dw offset $FCB_SEQ_READ
                dw offset $FCB_SEQ_WRITE
                dw offset $FCB_CREATE
                dw offset $FCB_RENAME
                dw offset NO_OP
                dw offset $GET_DEFAULT_DRIVE
                dw offset $SET_DMA
                dw offset $SLEAZEFUNC
                dw offset $SLEAZEFUNCDL
                dw offset NO_OP
                dw offset NO_OP
                dw offset $GET_DEFAULT_DPB
                dw offset NO_OP
                dw offset $FCB_RANDOM_READ
                dw offset $FCB_RANDOM_WRITE
                dw offset $GET_FCB_FILE_LENGTH
                dw offset $GET_FCB_POSITION
                dw offset $SET_INTERRUPT_VECTOR
                dw offset $CREATE_PROCESS_DATA_BLOCK
                dw offset $FCB_RANDOM_READ_BLOCK
                dw offset $FCB_RANDOM_WRITE_BLOCK
                dw offset $PARSE_FILE_DESCRIPTOR
                dw offset $GET_DATE
                dw offset $SET_DATE
                dw offset $GET_TIME
                dw offset $SET_TIME
                dw offset $SET_VERIFY_ON_WRITE
                dw offset $GET_DMA
                dw offset $GET_VERSION
                dw offset $KEEP_PROCESS
                dw offset $GET_DPB
                dw offset $SET_CTRL_C_TRAPPING
                dw offset $GET_INDOS_FLAG
                dw offset $GET_INTERRUPT_VECTOR
                dw offset $GET_DRIVE_FREESPACE
                dw offset $CHAR_OPER
                dw offset $INTERNATIONAL
                dw offset $MKDIR
                dw offset $RMDIR
                dw offset $CHDIR
                dw offset $CREAT
                dw offset $OPEN
                dw offset $CLOSE
                dw offset $READ
                dw offset $WRITE
                dw offset $UNLINK
                dw offset $LSEEK
                dw offset $CHMOD
                dw offset $IOCTL
                dw offset $DUP
                dw offset $DUP2
                dw offset $CURRENT_DIR
                dw offset $ALLOC
                dw offset $DEALLOC
                dw offset $SETBLOCK
                dw offset $EXEC
                dw offset $EXIT
                dw offset $WAIT
                dw offset $FIND_FIRST
                dw offset $FIND_NEXT
                dw offset $SET_CURRENT_PDB
                dw offset $GET_CURRENT_PDB
                dw offset $GET_IN_VARS
                dw offset $SETDPB
                dw offset $GET_VERIFY_ON_WRITE
                dw offset $DUP_PDB
                dw offset $RENAME
                dw offset $FILE_TIMES
                dw offset $ALLOCOPER
                dw offset $GetExtendedError
                dw offset $CreateTempFile
                dw offset $CreateNewFile
                dw offset $LockOper
                dw offset $ServerCall
                dw offset $UserOper
                dw offset $AssignOper
                dw offset $NameTrans
                dw offset NO_OP
                dw offset $GET_CURRENT_PDB
                dw offset $ECS_Call
                dw offset $SET_PRINTER_FLAG
                dw offset $GetExtCntry
                dw offset $GetSetCdPg
                dw offset $ExtHandle
                dw offset $COMMIT
                dw offset $GSetMediaID
                dw offset $COMMIT
                dw offset NO_OP
                dw offset $Extended_Open
                dw offset NO_OP
                dw offset NO_OP
                dw offset NO_OP
                dw offset _int21_70h
                dw offset _int21_71h
                dw offset _int21_72h
                dw offset $FAT32EXT
FOO             dw offset Leave2F       ; ...
DTab            dw offset DOSTable      ; ...
DOSTable        db 50                   ; ...
                dw offset DOSInstall
                dw offset DOS_CLOSE
                dw offset RECSET
                dw offset DOSGetGroup
                dw offset PATHCHRCMP
                dw offset OUTT
                dw offset NET_I24_ENTRY
                dw offset PLACEBUF
                dw offset FREE_SFT
                dw offset BUFWRITE
                dw offset SHARE_VIOLATION
                dw offset SHARE_ERROR
                dw offset SET_SFT_MODE
                dw offset DATE16
                dw offset Idle
                dw offset SCANPLACE
                dw offset Idle
                dw offset StrCpy
                dw offset StrLen
                dw offset UCase
                dw offset POINTCOMP
                dw offset CHECKFLUSH
                dw offset SFFromSFN
                dw offset GetCDSFromDrv
                dw offset Get_User_Stack
                dw offset GETTHISDRV
                dw offset DriveFromText
                dw offset SETYEAR
                dw offset DSUM
                dw offset DSLIDE
                dw offset StrCmp
                dw offset InitCDS
                dw offset pJFNFromHandle
                dw offset $NameTrans
                dw offset CAL_LK
                dw offset DEVNAME
                dw offset Idle
                dw offset DStrLen
                dw offset NLS_OPEN
                dw offset $CLOSE
                dw offset NLS_LSEEK
                dw offset $READ
                dw offset FastInit
                dw offset NLS_IOCTL
                dw offset GetDevList
                dw offset NLS_GETEXT
                dw offset MSG_RETRIEVAL
                dw offset NO_OP
                dw offset int_2Fh_1230h
                dw offset int_2Fh_1231h
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DSKSTATCHK

$SET_CTRL_C_TRAPPING:                   ; ...
                cmp     al, 7
                jbe     short loc_8845
                mov     al, 0FFh
                iret
; ---------------------------------------------------------------------------

loc_8845:                               ; ...
                push    ds
                mov     ds, cs:DosDSeg
                push    ax
                push    si
                mov     si, offset CNTCFLAG
                cbw
                or      ax, ax
                jnz     short loc_8859
                mov     dl, [si]
                jmp     short loc_8894
; ---------------------------------------------------------------------------

loc_8859:                               ; ...
                dec     ax
                jnz     short loc_8863
                and     dl, 1
                mov     [si], dl
                jmp     short loc_8894
; ---------------------------------------------------------------------------

loc_8863:                               ; ...
                dec     ax
                jnz     short loc_886D
                and     dl, 1
                xchg    dl, [si]
                jmp     short loc_8894
; ---------------------------------------------------------------------------

loc_886D:                               ; ...
                sub     ax, 3
                ja      short loc_887A
                jb      short loc_8894
                mov     dl, ds:69h
                jmp     short loc_8894
; ---------------------------------------------------------------------------

loc_887A:                               ; ...
                dec     ax
                jnz     short loc_8885
                mov     bx, 8
                mov     dx, 1000h
                jmp     short loc_8894
; ---------------------------------------------------------------------------

loc_8885:                               ; ...
                and     ds:DOS_FLAG, 0DFh
                cmp     dl, 1
                jnz     short loc_8894
                or      ds:DOS_FLAG, 20h

loc_8894:                               ; ...
                pop     si
                pop     ax
                pop     ds
                iret
; ---------------------------------------------------------------------------

loc_8898:                               ; ...
                jmp     short $SET_CTRL_C_TRAPPING
; ---------------------------------------------------------------------------

$SET_CURRENT_PDB:                       ; ...
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:CurrentPDB, bx
                pop     ds
                iret
; ---------------------------------------------------------------------------

$GET_CURRENT_PDB:                       ; ...
                push    ds
                mov     ds, cs:DosDSeg
                mov     bx, ds:330h
                pop     ds
                iret
; ---------------------------------------------------------------------------

$SET_PRINTER_FLAG:                      ; ...
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:PRINTER_FLAG, al
                pop     ds

irett:                                  ; ...
                iret
; END OF FUNCTION CHUNK FOR DSKSTATCHK
; ---------------------------------------------------------------------------

INT24h:                                 ; ...
                mov     al, 3
                test    ah, 8
                jnz     short irett
                mov     al, 0
                jmp     short irett

; =============== S U B R O U T I N E =======================================


restore_world   proc near               ; ...
                mov     es, cs:DosDSeg
                pop     es:RESTORE_TMP
                pop     ax
                pop     bx
                pop     cx
                pop     dx
                pop     si
                pop     di
                pop     bp
                pop     ds
                jmp     es:RESTORE_TMP
restore_world   endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


save_world      proc near               ; ...
                mov     es, cs:DosDSeg
                pop     es:RESTORE_TMP
                push    ds
                push    bp
                push    di
                push    si
                push    dx
                push    cx
                push    bx
                push    ax
                push    es:RESTORE_TMP
                push    bp
                mov     bp, sp
                mov     es, word ptr [bp+20]
                pop     bp
                retn
save_world      endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


Get_User_Stack  proc near               ; ...
                mov     ds, cs:DosDSeg
                lds     si, dword ptr ds:USER_SP
                retn
Get_User_Stack  endp

; ---------------------------------------------------------------------------
ERRIN           db 2                    ; ...
                db 6
                db 0Ch
                db 4
                db 8
                db 0
ERROUT          db 80h
                db 40h
                db 2
                db 10h
                db 4
                db 3

; =============== S U B R O U T I N E =======================================


AbsSetup        proc near               ; ...
                mov     ss:absdrw_extd, ah
                or      ah, ah
                jnz     short AbsSetup1
                inc     ss:INDOS
                inc     ss:INDOS_FLAG

AbsSetup1:                              ; ...
                sti
                cld
                push    ds
                push    ss
                pop     ds
                call    GETBP
                jb      short AbsSetup2
                cmp     word ptr es:[bp+0Fh], 0
                clc
                jnz     short AbsSetup2
                or      ah, ah
                jnz     short AbsSetup2
                stc

AbsSetup2:                              ; ...
                pop     ds
                jb      short loc_896E
                mov     ss:HIGH_SECTOR, 0
                call    RW32_CONVERT
                jb      short loc_896E
                call    SET_RQ_SC_PARMS
                push    ds
                push    si
                push    ax
                push    ss
                pop     ds
                mov     si, 3BEh
                mov     [si], al
                add     byte ptr [si], 41h ; 'A'
                mov     word ptr [si+1], 3Ah ; ':'
                mov     ax, 300h
                clc
                int     2Ah             ; Microsoft Networks - CHECK DIRECT I/O
                                        ; DS:SI -> ASCIZ disk device name (may be full path or only drive
                                        ; specifier--must include the colon)
                                        ; Return: CF clear if absolute disk access allowed
                pop     ax
                pop     si
                pop     ds
                jb      short loc_896E
                retn
; ---------------------------------------------------------------------------

loc_896E:                               ; ...
                mov     word ptr ss:0DBCh, 207h
                mov     word ptr ss:324h, 32h ; '2'
                retn
AbsSetup        endp

; ---------------------------------------------------------------------------

ABSDRD:                                 ; ...
                xor     ah, ah
                xor     si, si

; =============== S U B R O U T I N E =======================================


FAT32_ABSDRD    proc far                ; ...
                cli
                push    ax
                mov     ax, ds
                mov     ds, cs:DosDSeg
                mov     ds:TEMPSEG, ax
                pop     ax
                push    es
                or      ah, ah
                jnz     short absdrd_1
                mov     ds:AbsRdWr_SS, ss
                mov     ds:AbsRdWr_SP, sp
                mov     ss, cs:DosDSeg
                mov     sp, offset DSKSTACK

absdrd_1:                               ; ...
                mov     ds, ds:TEMPSEG
                push    es
                call    save_world
                push    es
                call    AbsSetup
                jb      short ILEAVE
                call    ECritDisk
                mov     cs:CurSC_DRIVE, 0FFh ; Invalidate SC
                call    LCritDisk
                call    DSKREAD
                jnz     short ERR_LEAVE
                test    byte ptr ss:no_bq, 1
                jnz     short ILEAVE
                mov     cx, di
                mov     ss:TEMP_VAR_2, ds
                mov     ss:TEMP_VAR, bx
                call    DskRdBufScan
                jmp     short ILEAVE
; ---------------------------------------------------------------------------

TLEAVE:                                 ; ...
                jz      short ILEAVE

ERR_LEAVE:                              ; ...
                push    es
                push    cs
                pop     es
                assume es:BIOSCODE
                xor     ah, ah
                mov     cx, 6
                mov     di, offset ERRIN
                repne scasb
                jnz     short LEAVECODE
                mov     ah, es:[di+5]   ; [ES:DI+NUMERR-1]

LEAVECODE:                              ; ...
                pop     es
                assume es:nothing
                mov     ss:AbsDskErr, ax
                stc

ILEAVE:                                 ; ...
                pop     es
                call    restore_world
                pop     es
                pushf
                cmp     ss:absdrw_extd, 0 ; FAT32- EXTENDED ABSOLUTE DISK READ/WRITE flag
                jnz     short ILEAVE_EXTD ; INT 21h AX=7305h
                                        ; INT 25h
                popf
                cli
                mov     ax, ss:AbsDskErr
                dec     ss:INDOS
                dec     ss:INDOS_FLAG
                push    ss
                pop     es
                mov     ss, es:AbsRdWr_SS
                mov     sp, es:AbsRdWr_SP
                pop     es
                sti
                retf
; ---------------------------------------------------------------------------

ILEAVE_EXTD:                            ; ...
                mov     ax, ss:AbsDskErr
                popf
                pop     es
                sti
                retn
FAT32_ABSDRD    endp

; ---------------------------------------------------------------------------

ABSDWRT:                                ; ...
                xor     ah, ah
                mov     si, 1

; =============== S U B R O U T I N E =======================================


FAT32_ABSDWRT   proc far                ; ...
                cmp     al, 2
                jb      short absdrwt_2 ; floppy disk
                                        ; hard disk
                push    bx
                push    ds
                mov     ds, cs:DosDSeg
                xor     bh, bh
                mov     bl, al
                test    ds:drive_flags[bx], 80h ; test bit 7 (locked bit)
                jnz     short absdwrt_1
                test    ds:DOS_FLAG, 40h ; test bit 6 (large disk support -windows- bit?)

absdwrt_1:                              ; ...
                pop     ds
                pop     bx
                jnz     short absdrwt_2 ; allowed
                mov     si, 2

absdwrt_err:                            ; ...
                sti
                mov     ax, 3
                int     10h             ; - VIDEO - SET VIDEO MODE
                                        ; AL = mode
                sub     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                push    large [0564h]
                pop     large [0024h]   ; INT 09h vector
                mov     ds, cs:DosDSeg
                assume ds:nothing
                mov     ax, si
                call    ds:_divov_
                mov     ax, 3
                call    ds:_divov_
                mov     ah, 0Dh
                int     21h             ; DOS - DISK RESET

absdwrt_hlt:                            ; ...
                hlt
; ---------------------------------------------------------------------------
                jmp     short absdwrt_hlt
; ---------------------------------------------------------------------------

absdrwt_2:                              ; ...
                cli
                push    ax
                mov     ax, ds
                mov     ds, cs:DosDSeg
                mov     ds:TEMPSEG, ax
                pop     ax
                push    es
                or      ah, ah
                jnz     short absdrwt_3
                mov     ds:AbsRdWr_SS, ss
                mov     ds:AbsRdWr_SP, sp
                mov     ss, cs:DosDSeg
                mov     sp, offset DSKSTACK

absdrwt_3:                              ; ...
                mov     ds, ds:TEMPSEG
                push    es
                call    save_world
                push    es
                call    AbsSetup
                jb      ILEAVE
                cmp     word ptr es:[bp+0Fh], 0 ; DPB.FAT_SIZE > 0 ?
                jz      short absdrwt_4 ; no, FAT32 fs
                cmp     word ptr es:[bp+1Fh], 0FFFFh ; DPB.FREE_CNT
                jz      short absdrwt_6
                mov     word ptr es:[bp+1Fh], 0FFFFh
                jmp     short absdrwt_5
; ---------------------------------------------------------------------------

absdrwt_4:                              ; ...
                cmp     dword ptr es:[bp+1Fh], 0FFFFFFFFh ; DPB.FREE_CNT ; 32 bit
                jz      short absdrwt_6
                mov     dword ptr es:[bp+1Fh], 0FFFFFFFFh

absdrwt_5:                              ; ...
                or      byte ptr es:[bp+18h], 1 ; DPB.FIRST_ACCESS

absdrwt_6:                              ; ...
                call    ECritDisk
                mov     cs:CurSC_DRIVE, 0FFh ; invalidate secondary cache
                call    LCritDisk
                test    byte ptr ss:no_bq, 1
                jnz     short absdrwt_7
                push    ds
                call    DskWrtBufPurge
                pop     ds

absdrwt_7:                              ; ...
                call    DSKWRITE
                jmp     TLEAVE
FAT32_ABSDWRT   endp


; =============== S U B R O U T I N E =======================================


GETBP           proc near               ; ...
                push    ax              ; logical unit number
                add     al, 1           ; no increment; need carry flag
                jb      short SKIPGET
                call    GETTHISDRV
                jnb     short SKIPGET   ; good drive
                xor     ah, ah
                cmp     ax, 1Ah         ; error_not_DOS_disk
                jz      short SKIPGET   ; unknown media
                stc
                mov     ds:EXTERR, ax   ; invalid drive or Non DOS drive
                mov     ds:AbsDskErr, 201h

SKIPGET:                                ; ...
                pop     ax
                jnb     short GETBP_@f
                retn
; ---------------------------------------------------------------------------

GETBP_@f:                               ; ...
                les     bp, ds:THISCDS
                test    word ptr es:[bp+43h], 8000h ; [es:bp+curdir.flags],curdir_isnet
                jz      short GETBP_CDSGETBP_CDS

GETBP_err:                              ; ...
                mov     ds:EXTERR, 32h ; '2'
                stc                     ; error_not_supported
                retn
; ---------------------------------------------------------------------------

GETBP_CDSGETBP_CDS:                     ; ...
                les     bp, es:[bp+45h] ; [ES:BP+curdir.devptr]
                push    ax
                mov     ax, es
                or      ax, bp
                pop     ax
                jz      short GETBP_err
GETBP           endp


; =============== S U B R O U T I N E =======================================


GOTDPB          proc near               ; ...
                mov     word ptr ds:THISDPB, bp
                mov     word ptr ds:THISDPB+2, es
                retn
GOTDPB          endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR gdrvfspc_7303h
;   ADDITIONAL PARENT FUNCTION $IOCTL
;   ADDITIONAL PARENT FUNCTION $DEALLOC
;   ADDITIONAL PARENT FUNCTION $CLOSE
;   ADDITIONAL PARENT FUNCTION $READ
;   ADDITIONAL PARENT FUNCTION $OPEN
;   ADDITIONAL PARENT FUNCTION $CHMOD

SYS_RET_OK:                             ; ...
                call    Get_User_Stack
                and     word ptr [si+16h], 0FFFEh ; [SI+user_env.user_F],~f_Carry
                jmp     short DO_RET
; END OF FUNCTION CHUNK FOR gdrvfspc_7303h
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $IOCTL
;   ADDITIONAL PARENT FUNCTION $ALLOC
;   ADDITIONAL PARENT FUNCTION $DEALLOC
;   ADDITIONAL PARENT FUNCTION $CLOSE
;   ADDITIONAL PARENT FUNCTION $READ
;   ADDITIONAL PARENT FUNCTION $LSEEK
;   ADDITIONAL PARENT FUNCTION $OPEN
;   ADDITIONAL PARENT FUNCTION $CHMOD

SYS_RET_ERR:                            ; ...
                xor     ah, ah          ; hack to allow for smaller error rets
                call    ETAB_LK         ; Make sure code is OK, EXTERR gets set
                call    ErrorMap

From_GetSet:                            ; ...
                call    Get_User_Stack
                or      word ptr [si+16h], 1 ; [SI+user_env.user_F],f_Carry
                stc

DO_RET:                                 ;
                mov     [si], ax        ; [SI+user_env.user_AX]
                retn
; END OF FUNCTION CHUNK FOR $IOCTL
; ---------------------------------------------------------------------------

NO_OP:                                  ; ...
                xor     al, al          ; obsolete system calls dispatch to here
                retn

; =============== S U B R O U T I N E =======================================


FCB_RET_ERR     proc near               ; ...
                xor     ah, ah
                mov     ss:EXTERR, ax
                call    ErrorMap
                mov     al, 0FFh        ; -1
                retn
FCB_RET_ERR     endp


; =============== S U B R O U T I N E =======================================


ErrorMap        proc near               ; ...
                push    si
                mov     si, offset ERR_TABLE_21
                cmp     ss:FAILERR, 0
                jz      short EXTENDED_NORMAL
                mov     ss:EXTERR, 53h  ; error_FAIL_I24

EXTENDED_NORMAL:                        ; ...
                call    CAL_LK
                pop     si
                retn
ErrorMap        endp


; =============== S U B R O U T I N E =======================================


CAL_LK          proc near               ; ...
                push    ds
                push    ax
                push    bx
                mov     ds, cs:DosDSeg
                mov     bx, ds:EXTERR

TABLK1:                                 ; ...
                lodsb
                cmp     al, 0FFh
                jz      short GOT_VALS
                cmp     al, bl
                jz      short GOT_VALS
                add     si, 3
                jmp     short TABLK1
; ---------------------------------------------------------------------------

GOT_VALS:                               ; ...
                lodsw
                cmp     ah, 0FFh
                jz      short NO_SET_ACT
                mov     ds:EXTERR_ACTION, ah

NO_SET_ACT:                             ; ...
                cmp     al, 0FFh
                jz      short NO_SET_CLS
                mov     ds:EXTERR_CLASS, al

NO_SET_CLS:                             ; ...
                lodsb
                cmp     al, 0FFh
                jz      short NO_SET_LOC
                mov     ds:EXTERR_LOCUS, al

NO_SET_LOC:                             ; ...
                pop     bx
                pop     ax
                pop     ds
                retn
CAL_LK          endp


; =============== S U B R O U T I N E =======================================


ETAB_LK         proc near               ; ...
                push    ds
                push    si
                push    cx
                push    bx
                push    ss
                pop     ds
                mov     ds:EXTERR, ax
                mov     si, offset I21_MAP_E_TAB
                mov     bh, al
                mov     bl, byte ptr ds:USER_IN_AX+1

TABLK2:                                 ; ...
                lods    word ptr cs:[si]
                cmp     al, 0FFh
                jz      short NOT_IN_TABLE
                cmp     al, bl
                jz      short GOT_CALL
                xchg    ah, al
                xor     ah, ah
                add     si, ax
                jmp     short TABLK2
; ---------------------------------------------------------------------------

NOT_IN_TABLE:                           ; ...
                mov     al, bh
                jmp     short NO_MAP
; ---------------------------------------------------------------------------

GOT_CALL:                               ; ...
                mov     cl, ah
                xor     ch, ch

CHECK_CODE:                             ; ...
                lods    byte ptr cs:[si]
                cmp     al, bh
                jz      short NO_MAP
                loop    CHECK_CODE

NO_MAP:                                 ; ...
                xor     ah, ah
                pop     bx
                pop     cx
                pop     si
                pop     ds
                retn
ETAB_LK         endp


; =============== S U B R O U T I N E =======================================


SetBad          proc near               ; ...
                mov     ax, 1
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:EXTERR_LOCUS, 1
                pop     ds
                stc
                retn
SetBad          endp

; ---------------------------------------------------------------------------

BadCall:                                ; ...
                call    SetBad
                retf
; ---------------------------------------------------------------------------

OKCall:                                 ; ...
                clc
                retf
; ---------------------------------------------------------------------------

INT2F:                                  ; ...
                sti
                cmp     ah, 11h         ; MultNET
                jnz     short INT2FSHR

TestInstall:                            ; ...
                or      al, al
                jz      short Leave2F

BadFunc:                                ; ...
                call    SetBad

Leave2F:                                ; ...
                retf    2
; ---------------------------------------------------------------------------

INT2FSHR:                               ; ...
                cmp     ah, 10h
                jz      short TestInstall
                cmp     ah, 14h
                jz      short TestInstall
                cmp     ah, 12h
                jnz     short check_win
                jmp     DispatchDOS
; ---------------------------------------------------------------------------

check_win:                              ; ...
                cmp     ah, 16h
                jz      short Win386_Msg

next_i2f:                               ; ...
                jmp     near ptr i2f
; ---------------------------------------------------------------------------

Win386_Msg:                             ; ...
                push    ds
                mov     ds, cs:DosDSeg
                cmp     al, 6
                jz      short loc_8C8A
                cmp     al, 7
                jz      short loc_8C9C
                cmp     al, 5
                jnz     loc_8D01
                test    dx, 1
                jz      short loc_8C57
                jmp     loc_8D01
; ---------------------------------------------------------------------------

loc_8C57:                               ; ...
                cmp     di, 400h
                jnb     short loc_8C63

loc_8C5D:                               ; ...
                mov     si, 4
                jmp     absdwrt_err
; ---------------------------------------------------------------------------

loc_8C63:                               ; ...
                push    ax
                xor     al, al
                xchg    al, ds:0F5Ch
                or      al, al
                pop     ax
                jz      short loc_8C5D
                or      byte ptr ds:0F5Bh, 1
                or      byte ptr ds:0D65h, 1
                push    dx
                mov     dx, bx
                mov     bx, 0EE1h
                mov     [bx+2], dx
                mov     word ptr [bx+4], es
                pop     dx
                push    ds
                pop     es
                jmp     short loc_8D01
; ---------------------------------------------------------------------------

loc_8C8A:                               ; ...
                test    dx, 1
                jnz     short loc_8D01
                and     byte ptr ds:0F5Bh, 0FEh
                and     byte ptr ds:0D65h, 0
                jmp     short loc_8D01
; ---------------------------------------------------------------------------

loc_8C9C:                               ; ...
                cmp     bx, 15h
                jnz     short loc_8D01
                or      cx, cx
                jnz     short loc_8CAD
                inc     cx
                mov     bx, 0F4Dh
                push    ds
                pop     es
                jmp     short loc_8CFF
; ---------------------------------------------------------------------------

loc_8CAD:                               ; ...
                dec     cx
                jz      short loc_8CE6
                dec     cx
                jz      short loc_8CFF
                dec     cx
                jz      short loc_8CEA
                dec     cx
                jz      short loc_8CF5
                dec     cx
                jnz     short loc_8CFF
                mov     ax, es
                dec     ax
                push    es
                mov     es, ax
                assume es:nothing
                cmp     byte ptr es:[di], 44h ; 'D'
                jnz     short loc_8CDF
                inc     ax
                cmp     es:[di+1], ax
                jnz     short loc_8CDF
                mov     ax, es:[di+3]
                pop     es
                assume es:nothing
                mov     bx, 10h
                mul     bx
                mov     cx, ax
                mov     bx, dx
                jmp     short loc_8CF9
; ---------------------------------------------------------------------------

loc_8CDF:                               ; ...
                pop     es
                xor     ax, ax
                xor     dx, dx
                jmp     short loc_8CFF
; ---------------------------------------------------------------------------

loc_8CE6:                               ; ...
                mov     bx, dx
                jmp     short loc_8CF9
; ---------------------------------------------------------------------------

loc_8CEA:                               ; ...
                test    dx, 1
                jz      short loc_8CFF
                mov     cx, 58h ; 'X'
                jmp     short loc_8CF9
; ---------------------------------------------------------------------------

loc_8CF5:                               ; ...
                xor     dx, dx
                jmp     short loc_8CFF
; ---------------------------------------------------------------------------

loc_8CF9:                               ; ...
                mov     ax, 0B97Ch
                mov     dx, 0A2ABh

loc_8CFF:                               ; ...
                pop     ds
                iret
; ---------------------------------------------------------------------------

loc_8D01:                               ; ...
                pop     ds
                jmp     next_i2f
; ---------------------------------------------------------------------------

int_2Fh_1231h:                          ; ...
                push    ds
                mov     ds, cs:DosDSeg
                cmp     dl, 2
                ja      short loc_8D32
                or      dl, dl
                jz      short loc_8D27
                cmp     dl, 1
                jz      short loc_8D20
                and     ds:IsWin386, 0FDh
                jmp     short loc_8D2C
; ---------------------------------------------------------------------------

loc_8D20:                               ; ...
                or      byte ptr ds:0F5Bh, 2
                jmp     short loc_8D2C
; ---------------------------------------------------------------------------

loc_8D27:                               ; ...
                mov     byte ptr ds:0F5Ch, 1

loc_8D2C:                               ; ...
                clc
                pop     ds
                mov     ax, 0

locret_8D31:                            ; ...
                retn
; ---------------------------------------------------------------------------

loc_8D32:                               ; ...
                stc
                mov     ax, 1
                jmp     short locret_8D31
; ---------------------------------------------------------------------------

DispatchDOS:                            ; ...
                push    cs:FOO
                push    cs:DTab
                push    ax
                push    bp
                mov     bp, sp
                mov     ax, [bp+0Eh]
                pop     bp
                call    TableDispatch
                jmp     BadFunc
; ---------------------------------------------------------------------------

DOSGetGroup:                            ; ...
                mov     ds, cs:DosDSeg
                retn
; ---------------------------------------------------------------------------

DOSInstall:                             ; ...
                mov     al, 0FFh
                retn

; =============== S U B R O U T I N E =======================================


RW32_CONVERT    proc near               ; ...
                cmp     cx, 0FFFFh
                jz      short loc_8D82
                cmp     word ptr es:[bp+0Fh], 0
                jz      short loc_8D80
                push    ax
                push    dx
                mov     ax, es:[bp+0Dh]
                mov     dl, es:[bp+4]
                cmp     dl, 0FEh
                jz      short loc_8D7C
                inc     dl
                xor     dh, dh
                mul     dx
                or      dx, dx

loc_8D7C:                               ; ...
                pop     dx
                pop     ax
                jz      short loc_8D98

loc_8D80:                               ; ...
                stc
                retn
; ---------------------------------------------------------------------------

loc_8D82:                               ; ...
                mov     dx, [bx+2]
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:607h, dx
                pop     ds
                mov     dx, [bx]
                mov     cx, [bx+4]
                lds     bx, [bx+6]

loc_8D98:                               ; ...
                clc
                retn
RW32_CONVERT    endp

; ---------------------------------------------------------------------------
CANCHAR         db 1Bh                  ; ...
ESCCHAR         db 0                    ; ...
                db  40h ; @
                db  4Dh ; M
                db  3Bh ; ;
                db  53h ; S
                db  3Ch ; <
                db  3Eh ; >
                db  3Dh ; =
                db  3Dh ; =
                db  3Fh ; ?
                db  4Bh ; K
                db  52h ; R
                db  52h ; R
                db  41h ; A
                db  41h ; A
off_8DAA        dw offset GETCH         ; ...
                dw offset TWOESC
                dw offset ENTERINS
                dw offset ENTERINS
                dw offset BACKSP
                dw offset REEDIT
                dw offset KILNEW
                dw offset COPYLIN
                dw offset SKIPSTR
                dw offset COPYSTR
                dw offset SKIPONE
                dw offset COPYONE
                dw offset COPYONE
                dw offset CTRLZ
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

loc_8DC6:                               ; ...
                call    $STD_CON_INPUT_NO_ECHO
                mov     cl, 0Eh
                push    di
                mov     di, 460Ch
                push    es
                push    cs
                pop     es
                assume es:BIOSCODE
                repne scasb
                pop     es
                assume es:nothing
                pop     di
                shl     cx, 1
                mov     bp, cx
                jmp     cs:off_8DAA[bp]
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT
; ---------------------------------------------------------------------------

$GET_DATE:                              ; ...
                push    ss
                pop     ds
                call    READTIME
                mov     ax, ds:YEAR
                mov     bx, ds:DAY
                call    Get_User_Stack
                mov     [si+6], bx
                add     ax, 1980
                mov     [si+4], ax
                mov     al, ss:WEEKDAY

_RET24:                                 ; ...
                retn
; ---------------------------------------------------------------------------

$SET_DATE:                              ; ...
                mov     al, 0FFh        ; -1
                sub     cx, 1980
                jb      short _RET24
                cmp     cx, 119
                ja      short RET24
                or      dh, dh
                jz      short _RET24
                or      dl, dl
                jz      short _RET24
                cmp     dh, 12
                ja      short RET24
                push    ss
                pop     ds
                call    DODATE

RET24:                                  ; ...
                retn
; ---------------------------------------------------------------------------

$GET_TIME:                              ; ...
                push    ss
                pop     ds
                call    READTIME
                call    Get_User_Stack
                mov     [si+6], dx
                mov     [si+4], cx
                xor     al, al

RET26:                                  ; ...
                retn
; ---------------------------------------------------------------------------

$SET_TIME:                              ; ...
                mov     al, 0FFh
                cmp     ch, 24
                jnb     short RET26
                cmp     cl, 60
                jnb     short RET26
                cmp     dh, 60
                jnb     short RET26
                cmp     dl, 100
                jnb     short RET26
                push    cx
                push    dx
                push    ss
                pop     ds
                mov     bx, offset TIMEBUF
                mov     cx, 6
                xor     dx, dx
                mov     ax, dx
                push    bx
                call    SETREAD
                push    ds
                lds     si, ds:BCLOCK
                call    DEVIOCALL2
                pop     ds
                pop     bx
                call    SETWRITE
                pop     ds:TIMEBUF+4
                pop     ds:TIMEBUF+2
                lds     si, ds:BCLOCK
                call    DEVIOCALL2
                xor     al, al
                retn

; =============== S U B R O U T I N E =======================================


DATE16          proc near               ; ...
                mov     ds, cs:DosDSeg
                push    cx
                push    es
                call    READTIME
                pop     es
                shl     cl, 2
                shl     cx, 3
                shr     dh, 1
                or      cl, dh
                mov     dx, cx
                mov     ax, ds:DAY+1
                shl     al, 4
                shl     ax, 1
                pop     cx
                or      al, byte ptr ds:DAY

locret_8E98:                            ; ...
                retn
DATE16          endp


; =============== S U B R O U T I N E =======================================


READTIME        proc near               ; ...
                mov     ds:DATE_FLAG, 0
                push    si
                push    bx
                mov     bx, 3B6h
                mov     cx, 6
                xor     dx, dx
                mov     ax, dx
                call    SETREAD
                push    ds
                lds     si, ds:2Eh
                call    DEVIOCALL2
                pop     ds
                pop     bx
                pop     si
                mov     ax, ds:3B6h
                mov     cx, ds:3B8h
                mov     dx, ds:3BAh
                cmp     ax, ds:354h
                jz      short locret_8E98
                cmp     ax, 0AB36h
                jnb     short locret_8F09
                mov     ds:354h, ax
                push    si
                push    cx
                push    dx
                xor     dx, dx
                mov     cx, 5B5h
                div     cx
                shl     ax, 3
                mov     cx, ax
                mov     si, 0D14h
                call    DSLIDE
                shr     cx, 1
                jnb     short loc_8EEF
                add     dx, 0C8h

loc_8EEF:                               ; ...
                call    SETYEAR
                mov     cl, 1
                mov     si, 0D1Ch
                call    DSLIDE
                mov     ds:351h, cl
                inc     dx
                mov     ds:350h, dl
                call    sub_8F9C
                pop     dx
                pop     cx
                pop     si

locret_8F09:                            ; ...
                retn
READTIME        endp


; =============== S U B R O U T I N E =======================================


DSLIDE          proc near               ; ...
                mov     ah, 0

loc_8F0C:                               ; ...
                lodsb
                cmp     dx, ax
                jb      short locret_8F09
                sub     dx, ax
                inc     cx
                jmp     short loc_8F0C
DSLIDE          endp


; =============== S U B R O U T I N E =======================================


SETYEAR         proc near               ; ...
                mov     ds, cs:DosDSeg
                mov     ds:352h, cl

loc_8F1F:                               ; ...
                test    cl, 3
                mov     al, 1Ch
                jnz     short loc_8F28
                inc     al

loc_8F28:                               ; ...
                mov     ds:0D1Dh, al

locret_8F2B:                            ; ...
                retn
SETYEAR         endp


; =============== S U B R O U T I N E =======================================


DODATE          proc near               ; ...
                call    loc_8F1F
                mov     al, dh
                mov     bx, 0D1Bh
                xlat
                cmp     al, dl
                mov     al, 0FFh
                jb      short locret_8F2B
                call    SETYEAR
                mov     ds:350h, dx
                shr     cx, 2
                mov     ax, 5B5h
                mov     bx, dx
                mul     cx
                mov     cl, ds:352h
                and     cl, 3
                mov     si, 0D14h
                mov     dx, ax
                shl     cx, 1
                call    DSUM
                mov     cl, bh
                mov     si, 0D1Ch
                dec     cx
                call    DSUM
                mov     cl, bl
                dec     cx
                add     dx, cx
                xchg    ax, dx
                mov     ds:354h, ax
                push    si
                push    bx
                push    ax
                mov     bx, 3B6h
                mov     cx, 6
                xor     dx, dx
                mov     ax, dx
                push    bx
                call    SETREAD
                push    ds
                lds     si, ds:2Eh
                call    DEVIOCALL2
                pop     ds
                pop     bx
                call    SETWRITE
                pop     word ptr ds:3B6h
                push    ds
                lds     si, ds:2Eh
                call    DEVIOCALL2
                pop     ds
                pop     bx
                pop     si
DODATE          endp


; =============== S U B R O U T I N E =======================================


sub_8F9C        proc near               ; ...
                mov     ax, ds:354h
                xor     dx, dx
                mov     cx, 7
                inc     ax
                inc     ax
                div     cx
                mov     ds:356h, dl
                xor     al, al
                retn
sub_8F9C        endp


; =============== S U B R O U T I N E =======================================


DSUM            proc near               ; ...
                mov     ah, 0
                jcxz    short locret_8FB8

loc_8FB3:                               ; ...
                lodsb
                add     dx, ax
                loop    loc_8FB3

locret_8FB8:                            ; ...
                retn
DSUM            endp

; ---------------------------------------------------------------------------

$GET_VERSION:                           ; ...
                push    ss
                pop     ds
                mov     bx, ds:USERNUM_2
                mov     cx, ds:USERNUM
                cmp     al, 1
                jnz     short Norm_Vers
                xor     bh, bh

Norm_Vers:                              ; ...
                push    ds
                mov     ds, ds:CurrentPDB
                mov     ax, ds:40h      ; [PDB.Version]
                pop     ds
                call    Get_User_Stack
                mov     [si], ax
                mov     [si+2], bx
                mov     [si+4], cx
                retn
; ---------------------------------------------------------------------------

$GET_VERIFY_ON_WRITE:                   ; ...
                mov     al, ss:VDERFLG
                retn
; ---------------------------------------------------------------------------

$SET_VERIFY_ON_WRITE:                   ; ...
                and     al, 1
                mov     ss:VDERFLG, al

; =============== S U B R O U T I N E =======================================


RET27           proc near               ; ...
                retn
RET27           endp

; ---------------------------------------------------------------------------

$INTERNATIONAL:                         ; ...
                cmp     al, 0FFh
                jz      short loc_8FF2
                mov     bl, al
                xor     bh, bh

loc_8FF2:                               ; ...
                push    ds
                pop     es
                push    dx
                pop     di
                push    ss
                pop     ds
                cmp     di, 0FFFFh
                jz      short loc_9062
                or      bx, bx
                jnz     short loc_9006
                mov     si, 122Ah
                jmp     short loc_9047
; ---------------------------------------------------------------------------

loc_9006:                               ; ...
                mov     bp, 0
                call    sub_9017
                jb      short loc_906A
                cmp     bx, 0
                jnz     short loc_9047
                mov     bx, dx
                jmp     short loc_9057

; =============== S U B R O U T I N E =======================================


sub_9017        proc near               ; ...
                mov     si, 122Ah
                cmp     bx, ss:[si+68h]

loc_901E:                               ; ...
                jz      short RET27
                mov     dx, bx
                xor     bx, bx
                mov     ax, 1400h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
                                        ; Return: AL = 00h not installed, OK to install
                                        ; 01h not installed, not OK
                                        ; FFh installed
                cmp     al, 0FFh
                jnz     short loc_9043
                or      bp, bp
                jnz     short loc_9038
                mov     ax, 1404h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
                                        ; BX = code page, DX = country code, DS:SI -> internal code page structure
                                        ; ES:DI -> user buffer
                                        ; Return: AL = status
                jmp     short loc_903D
; ---------------------------------------------------------------------------

loc_9038:                               ; ...
                mov     ax, 1403h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
                                        ; DS:SI -> internal code page structure
                                        ; BX = code page, DX = country code
                                        ; Return: AL = status

loc_903D:                               ; ...
                or      al, al
                jz      short loc_901E

loc_9041:                               ; ...
                stc
                retn
; ---------------------------------------------------------------------------

loc_9043:                               ; ...
                mov     al, 0FFh
                jmp     short loc_9041
sub_9017        endp

; ---------------------------------------------------------------------------

loc_9047:                               ; ...
                mov     bx, ss:[si+68h]
                mov     si, 1296h
                mov     cx, 18h
                push    ds
                push    ss
                pop     ds
                rep movsb
                pop     ds

loc_9057:                               ; ...
                call    Get_User_Stack
                mov     [si+2], bx

loc_905D:                               ; ...
                mov     ax, bx

loc_905F:                               ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_9062:                               ; ...
                mov     bp, 1
                call    sub_9017
                jnb     short loc_905D

loc_906A:                               ; ...
                cmp     al, 0FFh
                jz      short loc_9071

loc_906E:                               ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_9071:                               ; ...
                mov     al, 1

loc_9073:                               ; ...
                jmp     short loc_906E
; ---------------------------------------------------------------------------

_int21_70h:                             ; ...
                cmp     al, 0           ; GET/SET INTERNATIONALIZATION INFORMATION
                jz      short loc_90AD
                cmp     al, 1
                jz      short loc_90CA
                cmp     al, 2
                jnz     short loc_9083
                jmp     short loc_9087
; ---------------------------------------------------------------------------

loc_9083:                               ; ...
                mov     al, 1
                jmp     short loc_9073
; ---------------------------------------------------------------------------

loc_9087:                               ; ...
                push    es
                push    ss
                pop     es
                mov     di, 122Ah
                mov     ax, es:[di+66h]
                cmp     cx, ax
                jb      short loc_9097
                mov     cx, ax

loc_9097:                               ; ...
                add     di, 68h ; 'h'
                add     si, 3
                push    cx
                sub     cx, 3
                rep movsb
                pop     cx
                pop     es
                call    Get_User_Stack
                mov     [si+4], cx

loc_90AB:                               ; ...
                jmp     short loc_905F
; ---------------------------------------------------------------------------

loc_90AD:                               ; ...
                push    ss
                pop     ds
                mov     si, 12BAh

loc_90B2:                               ; ...
                mov     ax, 12F4h
                sub     ax, 12BAh
                cmp     cx, ax
                jb      short loc_90BE
                mov     cx, ax

loc_90BE:                               ; ...
                push    cx
                rep movsb
                pop     cx
                call    Get_User_Stack
                mov     [si+4], cx
                jmp     short loc_90AB
; ---------------------------------------------------------------------------

loc_90CA:                               ; ...
                push    ss
                pop     es
                mov     di, 12BAh
                jmp     short loc_90B2
; ---------------------------------------------------------------------------

$GetExtCntry:                           ; ...
                cmp     al, 20h ; ' '
                jb      short loc_913F
                test    al, 80h
                jnz     short loc_90DE
                mov     bx, 0AFAh
                jmp     short loc_90E1
; ---------------------------------------------------------------------------

loc_90DE:                               ; ...
                mov     bx, 0B7Ch

loc_90E1:                               ; ...
                cmp     al, 20h ; ' '
                jnz     short loc_90F2
                mov     al, dl
                call    GETLET3
                call    Get_User_Stack
                mov     [si+6], al
                jmp     short loc_9116
; ---------------------------------------------------------------------------

loc_90F2:                               ; ...
                cmp     al, 23h ; '#'
                jnz     short loc_9119
                xor     ax, ax
                cmp     dl, ss:1336h
                jz      short loc_9115
                cmp     dl, ss:1338h
                jz      short loc_9115
                cmp     dl, ss:1337h
                jz      short loc_9116
                cmp     dl, ss:1339h
                jz      short loc_9116
                inc     ax

loc_9115:                               ; ...
                inc     ax

loc_9116:                               ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_9119:                               ; ...
                mov     si, dx
                cmp     al, 21h ; '!'
                jnz     short loc_912E
                or      cx, cx
                jz      short loc_9116

loc_9123:                               ; ...
                lodsb
                call    GETLET3
                mov     [si-1], al
                loop    loc_9123
                jmp     short loc_9116
; ---------------------------------------------------------------------------

loc_912E:                               ; ...
                cmp     al, 22h ; '"'
                jnz     short loc_917D

loc_9132:                               ; ...
                lodsb
                or      al, al
                jz      short loc_9116
                call    GETLET3
                mov     [si-1], al
                jmp     short loc_9132
; ---------------------------------------------------------------------------

loc_913F:                               ; ...
                cmp     cx, 5
                jb      short loc_917D
                push    ss
                pop     ds
                mov     si, 122Ah
                or      al, al
                jz      loc_91D3
                cmp     dx, 0FFFFh
                jnz     short loc_9157
                mov     dx, [si+68h]

loc_9157:                               ; ...
                cmp     bx, 0FFFFh
                jnz     short loc_915F
                mov     bx, [si+6Ah]

loc_915F:                               ; ...
                cmp     dx, [si+68h]
                jnz     short loc_91B8
                cmp     bx, [si+6Ah]
                jnz     short loc_91B8
                mov     bx, [si+48h]
                push    cx
                mov     cx, [si+4Ah]
                mov     si, 1276h

loc_9173:                               ; ...
                cmp     al, [si]
                jz      short loc_9182
                add     si, 5
                loop    loc_9173
                pop     cx

loc_917D:                               ; ...
                mov     al, 1
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_9182:                               ; ...
                movsb
                pop     cx
                cmp     al, 1
                jz      short loc_919F
                mov     cx, 4
                mov     ax, 5

loc_918E:                               ; ...
                rep movsb
                push    ss
                pop     ds
                mov     cx, ax
                mov     ax, bx

loc_9196:                               ; ...
                call    Get_User_Stack
                mov     [si+4], cx
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_919F:                               ; ...
                sub     cx, 3
                cmp     [si], cx
                jnb     short loc_91A8
                mov     cx, [si]

loc_91A8:                               ; ...
                mov     es:[di], cx
                add     di, 2
                add     si, 2
                mov     ax, cx
                add     ax, 3
                jmp     short loc_918E
; ---------------------------------------------------------------------------

loc_91B8:                               ; ...
                xor     ah, ah
                push    ax
                pop     bp
                mov     ax, 1400h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
                                        ; Return: AL = 00h not installed, OK to install
                                        ; 01h not installed, not OK
                                        ; FFh installed
                cmp     al, 0FFh
                jnz     short loc_917D
                mov     ax, 1402h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
                                        ; BP = subfunction, BX = code page
                                        ; DX = country code, DS:SI -> internal code page structure
                                        ; ES:DI -> user buffer, CX = size of user buffer
                                        ; Return: AL = status
                                        ; 00h successful
                                        ; else DOS error code
                cmp     al, 0
                jnz     short loc_91FD
                mov     ax, [si+48h]
                jmp     short loc_9196
; ---------------------------------------------------------------------------

loc_91D3:                               ; ...
                sub     cx, 7
                jbe     short loc_917D
                mov     bx, [si+48h]
                lea     si, [si+66h]
                mov     ax, [si]
                sub     ax, 4
                cmp     cx, ax
                jbe     short loc_91E9
                mov     cx, ax

loc_91E9:                               ; ...
                mov     ax, cx
                add     ax, 4
                mov     es:[di+1], ax
                add     si, 6
                add     di, 7
                call    XCHGP
                jmp     short loc_918E
; ---------------------------------------------------------------------------

loc_91FD:                               ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

$GetSetCdPg:                            ; ...
                push    ss
                pop     ds
                mov     si, 122Ah
                cmp     al, 1
                jnz     short loc_921B
                mov     bx, [si+6Ah]
                mov     dx, [si+48h]
                call    Get_User_Stack
                mov     [si+2], bx
                mov     [si+6], dx

loc_9218:                               ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_921B:                               ; ...
                cmp     al, 2
                jnz     short loc_9252
                mov     dx, [si+68h]
                mov     ax, 1400h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
                                        ; Return: AL = 00h not installed, OK to install
                                        ; 01h not installed, not OK
                                        ; FFh installed
                cmp     al, 0FFh
                jnz     short loc_9252
                mov     ax, 1401h
                int     2Fh             ; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
                                        ; DS:SI -> internal code page structure
                                        ; BX = new code page, DX = country code???
                                        ; Return: AL = status
                                        ; 00h successful
                                        ; else DOS error code
                or      al, al
                jz      short loc_9218
                cmp     al, 41h ; 'A'
                jnz     short loc_9250
                mov     ax, 41h ; 'A'
                mov     ds:EXTERR, ax
                mov     byte ptr ds:326h, 6
                mov     byte ptr ds:327h, 5
                mov     ds:EXTERR_LOCUS, 4
                jmp     From_GetSet
; ---------------------------------------------------------------------------

loc_9250:                               ; ...
                jmp     short loc_91FD
; ---------------------------------------------------------------------------

loc_9252:                               ; ...
                mov     al, 1
                jmp     short loc_9250
; ---------------------------------------------------------------------------

$GET_DRIVE_FREESPACE:                   ; ...
                push    ss
                pop     ds
                mov     al, dl
                call    GETTHISDRV
                jb      BADFDRV
                push    bx
                push    es
                les     bx, ds:THISCDS
                test    word ptr es:[bx+43h], 8000h
                jnz     short gdrvfspc_1
                mov     bl, es:[bx]
                xor     bh, bh
                test    byte ptr [bx+12C7h], 10h
                jz      short gdrvfspc_1
                test    byte ptr [bx+12C7h], 1
                jz      short gdrvfspc_1
                and     byte ptr [bx+12C7h], 0FEh
                or      byte ptr [bx+12C7h], 20h

gdrvfspc_1:                             ; ...
                pop     es
                pop     bx
                call    DISK_INFO
                pushf
                push    bx
                push    es
                les     bx, ds:THISCDS
                test    word ptr es:[bx+43h], 8000h
                jnz     short gdrvfspc_2
                mov     bl, es:[bx]
                xor     bh, bh
                test    byte ptr [bx+12C7h], 20h
                jz      short gdrvfspc_2
                and     byte ptr [bx+12C7h], 0DFh
                or      byte ptr [bx+12C7h], 1

gdrvfspc_2:                             ; ...
                pop     es
                pop     bx
                popf
                xchg    dx, bx
                jb      short BADFDRV
                xor     ah, ah
; START OF FUNCTION CHUNK FOR modify_cluster_count

DoSt:                                   ; ...
                call    Get_User_Stack
                cmp     word ptr [si], 7303h
                jz      gdrvfspc_7303h
                cmp     ax, 0FFFFh
                jz      short gdrvfspc_ret
; END OF FUNCTION CHUNK FOR modify_cluster_count

; =============== S U B R O U T I N E =======================================


modify_cluster_count proc near          ; ...

; FUNCTION CHUNK AT 4B2F SIZE 00000010 BYTES

                ror     edx, 16
                mov     dx, ss:CCOUNT_HW
                ror     edx, 16
                ror     ebx, 16
                mov     bx, ss:ROOTCLUST_HW
                ror     ebx, 16
                cmp     edx, 0FFFEh
                ja      short mcc_2
                push    dx
                push    ax
                mul     cx
                cmp     dx, 0
                ja      short mcc_1
                cmp     ax, 32768

mcc_1:                                  ; ...
                pop     ax
                pop     dx
                ja      short mcc_5

gdrvfspc_ret:                           ; ...
                mov     [si+6], dx
                mov     [si+4], cx
                mov     [si+2], bx
                mov     [si], ax
                retn
; ---------------------------------------------------------------------------

BADFDRV:                                ; ...
                call    FCB_RET_ERR
                mov     ax, 0FFFFh
                jmp     short DoSt
; ---------------------------------------------------------------------------

mcc_2:                                  ; ...
                movzx   eax, al
                shl     eax, 1
                push    ax
                push    dx
                mul     cx
                cmp     dx, 0
                ja      short mcc_3
                cmp     ax, 32768

mcc_3:                                  ; ...
                pop     dx
                pop     ax
                ja      short mcc_4
                shr     edx, 1
                shr     ebx, 1
                cmp     edx, 0FFFEh
                ja      short mcc_2
                jmp     short gdrvfspc_ret
; ---------------------------------------------------------------------------

mcc_4:                                  ; ...
                shr     eax, 1
                mov     edx, 0FFFEh
                cmp     ebx, edx
                jbe     short gdrvfspc_ret
                mov     ebx, edx
                jmp     short gdrvfspc_ret
; ---------------------------------------------------------------------------

mcc_5:                                  ; ...
                shl     edx, 1
                shl     ebx, 1
                shr     eax, 1
                push    ax
                push    dx
                mul     cx
                cmp     dx, 0
                ja      short mcc_6
                cmp     ax, 32768       ; 32 kilobytes (per cluster)

mcc_6:                                  ; ...
                pop     dx
                pop     ax
                ja      short mcc_5
                cmp     edx, 0FFFEh
                ja      short mcc_2
                jmp     short gdrvfspc_ret
modify_cluster_count endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR gdrvfspc_7303h

loc_9375:                               ; ...
                mov     al, 0Fh

loc_9377:                               ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_937A:                               ; ...
                mov     al, 18h

loc_937C:                               ; ...
                jmp     short loc_9377
; ---------------------------------------------------------------------------

loc_937E:                               ; ...
                mov     al, 57h
                jmp     short loc_937C
; END OF FUNCTION CHUNK FOR gdrvfspc_7303h

; =============== S U B R O U T I N E =======================================


gdrvfspc_7303h  proc near               ; ...

; FUNCTION CHUNK AT 43B4 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 4BE5 SIZE 0000000D BYTES

                cmp     ax, 0FFFFh
                jz      short loc_9375
                cmp     word ptr [si+4], 2Ch ; ','
                jb      short loc_937A
                mov     es, word ptr [si+10h]
                mov     di, [si+0Ah]
                cmp     word ptr es:[di+2], 0
                ja      short loc_937E
                mov     word ptr es:[di], 2Ch ; ','
                mov     es:[di+10h], dx
                mov     es:[di+20h], dx
                mov     dx, ss:CCOUNT_HW
                mov     es:[di+12h], dx
                mov     es:[di+22h], dx
                mov     es:[di+0Ch], bx
                mov     es:[di+1Ch], bx
                mov     bx, ss:ROOTCLUST_HW
                mov     es:[di+0Eh], bx
                mov     es:[di+1Eh], bx
                mov     es:[di+8], cx
                mov     es:[di+4], ax
                mov     word ptr es:[di+0Ah], 0
                mov     word ptr es:[di+6], 0
                mov     ebx, es:[di+4]
                mov     eax, es:[di+1Ch]
                mul     ebx
                or      edx, edx
                jz      short gdrvfspc_7303_1
                xor     eax, eax
                dec     eax

gdrvfspc_7303_1:                        ; ...
                mov     es:[di+14h], eax
                mov     eax, es:[di+10h]
                mul     ebx
                or      edx, edx
                jz      short gdrvfspc_7303_2
                xor     eax, eax
                dec     eax

gdrvfspc_7303_2:                        ; ...
                mov     es:[di+18h], eax
                xor     ax, ax
                mov     es:[di+2], ax
                mov     es:[di+24h], ax
                mov     es:[di+26h], ax
                mov     es:[di+28h], ax
                mov     es:[di+2Ah], ax
                mov     ax, 2Ch ; ','
                jmp     SYS_RET_OK
gdrvfspc_7303h  endp

; ---------------------------------------------------------------------------

$GET_DMA:                               ; ...
                mov     bx, word ptr ss:DMAADD
                mov     cx, word ptr ss:DMAADD+2
                call    Get_User_Stack
                mov     [si+2], bx
                mov     [si+10h], cx
                retn
; ---------------------------------------------------------------------------

$SET_DMA:                               ; ...
                mov     word ptr ss:DMAADD, dx
                mov     word ptr ss:DMAADD+2, ds
                retn
; ---------------------------------------------------------------------------

$GET_DEFAULT_DRIVE:                     ; ...
                mov     al, ss:CURDRV
                retn
; ---------------------------------------------------------------------------

$SET_DEFAULT_DRIVE:                     ; ...
                mov     al, dl
                inc     al
                call    GetVisDrv
                jb      short loc_945D
                mov     ss:336h, al

loc_945D:                               ; ...
                mov     al, ss:47h
                retn

; =============== S U B R O U T I N E =======================================


$GET_INTERRUPT_VECTOR proc near         ; ...
                call    RECSET
                les     bx, es:[bx]
                call    Get_User_Stack
                mov     [si+2], bx
                mov     word ptr [si+10h], es
                retn
$GET_INTERRUPT_VECTOR endp

; ---------------------------------------------------------------------------

$SET_INTERRUPT_VECTOR:                  ; ...
                call    RECSET
                cli
                mov     es:[bx], dx
                mov     word ptr es:[bx+2], ds
                sti
                test    byte ptr ss:86h, 4
                jnz     short loc_9487
                retn
; ---------------------------------------------------------------------------

loc_9487:                               ; ...
                cmp     byte ptr ss:85h, 0
                jnz     short locret_9495
                mov     byte ptr ss:85h, 1

locret_9495:                            ; ...
                retn

; =============== S U B R O U T I N E =======================================


RECSET          proc near               ; ...
                xor     bx, bx
                mov     es, bx
                assume es:BIOSDATA
                mov     bl, al
                shl     bx, 2
                retn
RECSET          endp

; ---------------------------------------------------------------------------

$CHAR_OPER:                             ; ...
                or      al, al
                mov     dl, 2Fh ; '/'
                jz      short chop_1
                cmp     al, 2
                mov     dl, 0FFh
                jz      short chop_1
                retn
; ---------------------------------------------------------------------------

chop_1:                                 ; ...
                call    Get_User_Stack
                mov     [si+6], dx
                retn
; ---------------------------------------------------------------------------

$GetExtendedError:                      ; ...
                push    ss
                pop     ds
                mov     ax, ds:EXTERR
                les     di, ds:328h
                assume es:nothing
                mov     bx, ds:326h
                mov     ch, ds:323h
                call    Get_User_Stack
                mov     [si+0Ah], di
                mov     word ptr [si+10h], es
                mov     [si+2], bx
                mov     [si+4], cx

loc_94D4:                               ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------
                push    si
                mov     si, 122Ah
                mov     ax, ss:[si+6Ah]
                pop     si
                retn
; ---------------------------------------------------------------------------

$ECS_Call:                              ; ...
                or      al, al
                jnz     short loc_94F7
                call    Get_User_Stack
                mov     word ptr [si+8], 0D00h
                push    es
                mov     es, cs:DosDSeg
                mov     word ptr [si+0Eh], es
                pop     es

loc_94F7:                               ; ...
                jmp     short loc_94D4
; ---------------------------------------------------------------------------

$PARSE_FILE_DESCRIPTOR:                 ; ...
                call    MAKEFCB
                push    si
                call    Get_User_Stack
                pop     word ptr [si+8]
                retn
; ---------------------------------------------------------------------------

$SLEAZEFUNC:                            ; ...
                mov     dl, 0

$SLEAZEFUNCDL:                          ; ...
                push    ss
                pop     ds
                mov     al, dl
                call    GETTHISDRV
                jb      short loc_9531
                call    DISK_INFO
                jb      short loc_9531
                mov     byte ptr ds:FATBYTE, ah
                call    Get_User_Stack
                xchg    dx, bx
                call    modify_cluster_count
                mov     ah, byte ptr ss:FATBYTE
                mov     [si], ax
                mov     di, offset FATBYTE
                mov     [si+2], di
                mov     word ptr [si+0Eh], ss
                retn
; ---------------------------------------------------------------------------

loc_9531:                               ; ...
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

$GET_INDOS_FLAG:                        ; ...
                call    Get_User_Stack
                mov     word ptr [si+2], offset INDOS
                mov     word ptr [si+10h], ss
                retn
; ---------------------------------------------------------------------------

$GET_IN_VARS:                           ; ...
                call    Get_User_Stack
                mov     word ptr [si+2], offset DPBHEAD
                mov     word ptr [si+10h], ss
                retn
; ---------------------------------------------------------------------------

$GET_DEFAULT_DPB:                       ; ...
                mov     dl, 0

$GET_DPB:                               ; ...
                push    ss
                pop     ds
                mov     al, dl
                call    GETTHISDRV
                mov     al, 0Fh
                jb      loc_9634
                les     di, ds:THISCDS
                test    byte ptr es:[di+44h], 80h
                jnz     loc_9634
                call    test_remote_disk_flag
                jnz     loc_9634
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk
                mov     al, 53h ; 'S'
                jb      loc_9634
                call    Get_User_Stack
                cmp     word ptr [si], 7302h
                jz      short loc_9599
                cmp     word ptr es:[bp+0Fh], 0
                jz      loc_9634
                mov     [si+2], bp
                mov     word ptr [si+0Eh], es
                xor     al, al
                retn
; ---------------------------------------------------------------------------

loc_9599:                               ; ...
                mov     al, 18h
                cmp     word ptr [si+4], 3Fh ; '?'
                jnb     short loc_95A4

loc_95A1:                               ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_95A4:                               ; ...
                push    es
                push    bp
                mov     es, word ptr [si+10h]
                mov     di, [si+0Ah]
                pop     si
                pop     ds
                mov     ax, 3Dh ; '='
                stosw
                mov     cx, ax
                push    di
                rep movsb
                pop     di
                call    Get_User_Stack
                cmp     word ptr [si+8], 0F1A6h
                jz      short loc_95D5
                xor     ax, ax
                dec     ax
                mov     es:[di+19h], ax
                mov     es:[di+1Bh], ax
                mov     es:[di+13h], ax
                mov     es:[di+15h], ax

loc_95D5:                               ; ...
                cmp     word ptr es:[di+0Fh], 0
                jz      short loc_962F
                mov     ax, es:[di+0Dh]
                mov     es:[di+2Dh], ax
                mov     ax, es:[di+0Fh]
                mov     es:[di+31h], ax
                mov     ax, es:[di+1Dh]
                mov     es:[di+39h], ax
                mov     ax, es:[di+0Bh]
                mov     es:[di+29h], ax
                xor     ax, ax
                mov     es:[di+35h], ax
                mov     es:[di+37h], ax
                mov     es:[di+2Fh], ax
                mov     es:[di+33h], ax
                mov     es:[di+3Bh], ax
                mov     es:[di+2Bh], ax
                mov     es:[di+23h], ax
                dec     ax
                mov     es:[di+25h], ax
                mov     es:[di+27h], ax
                cmp     es:[di+1Fh], ax
                jz      short loc_962B
                xor     ax, ax

loc_962B:                               ; ...
                mov     es:[di+21h], ax

loc_962F:                               ; ...
                xor     ax, ax
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

loc_9634:                               ; ...
                call    Get_User_Stack
                cmp     word ptr [si], 7302h
                jz      loc_95A1
                mov     al, 0FFh
                retn
; ---------------------------------------------------------------------------

$DISK_RESET:                            ; ...
                mov     al, 0FFh
                push    ss
                pop     ds
                call    ECritDisk
                or      ds:DOS34_FLAG, 4
                call    FLUSHBUF
                and     ds:DOS34_FLAG, 0FFFBh
                les     bp, ds:DPBHEAD

drst_1:                                 ; ...
                cmp     bp, 0FFFFh
                jz      short drst_2
                call    update_fat32_fsinfo
                les     bp, es:[bp+19h]
                jmp     short drst_1
; ---------------------------------------------------------------------------

drst_2:                                 ; ...
                mov     cs:SC_STATUS, 0
                mov     bx, 0FFFFh
                mov     word ptr ds:LastBuffer, bx
                mov     word ptr ds:LastBuffer+2, bx
                call    LCritDisk
                mov     ax, 0FFFFh
                push    ax
                mov     ax, 1120h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
                                        ; DS = DOS CS
                                        ; Return: CF clear (successful)
                pop     ax
                retn

; =============== S U B R O U T I N E =======================================


$SETDPB         proc near               ; ...
                clc
                pushf
                mov     di, bp          ; DPB address
                xor     ax, ax
                cmp     cx, 4558h       ; CX = signature 4558h ('EX')
                                        ;  for FAT32 extended BPB/DPB
                jnz     short not_fat32_extension
                cmp     dx, 4152h       ; DX = signature 4152h ('AR')
                                        ;  for FAT32 extended BPB/DPB
                jnz     short not_fat32_extension
                inc     ax

not_fat32_extension:                    ; ...
                push    ax
                mov     bl, es:[di]     ; drive number (A=0, B=1 ..)
                mov     bh, 0
                test    ss:drive_flags[bx], 2
                jz      short setdpb_1
                or      ss:drive_flags[bx], 4

setdpb_1:                               ; ...
                mov     bx, sp
                lea     di, [di+2]      ; offset DPB.SECTOR_SIZE
                lodsw
                stosw
                cmp     byte ptr [si+3], 0 ; number of FATs
                jnz     short chk_yesfat

nofat:                                  ; ...
                mov     byte ptr es:[di+4], 0 ; DPB.FAT_COUNT
                xor     eax, eax
                jmp     setend
; ---------------------------------------------------------------------------

chk_yesfat:                             ; ...
                cmp     word ptr [si+9], 0 ; 16 bit FAT size
                jnz     short yesfat
                cmp     word ptr [si+29], 0 ; FAT32 version (must be 0)
                ja      short nofat

yesfat:                                 ; ...
                mov     dx, ax
                lodsb
                dec     al
                stosb
                inc     al
                xor     ah, ah

LOG2LOOP:                               ; ...
                test    al, 1
                jnz     short SAVLOG
                inc     ah
                shr     al, 1
                jmp     short LOG2LOOP
; ---------------------------------------------------------------------------

SAVLOG:                                 ; ...
                mov     al, ah
                stosb
                movsw
                lodsb
                stosb
                lodsw
                stosw
                shr     dx, 5
                dec     ax
                add     ax, dx
                mov     cx, dx
                xor     dx, dx
                div     cx
                mov     cx, ax
                inc     di
                inc     di
                movsw
                lodsb
                mov     es:[bp+23], al
                lodsw
                stosw
                movzx   eax, ax
                cmp     word ptr ss:[bx], 0
                jz      short savlog2
                or      ax, ax
                jnz     short savlog1
                mov     eax, [si+12]

savlog1:                                ; ...
                mov     es:[bp+49], eax

savlog2:                                ; ...
                or      eax, eax
                jz      setend
                movzx   edx, byte ptr es:[bp+8]
                mul     edx
                movzx   edx, word ptr es:[bp+6]
                add     eax, edx
                stosw
                cmp     word ptr ss:[bx], 0
                jz      short setdpb_7
                cmp     word ptr es:[bp+15], 0
                jnz     short setdpb_7
                mov     dx, [si+24]
                or      dx, dx
                jz      short savlog3
                cmp     dx, es:[bp+6]
                jb      short setdpb_2
                xor     dx, dx

savlog3:                                ; ...
                dec     dx

setdpb_2:                               ; ...
                mov     es:[bp+37], dx
                mov     dx, [si+26]
                or      dx, dx
                jz      short setdpb_3
                cmp     dx, es:[bp+6]
                jb      short setdpb_4
                xor     dx, dx

setdpb_3:                               ; ...
                dec     dx

setdpb_4:                               ; ...
                mov     es:[bp+27h], dx
                mov     edx, [si+14h]
                mov     cx, [si+10h]
                mov     es:[bp+35h], edx
                xor     dx, dx
                mov     es:[bp+9], dx
                dec     dx
                mov     es:[bp+11h], dx
                mov     dx, cx
                and     dx, 0Fh
                test    cx, 80h
                jnz     short setdpb_6

setdpb_5:                               ; ...
                and     cx, 0FFF0h
                xor     dl, dl

setdpb_6:                               ; ...
                cmp     dl, es:[bp+8]
                jnb     short setdpb_5
                mov     es:[bp+35], cx
                xor     cx, cx

setdpb_7:                               ; ...
                movzx   ecx, cx
                add     eax, ecx
                mov     es:[bp+11], ax
                cmp     word ptr ss:[bx], 0
                jz      short setdpb_8
                mov     es:[bp+41], eax

setdpb_8:                               ; ...
                mov     cl, es:[bp+5]
                movzx   edx, word ptr es:[bp+13]
                or      dx, dx
                jnz     short setdpb_9
                mov     edx, [si+8]

setdpb_9:                               ; ...
                sub     edx, eax
                shr     edx, cl
                mov     eax, edx

setend:                                 ; ...
                inc     eax
                mov     ecx, eax
                movzx   eax, word ptr es:[bp+15] ; DPB.FAT_SIZE
                or      ax, ax
                jnz     short setend1   ; FAT (except FAT32)
                cmp     word ptr ss:[bx], 0 ; byte [DOSDATA+DriveNumber]
                jz      short setend1   ; not FAT32
                mov     eax, es:[bp+49] ; DPB.FAT32_SIZE

setend1:                                ; ...
                movzx   edx, word ptr es:[bp+2] ; DPB.SECTOR_SIZE
                mul     edx
                cmp     ecx, 0FF6h
                jb      short setend_fat12
                shr     eax, 1
                cmp     ecx, 0FFF6h
                jb      short setend2
                shr     eax, 1

setend2:                                ; ...
                cmp     eax, 0FF7h
                jb      short setend3
                jmp     short setend_fat16
; ---------------------------------------------------------------------------

setend_fat12:                           ; ...
                xor     edx, edx
                shl     eax, 1
                rcl     edx, 1
                push    ecx
                mov     ecx, 3
                div     ecx
                pop     ecx

setend_fat16:                           ; ...
                dec     eax
                cmp     eax, ecx
                jbe     short setend4

setend3:                                ; ...
                mov     eax, ecx

setend4:                                ; ...
                cmp     word ptr ss:[bx], 0 ; DPB.FAT32_NXTFREE
                jz      short setend_fat_2
                mov     dword ptr es:[bp+57], 0
                mov     word ptr es:[bp+33], 0FFFFh
                mov     es:[bp+45], eax
                cmp     eax, 0FFF6h
                jnb     short setend_fat_1
                cmp     word ptr es:[bp+15], 0 ; FAT32 ?
                jnz     short setend_fat_2 ; no
                xor     eax, eax        ; 0 ; NON FAT (unknown) fs
                mov     es:[bp+45], eax ; DPB.LAST_CLUSTER
                mov     es:[bp+8], al   ; DPB.FAT_COUNT

setend_fat_1:                           ; ...
                xor     ax, ax

setend_fat_2:                           ; ...
                mov     es:[bp+13], ax  ; DPB.MAX_CLUSTER
                mov     word ptr es:[bp+29], 0 ; DPB.NEXT_FREE
                mov     word ptr es:[bp+31], 0FFFFh ; DPB.FREE_CNT
                add     sp, 2
                popf

setdpb_retn:                            ; ...
                retn
$SETDPB         endp


; =============== S U B R O U T I N E =======================================


sub_9882        proc near               ; ...
                xor     al, al
                dec     al
                cmp     byte ptr [si+3], 0
                jnz     short setdpb_retn
                cmp     byte ptr [si+1], 3Ah ; ':'
                jnz     short setdpb_retn
                push    ax
                mov     al, [si+2]
                call    PATHCHRCMP
                pop     ax
                jnz     short setdpb_retn
                call    DriveFromText
                retn
sub_9882        endp

; ---------------------------------------------------------------------------

function_2:                             ; ...
                jmp     $GET_DPB
; ---------------------------------------------------------------------------

function_3:                             ; ...
                push    si
                push    ax
                mov     si, dx
                call    sub_9882
                mov     dx, ax
                pop     ax
                pop     si
                cmp     dl, 0FFh
                jz      invalid_drive_number
                jmp     $GET_DRIVE_FREESPACE
; ---------------------------------------------------------------------------

$FAT32EXT:                              ; ...
                cmp     al, 5
                ja      short invalid_fat32_ext_func
                jz      function_5
                cmp     al, 4
                jz      function_4
                cmp     al, 3
                jz      short function_3
                cmp     al, 2
                jz      short function_2
                cmp     dl, 26
                ja      short invalid_drive_number
                dec     dl
                jns     short drv_lock_flush_1
                mov     dl, ss:CURDRV   ; default/current drive

drv_lock_flush_1:                       ; ...
                mov     dh, 0
                mov     bx, dx
                cmp     cl, 1
                ja      short invalid_fat32_ext_func
                mov     ah, ss:drive_flags[bx]
                cmp     cl, 0
                jz      short loc_9911
                test    al, al
                jz      short loc_990C
                and     ah, 0F7h
                and     ch, 8
                or      ah, ch
                mov     ss:drive_flags[bx], ah
                test    ah, 8
                jnz     short loc_9932
                mov     al, 0FFh
                call    FLUSHBUF
                jmp     short loc_9932
; ---------------------------------------------------------------------------

loc_990C:                               ; ...
                and     ah, 8
                jmp     short loc_992A
; ---------------------------------------------------------------------------

loc_9911:                               ; ...
                test    al, al
                jz      short loc_9927
                and     ah, 0F9h
                test    ch, 2
                jz      short loc_9920
                or      ah, 6

loc_9920:                               ; ...
                mov     ss:drive_flags[bx], ah
                jmp     short loc_9932
; ---------------------------------------------------------------------------

loc_9927:                               ; ...
                and     ah, 6

loc_992A:                               ; ...
                mov     al, cl
                call    Get_User_Stack
                mov     [si+4], ax

loc_9932:                               ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

invalid_drive_number:                   ; ...
                mov     al, 0Fh

loc_9937:                               ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

invalid_fat32_ext_func:                 ; ...
                mov     al, 1

loc_993C:                               ; ...
                jmp     short loc_9937
; ---------------------------------------------------------------------------

loc_993E:                               ; ...
                mov     al, 57h ; 'W'

loc_9940:                               ; ...
                jmp     short loc_993C
; ---------------------------------------------------------------------------

function_5:                             ; ...
                cmp     cx, 0FFFFh
                jnz     short loc_993E
                test    si, 1FFEh
                jnz     short loc_993E
                mov     al, dl
                dec     al
                mov     ah, 1
                test    si, 1
                jz      short loc_995E
                call    near ptr FAT32_ABSDWRT
                jmp     short loc_9961
; ---------------------------------------------------------------------------

loc_995E:                               ; ...
                call    near ptr FAT32_ABSDRD

loc_9961:                               ; ...
                jnb     short loc_9932
                call    Get_User_Stack
                or      word ptr [si+16h], 1
                stc
                mov     [si], ax
                retn
; ---------------------------------------------------------------------------

function_4:                             ; ...
                cmp     cx, 18h
                jnb     short loc_9977
                mov     al, 18h

loc_9975:                               ; ...
                jmp     short loc_9940
; ---------------------------------------------------------------------------

loc_9977:                               ; ...
                push    ss
                pop     ds
                mov     al, dl
                call    GETTHISDRV
                mov     al, 0Fh
                jb      short loc_9975
                les     di, ds:THISCDS
                test    byte ptr es:[di+44h], 80h
                jnz     short loc_9975
                call    test_remote_disk_flag
                jnz     short loc_9975
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk
                mov     al, 53h ; 'S'
                jb      short loc_9975
                call    Get_User_Stack
                push    es
                push    bp
                mov     es, word ptr [si+10h]
                mov     di, [si+0Ah]
                pop     si
                pop     ds
                cmp     word ptr es:[di+2], 0
                ja      short loc_993E
                cmp     dword ptr es:[di+4], 4
                ja      short loc_993E
                mov     word ptr es:[di], 18h
                mov     word ptr es:[di+2], 0
                mov     al, es:[di+4]
                or      al, al
                jz      loc_9B7A
                dec     al
                jz      short loc_9A31
                dec     al
                jz      short loc_9A2A
                dec     al
                jz      short loc_9A45
                mov     al, 0Fh
                cmp     word ptr [si+0Fh], 0
                jnz     short loc_9975
                mov     al, 57h ; 'W'
                mov     ecx, [si+35h]
                mov     es:[di+0Ch], ecx
                mov     edx, es:[di+8]
                inc     edx
                jz      loc_9932
                dec     edx
                cmp     edx, 2
                jb      loc_9975
                cmp     edx, [si+2Dh]
                ja      loc_9975
                mov     [si+35h], edx
                or      byte ptr [si+18h], 2

loc_9A14:                               ; ...
                push    ds
                push    si
                pop     bp
                pop     es
                call    ECritDisk
                call    update_fat32_fsinfo
                call    LCritDisk
                jnb     loc_9932
                mov     al, 1Fh
                jmp     loc_9975
; ---------------------------------------------------------------------------

loc_9A2A:                               ; ...
                or      byte ptr [si+18h], 80h
                jmp     loc_9932
; ---------------------------------------------------------------------------

loc_9A31:                               ; ...
                push    ds
                push    si
                lds     si, es:[di+8]
                pop     bp
                pop     es
                mov     cx, 4558h
                mov     dx, 4152h
                call    $SETDPB
                jmp     loc_9932
; ---------------------------------------------------------------------------

loc_9A45:                               ; ...
                mov     al, 0Fh
                cmp     word ptr [si+0Fh], 0
                jnz     loc_9975
                mov     al, 57h ; 'W'
                movzx   ecx, word ptr [si+23h]
                and     ecx, 8Fh
                mov     es:[di+0Ch], ecx
                mov     edx, es:[di+8]
                inc     edx
                jz      loc_9932
                dec     edx
                test    edx, 0FFFFFF70h
                jnz     loc_9975
                test    dx, 80h
                jnz     loc_9B5F
                test    dx, 0Fh
                jnz     loc_9975
                test    cx, 80h
                jz      loc_9B6B
                cmp     byte ptr [si+8], 1
                jbe     loc_9B6B
                and     cx, 0Fh
                push    dx
                push    ds
                push    si
                call    ECritDisk
                lds     bx, ss:7Ah
                cmp     byte ptr ss:79h, 0
                jnz     short loc_9AC1
                push    cx
                call    GETCURHEAD
                call    BUFWRITE
                pop     cx
                jb      loc_9B51
                add     di, 18h
                mov     bx, di

loc_9AC1:                               ; ...
                mov     byte ptr ss:34Bh, 18h
                pop     bp
                pop     es
                push    es
                push    bp
                movzx   eax, cx
                mov     ecx, es:[bp+31h]
                mul     ecx
                mov     edx, eax
                movzx   eax, word ptr es:[bp+6]
                add     edx, eax
                xor     eax, eax

loc_9AE6:                               ; ...
                push    ecx
                push    edx
                push    eax
                push    bx
                ror     edx, 10h
                mov     ss:607h, dx
                ror     edx, 10h
                mov     cx, 1
                call    DREAD
                pop     bx
                jb      short loc_9B4B
                pop     eax
                push    eax
                movzx   cx, byte ptr es:[bp+8]
                movzx   edx, word ptr es:[bp+6]
                add     edx, eax

loc_9B15:                               ; ...
                push    cx
                push    edx
                push    bx
                ror     edx, 10h
                mov     ss:607h, dx
                ror     edx, 10h
                mov     cx, 1
                call    DWRITE
                pop     bx
                pop     edx
                pop     cx
                jb      short loc_9B4B
                add     edx, es:[bp+31h]
                dec     cx
                jnz     short loc_9B15
                pop     eax
                pop     edx
                pop     ecx
                inc     edx
                inc     eax
                dec     ecx
                jnz     short loc_9AE6
                clc
                jmp     short loc_9B51
; ---------------------------------------------------------------------------

loc_9B4B:                               ; ...
                pop     eax
                pop     edx
                pop     ecx

loc_9B51:                               ; ...
                call    LCritDisk
                pop     si
                pop     ds
                pop     dx
                mov     al, 1Fh
                jb      loc_9975
                jmp     short loc_9B6B
; ---------------------------------------------------------------------------

loc_9B5F:                               ; ...
                mov     bx, dx
                and     bx, 0Fh
                cmp     bl, [si+8]
                jnb     loc_9975

loc_9B6B:                               ; ...
                and     word ptr [si+23h], 0FF70h
                or      [si+23h], dx
                or      byte ptr [si+18h], 8
                jmp     loc_9A14
; ---------------------------------------------------------------------------

loc_9B7A:                               ; ...
                movzx   ebx, word ptr [si+0Dh]
                cmp     word ptr [si+0Fh], 0
                jnz     short loc_9B89
                mov     ebx, [si+2Dh]

loc_9B89:                               ; ...
                mov     al, 57h ; 'W'
                mov     ecx, es:[di+8]
                mov     edx, es:[di+0Ch]
                jecxz   loc_9BA5
                cmp     ecx, 0FFFFFFFFh
                jz      short loc_9BA5
                cmp     ecx, ebx
                jnb     loc_9975

loc_9BA5:                               ; ...
                cmp     edx, 1
                jb      short loc_9BBC
                jz      loc_9975
                cmp     edx, 0FFFFFFFFh
                jz      short loc_9BBC
                cmp     edx, ebx
                ja      loc_9975

loc_9BBC:                               ; ...
                jecxz   loc_9BD0
                or      byte ptr [si+18h], 1
                mov     [si+1Fh], cx
                cmp     word ptr [si+0Fh], 0
                jnz     short loc_9BD0
                mov     [si+1Fh], ecx

loc_9BD0:                               ; ...
                or      edx, edx
                jz      loc_9932
                or      byte ptr [si+18h], 1
                cmp     edx, 0FFFFFFFFh
                jnz     short loc_9BE7
                mov     edx, 2

loc_9BE7:                               ; ...
                mov     [si+1Dh], dx
                cmp     word ptr [si+0Fh], 0
                jnz     loc_9932
                mov     [si+39h], edx
                jmp     loc_9932

; =============== S U B R O U T I N E =======================================


$DUP_PDB        proc near               ; ...
                mov     ds, cs:DosDSeg
                mov     ds:CreatePDB, 0FFh
                mov     ds, ds:CurrentPDB
                push    si
                jmp     short CreateCopy
; ---------------------------------------------------------------------------

$CREATE_PROCESS_DATA_BLOCK:             ; ...
                call    Get_User_Stack
                mov     ds, word ptr [si+14h]
                push    word ptr ds:2   ; [PDB.BLOCK_LEN]

CreateCopy:                             ; ...
                mov     es, dx
                xor     si, si
                mov     di, si
                mov     cx, 64
                rep movsd
                mov     cx, 20
                mov     di, 18h
                push    ds
                lds     si, ds:34h      ; [PDB.JFN_Pointer]
                rep movsb
                pop     ds
                mov     ds, cs:DosDSeg
                cmp     ds:CreatePDB, 0
                jz      short Create_PDB_cont
                mov     ds, cs:DosDSeg
                xor     bx, bx
                mov     cx, 14h

Create_dup_jfn:                         ; ...
                push    es
                call    SFFromHandle
                mov     al, 0FFh
                jb      short CreateStash
                cmp     word ptr es:[di], 0
                jz      short CreateStash
                cmp     word ptr es:[di], 0FFFFh
                jz      short CreateStash
                test    byte ptr es:[di+6], 10h
                jnz     short CreateStash
                mov     ah, es:[di+2]
                and     ah, 0F0h
                cmp     ah, 70h ; 'p'
                jz      short CreateStash
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:THISSFT+2, es
                call    DOS_DUP
                call    pJFNFromHandle
                mov     al, es:[di]

CreateStash:                            ; ...
                pop     es
                mov     es:[bx+18h], al
                inc     bx
                loop    Create_dup_jfn
                mov     bx, ds:CurrentPDB
                mov     es:16h, bx
                mov     ds:CurrentPDB, es
                mov     ds, bx

Create_PDB_cont:                        ; ...
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:CreatePDB, 0
                pop     ds
                pop     ax
$DUP_PDB        endp


; =============== S U B R O U T I N E =======================================


SETMEM          proc near               ; ...
                xor     cx, cx
                mov     ds, cx
                assume ds:BIOSDATA
                mov     es, dx
                mov     si, 88h
                mov     di, 0Ah
                mov     cx, 6
                rep movsw
                mov     es:2, ax
                sub     ax, dx
                cmp     ax, 0FFFh
                jbe     short loc_9CBF
                mov     ax, 0FFFh

loc_9CBF:                               ; ...
                sub     ax, 10h
                mov     bx, 0Ch
                sub     bx, ax
                mov     cl, 4
                shl     ax, cl
                mov     ds, dx
                assume ds:nothing
                mov     ds:6, ax
                mov     ds:8, bx
                cmp     ax, 0FEF0h
                jz      short loc_9CE5
                mov     word ptr ds:6, 0C0h
                mov     word ptr ds:8, 0

loc_9CE5:                               ; ...
                mov     word ptr ds:0, 20CDh
                mov     byte ptr ds:5, 9Ah
                mov     word ptr ds:50h, 21CDh
                mov     byte ptr ds:52h, 0CBh
                mov     word ptr ds:34h, 18h
                mov     word ptr ds:36h, ds
                mov     word ptr ds:32h, 14h ; ...
                mov     dword ptr ds:38h, 0FFFFFFFFh
                mov     word ptr es:40h, 8
                retn
SETMEM          endp

; ---------------------------------------------------------------------------

$GSetMediaID:                           ; ...
                mov     cx, 866h
                cmp     al, 0
                jz      short doioctl
                cmp     al, 1
                jnz     short errorfunc
                mov     cx, 846h

doioctl:                                ; ...
                mov     al, 0Dh
                call    $IOCTL
                retn
; ---------------------------------------------------------------------------

errorfunc:                              ; ...
                mov     al, 1
                jmp     SYS_RET_ERR

; =============== S U B R O U T I N E =======================================


test_remote_disk_flag proc near         ; ...
                push    bx
                mov     bx, es
                cmp     bx, cs:DosDSeg
                pop     bx
                jz      short tstrdf_retn

tstrdf_1:                               ; ...
                push    bx
                xor     bx, bx
                mov     bl, es:[di]     ; 'A','B','C'..
                test    byte ptr [bx+12C7h], 1 ; remote or nonDOS (nonFAT) fs
                                        ; or remote disk flag ?
                                        ; [bx+drive_flags-41h]
                pop     bx

tstrdf_retn:                            ; ...
                retn
test_remote_disk_flag endp


; =============== S U B R O U T I N E =======================================


StrCmp          proc near               ; ...
                push    si
                push    di
                push    ax

Cmplp:                                  ; ...
                lodsb
                call    UCase
                call    PATHCHRCMP
                mov     ah, al
                mov     al, es:[di]
                inc     di
                call    UCase
                call    PATHCHRCMP
                cmp     ah, al
                jnz     short PopRet
                or      al, al
                jnz     short Cmplp

PopRet:                                 ; ...
                pop     ax
                pop     di
                pop     si
                retn
StrCmp          endp


; =============== S U B R O U T I N E =======================================


StrCpy          proc near               ; ...
                push    ax

CPYLoop:                                ; ...
                lodsb
                call    UCase
                call    PATHCHRCMP
                stosb
                or      al, al
                jnz     short CPYLoop
                pop     ax
                retn
StrCpy          endp


; =============== S U B R O U T I N E =======================================


FStrCpy         proc near               ; ...
                push    ax

FCPYLoop:                               ; ...
                lodsb
                stosb
                or      al, al
                jnz     short FCPYLoop
                pop     ax
                retn
FStrCpy         endp


; =============== S U B R O U T I N E =======================================


StrLen          proc near               ; ...
                push    di
                push    ax
                mov     cx, 65535       ; -1 ; 0FFFFh
                xor     al, al
                repne scasb
                not     cx
                pop     ax
                pop     di
                retn
StrLen          endp


; =============== S U B R O U T I N E =======================================


DStrLen         proc near               ; ...
                call    XCHGP
                call    StrLen
                call    XCHGP
                retn
DStrLen         endp


; =============== S U B R O U T I N E =======================================


XCHGP           proc near               ; ...
                push    ds
                push    es
                pop     ds
                pop     es
                xchg    si, di
                retn
XCHGP           endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

TableDispatch   proc near               ; ...

TFrame.Index    = byte ptr  4
TFrame.Tab      = word ptr  6

                push    bp
                mov     bp, sp
                push    bx
                mov     bx, [bp+TFrame.Tab]
                mov     bl, cs:[bx]
                cmp     [bp+TFrame.Index], bl
                jnb     short TableError
                mov     bl, [bp+TFrame.Index]
                xor     bh, bh
                shl     bx, 1
                inc     bx
                add     bx, [bp+TFrame.Tab]
                mov     bx, cs:[bx]
                mov     [bp+TFrame.Tab], bx
                pop     bx
                pop     bp
                add     sp, 4
                retn
; ---------------------------------------------------------------------------

TableError:                             ; ...
                pop     bx
                pop     bp
                retn    6
TableDispatch   endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


TestNet         proc near               ; ...
                mov     es, cs:DosDSeg
                les     di, es:THISCDS
                cmp     di, 0FFFFh
                jz      short CMCRet
                test    byte ptr es:[di+44h], 80h ; test byte [ES:DI+curdir.flags+1],
                                        ; (curdir_isnet>>8)
                jnz     short CMCRet
                push    ds
                mov     ds, cs:DosDSeg
                call    test_remote_disk_flag
                pop     ds
                jnz     short CMCRet
                retn                    ; cf=0 (local disk ?)
; ---------------------------------------------------------------------------

CMCRet:                                 ; ...
                cmc
                retn                    ; cf=1
TestNet         endp


; =============== S U B R O U T I N E =======================================


IsSFTNet        proc near               ; ...
                test    byte ptr es:[di+6], 80h ; [ES:DI+SF_ENTRY.sf_flags+1],
                                        ; (sf_isnet>>8)
                retn
IsSFTNet        endp

; ---------------------------------------------------------------------------

FastInit:                               ; ...
                clc                     ; (not implemented)
                retn
; ---------------------------------------------------------------------------

FastRet:
                stc
                sbb     ax, ax          ; AX = -1, CF = 1
                retf
; ---------------------------------------------------------------------------

NLS_OPEN:                               ; ...
                mov     al, cl
                call    $OPEN
                retn
; ---------------------------------------------------------------------------

NLS_LSEEK:                              ; ...
                push    ss:USER_SP
                push    ss:USER_SS
                call    Fake_User_Stack
                mov     ax, bp
                call    $LSEEK
                pop     ss:USER_SS
                pop     ss:USER_SP
                retn

; =============== S U B R O U T I N E =======================================


Fake_User_Stack proc near               ; ...
                mov     ax, ss:USER_SP_2F ; replace with INT 2Fh stack
                mov     ss:USER_SP, ax
                mov     ax, ss
                mov     ss:USER_SS, ax
                retn
Fake_User_Stack endp

; ---------------------------------------------------------------------------

GetDevList:                             ; ...
                mov     si, offset SysInitTable
                mov     ds, cs:DosDSeg
                lds     si, [si]
                mov     ax, [si+22h]    ; [SI+SYSI.DEV]
                mov     bx, [si+24h]    ; [SI+SYSI.DEV+2]
                retn
; ---------------------------------------------------------------------------

NLS_IOCTL:                              ; ...
                push    ss:USER_SP
                push    ss:USER_SS
                call    Fake_User_Stack
                mov     ax, bp          ; set up correct interface for $IOCTL
                call    $IOCTL
                pop     ss:USER_SS
                pop     ss:USER_SP
                retn
; ---------------------------------------------------------------------------

NLS_GETEXT:                             ; ...
                mov     ax, ss:EXTERR   ; return extended error
                retn
; ---------------------------------------------------------------------------

MSG_RETRIEVAL:                          ; ...
                retn

; =============== S U B R O U T I N E =======================================


ECritDisk       proc near               ; ...
                pushf
                push    ax
                xor     ax, ax
                cmp     ss:crit_sess_ptr+2, ax
                jnz     short ECritDisk_2
                cmp     ss:redir_patch, al
                jz      short ECritDisk_1
                mov     ax, 8001h
                int     2Ah             ; Microsoft Networks - BEGIN DOS CRITICAL SECTION
                                        ; AL = critical section number (00h-0Fh)

ECritDisk_1:                            ; ...
                pop     ax
                popf
                retn
; ---------------------------------------------------------------------------

ECritDisk_2:                            ; ...
                cli
                cmp     ss:crit_sess_extr, ah
                jnz     short ECritDisk_4
                inc     ss:ecritdisk_c

ECritDisk_3:                            ; ...
                pop     ax
                popf
                retn
; ---------------------------------------------------------------------------

ECritDisk_4:                            ; ...
                mov     al, 3
                call    dword ptr ss:crit_sess_ptr
                jmp     short ECritDisk_3
ECritDisk       endp

; ---------------------------------------------------------------------------

ECritCharDev:                           ; ...
                pushf
                push    ax
                xor     ax, ax
                cmp     ss:crit_sess_ptr+2, ax
                jnz     short ECritDisk_3
                jmp     short ECritDev_1

; =============== S U B R O U T I N E =======================================


ECritDevice     proc near               ; ...
                pushf
                push    ax
                xor     ax, ax
                cmp     ss:crit_sess_ptr+2, ax
                jnz     short ECritDisk_2

ECritDev_1:                             ; ...
                cmp     ss:redir_patch, al
                jz      short ECritDev_2
                mov     ax, 8002h
                int     2Ah             ; Microsoft Networks - BEGIN DOS CRITICAL SECTION
                                        ; AL = critical section number (00h-0Fh)

ECritDev_2:                             ; ...
                pop     ax
                popf
                retn
ECritDevice     endp


; =============== S U B R O U T I N E =======================================


LCritDisk       proc near               ; ...
                pushf
                push    ax
                xor     ax, ax
                cmp     ss:crit_sess_ptr+2, ax
                jnz     short LCritDisk_2
                cmp     ss:redir_patch, al
                jz      short LCritDisk_1
                mov     ax, 8101h
                int     2Ah             ; Microsoft Networks - END DOS CRITICAL SECTION
                                        ; AL = critical section number (00h-0Fh)

LCritDisk_1:                            ; ...
                pop     ax
                popf
                retn
; ---------------------------------------------------------------------------

LCritDisk_2:                            ; ...
                cli
                cmp     ss:crit_sess_extr, al
                jnz     short LCritDisk_3
                cmp     ss:ecritdisk_c, al
                jz      short LCritDisk_3
                dec     ss:ecritdisk_c

LCritDisk_3:                            ; ...
                pop     ax
                popf
                retn
; ---------------------------------------------------------------------------

LCritDisk_4:                            ; ...
                pushf
                push    ax
                xor     ax, ax
                cmp     ss:crit_sess_ptr+2, ax
                jnz     short LCritDisk_3
                jmp     short LCrit_Dev1
LCritDisk       endp


; =============== S U B R O U T I N E =======================================


LCritDevice     proc near               ; ...
                pushf
                push    ax
                xor     ax, ax
                cmp     ss:crit_sess_ptr+2, ax
                jnz     short LCritDisk_2

LCrit_Dev1:                             ; ...
                cmp     ss:redir_patch, al
                jz      short LCritDev_2
                mov     ax, 8102h
                int     2Ah             ; Microsoft Networks - END DOS CRITICAL SECTION
                                        ; AL = critical section number (00h-0Fh)

LCritDev_2:                             ; ...
                pop     ax
                popf
                retn
LCritDevice     endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR end_critical_section

loc_9F1A:                               ; ...
                cli
                cmp     ss:crit_sess_extr, al
                jnz     short loc_9F26
                mov     ss:ecritdisk_c, al ; count of critical sessions = 0

loc_9F26:                               ; ...
                pop     ax
                popf
                retn
; END OF FUNCTION CHUNK FOR end_critical_section

; =============== S U B R O U T I N E =======================================


end_critical_section proc near          ; ...

; FUNCTION CHUNK AT 578A SIZE 0000000F BYTES

                pushf
                push    ax
                xor     ax, ax
                cmp     ss:crit_sess_ptr+2, ax
                jnz     short loc_9F1A
                mov     ah, 82h
                int     2Ah             ; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
                pop     ax
                popf
                retn
end_critical_section endp


; =============== S U B R O U T I N E =======================================


$STD_CON_INPUT_NO_ECHO proc near        ; ...
                push    ds
                push    si
                push    dx
                lds     si, cs:BCONX
                mov     word ptr [si+2], 0
                mov     al, 1

INTEST:                                 ; ...
                push    ax
                call    STATCHK
                jnz     short GET
                cmp     ss:PRINTER_FLAG, 0
                jnz     short no_sys_wait
                mov     ah, 5
                call    IOFUNC
                mov     ax, 168Fh
                mov     dh, 1
                int     2Fh             ; - Multiplex - MS WINDOWS - Win95 - CLOSE-AWARENESS - QUERY CLOSE
                                        ; Return: AX - status
                test    ax, ax
                jz      short loc_9F99

no_sys_wait:                            ; ...
                mov     ah, 84h
                int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
                cmp     byte ptr ss:DATE_FLAG, 0FFh
                jnz     short NoUpdate
                push    bx
                push    cx
                push    ds
                push    ss
                pop     ds
                sub     ax, ax
                call    Save_Restore_Packet
                call    READTIME
                mov     ax, 1
                call    Save_Restore_Packet
                pop     ds
                pop     cx
                pop     bx

NoUpdate:                               ; ...
                pop     ax
                inc     ss:DATE_FLAG
                jmp     short INTEST
; ---------------------------------------------------------------------------

GET:                                    ; ...
                pop     ax
                jnb     short loc_9F9C
                mov     al, 2
                jmp     short INTEST
; ---------------------------------------------------------------------------

loc_9F99:                               ; ...
                pop     dx
                jmp     short loc_9FA1
; ---------------------------------------------------------------------------

loc_9F9C:                               ; ...
                xor     ah, ah
                call    IOFUNC

loc_9FA1:                               ; ...
                pop     dx
                pop     si
                pop     ds
                mov     ss:SCAN_FLAG, 0
                test    al, al
                jnz     short noscan
                mov     ss:SCAN_FLAG, 1

noscan:                                 ; ...
                retn
$STD_CON_INPUT_NO_ECHO endp

; ---------------------------------------------------------------------------

$STD_CON_STRING_OUTPUT:                 ; ...
                mov     si, dx

NEXT_STR1:                              ; ...
                lodsb
                cmp     al, '$'
                jz      short noscan
                call    OUTT
                jmp     short NEXT_STR1

; =============== S U B R O U T I N E =======================================


$STD_CON_STRING_INPUT proc near         ; ...

; FUNCTION CHUNK AT 4636 SIZE 00000019 BYTES
; FUNCTION CHUNK AT 58EC SIZE 00000006 BYTES
; FUNCTION CHUNK AT 591D SIZE 00000019 BYTES
; FUNCTION CHUNK AT 59A8 SIZE 00000044 BYTES
; FUNCTION CHUNK AT 5A1C SIZE 00000021 BYTES

                mov     ax, ss
                mov     es, ax
                mov     si, dx
                xor     ch, ch
                lodsw
                or      al, al
                jz      short noscan
                mov     bl, ah
                mov     bh, ch
                cmp     al, bl
                jbe     short NOEDIT
                cmp     byte ptr [bx+si], 0Dh
                jz      short EDITON

NOEDIT:                                 ; ...
                mov     bl, ch

EDITON:                                 ; ...
                mov     dl, al
                dec     dx

NEWLIN:                                 ; ...
                mov     al, ss:CARPOS
                mov     ss:STARTPOS, al
                push    si
                mov     di, offset INBUF
                mov     ss:INSMODE, ch
                mov     bh, ch
                mov     dh, ch
                call    $STD_CON_INPUT_NO_ECHO
                cmp     al, 0Ah
                jnz     short GOTCH

GETCH:                                  ; ...
                call    $STD_CON_INPUT_NO_ECHO

GOTCH:                                  ; ...
                push    ax
                push    dx
                mov     ax, 168Fh
                mov     dh, 1
                int     2Fh             ; - Multiplex - MS WINDOWS - Win95 - CLOSE-AWARENESS - QUERY CLOSE
                                        ; Return: AX - status
                pop     dx
                test    ax, ax
                pop     ax
                jz      short NTXLINE
                cmp     al, 6
                jz      short GETCH
                cmp     al, cs:ESCCHAR
                jz      short ESCAPE
                cmp     al, 7Fh
                jz      short BACKSPJ
                cmp     al, 8
                jz      short BACKSPJ
                cmp     al, 17h
                nop
                nop
                cmp     al, 15h
                nop
                nop
                cmp     al, 0Dh
                jz      short ENDLIN
                cmp     al, 0Ah
                jz      short loc_A07C
                cmp     al, cs:CANCHAR
                jz      short KILNEW

SAVCH:                                  ; ...
                cmp     dh, dl
                jnb     short BUFFUL
                stosb
                inc     dh
                call    BUFOUT
                cmp     ss:INSMODE, 0
                jnz     short GETCH
                cmp     bh, bl
                jnb     short GETCH
                inc     si
                inc     bh
                jmp     short GETCH
; ---------------------------------------------------------------------------

BACKSPJ:                                ; ...
                jmp     short BACKSP
; ---------------------------------------------------------------------------

BUFFUL:                                 ; ...
                mov     al, 7
                call    OUTT
                jmp     short GETCH
; ---------------------------------------------------------------------------

ESCAPE:                                 ; ...
                jmp     loc_8DC6
; ---------------------------------------------------------------------------

NTXLINE:                                ; ...
                mov     di, (offset INBUF+1)
                mov     dh, 0
                mov     al, 0Dh

ENDLIN:                                 ; ...
                stosb
                call    OUTT
                pop     di
                mov     [di-1], dh
                inc     dh
$STD_CON_STRING_INPUT endp


; =============== S U B R O U T I N E =======================================


COPYNEW         proc near               ; ...
                push    ds
                push    es
                pop     ds
                pop     es
                mov     si, offset INBUF
                mov     cl, dh
                rep movsb
                retn
COPYNEW         endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

loc_A07C:                               ; ...
                call    CRLF
                jmp     GETCH
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT
; ---------------------------------------------------------------------------

LineDel:                                ; ...
                or      dh, dh
                jz      GETCH
                call    BackSpace
                jmp     short LineDel
; ---------------------------------------------------------------------------

WordDel:                                ; ...
                call    BackSpace
                or      dh, dh
                jz      short GetChj
                mov     al, es:[di-1]
                cmp     al, 30h ; '0'
                jb      short GetChj
                cmp     al, 39h ; '9'
                jbe     short WordDel
                or      al, 20h
                cmp     al, 61h ; 'a'
                jb      short GetChj
                cmp     al, 7Ah ; 'z'
                jbe     short WordDel

GetChj:                                 ; ...
                jmp     GETCH
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

KILNEW:                                 ; ...
                mov     al, 5Ch ; '\'
                call    OUTT
                pop     si

loc_A0B3:                               ; ...
                call    CRLF
                mov     al, ss:STARTPOS
                call    TAB
                jmp     NEWLIN
; ---------------------------------------------------------------------------

BACKSP:                                 ; ...
                call    BackSpace
                jmp     GETCH
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

; =============== S U B R O U T I N E =======================================


BackSpace       proc near               ; ...
                or      dh, dh
                jz      short OLDBAK
                call    BACKUP
                mov     al, es:[di]
                cmp     al, 20h ; ' '
                jnb     short OLDBAK
                cmp     al, 9
                jz      short BAKTAB
                cmp     al, 15h
                jz      short OLDBAK
                cmp     al, 14h
                jz      short OLDBAK
                call    BACKMES

OLDBAK:                                 ; ...
                cmp     ss:INSMODE, 0
                jz      short OLDBAK2

OLDBAK_RETN:                            ; ...
                retn
; ---------------------------------------------------------------------------

OLDBAK2:                                ; ...
                or      bh, bh
                jz      short OLDBAK_RETN
                dec     bh
                dec     si
                retn
; ---------------------------------------------------------------------------

BAKTAB:                                 ; ...
                push    di
                dec     di
                std
                mov     cl, dh
                mov     al, 20h ; ' '
                push    bx
                mov     bl, 7
                jcxz    short FIGTAB

FNDPOS:                                 ; ...
                scasb
                jbe     short CHKCNT
                cmp     byte ptr es:[di+1], 9
                jz      short HAVTAB
                dec     bl

CHKCNT:                                 ; ...
                loop    FNDPOS

FIGTAB:                                 ; ...
                sub     bl, ss:STARTPOS

HAVTAB:                                 ; ...
                sub     bl, dh
                add     cl, bl
                and     cl, 7
                cld
                pop     bx
                pop     di
                jz      short OLDBAK

TABBAK:                                 ; ...
                call    BACKMES
                loop    TABBAK
                jmp     short OLDBAK
BackSpace       endp


; =============== S U B R O U T I N E =======================================


BACKUP          proc near               ; ...
                dec     dh
                dec     di
BACKUP          endp


; =============== S U B R O U T I N E =======================================


BACKMES         proc near               ; ...
                mov     al, 8
                call    OUTT
                mov     al, 20h ; ' '
                call    OUTT
                mov     al, 8
                jmp     OUTT
BACKMES         endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

TWOESC:                                 ; ...
                mov     al, cs:ESCCHAR
                jmp     SAVCH
; ---------------------------------------------------------------------------

COPYLIN:                                ; ...
                mov     cl, bl
                sub     cl, bh
                jmp     short loc_A14C
; ---------------------------------------------------------------------------

COPYSTR:                                ; ...
                call    FINDOLD
                jmp     short loc_A14C
; ---------------------------------------------------------------------------

COPYONE:                                ; ...
                mov     cl, 1

loc_A14C:                               ; ...
                mov     ss:INSMODE, 0
                cmp     dh, dl
                jz      short loc_A165
                cmp     bh, bl
                jz      short loc_A165
                lodsb
                stosb
                call    BUFOUT
                inc     bh
                inc     dh
                loop    loc_A14C

loc_A165:                               ; ...
                jmp     GETCH
; ---------------------------------------------------------------------------

SKIPONE:                                ; ...
                cmp     bh, bl
                jz      short loc_A165
                inc     bh
                inc     si
                jmp     GETCH
; ---------------------------------------------------------------------------

SKIPSTR:                                ; ...
                call    FINDOLD
                add     si, cx
                add     bh, cl
                jmp     GETCH
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

; =============== S U B R O U T I N E =======================================


FINDOLD         proc near               ; ...
                call    $STD_CON_INPUT_NO_ECHO
                cmp     al, cs:ESCCHAR
                jnz     short FINDSETUP
                call    $STD_CON_INPUT_NO_ECHO
                jmp     short NOTFND
; ---------------------------------------------------------------------------

FINDSETUP:                              ; ...
                mov     cl, bl
                sub     cl, bh
                jz      short NOTFND
                dec     cx
                jz      short NOTFND
                push    es
                push    ds
                pop     es
                push    di
                mov     di, si
                inc     di
                repne scasb
                pop     di
                pop     es
                jnz     short NOTFND
                not     cl
                add     cl, bl
                sub     cl, bh

FINDOLD_RETN:                           ; ...
                retn
; ---------------------------------------------------------------------------

NOTFND:                                 ; ...
                pop     bp
                jmp     GETCH
FINDOLD         endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

REEDIT:                                 ; ...
                mov     al, 40h ; '@'
                call    OUTT
                pop     di
                push    di
                push    es
                push    ds
                call    COPYNEW
                pop     ds
                pop     es
                pop     si
                mov     bl, dh
                jmp     loc_A0B3
; ---------------------------------------------------------------------------

ENTERINS:                               ; ...
                not     ss:INSMODE      ; EXITINS
                jmp     GETCH
; ---------------------------------------------------------------------------

CTRLZ:                                  ; ...
                mov     al, 1Ah
                jmp     SAVCH
; END OF FUNCTION CHUNK FOR $STD_CON_STRING_INPUT

; =============== S U B R O U T I N E =======================================


CRLF            proc near               ; ...
                mov     al, 0Dh
                call    OUTT
                mov     al, 0Ah
                jmp     OUTT
CRLF            endp

; ---------------------------------------------------------------------------

$RAW_CON_IO:                            ; ...
                mov     al, dl
                cmp     al, 0FFh
                jnz     short RAWOUT
                les     di, dword ptr ss:USER_SP
                xor     bx, bx
                call    GET_IO_SFT
                jb      short FINDOLD_RETN
                mov     ah, 1
                call    IOFUNC
                jnz     short RESFLG
                call    SPOOLINT
                or      byte ptr es:[di+16h], 40h
                xor     al, al

RET17:                                  ; ...
                retn
; ---------------------------------------------------------------------------

RESFLG:                                 ; ...
                and     byte ptr es:[di+16h], 0BFh

rci0:                                   ; ...
                call    SPOOLINT

$RAW_CON_INPUT:                         ; ...
                push    bx
                xor     bx, bx
                call    GET_IO_SFT
                pop     bx
                jb      short RET17
                mov     ah, 1
                call    IOFUNC
                jnz     short rci5
                mov     ah, 84h
                int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
                jmp     short rci0
; ---------------------------------------------------------------------------

rci5:                                   ; ...
                xor     ah, ah
                call    IOFUNC
                retn

; =============== S U B R O U T I N E =======================================


RAWOUT          proc near               ; ...
                push    bx
                mov     bx, 1
                call    GET_IO_SFT
                jb      short RAWRET1
                mov     bx, [si+5]
                and     bx, 8080h
                cmp     bx, 80h
                jnz     short RAWNORM
                push    ds
                lds     bx, [si+7]
                test    byte ptr [bx+4], 10h
                pop     ds
                jz      short RAWNORM
                push    ds
                xor     bx, bx
                mov     ds, bx
                assume ds:BIOSDATA
                pushf
                cli
                call    dword ptr ds_00A4h ; call far [29h*4]
                pop     ds
                assume ds:nothing

RAWRET:                                 ; ...
                clc

RAWRET1:                                ; ...
                pop     bx

RAWRET2:                                ; ...
                retn
; ---------------------------------------------------------------------------

RAWNORM:                                ; ...
                call    RAWOUT3
                jmp     short RAWRET
RAWOUT          endp


; =============== S U B R O U T I N E =======================================


RAWOUT2         proc near               ; ...
                call    GET_IO_SFT
                jb      short RAWRET2
RAWOUT2         endp


; =============== S U B R O U T I N E =======================================


RAWOUT3         proc near               ; ...
                push    ax
                jmp     short loc_A26B
; ---------------------------------------------------------------------------

loc_A25C:                               ; ...
                call    SPOOLINT
                or      ss:DOS34_FLAG, 200h
                mov     al, 0
                call    DSKSTATCHK

loc_A26B:                               ; ...
                mov     ah, 3
                call    IOFUNC
                jz      short loc_A25C
                inc     ax
                pop     ax
                jz      short loc_A27B
                mov     ah, 2
                call    IOFUNC

loc_A27B:                               ; ...
                clc
                retn
RAWOUT3         endp


; =============== S U B R O U T I N E =======================================


Save_Restore_Packet proc near           ; ...
                push    ds
                push    es
                push    si
                push    di
                cmp     ax, 0
                jz      short save_packet_xchg
                mov     si, offset FAKE_STACK_2F
                mov     di, offset DEVCALL_REQLEN ; DEVCALL
                jmp     short save_packet
; ---------------------------------------------------------------------------

save_packet_xchg:                       ; ...
                mov     di, offset FAKE_STACK_2F
                mov     si, offset DEVCALL_REQLEN

save_packet:                            ; ...
                mov     ax, ss
                mov     ds, ax
                mov     es, ax
                mov     cx, 11
                rep movsw
                pop     di
                pop     si
                pop     es
                pop     ds
                retn
Save_Restore_Packet endp

; ---------------------------------------------------------------------------

$STD_CON_INPUT:                         ; ...
                call    $STD_CON_INPUT_NO_ECHO
                push    ax
                call    OUTT
                pop     ax

; =============== S U B R O U T I N E =======================================


CON_INPUT_RETN  proc near               ; ...
                retn
CON_INPUT_RETN  endp

; ---------------------------------------------------------------------------

$STD_CON_OUTPUT:                        ; ...
                mov     al, dl

; =============== S U B R O U T I N E =======================================


OUTT            proc near               ; ...

; FUNCTION CHUNK AT 5BA5 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 5BB1 SIZE 00000008 BYTES
; FUNCTION CHUNK AT 5C0A SIZE 00000007 BYTES

                cmp     al, 20h ; ' '
                jb      short loc_A311
                cmp     al, 7Fh
                jz      short loc_A2BC
                inc     ss:CARPOS

loc_A2BC:                               ; ...
                push    ds
                push    si
                inc     ss:CHARCO
                and     ss:CHARCO, 3Fh
                jnz     short loc_A2D2
                push    ax
                mov     al, 0
                call    STATCHK
                pop     ax

loc_A2D2:                               ; ...
                call    RAWOUT
                pop     si
                pop     ds
                test    ss:PFLAG, 0FFh
                jz      short CON_INPUT_RETN
                push    bx
                push    ds
                push    si
                mov     bx, 1
                call    GET_IO_SFT
                jb      short loc_A30B
                mov     bx, [si+5]
                test    bh, 80h
                jnz     short loc_A30B
                test    bl, 80h
                jz      short loc_A30B
                mov     bx, 4
                call    GET_IO_SFT
                jb      short loc_A30B
                test    byte ptr [si+6], 8
                jz      short loc_A30E
                mov     ss:PFLAG, 0

loc_A30B:                               ; ...
                jmp     loc_A39D
; ---------------------------------------------------------------------------

loc_A30E:                               ; ...
                jmp     loc_A39A
; ---------------------------------------------------------------------------

loc_A311:                               ; ...
                cmp     al, 0Dh
                jz      short loc_A335
                cmp     al, 8
                jz      short loc_A341
                cmp     al, 9
                jnz     short loc_A2BC
                mov     al, ss:CARPOS
                or      al, 0F8h
                neg     al
OUTT            endp


; =============== S U B R O U T I N E =======================================


TAB             proc near               ; ...
                push    cx
                mov     cl, al
                mov     ch, 0
                jcxz    short loc_A333

loc_A32C:                               ; ...
                mov     al, 20h ; ' '
                call    OUTT
                loop    loc_A32C

loc_A333:                               ; ...
                pop     cx
                retn
TAB             endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR OUTT

loc_A335:                               ; ...
                mov     ss:CARPOS, 0
                jmp     loc_A2BC
; END OF FUNCTION CHUNK FOR OUTT
; [00000003 BYTES: COLLAPSED FUNCTION j_OUTT. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR OUTT

loc_A341:                               ; ...
                dec     ss:CARPOS
                jmp     loc_A2BC
; END OF FUNCTION CHUNK FOR OUTT

; =============== S U B R O U T I N E =======================================


BUFOUT          proc near               ; ...
                cmp     al, 20h ; ' '
                jnb     short j_OUTT
                cmp     al, 9
                jz      short j_OUTT
                cmp     al, 15h
                jz      short CTRLU
                cmp     al, 14h
                jz      short CTRLU
                push    ax
                mov     al, 5Eh ; '^'
                call    OUTT
                pop     ax
                or      al, 40h

CTRLU:                                  ; ...
                call    OUTT

BUFOUT_RETN:                            ; ...
                retn
BUFOUT          endp

; ---------------------------------------------------------------------------

$STD_AUX_INPUT:                         ; ...
                mov     al, 1
                call    STATCHK
                mov     bx, 3
                call    GET_IO_SFT
                jb      short BUFOUT_RETN
                jmp     short TAISTRT
; ---------------------------------------------------------------------------

AUXILP:                                 ; ...
                call    SPOOLINT

TAISTRT:                                ; ...
                mov     ah, 1
                call    IOFUNC
                jz      short AUXILP
                xor     ah, ah
                call    IOFUNC
                retn
; ---------------------------------------------------------------------------

$STD_AUX_OUTPUT:                        ; ...
                push    bx
                mov     bx, 3
                jmp     short SENDOUT
; ---------------------------------------------------------------------------

$STD_PRINTER_OUTPUT:                    ; ...
                push    bx
                mov     bx, 4

SENDOUT:                                ; ...
                mov     al, dl
                push    ax
                mov     al, 0
                call    STATCHK
                pop     ax
                push    ds
                push    si
; START OF FUNCTION CHUNK FOR OUTT

loc_A39A:                               ; ...
                call    RAWOUT2

loc_A39D:                               ; ...
                pop     si
                pop     ds
                pop     bx

SCIS_RETN:                              ; ...
                retn
; END OF FUNCTION CHUNK FOR OUTT
; ---------------------------------------------------------------------------

$STD_CON_INPUT_STATUS:                  ; ...
                mov     al, 1
                call    STATCHK
                mov     al, 0
                jz      short SCIS_RETN
                or      al, 0FFh
                retn
; ---------------------------------------------------------------------------

$STD_CON_INPUT_FLUSH:                   ; ...
                push    ax
                push    dx
                xor     bx, bx
                call    GET_IO_SFT
                jb      short BADJFNCON
                mov     ah, 4
                call    IOFUNC

BADJFNCON:                              ; ...
                pop     dx
                pop     ax
                mov     ah, al
                cmp     al, 1
                jz      short REDISPJ
                cmp     al, 6
                jz      short REDISPJ
                cmp     al, 7
                jz      short REDISPJ
                cmp     al, 8
                jz      short REDISPJ
                cmp     al, 0Ah
                jz      short REDISPJ
                mov     al, 0
                retn
; ---------------------------------------------------------------------------

REDISPJ:                                ; ...
                cli
                jmp     REDISP
; ---------------------------------------------------------------------------

$GET_FCB_POSITION:                      ; ...
                mov     al, 1           ; error_invalid_function

_fcb_err:                               ; ...
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

$FCB_DELETE:                            ; ...
                mov     di, offset OPENBUF
                call    TransFCB
                jb      short BadPath
                push    ss
                pop     ds
                call    DOS_DELETE
                jb      short BadPath

GetFCBBye:                              ; ...
                jmp     NO_OP           ; jmp FCB_RET_OK
; ---------------------------------------------------------------------------

BadPath:                                ; ...
                jmp     short _fcb_err
; ---------------------------------------------------------------------------

$GET_FCB_FILE_LENGTH:                   ; ...
                mov     al, 1           ; error_invalid_function
                jmp     short BadPath
; ---------------------------------------------------------------------------

GoodRet:                                ; ...
                jmp     short GetFCBBye
; ---------------------------------------------------------------------------

$FCB_CLOSE:                             ; ...
                xor     al, al
                call    GetExtended
                jz      short NoAttr
                mov     al, [si-1]

NoAttr:                                 ; ...
                mov     ss:ATTRIB, al
                call    SFTFromFCB
                jb      short GoodRet
                mov     al, es:[di+4]
                xor     ah, ah
                push    ax
                mov     al, ss:ATTRIB
                mov     es:[di+4], al
                mov     ax, [si+14h]
                mov     es:[di+0Fh], ax
                mov     ax, [si+16h]
                mov     es:[di+0Dh], ax
                mov     ax, [si+10h]
                mov     es:[di+11h], ax
                mov     ax, [si+12h]
                mov     es:[di+13h], ax
                or      word ptr es:[di+5], 4000h
                push    ss
                pop     ds
                call    DOS_CLOSE
                les     di, ds:THISSFT
                pop     cx
                mov     es:[di+4], cl
                pushf
                cmp     word ptr es:[di], 0
                jnz     short CloseOK
                push    ax
                mov     al, 4Dh ; 'M'
                call    BlastSFT
                pop     ax

CloseOK:                                ; ...
                popf
                jnb     short GoodRet
                cmp     al, 6
                jz      short GoodRet
                mov     al, 2

fcb_close_err:                          ; ...
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

$FCB_RENAME:                            ; ...
                call    GetExtended
                jz      short $GET_FCB_FILE_LENGTH
                test    byte ptr [si-1], 8
                jz      short $GET_FCB_FILE_LENGTH
                push    dx
                mov     al, [si]
                add     si, 10h
                mov     di, offset RENBUF
                push    word ptr [si]
                push    ds
                push    si
                mov     [si], al
                mov     dx, si
                call    TransFCB
                pop     si
                pop     ds
                pop     word ptr [si]
                pop     dx
                jb      short fb_rename_err
                mov     si, ss:WFP_START
                mov     ss:REN_WFP, si
                mov     di, offset OPENBUF
                call    TransFCB
                jb      short fb_rename_err
                mov     cs:PATHNAMELEN, 67 ; DIRSTRLEN = 67
                call    DOS_RENAME
                jb      short fb_rename_err
                jmp     NO_OP
; ---------------------------------------------------------------------------

fb_rename_err:                          ; ...
                jmp     short fcb_close_err

; =============== S U B R O U T I N E =======================================


SaveFCBInfo     proc near               ; ...
                les     di, ss:THISSFT
                call    IsSFTNet
                jz      short SaveNoShare
                mov     ax, es:[di+0Bh]
                mov     [si+1Ch], ax
                mov     bl, 80h
                jmp     short SaveSFN
; ---------------------------------------------------------------------------

SaveNoShare:                            ; ...
                test    byte ptr es:[di+5], 80h
                jnz     short SaveNoShareDev
                mov     ax, es:[di+1Bh]
                mov     [si+1Dh], ax
                mov     ax, es:[di+1Dh]
                mov     bl, es:[di+4]
                mov     bh, bl
                ror     bl, 1
                shl     bh, 1
                or      bl, bh
                and     bl, 0C0h
                or      al, bl
                mov     [si+18h], al
                mov     al, es:[di+1Fh]
                mov     [si+1Fh], al
                mov     ax, es:[di+2Bh] ; [es:di+SF_ENTRY.sf_chain] ; .sf_chain ! (MSDOS 6.22)
                                        ; first cluster (32 bit) !?
                mov     [si+1Bh], ax    ; [SI+fcb_nsl_firclus]
                mov     bl, 0

SetFCBBits:                             ; ...
                mov     ax, es:[di+5]
                and     al, 0C0h
                or      al, es:[di+2]
                mov     [si+1Ah], al
                or      bl, bl
                jz      short SaveNoSFN
                jmp     short SaveSFN
; ---------------------------------------------------------------------------

SaveNoShareDev:                         ; ...
                mov     ax, es:[di+7]
                mov     [si+1Ah], ax
                mov     ax, es:[di+9]
                mov     [si+1Ch], ax
                mov     bl, 40h
                jmp     short SetFCBBits
; ---------------------------------------------------------------------------

SaveSFN:                                ; ...
                lea     ax, [di-6]
                sub     ax, ss:40h
                push    bx
                mov     bl, 59          ; SF_ENTRY.size
                div     bl
                mov     [si+18h], al
                pop     bx

SaveNoSFN:                              ; ...
                mov     ax, es:[di+5]
                and     al, 3Fh
                or      al, bl
                mov     [si+19h], al
                mov     ax, ss:10h
                inc     ax
                mov     es:[di+15h], ax
                jnz     short SimpleStuff
                mov     bx, 15h
                call    ResetLRU

SimpleStuff:                            ; ...
                mov     ss:FCBLRU, ax
                retn
SaveFCBInfo     endp


; =============== S U B R O U T I N E =======================================


ResetLRU        proc near               ; ...
                mov     ax, 8000h
                push    es
                push    di
                les     di, ss:SFTFCB
                mov     cx, es:[di+4]
                lea     di, [di+6]

ovScan:                                 ; ...
                sub     es:[bx+di], ax
                ja      short ovLoop
                mov     es:[bx+di], ax

ovLoop:                                 ; ...
                add     di, 59          ; SF_ENTRY.size
                loop    ovScan
                pop     di
                pop     es
                mov     es:[bx+di], ax
                retn
ResetLRU        endp


; =============== S U B R O U T I N E =======================================


LRUFCB          proc near               ; ...
                push    es
                call    save_world
                mov     ds, cs:DosDSeg
                or      al, al
                jnz     short lru1
                mov     di, word ptr ds:LocalSFT
                or      di, word ptr ds:LocalSFT+2
                jz      short lru1
                les     di, ds:LocalSFT

gotlocalSFT:                            ; ...
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:THISSFT+2, es
                clc
                jmp     LRUDone
; ---------------------------------------------------------------------------

lru1:                                   ; ...
                les     di, ds:SFTFCB
                mov     cx, es:[di+4]
                lea     di, [di+6]
                mov     bx, 0FFFFh
                mov     si, bx
                mov     dx, bx
                mov     bp, bx

findSFT:                                ; ...
                or      word ptr es:[di], 0
                jz      short gotSFT
                cmp     word ptr es:[di], 0FFFFh
                jz      short gotSFT
                test    word ptr es:[di+5], 8000h
                jnz     short lru5

hackpoint:                              ; ...
                mov     word ptr ds:LocalSFT, di
                mov     word ptr ds:LocalSFT+2, es
                or      al, al
                jz      short gotlocalSFT
                cmp     es:[di+15h], bx
                jnb     short lru4
                mov     bx, es:[di+15h]
                mov     si, di

lru4:                                   ; ...
                add     di, 59
                loop    findSFT
                mov     di, si
                cmp     si, 0FFFFh
                jnz     short gotSFT
                mov     di, bp
                cmp     bp, 0FFFFh
                jnz     short gotnetSFT
                jmp     short errorbadSFT
; ---------------------------------------------------------------------------

lru5:                                   ; ...
                cmp     es:[di+15h], dx
                jnb     short lru4
                mov     dx, es:[di+15h]
                mov     bp, di
                jmp     short lru4
; ---------------------------------------------------------------------------

gotSFT:                                 ; ...
                or      al, al
                jz      short hackpoint
                mov     ax, es
                cmp     word ptr ds:LocalSFT, di
                jnz     short notinvalid
                cmp     word ptr ds:LocalSFT+2, ax
                jz      short zerolocalSFT

notinvalid:                             ; ...
                jmp     gotlocalSFT
; ---------------------------------------------------------------------------

zerolocalSFT:                           ; ...
                xor     ax, ax
                mov     word ptr ds:LocalSFT, ax
                mov     word ptr ds:LocalSFT+2, ax
                jmp     gotlocalSFT
; ---------------------------------------------------------------------------

gotnetSFT:                              ; ...
                or      al, al
                jnz     short closenet
                mov     word ptr ds:LocalSFT, di
                mov     word ptr ds:LocalSFT+2, es

closenet:                               ; ...
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:THISSFT+2, es

LRUClose:                               ; ...
                cmp     word ptr es:[di], 0
                jz      short LRUDone
                call    DOS_CLOSE
                jnb     short LRUClose
                cmp     al, 6           ; error_invalid_handle
                jz      short LRUClose

errorbadSFT:                            ; ...
                stc
                jmp     short LRUDead
; ---------------------------------------------------------------------------

LRUDone:                                ; ...
                xor     al, al
                call    BlastSFT

LRUDead:                                ; ...
                call    restore_world
                pop     es
                mov     es, cs:DosDSeg
                les     di, es:THISSFT
                jb      short LruFCB_err
                retn
; ---------------------------------------------------------------------------

LruFCB_err:                             ; ...
                mov     al, 23h         ; error_FCB_unavailable
                retn
LRUFCB          endp


; =============== S U B R O U T I N E =======================================


RegenCopyName   proc near               ; ...
                lodsb
                call    UCase
                stosb
                loop    RegenCopyName
                retn
RegenCopyName   endp


; =============== S U B R O U T I N E =======================================


FCBRegen        proc near               ; ...
                mov     al, [si+19h]
                test    al, 80h
                jz      short RegenNoSharing
                mov     ax, 1100h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
                                        ; Return: AL = 00h  not installed, OK to install
                                        ; 01h  not installed, not OK to install
                                        ; FFh  installed
                or      al, al
                jz      short RegenDead
                mov     ax, ss:USER_IN_AX
                cmp     ah, 10h
                jz      short RegenDead
                call    FCBHardErr

RegenDead:                              ; ...
                stc

FCBRegen_retn:                          ; ...
                retn
; ---------------------------------------------------------------------------

RegenNoSharing:                         ; ...
                push    ax
                mov     al, 0
                call    LRUFCB
                pop     ax
                jb      short FCBRegen_retn
                mov     word ptr es:[di+2], 8002h
                and     al, 3Fh
                cbw
                or      ax, 4000h
                mov     cl, [si+1Ah]
                mov     ch, cl
                and     ch, 0C0h
                or      al, ch
                and     cl, 0Fh
                mov     es:[di+2], cl
                mov     es:[di+5], ax
                mov     ax, ss:PROC_ID
                mov     es:[di+31h], ax
                push    ds
                push    si
                push    es
                push    di
                push    ss
                pop     es
                mov     di, offset NAME1
                mov     cx, 8
                inc     si
                call    RegenCopyName
                push    ss
                pop     ds
                mov     ds:ATTRIB, 16h
                call    DEVNAME
                pop     di
                pop     es
                pop     si
                pop     ds
                jb      short RegenFileNoSharing
                mov     es:[di+5], bh
                mov     byte ptr es:[di+4], 0
                lds     si, ss:DEVPT
                mov     es:[di+7], si
                mov     word ptr es:[di+9], ds
                retn
; ---------------------------------------------------------------------------

RegenDeadJ:                             ; ...
                pop     si
                pop     ds
                jmp     short RegenDead
; ---------------------------------------------------------------------------

RegenFileNoSharing:                     ; ...
                mov     ax, es:[di+5]
                and     ax, 3Fh
                push    ds
                push    si
                call    FIND_DPB
                mov     es:[di+7], si
                mov     word ptr es:[di+9], ds
                jb      short RegenDeadJ
                pop     si
                pop     ds
                mov     ax, [si+1Dh]
                mov     es:[di+1Bh], ax
                mov     al, [si+18h]
                and     al, 0C0h
                mov     ah, al
                rol     ah, 1
                shr     al, 1
                or      al, ah
                and     al, 3Fh
                mov     es:[di+4], al
                mov     al, [si+18h]
                and     al, 3Fh
                sub     ah, ah
                mov     es:[di+1Dh], ax
                mov     ax, [si+1Bh]
                mov     es:[di+2Bh], ax
                mov     es:[di+35h], ax
                xor     ax, ax
                mov     es:[di+2Dh], ax
                mov     es:[di+37h], ax
                mov     al, [si+1Fh]
                mov     es:[di+1Fh], al
                inc     word ptr es:[di]
                call    set_sftfcb_entry
                lea     si, [si+1]
                lea     di, [di+20h]
                mov     cx, 11
                call    RegenCopyName
                clc
                retn
FCBRegen        endp


; =============== S U B R O U T I N E =======================================


BlastSFT        proc near               ; ...
                call    SFT_FREE
                push    di
                mov     cx, 59
                rep stosb
                pop     di
                mov     word ptr es:[di], 0
                sub     ax, ax
                mov     es:[di+15h], ax
                dec     ax
                mov     es:[di+17h], ax
                retn
BlastSFT        endp


; =============== S U B R O U T I N E =======================================


CheckFCB        proc near               ; ...
                test    byte ptr [si+19h], 0C0h
                jz      short BadSFT
                les     di, ss:SFTFCB
                cmp     es:[di+4], al
                jb      short BadSFT
                mov     bl, 59          ; SF_ENTRY.size
                mul     bl
                lea     di, [di+6]      ; [DI+SFT.SFTable]
                add     di, ax
                mov     ax, ss:PROC_ID
                cmp     es:[di+31h], ax
                jnz     short BadSFT
                cmp     word ptr es:[di], 0
                jz      short BadSFT
                mov     al, [si+19h]
                test    al, 80h
                jz      short CheckNoShare
                push    ax
                and     al, 0C0h
                cmp     al, 0C0h
                pop     ax
                jnz     short CheckNet

CheckD:                                 ; ...
                and     al, 3Fh
                mov     ah, es:[di+5]
                and     ah, 3Fh
                cmp     ah, al
                jnz     short BadSFT

CheckD_retn:                            ; ...
                retn
; ---------------------------------------------------------------------------

BadSFT:                                 ; ...
                stc
                retn
; ---------------------------------------------------------------------------

CheckNet:                               ; ...
                mov     ax, [si+1Ch]
                cmp     ax, es:[di+0Bh]
                jnz     short BadSFT
                retn
; ---------------------------------------------------------------------------

CheckNoShare:                           ; ...
                mov     bx, [si+1Ah]
                cmp     bx, es:[di+7]
                jnz     short BadSFT
                mov     bx, [si+1Ch]
                cmp     bx, es:[di+9]
                jnz     short BadSFT
                jmp     short CheckD
CheckFCB        endp


; =============== S U B R O U T I N E =======================================


SFTFromFCB      proc near               ; ...
                push    ax
                push    bx
                mov     al, [si+18h]
                call    CheckFCB
                pop     bx
                pop     ax
                mov     word ptr ss:THISSFT, di
                mov     word ptr ss:THISSFT+2, es
                jnb     short Set_SFT
                pusha
                push    ds
                push    es
                call    FCBRegen
                pop     es
                pop     ds
                popa
                mov     ax, ss:EXTERR
                jb      short CheckD_retn

Set_SFT:                                ; ...
                les     di, ss:THISSFT
                push    ss:PROC_ID
                pop     word ptr es:[di+31h]
                retn
SFTFromFCB      endp


; =============== S U B R O U T I N E =======================================


FCBHardErr      proc near               ; ...
                mov     es, cs:DosDSeg
                mov     ax, 23h         ; error_FCB_unavailable
                mov     es:ALLOWED, 8   ; Allowed_FAIL
                les     bp, es:THISDPB
                mov     di, 1           ; Fake some registers
                mov     cx, di
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short fcbharderr_fat32
                mov     es:HIGH_SECTOR, 0
                mov     dx, es:[bp+0Bh] ; [ES:BP+DPB.FIRST_SECTOR]
                jmp     short fcbharderr_fat
; ---------------------------------------------------------------------------

fcbharderr_fat32:                       ; ...
                mov     dx, es:[bp+2Bh] ; [es:bp+DPB.FCLUS_FSECTOR+2]
                mov     es:HIGH_SECTOR, dx
                mov     dx, es:[bp+29h] ; [es:bp+DPB.FCLUS_FSECTOR]

fcbharderr_fat:                         ; ...
                call    HARDERR
                stc
                retn
FCBHardErr      endp


; =============== S U B R O U T I N E =======================================


GetExtended     proc near               ; ...
                mov     si, dx
                cmp     byte ptr [si], 0FFh
                jnz     short GetBye
                add     si, 7

GetBye:                                 ; ...
                cmp     si, dx
                retn
GetExtended     endp

; ---------------------------------------------------------------------------

$FCB_OPEN:                              ; ...
                mov     ax, 2
                mov     cx, offset DOS_OPEN

DoAccess:                               ; ...
                push    ds
                push    dx
                push    cx
                push    ax
                mov     di, offset OPENBUF
                call    TransFCB
                pop     ax
                pop     cx
                pop     dx
                pop     ds
                jnb     short FindFCB

FCBOpenErr:                             ; ...
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

FindFCB:                                ; ...
                call    GetExtended
                push    ax
                mov     al, 1
                call    LRUFCB
                pop     ax
                jb      short HardMessage
                mov     word ptr es:[di+2], 8000h
                push    ds
                push    si
                push    bx
                mov     si, cx
                push    ss
                pop     ds
                call    si
                pop     bx
                pop     si
                pop     ds
                les     di, ss:THISSFT
                jnb     short FCBOK

failopen:                               ; ...
                push    ax
                mov     al, 52h ; 'R'   ; clear out field (free sft)
                call    BlastSFT
                pop     ax
                cmp     ax, 4           ; error_too_many_open_files
                jz      short HardMessage
                cmp     ax, 24h         ; error_sharing_buffer_exceeded
                jnz     short DeadFCB

HardMessage:                            ; ...
                push    ax
                call    FCBHardErr
                pop     ax

DeadFCB:                                ; ...
                jmp     short FCBOpenErr
; ---------------------------------------------------------------------------

FCBOK:                                  ; ...
                call    IsSFTNet
                jnz     short FCBOK2
                mov     word ptr ss:LocalSFT, di
                mov     word ptr ss:LocalSFT+2, es
                test    byte ptr es:[di+5], 80h ; [es:di+SFTENTRY.sf_flags],
                                        ; devid_device
                jnz     short FCBOK2
                test    byte ptr es:[di+4], 8 ; [es:di+SFTENTRY.sf_attr],
                                        ; attr_volume_id
                jnz     short FCBOK2
                mov     ax, 1           ; error_invalid_function
                jmp     short failopen
; ---------------------------------------------------------------------------

FCBOK2:                                 ; ...
                inc     word ptr es:[di]
                call    set_sftfcb_entry
                call    SaveFCBInfo
                test    byte ptr es:[di+5], 80h
                jnz     short FCBNoDrive
                mov     al, [si]
                call    GETTHISDRV
                inc     al
                mov     [si], al

FCBNoDrive:                             ; ...
                mov     word ptr [si+0Eh], 80h
                mov     ax, es:[di+0Dh]
                mov     [si+16h], ax
                mov     ax, es:[di+0Fh]
                mov     [si+14h], ax
                mov     ax, es:[di+11h]
                mov     [si+10h], ax
                mov     ax, es:[di+13h]
                mov     [si+12h], ax
                xor     ax, ax
                mov     [si+0Ch], ax
                les     di, ss:SFTFCB
                mov     ah, es:[di+4]

OpenScan:                               ; ...
                cmp     al, [si+18h]
                jz      short SkipCheck
                push    ax
                call    CheckFCB
                pop     ax
                jnb     short OpenFound

SkipCheck:                              ; ...
                inc     al
                cmp     al, ah
                jnz     short OpenScan

OpenDone:                               ; ...
                xor     al, al
                retn
; ---------------------------------------------------------------------------

OpenFound:                              ; ...
                mov     [si+18h], al
                inc     word ptr es:[di]
                call    set_sftfcb_entry
                mov     ax, ss:FCBLRU
                mov     es:[di+15h], ax
                push    ss
                pop     ds
                les     di, ds:THISSFT
                dec     word ptr es:[di]
                mov     al, 43h ; 'C'
                call    BlastSFT
                jmp     short OpenDone
; ---------------------------------------------------------------------------

$FCB_CREATE:                            ; ...
                mov     cx, offset DOS_CREATE
                xor     ax, ax
                call    GetExtended
                jz      DoAccess
                mov     al, [si-1]
                jmp     DoAccess
; ---------------------------------------------------------------------------

$FCB_RANDOM_WRITE_BLOCK:                ; ...
                mov     al, 1
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

$FCB_RANDOM_READ_BLOCK:                 ; ...
                jmp     short $FCB_RANDOM_WRITE_BLOCK
; ---------------------------------------------------------------------------

$FCB_SEQ_READ:                          ; ...
                jmp     short $FCB_RANDOM_WRITE_BLOCK
; ---------------------------------------------------------------------------

$FCB_SEQ_WRITE:                         ; ...
                jmp     short $FCB_RANDOM_WRITE_BLOCK
; ---------------------------------------------------------------------------

$FCB_RANDOM_READ:                       ; ...
                jmp     short $FCB_RANDOM_WRITE_BLOCK
; ---------------------------------------------------------------------------

$FCB_RANDOM_WRITE:                      ; ...
                jmp     short $FCB_RANDOM_WRITE_BLOCK
; ---------------------------------------------------------------------------

$DIR_SEARCH_FIRST:                      ; ...
                mov     word ptr ss:THISFCB, dx
                mov     word ptr ss:THISFCB+2, ds
                mov     si, dx
                cmp     byte ptr [si], 0FFh
                jnz     short NORMFCB4
                add     si, 7

NORMFCB4:                               ; ...
                push    word ptr [si]
                push    ss
                pop     es
                mov     di, offset OPENBUF
                call    TransFCB
                jnb     short SearchIt
                pop     bx

dcf_errj:                               ; ...
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

SearchIt:                               ; ...
                push    ss
                pop     ds
                push    large [ds:DMAADD]
                mov     word ptr ds:DMAADD, offset SEARCHBUF
                mov     word ptr ds:DMAADD+2, ds
                call    DOS_SEARCH_FIRST
                pop     large [ds:DMAADD]
                jnb     short SearchSet
                pop     bx
                jmp     short dcf_errj
; ---------------------------------------------------------------------------

SearchSet:                              ; ...
                mov     si, offset SEARCHBUF
                les     di, ds:THISFCB
                test    ds:EXTFCB, 0FFh
                jz      short NORMFCB1
                add     di, 7

NORMFCB1:                               ; ...
                pop     bx
                or      bl, bl
                jnz     short SearchDrv
                mov     bl, ds:CURDRV
                inc     bl

SearchDrv:                              ; ...
                lodsb
                xchg    al, bl
                inc     di
                mov     cx, 0Ah
                rep movsw
                xchg    al, bl
                stosb
                les     di, ds:DMAADD
                test    ds:EXTFCB, 0FFh
                jz      short NORMFCB2
                mov     al, 0FFh
                stosb
                inc     al
                mov     cx, 5
                rep stosb
                mov     al, ds:SATTRIB
                stosb

NORMFCB2:                               ; ...
                mov     al, bl
                stosb
                mov     cx, 16
                rep movsw
                jmp     NO_OP
; ---------------------------------------------------------------------------

$DIR_SEARCH_NEXT:                       ; ...
                mov     word ptr ss:THISFCB, dx
                mov     word ptr ss:THISFCB+2, ds
                mov     ss:SATTRIB, 0
                mov     ss:EXTFCB, 0
                push    ss
                pop     es
                mov     di, offset SEARCHBUF
                mov     si, dx
                cmp     byte ptr [si], 0FFh
                jnz     short NORMFCB6
                add     si, 6
                lodsb
                mov     ss:SATTRIB, al
                dec     ss:EXTFCB

NORMFCB6:                               ; ...
                lodsb
                push    ax
                mov     al, [si+14h]
                stosb
                mov     cx, 10
                rep movsw
                push    ss
                pop     ds
                push    large [ds:DMAADD]
                mov     word ptr ds:DMAADD, offset SEARCHBUF
                mov     word ptr ds:DMAADD+2, ds
                call    DOS_SEARCH_NEXT
                pop     large [ds:DMAADD]
                jb      short SearchNoMore
                jmp     SearchSet
; ---------------------------------------------------------------------------

SearchNoMore:                           ; ...
                les     di, ds:THISFCB
                test    ds:EXTFCB, 0FFh
                jz      short NORMFCB8
                add     di, 7

NORMFCB8:                               ; ...
                pop     bx
                mov     es:[di], bl
                jmp     FCB_RET_ERR
; ---------------------------------------------------------------------------

$FIND_FIRST:                            ; ...
                mov     si, dx
                mov     ss:SATTRIB, cl
                mov     di, offset OPENBUF
                call    TransPathSet
                jnb     short Find_it
                mov     al, 3

FF_err:                                 ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

Find_it:                                ; ...
                push    ss
                pop     ds
                push    large [ds:DMAADD]
                mov     word ptr ds:DMAADD, offset SEARCHBUF
                mov     word ptr ds:DMAADD+2, ds
                call    DOS_SEARCH_FIRST
                pop     large [ds:DMAADD]
                jnb     short FindSet

FF_errj:                                ; ...
                jmp     short FF_err
; ---------------------------------------------------------------------------

FindSet:                                ; ...
                mov     si, offset SEARCHBUF
                les     di, ds:DMAADD
                mov     cx, 21
                rep movsb
                push    si
                mov     al, [si+11]
                stosb
                add     si, 22
                movsw
                movsw
                inc     si
                inc     si
                movsw
                movsw
                pop     si
                call    PackName
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$FIND_NEXT:                             ; ...
                push    ss
                pop     es
                mov     di, offset SEARCHBUF
                lds     si, ss:DMAADD
                mov     cx, 21
                rep movsb
                push    ss
                pop     ds
                push    large [ds:DMAADD]
                mov     word ptr ds:DMAADD, offset SEARCHBUF
                mov     word ptr ds:DMAADD+2, ds
                call    DOS_SEARCH_NEXT
                pop     large [ds:DMAADD]
                jnb     short FindSet
                jmp     short FF_errj

; =============== S U B R O U T I N E =======================================


PackName        proc near               ; ...
                mov     cx, 8
                rep movsb

main_kill_tail:                         ; ...
                cmp     byte ptr es:[di-1], 20h ; ' '
                jnz     short find_check_dot
                dec     di
                inc     cx
                cmp     cx, 8
                jb      short main_kill_tail

find_check_dot:                         ; ...
                cmp     word ptr [si], 2020h
                jnz     short got_ext
                cmp     byte ptr [si+2], 20h ; ' '
                jz      short find_done

got_ext:                                ; ...
                mov     al, 2Eh ; '.'
                stosb
                mov     cx, 3
                rep movsb

ext_kill_tail:                          ; ...
                cmp     byte ptr es:[di-1], 20h ; ' '
                jnz     short find_done
                dec     di
                jmp     short ext_kill_tail
; ---------------------------------------------------------------------------

find_done:                              ; ...
                xor     ax, ax
                stosb
                retn
PackName        endp

; ---------------------------------------------------------------------------

$CURRENT_DIR:                           ; ...
                call    ECritDisk
                mov     al, dl
                call    GetVisDrv
                jnb     short CurrentValidate

CurdirErr:                              ; ...
                call    LCritDisk
                push    ds
                mov     ds, cs:DosDSeg
                mov     al, ds:DrvErr
                pop     ds
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

CurrentValidate:                        ; ...
                push    ds
                push    si
                mov     ds, cs:DosDSeg
                mov     ds:NoSetDir, 0
                mov     di, offset OPENBUF
                call    ValidateCDS
                push    es
                push    di
                pop     si
                pop     ds
                pop     di
                pop     es
                jb      short CurdirErr
                add     si, 0           ; [SI+curdir.end]
                add     si, [si+4Fh]
                cmp     byte ptr [si], 5Ch ; '\' ; root or subdirs present?
                jnz     short CurrentCopy
                inc     si

CurrentCopy:                            ; ...
                push    ax
                lodsb
                or      al, al
                jz      short FOK
                cmp     al, 5
                jz      short FCHANGE
                jmp     short FFF
; ---------------------------------------------------------------------------

FCPYNEXT:                               ; ...
                lodsb

FFF:                                    ; ...
                cmp     al, 5Ch ; '\'
                jnz     short FOK
                stosb
                lodsb
                cmp     al, 5
                jnz     short FOK

FCHANGE:                                ; ...
                mov     al, 0E5h

FOK:                                    ; ...
                stosb
                or      al, al
                jnz     short FCPYNEXT
                pop     ax
                xor     al, al
                call    LCritDisk
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

$RMDIR:                                 ; ...
                push    dx
                push    ds
                mov     si, dx
                mov     di, offset OPENBUF
                push    di
                call    TransPathNoSet
                pop     di
                jnb     short rmlset
                pop     ds
                pop     dx
                mov     al, 3           ; error_path_not_found

rmdir_chdir_errj:                       ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

rmlset:                                 ; ...
                cmp     ss:CMETA, 0FFh
                jnz     short rmerr
                push    ss
                pop     es
                xor     al, al

rmloop:                                 ; ...
                call    GetCDSFromDrv
                jb      short rmcont
                call    StrCmp
                jz      short rmerr
                inc     al
                jmp     short rmloop
; ---------------------------------------------------------------------------

rmerr:                                  ; ...
                pop     ds
                pop     dx
                mov     al, 10h         ; error_current_directory

rmdir_chdir_errj2:                      ; ...
                jmp     short rmdir_chdir_errj
; ---------------------------------------------------------------------------

rmcont:                                 ; ...
                pop     ds
                pop     dx
                mov     si, offset DOS_RMDIR
                mov     cs:PATHNAMELEN, 128
                jmp     DoDirCall
; ---------------------------------------------------------------------------

$CHDIR:                                 ; ...
                mov     cs:PATHNAMELEN, 67
                mov     di, offset OPENBUF
                mov     si, dx
                call    TransPath
                jnb     short ChDirCrack

ChDirErrP:                              ; ...
                mov     al, 3

chdir_errj:                             ; ...
                jmp     short rmdir_chdir_errj2
; ---------------------------------------------------------------------------

ChDirCrack:                             ; ...
                cmp     ds:CMETA, 0FFh
                jnz     short ChDirErrP
                les     di, ds:THISCDS
                cmp     di, 0FFFFh
                jz      short ChDirErrP
                call    DOS_CHDIR
                jb      short chdir_errj
                les     di, ds:THISCDS
                test    word ptr es:[di+43h], 2000h ;
                                        ; [ES:DI+curdir.flags],curdir_splice
                mov     dx, ds:DIRSTART_HW
                jz      short GotCDS
                push    es
                push    di
                push    ds:DIRSTART_HW
                push    cx
                call    Get_User_Stack
                mov     di, [si+6]      ; [SI+user_env.user_DX]
                mov     ds, word ptr [si+0Eh] ; [SI+user_env.user_DS]
                mov     si, offset OPENBUF
                xchg    si, di
                xor     al, al
                push    di
                call    TransPathNoSet
                pop     si
                les     di, ds:THISCDS
                mov     dword ptr es:[di+49h], 0FFFFFFFFh ; [ES:DI+curdir.ID]
                pop     cx
                pop     dx
                pop     di
                pop     es

GotCDS:                                 ; ...
                call    Check_PathLen
                ja      short ChDirErrP
                test    word ptr es:[di+43h], 8000h ; [ES:DI+curdir.flags],
                                        ; curdir_isnet
                jnz     short SkipRecency
                call    test_remote_disk_flag
                jnz     short SkipRecency
                test    word ptr es:[di+43h], 2000h ; [ES:DI+curdir.flags],
                                        ; curdir_splice
                jz      short setdirclus
                mov     cx, 0FFFFh
                mov     dx, cx

setdirclus:                             ; ...
                mov     es:[di+49h], cx ; [ES:DI+curdir.ID]
                mov     es:[di+4Bh], dx ; [ES:DI+curdir.ID+2]
                les     di, ds:THISCDS

SkipRecency:                            ; ...
                call    FStrCpy
                xor     al, al
; START OF FUNCTION CHUNK FOR $CHMOD

loc_AC65:                               ; ...
                jmp     SYS_RET_OK
; END OF FUNCTION CHUNK FOR $CHMOD
; ---------------------------------------------------------------------------

$MKDIR:                                 ; ...
                mov     cs:PATHNAMELEN, 67
; START OF FUNCTION CHUNK FOR $CHMOD

mkdir_x:                                ; ...
                mov     si, offset DOS_MKDIR

DoDirCall:                              ; ...
                mov     di, offset OPENBUF
                push    si
                mov     si, dx
                call    TransPath
                pop     si
                jnb     short loc_AC83

loc_AC7E:                               ; ...
                mov     al, 3

loc_AC80:                               ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_AC83:                               ; ...
                cmp     ss:CMETA, 0FFh
                jnz     short loc_AC7E
                push    si
                call    Check_PathLen
                pop     si
                jbe     short loc_AC96
                mov     al, 5
                jmp     short loc_AC80
; ---------------------------------------------------------------------------

loc_AC96:                               ; ...
                call    si
                jb      short loc_AC80
                jmp     short loc_AC65
; END OF FUNCTION CHUNK FOR $CHMOD

; =============== S U B R O U T I N E =======================================


Check_PathLen   proc near               ; ...
                mov     si, ss:WFP_START
Check_PathLen   endp


; =============== S U B R O U T I N E =======================================


Check_PathLen2  proc near               ; ...
                push    ss
                pop     ds
                push    cx
                push    dx
                call    DStrLen
                cmp     cx, cs:PATHNAMELEN
                pop     dx
                pop     cx
                retn
Check_PathLen2  endp

; ---------------------------------------------------------------------------
IOCTLJMPTABLE   dw offset ioctl_getset_data ; ...
                dw offset ioctl_getset_data
                dw offset ioctl_control_string
                dw offset ioctl_control_string
                dw offset ioctl_get_dev
                dw offset ioctl_get_dev
                dw offset ioctl_status
                dw offset ioctl_status
                dw offset ioctl_rem_media
                dw offset ioctl_drive_attr
                dw offset ioctl_handle_redir
                dw offset Set_Retry_Parameters
                dw offset GENERICIOCTLHANDLE
                dw offset GENERICIOCTL
                dw offset ioctl_drive_owner
                dw offset ioctl_drive_owner
                dw offset GENERICIOCTLHANDLE ; query_handle_support
                dw offset GENERICIOCTL  ; query_device_support

; =============== S U B R O U T I N E =======================================


$IOCTL          proc near               ; ...

; FUNCTION CHUNK AT 43B4 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 43BD SIZE 00000013 BYTES
; FUNCTION CHUNK AT 68EB SIZE 0000004A BYTES

                mov     si, ds
                push    ss
                pop     ds
                cmp     al, 11h
                ja      short ioctl_bad_funj2
                movzx   di, al
                shl     di, 1
                jmp     cs:IOCTLJMPTABLE[di]
; ---------------------------------------------------------------------------

ioctl_bad_funj2:                        ; ...
                jmp     ioctl_bad_fun
; ---------------------------------------------------------------------------

ioctl_getset_data:                      ; ...
                call    SFFromHandle
                jnb     short ioctl_check_permissions

ioctl_bad_handle:                       ; ...
                mov     al, 6

ioctl_error:                            ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

ioctl_check_permissions:                ; ...
                cmp     al, 0
                mov     al, es:[di+5]
                jz      short ioctl_read
                or      dh, dh
                jz      short ioctl_check_device
                mov     al, 0Dh
                jmp     short ioctl_error
; ---------------------------------------------------------------------------

ioctl_check_device:                     ; ...
                test    al, 80h
                jz      short ioctl_bad_funj2
                or      dl, 80h
                mov     ds:EXTERR_LOCUS, 4
                mov     es:[di+5], dl

ioctl_ok:                               ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

ioctl_read:                             ; ...
                mov     ds:EXTERR_LOCUS, 2
                xor     ah, ah
                test    al, 80h
                jz      short ioctl_no_high
                mov     ds:EXTERR_LOCUS, 4
                les     di, es:[di+7]
                mov     ah, es:[di+5]

ioctl_no_high:                          ; ...
                mov     dx, ax
                call    Get_User_Stack
                mov     [si+6], dx

ioctl_ok_j:                             ; ...
                jmp     short ioctl_ok
; ---------------------------------------------------------------------------

ioctl_control_string:                   ; ...
                call    SFFromHandle
                jb      short ioctl_bad_handle
                test    byte ptr es:[di+5], 80h
                jz      short ioctl_bad_funj2
                mov     ds:EXTERR_LOCUS, 4
                les     di, es:[di+7]
                xor     bl, bl
                jmp     ioctl_do_string
; ---------------------------------------------------------------------------

ioctl_status:                           ; ...
                mov     ah, 1
                sub     al, 6
                jz      short ioctl_get_status
                mov     ah, 3

ioctl_get_status:                       ; ...
                push    ax
                call    GET_IO_SFT
                pop     ax
                jnb     short DO_IOFUNC
                jmp     short ioctl_bad_handle
; ---------------------------------------------------------------------------

DO_IOFUNC:                              ; ...
                call    IOFUNC
                mov     ah, al
                mov     al, 0FFh
                jnz     short ioctl_status_ret
                inc     al

ioctl_status_ret:                       ; ...
                jmp     short ioctl_ok_j
; ---------------------------------------------------------------------------

Set_Retry_Parameters:                   ; ...
                mov     ds:RetryLoop, cx
                or      dx, dx
                jz      ioctl_bad_fun
                mov     ds:RetryCount, dx
                jmp     short ioctl_status_ret
; ---------------------------------------------------------------------------
IOCTL_drvnum:                           ; ...
                db 0
; ---------------------------------------------------------------------------

GENERICIOCTLHANDLE:                     ; ...
                call    SFFromHandle
                jb      ioctl_bad_handle_j
                test    byte ptr es:[di+6], 80h ; [ES:DI+SF_ENTRY.sf_flags+1],
                                        ; (sf_isnet>>8)
                jnz     ioctl_bad_fun
                mov     byte ptr cs:IOCTL_drvnum, 0FFh ; invalidate drive number
                                        ; (for extended -lock/unlock- functions)
                mov     ds:EXTERR_LOCUS, 4
                les     di, es:[di+7]
                jmp     short Do_GenIOCTL
; ---------------------------------------------------------------------------

GENERICIOCTL:                           ; ...
                mov     ds:EXTERR_LOCUS, 2
                cmp     ch, 48h         ; category (extended, disk lock/unlock)
                jz      short GenIOCTL_chk_net
                cmp     ch, 8           ; IOC_DC ; category (disk control, normal)
                jnz     ioctl_bad_fun

GenIOCTL_chk_net:                       ; ...
                mov     byte ptr cs:IOCTL_drvnum, bl ; drive number
                call    Check_If_Net
                jnz     ioctl_bad_fun

Do_GenIOCTL:                            ; ...
                cmp     ch, 48h         ; category code 48h for FAT32
                jz      short GenIOCTL_extended ; MSDOS/PCDOS 7 functions (lock/unlock)
                cmp     ch, 8
                jnz     short GenIOCTL_normal ; MSDOS 5-6.22 functions

GenIOCTL_extended:                      ; ...
                cmp     cl, 4Ah         ; LOCK LOGICAL VOLUME
                jz      short GenIOCTL_extd1
                cmp     cl, 6Ah         ; UNLOCK LOGICAL VOLUME
                jnz     short GenIOCTL_normal
                jmp     short GenIOCTL_extd2
; ---------------------------------------------------------------------------

GenIOCTL_extd1:                         ; ...
                test    bh, bh
                jz      short GenIOCTL_extd2
                cmp     bh, 4           ; lock level (0-4)
                jnz     ioctl_bad_fun

GenIOCTL_extd2:                         ; ...
                movzx   bx, byte ptr cs:IOCTL_drvnum
                dec     bx
                cmp     bl, 32          ; logical disk number limit
                jnb     ioctl_bad_fun
                cmp     cl, 4Ah
                jz      short GenIOCTL_lock
                and     ds:drive_flags[bx], 7Fh ; UNLOCK
                jmp     short GenIOCTL_OK
; ---------------------------------------------------------------------------

GenIOCTL_lock:                          ; ...
                or      ds:drive_flags[bx], 80h

GenIOCTL_OK:                            ; ...
                jmp     SYS_RET_OK      ; LOCK
; ---------------------------------------------------------------------------

GenIOCTL_normal:                        ; ...
                cmp     cx, 866h        ; GET_MEDIA_ID
                jz      short GenIOCTL_GSMID
                cmp     cx, 846h        ; SET_MEDIA_ID
                jnz     short GenIOCTL_normal2

GenIOCTL_GSMID:                         ; ...
                push    si
                push    ds
                call    Get_User_Stack
                cmp     byte ptr [si+1], 69h
                jnz     short GenIOCTL_FAT
                pop     ds              ; get/set volume serial number
                push    ds
                lds     si, ds:THISCDS
                lds     si, [si+45h]    ; DPB
                cmp     word ptr [si+0Fh], 0 ; [si+DPB.FAT_SIZE]
                jnz     short GenIOCTL_FAT
                cmp     cl, 46h         ; SET_MEDIA_ID
                jnz     short GenIOCTL_FAT32
                pop     ds
                pop     si
                push    si
                push    ds
                mov     ds, si
                mov     si, dx
                cmp     dword ptr [si+11h], 33544146h ; 'FAT3'   ; 'FAT32   '
                jnz     short GenIOCTL_FAT
                cmp     dword ptr [si+15h], 20202032h ; '2   '
                jnz     short GenIOCTL_FAT

GenIOCTL_FAT32:                         ; ...
                mov     ch, 48h         ; change category code to extended (FAT32 function)

GenIOCTL_FAT:                           ; ...
                pop     ds
                pop     si

GenIOCTL_normal2:                       ; ...
                test    byte ptr es:[di+4], 40h
                jz      short ioctl_bad_fun
                mov     ds:IOCALL_REQFUNC, 13h
                cmp     al, 10h
                jl      short SetIOCtlBlock
                test    byte ptr es:[di+4], 80h
                jz      short ioctl_bad_fun
                mov     ds:IOCALL_REQFUNC, 19h

SetIOCtlBlock:                          ; ...
                push    es
                push    di
                mov     ds:IOCALL, 17h  ; IOCTL_REQ.size ; 23
                mov     ds:IOCALL_REQUNIT, bl
                mov     ds:IOMED, ch    ; [IOCALL+IOCTL_REQ.MAJORFUNCTION]
                mov     byte ptr ds:IOXAD, cl ; [IOCALL+IOCTL_REQ.MINORFUNCTION]
                mov     ds:IOXAD+1, si  ; [IOCALL+IOCTL_REQ.REG_SI]
                mov     ds:IOXAD+3, di  ; [IOCALL+IOCTL_REQ.REG_DI]
                mov     ds:IOSCNT+1, dx ; [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET]
                mov     ds:IOSSEC+1, si ; [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2]
                mov     bx, offset IOCALL
                push    ss
                pop     es
                pop     si
                pop     ds
                jmp     ioctl_do_IO
; ---------------------------------------------------------------------------

ioctl_bad_fun:                          ; ...
                mov     al, 1
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

ioctl_bad_handle_j:                     ; ...
                jmp     ioctl_bad_handle
; ---------------------------------------------------------------------------

ioctl_rem_media:                        ; ...
                push    bx
                xor     bh, bh
                or      bl, bl
                jnz     short ioctl_rm_1
                mov     bl, ss:CURDRV
                inc     bl

ioctl_rm_1:                             ; ...
                dec     bl
                test    ds:drive_flags[bx], 10h
                jz      short ioctl_rm_2
                test    ds:drive_flags[bx], 1
                jz      short ioctl_rm_2
                or      ds:drive_flags[bx], 20h
                and     ds:drive_flags[bx], 0FEh

ioctl_rm_2:                             ; ...
                pop     bx
                call    Check_If_Net
                jnz     short ioctl_bad_fun
                push    bx
                push    es
                les     bx, ss:THISCDS
                mov     bl, es:[bx]     ; drive letter ('A','B','C', ..)
                xor     bh, bh
                test    byte ptr [bx+12C7h], 20h ; [bx+drive_flags-41h]
                jz      short ioctl_rm_3
                and     byte ptr [bx+12C7h], 0DFh
                or      byte ptr [bx+12C7h], 1

ioctl_rm_3:                             ; ...
                pop     es
                pop     bx
                test    byte ptr es:[di+5], 8
                jz      short ioctl_bad_fun
                mov     ss:IOCALL_REQFUNC, 0Fh
                mov     al, 0Dh
                mov     ah, bl
                mov     word ptr ss:IOCALL, ax
                xor     ax, ax
                mov     ss:IOCALL_REQSTAT, ax
                push    es
                pop     ds
                mov     si, di
                push    ss
                pop     es
                mov     bx, offset IOCALL
                push    ds
                push    si
                call    DEVIOCALL2
                pop     si
                pop     ds
                mov     ax, ss:IOCALL_REQSTAT
                and     ax, 200h
                mov     cl, 9
                shr     ax, cl

ioctl_da_ok_j:                          ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

ioctl_drive_attr:                       ; ...
                mov     al, bl
                call    GETTHISDRV
                jb      short ioctl_drv_err
                call    Get_Driver_BL
                jb      short ioctl_drv_err
                mov     dx, 942h
                jnz     short ioctl_drive_attr2 ; NET device
                mov     dx, es:[di+4]

ioctl_drive_attr2:                      ; ...
                mov     bl, al
                les     di, ds:THISCDS
                test    byte ptr es:[di+44h], 80h
                jz      short IOCTLShare
                mov     dx, 1000h

IOCTLShare:                             ; ...
                mov     si, offset OPENBUF
                add     bl, 41h ; 'A'
                mov     [si], bl
                mov     word ptr [si+1], 3Ah ; ':'
                mov     ax, 300h
                clc
                int     2Ah             ; Microsoft Networks - CHECK DIRECT I/O
                                        ; DS:SI -> ASCIZ disk device name (may be full path or only drive
                                        ; specifier--must include the colon)
                                        ; Return: CF clear if absolute disk access allowed
                jnb     short IOCTLLocal
                or      dx, 200h

IOCTLLocal:                             ; ...
                test    byte ptr es:[di+44h], 10h
                jz      short ioctl_set_DX
                or      dx, 8000h

ioctl_set_DX:                           ; ...
                call    Get_User_Stack
                mov     [si+6], dx
                jmp     short ioctl_da_ok_j
; ---------------------------------------------------------------------------

ioctl_drv_err:                          ; ...
                mov     al, 0Fh
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

ioctl_handle_redir:                     ; ...
                call    SFFromHandle
                jnb     short ioctl_got_sft
                jmp     ioctl_bad_handle
; ---------------------------------------------------------------------------

ioctl_got_sft:                          ; ...
                mov     dx, es:[di+5]
                jmp     short ioctl_set_DX
; ---------------------------------------------------------------------------

ioctl_bad_funj4:                        ; ...
                jmp     ioctl_bad_fun
; ---------------------------------------------------------------------------

ioctl_get_dev:                          ; ...
                push    bx
                xor     bh, bh
                or      bl, bl
                jnz     short ioctl_gd_1
                mov     bl, ds:CURDRV
                inc     bl

ioctl_gd_1:                             ; ...
                dec     bl
                test    ds:drive_flags[bx], 50h
                jz      short ioctl_gd_2
                test    ds:drive_flags[bx], 1
                jz      short ioctl_gd_2
                or      ds:drive_flags[bx], 20h
                and     ds:drive_flags[bx], 0FEh

ioctl_gd_2:                             ; ...
                pop     bx
                call    Check_If_Net
                jnz     short ioctl_bad_funj4
                push    bx
                push    es
                les     bx, ds:THISCDS
                mov     bl, es:[bx]     ; drive letter ('A','B','C', ..)
                xor     bh, bh
                test    byte ptr [bx+12C7h], 20h ; [bx+drive_flags-65] ; 65 = 'A'
                                        ; bx = 65 + drive number ('A'=0)
                jz      short ioctl_gd_3
                and     byte ptr [bx+12C7h], 0DFh ; not 20h
                or      byte ptr [bx+12C7h], 1

ioctl_gd_3:                             ; ...
                pop     es
                pop     bx

ioctl_do_string:                        ; ...
                test    byte ptr es:[di+5], 40h
                jz      short ioctl_bad_funj4
                mov     ds:IOCALL_REQFUNC, 3
                test    al, 1
                jz      short ioctl_control_call
                mov     ds:IOCALL_REQFUNC, 0Ch

ioctl_control_call:                     ; ...
                mov     al, 22
                mov     ah, bl
                mov     word ptr ds:IOCALL, ax
                xor     ax, ax
                mov     ds:IOCALL_REQSTAT, ax
                mov     ds:byte_11E09, al
                mov     ds:IOSCNT, cx
                mov     ds:IOXAD, dx
                mov     ds:IOXAD+2, si
                push    es
                pop     ds
                mov     si, di
                push    ss
                pop     es
                mov     bx, offset IOCALL

ioctl_do_IO:                            ; ...
                call    DEVIOCALL2
                test    byte ptr ss:IOCALL_REQSTAT+1, 80h
                jnz     short ioctl_string_err
                mov     ax, ss:IOSCNT
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

ioctl_string_err:                       ; ...
                mov     di, ss:IOCALL_REQSTAT
                and     di, 0FFh
                mov     ax, di
                call    SET_I24_EXTENDED_ERROR
                mov     ax, ss:EXTERR
                jmp     SYS_RET_ERR
$IOCTL          endp


; =============== S U B R O U T I N E =======================================


Get_Driver_BL   proc near               ; ...
                push    ax
                mov     al, bl
                call    GETTHISDRV
                jb      short ioctl_bad_drv
                xor     bl, bl
                mov     ds:EXTERR_LOCUS, 3
                les     di, ds:THISCDS
                test    byte ptr es:[di+44h], 80h
                les     di, es:[di+45h]
                jnz     short got_dev_ptr
                les     di, ds:THISCDS
                call    tstrdf_1
                les     di, es:[di+45h]
                jnz     short got_dev_ptr
                mov     ds:EXTERR_LOCUS, 2
                mov     bl, es:[di+1]
                les     di, es:[di+13h]

got_dev_ptr:                            ; ...
                clc

ioctl_bad_drv:                          ; ...
                pop     ax
                retn
Get_Driver_BL   endp


; =============== S U B R O U T I N E =======================================


Check_If_Net    proc near               ; ...
                call    Get_Driver_BL
                jb      short ioctl_drv_err_pop
                retn
; ---------------------------------------------------------------------------

ioctl_drv_err_pop:                      ; ...
                pop     ax
                jmp     ioctl_drv_err
Check_If_Net    endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $IOCTL

loc_B07B:                               ; ...
                jmp     ioctl_bad_fun
; ---------------------------------------------------------------------------

loc_B07E:                               ; ...
                jmp     short ioctl_string_err
; ---------------------------------------------------------------------------

ioctl_drive_owner:                      ; ...
                call    Check_If_Net
                jnz     short loc_B07B
                test    byte ptr es:[di+4], 40h
                jz      short loc_B07B
                mov     ds:IOCALL_REQFUNC, 23
                cmp     al, 0Eh
                jz      short loc_B09A
                mov     ds:IOCALL_REQFUNC, 24

loc_B09A:                               ; ...
                mov     al, 0Dh
                mov     ah, bl
                mov     word ptr ds:IOCALL, ax ; [IOCALL_REQLEN]
                xor     ax, ax
                mov     ds:IOCALL_REQSTAT, ax
                push    es
                pop     ds
                mov     si, di
                push    ss
                pop     es
                mov     bx, offset IOCALL
                push    ds
                push    si
                call    DEVIOCALL2
                pop     si
                pop     ds
                test    byte ptr ss:IOCALL_REQSTAT+1, 80h
                jnz     short loc_B07E
                mov     al, ss:IOCALL_REQUNIT
                jmp     SYS_RET_OK
; END OF FUNCTION CHUNK FOR $IOCTL

; =============== S U B R O U T I N E =======================================


DOS_DELETE      proc near               ; ...
                call    TestNet
                jnb     short LOCAL_DELETE
                mov     ax, 1113h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
                                        ; SS = DS = DOS CS, SDA first filename pointer -> fully-qualified filename in DOS CS
                                        ; SDA CDS pointer -> current directory structure for drive with file
                                        ; Return: CF set on error
                retn
; ---------------------------------------------------------------------------

LOCAL_DELETE:                           ; ...
                mov     ds:FOUNDDEL, 0
                call    ECritDisk
                mov     word ptr ds:CREATING, 0E500h
                mov     si, ds:WFP_START

SKPNUL:                                 ; ...
                lodsb
                or      al, al
                jnz     short SKPNUL
                sub     si, 4
                cmp     word ptr [si], 2E2Ah ; "*."
                jnz     short TEST_QUEST
                cmp     byte ptr [si+2], 2Ah ; '*'
                jz      short CHECK_ATTS

TEST_QUEST:                             ; ...
                sub     si, 9
                xchg    di, si
                push    ss
                pop     es
                mov     ax, '??'        ; 3F3Fh
                mov     cx, 4
                repe scasw
                jnz     short NOT_ALL
                xchg    di, si
                lodsw
                cmp     ax, 3F2Eh       ; ".?"
                jnz     short NOT_ALL
                lodsw
                cmp     ax, 3F3Fh       ; "??"
                jnz     short NOT_ALL

CHECK_ATTS:                             ; ...
                mov     al, ds:SATTRIB
                and     al, 1Fh
                cmp     al, 1Fh
                jnz     short NOT_ALL
                mov     ds:DELALL, 0

NOT_ALL:                                ; ...
                mov     ds:NoSetDir, 1
                call    GetPathNoSet
                jnb     short Del_found
                jnz     short _bad_path
                or      cl, cl
                jz      short _bad_path

No_file:                                ; ...
                mov     ax, 2

ErrorReturn:                            ; ...
                stc
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

_bad_path:                              ; ...
                mov     ax, 3
                jmp     short ErrorReturn
; ---------------------------------------------------------------------------

Del_found:                              ; ...
                jnz     short NOT_DIR
                cmp     ds:DELALL, 0
                jz      short NOT_DIR

Del_access_err:                         ; ...
                mov     ax, 5
                jmp     short ErrorReturn
; ---------------------------------------------------------------------------

NOT_DIR:                                ; ...
                or      ah, ah
                js      short Del_access_err

DELFILE:                                ; ...
                or      ds:FOUNDDEL, 1
                push    ds
                mov     ah, ds:DELALL
                lds     di, ds:CURBUF
                test    ss:ATTRIB, 1
                jnz     short DoDelete
                test    byte ptr [bx+0Bh], 1
                jz      short DoDelete
                pop     ds
                jmp     short DELNXT
; ---------------------------------------------------------------------------

DoDelete:                               ; ...
                call    REN_DEL_Check
                jnb     short DEL_SHARE_OK
                pop     ds
                jmp     short DELNXT
; ---------------------------------------------------------------------------

DEL_SHARE_OK:                           ; ...
                test    byte ptr [di+5], 40h
                jnz     short yesdirty
                call    inc_DirtyBufferCount
                or      byte ptr [di+5], 40h

yesdirty:                               ; ...
                mov     [bx], ah
                mov     bx, [si-6]
                mov     ss:CLUSTNUM_HW, bx
                shl     ebx, 10h
                mov     bx, [si]
                cmp     word ptr es:[bp+0Fh], 0
                jz      short yesdirty_fc_1
                movzx   ebx, bx

yesdirty_fc_1:                          ; ...
                pop     ds
                or      ds:FOUNDDEL, 10h
                cmp     ebx, 2
                jb      short yesdirty_fc_4
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short yesdirty_fc_2 ; FAT32
                cmp     bx, es:[bp+0Dh]
                jmp     short yesdirty_fc_3
; ---------------------------------------------------------------------------

yesdirty_fc_2:                          ; ...
                cmp     ebx, es:[bp+2Dh]

yesdirty_fc_3:                          ; ...
                ja      short yesdirty_fc_4
                ror     ebx, 10h
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 10h
                call    RELEASE
                jb      short No_fileJ

yesdirty_fc_4:                          ; ...
                mov     di, offset LNE_COUNT ; LONG_NAME_ENTRY
                call    delete_longname_entry

DELNXT:                                 ; ...
                les     bp, ds:THISDPB
                call    GETENTRY
                jb      short No_fileJ
                call    NEXTENT
                jnb     DELFILE
                les     bp, ds:THISDPB
                call    update_fat32_fsinfo
                mov     al, es:[bp+0]
                call    FLUSHBUF
                jb      short No_fileJ
                test    ds:FOUNDDEL, 10h
                jz      short DelError
                test    ds:ATTRIB, 8
                jz      short No_Set_Flag
                push    ax
                push    es
                push    di
                les     di, ds:THISCDS
                mov     ah, es:[di]
                sub     ah, 'A'
                mov     ds:VOLCHNG_FLAG, ah
                xor     bh, bh
                call    Set_Media_ID
                call    FATREAD_CDS
                pop     di
                pop     es
                pop     ax

No_Set_Flag:                            ; ...
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

DelError:                               ; ...
                test    ds:FOUNDDEL, 1
                jnz     short Del_access_errJ

No_fileJ:                               ; ...
                jmp     No_file
; ---------------------------------------------------------------------------

Del_access_errJ:                        ; ...
                jmp     Del_access_err
DOS_DELETE      endp


; =============== S U B R O U T I N E =======================================


REN_DEL_Check   proc near               ; ...
                push    ds
                push    di
                push    ax
                push    bx
                push    si
                push    ss
                pop     es
                mov     di, ss:WFP_START
                mov     si, bx
                mov     ds, word ptr ss:CURBUF+2
                mov     bx, di
                add     bx, 2
                call    StrLen
                dec     cx
                add     di, cx
                call    SkipBack
                inc     di
                mov     ss:SAVE_BX, di
                call    PackName
                pop     si
                pop     bx
                push    bx
                push    si
                push    ss
                pop     ds
                mov     word ptr ds:THISSFT+2, ds
                mov     word ptr ds:THISSFT, 765h ; AUXSTACK-SF_ENTRY.size
                xor     ah, ah
                call    DOOPEN
                les     di, ds:THISSFT
                mov     word ptr es:[di+2], 10h
                mov     word ptr es:[di+33h], 0
                mov     word ptr es:[di], 0
                clc
                les     bp, ds:THISDPB
                pop     si
                pop     bx
                pop     ax
                pop     di
                pop     ds
                retn
REN_DEL_Check   endp


; =============== S U B R O U T I N E =======================================


DOS_RENAME      proc near               ; ...
                call    TestNet
                jnb     short LOCAL_RENAME
                mov     ax, 1111h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
                                        ; SS = DS = DOS CS, SDA first filename pointer = offset of fully-qualified old name
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error
                retn
; ---------------------------------------------------------------------------

LOCAL_RENAME:                           ; ...
                mov     ds:EXTERR_LOCUS, 2
                mov     si, ds:WFP_START
                mov     di, ds:REN_WFP
                mov     al, [si]
                mov     ah, [di]
                or      ax, 2020h
                cmp     al, ah
                jz      short SAMEDRV
                mov     ax, 11h
                stc
                retn
; ---------------------------------------------------------------------------

SAMEDRV:                                ; ...
                push    large [ds:DMAADD]
                mov     word ptr ds:DMAADD+2, ds
                mov     word ptr ds:DMAADD, offset RENAMEDMA
                mov     ds:FOUND_DEV, 0
                call    ECritDisk
                call    DOS_SEARCH_FIRST
                jnb     short Check_Dev
                cmp     ax, 12h
                jnz     short GOTERR
                mov     ax, 2

GOTERR:                                 ; ...
                stc

RENAME_POP:                             ; ...
                pop     large [ds:DMAADD]
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

Check_Dev:                              ; ...
                mov     ax, 5
                push    ds
                lds     si, ds:DMAADD
                add     si, 21
                test    byte ptr [si+0Bh], 10h
                jz      short notdir
                mov     si, ds:REN_WFP
                call    Check_PathLen2

notdir:                                 ; ...
                pop     ds
                ja      short GOTERR
                cmp     ds:FOUND_DEV, 0
                jnz     short GOTERR
                mov     si, bx
                add     si, 26
                call    REN_DEL_Check
                jnb     short REN_OK1
                mov     ax, 20h
                jmp     short RENAME_POP
; ---------------------------------------------------------------------------

REN_OK1:                                ; ...
                push    si              ; (not necessary) ; 31/01/2024 - Erdogan Tan
                push    di
                mov     di, offset DEST_LNE
                call    move_LNE_parms
                pop     di
                pop     si
                mov     ds, word ptr ds:DMAADD+2
                mov     ax, ds:WFP_START
                mov     si, ds:REN_WFP
                mov     ds:WFP_START, si
                mov     ds:REN_WFP, ax
                mov     ds:CURR_DIR_END, 0FFFFh
                mov     word ptr ds:CREATING, 0E5FFh
                call    GetPathNoSet
                jb      short NODEST
                or      ah, ah
                jns     short SAVEDEST

BAD_ACC:                                ; ...
                mov     ax, 5
                stc

RENAME_CLEAN:                           ; ...
                pushf
                push    ax
                les     bp, ds:THISDPB
                call    update_fat32_fsinfo
                mov     al, ds:THISDRV
                call    FLUSHBUF
                pop     ax
                cmp     ds:FAILERR, 0
                jnz     short BAD_ERR
                popf
                jmp     RENAME_POP
; ---------------------------------------------------------------------------

BAD_ERR:                                ; ...
                pop     ax
                mov     ax, 3
                jmp     GOTERR
; ---------------------------------------------------------------------------

NODEST:                                 ; ...
                jnz     short BAD_PATH
                cmp     ds:FAILERR, 0
                jnz     short BAD_PATH
                or      cl, cl
                jnz     short SAVEDEST

BAD_PATH:                               ; ...
                mov     ax, 3
                stc
                jmp     RENAME_POP
; ---------------------------------------------------------------------------

SAVEDEST:                               ; ...
                push    ss
                pop     es
                mov     di, offset NAME2
                mov     si, offset NAME1
                mov     cx, 11
                rep movsb
                mov     ax, ds:DIRSTART_HW
                mov     ds:DESTSTART_HW, ax
                mov     ax, ds:DIRSTART
                mov     ds:DESTSTART, ax

BUILDDEST:                              ; ...
                push    ss
                pop     es
                mov     bx, (offset RENAMEDMA+15h)
                mov     di, offset NAME1
                mov     si, offset NAME2
                mov     cx, 11
                call    NEW_RENAME
                mov     ds:ATTRIB, 16h
                mov     ds:CREATING, 0FFh
                call    DEVNAME
                jnb     short BAD_ACC
                mov     bx, ds:DESTSTART_HW
                mov     ds:ROOTCLUST_HW, bx
                mov     bx, ds:DESTSTART
                les     bp, ds:THISDPB
                call    SETDIRSRCH
                jb      BAD_ACC
                call    FINDENTRY
                jnb     BAD_ACC
                cmp     ds:FAILERR, 0
                jnz     short BAD_ACCJ
                mov     dx, ds:DESTSTART_HW
                mov     ax, ds:DESTSTART
                les     bp, ds:THISDPB
                cmp     word ptr es:[bp+0Fh], 0
                jz      short builddst_2
                cmp     ax, word ptr ds:RENAMEDMA+0Fh

builddst_1:                             ; ...
                jz      short SIMPLE_RENAME
                mov     al, ds:RENAMEDMA+20h
                test    al, 10h
                jnz     short BAD_ACCJ
                mov     ds:ATTRIB, al
                mov     word ptr ds:THISSFT+2, ds
                mov     si, (offset RENAMEDMA+145h) ; AUXSTACK-SF_ENTRY.size
                mov     word ptr ds:THISSFT, si
                mov     word ptr [si+2], 2 ; [SI+SF_ENTRY.sf_mode],
                                        ;  SHARING_COMPAT+open_for_both
                xor     cx, cx
                call    RENAME_MAKE
                jnb     short GOT_DEST

BAD_ACCJ:                               ; ...
                jmp     BAD_ACC
; ---------------------------------------------------------------------------

builddst_2:                             ; ...
                cmp     ax, word ptr ds:RENAMEDMA+0Fh
                jnz     short builddst_1
                cmp     dx, word ptr ds:RENAMEDMA+11h
                jmp     short builddst_1
; ---------------------------------------------------------------------------

GOT_DEST:                               ; ...
                les     di, ds:CURBUF
                test    byte ptr es:[di+5], 40h
                jnz     short GOT_DEST2
                call    inc_DirtyBufferCount
                or      byte ptr es:[di+5], 40h

GOT_DEST2:                              ; ...
                mov     di, bx
                add     di, 11
                mov     si, (offset RENAMEDMA+20h)
                mov     cx, 21
                rep movsb
                call    GET_SOURCE
                jb      short RENAME_OVER
                mov     di, bx
                mov     es, word ptr ds:CURBUF+2
                mov     al, 0E5h
                stosb
                jmp     short DIRTY_IT
; ---------------------------------------------------------------------------

SIMPLE_RENAME:                          ; ...
                call    GET_SOURCE
                jb      short RENAME_OVER
                mov     di, bx
                mov     es, word ptr ds:CURBUF+2
                mov     si, offset NAME1
                mov     cx, 11
                rep movsb

DIRTY_IT:                               ; ...
                mov     di, word ptr ds:CURBUF
                test    byte ptr es:[di+5], 40h
                jnz     short DIRTY_IT_OK
                call    inc_DirtyBufferCount
                or      byte ptr es:[di+5], 40h

DIRTY_IT_OK:                            ; ...
                mov     ds, word ptr ds:DMAADD+2
                cmp     word ptr ds:DEST_LNE, 0
                jz      short NOT_DIR2
                mov     al, ds:THISDRV
                call    FLUSHBUF
                push    bx
                mov     di, offset DEST_LNE
                call    delete_longname_entry
                pop     bx

NOT_DIR2:                               ; ...
                mov     si, (offset RENAMEDMA+1)
                call    ECritDisk
                mov     ds:CREATING, 0
                call    RENAME_NEXT
                jb      short RENAME_OVER
                mov     di, offset DEST_LNE
                call    move_LNE_parms
                clc
                jb      short RENAME_OVER
                lea     si, [bx+1Ah]
                call    REN_DEL_Check
                jnb     short REN_OK2
                mov     ax, 20h
                jmp     RENAME_CLEAN
; ---------------------------------------------------------------------------

REN_OK2:                                ; ...
                mov     al, ds:RENAMEDMA+20h
                jmp     BUILDDEST
; ---------------------------------------------------------------------------

RENAME_OVER:                            ; ...
                clc
                jmp     RENAME_CLEAN
DOS_RENAME      endp


; =============== S U B R O U T I N E =======================================


GET_SOURCE      proc near               ; ...
                mov     bx, word ptr ds:RENAMEDMA+11h
                mov     ds:ROOTCLUST_HW, bx
                mov     bx, word ptr ds:RENAMEDMA+0Fh
                les     bp, ds:THISDPB
                cmp     word ptr es:[bp+0Fh], 0
                jz      short gs_cont
                mov     ds:ROOTCLUST_HW, 0

gs_cont:                                ; ...
                call    SETDIRSRCH
                jb      short gs_ret_label
                call    STARTSRCH
                mov     ax, word ptr ds:RENAMEDMA+0Dh
                call    GETENT

gs_ret_label:                           ; ...
                retn
GET_SOURCE      endp


; =============== S U B R O U T I N E =======================================


NEW_RENAME      proc near               ; ...
                lodsb
                cmp     al, 3Fh ; '?'
                jnz     short NOCHG
                mov     al, [bx]

NOCHG:                                  ; ...
                stosb
                inc     bx
                loop    NEW_RENAME
                retn
NEW_RENAME      endp


; =============== S U B R O U T I N E =======================================


GET_FILE_INFO   proc near               ; ...
                call    TestNet
                jnb     short LOCAL_INFO
                mov     ax, 110Fh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
                                        ; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error, AX = file attributes
                retn
; ---------------------------------------------------------------------------

LOCAL_INFO:                             ; ...
                call    ECritDisk
                mov     ds:NoSetDir, 1
                call    GETPATH
                jnb     short info_check_dev

NO_PATH:                                ; ...
                jnz     short bad_path1
                or      cl, cl
                jz      short bad_path1

info_no_file:                           ; ...
                mov     ax, 2

BadRet:                                 ; ...
                stc

JustRet:                                ; ...
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

bad_path1:                              ; ...
                mov     ax, 3
                jmp     short BadRet
; ---------------------------------------------------------------------------

info_check_dev:                         ; ...
                or      ah, ah
                js      short info_no_file
                cmp     word ptr ds:CURBUF, 0FFFFh
                jnz     short not_root
                xor     ah, ah
                mov     al, 10h
                clc
                jmp     short JustRet
; ---------------------------------------------------------------------------

not_root:                               ; ...
                push    ds
                mov     ds, word ptr ds:CURBUF+2
                mov     si, bx
                xor     bx, bx
                mov     di, bx
                mov     cx, [si+16h]
                mov     dx, [si+18h]
                xor     ah, ah
                mov     al, [si+0Bh]
                test    al, 10h
                jnz     short NO_SIZE
                mov     di, [si+1Ch]
                mov     bx, [si+1Eh]

NO_SIZE:                                ; ...
                pop     ds
                clc
                jmp     short JustRet
GET_FILE_INFO   endp


; =============== S U B R O U T I N E =======================================


SET_FILE_ATTRIBUTE proc near            ; ...
                test    ax, 0FFD8h      ; ~attr_changeable
                jz      short set_look

_BAD_ACC:                               ; ...
                mov     ds:EXTERR_LOCUS, 1
                mov     ds:EXTERR_CLASS, 7
                mov     ds:EXTERR_ACTION, 4
                mov     ax, 5
                stc
                retn
; ---------------------------------------------------------------------------

set_look:                               ; ...
                call    TestNet
                jnb     short LOCAL_SET
                push    ax
                mov     ax, 110Eh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
                                        ; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
                                        ; SDA CDS pointer -> current directory
                                        ; STACK: WORD new file attributes
                                        ; Return: CF set on error
                pop     bx
                retn
; ---------------------------------------------------------------------------

LOCAL_SET:                              ; ...
                call    ECritDisk
                push    ax
                mov     ds:NoSetDir, 1
                call    GETPATH
                jnb     short set_check_device
                pop     bx
                jmp     short NO_PATH
; ---------------------------------------------------------------------------

set_check_device:                       ; ...
                or      ah, ah
                jns     short set_check_share
                pop     ax
                call    LCritDisk
                jmp     short _BAD_ACC
; ---------------------------------------------------------------------------

set_check_share:                        ; ...
                pop     ax
                cmp     word ptr ds:CURBUF, 0FFFFh
                jz      short cannot_set_root
                call    REN_DEL_Check
                jnb     short set_do
                mov     ax, 20h
                jmp     short OK_BYE
; ---------------------------------------------------------------------------

cannot_set_root:                        ; ...
                mov     ax, 5
                stc
                jmp     short OK_BYE
; ---------------------------------------------------------------------------

set_do:                                 ; ...
                les     di, ds:CURBUF
                and     byte ptr es:[bx+0Bh], 0D8h ; ~attr_changeable
                or      es:[bx+0Bh], al
                test    byte ptr es:[di+5], 40h ; buf_dirty
                jnz     short yesdirty3
                call    inc_DirtyBufferCount
                or      byte ptr es:[di+5], 40h ; buf_dirty

yesdirty3:                              ; ...
                mov     al, ds:THISDRV
                call    FLUSHBUF
                jnb     short OK_BYE
                mov     ax, 2

OK_BYE:                                 ; ...
                call    LCritDisk
                retn
SET_FILE_ATTRIBUTE endp


; =============== S U B R O U T I N E =======================================


DOS_DUP         proc near               ; ...
                mov     es, cs:DosDSeg
                les     di, es:THISSFT

DOS_Dup_Direct:                         ; ...
                call    IsSFTNet
                jnz     short DO_INC
                call    DEV_OPEN_SFT

DO_INC:                                 ; ...
                inc     word ptr es:[di]
                retn
DOS_DUP         endp

; ---------------------------------------------------------------------------

DOS_CREATE:                             ; ...
                xor     ah, ah

Create_inter:                           ; ...
                test    al, 80h
                jnz     short AttErr
                test    al, 8
                jz      short NoReset
                or      ds:DOS34_FLAG, 80h
                mov     al, 8

NoReset:                                ; ...
                or      al, 20h
                test    al, 50h
                jz      short ATT_OK

AttErr:                                 ; ...
                mov     ax, 5
                mov     ds:EXTERR_LOCUS, 1
                jmp     short SET_MKND_ERR
; ---------------------------------------------------------------------------

ATT_OK:                                 ; ...
                les     di, ds:THISSFT
                push    es
                les     si, ds:THISCDS
                cmp     si, 0FFFFh
                jnz     short TEST_RE_NET
                pop     es
                test    ds:EXTOPEN_ON, 1
                jz      short NOEXTOP

IFS_extopen:                            ; ...
                push    ax
                mov     ax, 112Eh
                int     2Fh             ; Multiplex - DOS 4 IFSFUNC.EXE - ???
                                        ; SS = DS = DOS CS, STACK: WORD ???   low byte = ???
                                        ; Return: CF set on error
                                        ; CF clear if successful
                pop     bx
                mov     ds:EXTOPEN_ON, 0
                retn
; ---------------------------------------------------------------------------

NOEXTOP:                                ; ...
                push    ax
                mov     ax, 1118h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
                                        ; ES:DI -> uninitialized SFT, SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified name of file
                                        ; STACK: WORD file creation mode???
                pop     bx
                retn
; ---------------------------------------------------------------------------

TEST_RE_NET:                            ; ...
                test    word ptr es:[si+43h], 8000h
                jz      short LOCAL_CREATE
                pop     es

dochk2:                                 ; ...
                call    Set_EXT_mode
                jb      short dochk
                or      word ptr es:[di+2], 2

dochk:                                  ; ...
                test    ds:EXTOPEN_ON, 1
                jnz     short IFS_extopen
                push    ax
                mov     ax, 1117h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
                                        ; ES:DI -> uninitialized SFT, SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified name of file to open
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error
                pop     bx
                retn
; ---------------------------------------------------------------------------

LOCAL_CREATE:                           ; ...
                push    di
                mov     di, si
                call    test_remote_disk_flag
                pop     di
                pop     es
                jnz     short dochk2
                call    Set_EXT_mode
                jb      short setdone
                or      word ptr es:[di+2], 2

setdone:                                ; ...
                call    ECritDisk
                call    MakeNode
                jnb     short Create_ok
                mov     ds:VOLCHNG_FLAG, 0FFh
                call    LCritDisk

SET_MKND_ERR:                           ; ...
                mov     bx, offset CRTERRTAB
                xlat    byte ptr cs:[bx]
                stc
                retn
; ---------------------------------------------------------------------------
CRTERRTAB       db 0                    ; ...
                db 5
                db 52h
                db 50h
                db 3
                db 5
                db 20h
                db 2
; ---------------------------------------------------------------------------

Create_ok:                              ; ...
                mov     al, ds:SATTRIB
                test    al, 8
                jz      short NoVolLabel
                les     di, ds:THISCDS
                mov     ah, es:[di]
                sub     ah, 41h ; 'A'
                mov     ds:VOLCHNG_FLAG, ah
                mov     bh, 1
                call    Set_Media_ID
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk

NoVolLabel:                             ; ...
                mov     ax, 2
                les     di, ds:THISSFT
                call    LCritDisk
                jmp     SET_SFT_MODE
; ---------------------------------------------------------------------------

DOS_Create_New:                         ; ...
                mov     ah, 1
                jmp     Create_inter

; =============== S U B R O U T I N E =======================================


Set_Media_ID    proc near               ; ...
                push    ax
                push    es
                push    di
                inc     ah
                mov     bl, ah
                mov     al, 0Dh
                mov     cx, 4866h
                mov     dx, offset FAKE_STACK_2F

Set_Media_ID_1:                         ; ...
                push    bx
                push    dx
                push    cx
                xor     bh, bh
                call    $IOCTL
                pop     cx
                pop     dx
                pop     bx
                jnb     short Set_Media_ID_2
                cmp     ch, 48h
                stc
                jnz     short geterr
                mov     ch, 8
                jmp     short Set_Media_ID_1
; ---------------------------------------------------------------------------

Set_Media_ID_2:                         ; ...
                or      bh, bh
                jz      short NoName
                mov     si, offset NAME1
                jmp     short doset
; ---------------------------------------------------------------------------

NoName:                                 ; ...
                mov     si, offset NO_NAME_ID ; "NO NAME    "

doset:                                  ; ...
                mov     di, dx
                add     di, 6
                push    ss
                pop     ds
                push    ss
                pop     es
                push    cx
                mov     cx, 11
                rep movsb
                pop     cx
                mov     cl, 46h
                mov     al, 0Dh
                xor     bh, bh
                call    $IOCTL

geterr:                                 ; ...
                push    ss
                pop     ds
                pop     di
                pop     es
                pop     ax
                retn
Set_Media_ID    endp


; =============== S U B R O U T I N E =======================================


Set_EXT_mode    proc near               ; ...
                test    ss:EXTOPEN_ON, 1
                jz      short NOTEX
                push    ax
                mov     ax, ss:SAVE_BX
                or      es:[di+2], ax
                pop     ax
                stc

NOTEX:                                  ; ...
                retn
Set_EXT_mode    endp

; ---------------------------------------------------------------------------

DOS_OPEN:                               ; ...
                mov     ds:NoSetDir, 0
                call    Check_Access_AX
                jb      short do_ret_label
                les     di, ds:THISSFT
                xor     ah, ah
                mov     es:[di+2], al
                push    es
                les     si, ds:THISCDS
                cmp     si, 0FFFFh
                jnz     short TEST_RE_NET1
                pop     es
                test    ds:EXTOPEN_ON, 1
                jz      short _NOEXTOP

_IFS_extopen:                           ; ...
                mov     al, byte ptr ds:SAVE_BX
                push    ax
                mov     ax, 112Eh
                int     2Fh             ; Multiplex - DOS 4 IFSFUNC.EXE - ???
                                        ; SS = DS = DOS CS, STACK: WORD ???   low byte = ???
                                        ; Return: CF set on error
                                        ; CF clear if successful
                pop     bx
                mov     ds:EXTOPEN_ON, 0

do_ret_label:                           ; ...
                retn
; ---------------------------------------------------------------------------

_NOEXTOP:                               ; ...
                test    ds:DOS_FLAG, 1
                jz      short not_exec_open
                test    byte ptr ds:DOS34_FLAG+1, 8
                jz      short not_exec_open
                mov     al, 23h

not_exec_open:                          ; ...
                push    ax
                mov     ax, 1116h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
                                        ; ES:DI -> uninitialized SFT, SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified name of file to open
                                        ; STACK: WORD file open mode
                                        ; Return: CF set on error
                pop     bx
                retn
; ---------------------------------------------------------------------------

TEST_RE_NET1:                           ; ...
                test    word ptr es:[si+43h], 8000h
                jz      short LOCAL_OPEN
                pop     es

TEST_RE_NET2:                           ; ...
                test    ds:EXTOPEN_ON, 1
                jnz     short _IFS_extopen
                jmp     short _NOEXTOP
; ---------------------------------------------------------------------------

LOCAL_OPEN:                             ; ...
                push    di
                mov     di, si
                call    test_remote_disk_flag
                pop     di
                pop     es
                jnz     short TEST_RE_NET2
                call    ECritDisk
                call    GETPATH
                jnb     short Open_found
                jnz     short bad_path2
                or      cl, cl
                jz      short bad_path2
                mov     ax, 2

OpenBadRet:                             ; ...
                stc
                call    LCritDisk
                jmp     s_retn
; ---------------------------------------------------------------------------

bad_path2:                              ; ...
                mov     ax, 3
                jmp     short OpenBadRet
; ---------------------------------------------------------------------------

Open_Bad_Access:                        ; ...
                mov     ax, 5
                jmp     short OpenBadRet
; ---------------------------------------------------------------------------

Open_found:                             ; ...
                jz      short Open_Bad_Access
                or      ah, ah
                js      short open_ok
                mov     es, word ptr ds:CURBUF+2
                test    ds:EXTOPEN_ON, 1
                jz      short chk_fsize_limit
                push    ds
                push    si
                lds     si, ds:THISSFT
                test    word ptr [si+2], 1000h ; [SI+SF_ENTRY.sf_mode]
                                        ; bit 12 (big file flag ?)
                pop     si
                pop     ds
                jnz     short fsize_limit_ok

chk_fsize_limit:                        ; ...
                cmp     dword ptr es:[bx+1Ch], 7FFFFFFFh ; file size limit
                ja      short Open_Bad_Access

fsize_limit_ok:                         ; ...
                mov     al, es:[bx+0Bh] ; [ES:BX+dir_entry.dir_attr]
                test    al, 8
                jnz     short Open_Bad_Access
                test    al, 1
                jz      short open_ok
                push    ds
                push    si
                lds     si, ds:THISSFT
                mov     cx, [si+2]
                test    cx, 8000h
                jnz     short ResetAccess
                mov     dl, cl
                and     dl, 0F0h
                cmp     dl, 70h
                jnz     short NormalOpen

ResetAccess:                            ; ...
                and     cx, 0FFFCh
                mov     [si+2], cx
                jmp     short FillSFT
; ---------------------------------------------------------------------------

NormalOpen:                             ; ...
                and     cl, 3
                cmp     cl, 0
                jz      short FillSFT
                pop     si
                pop     ds
                jmp     short Open_Bad_Access
; ---------------------------------------------------------------------------

FillSFT:                                ; ...
                pop     si
                pop     ds

open_ok:                                ; ...
                call    DOOPEN
                mov     ax, 3
                les     di, ds:THISSFT
                call    LCritDisk

SET_SFT_MODE:                           ; ...
                les     di, ds:THISSFT
                call    DEV_OPEN_SFT
                test    word ptr es:[di+2], 8000h
                jz      short s_retn
                mov     ax, ds:CurrentPDB
                mov     es:[di+31h], ax

s_retn:                                 ; ...
                retn
; ---------------------------------------------------------------------------

SHARE_ERROR:                            ; ...
                test    word ptr es:[di+2], 8000h
                jnz     short _HARD_ERR
                mov     cl, es:[di+2]
                and     cl, 0F0h
                cmp     cl, 0
                jnz     short _NO_HARD_ERR

_HARD_ERR:                              ; ...
                call    SHARE_VIOLATION
                jnb     short s_retn

_NO_HARD_ERR:                           ; ...
                mov     ax, 20h
                stc
                retn

; =============== S U B R O U T I N E =======================================


Check_Access_AX proc near               ; ...
                mov     ds:OPEN_ACCESS, al
                push    bx
                mov     bl, al
                and     bl, 0F0h
                cmp     ds:FSHARING, 0FFh
                jnz     short CheckShareMode
                cmp     bl, 70h
                jz      short CheckAccessMode

CheckShareMode:                         ; ...
                cmp     bl, 40h
                ja      short Make_Bad_Access

CheckAccessMode:                        ; ...
                mov     bl, al
                and     bl, 3
                cmp     bl, 2
                ja      short Make_Bad_Access
                test    al, 8
                jnz     short Make_Bad_Access
                pop     bx
                clc
                retn
; ---------------------------------------------------------------------------

Make_Bad_Access:                        ; ...
                mov     ax, 0Ch
                pop     bx
                stc
                retn
Check_Access_AX endp


; =============== S U B R O U T I N E =======================================


DISK_INFO       proc near               ; ...
                xor     ax, ax
                mov     ds:ROOTCLUST_HW, ax
                mov     ds:CCOUNT_HW, ax
                call    TestNet
                jnb     short LOCAL_DSK_INFO
                mov     ax, 110Ch
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
                                        ; ES:DI -> current directory
                                        ; Return: AL = sectors per cluster, BX = total clusters
                                        ; CX = bytes per sector, DX = number of available clusters
                retn
; ---------------------------------------------------------------------------

LOCAL_DSK_INFO:                         ; ...
                mov     ds:EXTERR_LOCUS, 2
                call    ECritDisk
                call    FATREAD_CDS
                jb      CRIT_LEAVE
                mov     bx, 2
                mov     ds:CLUSTNUM_HW, 0
                call    UNPACK
                jb      CRIT_LEAVE
                lds     si, ds:CURBUF
                movzx   ax, byte ptr [si+18h]
                mov     ah, al
                push    ss
                pop     ds
                cmp     word ptr es:[bp+0Fh], 0
                jz      short dsk_info_1
                mov     cx, es:[bp+0Dh]
                mov     dx, es:[bp+1Fh]
                inc     dx
                jz      short dsk_info_2
                dec     dx
                cmp     dx, cx
                jb      GotVal
                jmp     short dsk_info_2
; ---------------------------------------------------------------------------

dsk_info_1:                             ; ...
                mov     cx, es:[bp+2Fh]
                mov     ds:CCOUNT_HW, cx
                shl     ecx, 10h
                mov     cx, es:[bp+2Dh]
                mov     dx, es:[bp+21h]
                mov     ds:ROOTCLUST_HW, dx
                shl     edx, 10h
                mov     dx, es:[bp+1Fh]
                inc     edx
                jz      short dsk_info_2
                dec     edx
                cmp     edx, ecx
                jb      GotVal

dsk_info_2:                             ; ...
                or      byte ptr es:[bp+18h], 1
                xor     dx, dx
                mov     ds:ROOTCLUST_HW, dx ; free cluster count hw
                sub     cx, 1
                sbb     ds:CCOUNT_HW, 0 ; number of clusters hw

SCANFREE:                               ; ...
                call    UNPACK
                jb      short CRIT_LEAVE
                jnz     short NOTFREECLUS
                add     dx, 1
                adc     ds:ROOTCLUST_HW, 0

NOTFREECLUS:                            ; ...
                add     bx, 1
                adc     ds:CLUSTNUM_HW, 0
                ror     ecx, 16
                mov     cx, ds:CCOUNT_HW
                ror     ecx, 16
                dec     ecx
                jz      short NOTFREECLUS2
                ror     ecx, 16
                mov     ds:CCOUNT_HW, cx
                ror     ecx, 16
                jmp     short SCANFREE
; ---------------------------------------------------------------------------

NOTFREECLUS2:                           ; ...
                mov     cx, ds:CLUSTNUM_HW
                mov     ds:CCOUNT_HW, cx
                sub     bx, 1
                sbb     ds:CCOUNT_HW, 0

ReturnVals:                             ; ...
                sub     bx, 1
                sbb     ds:CCOUNT_HW, 0
                mov     al, es:[bp+4]
                inc     al
                mov     cx, es:[bp+2]
                cmp     word ptr es:[bp+0Fh], 0
                jz      short ReturnVals2
                mov     es:[bp+1Fh], dx
                jmp     short ReturnVals3
; ---------------------------------------------------------------------------

ReturnVals2:                            ; ...
                mov     es:[bp+1Fh], dx
                mov     dx, ds:ROOTCLUST_HW
                mov     es:[bp+21h], dx
                mov     dx, es:[bp+1Fh]

ReturnVals3:                            ; ...
                call    update_fat32_fsinfo
                clc

CRIT_LEAVE:                             ; ...
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

GotVal:                                 ; ...
                mov     bx, cx
                jmp     short ReturnVals
DISK_INFO       endp


; =============== S U B R O U T I N E =======================================


update_fat32_fsinfo proc near           ; ...
                test    byte ptr es:[bp+18h], 80h ; DPB.FIRST_ACCESS
                jnz     u_fat32_inf_13
                test    byte ptr es:[bp+18h], 0Bh ; test bit 0,1 and 3
                jz      u_fat32_inf_13
                cmp     word ptr es:[bp+0Fh], 0 ; DPB.FAT_SIZE
                                        ; (16bit FAT size field = 0 for FAT32 fs)
                jnz     u_fat32_inf_13
                cmp     word ptr es:[bp+25h], 0FFFFh ; DPB.FSINFO_SECTOR
                jz      u_fat32_inf_13
                push    es
                push    ds
                pushad
                lds     di, ss:LoMemBuff
                cmp     ss:BuffInHMA, 0
                jnz     short u_fat32_inf_1
                push    es
                push    bp
                call    GETCURHEAD
                call    BUFWRITE
                pop     bp
                pop     es
                jb      u_fat32_inf_12
                mov     word ptr [di+4], 0FFh
                add     di, 24          ; space for buffer header
                                        ; (buffer header size = 24)

u_fat32_inf_1:                          ; ...
                mov     bx, di
                mov     dx, es:[bp+25h]
                mov     ss:HIGH_SECTOR, 0
                mov     cx, 1
                mov     ss:ALLOWED, 18h
                push    bx
                call    DREAD
                pop     bx
                jb      u_fat32_inf_12
                cmp     dword ptr [bx], 41615252h ; 'RRaA' (NASM syntax)
                clc
                jnz     short u_fat32_inf_2
                cmp     dword ptr [bx+1E4h], 61417272h ; 'rrAa' (NASM syntax)
                clc
                jnz     short u_fat32_inf_2
                test    byte ptr es:[bp+18h], 1 ; test DPB.FIRST_ACCESS bit 0
                jz      short u_fat32_inf_2
                mov     eax, es:[bp+1Fh] ; DPB.FREE_CNT
                mov     [bx+1E8h], eax  ; FSINFO.Free_Count
                mov     eax, es:[bp+39h] ; DPB.FAT32_NXTFREE
                mov     [bx+1ECh], eax  ; FSINFO.Nxt_Free
                mov     cx, 1
                mov     ss:HIGH_SECTOR, 0
                mov     dx, es:[bp+25h] ; DPB.FSINFO_SECTOR
                push    bx
                call    DWRITE
                pop     bx
                jb      u_fat32_inf_12
                and     byte ptr es:[bp+18h], 0FEh ; clear  DPB.FIRST_ACCESS bit 0

u_fat32_inf_2:                          ; ...
                test    byte ptr es:[bp+18h], 0Ah ; test DPB.FIRST_ACCESS bit 1,3
                jz      u_fat32_inf_12
                xor     dx, dx
                xor     ax, ax

u_fat32_inf_3:                          ; ...
                mov     cx, 1
                mov     ss:HIGH_SECTOR, 0
                push    ax
                push    dx
                push    bx
                call    DREAD           ; read boot sector
                pop     bx
                pop     dx
                pop     ax
                jnb     short u_fat32_inf_4
                or      al, 1
                jmp     short u_fat32_inf_9
; ---------------------------------------------------------------------------

u_fat32_inf_4:                          ; ...
                cmp     word ptr [bx+1FCh], 0 ; word at offset 508
                                        ; (is 0 on Windows Me boot sector)
                jnz     short u_fat32_inf_8
                cmp     byte ptr [bx], 0EBh
                jz      short u_fat32_inf_5
                cmp     byte ptr [bx], 0E9h
                jnz     short u_fat32_inf_8

u_fat32_inf_5:                          ; ...
                cmp     byte ptr [bx+42h], 29h
                jnz     short u_fat32_inf_8
                cmp     word ptr [bx+16h], 0
                jnz     short u_fat32_inf_8
                push    ax
                test    byte ptr es:[bp+18h], 2 ; test DPB.FIRST_ACCESS bit 1
                jz      short u_fat32_inf_6
                mov     eax, es:[bp+35h] ; DPB.ROOT_CLUSTER
                mov     [bx+2Ch], eax

u_fat32_inf_6:                          ; ...
                test    byte ptr es:[bp+18h], 8 ; test DPB.FIRST_ACCESS bit 3
                jz      short u_fat32_inf_7
                mov     ax, es:[bp+23h] ; DPB.EXT_FLAGS
                mov     [bx+28h], ax

u_fat32_inf_7:                          ; ...
                mov     cx, 1
                mov     ss:HIGH_SECTOR, 0
                push    dx
                push    bx
                call    DWRITE
                pop     bx
                pop     dx
                pop     ax
                jnb     short u_fat32_inf_9
                or      al, 1
                jmp     short u_fat32_inf_9
; ---------------------------------------------------------------------------

u_fat32_inf_8:                          ; ...
                or      al, 2

u_fat32_inf_9:                          ; ...
                or      dx, dx
                jz      short u_fat32_inf_11
                or      ah, ah
                jz      short u_fat32_inf_12

u_fat32_inf_10:                         ; ...
                or      al, al
                jz      short u_fat32_inf_12
                stc
                jmp     short u_fat32_inf_12
; ---------------------------------------------------------------------------

u_fat32_inf_11:                         ; ...
                mov     dx, es:[bp+27h] ; DPB.BKBOOT_SECTOR
                inc     dx
                jz      short u_fat32_inf_10 ; invalid
                dec     dx
                jz      short u_fat32_inf_10 ; invalid (none)
                xchg    ah, al
                jmp     u_fat32_inf_3
; ---------------------------------------------------------------------------

u_fat32_inf_12:                         ; ...
                popad
                pop     ds
                pop     es
                jb      short u_fat32_inf_14

u_fat32_inf_13:                         ; ...
                and     byte ptr es:[bp+18h], 0F4h ; DPB.FIRST_ACCESS
                                        ; clear bit 0,1 and 3
                                        ; bit 0 - FSINFO update (dirty) bit
                                        ; bit 1 - BPB_RootClus update bit
                                        ; bit 3 - BPB_ExtFlags update bit

u_fat32_inf_14:                         ; ...
                retn
update_fat32_fsinfo endp


; =============== S U B R O U T I N E =======================================


DOS_SEARCH_FIRST proc near              ; ...
                les     di, ds:THISCDS
                cmp     di, 0FFFFh
                jnz     short TEST_RE_NET2
                mov     ax, 1119h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
                retn
; ---------------------------------------------------------------------------

TEST_RE_NET2:                           ; ...
                test    word ptr es:[di+43h], 8000h
                jz      short LOCAL_SEARCH_FIRST

TEST_RE_NET3:                           ; ...
                mov     ax, 111Bh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FINDFIRST
                                        ; SS = DS = DOS CS, [DTA] = uninitialized 21-byte findfirst search data
                                        ; SDA first filename pointer -> fully-qualified search template
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error
                retn
; ---------------------------------------------------------------------------

LOCAL_SEARCH_FIRST:                     ; ...
                call    test_remote_disk_flag
                jnz     short TEST_RE_NET3
                call    ECritDisk
                mov     ds:NoSetDir, 1
                call    CHECK_QUESTION
                jnb     short $+2

norm_GETPATH:                           ; ...
                call    GETPATH
                jnb     short find_check_dev
                jnz     short bad_path3
                or      cl, cl
                jz      short bad_path3

find_no_more:                           ; ...
                mov     ax, 12h

BadBye:                                 ; ...
                stc
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

bad_path3:                              ; ...
                mov     ax, 3
                jmp     short BadBye
; ---------------------------------------------------------------------------

find_check_dev:                         ; ...
                or      ah, ah
                jns     short found_entry
                mov     ds:LASTENT, 0FFFFh
                inc     ds:FOUND_DEV

found_entry:                            ; ...
                les     di, ds:DMAADD
                mov     si, ds:WFP_START
                lodsb
                sub     al, 40h ; '@'   ; 'A'-1
                stosb

found_it:                               ; ...
                les     di, ds:DMAADD
                inc     di
                push    ds
                mov     si, offset NAME1
                movsb
                cmp     byte ptr es:[di-1], 5
                jnz     short NOTKANJB
                mov     byte ptr es:[di-1], 0E5h

NOTKANJB:                               ; ...
                mov     cx, 10
                rep movsb
                pop     ds
                mov     al, ds:ATTRIB
                stosb
                push    ax
                mov     ax, ds:LASTENT
                stosw
                mov     ax, ds:DIRSTART
                stosw
                mov     ax, ds:DIRSTART_HW
                stosw
                add     di, 2
                pop     ax
                or      ah, ah
                js      short DOSREL
                cmp     word ptr ds:CURBUF, 0FFFFh
                jnz     short OKSTORE
                mov     word ptr es:[di-8], 0FFFFh
                jmp     short find_no_more
; ---------------------------------------------------------------------------

OKSTORE:                                ; ...
                mov     ds, word ptr ds:CURBUF+2

DOSREL:                                 ; ...
                mov     si, bx
                mov     cx, 32
                mov     ax, di
                rep movsb
                mov     di, ax
                cmp     byte ptr es:[di], 5
                jnz     short NO05
                mov     byte ptr es:[di], 0E5h

NO05:                                   ; ...
                push    ss
                pop     ds
                clc
                call    LCritDisk
                retn
DOS_SEARCH_FIRST endp


; =============== S U B R O U T I N E =======================================


DOS_SEARCH_NEXT proc near               ; ...
                les     di, ds:DMAADD
                mov     al, es:[di]
                test    al, 80h
                jz      short LOCAL_SEARCH_NEXT
                mov     ax, 111Ch
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
                                        ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------

LOCAL_SEARCH_NEXT:                      ; ...
                mov     ds:EXTERR_LOCUS, 2
                call    ECritDisk
                mov     word ptr ds:THISCDS, offset DUMMYCDS
                mov     word ptr ds:THISCDS+2, ds
                add     al, 40h ; '@'   ; 'A' - 1
                call    InitCDS
                jb      short No_files
                les     di, ds:THISCDS
                les     bp, es:[di+45h] ; [ES:DI+curdir.devptr]
                call    GOTDPB
                mov     al, es:[bp+0]
                mov     ds:THISDRV, al
                mov     word ptr ds:CREATING, 0E500h
                mov     ds:NoSetDir, 1
                lds     si, ds:DMAADD
                lodsb
DOS_SEARCH_NEXT endp


; =============== S U B R O U T I N E =======================================


RENAME_NEXT     proc near               ; ...
                push    ss
                pop     es
                mov     di, offset NAME1
                mov     cx, 11
                rep movsb
                lodsb
                mov     ss:ATTRIB, al
                lodsw
                or      ax, ax
                jns     short loc_BC3C

No_files:                               ; ...
                jmp     find_no_more
; ---------------------------------------------------------------------------

loc_BC3C:                               ; ...
                push    ax
                lodsw
                mov     bx, ax
                lodsw
                push    ss
                pop     ds
                mov     ds:ROOTCLUST_HW, ax
                les     bp, ds:THISDPB
                cmp     word ptr es:[bp+0Fh], 0
                jz      short loc_BC57
                mov     ds:ROOTCLUST_HW, 0

loc_BC57:                               ; ...
                call    SETDIRSRCH
                jnb     short loc_BC5F
                pop     ax
                jmp     short No_files
; ---------------------------------------------------------------------------

loc_BC5F:                               ; ...
                call    STARTSRCH
                pop     ax
                call    GETENT
                jb      short No_files
                call    NEXTENT
                jb      short No_files
                xor     ah, ah
                jmp     found_it
RENAME_NEXT     endp


; =============== S U B R O U T I N E =======================================


CHECK_QUESTION  proc near               ; ...
                push    ss
                pop     ds
                mov     si, ss:WFP_START

getnext:                                ; ...
                lodsb
                or      al, al
                jz      short NO_Question
                cmp     al, 3Fh ; '?'
                jnz     short getnext
                stc

NO_Question:                            ; ...
                retn
CHECK_QUESTION  endp


; =============== S U B R O U T I N E =======================================


DOS_ABORT       proc near               ; ...
                mov     es, ss:CurrentPDB
                mov     cx, es:32h      ; [ES:PDB.JFN_Length] ; Number of JFNs

reset_free_jfn:                         ; ...
                mov     bx, cx
                push    cx
                dec     bx
                call    $CLOSE
                pop     cx
                loop    reset_free_jfn
                push    ss
                pop     ds
                mov     ax, 111Dh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CLOSE ALL REMOTE FILES FOR PROCESS
                                        ; DS???, SS = DOS CS
                les     di, ss:SFTFCB
                mov     cx, es
                or      cx, di
                jcxz    short FCBScanDone
                mov     cx, es:[di+4]
                jcxz    short FCBScanDone
                lea     di, [di+6]
                mov     ax, ss:PROC_ID

FCBTest:                                ; ...
                cmp     es:[di+31h], ax
                jnz     short FCBNext
                call    SFT_FREE

FCBNext:                                ; ...
                add     di, 59          ; SF_ENTRY.size
                loop    FCBTest

FCBScanDone:                            ; ...
                xor     bx, bx

Scan:                                   ; ...
                push    bx
                call    SFFromSFN
                pop     bx
                jnb     short Scan1
                retn
; ---------------------------------------------------------------------------

Scan1:                                  ; ...
                cmp     word ptr es:[di], 0FFFFh
                jnz     short scan_next
                mov     ax, ss:PROC_ID
                cmp     es:[di+31h], ax
                jnz     short scan_next
                mov     ax, ss:USER_ID
                cmp     es:[di+2Fh], ax
                jnz     short scan_next
                call    SFT_FREE

scan_next:                              ; ...
                inc     bx
                jmp     short Scan
DOS_ABORT       endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DOS_CLOSE

loc_BCEF:                               ; ...
                push    ds
                pop     es
                mov     di, si

loc_BCF3:                               ; ...
                clc
                jmp     do_update2
; ---------------------------------------------------------------------------

loc_BCF7:                               ; ...
                test    bp, 40h         ; devid_file_clean
                jnz     short loc_BD00
                mov     al, 5
                stc

loc_BD00:                               ; ...
                jmp     CloseFinish
; ---------------------------------------------------------------------------

loc_BD03:                               ; ...
                mov     es:[di+12h], ax ; [es:di+dir_entry.dir_lstaccdate]
                jmp     short clook
; END OF FUNCTION CHUNK FOR DOS_CLOSE

; =============== S U B R O U T I N E =======================================


DOS_CLOSE       proc near               ; ...

; FUNCTION CHUNK AT 755F SIZE 0000001A BYTES

                les     di, ds:THISSFT
                mov     bx, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags]
                test    bx, 8000h       ; remote file ?
                jz      short LocalClose ; no
                mov     ax, 1106h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
                                        ; ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------

LocalClose:                             ; ...
                call    ECritDisk
                call    SetSFTTimes
                call    FREE_SFT
                push    ss
                pop     ds

CloseEntry:                             ; ...
                push    ax
                test    bx, 80h         ; devid_device
                jnz     short loc_BCF3
                push    bx
                call    DirFromSFT
                pop     bp              ; [ES:DI+SF_ENTRY.sf_flags]
                jb      short loc_BCF7
                test    ss:DOS_FLAG, 40h ; test bit 6 (large disk support -windows- bit?)
                                        ; NOTE: Retro DOS v5 kernel must set this bit.
                jnz     short CloseEntry3
                test    word ptr [si+2], 4 ; [si+SF_ENTRY.sf_mode], devid_device_null
                jnz     short CloseEntry3
                push    ds
                push    bx
                lds     bx, [si+7]      ; [si+SF_ENTRY.sf_devptr]
                mov     bl, [bx]        ; DPB.DRIVE
                mov     bh, 0
                test    ss:drive_flags[bx], 4 ; bit 2
                pop     bx
                pop     ds
                jz      short CloseEntry3
                test    bp, 40h         ; SF_ENTRY.sf_mode bit 6
                                        ; devid_file_clean
                jz      short CloseEntry2
                or      ss:EXTOPEN_ON, 2 ; EXT_OPEN_I24_OFF

CloseEntry2:                            ; ...
                push    ds
                call    DATE16
                pop     ds
                cmp     ax, es:[di+12h] ; [es:di+dir_entry.dir_lstaccdate]
                jnz     short loc_BD03

CloseEntry3:                            ; ...
                test    bp, 40h         ; devid_file_clean
                jnz     loc_BCEF

clook:                                  ; ...
                push    di
                push    si
                lea     si, [si+20h]    ; [si+SF_ENTRY.sf_name]
                call    XCHGP
                call    MetaCompare
                call    XCHGP
                pop     si
                pop     di
                jz      short CLOSE_GO
                mov     di, si
                push    ds
                pop     es
                push    ss
                pop     ds
                stc
                mov     al, 2           ; error_file_not_found
                jmp     CloseFinish
; ---------------------------------------------------------------------------

CLOSE_GO:                               ; ...
                test    bp, 40h         ; devid_file_clean
                jnz     short close_clean
                test    word ptr [si+2], 8000h ; [si+SF_ENTRY.sf_mode], sf_isnet
                jnz     short setattr   ; remote file
                mov     al, [si+4]      ; [si+SF_ENTRY.sf_attr]
                mov     es:[di+0Bh], al

setattr:                                ; ...
                or      byte ptr es:[di+0Bh], 20h ; [es:di+dir_entry.dir_attr],
                                        ; attr_archive

close_clean:                            ; ...
                mov     ax, [si+2Bh]    ; [SI+SF_ENTRY.sf_chain]
                                        ; first cluster (32 bit) low word !?
                mov     es:[di+1Ah], ax ; [ES:DI+dir_entry.dir_first]
                mov     ax, [si+2Dh]    ; [SI+SF_ENTRY.sf_chain+2]
                                        ; first cluster (32 bit) high word !?
                mov     es:[di+14h], ax ; [ES:DI+dir_entry.dir_fclus_hi]
                mov     ax, [si+11h]    ; [SI+SF_ENTRY.sf_size]
                mov     es:[di+1Ch], ax ; [ES:DI+dir_entry.dir_size_l]
                mov     ax, [si+13h]    ; [SI+SF_ENTRY.sf_size+2]
                mov     es:[di+1Eh], ax ; [ES:DI+dir_entry.dir_size_h]
                mov     ax, [si+0Fh]    ; [SI+SF_ENTRY.sf_date]
                mov     es:[di+18h], ax ; [ES:DI+dir_entry.dir_date]
                mov     ax, [si+0Dh]    ; [SI+SF_ENTRY.sf_time]
                mov     es:[di+16h], ax ; [ES:DI+dir_entry.dir_time]
                test    byte ptr es:[bx+5], 40h ; [ES:BX+BUFFINFO.buf_flags],
                                        ; buf_dirty
                jnz     short yesdirty4
                call    inc_DirtyBufferCount
                or      byte ptr es:[bx+5], 40h ; [ES:BX+BUFFINFO.buf_flags],
                                        ; buf_dirty

yesdirty4:                              ; ...
                push    ds
                push    si
                push    ss
                pop     ds
                mov     al, ds:THISDRV
                call    FLUSHBUF
                pop     di
                pop     es
                jnb     short do_update2
                push    ds
                push    bx
                lds     bx, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
                mov     bl, [bx]        ; DPB.DRIVE
                mov     bh, 0
                and     ds:drive_flags[bx], 0FBh ; clear bit 2
                pop     bx
                pop     ds
                mov     al, 5
                stc

do_update2:                             ; ...
                jb      short CloseFinish
                test    word ptr es:[di+5], 8080h ; [ES:DI+SF_ENTRY.sf_flags],
                                        ; sf_isnet+devid_device
                jnz     short CloseFinish
                push    es
                push    bp
                les     bp, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
                call    update_fat32_fsinfo
                pop     bp
                pop     es
                clc

CloseFinish:                            ; ...
                pushf
                call    DEV_CLOSE_SFT
                popf
                pop     cx
                pushf
                dec     cx
                jnz     short NoFree
                call    SFT_FREE

NoFree:                                 ; ...
                call    LCritDisk
                popf
                push    ss
                pop     ds
                retn
DOS_CLOSE       endp


; =============== S U B R O U T I N E =======================================


FREE_SFT        proc near               ; ...
                pushf
                mov     ax, es:[di]     ; [ES:DI+SF_ENTRY.sf_ref_count]
                dec     ax
                jnz     short SetCount
                dec     ax

SetCount:                               ; ...
                xchg    ax, es:[di]
                popf
                retn
FREE_SFT        endp


; =============== S U B R O U T I N E =======================================


DOS_COMMIT      proc near               ; ...
                les     di, ds:THISSFT
                mov     bx, es:[di+5]
                test    bx, 0C0h
                jnz     short localcommit_retn
                test    bx, 8000h
                jz      short LOCAL_COMMIT
                mov     ax, 1107h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
                                        ; ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful

localcommit_retn:                       ; ...
                retn
; ---------------------------------------------------------------------------

LOCAL_COMMIT:                           ; ...
                call    ECritDisk
                call    ECritDisk
                call    SetSFTTimes
                mov     ax, 0FFFFh
                call    CloseEntry
                pushf
                call    DEV_OPEN_SFT
                popf
                call    LCritDisk
                retn
DOS_COMMIT      endp


; =============== S U B R O U T I N E =======================================


SetSFTTimes     proc near               ; ...
                test    bx, 0C0h        ; devid_file_clean+devid_device
                jnz     short localcommit_retn
                test    bx, 4000h       ; sf_close_nodate
                jnz     short localcommit_retn ; nodate => no timestamp
                push    ax
                call    DATE16
                mov     es:[di+0Fh], ax ; [ES:DI+SF_ENTRY.sf_date]
                mov     es:[di+0Dh], dx ; [ES:DI+SF_ENTRY.sf_time]
                pop     ax

localcommit_retn:                       ; ...
                retn
SetSFTTimes     endp

; ---------------------------------------------------------------------------

DOS_MKDIR:                              ; ...
                call    TestNet
                jnb     short LOCAL_MKDIR
                mov     ax, 1103h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
                                        ; SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified directory name
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DOS_CHDIR

NODEACCERRJ:                            ; ...
                mov     ax, 5           ; error_access_denied

loc_BE9A:                               ; ...
                stc
                call    LCritDisk
                retn
; END OF FUNCTION CHUNK FOR DOS_CHDIR
; ---------------------------------------------------------------------------

PATHNFJ:                                ; ...
                call    LCritDisk
                jmp     SET_MKND_ERR
; ---------------------------------------------------------------------------

LOCAL_MKDIR:                            ; ...
                call    ECritDisk
                mov     word ptr ds:THISSFT+2, ss
                mov     word ptr ds:THISSFT, offset RENBUF
                mov     word ptr ds:RENBUF+33h, 0
                mov     word ptr ds:RENBUF+2, 2
                mov     al, 10h
                call    MakeNode
                jb      short PATHNFJ
                cmp     ax, 3
                jz      short NODEACCERRJ
                les     bp, ds:THISDPB
                lds     di, ds:CURBUF
                sub     si, di
                push    si
                push    large dword ptr [di+6]
                push    ss
                pop     ds
                mov     dx, ds:DIRSTART_HW
                mov     ax, ds:DIRSTART
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jnz     short LOCAL_MKDIR_cont ; not FAT32
                cmp     dx, es:[bp+37h] ; [es:bp+DPB.ROOT_CLUSTER]
                jnz     short LOCAL_MKDIR_cont
                cmp     ax, es:[bp+35h] ; [es:bp+DPB.ROOT_CLUSTER+2]
                jnz     short LOCAL_MKDIR_cont
                xor     ax, ax
                xor     dx, dx

LOCAL_MKDIR_cont:                       ; ...
                push    dx
                push    ax
                xor     ax, ax
                mov     ds:DIRSTART, ax
                mov     ds:DIRSTART_HW, ax
                call    NEWDIR
                jb      NODEEXISTSPOPDEL
                call    GETENT
                jb      NODEEXISTSPOPDEL
                les     di, ds:CURBUF
                test    byte ptr es:[di+5], 40h
                jnz     short yesdirty5
                call    inc_DirtyBufferCount
                or      byte ptr es:[di+5], 40h

yesdirty5:                              ; ...
                add     di, 24
                mov     ax, 202Eh       ; ". " ; (NASM syntax)
                mov     dx, ds:DIRSTART_HW
                mov     ds:CLUSTERS_HW, dx
                mov     dx, ds:DIRSTART
                call    SETDOTENT
                mov     ax, 2E2Eh       ; ".."
                pop     dx
                pop     ds:CLUSTERS_HW
                call    SETDOTENT
                les     bp, ds:THISDPB
                mov     ds:ALLOWED, 18h
                pop     dx
                pop     ds:HIGH_SECTOR
                xor     al, al
                call    GETBUFFR
                jb      short NODEEXISTSP
                mov     dx, ds:DIRSTART_HW
                mov     ax, ds:DIRSTART
                lds     di, ds:CURBUF
                or      byte ptr [di+5], 4 ; [DI+BUFFINFO.buf_flags],buf_isDIR
                pop     si
                add     si, di
                mov     [si], ax
                mov     [si-6], dx
                xor     dx, dx
                mov     [si+2], dx
                mov     [si+4], dx

; =============== S U B R O U T I N E =======================================


DIRUP           proc near               ; ...
                test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
                jnz     short yesdirty6
                call    inc_DirtyBufferCount
                or      byte ptr [di+5], 40h

yesdirty6:                              ; ...
                push    ss
                pop     ds
                call    update_fat32_fsinfo
                mov     al, es:[bp+0]   ; [ES:BP+DPB.DRIVE]
                call    FLUSHBUF
                mov     ax, 5           ; error_access_denied
                call    LCritDisk
                retn
DIRUP           endp

; ---------------------------------------------------------------------------

NODEEXISTSPOPDEL:                       ; ...
                pop     dx
                pop     dx
                pop     dx
                pop     ds:HIGH_SECTOR
                les     bp, ds:THISDPB
                mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                xor     al, al
                call    GETBUFFR
                jb      short NODEEXISTSP
                lds     di, ds:CURBUF
                or      byte ptr [di+5], 4
                pop     si
                add     si, di
                sub     si, 26
                mov     byte ptr [si], 0E5h
                call    DIRUP

NODEEXISTS:                             ; ...
                jmp     NODEACCERRJ
; ---------------------------------------------------------------------------

NODEEXISTSP:                            ; ...
                pop     si
                jmp     short NODEEXISTS

; =============== S U B R O U T I N E =======================================


DOS_CHDIR       proc near               ; ...

; FUNCTION CHUNK AT 7707 SIZE 00000008 BYTES

                call    TestNet
                jnb     short LOCAL_CHDIR
                mov     ax, 1105h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - CHDIR
                                        ; SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified directory name
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------

LOCAL_CHDIR:                            ; ...
                call    ECritDisk
                test    word ptr es:[di+43h], 2000h ; [ES:DI+curdir.flags],curdir_splice
                jz      short nojoin
                mov     dword ptr es:[di+49h], 0FFFFFFFFh ; [ES:DI+curdir.ID]

nojoin:                                 ; ...
                mov     ds:NoSetDir, 0  ; FALSE
                mov     ds:SATTRIB, 16h ; attr_directory+attr_system+attr_hidden
                call    GETPATH
                mov     ax, 3           ; error_path_not_found
                jb      short ChDirDone
                jnz     short NOTDIRPATH ; Path not a DIR
                mov     cx, ds:DIRSTART ; Get cluster number
                clc

ChDirDone:                              ; ...
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

DOS_RMDIR:                              ; ...
                call    TestNet
                jnb     short LOCAL_RMDIR
                mov     ax, 1101h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
                                        ; SS = DOS CS
                                        ; SDA first filename pointer -> fully-qualified directory name
                                        ; SDA CDS pointer -> current directory
                                        ; Return: CF set on error, AX = DOS error code
                                        ; CF clear if successful
                retn
; ---------------------------------------------------------------------------

LOCAL_RMDIR:                            ; ...
                call    ECritDisk
                mov     ds:NoSetDir, 0
                mov     ds:SATTRIB, 16h ; attr_directory+attr_system+attr_hidden
                call    GETPATH
                jb      short NOPATH    ; Path not found
                jnz     short NOTDIRPATH ; Path not a DIR
                cmp     ds:DIRSTART_HW, 0 ; Root ?
                jnz     short LOCAL_RMDIR_cont ; no
                cmp     ds:DIRSTART, 0
                jz      short NOTDIRPATH ; yes

LOCAL_RMDIR_cont:                       ; ...
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jnz     short rmdir_get_buf ; not FAT32
                mov     di, ds:DIRSTART_HW
                cmp     di, es:[bp+37h] ; [es:bp+DPB.ROOT_CLUSTER+2]
                jnz     short rmdir_get_buf
                mov     di, ds:DIRSTART
                cmp     di, es:[bp+35h] ; [es:bp+DPB.ROOT_CLUSTER]
                jnz     short rmdir_get_buf
                jmp     short NOTDIRPATH
; ---------------------------------------------------------------------------

NOPATH:                                 ; ...
                mov     ax, 3           ; error_path_not_found
                jmp     loc_BE9A
; ---------------------------------------------------------------------------

NOTDIRPATHPOP:                          ; ...
                pop     ax
                pop     ax

NOTDIRPATHPOP2:                         ; ...
                pop     ax

NOTDIRPATH:                             ; ...
                jmp     NODEACCERRJ
; ---------------------------------------------------------------------------

rmdir_get_buf:                          ; ...
                mov     di, offset SRC_LNE
                call    move_LNE_parms
                lds     di, ds:CURBUF
                sub     bx, di          ; Compute true offset
                push    bx
                push    large dword ptr [di+6] ; [DI+BUFFINFO.buf_sector]
                push    ss
                pop     ds
                push    ss
                pop     es
                mov     di, offset NAME1
                mov     al, 3Fh ; '?'
                mov     cx, 11
                rep stosb
                xor     al, al
                stosb                   ; Nul terminate it
                call    STARTSRCH       ; Set search
                call    GETENTRY        ; Get start of directory
                jb      short NOTDIRPATHPOP
                mov     ds, word ptr ds:CURBUF+2
                mov     si, bx
                lodsw
                cmp     ax, 202Eh       ; First entry '.'?
                jnz     short NOTDIRPATHPOP ; Nope
                add     si, 30
                lodsw
                cmp     ax, 2E2Eh       ; Second entry '..'?
                jnz     short NOTDIRPATHPOP ; Nope
                push    ss
                pop     ds
                mov     ds:LASTENT, 2   ; Skip . and ..
                call    GETENTRY        ; Get next entry
                jb      short NOTDIRPATHPOP
                mov     ds:ATTRIB, 16h  ; attr_directory+attr_hidden+attr_system
                call    SRCH            ; Do a search
                jnb     short NOTDIRPATHPOP
                cmp     ds:FAILERR, 0
                jnz     short NOTDIRPATHPOP
                les     bp, ds:THISDPB
                mov     bx, ds:DIRSTART_HW
                mov     ds:CLUSTNUM_HW, bx
                mov     bx, ds:DIRSTART
                call    RELEASE         ; Release data in sub dir
                jb      short NOTDIRPATHPOP
                call    update_fat32_fsinfo
                pop     dx
                pop     ds:HIGH_SECTOR

rmdir_dlne:
                cmp     word ptr ds:SRC_LNE, 0
                jz      short rmdir_fde
                pop     ax
                inc     word ptr ds:SRC_LNE
                mov     di, offset SRC_LNE
                call    delete_longname_entry
                mov     ax, 5
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

rmdir_fde:                              ; ...
                mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                xor     al, al          ; Pre read
                call    GETBUFFR        ; Get sector back
                jb      NOTDIRPATHPOP2
                lds     di, ds:CURBUF
                or      byte ptr [di+5], 4 ; [DI+BUFFINFO.buf_flags],buf_isDIR
                pop     bx              ; Pointer to start of entry
                add     bx, di          ; Corrected
                mov     byte ptr [bx], 0E5h ; Free the entry
                jmp     DIRUP
DOS_CHDIR       endp


; =============== S U B R O U T I N E =======================================


SWAPBACK        proc near               ; ...
                mov     ds:CONSWAP, 0
                retn
SWAPBACK        endp


; =============== S U B R O U T I N E =======================================


SWAPCON         proc near               ; ...
                mov     ds:CONSWAP, 1
                push    ax
                mov     ax, word ptr ds:THISSFT
                mov     ds:CONSFT, ax
                mov     ax, word ptr ds:THISSFT+2
                mov     ds:CONSFT+2, ax
                pop     ax
                retn
SWAPCON         endp


; =============== S U B R O U T I N E =======================================


DOS_READ        proc near               ; ...
                les     di, ds:THISSFT
                mov     al, es:[di+2]
                and     al, 3
                cmp     al, 1
                jnz     short READ_NO_MODE
                jmp     SET_ACC_ERR
; ---------------------------------------------------------------------------

READ_NO_MODE:                           ; ...
                call    SETUP
                jcxz    short NoIORet
                call    IsSFTNet
                jz      short LOCAL_READ
                mov     ax, 1108h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
                                        ; ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file
                                        ; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
                                        ; Return: CF set on error, CX = bytes read
                retn
; ---------------------------------------------------------------------------

NoIORet:                                ; ...
                clc
                retn
; ---------------------------------------------------------------------------

LOCAL_READ:                             ; ...
                test    byte ptr es:[di+5], 80h ; [ES:DI+SF_ENTRY.sf_flags],devid_device
                jnz     short READDEV
                mov     ds:EXTERR_LOCUS, 2 ; errLOC_Disk
                call    ECritDisk
                call    DISKREAD
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

READDEV:                                ; ...
                mov     ds:EXTERR_LOCUS, 4 ; errLOC_SerDev
                mov     bl, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags]
                les     di, ds:DMAADD
                test    bl, 40h         ; devid_device_EOF ; End of file?
                jz      short ENDRDDEVJ3
                test    bl, 4           ; devid_device_null ; NUL device?
                jz      short TESTRAW   ; no
                xor     al, al          ; Indicate EOF by setting zero

ENDRDDEVJ3:                             ; ...
                jmp     ENDRDDEVJ
; ---------------------------------------------------------------------------

TESTRAW:                                ; ...
                test    bl, 20h         ; devid_device_raw ; Raw mode?
                jnz     short DVRDRAW   ; Yes, let the device do all local editing
                test    bl, 1           ; devid_device_con_in ; Is it console device?
                jz      short NOTRDCON  ; no
                jmp     READCON         ; yes
; ---------------------------------------------------------------------------

DVRDRAW:                                ; ...
                push    es
                pop     ds              ; Xaddr to DS:DI
                test    ss:IsWin386, 1
                jz      short ReadRawRetry ; not present
                test    bl, 1           ; devid_device_con_in ; is it console device?
                jz      short ReadRawRetry ; no, do normal read
                jmp     do_polling      ; yes, do win386 polling loop
; ---------------------------------------------------------------------------

ReadRawRetry:                           ; ...
                mov     bx, di          ; DS:BX transfer addr
                xor     ax, ax          ; Media Byte, unit = 0
                mov     dx, ax          ; Start at 0
                call    SETREAD
                push    ds
                lds     si, ss:THISSFT
                call    DEVIOCALL
                mov     dx, di
                mov     ah, 86h         ; Read error
                mov     di, ss:DEVCALL_REQSTAT
                or      di, di
                jns     short CRDROK    ; no errors
                call    CHARHARD
                mov     di, dx          ; DS:DI is Xaddr
                add     di, ss:CALLBPB  ; [ss:CALLSCNT]
                sub     cx, ss:CALLBPB  ; [ss:CALLSCNT]
                or      al, al
                jz      short CRDROK    ; Ignore
                cmp     al, 3
                jz      short CRDFERR   ; fail
                pop     ds
                jmp     short ReadRawRetry ; Retry
; ---------------------------------------------------------------------------

CRDFERR:                                ; ...
                pop     di              ; Clean stack

DEVIOFERR:                              ; ...
                les     di, ss:THISSFT
                jmp     SET_ACC_ERR_DS
; ---------------------------------------------------------------------------

CRDROK:                                 ; ...
                pop     di              ; Chuck saved seg of Xaddr
                mov     di, dx
                add     di, ss:CALLBPB  ; [ss:CALLSCNT] ; Amount transferred
                jmp     short ENDRDDEVJ3
; ---------------------------------------------------------------------------

NOTRDCON:                               ; ...
                mov     ax, es
                mov     ds, ax
                mov     bx, di
                xor     dx, dx
                mov     ax, dx
                push    cx
                mov     cx, 1
                call    SETREAD
                pop     cx
                lds     si, ss:THISSFT
                lds     si, [si+7]      ; [SI+SF_ENTRY.sf_devptr]

DVRDLP:                                 ; ...
                mov     al, 1
                call    DSKSTATCHK
                call    DEVIOCALL2
                push    di              ; Save "count" done
                mov     ah, 86h
                mov     di, ss:DEVCALL_REQSTAT
                or      di, di
                jns     short CRDOK
                call    CHARHARD
                pop     di
                mov     ss:CALLBPB, 1   ; [SS:CALLSCNT]
                cmp     al, 1
                jz      short DVRDLP    ; Retry
                cmp     al, 3
                jz      short DEVIOFERR ; FAIL
                xor     al, al          ; Ignore, Pick some random character
                jmp     short DVRDIGN
; ---------------------------------------------------------------------------

CRDOK:                                  ; ...
                pop     di
                cmp     ss:CALLBPB, 1   ; [SS:CALLSCNT]
                jnz     short ENDRDDEVJ
                push    ds
                mov     ds, ss:CALLXAD_2 ; [SS:CALLXAD+2]
                mov     al, [di]        ; Get the character we just read
                pop     ds

DVRDIGN:                                ; ...
                inc     word ptr ss:CALLBR ; [SS:CALLXAD] ; Next character
                mov     ss:DEVCALL_REQSTAT, 0
                inc     di              ; Next character
                cmp     al, 1Ah         ; ^Z?
                jz      short ENDRDDEVJ ; Yes, done zero set (EOF)
                cmp     al, 0Dh         ; c_CR ; CR?
                loopne  DVRDLP          ; Loop if no, else done
                inc     ax              ; Resets zero flag so NOT EOF, unless

ENDRDDEVJ:                              ; ...
                jmp     ENDRDDEV
; ---------------------------------------------------------------------------

do_polling:                             ; ...
                mov     bx, di          ; ds:bx is Xfer address
                xor     ax, ax
                mov     dx, ax
                call    SETREAD         ; prepare device packet

do_io:                                  ; ...
                mov     byte ptr es:[bx+2], 5 ; DEVRDND ; Change command code
                push    ds
                lds     si, ss:THISSFT  ; get device header
                call    DEVIOCALL       ; call device driver
                pop     ds
                test    word ptr es:[bx+3], 8000h ; [es:bx+SRHEAD.REQSTAT],
                                        ; STERR ; check if error
                jz      short check_busy
                push    ds
                mov     dx, di
                call    CHARHARD        ; invoke int 24h handler
                mov     di, dx
                or      al, al
                jz      short pop_done_read ; ignore by user,assume read is done
                cmp     al, 3
                jz      short devrderr  ; user issued a 'fail',indicate error
                pop     ds
                jmp     short do_io     ; user issued a retry
; ---------------------------------------------------------------------------

check_busy:                             ; ...
                test    word ptr es:[bx+3], 200h ; [es:bx+SRHEAD.REQSTAT],0200h
                                        ; see if busy bit set
                jnz     short no_char
                mov     byte ptr es:[bx+2], 4 ; DEVRD ; command code is READ now
                mov     word ptr es:[bx+12h], 1 ; change count to 1 character
                push    ds
                lds     si, ss:THISSFT
                call    DEVIOCALL
                mov     dx, di
                mov     ah, 86h
                mov     di, es:[bx+3]   ; [es:bx+SRHEAD.REQSTAT]
                                        ; get returned status
                test    di, 8000h       ; STERR ; was there an error during read?
                jz      short next_char ; no,read next character
                call    CHARHARD
                mov     di, dx
                or      al, al
                jz      short pop_done_read
                cmp     al, 3
                jz      short devrderr
                pop     ds
                jmp     short do_io
; ---------------------------------------------------------------------------

next_char:                              ; ...
                pop     ds
                mov     di, dx
                dec     cx              ; decrement count
                jcxz    short done_read ; all characters read in
                inc     word ptr es:[bx+0Eh] ; update transfer address
                jmp     short do_io     ; read next character in
; ---------------------------------------------------------------------------

devrderr:                               ; ...
                pop     di              ; discard segment address
                les     di, ss:THISSFT
                jmp     SET_ACC_ERR_DS  ; indicate error
; ---------------------------------------------------------------------------

no_char:                                ; ...
                push    ax
                mov     ah, 84h
                int     2Ah             ; Microsoft Networks - KEYBOARD BUSY LOOP
                                        ; indicate idle to WIN386
                pop     ax
                jmp     do_io
; ---------------------------------------------------------------------------

pop_done_read:                          ; ...
                pop     ds

done_read:                              ; ...
                add     di, ss:CALLBPB  ; [ss:CALLSCNT]
                jmp     ENDRDDEVJ3      ; jump back to normal DOS raw read exit
; ---------------------------------------------------------------------------

TRANBUF:                                ; ...
                lodsb
                stosb
                cmp     al, 0Dh         ; c_CR ; Check for carriage return
                jnz     short NORMCH
                mov     byte ptr [si], 0Ah ; c_LF

NORMCH:                                 ; ...
                cmp     al, 0Ah         ; c_LF
                loopne  TRANBUF
                jnz     short ENDRDCON
                xor     si, si          ; Cause a new buffer to be read
                call    OUTT            ; Transmit linefeed
                or      al, 1           ; Clear zero flag--not end of file

ENDRDCON:                               ; ...
                push    ss
                pop     ds
                call    SWAPBACK
                mov     ds:CONTPOS, si

ENDRDDEV:                               ; ...
                push    ss
                pop     ds
                mov     ds:NEXTADD, di
                jnz     short SETSFTC   ; Zero set if Ctrl-Z found in input
                les     di, ds:THISSFT
                and     byte ptr es:[di+5], 0BFh ; [ES:DI+SF_ENTRY.sf_flags],
                                        ; ~devid_device_EOF
                                        ; Mark as no more data available

SETSFTC:                                ; ...
                call    SETSFT
                retn
; ---------------------------------------------------------------------------

READCON:                                ; ...
                call    SWAPCON
                mov     si, ds:CONTPOS
                or      si, si
                jnz     short TRANBUF
                cmp     ds:CONBUF, 80h  ; 128
                jz      short GETBUF
                mov     word ptr ds:CONBUF, 0FF80h ;
                                        ; Set up 128-byte buffer with no template

GETBUF:                                 ; ...
                push    cx
                push    es
                push    di
                mov     dx, offset CONBUF
                call    $STD_CON_STRING_INPUT ; Get input buffer
                pop     di
                pop     es
                pop     cx
                mov     si, (offset CONBUF+2)
                cmp     byte ptr [si], 1Ah ; Check for Ctrl-Z in first character
                jnz     short TRANBUF
                mov     al, 1Ah
                stosb
                dec     di
                mov     al, 0Ah         ; c_LF
                call    OUTT            ; Send linefeed
                xor     si, si
                jmp     short ENDRDCON
DOS_READ        endp


; =============== S U B R O U T I N E =======================================


DOS_WRITE       proc near               ; ...
                les     di, ds:THISSFT
                mov     al, es:[di+2]   ; [ES:DI+SF_ENTRY.sf_mode]
                and     al, 3           ; open_mode_mask ?
                cmp     al, 0           ; open_for_read
                jnz     short Check_FCB_RO

BadMode:                                ; ...
                jmp     SET_ACC_ERR
; ---------------------------------------------------------------------------

Check_FCB_RO:                           ; ...
                test    byte ptr es:[di+3], 80h ; [ES:DI+SF_ENTRY.sf_mode+1],
                                        ; (sf_isFCB>>8)
                jz      short WRITE_NO_MODE ; Not an FCB
                test    byte ptr es:[di+4], 1 ; [ES:DI+SF_ENTRY.sf_attr],
                                        ; attr_read_only
                jnz     short BadMode   ; Can't write to Read_Only files via FCB

WRITE_NO_MODE:                          ; ...
                call    SETUP
                call    IsSFTNet        ; [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
                jz      short LOCAL_WRITE
                mov     ax, 1109h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
                                        ; ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file
                                        ; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
                                        ; Return: CF set on error, CX = bytes written
                retn
; ---------------------------------------------------------------------------

LOCAL_WRITE:                            ; ...
                test    byte ptr es:[di+5], 80h ; [ES:DI+SF_ENTRY.sf_flags],devid_device
                                        ; Check for named device I/O
                jnz     short WRTDEV
                mov     ds:EXTERR_LOCUS, 2 ; errLOC_Disk
                call    ECritDisk
                call    DISKWRITE
                jb      short nocommit
                les     di, ds:THISSFT
                test    byte ptr es:[di+3], 40h ; [ES:DI+SF_ENTRY.sf_mode+1],
                                        ; (AUTO_COMMIT_WRITE>>8)
                jz      short nocommit
                push    cx
                call    DOS_COMMIT
                pop     cx

nocommit:                               ; ...
                call    LCritDisk
                retn
; ---------------------------------------------------------------------------

DVWRTRAW:                               ; ...
                xor     ax, ax          ; Media Byte, unit = 0
                call    SETWRITE
                push    ds              ; Save seg of transfer
                lds     si, ss:THISSFT
                call    DEVIOCALL       ; DS:SI -> DEVICE
                mov     dx, di          ; Offset part of Xaddr saved in DX
                mov     ah, 87h
                mov     di, ss:DEVCALL_REQSTAT
                or      di, di
                jns     short CWRTROK
                call    CHARHARD
                sub     cx, ss:CALLBPB  ; [ss:CALLSCNT]
                mov     bx, dx          ; update ptr & count to reflect
                                        ; number of chars xferred
                add     bx, ss:CALLBPB  ; [ss:CALLSCNT]
                mov     di, bx          ; Recall transfer addr
                or      al, al
                jz      short CWRTROK   ; Ignore
                cmp     al, 3
                jz      short CWRFERR
                pop     ds              ; Recover saved seg of transfer
                jmp     short DVWRTRAW  ; Try again
; ---------------------------------------------------------------------------

CWRFERR:                                ; ...
                pop     ax              ; Chuck saved seg of transfer
                jmp     CRDFERR         ; Will pop one more stack element
; ---------------------------------------------------------------------------

CWRTROK:                                ; ...
                pop     ax              ; Chuck saved seg of transfer
                pop     ds
                mov     ax, ds:CALLBPB  ; [CALLSCNT]
                                        ; Get actual number of bytes transferred

ENDWRDEV:                               ; ...
                les     di, ds:THISSFT
                mov     cx, ax
                call    ADDREC
                retn
; ---------------------------------------------------------------------------

WRTNUL:                                 ; ...
                mov     dx, cx          ; Entire transfer done

WRTCOOKJ:                               ; ...
                jmp     WRTCOOKDONE
; ---------------------------------------------------------------------------

WRTDEV:                                 ; ...
                mov     ds:EXTERR_LOCUS, 4 ; errLOC_SerDev
                or      byte ptr es:[di+5], 40h ; [ES:DI+SF_ENTRY.sf_flags],
                                        ; devid_device_EOF
                                        ; Reset EOF for input
                mov     bl, es:[di+5]   ; [ES:DI+SF_ENTRY.sf_flags]
                xor     ax, ax
                jcxz    short ENDWRDEV  ; problem of creating on a device
                push    ds
                mov     al, bl
                lds     bx, ds:DMAADD   ; Xaddr to DS:BX
                mov     di, bx          ; Xaddr to DS:DI
                xor     dx, dx          ; Set starting point
                test    al, 20h         ; devid_device_raw
                jz      short TEST_DEV_CON
                jmp     short DVWRTRAW
; ---------------------------------------------------------------------------

TEST_DEV_CON:                           ; ...
                test    al, 2           ; devid_device_con_out
                                        ; Console output device?
                jnz     short WRITECON  ; yes
                test    al, 4           ; devid_device_null
                jnz     short WRTNUL
                mov     ax, dx
                cmp     byte ptr [bx], 1Ah ; ^Z?
                jz      short WRTCOOKJ  ; Yes, transfer nothing
                push    cx
                mov     cx, 1
                call    SETWRITE
                pop     cx
                lds     si, ss:THISSFT
                lds     si, [si+7]      ; [SI+SF_ENTRY.sf_devptr]

DVWRTLP:                                ; ...
                mov     al, 0
                call    DSKSTATCHK
                call    DEVIOCALL2
                push    di
                mov     ah, 87h
                mov     di, ss:DEVCALL_REQSTAT
                or      di, di
                jns     short CWROK
                call    CHARHARD
                pop     di
                mov     ss:CALLBPB, 1   ; [SS:CALLSCNT]
                cmp     al, 1
                jz      short DVWRTLP   ; Retry
                or      al, al
                jz      short DVWRTIGN  ; Ignore
                jmp     CRDFERR         ; Fail, pops one stack element
; ---------------------------------------------------------------------------

CWROK:                                  ; ...
                pop     di
                cmp     ss:CALLBPB, 0   ; [SS:CALLSCNT]
                jz      short WRTCOOKDONE

DVWRTIGN:                               ; ...
                inc     dx
                inc     word ptr ss:CALLBR ; [SS:CALLXAD]
                inc     di
                dec     cx
                jcxz    short WRTCOOKDONE
                push    ds
                mov     ds, ss:CALLXAD_2 ; [SS:CALLXAD+2]
                cmp     byte ptr [di], 1Ah ; ^Z?
                pop     ds
                jz      short WRTCOOKDONE
                mov     ss:DEVCALL_REQSTAT, 0
                jmp     short DVWRTLP
; ---------------------------------------------------------------------------

WRTCOOKDONE:                            ; ...
                mov     ax, dx
                pop     ds
                jmp     ENDWRDEV
; ---------------------------------------------------------------------------

WRITECON:                               ; ...
                push    ds
                push    ss
                pop     ds
                call    SWAPCON
                pop     ds
                mov     si, bx
                push    cx
                test    ss:DOS_FLAG, 8
                jnz     short WRITECON1
                or      ss:DOS_FLAG, 10h ; set bit 4

WRITECON1:                              ; ...
                lodsb
                cmp     al, 1Ah         ; ^Z?
                jz      short CONEOF    ; yes
                cmp     cx, 1
                jnz     short WRITECON2
                and     ss:DOS_FLAG, 0EFh ; clear/reset bit 4

WRITECON2:                              ; ...
                call    OUTT
                loop    WRITECON1

CONEOF:                                 ; ...
                pop     ax              ; Count
                sub     ax, cx          ; Amount actually written
                pop     ds
                call    SWAPBACK
                jmp     ENDWRDEV
DOS_WRITE       endp


; =============== S U B R O U T I N E =======================================


GET_IO_SFT      proc near               ; ...
                cmp     ss:CONSWAP, 0   ; Convert JFN num in BX to sf_entry in DS:SI
                jnz     short GetRedir

GetNormal:                              ; ...
                push    ss
                pop     ds
                push    es
                push    di
                call    SFFromHandle
                jb      short RET44P
                mov     si, es
                mov     ds, si
                mov     si, di

RET44P:                                 ; ...
                pop     di
                pop     es
                retn
; ---------------------------------------------------------------------------

GetRedir:                               ; ...
                cmp     bx, 1
                ja      short GetNormal
                lds     si, dword ptr ss:CONSFT
                clc
                retn
GET_IO_SFT      endp


; =============== S U B R O U T I N E =======================================


HARDERRRW       proc near               ; ...
                cmp     al, 0Fh         ; error_I24_wrong_disk
                jnz     short DO_ERR
                push    ax
                mov     ax, word ptr ss:CALLVIDRW
                mov     word ptr ss:EXTERRPT, ax
                mov     ax, word ptr ss:CALLVIDRW+2
                mov     word ptr ss:EXTERRPT+2, ax
                pop     ax

DO_ERR:                                 ; ...
                call    HARDERR
                retn
HARDERRRW       endp


; =============== S U B R O U T I N E =======================================


SETUP           proc near               ; ...
                lds     si, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
                mov     word ptr ss:THISDPB+2, ds
                push    ss
                pop     ds
                mov     word ptr ds:THISDPB, si
                mov     bx, word ptr ds:DMAADD
                mov     ds:NEXTADD, bx
                mov     ds:TRANS, 0
                mov     eax, es:[di+15h] ; [ES:DI+SF_ENTRY.sf_position]
                mov     ds:BYTPOS, eax
                test    word ptr es:[di+5], 8080h ; ES:DI+SF_ENTRY.sf_flags],
                                        ; sf_isnet+devid_device
                jnz     short NOSETSTUFF
                push    es
                les     bp, ds:THISDPB
                mov     bl, es:[bp+0]   ; ES:BP+DPB.DRIVE]
                mov     ds:THISDRV, bl
                movzx   ebx, word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                xor     edx, edx
                div     ebx
                mov     ds:BYTSECPOS, dx
                mov     ds:SECPOS, eax
                mov     bx, ax
                and     bl, es:[bp+4]   ; [ES:BP+DPB.CLUSTER_MASK]
                mov     ds:SECCLUSPOS, bl
                push    cx
                mov     cl, es:[bp+5]   ; [ES:BP+DPB.CLUSTER_SHIFT]
                shr     eax, cl
                pop     cx
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jz      short setup_1   ; not FAT32
                cmp     ax, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
                jmp     short setup_2
; ---------------------------------------------------------------------------

setup_1:                                ; ...
                cmp     eax, es:[bp+2Dh] ; [ES:BP+DPB.LAST_CLUSTER]

setup_2:                                ; ...
                ja      short EOFERR
                mov     ds:CLUSNUM, ax
                shr     eax, 16
                mov     ds:CLUSNUM_HW, ax
                pop     es

NOSETSTUFF:                             ; ...
                mov     ax, cx
                add     ax, word ptr ds:DMAADD
                jnb     short setup_OK
                mov     ax, word ptr ds:DMAADD
                neg     ax
                jnz     short NoDec
                dec     ax

NoDec:                                  ; ...
                mov     cx, ax
                jcxz    short NOROOM

setup_OK:                               ; ...
                retn
; ---------------------------------------------------------------------------

EOFERR:                                 ; ...
                pop     es
                xor     cx, cx

NOROOM:                                 ; ...
                pop     bx
                clc
                retn
SETUP           endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


FINDENTRY       proc near               ; ...
                call    STARTSRCH
                mov     al, ds:ATTRIB
                and     al, 9Eh         ; ~attr_ignore
                cmp     al, 8           ; attr_volume_id
                jnz     short NOTVOLSRCH
                call    SETROOTSRCH

NOTVOLSRCH:                             ; ...
                call    GETENTRY
                jb      SETESRET

SRCH:                                   ; ...
                mov     ds:LNE_COUNT, 0 ; reset long name entry count

SRCH2:                                  ; ...
                push    ds
                mov     ds, word ptr ds:CURBUF+2
                mov     ah, [bx]        ; [BX+dir_entry.dir_name]
                mov     al, [bx+0Bh]    ; [BX+dir_entry.dir_attr]
                call    check_longname
                jz      short NEXTENT2
                or      ah, ah
                jz      short FREE
                cmp     ah, ss:DELALL
                jz      short FREE
                test    byte ptr [bx+0Bh], 8 ; [BX+dir_entry.dir_attr],
                                        ; attr_volume_id
                jz      short CHKFNAM
                inc     ss:VOLID

CHKFNAM:                                ; ...
                mov     si, ss
                mov     es, si
                mov     si, bx
                mov     di, offset NAME1
                cmp     ss:NAME1, 0E5h
                jnz     short NO_E5
                mov     ss:NAME1, 5

NO_E5:                                  ; ...
                call    MetaCompare
                jz      short FOUND
                pop     ds

NEXTENT:                                ; ...
                les     bp, ds:THISDPB
                call    NEXTENTRY
                jnb     short SRCH
                jmp     short SETESRET
; ---------------------------------------------------------------------------

FREE:                                   ; ...
                pop     ds
                mov     cx, ds:LASTENT
                cmp     cx, ds:ENTFREE
                jnb     short TSTALL
                mov     ds:ENTFREE, cx

TSTALL:                                 ; ...
                cmp     ah, ds:DELALL
                jz      short NEXTENT3
                mov     ds:ENTLAST, cx
                stc
                jmp     short SETESRET
; ---------------------------------------------------------------------------

NEXTENT2:                               ; ...
                pop     ds

NEXTENT3:                               ; ...
                les     bp, ds:THISDPB
                call    NEXTENTRY
                jnb     short SRCH2
                jmp     short SETESRET
; ---------------------------------------------------------------------------

FOUND:                                  ; ...
                mov     ch, [si]
                pop     ds
                mov     ah, ds:ATTRIB
                and     ah, 9Eh         ; ~attr_ignore
                lea     si, [si+0Fh]    ; [SI+dir_entry.dir_first-dir_entry.dir_attr]
                test    ch, 8           ; attr_volume_id
                jz      short check_one_volume_id
                test    ah, 8           ; attr_volume_id
                jz      short NEXTENT
                xor     ah, ah
                jmp     short RETFF
; ---------------------------------------------------------------------------

check_one_volume_id:                    ; ...
                cmp     ah, 8           ; attr_volume_id
                jz      short NEXTENT
                call    MatchAttributes
                jz      short RETFF
                test    ds:CREATING, 0FFh ; -1
                jz      short NEXTENT

RETFF:                                  ; ...
                les     bp, ds:THISDPB
                mov     ah, es:[bp+0]   ; [ES:BP+DPB.DRIVE]

SETESRET:                               ; ...
                push    ss
                pop     es
                push    ds:ENTLAST
                pop     ds:ENTLAST_PREV ; previous ENTLAST
                jnb     short SETESRETN
                mov     ds:LNE_COUNT, 0 ; reset long name entry count

SETESRETN:                              ; ...
                retn
FINDENTRY       endp


; =============== S U B R O U T I N E =======================================


NEXTENTRY       proc near               ; ...
                mov     ax, ds:LASTENT
                cmp     ax, ds:ENTLAST
                jz      short NONE
                inc     ax
                lea     bx, [bx+32]
                cmp     bx, dx
                jnz     short HAVIT
                cmp     ds:DIRSTART, 0
                jnz     short nextentry_cont
                cmp     ds:DIRSTART_HW, 0
                jnz     short nextentry_cont
                cmp     ax, es:[bp+9]   ; [es:bp+DPB.ROOT_ENTRIES]
                                        ; Number of root directory entries
                jnb     short NONE
                jmp     short GETENT
; ---------------------------------------------------------------------------

nextentry_cont:                         ; ...
                mov     bl, ds:SECCLUSPOS
                inc     bl
                cmp     bl, ds:CLUSFAC
                jb      short SAMECLUS
                mov     bx, ds:NXTCLUSNUM_HW
                mov     ds:CLUSTNUM_HW, bx
                mov     bx, ds:NXTCLUSNUM
                call    IsEOF
                jnb     short NONE
                cmp     ds:CLUSTNUM_HW, 0
                jnz     short GETENT
                cmp     bx, 2
                jb      short NONE
                jmp     short GETENT
; ---------------------------------------------------------------------------

NONE:                                   ; ...
                stc
                retn
; ---------------------------------------------------------------------------

HAVIT:                                  ; ...
                mov     ds:LASTENT, ax
                clc

nextentry_retn:                         ; ...
                retn
; ---------------------------------------------------------------------------

SAMECLUS:                               ; ...
                mov     ds:SECCLUSPOS, bl
                mov     ds:LASTENT, ax
                push    ds
                lds     di, ds:CURBUF
                mov     dx, [di+8]      ; [DI+BUFFINFO.buf_sector+2]
                mov     ss:HIGH_SECTOR, dx
                mov     dx, [di+6]      ; [DI+BUFFINFO.buf_sector]
                add     dx, 1
                adc     ss:HIGH_SECTOR, 0
                pop     ds
                call    FIRSTCLUSTER
                xor     bx, bx
                jmp     short SETENTRY
NEXTENTRY       endp


; =============== S U B R O U T I N E =======================================


GETENTRY        proc near               ; ...
                mov     ax, ds:LASTENT

GETENT:                                 ; ...
                mov     ds:LASTENT, ax
                rol     ax, 5
                mov     dx, ax
                and     ax, 0FFE0h      ; ~(32-1)
                and     dx, 1Fh
                mov     bx, es:[bp+2]   ;  [ES:BP+DPB.SECTOR_SIZE]
                and     bl, 0E0h
                div     bx
                push    dx
                call    DIRREAD
                pop     bx
                jb      short nextentry_retn

SETENTRY:                               ; ...
                mov     dx, word ptr ds:CURBUF
                add     dx, 24          ; BUFINSIZ
                add     bx, dx
                add     dx, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                clc
                retn
GETENTRY        endp

; ---------------------------------------------------------------------------
sft_fcb_table   db 20 dup(0)            ; ...
sftfcb_cluster  dw 2 dup(0)             ; ...
sftfcb_direntry dw 0                    ; ...
                db 114 dup(0)
SRCH_CLUSTER    dd 0                    ; ...

; =============== S U B R O U T I N E =======================================


SETDIRSRCH      proc near               ; ...
                cmp     ds:ROOTCLUST_HW, 0
                jnz     short SETDIRSRCH_FAT32
                or      bx, bx
                jz      short SETROOTSRCH

SETDIRSRCH_FAT32:                       ; ...
                mov     ax, ds:ROOTCLUST_HW
                mov     ds:DIRSTART_HW, ax
                mov     ds:CLUSTNUM_HW, ax
                mov     ds:DIRSTART, bx
                mov     al, es:[bp+4]
                inc     al
                mov     ds:CLUSFAC, al
                push    si
                call    UNPACK
                jnb     short UNP_OK
                pop     si
                retn
; ---------------------------------------------------------------------------

UNP_OK:                                 ; ...
                mov     ds:CLUSNUM, di
                mov     dx, ds:CCONTENT_HW
                mov     ds:CLUSNUM_HW, dx
                mov     word ptr cs:SRCH_CLUSTER, bx
                mov     dx, ds:CLUSTNUM_HW
                mov     word ptr cs:SRCH_CLUSTER+2, dx
                mov     dx, bx
                xor     bl, bl
                mov     ds:SECCLUSPOS, bl
                call    FIGREC
                mov     word ptr ds:DIRSEC, dx
                mov     si, ds:HIGH_SECTOR
                mov     word ptr ds:DIRSEC+2, si
                pop     si
                clc
                retn
SETDIRSRCH      endp


; =============== S U B R O U T I N E =======================================


SETROOTSRCH     proc near               ; ...
                mov     ds:ROOTCLUST_HW, 0
                cmp     word ptr es:[bp+0Fh], 0
                jnz     short SETROOTSRCH_FAT ; not FAT32

SETROOTSRCH_FAT32:                      ; DPB.ROOT_CLUSTER
                mov     ebx, es:[bp+35h]
                cmp     ebx, es:[bp+2Dh] ; DPB.LAST_CLUSTER
                ja      short sdsrch_fat_3
                cmp     ebx, 2
                jb      short sdsrch_fat_3
                ror     ebx, 16
                mov     ds:ROOTCLUST_HW, bx
                ror     ebx, 16
                jmp     short SETDIRSRCH_FAT32
; ---------------------------------------------------------------------------

sdsrch_fat_3:                           ; ...
                stc
                jmp     short setdirsrch_retn
; ---------------------------------------------------------------------------

SETROOTSRCH_FAT:                        ; ...
                xor     ax, ax
                mov     ds:DIRSTART, ax
                mov     ds:DIRSTART_HW, ax
                mov     cs:SRCH_CLUSTER, 1
                mov     ds:SECCLUSPOS, al
                dec     ax
                mov     ds:CLUSNUM, ax
                mov     ds:CLUSNUM_HW, ax
                movzx   eax, word ptr es:[bp+0Bh]
                movzx   edx, word ptr es:[bp+11h]
                sub     eax, edx
                mov     ds:CLUSFAC, al
                mov     ds:DIRSEC, edx
                clc

setdirsrch_retn:                        ; ...
                retn
SETROOTSRCH     endp


; =============== S U B R O U T I N E =======================================


set_sftfcb_entry proc near              ; ...
                pusha
                call    find_sft_entry_number
                xor     bx, bx
                mov     cx, 20

set_sftfcbe_1:                          ; ...
                cmp     dword ptr cs:sftfcb_cluster[bx], 0 ; sftfcb.cluster
                jz      short set_sftfcbe_2
                add     bx, 6
                loop    set_sftfcbe_1
                jmp     short set_sftfcbe_3
; ---------------------------------------------------------------------------

set_sftfcbe_2:                          ; ...
                push    cx
                mov     cx, word ptr cs:SRCH_CLUSTER
                mov     cs:sftfcb_cluster[bx], cx
                mov     cx, word ptr cs:SRCH_CLUSTER+2
                mov     cs:(sftfcb_cluster+2)[bx], cx
                pop     cx

loc_C8B2:
                mov     dx, ss:LASTENT
                mov     cs:sftfcb_direntry[bx], dx ; sftfcb.direntry
                xchg    ax, bx
                xor     dx, dx
                mov     cx, 6
                div     cx
                xchg    ax, bx
                mov     cs:sft_fcb_table[bx], al

set_sftfcbe_3:                          ; ...
                popa
                retn
set_sftfcb_entry endp


; =============== S U B R O U T I N E =======================================


find_sft_entry_number proc near         ; ...
                push    es
                xor     cx, cx
                mov     dx, es
                mov     es, cs:DosDSeg
                les     bx, dword ptr es:SFT_ADDR

f_sfte_1:                               ; ...
                mov     ax, es
                cmp     ax, dx
                jnz     short f_sfte_2
                mov     ax, di
                sub     ax, bx
                sub     ax, 6
                mov     bl, 59
                div     bl
                add     ax, cx
                jmp     short f_sfte_3
; ---------------------------------------------------------------------------

f_sfte_2:                               ; ...
                add     cx, es:[bx+4]
                les     bx, es:[bx]
                cmp     bx, 0FFFFh
                jnz     short f_sfte_1
                stc

f_sfte_3:                               ; ...
                pop     es
                retn
find_sft_entry_number endp


; =============== S U B R O U T I N E =======================================


int_2Fh_1230h   proc near               ; ...
                call    find_sft_entry_number
                jb      short find_sfte_i_error
                push    es
                push    di
                push    cs
                pop     es
                assume es:BIOSCODE
                mov     cx, 20
                mov     di, offset sft_fcb_table

scan_next_sftfcb:                       ; ...
                repne scasb
                stc
                jnz     short sfte_i_notfound
                lea     bx, [di-1]
                sub     bx, offset sft_fcb_table
                mov     dx, bx
                shl     bx, 1
                add     bx, dx
                shl     bx, 1
                cmp     dword ptr es:sftfcb_cluster[bx], 0
                jnz     short sfte_i_found
                test    cx, cx
                jnz     short scan_next_sftfcb
                stc
                jmp     short sfte_i_notfound
; ---------------------------------------------------------------------------

sfte_i_found:                           ; ...
                mov     cx, es:sftfcb_cluster[bx]
                mov     si, es:(sftfcb_cluster+2)[bx]
                mov     dx, es:sftfcb_direntry[bx]
                clc

sfte_i_notfound:                        ; ...
                pop     di
                pop     es
                assume es:nothing

find_sfte_i_error:                      ; ...
                mov     ax, 0
                retn
int_2Fh_1230h   endp


; =============== S U B R O U T I N E =======================================


SFT_FREE        proc near               ; ...
                pusha
                mov     word ptr es:[di], 0 ; [ES:DI+SF_ENTRY.sf_ref_Count]
                call    int_2Fh_1230h
                jb      short sftf_1
                mov     dword ptr cs:sftfcb_cluster[bx], 0

sftf_1:                                 ; ...
                popa
                retn
SFT_FREE        endp


; =============== S U B R O U T I N E =======================================


GETPATH         proc near               ; ...

; FUNCTION CHUNK AT 829E SIZE 0000017D BYTES

                mov     word ptr ds:CREATING, 0E500h

GetPathNoSet:                           ; ...
                mov     ds:EXTERR_LOCUS, 2
                mov     word ptr ds:CURBUF, 0FFFFh
                mov     di, ds:WFP_START
                cmp     word ptr [di+1], 5C3Ah ; ':\'
                jz      short CrackIt
                add     di, 3
                mov     si, di
                call    CHKDEV
                jb      short InternalError

Build_devJ:                             ; ...
                mov     al, ds:SATTRIB
                mov     ds:ATTRIB, al
                mov     ds:EXTERR_LOCUS, 1
                push    ss
                pop     es
                mov     si, offset NAME1
                mov     di, ds:WFP_START
                mov     dx, di
                mov     cx, 8

MoveLoop:                               ; ...
                lodsb
                stosb
                cmp     al, 20h ; ' '
                jz      short NoSave
                mov     dx, di

NoSave:                                 ; ...
                loop    MoveLoop
                mov     di, dx
                mov     byte ptr [di], 0
                call    Build_device_ent
                inc     al
                retn
; ---------------------------------------------------------------------------

InternalError:                          ; ...
                jmp     short InternalError
; ---------------------------------------------------------------------------

CrackIt:                                ; ...
                mov     ds:ATTRIB, 16h
                les     di, ds:THISCDS
                mov     eax, 0FFFFFFFFh
                mov     ebx, es:[di+49h]
                mov     si, ds:CURR_DIR_END
                cmp     si, ax
                jz      short NO_CURR_D
                cmp     ebx, eax
                jnz     short CrackIt2

NO_CURR_D:                              ; ...
                mov     si, ds:WFP_START
                lea     si, [si+3]
                les     bp, ds:THISDPB
                jmp     short ROOTPATH
; ---------------------------------------------------------------------------

CrackIt2:                               ; ...
                ror     ebx, 10h
                mov     ds:ROOTCLUST_HW, bx
                ror     ebx, 10h
                les     bp, ds:THISDPB
                call    SETDIRSRCH
                jb      short SETFERR
                jmp     short FINDPATH
; ---------------------------------------------------------------------------

SETFERR:                                ; ...
                xor     cl, cl
                stc
                retn
GETPATH         endp


; =============== S U B R O U T I N E =======================================


CHKDEV          proc near               ; ...
                mov     si, di
                mov     di, ss
                mov     es, di
                mov     di, offset NAME1
                mov     cx, 9

TESTLOOP:                               ; ...
                call    GETLET
                cmp     al, 2Eh ; '.'
                jz      short TESTDEVICE
                call    PATHCHRCMP
                jz      short NOTDEV
                or      al, al
                jz      short TESTDEVICE
                stosb
                loop    TESTLOOP

NOTDEV:                                 ; ...
                stc
                retn
; ---------------------------------------------------------------------------

TESTDEVICE:                             ; ...
                add     cx, 2
                mov     al, 20h ; ' '
                rep stosb
                mov     ax, ss
                mov     ds, ax
                call    DEVNAME
                retn
CHKDEV          endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR GETPATH

ROOTPATH:                               ; ...
                call    SETROOTSRCH
                cmp     byte ptr [si], 0
                jnz     short FINDPATH
                mov     word ptr ds:CURBUF, 0FFFFh
                mov     al, ds:SATTRIB
                mov     ds:ATTRIB, al
                xor     ah, ah
                retn
; ---------------------------------------------------------------------------

FINDPATH:                               ; ...
                push    es
                push    si
                mov     di, si
                mov     cx, ds:DIRSTART_HW
                shl     ecx, 16
                mov     cx, ds:DIRSTART
                cmp     ds:CURR_DIR_END, 0FFFFh
                jz      short NOIDS
                cmp     di, ds:CURR_DIR_END
                jnz     short NOIDS
                les     di, ds:THISCDS
                mov     es:[di+49h], ecx ; [ES:DI+curdir.ID]

NOIDS:                                  ; ...
                mov     ax, ss
                mov     es, ax
                mov     di, 54Bh
                mov     ax, 2020h
                stosb
                stosw
                stosw
                stosw
                stosw
                stosw
                mov     di, 54Bh
                xor     ah, ah

GetNam:                                 ; ...
                inc     cl
                lodsb
                cmp     al, 2Eh ; '.'
                jz      short _SetExt
                or      al, al
                jz      short _GetDone
                cmp     al, 5Ch ; '\'
                jz      short _GetDone
                cmp     al, 3Fh ; '?'
                jnz     short StoNam
                or      ah, 1

StoNam:                                 ; ...
                stosb
                jmp     short GetNam
; ---------------------------------------------------------------------------

_SetExt:                                ; ...
                mov     di, 553h

GetExt:                                 ; ...
                lodsb
                or      al, al
                jz      short _GetDone
                cmp     al, 5Ch ; '\'
                jz      short _GetDone
                cmp     al, 3Fh ; '?'
                jnz     short StoExt
                or      ah, 1

StoExt:                                 ; ...
                stosb
                jmp     short GetExt
; ---------------------------------------------------------------------------

_GetDone:                               ; ...
                dec     si
                mov     cl, ah
                or      cl, 80h
                pop     di
                pop     es
                cmp     si, di
                jnz     short check_device
                jmp     _BADPATH
; ---------------------------------------------------------------------------

check_device:                           ; ...
                push    si
                mov     al, [si]
                or      al, al
                jnz     short NOT_LAST
                mov     bh, ds:SATTRIB
                mov     ds:ATTRIB, bh

NOT_LAST:                               ; ...
                push    es
                push    ss
                pop     es
                call    DEVNAME
                pop     es
                jb      short FindFile
                or      al, al
                jz      short GO_BDEV
                jmp     FILEINPATH
; ---------------------------------------------------------------------------

GO_BDEV:                                ; ...
                pop     si
                jmp     Build_devJ
; ---------------------------------------------------------------------------

FindFile:                               ; ...
                cmp     ds:NAME1, 0E5h
                jnz     short NOE5
                mov     ds:NAME1, 5

NOE5:                                   ; ...
                push    di
                push    es
                push    cx
                call    FINDENTRY
                pop     cx
                pop     es
                pop     di
                jnb     short LOAD_BUF
                jmp     BADPATHPOP
; ---------------------------------------------------------------------------

LOAD_BUF:                               ; ...
                lds     di, ds:CURBUF
                test    byte ptr [bx+0Bh], 10h ; [BX+dir_entry.dir_attr],attr_directory
                jnz     short GO_NEXT
                jmp     FILEINPATH
; ---------------------------------------------------------------------------

GO_NEXT:                                ; ...
                cmp     ss:NoSetDir, 0
                jz      short SetDir
                mov     dx, di
                mov     cx, ds
                push    ss
                pop     ds
                pop     di
                cmp     byte ptr [di], 0
                jnz     short NEXT_ONE
                jmp     short _SETRET
; ---------------------------------------------------------------------------

NEXT_ONE:                               ; ...
                push    di
                mov     di, dx
                mov     ds, cx

SetDir:                                 ; ...
                mov     dx, [si-6]      ; dir_entry.dir_fclus_hi
                mov     ss:ROOTCLUST_HW, dx
                mov     dx, [si]        ; dir_entry.dir_first
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short SetDir2
                mov     ss:ROOTCLUST_HW, 0

SetDir2:                                ; ...
                sub     bx, di
                sub     si, di
                push    bx
                push    ax
                push    si
                push    cx
                push    large dword ptr [di+6]
                mov     bx, dx
                push    ss
                pop     ds
                call    SETDIRSRCH
                pop     dx
                pop     ds:HIGH_SECTOR
                jb      short SKIP_GETB
                mov     ds:ALLOWED, 18h
                xor     al, al
                call    GETBUFFR

SKIP_GETB:                              ; ...
                pop     cx
                pop     si
                pop     ax
                pop     bx
                jnb     short SET_THE_BUF
                pop     di
                mov     si, di
                jmp     short _BADPATH
; ---------------------------------------------------------------------------

SET_THE_BUF:                            ; ...
                call    SET_BUF_AS_DIR
                mov     di, word ptr ds:CURBUF
                add     si, di
                add     bx, di
                pop     di
                mov     al, [di]
                or      al, al
                jz      short _SETRET
                inc     di
                mov     si, di
                call    PATHCHRCMP
                jnz     short find_bad_name
                jmp     FINDPATH
; ---------------------------------------------------------------------------

find_bad_name:                          ; ...
                dec     si

_BADPATH:                               ; ...
                xor     cl, cl
                jmp     short BADPRET
; ---------------------------------------------------------------------------

FILEINPATH:                             ; ...
                pop     di
                push    ss
                pop     ds
                mov     al, [di]
                or      al, al
                jz      short INCRET
                mov     si, di
                jmp     short BADPRET
; ---------------------------------------------------------------------------

INCRET:                                 ; ...
                inc     al

_SETRET:                                ; ...
                retn
; ---------------------------------------------------------------------------

BADPATHPOP:                             ; ...
                pop     si
                mov     al, [si]
                mov     si, di
                or      al, al

BADPRET:                                ; ...
                mov     al, ds:SATTRIB
                mov     ds:ATTRIB, al
                stc
                retn
; END OF FUNCTION CHUNK FOR GETPATH

; =============== S U B R O U T I N E =======================================


STARTSRCH       proc near               ; ...
                les     bp, ds:THISDPB
                xor     ax, ax
                mov     ds:LASTENT, ax
                mov     ds:VOLID, al
                dec     ax
                mov     ds:ENTFREE, ax
                mov     ds:ENTLAST, ax
                retn
STARTSRCH       endp


; =============== S U B R O U T I N E =======================================


MatchAttributes proc near               ; ...
                push    ax
                mov     al, ss:ATTRIB
                not     al
                and     al, ch
                and     al, 16h
                pop     ax
                retn
MatchAttributes endp


; =============== S U B R O U T I N E =======================================


DEVNAME         proc near               ; ...
                push    si
                push    di
                push    cx
                push    ax
                push    word ptr ds:NAME1
                cmp     ds:NAME1, 5
                jnz     short NOKTR
                mov     ds:NAME1, 0E5h

NOKTR:                                  ; ...
                test    ds:ATTRIB, 8    ; attr_volume_id
                jnz     short RET31
                mov     si, offset NULDEV

LOOKIO:                                 ; ...
                test    word ptr [si+4], 8000h ; [SI+SYSDEV.ATT],DEVTYP
                jz      short SKIPDEV
                mov     ax, si
                add     si, 10          ; SYSDEV.NAME
                mov     di, offset NAME1
                mov     cx, 2
                repe cmpsd
                mov     si, ax
                jz      short IOCHK

SKIPDEV:                                ; ...
                lds     si, [si]
                cmp     si, 0FFFFh
                jnz     short LOOKIO

RET31:                                  ; ...
                stc

RETNV:                                  ; ...
                mov     cx, ss
                mov     ds, cx
                pop     word ptr ds:NAME1
                pop     ax
                pop     cx
                pop     di
                pop     si
                retn
; ---------------------------------------------------------------------------

IOCHK:                                  ; ...
                mov     word ptr ss:DEVPT+2, ds
                mov     bh, [si+4]      ; [SI+SYSDEV.ATT]
                or      bh, 0C0h
                and     bh, 0DFh
                mov     word ptr ss:DEVPT, si
                jmp     short RETNV
DEVNAME         endp


; =============== S U B R O U T I N E =======================================


Build_device_ent proc near              ; ...
                mov     ax, 2020h
                mov     di, (offset NAME1+8) ; DEVFCB+8
                stosw
                stosb
                mov     al, 40h         ; attr_device
                stosb
                xor     ax, ax
                mov     cx, 10
                rep stosw
                call    DATE16
                mov     di, (offset NAME2+0Ah) ; DEVFCB+dir_entry.dir_time
                xchg    ax, dx
                stosw
                xchg    ax, dx
                stosw
                mov     si, di
                mov     ax, word ptr ds:DEVPT
                stosw
                mov     ax, word ptr ds:DEVPT+2
                stosw
                mov     ah, bh
                mov     bx, offset NAME1 ; DEVFCB
                xor     al, al
                retn
Build_device_ent endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

ValidateCDS     proc near               ; ...

SaveCDS         = dword ptr -6
Temp            = word ptr -2

                push    bp
                mov     bp, sp
                sub     sp, 6
                mov     [bp+Temp], di
                lds     si, ss:THISCDS
                mov     word ptr [bp+SaveCDS], si
                mov     word ptr [bp+SaveCDS+2], ds
                call    ECritDisk
                test    word ptr [si+43h], 8000h ; [SI+curdir.flags],curdir_isnet
                jz      short _DoSplice
                jmp     FatFail
; ---------------------------------------------------------------------------

_DoSplice:                              ; ...
                push    ds
                mov     di, ds
                mov     es, di
                mov     di, si
                mov     ds, large cs:DosDSeg
                call    test_remote_disk_flag
                pop     ds
                jnz     FatFail
                mov     di, [bp+Temp]
                clc
                xor     dl, dl
                xchg    dl, ss:NoSetDir
                push    ss
                pop     es
                call    FStrCpy
                mov     si, [bp+Temp]
                push    ss
                pop     ds
                call    Splice
                push    ss              ; FatReadCDS (ThisCDS);
                pop     ds
                mov     ds:NoSetDir, dl
                les     di, ds:THISCDS
                push    bp
                call    FATREAD_CDS
                pop     bp
                jb      short FatFail
                lds     si, ds:THISCDS
                cmp     dword ptr [si+49h], 0FFFFFFFFh ; if (ThisCDS->ID == -1) {
                jnz     short RestoreCDS
                push    ss
                pop     es
                push    ss:WFP_START
                cmp     si, word ptr [bp+SaveCDS]
                jnz     short DoChdir
                mov     di, [bp+Temp]
                mov     ss:WFP_START, di
                call    FStrCpy

DoChdir:                                ; ...
                push    ss
                pop     ds
                push    word ptr ds:SATTRIB
                push    bp
                call    DOS_CHDIR
                pop     bp
                pop     bx
                pop     ds:WFP_START
                mov     ds:SATTRIB, bl
                lds     si, [bp+SaveCDS]
                jb      short DoChdir2
                ror     ecx, 16
                mov     cx, ss:DIRSTART_HW
                ror     ecx, 16
                jmp     short SetCluster
; ---------------------------------------------------------------------------

DoChdir2:                               ; ...
                mov     word ptr ss:THISCDS, si
                mov     word ptr ss:THISCDS+2, ds
                xor     ecx, ecx
                mov     [si+3], cl

SetCluster:                             ; ...
                lds     si, ss:THISCDS
                test    word ptr [si+43h], 2000h ; [SI+curdir.flags],curdir_splice
                jz      short _setdirclus
                mov     ecx, 0FFFFFFFFh

_setdirclus:                            ; ...
                mov     [si+49h], ecx   ; [SI+curdir.ID]

RestoreCDS:                             ; ...
                les     di, [bp+SaveCDS]
                mov     word ptr ss:THISCDS, di
                mov     word ptr ss:THISCDS+2, es
                clc

FatFail:                                ; ...
                call    LCritDisk
                les     di, [bp+SaveCDS]
                mov     sp, bp
                pop     bp
                retn
ValidateCDS     endp


; =============== S U B R O U T I N E =======================================


CheckThisDevice proc near               ; ...
                push    di
                push    si
                mov     di, si
                mov     al, [si]
                call    PATHCHRCMP
                jnz     short ParseDev
                inc     si
                lodsw
                or      ax, 2020h
                cmp     ax, 6564h       ; 'de' ; (NASM syntax)
                jnz     short NotDevice
                lodsb
                or      al, 20h
                cmp     al, 76h ; 'v'
                jnz     short NotDevice
                lodsb
                call    PATHCHRCMP
                jnz     short NotDevice

ParseDev:                               ; ...
                push    ds
                push    si
                call    NameTrans
                cmp     byte ptr [si], 0
                stc
                jnz     short SkipSearch
                push    ss
                pop     ds
                mov     al, ds:SATTRIB
                mov     ds:ATTRIB, al
                call    DEVNAME

SkipSearch:                             ; ...
                pop     si
                pop     ds

CheckReturn:                            ; ...
                pop     di
                jnb     short Check_Done
                mov     si, di

Check_Done:                             ; ...
                pop     di
                cmc
                retn
; ---------------------------------------------------------------------------

NotDevice:                              ; ...
                stc
                jmp     short CheckReturn
CheckThisDevice endp

; ---------------------------------------------------------------------------
word_CD89       dw 0FFFFh               ; ...
word_CD8B       dw 0FFFFh               ; ...
SC_SECTOR_SIZE  dw 0                    ; ...
SC_DRIVE        db 0                    ; ...
CurSC_DRIVE     db 0FFh                 ; ...
CurSC_SECTOR    dw 2 dup(0)             ; ...
SC_STATUS       dw 0                    ; ...
SC_FLAG         db 0                    ; ...
LenTab          db 22                   ; ...
                                        ; DRDWRHL
                db 14                   ; DRDNDHL
                db 22                   ; DRDWRHL
                db 13                   ; DSTATHL
                db 15                   ; DFLSHL
                db 14                   ; DRDNDHL
CmdTab          db 86h                  ; ...
                db 4                    ; DEVRD   ; 0 input
                db 86h
                db 5                    ; DEVRDND ; 1 input status
                db 87h
                db 8                    ; DEVWRT  ; 2 output
                db 87h
                db 10                   ; DEVOST  ; 3 output status
                db 86h
                db 7                    ; DEVIFL  ; 4 input flush
                db 86h
                db 5                    ; DEVRDND ; 5 input status with system WAIT

; =============== S U B R O U T I N E =======================================


IOFUNC          proc near               ; ...
                mov     ss:IOXAD+2, ss
                mov     ss:IOXAD, offset DEVIOBUF
                mov     ss:IOSCNT, 1
                mov     ss:DEVIOBUF, ax
                test    byte ptr [si+6], 80h ; [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
                jz      short IOTO22
                jmp     IOTOFILE
; ---------------------------------------------------------------------------

IOTO22:                                 ; ...
                test    byte ptr [si+5], 80h ; [SI+SF_ENTRY.sf_flags],devid_device
                jnz     short IOTO33
                jmp     IOTOFILE
; ---------------------------------------------------------------------------

IOTO33:                                 ; ...
                push    es
                call    save_world
                mov     dx, ds
                mov     bx, ss
                mov     ds, bx
                mov     es, bx
                xor     bx, bx
                cmp     ah, 5           ; system wait enabled?
                jnz     short _no_sys_wait
                or      bx, 400h        ; Set bit 10 in status word for driver

_no_sys_wait:                           ; ...
                mov     ds:IOCALL_REQSTAT, bx
                xor     bx, bx
                mov     ds:IOMED, bl
                mov     bl, ah          ; get function
                mov     ah, cs:LenTab[bx]
                shl     bx, 1
                mov     cx, word ptr cs:CmdTab[bx]
                mov     bx, offset IOCALL
                mov     ds:IOCALL, ah   ; [IOCALL_REQLEN]
                mov     ds:IOCALL_REQFUNC, ch
                mov     ds, dx
                call    DEVIOCALL
                mov     di, ss:IOCALL_REQSTAT
                and     di, di
                js      short DevErr

OKDevIO:                                ; ...
                mov     ax, ss
                mov     ds, ax
                cmp     ch, 5           ; DEVRDND
                jnz     short DNODRD
                mov     al, ds:IOMED    ; [IORCHR]
                mov     byte ptr ds:DEVIOBUF, al

DNODRD:                                 ; ...
                mov     ah, byte ptr ds:IOCALL_REQSTAT+1
                not     ah              ; Zero = busy, not zero = ready
                and     ah, 2           ; STBUI>>8
                call    restore_world
                pop     es
                pushf
                mov     al, ss:IoStatFail
                cbw
                cmp     ax, 0FFFFh
                jnz     short not_fail_ret
                inc     ss:IoStatFail
                popf
                retn
; ---------------------------------------------------------------------------

not_fail_ret:                           ; ...
                mov     ax, ss:DEVIOBUF
                popf
                retn
; ---------------------------------------------------------------------------

DevErr:                                 ; ...
                mov     ah, cl
                call    CHARHARD
                cmp     al, 1
                jnz     short NO_RETRY
                call    restore_world
                pop     es
                jmp     IOFUNC
; ---------------------------------------------------------------------------

NO_RETRY:                               ; ...
                and     byte ptr ss:IOCALL_REQSTAT+1, 0FDh ; [SS:IOCALL_REQSTAT+1],
                                        ; ~(STBUI>>8)
                cmp     al, 3
                jnz     short not_fail
                dec     ss:IoStatFail   ; set flag indicating fail on I24

not_fail:                               ; ...
                jmp     short OKDevIO
; ---------------------------------------------------------------------------

IOTOFILE:                               ; ...
                or      ah, ah
                jz      short IOIN
                dec     ah
                jz      short IOIST
                dec     ah
                jz      short IOUT
                retn
; ---------------------------------------------------------------------------

IOIST:                                  ; ...
                cmp     dword ptr [si+20h], 45504950h ; 'PIPE' ; (NASM syntax)
                jnz     short IOIST2
                cmp     dword ptr [si+24h], 58445453h ; 'STDX' ; (NASM syntax)
                jz      short IOUT1

IOIST2:                                 ; ...
                push    large dword ptr [si+15h] ; [SI+SF_ENTRY.sf_position]
                call    IOIN
                pop     large dword ptr [si+15h]
                retn
; ---------------------------------------------------------------------------

IOUT1:                                  ; ...
                call    SETXADDR
                mov     cx, 1
                mov     ax, 1131h       ; (Write to PIPE?)
                les     di, ss:THISSFT
                int     2Fh             ; Multiplex -
                jb      short IOUT2
                jcxz    short IOUT2
                mov     bp, sp
                mov     [bp+4], dx
                or      al, 1
                call    RESTXADDR
                retn
; ---------------------------------------------------------------------------

IOUT2:                                  ; ...
                call    RESTXADDR
                xor     al, al
                retn
; ---------------------------------------------------------------------------

IOUT:                                   ; ...
                call    SETXADDR
                call    DOS_WRITE
                call    RESTXADDR

IOUT_retn:                              ; ...
                retn
IOFUNC          endp


; =============== S U B R O U T I N E =======================================


IOIN            proc near               ; ...
                call    SETXADDR
                or      ss:DOS34_FLAG, 40h
                call    DOS_READ
                and     ss:DOS34_FLAG, 0FFBFh
                or      cx, cx
                call    RESTXADDR
                mov     al, byte ptr ss:DEVIOBUF
                jnz     short IOUT_retn
                mov     al, 1Ah
                retn
IOIN            endp


; =============== S U B R O U T I N E =======================================


SETXADDR        proc near               ; ...
                pop     ss:CALLBPB
                push    es
                call    save_world
                push    large [ss:DMAADD]
                mov     word ptr ss:THISSFT+2, ds
                push    ss
                pop     ds
                mov     word ptr ds:THISSFT, si
                mov     cx, ds:IOXAD
                mov     word ptr ds:DMAADD, cx
                mov     cx, ds:IOXAD+2
                mov     word ptr ds:DMAADD+2, cx
                mov     cx, ds:IOSCNT
                jmp     short RESTRET
SETXADDR        endp


; =============== S U B R O U T I N E =======================================


RESTXADDR       proc near               ; ...
                pop     ds:CALLBPB
                pop     large [ds:DMAADD]
                call    restore_world
                pop     es

RESTRET:                                ; ...
                jmp     ss:CALLBPB
RESTXADDR       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


DEV_OPEN_SFT    proc near               ; ...
                push    es
                call    save_world
                mov     al, 0Dh         ; DEVOPN
                jmp     short DO_OPCLS
DEV_OPEN_SFT    endp


; =============== S U B R O U T I N E =======================================


DEV_CLOSE_SFT   proc near               ; ...
                push    es
                call    save_world
                mov     al, 0Eh         ; DEVCLS

DO_OPCLS:                               ; ...
                test    byte ptr es:[di+6], 80h ; [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
                jnz     short OPCLS_DONE
                xor     ah, ah
                test    byte ptr es:[di+5], 80h ; [ES:DI+SF_ENTRY.sf_flags],devid_device
                les     di, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
                pushf
                push    ax
                mov     ax, es
                or      ax, di
                pop     ax
                jz      short OPCLS_DONEP
                popf
                jz      short OPCLS_DONE
                test    byte ptr es:[di+5], 8 ; [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
                jz      short OPCLS_DONE
                push    es
                pop     ds
                mov     si, di

OPCLS_RETRY:                            ; ...
                push    ss
                pop     es
                mov     di, offset DEVCALL_REQLEN ; DEVCALL
                mov     bx, di
                push    ax
                mov     al, 0Dh         ; DOPCLHL
                stosb                   ; Length
                pop     ax
                xchg    ah, al
                stosb                   ; Unit
                xchg    ah, al
                stosb                   ; Command
                mov     word ptr es:[di], 0 ; Status
                push    ax
                call    DEVIOCALL2
                mov     di, es:[bx+3]
                and     di, di
                jns     short OPCLS_DONEP
                test    byte ptr [si+5], 80h ; [SI+SYSDEV.ATT+1],(DEVTYP>>8)
                jz      short BLKDEV
                mov     ah, 86h
                jmp     short HRDERR
; ---------------------------------------------------------------------------

BLKDEV:                                 ; ...
                mov     al, cl
                mov     ah, 6

HRDERR:                                 ; ...
                call    CHARHARD
                cmp     al, 1
                jnz     short OPCLS_DONEP
                pop     ax
                jmp     short OPCLS_RETRY
; ---------------------------------------------------------------------------

OPCLS_DONEP:                            ; ...
                pop     ax

OPCLS_DONE:                             ; ...
                call    restore_world
                pop     es
                retn
DEV_CLOSE_SFT   endp


; =============== S U B R O U T I N E =======================================


DEVIOCALL       proc near               ; ...
                lds     si, [si+7]
DEVIOCALL       endp


; =============== S U B R O U T I N E =======================================


DEVIOCALL2      proc near               ; ...
                mov     ax, offset ECritDevice ; for Block Device(s)
                test    word ptr [si+4], 8000h
                jz      short call_ecritdev ; block device
                test    word ptr [si+4], 3 ; CONSOLE INPUT/OUTPUT
                jz      short call_ecritdev
                mov     ax, offset ECritCharDev ; for Character Device(s)

call_ecritdev:                          ; ...
                call    ax ; ECritDevice
                test    byte ptr [si+5], 80h
                jnz     short chardev2
                cmp     byte ptr es:[bx+2], 4
                jz      short chkext
                cmp     byte ptr es:[bx+2], 8
                jz      short chkext
                cmp     byte ptr es:[bx+2], 9
                jnz     short chardev2

chkext:                                 ; ...
                call    sub_103B8
                jb      short dev_exit
                test    byte ptr [si+4], 2
                jz      short chksector
                add     byte ptr es:[bx], 8
                mov     ax, ss:CALLSSEC
                mov     ss:CALLSSEC, 0FFFFh
                mov     ss:CALLNEWSC, ax
                mov     ax, ss:HIGH_SECTOR
                mov     ss:CALLNEWSC+2, ax
                jmp     short chardev2
; ---------------------------------------------------------------------------

chksector:                              ; ...
                cmp     ss:HIGH_SECTOR, 0
                jz      short chardev2
                mov     word ptr es:[bx+3], 8107h
                jmp     short dev_exit
; ---------------------------------------------------------------------------

chardev2:                               ; ...
                inc     ss:DEVIO_IN_PROGRESS
                mov     ax, [si+6]
                mov     ss:CALLDEVAD, ax
                mov     ss:CALLDEVAD+2, ds
                call    dword ptr ss:CALLDEVAD
                mov     ax, [si+8]
                mov     ss:CALLDEVAD, ax
                call    dword ptr ss:CALLDEVAD
                dec     ss:DEVIO_IN_PROGRESS
                cmp     cs:SC_FLAG, 0
                jz      short dev_exit
                call    VIRREAD
                jb      short chardev2

dev_exit:                               ; ...
                mov     ax, offset LCritDevice
                test    word ptr [si+4], 8000h ; [SI+SYSDEV.ATT],DEVTYP
                jz      short dev_exit2 ; block device
                test    word ptr [si+4], 3 ; ISCOUT | ISCIN  ; console input/ooutput
                jz      short dev_exit2 ; no
                mov     ax, offset LCritDisk_4

dev_exit2:                              ; ...
                call    ax ; LCritDevice
                retn
DEVIOCALL2      endp


; =============== S U B R O U T I N E =======================================


SETREAD         proc near               ; ...
                push    di
                push    cx
                push    ax
                mov     cl, 4           ; DEVRD

SETCALLHEAD:                            ; ...
                mov     al, 22          ; DRDWRHL
                push    ss
                pop     es
                mov     di, offset DEVCALL_REQLEN ; DEVCALL
                stosb                   ; length
                pop     ax
                stosb                   ; Unit
                push    ax
                mov     al, cl
                stosb                   ; Command code
                xor     ax, ax
                stosw                   ; Status
                add     di, 8
                pop     ax
                xchg    ah, al
                stosb                   ; Media byte
                xchg    al, ah
                push    ax
                mov     ax, bx
                stosw                   ; Transfer addr
                mov     ax, ds
                stosw
                pop     cx
                pop     ax
                stosw                   ; Count
                xchg    ax, dx
                stosw                   ; Start
                xchg    ax, cx
                xchg    dx, cx
                pop     di
                mov     bx, offset DEVCALL_REQLEN ; DEVCALL
                retn
SETREAD         endp


; =============== S U B R O U T I N E =======================================


SETWRITE        proc near               ; ...
                push    di
                push    cx
                push    ax
                mov     cl, 8           ; DEVWRT
                add     cl, ss:VDERFLG
                jmp     short SETCALLHEAD
SETWRITE        endp


; =============== S U B R O U T I N E =======================================


BUILDDIR        proc near               ; ...
                mov     ax, ds:ENTFREE
                cmp     ax, 0FFFFh
                jz      short CHECK_IF_ROOT
                clc
                retn
; ---------------------------------------------------------------------------

CHECK_IF_ROOT:                          ; ...
                cmp     ds:DIRSTART_HW, 0
                jnz     short NEWDIR
                cmp     ds:DIRSTART, 0
                jnz     short NEWDIR

builddir_stc_retn:                      ; ...
                stc

builddir_retn:                          ; ...
                retn
; ---------------------------------------------------------------------------

NEWDIR:                                 ; ...
                mov     bx, ds:DIRSTART_HW
                mov     ds:CLUSTNUM_HW, bx
                mov     bx, ds:DIRSTART
                or      bx, bx
                jnz     short NEWDIR2
                cmp     bx, ds:CLUSTNUM_HW
                jz      short NULLDIR

NEWDIR2:                                ; ...
                call    GETEOF
                jb      short builddir_retn
                mov     eax, 200000h    ; 2097152
                movzx   ecx, word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                xor     edx, edx
                div     ecx
                mov     cl, es:[bp+5]   ; [ES:BP+DPB.CLUSTER_SHIFT]
                shr     eax, cl
                ror     edi, 16
                mov     di, ds:CLUSTERS_HW ; cluster count (index), hw
                ror     edi, 16
                cmp     edi, eax
                jnb     short builddir_stc_retn

NULLDIR:                                ; ...
                mov     ds:CCOUNT_HW, 0
                mov     cx, 1
                call    ALLOCATE

builddir_retn_j:                        ; ...
                jb      short builddir_retn
                xor     dx, dx
                cmp     dx, ds:DIRSTART_HW
                jnz     short ADDINGDIR
                cmp     dx, ds:DIRSTART
                jnz     short ADDINGDIR
                push    ds:CLUSTNUM_HW
                pop     ds:ROOTCLUST_HW
                call    SETDIRSRCH
                jb      short builddir_retn_j
                mov     ds:LASTENT, 0FFFFh
                jmp     short GOTDIRREC
; ---------------------------------------------------------------------------

ADDINGDIR:                              ; ...
                push    ds:CLUSTNUM_HW
                push    bx
                push    ds:CLUSNUM_HW
                pop     ds:CLUSTNUM_HW
                mov     bx, ds:CLUSNUM
                call    IsEOF
                pop     bx
                pop     ds:CLUSTNUM_HW
                jb      short NOTFIRSTGROW
                mov     ds:CLUSNUM, bx
                push    ds:CLUSTNUM_HW
                pop     ds:CLUSNUM_HW

NOTFIRSTGROW:                           ; ...
                mov     dx, bx
                xor     bl, bl
                call    FIGREC

GOTDIRREC:                              ; ...
                mov     cl, es:[bp+4]   ; [ES:BP+DPB.CLUSTER_MASK]
                inc     cl
                xor     ch, ch

ZERODIR:                                ; ...
                push    cx
                mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                mov     al, 0FFh
                call    GETBUFFR
                jnb     short GET_SSIZE
                pop     cx
                retn
; ---------------------------------------------------------------------------

GET_SSIZE:                              ; ...
                mov     cx, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                push    es
                les     di, ds:CURBUF
                or      byte ptr es:[di+5], 4 ; [ES:DI+BUFFINFO.buf_flags],buf_isDIR
                push    di
                add     di, 24
                xor     ax, ax
                shr     cx, 1
                rep stosw
                jnb     short EVENZ
                stosb

EVENZ:                                  ; ...
                pop     di
                test    byte ptr es:[di+5], 40h ; [ES:DI+BUFFINFO.buf_flags],buf_dirty
                jnz     short yesdirty7
                call    inc_DirtyBufferCount
                or      byte ptr es:[di+5], 40h

yesdirty7:                              ; ...
                pop     es
                pop     cx
                add     dx, 1
                adc     ds:HIGH_SECTOR, 0
                loop    ZERODIR
                mov     ax, ds:LASTENT
                inc     ax
                clc
                retn
BUILDDIR        endp


; =============== S U B R O U T I N E =======================================


SETDOTENT       proc near               ; ...
                stosw                   ; set up a . or .. directory entry
                                        ;  for a directory
                mov     cx, 4
                mov     ax, 2020h
                rep stosw
                stosb
                mov     al, 10h         ; Set up attribute
                stosb
                add     di, 10          ; Initialize time and date of creation
                mov     bx, word ptr ds:THISSFT
                mov     ax, [bx+0Dh]    ; [BX+SF_ENTRY.sf_time]
                stosw
                mov     ax, [bx+0Fh]    ; [BX+SF_ENTRY.sf_date]
                push    ds
                lds     bx, ds:THISDPB
                mov     bl, [bx]
                mov     bh, 0
                test    ss:drive_flags[bx], 4 ; last access date/time flag
                                        ;  or disk accessed flag
                pop     ds
                jz      short SETDOTENT_cont
                test    ds:DOS_FLAG, 40h ; windows (OS running) bit ?
                jnz     short SETDOTENT_cont
                mov     es:[di-6], ax   ; last access date

SETDOTENT_cont:                         ; ...
                stosw
                mov     ax, ds:CLUSTERS_HW
                mov     es:[di-6], ax   ; Set up first cluster field, hw
                mov     ax, dx
                stosw
                xor     ax, ax
                stosw
                stosw
                retn
SETDOTENT       endp


; =============== S U B R O U T I N E =======================================


MakeNode        proc near               ; ...

; FUNCTION CHUNK AT 8AD5 SIZE 0000003E BYTES
; FUNCTION CHUNK AT 8B17 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 8B6B SIZE 00000011 BYTES

                mov     word ptr ds:CREATING, 0E5FFh ; DIRFREE*256 + 0FFh
                                        ; Creating, not DEL *.*
                push    ax
                mov     ds:NoSetDir, 0
                mov     ds:SATTRIB, al
                call    GetPathNoSet
                mov     dl, cl
                mov     cx, ax          ; Device ID to CH
                pop     ax
                pushf
                test    ds:ATTRIB, 8    ; attr_volume_id
                jnz     short make_node2
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jnz     short make_node2 ; not FAT32
                push    es
                les     di, ds:THISSFT
                test    word ptr es:[di+2], 8000h ; [es:di+SF_Entry.sf_mode]
                                        ; bit 15, remote file (if 1)
                pop     es
                jz      short make_node2
                popf
                pushf
                jb      short make_node1
                or      ch, ch
                js      short make_node2

make_node1:                             ; ...
                jmp     short make_err_ret_5P
; ---------------------------------------------------------------------------

make_node2:                             ; ...
                popf
                jnb     short make_exists ; File existed
                jnz     short make_err_4 ; Path bad
                cmp     dl, 80h         ; Check "CL" return from GETPATH
                jz      short RENAME_MAKE ; jz short make_type
                                        ; Name simply not found, and no metas

make_err_4:                             ; ...
                mov     al, 4           ; case 1 bad path

make_err_ret:                           ; ...
                xor     ah, ah
                stc
                retn
MakeNode        endp


; =============== S U B R O U T I N E =======================================


RENAME_MAKE     proc near               ; ...

; FUNCTION CHUNK AT 8B2D SIZE 00000018 BYTES

                test    ds:EXTOPEN_ON, 1 ; EXT_OPEN_ON
                jz      short make_type2
                or      ds:EXTOPEN_ON, 4 ; EXT_FILE_NOT_EXISTS
                test    byte ptr ds:EXTOPEN_FLAG, 0F0h
                jnz     short make_type2
                stc
                mov     ax, 7           ; file not found
                retn
; ---------------------------------------------------------------------------

make_type2:                             ; ...
                les     di, ds:THISSFT
                xor     ax, ax          ; nothing exists Disk Node
                stc                     ; Not found
                jmp     short make_new
RENAME_MAKE     endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR MakeNode

make_exists:                            ; ...
                jz      short make_exists_dir
                mov     al, 3           ; file exists type 3
                                        ;  (error or device node)
                test    ds:ATTRIB, 18h  ; attr_volume_id+attr_directory
                jnz     short make_err_ret_5
                or      ch, ch
                js      short make_share ; No further checks on attributes if device
                or      ah, ah
                jnz     short make_err_ret ; truncating NOT OK (AL = 3)
                push    cx              ; Save device ID
                mov     es, word ptr ds:CURBUF+2
                mov     ch, es:[bx+0Bh] ; [ES:BX+dir_entry.dir_attr]
                                        ; Get file attributes
                test    ch, 1           ; attr_read_only
                jnz     short make_err_ret_5P
                call    MatchAttributes
                pop     cx              ; Devid back in CH
                jnz     short make_err_ret_5
                xor     al, al          ; AL = 0, Disk Node

make_share:                             ; ...
                xor     ah, ah
                push    ax
                push    cx
                mov     ah, ch          ; Device ID to AH
                call    DOOPEN          ; Fill in SFT
                les     di, ds:THISSFT
                mov     word ptr es:[di+33h], 0 ; [es:di+SF_ENTRY.sf_MFT]
                                        ;  (indicate free SFT)
                jmp     short MakeEndShare
; END OF FUNCTION CHUNK FOR MakeNode
; ---------------------------------------------------------------------------

Make_Share_ret:                         ; ...
                mov     al, 6
                jmp     short make_err_ret
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR MakeNode

make_err_ret_5P:                        ; ...
                pop     cx              ; Get back device ID

make_err_ret_5:                         ; ...
                mov     al, 5           ; Attribute mismatch
                jmp     short make_err_ret
; ---------------------------------------------------------------------------

make_exists_dir:                        ; ...
                mov     al, 1           ;  exists as directory, always an error
                jmp     short make_err_ret
; END OF FUNCTION CHUNK FOR MakeNode

; =============== S U B R O U T I N E =======================================


make_save       proc near               ; ...
                push    ax
                mov     ax, cx          ; Device ID to AH
                call    NEWENTRY
                pop     ax              ; 0 if Disk, 3 if File
                jb      short make_save_err
                retn
; ---------------------------------------------------------------------------

make_save_err:                          ; ...
                mov     al, 2

make_save_retn:                         ; ...
                retn
make_save       endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR RENAME_MAKE

make_new:                               ; ...
                call    make_save
                jb      short make_save_retn
                test    ds:ATTRIB, 10h  ; attr_directory
                jnz     short make_save_retn
                les     di, ds:THISSFT
                mov     word ptr es:[di+33h], 0 ; [es:di+SF_ENTRY.sf_MFT]
                                        ;  (indicate free SFT)
                clc
                retn
; END OF FUNCTION CHUNK FOR RENAME_MAKE
; ---------------------------------------------------------------------------
                push    ax
                les     di, ds:CURBUF
                mov     byte ptr es:[bx], 0E5h ; DIRFREE ; nuke newly created entry
                test    byte ptr es:[di+5], 40h ; [ES:DI+BUFFINFO.buf_flags],buf_dirty
                jnz     short yesdirty8
                call    inc_DirtyBufferCount
                or      byte ptr es:[di+5], 40h

yesdirty8:                              ; ...
                les     bp, ds:THISDPB
                mov     al, es:[bp+0]   ; get drive for flush
                call    FLUSHBUF        ; write out buffer
                pop     ax
                jmp     short Make_Share_ret
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR MakeNode

MakeEndShare:                           ; ...
                pop     cx
                pop     ax
                call    make_save
                jb      short make_save_retn
                les     di, ds:THISSFT
                mov     word ptr es:[di+33h], 0 ; [es:di+SF_ENTRY.sf_MFT]
; END OF FUNCTION CHUNK FOR MakeNode    ; clean out sharing info (indicate free SFT)

makeendshare_ret:                       ; ...
                retn

; =============== S U B R O U T I N E =======================================


NEWENTRY        proc near               ; ...
                les     bp, ds:THISDPB
                jnb     short EXISTENT
                cmp     ds:FAILERR, 0
                stc
                jnz     short makeendshare_ret
                call    BUILDDIR        ; Try to build dir
                jb      short makeendshare_ret
                call    GETENT          ; Point at that free entry
                jb      short makeendshare_ret
                jmp     short FREESPOT
; ---------------------------------------------------------------------------

ERRRET3:                                ; ...
                stc

newentry_retn:                          ; ...
                retn
; ---------------------------------------------------------------------------

EXISTENT:                               ; ...
                or      ah, ah          ; Check if file is I/O device
                jns     short NOT_DEV1
                jmp     DOOPEN
; ---------------------------------------------------------------------------

NOT_DEV1:                               ; ...
                call    FREEENT         ; Free cluster chain
                jb      short newentry_retn

FREESPOT:                               ; ...
                test    ds:ATTRIB, 8    ; attr_volume_id
                jz      short NOTVOLID
                cmp     ds:VOLID, 0
                jnz     short ERRRET3   ; Can't create a second volume ID

NOTVOLID:                               ; ...
                mov     es, word ptr ds:CURBUF+2
                mov     di, bx
                mov     si, offset NAME1
                mov     cx, 5
                rep movsw               ; Move name into dir entry
                movsb
                mov     al, ds:ATTRIB
                stosb                   ; Attributes
                mov     cl, 5
                xor     ax, ax          ; Zero pad
                rep stosw
                call    DATE16
                xchg    ax, dx
                stosw                   ; dir_time
                xchg    ax, dx
                push    ds
                push    bx
                lds     bx, ds:THISDPB
                mov     bl, [bx]
                mov     bh, 0
                test    ss:drive_flags[bx], 4 ; last access date/time flag
                                        ;  or disk accessed flag
                pop     bx
                pop     ds
                jz      short updnxt
                test    ds:DOS_FLAG, 40h ; windows (OS running) bit ?
                jnz     short updnxt    ; yes
                mov     es:[di-6], ax   ; last access date

updnxt:                                 ; ...
                stosw                   ; dir_date
                xor     ax, ax
                push    di
                stosw
                stosw
                stosw
                mov     si, word ptr ds:CURBUF
                test    byte ptr es:[si+5], 40h
                jnz     short yesdirty9
                call    inc_DirtyBufferCount
                or      byte ptr es:[si+5], 40h ; ES:SI+BUFFINFO.buf_flags],buf_dirty

yesdirty9:                              ; ...
                les     bp, ds:THISDPB
                mov     al, es:[bp+0]   ; [ES:BP+DPB.DRIVE]
                push    ax
                push    bx
                push    es
                push    di
                les     di, ds:THISSFT
                test    byte ptr es:[di+5], 80h ; [ES:DI+SF_ENTRY.sf_flags],devid_device
                jnz     short GotADevice
                push    ds
                push    bx
                lds     bx, ds:THISDPB
                mov     es:[di+7], bx
                mov     bx, ds
                mov     es:[di+9], bx
                pop     bx
                pop     ds
                call    DEV_OPEN_SFT
                mov     ds:VIRTUAL_OPEN, 1

GotADevice:                             ; ...
                pop     di
                pop     es
                call    FLUSHBUF
                call    CHECK_VIRT_OPEN
                pop     bx
                pop     ax
                pop     si
                mov     ah, al
                jnb     short DOOPEN
                retn
NEWENTRY        endp


; =============== S U B R O U T I N E =======================================


DOOPEN          proc near               ; ...
                mov     dh, ah          ; AH to different place
                xor     dl, dl
                or      ah, ah
                js      short DEV_SFT0
                les     di, ds:THISDPB
                cmp     word ptr es:[di+0Fh], 0 ; [es:di+DPB.FAT_SIZE]
                jz      short DEV_SFT0  ; FAT32
                inc     dl

DEV_SFT0:                               ; ...
                les     di, ds:THISSFT
                add     di, 4           ; SF_ENTRY.sf_attr
                                        ; Skip ref_count and mode fields
                xor     al, al
                or      dh, dh
                js      short DEV_SFT1
                mov     ds, word ptr ds:CURBUF+2
                mov     al, [bx+0Bh]    ; [BX+dir_entry.dir_attr]

DEV_SFT1:                               ; ...
                stosb                   ; sf_attr, ES:DI -> sf_flags
                xor     ax, ax
                mov     al, dh
                or      al, 40h         ; devid_file_clean
                stosw                   ; sf_flags, ES:DI -> sf_devptr
                push    ds
                lds     ax, [bx+1Ah]    ; [BX+dir_entry.dir_first] ; Assume device
                or      dh, dh
                js      short DEV_SFT2
                lds     ax, ss:THISDPB  ; Was file

DEV_SFT2:                               ; ...
                stosw                   ; store offset
                mov     ax, ds
                pop     ds
                stosw                   ; store segment, ES:DI -> sf_firclus
                push    si
                xor     ax, ax
                stosw                   ; SF_ENTRY.sf_firclus = 0
                mov     ax, [bx+14h]    ; first cluster, hw
                or      dl, dl
                jz      short FILE_SFT0
                xor     ax, ax          ; 0

FILE_SFT0:                              ; ...
                shl     eax, 16
                lodsw                   ; dir_first, first cluster, lw
                mov     es:[di+1Eh], eax ; SF_ENTRY.sf_chain ; first cluster (32 bit)
                sub     si, 6           ; sub si, dir_entry.dir_size_l - dir_entry.dir_time
                movsw                   ; dir_time -> sf_time
                movsw                   ; dir_date -> sf_date
                lodsw                   ; skip dir_first, DS:SI -> dir_size_l
                lodsw                   ; dir_size_l in AX, DS:SI -> dir_size_h
                mov     cx, ax          ; dir_size_l in CX
                lodsw                   ; dir_size_h (size AX:CX), DS:SI -> ????
                or      dh, dh
                jns     short FILE_SFT1
                xor     ax, ax          ; 0
                mov     cx, ax          ; Devices are open ended

FILE_SFT1:                              ; ...
                xchg    ax, cx
                stosw                   ; Low word of sf_size
                xchg    ax, cx
                stosw                   ; High word of sf_size, ES:DI -> sf_position
                xor     ax, ax          ; 0
                stosw
                stosw                   ; sf_position = 0, ES:DI -> sf_cluspos
                or      dh, dh
                js      short DEV_SFT3
                stosw                   ; sf_cluspos ; 19h
                push    di
                sub     di, 1Bh         ; sub di,SF_ENTRY.sf_dirsec ; es:di -> SFT
                mov     eax, es:[di+2Bh] ; [ES:DI+SF_ENTRY.sf_chain] ; 43
                                        ; first cluster (32 bit)
                mov     es:[di+35h], eax ; [es:di+SF_ENTRY.sf_lstclus-SF_ENTRY.sf_dirsec]
                pop     di
                mov     si, word ptr ss:CURBUF
                mov     ax, [si+6]      ; [SI+BUFFINFO.buf_sector]
                stosw                   ; sf_dirsec, lw ; 27
                mov     ax, [si+8]      ; [SI+BUFFINFO.buf_sector+2]
                stosw                   ; sf_dirsec, hw ; 29
                mov     ax, bx
                add     si, 24          ; BUFINSIZ ; DS:SI-> start of data in buffer
                sub     ax, si          ; AX = BX relative to start of sector
                mov     cl, 32          ; dir_entry.size
                div     cl
                stosb                   ; sf_dirpos ; 31
                jmp     short FILE_SFT2
; ---------------------------------------------------------------------------

DEV_SFT3:                               ; ...
                add     di, 7           ; SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos

FILE_SFT2:                              ; ...
                mov     si, bx          ; DS:SI points to dir_name
                mov     cx, 11
                rep movsb               ; sf_name
                pop     si              ; recover DS:SI -> dir_first
                push    ss
                pop     ds
                clc
                retn
DOOPEN          endp


; =============== S U B R O U T I N E =======================================


FREEENT         proc near               ; ...
                push    ds
                lds     di, ds:CURBUF
                mov     cx, [si-6]      ; hw of first cluster (dir_first)
                shl     ecx, 16
                mov     cx, [si]
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jz      short freeent1  ; not FAT32
                movzx   ecx, cx

freeent1:                               ; ...
                mov     dx, [di+8]      ; [DI+BUFFINFO.buf_sector+2]
                mov     ss:HIGH_SECTOR, dx
                mov     dx, [di+6]      ; [DI+BUFFINFO.buf_sector]
                pop     ds
                cmp     ecx, 2
                jb      short RET1      ; Was 0 length file (or mucked Firclus if ECX=1)
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jz      short freeent2  ; FAT32
                cmp     cx, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
                jmp     short freeent3
; ---------------------------------------------------------------------------

freeent2:                               ; ...
                cmp     ecx, es:[bp+2Dh] ; [ES:BP+DPB.LAST_CLUSTER]

freeent3:                               ; ...
                ja      short RET1      ; Treat like zero length file (firclus mucked)
                sub     bx, di
                push    bx
                push    ds:HIGH_SECTOR
                push    dx
                mov     bx, cx
                shr     ecx, 16
                mov     ds:CLUSTNUM_HW, cx
                call    RELEASE         ; Free any data allocated
                pop     dx
                pop     ds:HIGH_SECTOR
                jnb     short GET_BUF_BACK
                pop     bx

freeent_retn:                           ; ...
                retn
; ---------------------------------------------------------------------------

GET_BUF_BACK:                           ; ...
                mov     ds:ALLOWED, 18h ; Allowed_RETRY+Allowed_FAIL
                xor     al, al
                call    GETBUFFR
                pop     bx
                jb      short freeent_retn
                call    SET_BUF_AS_DIR
                add     bx, word ptr ds:CURBUF
                mov     si, bx
                add     si, 1Ah         ; + dir_entry.dir_first

RET1:                                   ; ...
                clc
                retn
FREEENT         endp


; =============== S U B R O U T I N E =======================================


CHECK_VIRT_OPEN proc near               ; ...
                push    ax
                lahf
                cmp     ds:VIRTUAL_OPEN, 0
                jz      short ALL_CLOSED
                mov     ds:VIRTUAL_OPEN, 0
                push    es
                push    di
                les     di, ds:THISSFT
                call    DEV_CLOSE_SFT
                pop     di
                pop     es

ALL_CLOSED:                             ; ...
                sahf
                pop     ax
                retn
CHECK_VIRT_OPEN endp


; =============== S U B R O U T I N E =======================================


MAKEFCB         proc near               ; ...
                mov     ss:SpaceFlag, 0
                xor     dl, dl
                test    al, 2
                jnz     short DEFDRV
                mov     byte ptr es:[di], 0

DEFDRV:                                 ; ...
                inc     di
                mov     cx, 8
                test    al, 4
                xchg    ax, bx
                mov     al, 20h ; ' '
                jz      short FILLB
                add     di, cx
                xor     cx, cx

FILLB:                                  ; ...
                rep stosb
                mov     cl, 3
                test    bl, 8
                jz      short FILLB2
                add     di, cx
                xor     cx, cx

FILLB2:                                 ; ...
                rep stosb
                xchg    ax, cx
                stosw
                stosw
                sub     di, 16
                test    bl, 1
                jz      short SKPSPC
                call    SCANB
                call    DELIM
                jnz     short NOSCAN
                inc     si

SKPSPC:                                 ; ...
                call    SCANB

NOSCAN:                                 ; ...
                call    GETLET
                jbe     short NODRV
                cmp     byte ptr [si], 3Ah ; ':'
                jnz     short NODRV
                inc     si
                sub     al, 40h ; '@'
                jbe     short BADDRV
                push    ax
                call    GetVisDrv
                pop     ax
                jnb     short HAVDRV
                cmp     ss:DrvErr, 1Ah
                jz      short HAVDRV

BADDRV:                                 ; ...
                mov     dl, 0FFh

HAVDRV:                                 ; ...
                stosb
                inc     si
                dec     di

NODRV:                                  ; ...
                dec     si
                inc     di
MAKEFCB         endp


; =============== S U B R O U T I N E =======================================


NORMSCAN        proc near               ; ...
                mov     cx, 8
                call    GETWORD
                cmp     byte ptr [si], 2Eh ; '.'
                jnz     short NODOT
                inc     si
                test    byte ptr ss:DOS34_FLAG+1, 1
                jz      short VOLOK
                movsb
                mov     cx, 2
                jmp     short contvol
; ---------------------------------------------------------------------------

VOLOK:                                  ; ...
                mov     cx, 3

contvol:                                ; ...
                call    MUSTGETWORD

NODOT:                                  ; ...
                mov     al, dl
                and     ss:DOS34_FLAG, 0FEFFh
                retn
NORMSCAN        endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR GETWORD

NONAM:                                  ; ...
                add     di, cx
                dec     si
                retn
; END OF FUNCTION CHUNK FOR GETWORD

; =============== S U B R O U T I N E =======================================


GETWORD         proc near               ; ...

; FUNCTION CHUNK AT 8E26 SIZE 00000004 BYTES

                call    GETLET
                jbe     short NONAM
                dec     si
GETWORD         endp


; =============== S U B R O U T I N E =======================================


MUSTGETWORD     proc near               ; ...
                call    GETLET
                jnz     short MustCheckCX
                test    ss:SpaceFlag, 0FFh
                jz      short FILLNAM
                cmp     al, 20h ; ' '
                jnz     short FILLNAM

MustCheckCX:                            ; ...
                jcxz    short MUSTGETWORD
                dec     cx
                cmp     al, 2Ah ; '*'
                jnz     short NOSTAR
                mov     al, 3Fh ; '?'
                rep stosb

NOSTAR:                                 ; ...
                stosb
                cmp     al, 3Fh ; '?'
                jnz     short MUSTGETWORD
                or      dl, 1
                jmp     short MUSTGETWORD
; ---------------------------------------------------------------------------

FILLNAM:                                ; ...
                mov     al, 20h ; ' '
                rep stosb
                dec     si
                retn
MUSTGETWORD     endp


; =============== S U B R O U T I N E =======================================


SCANB           proc near               ; ...
                lodsb
                call    SPCHK
                jz      short SCANB
                dec     si

scanb_retn:                             ; ...
                retn
SCANB           endp


; =============== S U B R O U T I N E =======================================


NameTrans       proc near               ; ...
                mov     ss:SpaceFlag, 1
                push    ss
                pop     es
                mov     di, offset NAME1
                push    di
                mov     ax, 2020h
                mov     cx, 5
                stosb
                rep stosw
                xor     al, al
                mov     dl, al
                stosb
                pop     di
                call    NORMSCAN
                cmp     ss:NAME1, 0E5h
                jnz     short scanb_retn
                mov     ss:NAME1, 5
                retn
NameTrans       endp

; ---------------------------------------------------------------------------
CharType        db  66h, 66h, 66h, 66h,   6, 66h, 66h, 66h ; ...
                db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h
                db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh
                db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h
                db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
                db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh
                db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
                db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h

; =============== S U B R O U T I N E =======================================


GETLET          proc near               ; ...
                lodsb
GETLET          endp


; =============== S U B R O U T I N E =======================================


UCase           proc near               ; ...
                push    bx
                mov     bx, offset FILE_UCASE_TAB_2 ; FILE_UCASE_TAB+2

gl_0:                                   ; ...
                cmp     al, 'a'
                jb      short gl_2      ; Already upper case, go check type
                cmp     al, 'z'
                ja      short gl_1
                sub     al, 20h         ; Convert to upper case

gl_1:                                   ; ...
                cmp     al, 80h
                jb      short gl_2      ; Not EuroChar, go check type
                sub     al, 80h         ; translate to upper case with this index
                push    ds
                mov     ds, cs:DosDSeg
                xlat                    ; ds as file_ucase_tab is in DOSDATA
                pop     ds

gl_2:                                   ; ...
                push    ax
                call    GetCharType     ; returns type flags in AL
                test    al, 1           ; test for normal character
                pop     ax
                pop     bx
                retn
UCase           endp


; =============== S U B R O U T I N E =======================================


GETLET3         proc near               ; ...
                push    bx
                jmp     short gl_0
GETLET3         endp


; =============== S U B R O U T I N E =======================================


DELIM           proc near               ; ...
                push    ax
                call    GetCharType
                test    al, 2
                pop     ax
                retn
DELIM           endp


; =============== S U B R O U T I N E =======================================


SPCHK           proc near               ; ...
                push    ax
                call    GetCharType
                test    al, 4
                pop     ax
                retn
SPCHK           endp


; =============== S U B R O U T I N E =======================================


GetCharType     proc near               ; ...
                cmp     al, 7Eh
                jnb     short gct_90
                push    bx
                mov     bx, offset CharType
                shr     al, 1
                xlat    byte ptr cs:[bx]
                pop     bx
                jnb     short gct_80
                shr     al, 4

gct_80:                                 ; ...
                and     al, 0Fh
                retn
; ---------------------------------------------------------------------------

gct_90:                                 ; ...
                mov     al, 0Fh
                retn
GetCharType     endp


; =============== S U B R O U T I N E =======================================


PATHCHRCMP      proc near               ; ...
                cmp     al, 2Fh ; '/'
                jbe     short PathRet
                cmp     al, 5Ch ; '\'
                retn
; ---------------------------------------------------------------------------

GotFor:                                 ; ...
                mov     al, 5Ch ; '\'
                retn
; ---------------------------------------------------------------------------

PathRet:                                ; ...
                jz      short GotFor
                retn
PATHCHRCMP      endp

; ---------------------------------------------------------------------------
BCONX           dd 0                    ; ...
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR STATCHK

loc_D6C2:                               ; ...
                pop     ax
                pop     bx
; END OF FUNCTION CHUNK FOR STATCHK

; =============== S U B R O U T I N E =======================================


SPOOLINT        proc near               ; ...
                pushf
                cmp     ss:IDLEINT, 0
                jz      short POPFRET
                cmp     ss:ERRORMODE, 0
                jnz     short POPFRET
                push    word ptr ss:IDLEINT
                int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
                pop     word ptr ss:IDLEINT

POPFRET:                                ; ...
                popf

_RET37:                                 ; ...
                retn
SPOOLINT        endp


; =============== S U B R O U T I N E =======================================


DSKSTATCHK      proc near               ; ...

; FUNCTION CHUNK AT 3CA0 SIZE 000001C5 BYTES
; FUNCTION CHUNK AT 3E6A SIZE 00000003 BYTES
; FUNCTION CHUNK AT 40AE SIZE 0000007F BYTES
; FUNCTION CHUNK AT 90D5 SIZE 0000008F BYTES

                cmp     ss:INDOS, 1
                jnz     short _RET37
                push    cx
                push    es
                push    bx
                push    ds
                push    si
                lds     si, cs:BCONX
                push    word ptr [si]
                push    ax
                mov     ax, ss
                mov     ds, ax
                mov     es, ax
                mov     bx, offset DSKSTCALL
                mov     ds:DSKSTCOM, 5
                mov     ds:DSKSTCALL, 14
                mov     ds:DSKSTST, 0
                lds     si, ds:BCON
                call    DEVIOCALL2
                pop     ax
                test    al, al
                pop     ax
                jnz     short dskstatchk1
                lds     si, cs:BCONX
                mov     [si], ax

dskstatchk1:                            ; ...
                push    ss
                pop     ds
                test    byte ptr ds:DSKSTST+1, 2
                jz      short _GotCh
                xor     al, al

RET36:                                  ; ...
                pop     si
                pop     ds
                pop     bx
                pop     es
                pop     cx
                retn
; ---------------------------------------------------------------------------

_GotCh:                                 ; ...
                mov     al, ds:DSKCHRET
                cmp     al, 3           ; "C"-"@"
                jnz     short RET36
                mov     ds:DSKSTCOM, 4
                mov     ds:DSKSTCALL, 16h
                mov     ds:DSKCHRET, cl
                mov     ds:DSKSTST, 0
                mov     ds:DSKSTCNT, 1
                lds     si, ds:BCON
                call    DEVIOCALL2
                pop     si
                pop     ds
                pop     bx
                pop     es
                pop     cx
                jmp     CNTCHAND
DSKSTATCHK      endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


STATCHK         proc near               ; ...

; FUNCTION CHUNK AT 8F32 SIZE 00000002 BYTES

                push    bx
                push    ax
                cmp     al, 2
                jz      short STATCHK2
                call    DSKSTATCHK

STATCHK2:                               ; ...
                xor     bx, bx
                call    GET_IO_SFT
                jb      short _RET18P
                mov     ah, 1
                call    IOFUNC
                jz      loc_D6C2
                pop     bx
                cmp     bl, 2
                pop     bx
                jz      short STATCHK3
                cmp     al, 19          ; 'S'-'@'
                jnz     short NOSTOP
                cmp     ss:SCAN_FLAG, 0
                jnz     short check_end
                xor     ah, ah
                call    IOFUNC
                jmp     short PAUSOSTRT
; ---------------------------------------------------------------------------

NOSTOP:                                 ; ...
                cmp     al, 16          ; "P"-"@"
                jnz     short check_next
                cmp     ss:SCAN_FLAG, 0
                jz      short INCHK
                retn
; ---------------------------------------------------------------------------

check_next:                             ; ...
                cmp     al, 3           ; "C"-"@"
                jz      short INCHK

check_end:                              ; ...
                clc
                retn
; ---------------------------------------------------------------------------

STATCHK3:                               ; ...
                or      ah, 0FFh
                retn
; ---------------------------------------------------------------------------

_RET18P:                                ; ...
                pop     ax
                pop     bx

_RET18:                                 ; ...
                xor     al, al
                retn
; ---------------------------------------------------------------------------

PAUSOLP:                                ; ...
                call    SPOOLINT

PAUSOSTRT:                              ; ...
                mov     ah, 1
                call    IOFUNC
                jz      short PAUSOLP

INCHK:                                  ; ...
                push    bx
                xor     bx, bx
                call    GET_IO_SFT
                pop     bx
                jb      short _RET18
                xor     ah, ah
                call    IOFUNC
                cmp     al, 16          ; 'P'-'@'
                jz      short PRINT_ON_OFF
                cmp     al, 3           ; 'C'-'@'
                jz      CNTCHAND
                stc
                retn
; ---------------------------------------------------------------------------

PRINT_ON_OFF:                           ; ...
                not     ss:PFLAG
                push    bx
                mov     bx, 4
                call    GET_IO_SFT
                pop     bx
                jb      short _RET18
                push    es
                push    di
                push    ds
                pop     es
                mov     di, si
                test    byte ptr es:[di+6], 8
                jz      short NORM_PR
                push    ax
                mov     ax, 1126h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
                                        ; Return: CF set on error, AX = error code
                                        ; STACK unchanged
                pop     ax
                jnb     short NORM_PR
                mov     ss:PFLAG, 0
                push    ax
                mov     ax, 1124h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - ???
                                        ; ES:DI -> SFT, SS = DOS CS
                pop     ax
                jmp     short RETP6
; ---------------------------------------------------------------------------

NORM_PR:                                ; ...
                cmp     ss:PFLAG, 0
                jnz     short PRNOPN
                call    DEV_CLOSE_SFT
                jmp     short RETP6
; ---------------------------------------------------------------------------

PRNOPN:                                 ; ...
                call    DEV_OPEN_SFT

RETP6:                                  ; ...
                pop     di
                pop     es
                xor     al, al
                retn
STATCHK         endp


; =============== S U B R O U T I N E =======================================


restore_32bit_regs proc near            ; ...
                push    ds
                pushf
                pusha
                mov     ds, cs:DosDSeg
                mov     ax, sp
                mov     si, (offset RENAMEDMA+176h) ; 374
                cmp     ax, offset AUXSTACK
                jb      short rest32bitregs_cont
                mov     si, (offset AUXSTACK+176h) ; 374
                cmp     ax, offset DSKSTACK
                jb      short rest32bitregs_cont
                mov     si, (offset DSKSTACK+176h) ; 374

rest32bitregs_cont:                     ; ...
                mov     di, [si]
                mov     dx, [si+2]
                mov     cx, [si+4]
                mov     bx, [si+6]
                mov     ax, [si+8]
                shl     edi, 16
                shl     edx, 16
                shl     ecx, 16
                shl     ebx, 16
                shl     eax, 16
                popa
                popf
                pop     ds
                retn
restore_32bit_regs endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR DSKSTATCHK

CNTCHAND:                               ; ...
                and     ss:DOS_FLAG, 0EFh
                test    byte ptr ss:DOS34_FLAG+1, 2
                jnz     short around_deadlock
                mov     al, 3
                call    BUFOUT
                call    CRLF

around_deadlock:                        ; ...
                push    ss
                pop     ds
                cmp     ds:CONSWAP, 0
                jz      short NOSWAP
                call    SWAPBACK

NOSWAP:                                 ; ...
                call    restore_32bit_regs ; restore hw of 32 bit regs
                cli
                lss     sp, dword ptr ds:USER_SP
                call    restore_world
                pop     es
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:INDOS, 0
                mov     ds:INDOS_FLAG, 0
                mov     ds:ERRORMODE, 0
                mov     ds:ConC_Spsave, sp
                add     ds:ConC_Spsave, 2
                pop     ds
                clc
                int     23h             ; DOS - CONTROL "C" EXIT ADDRESS
                                        ; Return: return via RETF 2 with CF set
                                        ; DOS will abort program with errorlevel 0
                                        ; else
                                        ; interrupted DOS call continues
                cli
                push    ax
                mov     ax, ds
                mov     ds, cs:DosDSeg
                mov     ds:TEMPSEG, ax
                pop     ax
                mov     ds:USER_IN_AX, ax
                pushf
                pop     ax
                cmp     sp, ds:ConC_Spsave
                jnz     short ctrlc_try_new

ctrlc_repeat:                           ; ...
                mov     ax, ds:USER_IN_AX
                mov     ds, ds:TEMPSEG

COMMANDJ:                               ; ...
                jmp     COMMAND
; ---------------------------------------------------------------------------

ctrlc_try_new:                          ; ...
                add     sp, 2
                test    al, 1
                jz      short ctrlc_repeat
                mov     ds, ds:TEMPSEG
                assume ds:BIOSDATA

ctrlc_abort:                            ; ...
                mov     ax, 4C00h
                push    ds
                mov     ds, cs:DosDSeg
                assume ds:nothing
                mov     ds:DidCTRLC, 0FFh
                pop     ds
                jmp     short COMMANDJ
; END OF FUNCTION CHUNK FOR DSKSTATCHK
; ---------------------------------------------------------------------------

DIVOV:                                  ; ...
                mov     ds, cs:DosDSeg
                mov     ax, 1
                call    ds:_divov_
                jmp     short ctrlc_abort
; ---------------------------------------------------------------------------

_OUTMES:
                push    ss
                pop     es
                push    ss
                pop     ds
                mov     ds:DSKSTCOM, 8  ; DEVWRT
                mov     ds:DSKSTCALL, 16h ; DRDWRHL
                mov     ds:DSKSTST, 0
                mov     ds:DSKSTCNT, bx
                mov     bx, offset DSKSTCALL
                mov     ds:DEVIOBUF_PTR, si
                mov     ds:DOSSEG_INIT, cs
                lds     si, ds:BCON
                call    DEVIOCALL2
                mov     es:DEVIOBUF_PTR, offset DEVIOBUF
                mov     es:DSKSTCNT, 1
                retn

; =============== S U B R O U T I N E =======================================


CHARHARD        proc near               ; ...
                cmp     ss:ERRORMODE, 0 ; Q: are we in the middle of int 24
                jnz     short chard1    ; Y: allow fail
                or      ah, 10h         ; Allowed_RETRY ; assume ctrl p
                test    ss:PFLAG, 0FFh  ; Q: has ctrl p been pressed
                jnz     short ctrlp     ; Y:

chard1:                                 ; ...
                or      ah, 38h         ; Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL

ctrlp:                                  ; ...
                mov     ss:ALLOWED, ah
                mov     word ptr ss:EXITHOLD+2, es
                mov     word ptr ss:EXITHOLD, bp
                push    si
                and     di, 0FFh        ; STECODE
                mov     bp, ds          ; Device pointer is BP:SI
                call    near ptr FATALC
                pop     si
                retn
CHARHARD        endp


; =============== S U B R O U T I N E =======================================


HARDERR         proc near               ; ...
                xchg    ax, di
                and     di, 0FFh
                cmp     di, 0
                jnz     short NOSETWRPERR
                push    ax
                mov     al, es:[bp+0]
                mov     ss:WPERR, al
                pop     ax

NOSETWRPERR:                            ; ...
                sub     ax, cx
                add     dx, ax
                adc     ss:HIGH_SECTOR, 0
                push    dx
                mul     word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                pop     dx
                add     bx, ax
                xor     ah, ah
                cmp     ss:HIGH_SECTOR, 0
                jnz     short TESTDIR
                cmp     dx, es:[bp+6]   ; [ES:BP+DPB.FIRST_FAT]
                jb      short ERRINT

TESTDIR:                                ; ...
                inc     ah
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short TESTDIR1
                cmp     dx, es:[bp+11h] ; [es:bp+DPB.DIR_SECTOR]
                jnb     short TESTDIR4  ; not in FAT
                cmp     word ptr es:[bp+1Fh], 0FFFFh ; [ES:BP+DPB.FREE_CNT],-1
                jz      short ERRINT
                mov     word ptr es:[bp+1Fh], 0FFFFh
                jmp     short ERRINT1
; ---------------------------------------------------------------------------

TESTDIR1:                               ; ...
                shl     edx, 16
                mov     dx, ss:HIGH_SECTOR
                ror     edx, 16
                cmp     edx, es:[bp+29h] ; [es:bp+DPB.FCLUS_FSECTOR]
                jnb     short TESTDIR2
                cmp     dword ptr es:[bp+1Fh], 0FFFFFFFFh
                jz      short ERRINT
                mov     dword ptr es:[bp+1Fh], 0FFFFFFFFh

ERRINT1:                                ; ...
                or      byte ptr es:[bp+18h], 1 ; [es:bp+DPB.FIRST_ACCESS]
                jmp     short ERRINT
; ---------------------------------------------------------------------------

TESTDIR2:                               ; ...
                inc     ah
                jmp     short ERRINT2
; ---------------------------------------------------------------------------

TESTDIR4:                               ; ...
                inc     ah
                cmp     dx, es:[bp+0Bh] ; [ES:BP+DPB.FIRST_SECTOR]
                jb      short ERRINT

ERRINT2:                                ; ...
                inc     ah

ERRINT:                                 ; ...
                shl     ah, 1
                or      ah, ss:READOP
                or      ah, ss:ALLOWED
HARDERR         endp


; =============== S U B R O U T I N E =======================================


FATAL           proc near               ; ...
                mov     al, es:[bp+0]   ; [ES:BP+DPB.DRIVE]
FATAL           endp


; =============== S U B R O U T I N E =======================================


FATAL1          proc near               ; ...
                mov     word ptr ss:EXITHOLD+2, es
                mov     word ptr ss:EXITHOLD, bp
                les     si, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                mov     bp, es
FATAL1          endp


; =============== S U B R O U T I N E =======================================


FATALC          proc far                ; ...

; FUNCTION CHUNK AT 9AB9 SIZE 0000000D BYTES
; FUNCTION CHUNK AT 9ACE SIZE 00000022 BYTES

                call    SET_I24_EXTENDED_ERROR
                cmp     di, 0Ch
                jbe     short NET_I24_ENTRY
                mov     di, 0Ch

NET_I24_ENTRY:                          ; ...
                cmp     ss:ERRORMODE, 0
                jz      short NoSetFail
                mov     al, 3
                jmp     short FailRet
; ---------------------------------------------------------------------------

NoSetFail:                              ; ...
                mov     ss:CONTSTK, sp
                push    ss
                pop     es
                cmp     ss:SFN, 0FFFFh
                jz      short _NoFree
                push    ds
                push    si
                lds     si, ss:PJFN
                mov     byte ptr [si], 0FFh
                pop     si
                pop     ds

_NoFree:                                ; ...
                cli
                inc     ss:ERRORMODE
                dec     ss:INDOS
                dec     ss:INDOS_FLAG
                test    ss:EXTOPEN_ON, 2
                jz      short i24yes
                mov     al, 3
                jmp     short passi24
; ---------------------------------------------------------------------------

i24yes:                                 ; ...
                call    restore_32bit_regs
                lss     sp, dword ptr ss:USER_SP
                int     24h             ; DOS - FATAL ERROR HANDLER ADDRESS
                                        ; Automatically called upon detection of unrecoverable I/O error.
                mov     es:USER_SP, sp
                mov     es:USER_SS, ss
                mov     bp, es
                mov     ss, bp

passi24:                                ; ...
                mov     sp, ss:CONTSTK
                inc     ss:INDOS
                inc     ss:INDOS_FLAG
                mov     ss:ERRORMODE, 0
                sti

FailRet:                                ; ...
                les     bp, ss:EXITHOLD
                cmp     al, 1
                jb      short CheckIgnore
                jz      short CheckRetry
                cmp     al, 3
                jnz     short DoAbort
                test    ss:ALLOWED, 8
                jz      short DoAbort

DoFail:                                 ; ...
                mov     al, 3
                test    ss:EXTOPEN_ON, 2
                jnz     short CleanUp
                inc     ss:FAILERR

CleanUp:                                ; ...
                mov     ss:WPERR, 0FFh
                cmp     ss:SFN, 0FFFFh
                jnz     short CleanUp2
                retn
; ---------------------------------------------------------------------------

CleanUp2:                               ; ...
                push    ds
                push    si
                push    ax
                mov     ax, ss:SFN
                lds     si, ss:PJFN
                mov     [si], al
                pop     ax
                pop     si
                pop     ds
                retn
; ---------------------------------------------------------------------------

CheckIgnore:                            ; ...
                test    ss:ALLOWED, 20h
                jz      short DoFail
                jmp     short CleanUp
; ---------------------------------------------------------------------------

CheckRetry:                             ; ...
                test    ss:ALLOWED, 10h
                jz      short DoFail
                jmp     short CleanUp
; ---------------------------------------------------------------------------

DoAbort:                                ; ...
                push    ss
                pop     ds
                cmp     ds:CONSWAP, 0
                jz      short NOSWAP2
                call    SWAPBACK

NOSWAP2:                                ; ...
                cmp     ds:fAborting, 0
                jnz     short DoFail
                mov     byte ptr ds:EXIT_TYPE, 2
                xor     al, al
                jmp     exit_inner
; ---------------------------------------------------------------------------

reset_environment:                      ; ...
                push    ds
                call    end_critical_section
                mov     ss:fAborting, 0FFh
                mov     ax, 1122h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
                                        ; SS = DOS CS
                mov     al, 22h
                call    $GET_INTERRUPT_VECTOR
                pop     cx
                push    es
                push    bx
                mov     bx, ss:CurrentPDB
                mov     ds, bx
                mov     ax, ds:16h      ; [PDB.PARENT_PID]
                cmp     ax, bx
                jz      short reset_return
                cmp     bx, cx
                jnz     short reset_return
                push    ax
                cmp     byte ptr ss:EXIT_TYPE, 3
                jz      short reset_to_parent
                call    arena_free_process
                call    DOS_ABORT

reset_to_parent:                        ; ...
                pop     ss:CurrentPDB

reset_return:                           ; ...
                push    ss
                pop     ds
                mov     al, 0FFh
                call    ECritDisk
                call    FLUSHBUF
                call    LCritDisk
                call    CHECK_VIRT_OPEN
                cli
                mov     ds:INDOS, 0
                mov     ds:INDOS_FLAG, 0
                mov     ds:WPERR, 0FFh
                mov     byte ptr ds:359h, 0
                pop     large [dword ptr ds:580h]
                mov     ds, word ptr ds:330h
                lss     sp, ds:2Eh
                call    restore_world
FATALC          endp

                pop     es
                push    ax
                mov     ax, ds
                mov     ds, cs:DosDSeg
                mov     ds:TEMPSEG, ax
                pop     ax
                mov     ds:USER_SP, ax
                pop     ax
                pop     ax
                pop     ax
                push    0F202h
                push    large [ds:EXITHOLD]
                mov     ax, ds:USER_SP
                mov     ds, ds:TEMPSEG
                iret

; =============== S U B R O U T I N E =======================================


SET_I24_EXTENDED_ERROR proc near        ; ...
                push    ax
                mov     ax, offset SPECIAL_VERSION
                sub     ax, offset ErrMap24
                push    ds
                mov     ds, cs:DosDSeg
                cmp     di, ax
                mov     ax, di
                jnb     short NoTrans
                mov     al, ds:ErrMap24[di]
                xor     ah, ah

NoTrans:                                ; ...
                mov     ds:EXTERR, ax
                pop     ds
                pop     ax
                push    si
                mov     si, offset ERR_TABLE_24
                call    CAL_LK
                pop     si
                retn
SET_I24_EXTENDED_ERROR endp

; ---------------------------------------------------------------------------
CL0FATENTRY     dd 0                    ; ...
FIRST_BUFF_ADDR dw 0                    ; ...

; =============== S U B R O U T I N E =======================================


FLUSHBUF        proc near               ; ...

; FUNCTION CHUNK AT CB7C SIZE 00000053 BYTES

                test    byte ptr ds:2, 1
                jz      FLUSHBUF2
                retn
FLUSHBUF        endp

; ---------------------------------------------------------------------------

$WAIT:                                  ; ...
                xor     ax, ax
                xchg    ax, ss:exit_code
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

Exec_Bad_Fun:                           ; ...
                mov     ss:EXTERR_LOCUS, 1
                mov     al, 1

Exec_Ret_Err:                           ; ...
                mov     sp, bp
                pop     bp
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

ExecReadyJ:                             ; ...
                mov     word ptr [bp+2], offset LeaveDOS
                call    ExecReady
                jmp     norm_ovl
; ---------------------------------------------------------------------------

$EXEC:                                  ; ...
                push    bp
                mov     bp, sp
                sub     sp, 30
                mov     ss:A20OFF_COUNT, 0
                or      al, al
                jz      short Exec_Check_2
                cmp     al, 5           ; ExecReady call
                jz      short ExecReadyJ
                ja      short Exec_Bad_Fun
                test    al, 1
                jz      short Exec_Bad_Fun
                cmp     al, 3
                jnz     short Exec_Check_2
                push    ax
                mov     ax, 4A30h       ; INT 2Fh AX=4A30h
                pushf
                push    cs
                call    near ptr i2f
                pop     ax

Exec_Check_2:                           ; ...
                mov     [bp-4], bx      ; Exec_BlkL,BX ; stash args
                mov     word ptr [bp-2], es ; Exec_BlkH,ES
                mov     [bp-5], al      ; Exec_Func,AL
                mov     byte ptr [bp-6], 0 ; Exec_Load_High,0
                mov     [bp-26], dx     ; ExecNameL,DX ; set up length of exec name
                mov     word ptr [bp-24], ds ; ExecNameH,DS
                mov     si, dx          ; move pointer to convenient place
                call    DStrLen
                mov     [bp-22], cx     ; ExecNameLen,CX ; save length
                mov     al, ss:AllocMethod ; save alloc method
                mov     ss:ALLOCMSAVE, al
                mov     al, 0A0h        ; Access mode bits: (0 to 2)
                                        ; 000  read access
                                        ;
                                        ; Sharing mode bits: (4 to 6)
                                        ; 010  deny others write access
                                        ;
                                        ; bit 7 - private
                push    bp
                or      ss:DOS_FLAG, 1  ; EXECOPEN
                call    $OPEN
                pushf
                and     ss:DOS_FLAG, 0FEh ; ~EXECOPEN ; reset flag
                popf
                pop     bp
                jb      short Exec_Ret_Err
                mov     [bp-8], ax      ; Exec_FH,AX
                mov     bx, ax
                xor     al, al
                call    $IOCTL
                jb      short Exec_BombJ
                test    dl, 80h         ; devid_ISDEV
                jz      short Exec_Check_Environ
                mov     al, 2           ; error_file_not_found

Exec_BombJ:                             ; ...
                jmp     Exec_Bomb
; ---------------------------------------------------------------------------

BadEnv:                                 ; ...
                mov     al, 0Ah         ; error_bad_environment
                jmp     Exec_Bomb
; ---------------------------------------------------------------------------

Exec_Check_Environ:                     ; ...
                call    _sub_unknown_
                mov     word ptr [bp-18], 0 ; Exec_Load_Block,0
                mov     word ptr [bp-14], 0 ; Exec_Environ,0
                test    byte ptr [bp-5], 2 ; Exec_Func,exec_func_overlay
                jnz     short Exec_Read_Header
                lds     si, [bp-4]      ; Exec_Blk ; get block
                mov     ax, [si]        ; [SI+EXEC1.ENVIRON] ; addr of environ
                or      ax, ax
                jnz     short Exec_Scan_Env
                mov     ds, ss:CurrentPDB
                mov     ax, ds:44       ; [PDB.ENVIRON]
                or      ax, ax
                jz      short Exec_Read_Header

Exec_Scan_Env:                          ; ...
                mov     es, ax
                xor     di, di
                mov     cx, 8000h       ; at most 32k of environment
                xor     al, al

Exec_Get_Environ_Len:                   ; ...
                repne scasb             ; find that nul byte
                jnz     short BadEnv
                dec     cx              ; Dec CX for the next nul byte test
                js      short BadEnv    ; gone beyond the end of the environment
                scasb                   ; is there another nul byte?
                jnz     short Exec_Get_Environ_Len ; no, scan some more
                push    di
                lea     bx, [di+11h]    ; LEA BX,[DI+0Fh+2]
                add     bx, [bp-22]     ; ExecNameLen ; BX <- length of environment
                                        ; remember argv[0] length
                                        ; round up and remember argc
                shr     bx, 4           ; number of paragraphs needed
                push    es
                call    $ALLOC          ; can we get the space?
                pop     ds
                pop     cx
                jnb     short Exec_Save_Environ
                jmp     short Exec_No_Mem ; nope... cry and sob
; ---------------------------------------------------------------------------

Exec_Save_Environ:                      ; ...
                mov     es, ax
                mov     [bp-14], ax     ; Exec_Environ,AX ; save him for a rainy day
                xor     si, si
                mov     di, si
                rep movsb               ; copy the environment
                mov     ax, 1
                stosw
                lds     si, [bp-26]     ; lds SI,ExecName
                mov     cx, [bp-22]     ; mov CX,ExecNameLen
                rep movsb

Exec_Read_Header:                       ; ...
                push    ss
                pop     ds
                mov     cx, 26          ; exec_header_len ; header size
                mov     dx, offset exec_signature
                push    es
                push    ds
                call    ExecRead
                pop     ds
                pop     es
                jb      short Exec_Bomb
                or      ax, ax
                jz      short Exec_Bad_File
                cmp     ax, 26          ; exec_header_len
                                        ; did we read the right number?
                jnz     short Exec_Com_Filej ;
                                        ; yep... continue
                test    ds:exec_max_BSS, 0FFFFh ; -1 ; indicate load high?
                jnz     short Exec_Check_Sig
                mov     byte ptr [bp-6], 0FFh ; mov Exec_Load_High,-1

Exec_Check_Sig:                         ; ...
                mov     ax, ds:exec_signature
                cmp     ax, 5A4Dh       ; 'MZ' ; exe_valid_signature
                jz      short Exec_Save_Start ; assume com file if no signature
                cmp     ax, 4D5Ah       ; 'ZM' ; exe_valid_old_signature
                jz      short Exec_Save_Start

Exec_Com_Filej:                         ; ...
                jmp     Exec_Com_File
; ---------------------------------------------------------------------------

Exec_Save_Start:                        ; ...
                mov     ax, ds:exec_pages ; get 512-byte pages
                shl     ax, 5           ; convert to paragraphs
                sub     ax, ds:exec_par_dir ; AX = size in paragraphs
                mov     [bp-12], ax     ; mov Exec_Res_Len_Para,AX
                test    byte ptr [bp-5], 2 ; test Exec_Func,exec_func_overlay
                jz      short Exec_Allocate ; allocation of space
                les     di, [bp-4]      ; les DI,Exec_Blk
                mov     ax, es:[di]     ; [ES:DI+EXEC3.load_addr]
                mov     [bp-20], ax     ; mov Exec_DMA,AX
                mov     ax, es:[di+2]   ; [ES:DI+EXEC3.reloc_fac]
                mov     [bp-10], ax     ; mov Exec_Rel_Fac,AX
                jmp     Exec_Find_Res
; ---------------------------------------------------------------------------

Exec_No_Mem:                            ; ...
                mov     al, 8           ; error_not_enough_memory
                jmp     short Exec_Bomb
; ---------------------------------------------------------------------------

Exec_Bad_File:                          ; ...
                mov     al, 0Bh         ; error_bad_format

Exec_Bomb:                              ; ...
                mov     bx, [bp-8]      ; mov BX,Exec_FH
                call    Exec_Dealloc
                call    LCritDisk       ; call LCritMEM
                push    ax
                push    bp
                call    $CLOSE
                pop     bp
                pop     ax
                jmp     Exec_Ret_Err
; ---------------------------------------------------------------------------

Exec_Chk_Mem:                           ; ...
                mov     al, ss:AllocMethod ; save current alloc method in ax
                mov     bl, ss:ALLOCMSAVE
                mov     ss:AllocMethod, bl ; restore original allocmethod
                test    bl, 40h         ; HIGH_ONLY
                jnz     short Exec_No_Mem ; no space in UMBs. Quit
                test    al, 40h         ; HIGH_ONLY
                jz      short Exec_No_Mem ; no memory
                mov     ax, ss:SAVE_AX
                jmp     short Exec_Norm_Alloc
; ---------------------------------------------------------------------------

Exec_Allocate:                          ; ...
                mov     word ptr [bp-30], 0 ; mov Exec_NoStack,0
                cmp     ds:exec_SS, 0   ; is there a stack seg ?
                jnz     short ea1       ; yes
                cmp     ds:exec_SP, 0   ; is there a stack ptr ?
                jnz     short ea1       ; yes
                inc     word ptr [bp-30] ; inc Exec_NoStack
                cmp     ax, 0FF0h       ; 1000h-10h ; Q: is this >= 64K-256 bytes
                jnb     short ea1       ; Y: don't set Exec_SP
                add     ax, 10h         ; add 10h paras to mem requirement

ea1:                                    ; ...
                test    ds:AllocMethod, 80h ; HIGH_FIRST
                                        ; Q: is the alloc strat high_first
                jz      short Exec_Norm_Alloc ; N: normal allocate
                                        ; Y: set high_only bit
                or      ds:AllocMethod, 40h ; HIGH_ONLY

Exec_Norm_Alloc:                        ; ...
                mov     ds:SAVE_AX, ax  ; save ax for possible 2nd
                                        ; attempt at allocating memory
                mov     bx, 0FFFFh      ; see how much room in arena
                push    ds
                call    $ALLOC          ; should have carry set and BX has max
                pop     ds
                mov     ax, ds:SAVE_AX
                add     ax, 10h         ; room for header
                cmp     bx, 11h         ; enough room for a header
                jb      short Exec_Chk_Mem
                cmp     ax, bx          ; is there enough for bare image?
                ja      short Exec_Chk_Mem
                test    byte ptr [bp-6], 0FFh ; test Exec_Load_High,-1
                jnz     short Exec_BX_Max ; load high, use max
                add     ax, ds:exec_min_BSS ; go for min allocation
                jb      short Exec_Chk_Mem
                cmp     ax, bx          ; enough space?
                ja      short Exec_Chk_Mem ; nope...
                sub     ax, ds:exec_min_BSS
                add     ax, ds:exec_max_BSS ; go for the MAX
                jb      short Exec_BX_Max
                cmp     ax, bx
                jbe     short Exec_Got_Block

Exec_BX_Max:                            ; ...
                mov     ax, bx

Exec_Got_Block:                         ; ...
                push    ds
                mov     bx, ax
                mov     [bp-16], bx     ; mov Exec_Size,BX
                call    $ALLOC          ; get the space
                pop     ds
                jb      Exec_Chk_Mem
                mov     cl, ds:ALLOCMSAVE
                mov     ds:AllocMethod, cl ; restore allocmethod
                cmp     word ptr [bp-30], 0 ; cmp Exec_NoStack,0
                jz      short ea2
                cmp     bx, 1000h       ; Q: >= 64K memory block
                jnb     short ea2       ; Y: Exec_SP = 0
                shl     bx, 4           ; get byte offset
                sub     bx, 100h        ; take care of PSP
                mov     ds:exec_SP, bx  ; Exec_SP = top of block

ea2:                                    ; ...
                mov     [bp-18], ax     ; mov Exec_Load_Block,AX
                add     ax, 10h
                test    byte ptr [bp-6], 0FFh ; test Exec_Load_High,-1
                jz      short Exec_Use_AX ; use ax for load info
                add     ax, [bp-16]     ; add AX,Exec_Size ; go to end
                sub     ax, [bp-12]     ; sub AX,Exec_Res_Len_Para
                                        ; drop off header
                sub     ax, 10h         ; drop off pdb

Exec_Use_AX:                            ; ...
                mov     [bp-10], ax     ; mov Exec_Rel_Fac,AX ; new segment
                mov     [bp-20], ax     ; mov Exec_DMA,AX ; beginning of dma

Exec_Find_Res:                          ; ...
                mov     dx, [bp-20]     ; mov DX,Exec_DMA
                mov     [bp-28], dx     ; mov Exec_DMA_Save,DX
                mov     dx, ds:exec_par_dir
                push    dx
                shl     dx, 4           ; low word of location
                pop     ax
                shr     ax, 12          ; high word of location
                mov     cx, ax          ; CX <- high
                mov     bx, [bp-8]      ; mov BX,Exec_FH
                push    ds
                xor     al, al
                call    $LSEEK          ; Seek to resident
                pop     ds
                jnb     short Exec_Big_Read ; Read resident into memory
                jmp     Exec_Bomb
; ---------------------------------------------------------------------------

Exec_Big_Read:                          ; ...
                mov     bx, [bp-12]     ; mov BX,Exec_Res_Len_Para
                cmp     bx, 1000h       ; Too many bytes to read?
                jb      short Exec_Read_OK
                mov     bx, 0FE0h       ; Max in one chunk FE00 bytes

Exec_Read_OK:                           ; ...
                sub     [bp-12], bx     ; sub Exec_Res_Len_Para,BX
                                        ; We read (soon) this many
                push    bx
                shl     bx, 4           ; Get count in bytes from paras
                mov     cx, bx          ; Count in correct register
                push    ds
                mov     ds, word ptr [bp-20] ; mov DS,Exec_DMA ; Set up read buffer
                xor     dx, dx
                push    cx
                call    ExecRead
                pop     cx              ; Get old count to verify
                pop     ds
                jb      Exec_Bomb
                cmp     cx, ax          ; Did we read enough?
                pop     bx              ; Get paragraph count back
                jz      short ExecCheckEnd ; and do reloc if no more to read
                sub     cx, ax
                cmp     cx, 512
                jnb     short Exec_Bad_FileJ ; If we are off by 512 bytes or more
                                        ; then the header lied and we have an error

ExecCheckEnd:                           ; ...
                add     [bp-20], bx     ; add Exec_DMA,BX ; Bump dma address
                test    word ptr [bp-12], 0FFFFh ; test Exec_Res_Len_Para,-1
                jnz     short Exec_Big_Read
                mov     cx, [bp-10]     ; mov CX,Exec_Rel_Fac
                mov     ax, ds:exec_SS  ; get initial SS
                add     ax, cx          ; and relocate him
                mov     ds:exec_init_SS, ax
                mov     ax, ds:exec_SP
                mov     ds:exec_init_SP, ax
                les     ax, dword ptr ds:exec_IP
                mov     ds:exec_init_IP, ax
                mov     ax, es
                add     ax, cx          ; relocated...
                mov     ds:exec_init_CS, ax
                xor     cx, cx
                mov     dx, ds:exec_rle_table
                mov     bx, [bp-8]      ; mov BX,Exec_FH
                push    ds
                xor     ax, ax
                call    $LSEEK
                pop     ds
                jnb     short exec_get_entries

Exec_Bad_FileJ:                         ; ...
                jmp     Exec_Bad_File
; ---------------------------------------------------------------------------

exec_get_entries:                       ; ...
                mov     dx, ds:exec_rle_count ; Number of entries left

exec_read_reloc:                        ; ...
                push    dx
                mov     dx, offset OPENBUF
                mov     cx, 396         ; ((Exec_Internal_Buffer_Size)/4)*4
                                        ; (397>>2)<<2
                push    ds
                call    ExecRead
                pop     es
                pop     dx
                jb      Exec_Bomb
                mov     cx, 99          ; (Exec_Internal_Buffer_Size)/4
                                        ; (397>>2)
                mov     di, offset OPENBUF ; mov DI,Exec_Internal_Buffer
                mov     si, [bp-10]     ; mov SI,Exec_Rel_Fac
                                        ; Relocate a single address

exec_reloc_one:                         ; ...
                or      dx, dx          ; Any more entries?
                jz      short Exec_Set_PDBJ ; no
                lds     bx, es:[di]     ; Get ra/sa of entry
                mov     ax, ds          ; Relocate address of item
                add     ax, [bp-28]     ; add AX,Exec_DMA_Save
                mov     ds, ax
                add     [bx], si
                add     di, 4
                dec     dx
                loop    exec_reloc_one  ; End of internal buffer?
                push    es
                pop     ds
                jmp     short exec_read_reloc ; Read in the next
                                        ; piece of the relocation table
; ---------------------------------------------------------------------------

Exec_Set_PDBJ:                          ; ...
                push    es              ; determine if this is a buggy exe packed file
                                        ; and if so patch in the right code
                push    ax
                push    cx
                mov     es, word ptr [bp-28] ; mov es,Exec_DMA_Save ; load segment
                mov     ax, ss:exec_init_CS
                mov     cx, ss:exec_init_IP
                call    ss:FixExePatch
                call    Rational386Patch
                pop     cx
                pop     ax
                pop     es
                jmp     Exec_Set_PDB
; ---------------------------------------------------------------------------

Exec_No_Memj:                           ; ...
                jmp     Exec_No_Mem
; ---------------------------------------------------------------------------

Exec_Com_File:                          ; ...
                test    byte ptr [bp-5], 2 ; test Exec_Func,exec_func_overlay
                jz      short Exec_Alloc_Com_File
                lds     si, [bp-4]      ; lds SI,Exec_Blk ; get arg block
                lodsw
                mov     [bp-20], ax     ; mov Exec_DMA,AX
                mov     ax, 0FFFFh
                jmp     short Exec_Read_Block ; read it all!
; ---------------------------------------------------------------------------

Exec_Chk_Com_Mem:                       ; ...
                mov     al, ss:AllocMethod ; save current alloc method in ax
                mov     bl, ss:ALLOCMSAVE
                mov     ss:AllocMethod, bl ; restore original allocmethod
                test    bl, 40h         ; HIGH_ONLY
                                        ; Q: was the HIGH_ONLY bit already set
                jnz     short Exec_No_Memj ; Y: no space in UMBs. Quit
                                        ; N: continue
                test    al, 40h         ; HIGH_ONLY
                                        ; Q: did we set the HIGH_ONLY bit
                jz      short Exec_No_Memj
                mov     ax, [bp-18]     ; mov ax,Exec_Load_Block
                                        ; ax = block we just allocated
                xor     bx, bx          ; bx => free arena
                call    ChangeOwner
                jmp     short Exec_Norm_Com_Alloc
; ---------------------------------------------------------------------------

Exec_Alloc_Com_File:                    ; ...
                test    ss:AllocMethod, 80h ; HIGH_FIRST
                                        ; Q: is the alloc strat high_first
                jz      short Exec_Norm_Com_Alloc ; N: normal allocate
                                        ; Y: set high_only bit
                or      ss:AllocMethod, 40h ; HIGH_ONLY

Exec_Norm_Com_Alloc:                    ; ...
                mov     bx, 0FFFFh
                call    $ALLOC          ; largest piece available as error
                or      bx, bx
                jz      short Exec_Chk_Com_Mem
                mov     [bp-16], bx     ; mov Exec_Size,BX
                                        ; save size of allocation block
                push    bx
                call    $ALLOC          ; largest piece available
                pop     bx              ; get size of block...
                mov     [bp-18], ax     ; mov Exec_Load_Block,AX
                add     ax, 10h         ; increment for header
                mov     [bp-20], ax     ; mov Exec_DMA,AX
                xor     ax, ax          ; presume 64K read...
                cmp     bx, 1000h       ; 64k or more in block?
                jnb     short Exec_Read_Com ; yes, read only 64k
                mov     ax, bx          ; convert size to bytes
                shl     ax, 4
                cmp     ax, 200h        ; enough memory for PSP and stack?
                jbe     short Exec_Chk_Com_Mem ; jump if not
                sub     ax, 100h        ; size of the block is < 64K
                                        ; reserve 256 bytes for stack

Exec_Read_Com:                          ; ...
                sub     ax, 100h        ; remember size of psp

Exec_Read_Block:                        ; ...
                push    ax              ; save number to read
                mov     bx, [bp-8]      ; mov BX,Exec_FH ; of com file
                xor     cx, cx          ; but seek to 0:0
                mov     dx, cx
                xor     ax, ax          ; seek relative to beginning
                call    $LSEEK          ; back to beginning of file
                pop     cx              ; number to read
                mov     ds, word ptr [bp-20] ; mov DS,Exec_DMA
                xor     dx, dx
                push    cx
                call    ExecRead
                pop     si              ; get number of bytes to read
                jnb     short OkRead
                jmp     Exec_Bomb
; ---------------------------------------------------------------------------

OkRead:                                 ; ...
                cmp     ax, si          ; did we read them all?
                jz      Exec_Chk_Com_Mem ; yes
                mov     bl, ss:ALLOCMSAVE
                mov     ss:AllocMethod, bl ; restore alloc method
                test    byte ptr [bp-5], 2 ; test Exec_Func,exec_func_overlay
                jnz     short Exec_Set_PDB ; no starto, chumo!
                mov     ax, [bp-20]     ; mov AX,Exec_DMA
                sub     ax, 10h
                mov     ss:exec_init_CS, ax
                mov     ss:exec_init_IP, 100h ; initial IP is 100h
                add     si, 0FEh        ; SI is AT MOST FF00h.
                                        ; Add FE to account for PSP
                                        ; word of 0 on stack.
                cmp     si, 0FFFEh      ; Q: was there >= 64K available
                jz      short Exec_St_Ok ; Y: stack is fine
                add     si, 100h        ; N: add the xtra 100h for stack

Exec_St_Ok:                             ; ...
                mov     ss:exec_init_SP, si ; max value for read is also SP!
                mov     ss:exec_init_SS, ax
                mov     ds, ax
                mov     word ptr [si], 0 ; 0 for return

Exec_Set_PDB:                           ; ...
                mov     bx, [bp-8]      ; mov BX,Exec_FH ; we are finished with the file.
                call    Exec_Dealloc
                push    bp
                call    $CLOSE          ; release the jfn
                pop     bp
                call    Exec_Alloc
                test    byte ptr [bp-5], 2 ; test Exec_Func,exec_func_overlay
                jz      short Exec_Build_Header
                call    Scan_Execname
                call    Scan_Special_Entries
                push    ax
                push    es
                mov     ax, 70h
                mov     es, ax
                assume es:nothing
                test    byte ptr es:9, 80h
                jz      short sysinit_done
                mov     es, ss:CurrentPDB ; es = current PSP (Sysinit PSP)
                assume es:nothing
                push    ss:SPECIAL_VERSION
                pop     word ptr es:40h ; [es:PDB.Version]
                                        ; store lie version in Sysinit PSP
                jmp     short $+2
; ---------------------------------------------------------------------------

sysinit_done:                           ; ...
                pop     es
                pop     ax

norm_ovl:                               ; ...
                mov     sp, bp
                pop     bp
                jmp     SYS_RET_OK      ; overlay load -> done
; ---------------------------------------------------------------------------

Exec_Build_Header:                      ; ...
                mov     dx, [bp-18]     ; mov DX,Exec_Load_Block
                mov     si, 1           ; ARENA.OWNER ; pointer to owner field
                mov     ax, [bp-14]     ; mov AX,Exec_Environ ; get environ pointer
                or      ax, ax
                jz      short No_Owner  ; no environment
                dec     ax              ; point to header
                mov     ds, ax
                mov     [si], dx        ; assign ownership

No_Owner:                               ; ...
                mov     ax, [bp-18]     ; mov ax,Exec_Load_Block
                                        ; get load block pointer
                dec     ax
                mov     ds, ax          ; point to header
                mov     [si], dx        ; assign ownership
                push    ds
                pop     es
                mov     di, 8           ; ARENA.NAME ; ES:DI points to destination
                call    Scan_Execname   ; parse execname
                                        ; ds:si->name, cx=name length
                push    cx              ; save for fake version
                push    si              ; save for fake version

MoveName:                               ; ...
                lodsb                   ; get char
                cmp     al, 2Eh ; '.'   ; is '.', may be name.exe
                jz      short Mem_Done  ; no, move to header
                stosb
                cmp     di, 16          ; ARENAHEADERSIZE ; end of mem arena block?
                jnb     short Mem_Done  ; jump if so
                loop    MoveName        ; continue

Mem_Done:                               ; ...
                xor     al, al          ; make ASCIIZ
                cmp     di, 16          ; ARENAHEADERSIZE ; if not all filled
                jnb     short Fill8
                stosb

Fill8:                                  ; ...
                pop     si              ; ds:si -> file name
                pop     cx
                call    Scan_Special_Entries
                push    dx
                mov     si, [bp-16]     ; mov SI,Exec_Size
                add     si, dx
                call    $DUP_PDB        ; ES is now PDB
                pop     dx
                push    word ptr [bp-14] ; push Exec_Environ
                pop     word ptr es:2Ch ; pop word [ES:PDB.ENVIRON]
                push    ss:SPECIAL_VERSION ; Set the DOS version number to ..
                pop     word ptr es:40h ; pop word [ES:PDB.Version]
                                        ; .. to be used for this application
                lds     si, [bp-4]      ; lds SI,Exec_Blk ; get the block
                push    ds
                push    si
                lds     si, [si+6]      ; lds SI,[SI+EXEC0.5C_FCB] ; get the 5c fcb
                mov     cx, 12          ; copy drive, name and ext
                push    cx
                mov     di, 5Ch
                mov     bl, [si]
                rep movsb               ; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
                xor     ax, ax          ; zero extent, etc for CPM
                stosw
                stosw
                pop     cx              ; get block
                pop     si
                pop     ds
                push    ds              ; save (again)
                push    si
                lds     si, [si+0Ah]    ; lds SI,[SI+EXEC0.6C_FCB] ; get 6C FCB
                mov     bh, [si]        ; do same as above
                rep movsb
                stosw
                stosw
                pop     si              ; get block (last time)
                pop     ds
                lds     si, [si+2]      ; lds SI,[SI+EXEC0.COM_LINE] ; command line
                or      cl, 80h
                mov     di, cx
                rep movsb               ; Wham!
                dec     cl              ; get 0FFh in CL
                mov     al, bh
                xor     bh, bh
                call    GetVisDrv
                jnb     short Exec_BL
                mov     bh, cl

Exec_BL:                                ; ...
                mov     al, bl
                xor     bl, bl
                call    GetVisDrv
                jnb     short Exec_Set_Return
                mov     bl, cl

Exec_Set_Return:                        ; ...
                call    Get_User_Stack  ; get his return address
                push    large dword ptr [si+12h] ; suck out the CS and IP
                push    large dword ptr [si+12h]
                pop     large [dword ptr es:0Ah] ; [ES:PDB.EXIT]
                xor     ax, ax
                mov     ds, ax          ; save them where we can get them
                                        ; later when the child exits.
                assume ds:BIOSDATA
                pop     large dword ptr addr_int_terminate ; 22h*4
                mov     word ptr ss:DMAADD, 80h
                mov     ds, ss:CurrentPDB
                assume ds:nothing
                mov     word ptr ss:DMAADD+2, ds
                test    byte ptr [bp-5], 1 ; test Exec_Func,exec_func_no_execute
                jz      short exec_go
                lds     si, dword ptr ss:exec_init_SP ; get stack
                les     di, [bp-4]      ; les DI,Exec_Blk ; and block for return
                mov     word ptr es:[di+10h], ds ; mov [ES:DI+EXEC1.SS],DS
                                        ; return SS
                dec     si              ; 'push' default AX
                dec     si
                mov     [si], bx        ; save default AX reg
                mov     es:[di+0Eh], si ; mov [ES:DI+EXEC1.SP],SI ; return 'SP'
                lds     ax, dword ptr ss:exec_init_IP
                mov     word ptr es:[di+14h], ds ; mov [ES:DI+EXEC1.CS],DS
                                        ; initial entry stuff
                mov     es:[di+12h], ax ; mov [ES:DI+EXEC1.IP],AX
                mov     sp, bp
                pop     bp
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

exec_go:                                ; ...
                lds     si, dword ptr ss:exec_init_IP ; get entry point
                les     di, dword ptr ss:exec_init_SP ; new stack
                mov     ax, es
                call    _sub_unknown2_
                mov     ss:INDOS, 0
                mov     ss:INDOS_FLAG, 0 ; DS:SI points to entry point
                                        ; AX:DI points to initial stack
                                        ; DX has PDB pointer
                                        ; BX has initial AX value
                                        ; ;
                mov     ss, ax          ; set up user's stack
                mov     sp, di          ; and SP
                push    ds              ; fake long call to entry
                push    si
                mov     es, dx          ; set up proper seg registers
                mov     ds, dx
                mov     ax, bx          ; set up proper AX
                retf

; =============== S U B R O U T I N E =======================================


ExecRead        proc near               ; ...
                call    Exec_Dealloc
                mov     bx, [bp-8]      ; MOV bx,Exec_FH
                push    bp
                call    $READ
                pop     bp
                call    Exec_Alloc
                retn
ExecRead        endp


; =============== S U B R O U T I N E =======================================


Exec_Dealloc    proc near               ; ...
                push    bx
                sub     bx, bx          ; (bx) = ARENA_OWNER_SYSTEM
                call    ECritDisk
                call    ChangeOwners
                pop     bx
                retn
Exec_Dealloc    endp


; =============== S U B R O U T I N E =======================================


Exec_Alloc      proc near               ; ...
                push    bx
                mov     bx, ss:CurrentPDB
                call    ChangeOwners
                call    LCritDisk       ; call LCritMEM
                pop     bx
                retn
Exec_Alloc      endp


; =============== S U B R O U T I N E =======================================


ChangeOwners    proc near               ; ...
                pushf
                push    ax
                mov     ax, [bp-14]     ; mov AX,Exec_Environ
                call    ChangeOwner
                mov     ax, [bp-18]     ; mov AX,Exec_Load_Block
                call    ChangeOwner
                pop     ax
                popf

chgown_retn:                            ; ...
                retn
ChangeOwners    endp


; =============== S U B R O U T I N E =======================================


ChangeOwner     proc near               ; ...
                or      ax, ax          ; is area allocated?
                jz      short chgown_retn ; no, do nothing
                dec     ax
                push    ds
                mov     ds, ax
                mov     ds:1, bx        ; mov [ARENA.OWNER],BX
                pop     ds
                retn
ChangeOwner     endp


; =============== S U B R O U T I N E =======================================


Scan_Execname   proc near               ; ...
                lds     si, [bp-26]     ; lds SI,ExecName ; DS:SI points to name

Scan_Execname1:                         ; ...
                mov     cx, si          ; CX= starting addr

Scan0:                                  ; ...
                lodsb                   ; get char
                cmp     al, 3Ah ; ':'   ; is ':' , may be A:name
                jz      short Scan_Execname1 ; yes, save si
                cmp     al, 5Ch ; '\'   ; is '\', may be A:\name
                jz      short Scan_Execname1 ; yes, save si
                cmp     al, 0           ; is end of name
                jnz     short Scan0     ; no, continue scanning
                sub     si, cx          ; get name's length
                xchg    si, cx          ; cx= length, si= starting addr
                retn
Scan_Execname   endp


; =============== S U B R O U T I N E =======================================


Scan_Special_Entries proc near          ; ...
                dec     cx
                mov     ss:SPECIAL_VERSION, 8 ; (MINOR_VERSION<<8)+MAJOR_VERSION
                les     di, ss:UU_IFS_DOS_CALL ; ES:DI --> Table in SETVER.SYS
                mov     ax, es
                or      ax, di
                jz      short End_List  ; If ZR then no table

GetEntries:                             ; ...
                mov     al, es:[di]     ; end of list
                or      al, al
                jz      short End_List  ; yes
                mov     ss:TEMP_VAR_2, di ; save di
                cmp     al, cl          ; same length ?
                jnz     short SkipOne   ; no
                inc     di              ; es:di -> special name
                push    cx              ; save length and name addr
                push    si
                push    ax              ; save len

sse_next_char:                          ; ...
                lodsb
                call    UCase
                scasb
                jnz     short Not_Matched
                loop    sse_next_char
                mov     ax, es:[di]     ; get special version
                mov     ss:SPECIAL_VERSION, ax ; save it
                pop     ax              ; take len off the stack
                pop     si
                pop     cx
                jmp     short End_List
; ---------------------------------------------------------------------------

Not_Matched:                            ; ...
                pop     ax              ; get len from stack
                pop     si              ; restore si,cx
                pop     cx

SkipOne:                                ; ...
                mov     di, ss:TEMP_VAR_2 ; restore old di
                xor     ah, ah          ; position to next entry
                add     di, ax
                add     di, 3           ; DI -> next entry length
                jmp     short GetEntries
; ---------------------------------------------------------------------------

End_List:                               ; ...
                retn
Scan_Special_Entries endp

; ---------------------------------------------------------------------------

$KEEP_PROCESS:                          ; ...
                push    ax
                mov     byte ptr ss:EXIT_TYPE, 3 ; EXIT_KEEP_PROCESS
                mov     es, ss:CurrentPDB
                cmp     dx, 6
                jnb     short Keep_Shrink
                mov     dx, 6

Keep_Shrink:                            ; ...
                mov     bx, dx
                push    bx
                push    es
                call    $SETBLOCK
                pop     ds
                pop     bx
                jb      short Keep_Done
                mov     ax, ds
                add     ax, bx
                mov     ds:2, ax

Keep_Done:                              ; ...
                test    ss:IsWin386, 3
                jnz     short Keep_Done2
                call    _sub_unknown3_

Keep_Done2:                             ; ...
                pop     ax
                jmp     short exit_inner
; ---------------------------------------------------------------------------

stay_resident:                          ; ...
                mov     ax, 3100h
                add     dx, 0Fh
                rcr     dx, 1
                shr     dx, 3
                jmp     COMMAND
; ---------------------------------------------------------------------------

$EXIT:                                  ; ...
                xor     ah, ah
                xchg    ah, ss:DidCTRLC
                or      ah, ah
                mov     byte ptr ss:EXIT_TYPE, 0 ; EXIT_TERMINATE
                jz      short exit_inner
                mov     byte ptr ss:EXIT_TYPE, 1 ; EXIT_CTRL_C
; START OF FUNCTION CHUNK FOR FATALC

exit_inner:                             ; ...
                call    Get_User_Stack
                push    ss:CurrentPDB
                pop     word ptr [si+14h] ; [SI+user_env.user_CS]
                jmp     short abort_inner
; END OF FUNCTION CHUNK FOR FATALC
; ---------------------------------------------------------------------------

$ABORT:                                 ; ...
                xor     al, al
                mov     byte ptr ss:EXIT_TYPE, 0 ; EXIT_ABORT
; START OF FUNCTION CHUNK FOR FATALC

abort_inner:                            ; ...
                mov     ah, byte ptr ss:EXIT_TYPE
                mov     ss:exit_code, ax
                call    Get_User_Stack
                mov     ds, word ptr [si+14h] ; [SI+user_env.user_CS]
                                        ; set up old interrupts
                xor     ax, ax
                mov     es, ax
                assume es:BIOSDATA
                mov     si, 0Ah         ; SAVEXIT
                mov     di, 88h         ; addr_int_terminate
                movsd
                movsd
                movsd
                jmp     reset_environment
; END OF FUNCTION CHUNK FOR FATALC

; =============== S U B R O U T I N E =======================================


_sub_unknown2_  proc near               ; ...
                cmp     dword ptr ss:dosdata_1300h, 0
                jz      short _sub_unk2_ret
                call    dword ptr ss:dosdata_1300h

_sub_unk2_ret:                          ; ...
                retn
_sub_unknown2_  endp

; ---------------------------------------------------------------------------
_dword_unknown  dd 0                    ; ...

; =============== S U B R O U T I N E =======================================


_sub_unknown_   proc near               ; ...
                test    ss:IsWin386, 1
                jnz     short locret_E30B
                push    ds
                push    es
                push    eax
                push    bx
                push    cx
                push    di
                push    si
                les     di, ss:dword_4768
                assume es:nothing
                mov     ax, es
                or      ax, di
                jz      short loc_E303
                xor     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     eax, timdev
                mov     es:[di], eax
                push    di
                mov     si, 20h
                mov     cx, 16
                add     di, 100h
                cld
                rep movsw
                mov     si, 1C0h
                mov     cx, 16
                rep movsw
                pop     di
                movzx   cx, byte ptr es:[di+140h]
                jcxz    short loc_E303
                lds     bx, ss:CDSADDR
                assume ds:nothing
                add     di, 141h

loc_E2E2:                               ; ...
                push    ds
                push    bx
                xor     eax, eax
                test    word ptr [bx+43h], 4000h
                jz      short loc_E2F5
                lds     bx, [bx+45h]
                mov     eax, [bx+13h]

loc_E2F5:                               ; ...
                mov     es:[di], eax
                pop     bx
                pop     ds
                add     bx, 88
                add     di, 4
                loop    loc_E2E2

loc_E303:                               ; ...
                pop     si
                pop     di
                pop     cx
                pop     bx
                pop     eax
                pop     es
                pop     ds

locret_E30B:                            ; ...
                retn
_sub_unknown_   endp


; =============== S U B R O U T I N E =======================================


_sub_unknown3_  proc near               ; ...
                push    es
                push    esi
                push    di
                push    eax
                push    bx
                push    cx
                push    edx
                push    ds
                lds     bx, ss:1328h
                mov     eax, [bx+0Ah]
                mov     cs:_dword_unknown, eax
                xor     esi, esi
                xor     edx, edx
                mov     es, dx
                assume es:BIOSDATA
                mov     eax, es:timdev
                cmp     [bx], eax
                jz      short loc_E33E
                or      esi, 80000000h

loc_E33E:                               ; ...
                movzx   cx, byte ptr [bx+140h]
                les     di, ss:3Ch
                assume es:nothing
                add     bx, 141h

loc_E34C:                               ; ...
                push    es
                push    di
                test    word ptr es:[di+43h], 4000h
                jz      short loc_E375
                test    word ptr es:[di+43h], 8000h
                jnz     short loc_E375
                les     di, es:[di+45h]
                mov     eax, [bx]
                or      eax, eax
                jz      short loc_E375
                cmp     es:[di+13h], eax
                jz      short loc_E375
                bts     esi, edx

loc_E375:                               ; ...
                pop     di
                pop     es
                add     di, 58h ; 'X'
                add     bx, 4
                inc     edx
                loop    loc_E34C
                push    si
                lds     si, ss:1328h
                call    sub_E3D2
                pop     si
                movzx   eax, bx
                or      eax, esi
                jz      short loc_E3C6
                mov     cx, bx
                lds     bx, ss:1328h
                mov     di, [bx+4]
                lea     ax, [bx+0FEh]
                cmp     ax, di
                jz      short loc_E3C0
                mov     [di+4], esi
                mov     [di+2], cx
                mov     eax, cs:_dword_unknown
                mov     [di+8], eax
                pop     ax
                push    ax
                mov     [di], ax
                add     word ptr [bx+4], 0Ch
                jmp     short loc_E3C6
; ---------------------------------------------------------------------------

loc_E3C0:                               ; ...
                mov     word ptr [bx+0FEh], 0FFFFh

loc_E3C6:                               ; ...
                pop     ds
                pop     edx
                pop     cx
                pop     bx
                pop     eax
                pop     di
                pop     esi
                pop     es
                retn
_sub_unknown3_  endp


; =============== S U B R O U T I N E =======================================


sub_E3D2        proc near               ; ...
                xor     bx, bx
                mov     es, bx
                assume es:BIOSDATA
                lea     si, [si+13Ch]
                mov     di, 1DCh
                std
                call    sub_E3E9
                mov     di, 3Ch ; '<'
                call    sub_E3E9
                cld
                retn
sub_E3D2        endp


; =============== S U B R O U T I N E =======================================


sub_E3E9        proc near               ; ...
                mov     cx, 8

loc_E3EC:                               ; ...
                shl     bx, 1
                cmpsd
                jz      short loc_E3FE
                mov     eax, es:[di+4]
                mov     [si+4], eax
                or      bx, 1

loc_E3FE:                               ; ...
                loop    loc_E3EC
                retn
sub_E3E9        endp

; ---------------------------------------------------------------------------

RetExePatch:                            ; ...
                retn

; =============== S U B R O U T I N E =======================================


arena_free_process proc near            ; ...
                mov     ax, ss:arena_head

arena_free_process_start:               ; ...
                mov     di, 0           ; ARENA.SIGNATURE
                call    check_signature

arena_free_process_loop:                ; ...
                jb      short check_signature_ok
                push    es
                pop     ds
                assume ds:BIOSDATA
                cmp     word ptr ds:1, bx ; [ARENA.OWNER] ; is block owned by pid?
                jnz     short arena_free_next ; no, skip to next
                mov     word ptr ds:1, di ; yes... free him

arena_free_next:                        ; ...
                cmp     byte ptr [di], 5Ah ; 'Z' ; arena_signature_end
                jz      short arena_chk_umbs
                call    arena_next
                jmp     short arena_free_process_loop
; ---------------------------------------------------------------------------

arena_chk_umbs:                         ; ...
                mov     ax, ss:UMB_HEAD
                cmp     ax, 0FFFFh      ; Q: is umb_head initialized
                jz      short check_signature_ok ; N: we're done
                mov     di, ds
                cmp     di, ax          ; Q: is last arena above umb_head
                jnb     short check_signature_ok ; Y: we've scanned umbs also. done.
                jmp     short arena_free_process_start
arena_free_process endp


; =============== S U B R O U T I N E =======================================


arena_next      proc near               ; ...
                mov     ax, ds          ; current block
                add     ax, ds:3        ; [ARENA.SIZE] ; + current block length
                inc     ax              ; remember that header!

check_signature:                        ; ...
                mov     es, ax
                assume es:nothing
                cmp     byte ptr es:[di], 4Dh ; 'M' ; arena_signature_normal
                jz      short check_signature_ok
                cmp     byte ptr es:[di], 5Ah ; 'Z'
                jz      short check_signature_ok ; arena_signature_end
                stc

check_signature_ok:                     ; ...
                retn
arena_next      endp


; =============== S U B R O U T I N E =======================================


Coalesce        proc near               ; ...
                cmp     byte ptr [di], 5Ah ; 'Z' ; arena_signature_end
                jz      short check_signature_ok
                call    arena_next
                jb      short check_signature_ok ;
                                        ; IF next block isnt free THEN return
                cmp     es:1, di        ; [ES:ARENA.OWNER]
                jnz     short check_signature_ok
                mov     cx, es:3        ; [ES:ARENA.SIZE] ; next block size
                inc     cx              ; + 1 (for header size)
                add     ds:3, cx        ; [ARENA.SIZE]
                mov     cl, es:[di]     ; move up signature
                mov     [di], cl
                jmp     short Coalesce  ; try again
Coalesce        endp


; =============== S U B R O U T I N E =======================================


$ALLOC          proc near               ; ...

; FUNCTION CHUNK AT 43BD SIZE 00000013 BYTES

                call    ECritDisk       ; call ECritMEM
                mov     ax, ss:arena_head
                mov     ss:START_ARENA, ax ; assume LOW_FIRST
                test    ss:AllocMethod, 0C0h ; HIGH_FIRST+HIGH_ONLY
                jz      short norm_alloc
                test    ss:UMBFLAG, 1
                jz      short norm_alloc
                mov     ax, ss:UMB_HEAD
                mov     ss:START_ARENA, ax ; start_arena = umb_head

norm_alloc:                             ; ...
                xor     ax, ax
                mov     di, ax          ; 0
                mov     ss:FirstArena, ax ; init the options
                mov     ss:BestArena, ax
                mov     ss:LastArena, ax
                push    ax              ; alloc_max = 0

start_scan:                             ; ...
                mov     ax, ss:START_ARENA ; beginning of arena
                call    check_signature
                jb      short alloc_err

alloc_scan:                             ; ...
                push    es
                pop     ds
                assume ds:nothing
                cmp     ds:1, di        ; [ARENA.OWNER]
                jz      short alloc_free

alloc_next:                             ; ...
                test    ss:UMBFLAG, 1
                jz      short norm_strat
                test    ss:AllocMethod, 80h ; HIGH_FIRST
                                        ; Q: is alloc strategy high_first
                jz      short norm_strat ; N: see if we reached last arena
                mov     ax, ss:START_ARENA
                cmp     ax, ss:arena_head
                jnz     short norm_strat
                mov     ax, ds          ; ax = current block
                cmp     ax, ss:UMB_HEAD ; Q: check against umb_head
                jmp     short alloc_chk_end
; ---------------------------------------------------------------------------

norm_strat:                             ; ...
                cmp     byte ptr [di], 5Ah ; 'Z' ; arena_signature_end
                                        ; IF current block is last THEN

alloc_chk_end:                          ; ...
                jz      short alloc_end ; GOTO end
                call    arena_next
                jnb     short alloc_scan ; IF no error THEN GOTO scan

alloc_err:                              ; ...
                pop     ax

alloc_trashed:                          ; ...
                call    LCritDisk       ; call LCritMEM
                mov     al, 7           ; error_arena_trashed

alloc_errj:                             ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

alloc_end:                              ; ...
                cmp     ss:FirstArena, 0
                jnz     alloc_do_split
                mov     ax, ss:arena_head
                cmp     ax, ss:START_ARENA ; Q: started scanning from arena_head
                jz      short alloc_fail ; Y: not enough memory
                test    ss:AllocMethod, 40h ; HIGH_ONLY
                                        ; Q: is the alloc strat HIGH_ONLY
                jnz     short alloc_fail ; Y: return size of largest UMB
                mov     ss:START_ARENA, ax ; N: start scanning from arena_head
                jmp     short start_scan
; ---------------------------------------------------------------------------

alloc_fail:                             ; ...
                call    Get_User_Stack
                pop     bx
                mov     [si+2], bx      ; [SI+user_env.user_BX]
                call    LCritDisk       ; call LCritMEM
                mov     al, 8           ; error_not_enough_memory
                jmp     short alloc_errj
; ---------------------------------------------------------------------------

alloc_free:                             ; ...
                call    Coalesce        ; add following free block to current
                jb      short alloc_err
                mov     cx, ds:3        ; [ARENA.SIZE]
                pop     dx
                cmp     cx, dx          ; check for max found size
                jbe     short alloc_test
                mov     dx, cx

alloc_test:                             ; ...
                push    dx
                cmp     bx, cx          ; ...
                ja      short alloc_next
                cmp     ss:FirstArena, 0
                jnz     short alloc_best
                mov     ss:FirstArena, ds ; save first one found

alloc_best:                             ; ...
                cmp     ss:BestArena, 0
                jz      short alloc_make_best ; initial best
                push    es
                mov     es, ss:BestArena
                assume es:BIOSDATA
                cmp     es:3, cx        ; [ES:ARENA.SIZE]
                                        ; is size of best larger than found?
                pop     es
                assume es:nothing
                jbe     short alloc_last

alloc_make_best:                        ; ...
                mov     ss:BestArena, ds ; assign best

alloc_last:                             ; ...
                mov     ss:LastArena, ds ; assign last
                jmp     alloc_next
; ---------------------------------------------------------------------------

alloc_do_split_high:                    ; ...
                mov     ds, ss:LastArena
                mov     cx, ds:3        ; [ARENA.SIZE]
                sub     cx, bx
                mov     dx, ds
                jz      short alloc_set_owner ; sizes are equal, no split
                add     dx, cx          ; point to next block
                mov     es, dx          ; no decrement!
                dec     cx
                xchg    bx, cx          ; bx has size of lower block
                jmp     short alloc_set_sizes ; cx has upper (requested) size
; ---------------------------------------------------------------------------

alloc_do_split:                         ; ...
                xor     cx, cx
                mov     cl, ss:AllocMethod
                and     cx, 0FF3Fh      ; mask off bit 7
                cmp     cx, 1           ; BEST_FIT
                ja      short alloc_do_split_high
                mov     ds, ss:FirstArena
                jb      short alloc_get_size
                mov     ds, ss:BestArena

alloc_get_size:                         ; ...
                mov     cx, ds:3        ; [ARENA.SIZE]
                sub     cx, bx          ; get room left over
                mov     ax, ds
                mov     dx, ax
                jz      short alloc_set_owner ; IF BX = size THEN (don't split)
                add     ax, bx
                inc     ax              ; remember the header
                mov     es, ax          ; ES <- DS + BX (new header location)
                dec     cx              ; CX <- size of split block

alloc_set_sizes:                        ; ...
                mov     ds:3, bx        ; [ARENA.SIZE]
                mov     es:3, cx        ; split size
                mov     bl, 4Dh ; 'M'   ; arena_signature_normal
                xchg    bl, [di]        ; current signature
                mov     es:[di], bl     ; new block sig <- old block sig
                mov     es:1, di        ; [ES:ARENA.OWNER]

alloc_set_owner:                        ; ...
                mov     ds, dx
                mov     ax, ss:CurrentPDB
                mov     ds:1, ax        ; [ARENA.OWNER]
                mov     ax, ds
                inc     ax
                pop     bx
                call    LCritDisk       ; call LCritMEM
$ALLOC          endp

; START OF FUNCTION CHUNK FOR $DEALLOC

alloc_ok:                               ; ...
                jmp     SYS_RET_OK
; END OF FUNCTION CHUNK FOR $DEALLOC

; =============== S U B R O U T I N E =======================================


$SETBLOCK       proc near               ; ...
                call    ECritDisk       ; call ECritMEM
                mov     di, 0           ; ARENA.SIGNATURE
                mov     ax, es
                dec     ax
                call    check_signature
                jnb     short setblock_grab

setblock_bad:                           ; ...
                jmp     alloc_trashed
; ---------------------------------------------------------------------------

setblock_grab:                          ; ...
                mov     ds, ax
                call    Coalesce
                jb      short setblock_bad
                mov     cx, ds:3        ; [ARENA.SIZE]
                push    cx
                cmp     bx, cx
                jbe     short alloc_get_size
                jmp     alloc_fail
$SETBLOCK       endp


; =============== S U B R O U T I N E =======================================


$DEALLOC        proc near               ; ...

; FUNCTION CHUNK AT 43B4 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 43BD SIZE 00000013 BYTES
; FUNCTION CHUNK AT 9E3B SIZE 00000003 BYTES

                call    ECritDisk       ; call ECritMEM
                test    ss:DOS_FLAG, 4  ; EXECA20OFF
                jz      short deallocate ; Q: was the previous call an int 21h
                                        ;  exec call
                                        ; N: continue
                cmp     ss:A20OFF_COUNT, 0
                jnz     short deallocate
                mov     ss:A20OFF_COUNT, 1

deallocate:                             ; ...
                mov     di, 0           ; ARENA.SIGNATURE
                mov     ax, es
                dec     ax
                call    check_signature
                jb      short dealloc_err
                mov     es:1, di        ; [ES:ARENA.OWNER]
                call    LCritDisk       ; call LCritMEM

dealloc_ok:                             ; ...
                jmp     short alloc_ok
; ---------------------------------------------------------------------------

dealloc_err:                            ; ...
                call    LCritDisk
                mov     al, 9           ; error_invalid_block

AllocOperErrj:                          ; ...
                jmp     SYS_RET_ERR
$DEALLOC        endp

; ---------------------------------------------------------------------------

$ALLOCOPER:                             ; ...
                or      al, al          ; get/set allocation mechanism
                jz      short AllocGetStrat
                cmp     al, 1
                jz      short AllocSetStrat
                cmp     al, 2
                jz      short AllocGetLink
                cmp     al, 3
                jz      short AllocSetLink

AllocOperError:                         ; ...
                mov     ss:EXTERR_LOCUS, 5 ; errLOC_Mem
                mov     al, 1           ; error_invalid_function

AllocOperErrj2:                         ; ...
                jmp     short AllocOperErrj
; ---------------------------------------------------------------------------

AllocArenaError:                        ; ...
                mov     ss:EXTERR_LOCUS, 5
                mov     al, 7           ; error_arena_trashed
                jmp     short AllocOperErrj2
; ---------------------------------------------------------------------------

AllocGetStrat:                          ; ...
                mov     al, ss:AllocMethod
                xor     ah, ah

AllocOperOk:                            ; ...
                jmp     short dealloc_ok
; ---------------------------------------------------------------------------

AllocSetStrat:                          ; ...
                push    bx
                and     bx, 0FF3Fh      ; STRAT_MASK
                cmp     bx, 2
                pop     bx
                ja      short AllocOperError
                mov     ss:AllocMethod, bl

AllocOperOkj:                           ; ...
                jmp     short AllocOperOk
; ---------------------------------------------------------------------------

AllocGetLink:                           ; ...
                mov     al, ss:UMBFLAG
                and     al, 1           ; LINKSTATE

AllocOperOkj2:                          ; ...
                jmp     short AllocOperOkj
; ---------------------------------------------------------------------------

AllocSetLink:                           ; ...
                mov     cx, ss:UMB_HEAD
                cmp     cx, 0FFFFh      ; Q: has umb_head been initialized
                jz      short AllocOperError ; N: error
                cmp     bx, 1
                jb      short UnlinkUmbs
                jz      short LinkUmbs
                jmp     short AllocOperError
; ---------------------------------------------------------------------------

UnlinkUmbs:                             ; ...
                test    ss:UMBFLAG, 1   ; LINKSTATE
                jz      short unlinked
                call    GetLastArena
                jb      short AllocArenaError
                mov     byte ptr ds:0, 5Ah ; 'Z' ; arena_signature_end
                and     ss:UMBFLAG, 0FEh ; ~LINKSTATE

unlinked:                               ; ...
                jmp     short AllocOperOkj2
; ---------------------------------------------------------------------------

LinkUmbs:                               ; ...
                test    ss:UMBFLAG, 1   ; LINKSTATE
                jnz     short linked
                call    GetLastArena
                jb      short AllocArenaError
                mov     byte ptr ds:0, 4Dh ; 'M' ; arena_signature_normal
                or      ss:UMBFLAG, 1   ; LINKSTATE

linked:                                 ; ...
                jmp     short unlinked

; =============== S U B R O U T I N E =======================================


GetLastArena    proc near               ; ...
                push    ax
                mov     ax, ss:arena_head
                mov     es, ax
                xor     di, di
                cmp     byte ptr es:[di], 5Ah ; 'Z' ; arena_signature_end
                jz      short GLA_done

GLA_next:                               ; ...
                mov     ds, ax
                call    arena_next
                jb      short GLA_err
                test    ss:UMBFLAG, 1   ; LINKSTATE
                jnz     short GLA_chkumb
                cmp     byte ptr es:[di], 5Ah ; 'Z' ; arena_signature_end
                jmp     short GLA_@f
; ---------------------------------------------------------------------------

GLA_chkumb:                             ; ...
                cmp     ax, cx

GLA_@f:                                 ; ...
                jnz     short GLA_next

GLA_done:                               ; ...
                test    ss:UMBFLAG, 1   ; LINKSTATE
                jnz     short GLA_ret
                mov     ds, ax
                call    arena_next
                jb      short GLA_err
                cmp     ax, cx
                jnz     short GLA_err

GLA_ret:                                ; ...
                clc
                pop     ax
                retn
; ---------------------------------------------------------------------------

GLA_err:                                ; ...
                stc
                pop     ax
                retn
GetLastArena    endp

; ---------------------------------------------------------------------------
SERVERTAB       dw offset SERVER_DISP   ; ...
SERVERLEAVE     dw offset SERVERRETURN  ; ...
SERVER_DISP     db 11                   ; ...
                                        ; (SERVER_DISP_END-SERVER_DISP-1)/2 = 11
                dw offset SRV_CALL      ; 0
                dw offset COMMIT_ALL    ; 1
                dw offset CLOSE_NAME    ; 2
                dw offset CLOSE_NAME    ; 3 ; CLOSE_UID
                dw offset CLOSE_NAME    ; 4 ; CLOSE_UID_PID
                dw offset CLOSE_NAME    ; 5 ; GET_LIST
                dw offset GET_DOS_DATA  ; 6
                dw offset SPOOL_OPER    ; 7
                dw offset SPOOL_OPER    ; 8
                dw offset SPOOL_OPER    ; 9
                dw offset _$SetExtendedError ; 10
                                        ; SERVER_DISP_END
; ---------------------------------------------------------------------------

$ServerCall:                            ; ...
                cmp     al, 6
                jb      short SET_STUFF
                cmp     al, 9
                jbe     short NO_SET_ID ; No DPL on calls 6,7,8,9

SET_STUFF:                              ; ...
                mov     si, dx          ; Point to DPL with DS:SI
                mov     bx, [si+14h]    ; [SI+DPL.PID]
                mov     ss:PROC_ID, bx  ; Set process ID

NO_SET_ID:                              ; ...
                push    cs:SERVERLEAVE
                push    cs:SERVERTAB
                push    ax
                call    TableDispatch
                mov     ss:EXTERR_LOCUS, 1 ; errLOC_Unk
                mov     al, 1           ; error_invalid_function

servercall_error:                       ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

SERVERRETURN:                           ; ...
                retn
; ---------------------------------------------------------------------------

COMMIT_ALL:                             ; ...
                xor     bx, bx
                push    ss
                pop     ds
                call    ECritDisk       ; call ECritSFT

CommitLoop:                             ; ...
                push    bx              ; scan SFT cache
                call    SFFromSFN
                jb      short CommitDone
                cmp     word ptr es:[di], 0 ; [ES:DI+SF_ENTRY.sf_Ref_Count]
                jz      short CommitNext
                cmp     word ptr es:[di], 0FFFFh ; [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy
                jz      short CommitNext
                test    word ptr es:[di+5], 8000h ; [ES:DI+SF_ENTRY.sf_flags],sf_isnet
                jnz     short CommitNext
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:THISSFT+2, es
                call    DOS_COMMIT

CommitNext:                             ; ...
                pop     bx
                inc     bx
                jmp     short CommitLoop
; ---------------------------------------------------------------------------

CommitDone:                             ; ...
                call    LCritDisk       ; call LCritSFT
                pop     bx

Commit_Ok:                              ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

CLOSE_NAME:                             ; ...
                stc
                jb      short func_err

SetCXOK:                                ; ...
                jmp     short Commit_Ok
; ---------------------------------------------------------------------------

func_err:                               ; ...
                jmp     short servercall_error
; ---------------------------------------------------------------------------
                stc
                jb      short func_err

SRV_CALL:                               ; ...
                pop     ax              ; get rid of call to $srvcall
                push    ds
                push    si
                call    Get_User_Stack
                pop     di
                pop     es              ; DS:SI point to stack
                                        ; ES:DI point to DPL
                call    XCHGP
                push    si              ; DS:SI point to DPL
                                        ; ES:DI point to stack
                mov     cx, 6           ; copy the registers from DPL
                rep movsw               ; Put in AX,BX,CX,DX,SI,DI
                inc     di
                inc     di              ; Skip user_BP
                movsw                   ; DS
                movsw                   ; ES
                pop     si              ; DS:SI -> DPL
                mov     ax, [si]        ; [SI+DPL.AX]
                mov     bx, [si+2]      ; [SI+DPL.BX]
                mov     cx, [si+4]      ; [SI+DPL.CX]
                mov     dx, [si+6]      ; [SI+DPL.DX]
                mov     di, [si+10]     ; [SI+DPL.DI]
                mov     es, word ptr [si+14] ; [SI+DPL.ES]
                push    word ptr [si+8] ; [SI+DPL.SI]
                mov     ds, word ptr [si+12] ; [SI+DPL.DS]
                pop     si
                mov     ss:SAVEDS, ds
                mov     ss:SAVEBX, bx
                mov     ss:FSHARING, 0FFh ; -1 ; set no redirect flag
                jmp     REDISP
; ---------------------------------------------------------------------------

GET_DOS_DATA:                           ; ...
                push    ss
                pop     es
                mov     di, offset ERRORMODE ; offset SWAP_START
                mov     cx, offset SWAP_END ; offset SWAP_END
                mov     dx, offset USER_IN_AX ; offset SWAP_ALWAYS
                sub     cx, di
                sub     dx, di
                shr     cx, 1           ; div by 2, remainder in carry
                adc     cx, 0           ; div by 2 + round up
                shl     cx, 1           ; round up to 2 boundary
                call    Get_User_Stack
                mov     word ptr [si+14], es ; [SI+user_env.user_DS]
                mov     [si+8], di      ; [SI+user_env.user_SI]
                mov     [si+6], dx      ; [SI+user_env.user_DX]
                mov     [si+4], cx      ; [SI+user_env.user_CX]

Commit_Okj:                             ; ...
                jmp     short SetCXOK
; ---------------------------------------------------------------------------

SPOOL_OPER:                             ; ...
                push    ax
                mov     ax, 1125h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
                                        ; STACK: WORD subfunction
                                        ; Return: CF set on error, AX = error code
                                        ; STACK unchanged
                pop     bx
                jb      short func_err2
                jmp     short Commit_Okj
; ---------------------------------------------------------------------------

func_err2:                              ; ...
                jmp     short func_err
; ---------------------------------------------------------------------------

_$SetExtendedError:                     ; ...
                mov     ax, [si]        ; [SI+DPL.AX]
                mov     ss:EXTERR, ax
                mov     ax, [si+10]     ; [SI+DPL.DI]
                mov     word ptr ss:EXTERRPT, ax
                mov     ax, [si+14]     ; [SI+DPL.ES]
                mov     word ptr ss:EXTERRPT+2, ax
                mov     ax, [si+2]      ; [SI+DPL.BX]
                mov     word ptr ss:EXTERR_ACTION, ax
                mov     ax, [si+4]      ; [SI+DPL.CX]
                mov     ss:EXTERR_LOCUS, ah
                retn

; =============== S U B R O U T I N E =======================================


pJFNFromHandle  proc near               ; ...
                mov     es, cs:DosDSeg  ; es -> dosdata
                mov     es, es:CurrentPDB ; get user process data block
                cmp     bx, es:32h      ; [ES:PDB.JFN_Length]
                                        ; is handle greater than allocated ?
                jnb     short ReturnCarry_inv_hndl ; yes
                les     di, es:34h      ; [ES:PDB.JFN_Pointer]
                                        ; get pointer to beginning of table
                add     di, bx          ; add in offset, clear 'C'
                retn
; ---------------------------------------------------------------------------

ReturnCarry_inv_hndl:                   ; ...
                mov     al, 6           ; error_invalid_handle
                stc

pJFNFromHandle_error:                   ; ...
                retn
pJFNFromHandle  endp


; =============== S U B R O U T I N E =======================================


SFFromHandle    proc near               ; ...
                call    pJFNFromHandle  ; get jfn pointer
                jb      short pJFNFromHandle_error
                cmp     byte ptr es:[di], 0FFh ; -1 ; unused handle
                jz      short ReturnCarry_inv_hndl2
                push    bx              ; save handle
                mov     bl, es:[di]     ; get SFN
                xor     bh, bh          ; ignore upper half
                call    SFFromSFN       ; get real sf spot
                pop     bx              ; restore
                retn
; ---------------------------------------------------------------------------

ReturnCarry_inv_hndl2:                  ; ...
                mov     al, 6           ; error_invalid_handle
                stc
                retn
SFFromHandle    endp


; =============== S U B R O U T I N E =======================================


SFFromSFN       proc near               ; ...
                mov     es, cs:DosDSeg  ; es -> dosdata
                les     di, dword ptr es:SFT_ADDR ; (es:di) = start of SFT table

sfsfn5:                                 ; ...
                cmp     bx, es:[di+4]   ; [ES:DI+SFT.SFCount]
                                        ; is handle in this table?
                jb      short sfsfn7    ; yes, go grab it
                sub     bx, es:[di+4]
                les     di, es:[di]     ; [ES:DI+SFT.SFLink]
                                        ; get next table segment
                cmp     di, 0FFFFh      ; -1 ; end of tables?
                jnz     short sfsfn5    ; no, try again
                stc
                retn                    ; return with error, not found
; ---------------------------------------------------------------------------

sfsfn7:                                 ; ...
                push    ax
                mov     ax, 59          ; SF_ENTRY.size
                mul     bl              ; (ax) = offset into this SF block
                add     di, ax          ; add base of SF block
                pop     ax
                add     di, 6           ; SFT.SFTable  ; offset into structure
                retn                    ; return with 'C' clear
SFFromSFN       endp


; =============== S U B R O U T I N E =======================================


JFNFree         proc near               ; ...
                xor     bx, bx          ; (bx) = initial JFN to try = 0

jfnf1:                                  ; ...
                call    pJFNFromHandle  ; get the appropriate handle
                jb      short jfnf5     ; no more handles
                cmp     byte ptr es:[di], 0FFh ; -1 ; free?
                jz      short jfnfx     ; yes, carry is clear
                inc     bx              ; no, next handle
                jmp     short jfnf1     ; and try again
; ---------------------------------------------------------------------------

jfnf5:                                  ; ...
                mov     al, 4           ; error_too_many_open_files

jfnfx:                                  ; ...
                retn
JFNFree         endp


; =============== S U B R O U T I N E =======================================


SFNFree         proc near               ; ...
                push    ax              ;  Allocate a Free SFN/SFT
                xor     bx, bx          ; 0

sfnf5:                                  ; ...
                push    bx              ; (bx) = SFN to consider
                call    SFFromSFN       ; get the potential handle
                pop     bx
                jb      short sfnf95    ; no more free SFNs
                cmp     word ptr es:[di], 0 ; [ES:DI+SF_ENTRY.sf_Ref_Count] ; free?
                jz      short sfnf20    ; yep, got one
                cmp     word ptr es:[di], 0FFFFh ; [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
                jz      short sfnf10    ; special busy mark

sfnf7:                                  ; ...
                inc     bx              ; try the next one
                jmp     short sfnf5
; ---------------------------------------------------------------------------

sfnf10:                                 ; ...
                mov     ax, ss:USER_ID
                cmp     es:[di+2Fh], ax ; [ES:DI+SF_ENTRY.sf_UID]
                jnz     short sfnf7     ; not ours
                mov     ax, ss:PROC_ID
                cmp     es:[di+31h], ax ; [ES:DI+SF_ENTRY.sf_PID]
                jnz     short sfnf7     ; can't use this one, try the next

sfnf20:                                 ; ...
                mov     word ptr es:[di], 0FFFFh ; [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
                mov     ax, ss:33Eh
                mov     es:[di+2Fh], ax ; [ES:DI+SF_ENTRY.sf_UID]
                mov     ax, ss:33Ch
                mov     es:[di+31h], ax ; [ES:DI+SF_ENTRY.sf_PID]
                pop     ax
                clc
                retn                    ; return with no error
; ---------------------------------------------------------------------------

sfnf95:                                 ; ...
                pop     ax
                mov     al, 4           ; error_too_many_open_files
                retn                    ; return with 'C' and error
SFNFree         endp


; =============== S U B R O U T I N E =======================================


$CLOSE          proc near               ; ...

; FUNCTION CHUNK AT 43B4 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 43BD SIZE 00000013 BYTES

                call    CheckOwner      ; get system file entry
                jb      short CloseError
                push    ss
                pop     ds
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:THISSFT+2, es ; DS:SI point to JFN table entry
                                        ; ES:DI point to SFT
                cmp     word ptr es:[di], 1 ; [ES:DI+SF_ENTRY.sf_ref_count]
                                        ; will the SFT become free?
                jz      short FreeJFN   ; yes, free JFN anyway.
                mov     al, es:[di+2]   ; [ES:DI+SF_ENTRY.sf_mode]
                and     al, 0F0h        ; SHARING_MASK
                cmp     al, 70h         ; SHARING_NET_FCB
                jz      short PostFree  ; 70-mode and big ref count => free it

FreeJFN:                                ; ...
                call    pJFNFromHandle
                mov     byte ptr es:[di], 0FFh ; release the JFN

PostFree:                               ; ...
                call    DOS_CLOSE
                jb      short CloseError
                mov     ah, 3Eh         ; CLOSE ; Bogus multiplan fix

CloseOk:                                ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

CloseError:                             ; ...
                jmp     SYS_RET_ERR
$CLOSE          endp

; ---------------------------------------------------------------------------

$COMMIT:                                ; ...
                call    CheckOwner      ; get system file entry
                jb      short CommitError
                push    ss
                pop     ds
                mov     word ptr ds:THISSFT, di
                mov     word ptr ds:THISSFT+2, es
                call    DOS_COMMIT
                jb      short CommitError
                mov     ah, 68h         ; COMMIT
                jmp     short CloseOk
; ---------------------------------------------------------------------------

CommitError:                            ; ...
                jmp     short CloseError
; ---------------------------------------------------------------------------

$ExtHandle:                             ; ...
                xor     bp, bp          ; 0: enlarge  1: shrink  2:psp
                cmp     bx, 20          ; FILPERPROC
                jnb     short exth2
                mov     bx, 20

exth2:                                  ; ...
                mov     es, ss:CurrentPDB
                mov     cx, es:32h      ; [ES:PDB.JFN_Length]
                                        ; get number of handle allowed
                cmp     bx, cx          ; the requested == current
                jz      short ok_done   ; yes and exit
                ja      short larger    ; go allocate new table
                mov     bp, 1           ; shrink
                mov     ds, word ptr es:36h ; [ES:PDB.JFN_Pointer+2]
                mov     si, bx
                sub     cx, bx          ; get difference

chck_handles:                           ; ...
                cmp     byte ptr [si], 0FFh ; -1 ; scan through handles to ensure
                jnz     short too_many_files ; close status
                inc     si
                loop    chck_handles
                cmp     bx, 20          ; FILPERPROC
                ja      short larger
                mov     bp, 2           ; psp
                mov     di, 24          ; PDB.JFN_TABLE
                push    bx
                jmp     short movhandl
; ---------------------------------------------------------------------------

larger:                                 ; ...
                cmp     bx, 0FFFFh
                jz      short invalid_func ; 65535 is not allowed
                clc
                push    bx
                add     bx, 0Fh         ; adjust to paragraph boundary
                mov     cl, 4
                rcr     bx, cl
                and     bx, 1FFFh       ; clear most 3 bits
                push    bp
                call    $ALLOC          ; allocate memory
                pop     bp
                jb      short no_memory ; not enough memory
                mov     es, ax
                xor     di, di          ; es:di points to new table memory

movhandl:                               ; ...
                mov     ds, ss:CurrentPDB
                test    bp, 3           ; enlarge ?
                jz      short enlarge   ; yes
                pop     cx              ; cx = the amount you shrink
                push    cx
                jmp     short copy_hand
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $READ

ok_done:                                ; ...
                jmp     SYS_RET_OK
; END OF FUNCTION CHUNK FOR $READ
; ---------------------------------------------------------------------------

too_many_files:                         ; ...
                mov     al, 4           ; error_too_many_open_files
; START OF FUNCTION CHUNK FOR $READ

CommitErrorj:                           ; ...
                jmp     SYS_RET_ERR
; END OF FUNCTION CHUNK FOR $READ
; ---------------------------------------------------------------------------

enlarge:                                ; ...
                mov     cx, ds:32h      ; [PDB.JFN_Length]
                                        ; get number of old handles

copy_hand:                              ; ...
                mov     dx, cx
                lds     si, ds:34h      ; [PDB.JFN_Pointer]
                                        ; get old table pointer
                rep movsb               ; copy infomation to new table
                pop     cx              ; get new number of handles
                push    cx
                sub     cx, dx          ; get the difference
                mov     al, 0FFh        ; -1 ; set availability to handles
                rep stosb
                mov     ds, ss:CurrentPDB
                cmp     word ptr ds:34h, 0 ; [PDB.JFN_Pointer]
                                        ; check if original table pointer
                jnz     short update_info ; yes, go update PDB entries
                push    bp
                push    ds
                push    es
                mov     es, word ptr ds:36h ; [PDB.JFN_Pointer+2]
                                        ; get old table segment
                call    $DEALLOC        ; deallocate old table memory
                pop     es
                pop     ds
                pop     bp

update_info:                            ; ...
                test    bp, 2           ; psp?
                jz      short non_psp   ; no
                mov     word ptr ds:34h, 18h ; [PDB.JFN_Pointer],PDB.JFN_TABLE
                                        ; restore
                jmp     short final
; ---------------------------------------------------------------------------

non_psp:                                ; ...
                mov     word ptr ds:34h, 0 ; [PDB.JFN_Pointer]
                                        ; new table pointer offset always 0

final:                                  ; ...
                mov     word ptr ds:36h, es ; [PDB.JFN_Pointer+2]
                                        ; new table segment
                pop     word ptr ds:32h ; [PDB.JFN_Length]
                                        ; restore new number of handles
; START OF FUNCTION CHUNK FOR $READ

ok_done_j:                              ; ...
                jmp     short ok_done
; END OF FUNCTION CHUNK FOR $READ
; ---------------------------------------------------------------------------

no_memory:                              ; ...
                pop     bx              ; clean stack
                mov     al, 8           ; error_not_enough_memory
; START OF FUNCTION CHUNK FOR $READ

CommitErrorj2:                          ; ...
                jmp     short CommitErrorj
; END OF FUNCTION CHUNK FOR $READ
; ---------------------------------------------------------------------------

invalid_func:                           ; ...
                mov     al, 1           ; error_invalid_function
; START OF FUNCTION CHUNK FOR $READ

CommitErrorj3:                          ; ...
                jmp     short CommitErrorj2
; END OF FUNCTION CHUNK FOR $READ

; =============== S U B R O U T I N E =======================================


$READ           proc near               ; ...

; FUNCTION CHUNK AT 43B4 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 43BD SIZE 00000013 BYTES
; FUNCTION CHUNK AT A1FA SIZE 00000003 BYTES
; FUNCTION CHUNK AT A1FF SIZE 00000003 BYTES
; FUNCTION CHUNK AT A24B SIZE 00000002 BYTES
; FUNCTION CHUNK AT A250 SIZE 00000002 BYTES
; FUNCTION CHUNK AT A254 SIZE 00000002 BYTES

                mov     si, offset DOS_READ

ReadDO:                                 ; ...
                call    pJFNFromHandle
                jb      short ReadError
                mov     al, es:[di]
                call    CheckOwner      ; get the handle
                jnb     short ReadSetup

ReadError:                              ; ...
                jmp     short CommitErrorj3
; ---------------------------------------------------------------------------

ReadSetup:                              ; ...
                mov     word ptr ss:THISSFT, di
                mov     word ptr ss:THISSFT+2, es
                test    byte ptr es:[di+3], 20h ; [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
                                        ; need i24
                jz      short needi24   ; yes
                or      ss:EXTOPEN_ON, 2 ; EXT_OPEN_I24_OFF ; set it off

needi24:                                ; ...
                push    word ptr ss:DMAADD
                push    word ptr ss:DMAADD+2
                call    Align_Buffer
                push    ss
                pop     ds
                call    si ; DOS_READ   ; indirect call to operation
                pop     word ptr ds:DMAADD+2
                pop     word ptr ds:DMAADD
                jnb     short READ_OK
                jmp     short ReadError
; ---------------------------------------------------------------------------

READ_OK:                                ; ...
                mov     ax, cx          ; get correct return in correct reg

Read_Okj:                               ; ...
                jmp     short ok_done_j ; successful return
$READ           endp


; =============== S U B R O U T I N E =======================================


Align_Buffer    proc near               ; ...
                mov     bx, dx
                shr     bx, 4
                mov     ax, ds          ; original segment
                add     ax, bx
                mov     ds, ax          ; new segment
                and     dx, 0Fh         ; normalize offset
                mov     word ptr ss:DMAADD, dx
                mov     word ptr ss:DMAADD+2, ds
                retn
Align_Buffer    endp

; ---------------------------------------------------------------------------

$WRITE:                                 ; ...
                mov     si, offset DOS_WRITE
                jmp     short ReadDO

; =============== S U B R O U T I N E =======================================


$LSEEK          proc near               ; ...

; FUNCTION CHUNK AT 43BD SIZE 00000013 BYTES

                call    CheckOwner      ; get system file entry

LSeekError:                             ; ...
                jnb     short CHKOWN_OK
                jmp     short ReadError
; ---------------------------------------------------------------------------

CHKOWN_OK:                              ; ...
                cmp     al, 2           ; is the seek value correct?
                jbe     short LSeekDisp ; yes, go dispatch

LSeekError1:                            ; ...
                mov     ss:EXTERR_LOCUS, 1
                mov     al, 1

LSeekError2:                            ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

LSeekDisp:                              ; ...
                cmp     al, 1           ; best way to dispatch; check middle
                jb      short LSeekStore ; just store CX:DX
                ja      short LSeekEOF  ; seek from end of file
                add     dx, es:[di+15h] ; [ES:DI+SF_ENTRY.sf_position]
                adc     cx, es:[di+17h] ; [ES:DI+SF_ENTRY.sf_position+2]

LSeekStore:                             ; ...
                mov     ax, cx
                xchg    ax, dx          ; DX:AX is the correct value

LSeekSetpos:                            ; ...
                mov     es:[di+15h], ax ; [ES:DI+SF_ENTRY.sf_position]
                mov     es:[di+17h], dx ; [ES:DI+SF_ENTRY.sf_position+2]
                call    Get_User_Stack
                mov     [si+6], dx      ; [SI+user_env.user_DX] ; return DX:AX
                jmp     short Read_Okj  ; successful return
; ---------------------------------------------------------------------------

LSeekEOF:                               ; ...
                test    byte ptr es:[di+6], 80h ; [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
                jnz     short Check_LSeek_Mode ; is net

LOCAL_LSeek:                            ; ...
                add     dx, es:[di+11h] ; [ES:DI+SF_ENTRY.sf_size]
                adc     cx, es:[di+13h] ; [ES:DI+SF_ENTRY.sf_size+2]
                jmp     short LSeekStore
; ---------------------------------------------------------------------------

Check_LSeek_Mode:                       ; ...
                test    byte ptr es:[di+3], 80h ; [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
                jnz     short LOCAL_LSeek ; FCB treated like local file
                mov     ax, es:[di+2]   ; ES:DI+SF_ENTRY.sf_mode]
                and     ax, 0F0h
                cmp     ax, 40h         ; SHARING_DENY_NONE
                jz      short NET_LSEEK ; LSEEK exported in this mode
                cmp     ax, 30h         ; SHARING_DENY_READ
                jnz     short LOCAL_LSeek ; Treated like local Lseek

NET_LSEEK:                              ; ...
                mov     ax, 1121h
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
                                        ; CX:DX = offset (in bytes) from end
                                        ; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
                                        ; SS = DOS CS
                                        ; Return: CF set on error
                                        ; CF clear if successful, DX:AX = new file position
                jnb     short LSeekSetpos
                jmp     short LSeekError2
$LSEEK          endp

; ---------------------------------------------------------------------------

$FILE_TIMES:                            ; ...
                cmp     al, 5           ; SET LAST ACCESS DATE AND TIME
                ja      short LSeekError1
                test    al, 2           ; 2,3 -> error
                jnz     short LSeekError1
                call    CheckOwner

ft1:                                    ; ...
                jb      short LSeekError
                cmp     al, 1
                jbe     short ft3       ; GET/SET LAST-WRITTEN DATE AND TIME
                test    byte ptr es:[di+5], 80h ; [es:di+SF_ENTRY.sf_flags],devid_device
                jnz     short ft2       ; device
                call    IsSFTNet
                jz      short ft7       ; local file

ft2:                                    ; ...
                cmp     al, 5           ; SET LAST ACCESS DATE AND TIME
                jz      short ok_ret
                sub     cx, cx          ; GET LAST ACCESS DATE AND TIME
                                        ; (last access time = 0)
                jmp     short ft4
; ---------------------------------------------------------------------------

ft3:                                    ; ...
                or      al, al
                jnz     short ft6       ; SET LAST-WRITTEN DATE AND TIME
                cli                     ; GET LAST-WRITTEN DATE AND TIME
                mov     cx, es:[di+0Dh] ; [es:di+SF_ENTRY.sf_time]

ft4:                                    ; ...
                mov     dx, es:[di+0Fh] ; [es:di+SF_ENTRY.sf_date]
                sti

ft5:                                    ; ...
                call    Get_User_Stack
                mov     [si+4], cx      ; [si+user_env.user_CX] ; time
                mov     [si+6], dx      ; [si+user_env.user_DX] ; date
                jmp     short ok_ret
; ---------------------------------------------------------------------------

ft6:                                    ; ...
                call    ECritDisk       ; call ECritSFT
                mov     es:[di+0Dh], cx ; [es:di+SF_ENTRY.sf_time] ; drop in new time
                mov     es:[di+0Fh], dx ; [es:di+SF_ENTRY.sf_date] ; and date
                xor     ax, ax          ; 0
                and     word ptr es:[di+5], 0FFBFh ; [es:di+SF_ENTRY.sf_flags],~devid_file_clean
                or      word ptr es:[di+5], 4000h ; [es:di+SF_ENTRY.sf_flags],sf_close_nodate
                call    LCritDisk       ; call LCritSFT

ok_ret:                                 ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

ft7:                                    ; ...
                push    ss              ; Retrieve the directory entry for the file
                pop     ds
                push    ax
                push    dx              ; ES:DI point to SFT
                call    DirFromSFT      ; locate a directory entry given an SFT
                pop     dx
                pop     cx              ; ES:DI point to entry
                                        ; DS:SI point to SFT
                                        ; ES:BX point to buffer header
                jb      short ft1
                cmp     cl, 5           ; SET LAST ACCESS DATE AND TIME
                jz      short ft8
                sub     cx, cx          ; GET LAST ACCESS DATE AND TIME
                                        ; (always) last access time = 0
                mov     ax, es:[di+12h] ; [es:di+dir_entry.dir_lstaccdate]
                xor     dx, dx
                call    check_date_val
                jmp     short ft5
; ---------------------------------------------------------------------------

ft8:                                    ; ...
                mov     ax, dx
                mov     dx, [si+0Fh]    ; [si+SF_ENTRY.sf_date]
                call    check_date_val
                jb      short ft10
                mov     es:[di+12h], dx ; [es:di+dir_entry.dir_lstaccdate]
                or      word ptr [si+2], 4 ; [si+SF_ENTRY.sf_mode],devid_device_null
                                        ; bit 2 - null device ; !?
                test    byte ptr es:[bx+5], 40h ; [es:bx+BUFFINFO.buf_flags],buf_dirty
                jnz     short ft9
                call    inc_DirtyBufferCount
                or      byte ptr es:[bx+5], 40h ; [es:bx+BUFFINFO.buf_flags],buf_dirty

ft9:                                    ; ...
                mov     al, 0FFh        ; Drive number, -1 means do not check for drive
                push    es
                pop     ds
                mov     di, bx          ; DS:DI - pointer to buffer
                call    CHECKFLUSH
                jb      ft1
                jmp     short ok_ret
; ---------------------------------------------------------------------------

ft10:                                   ; ...
                mov     al, 0Dh         ; error_invalid_data

ft_error:                               ; ...
                jmp     SYS_RET_ERR

; =============== S U B R O U T I N E =======================================


check_date_val  proc near               ; ...
                test    al, 1Fh         ; DAY (1 to 31) > 0 ?
                jz      short cdv_2     ; no, invalid value
                test    ax, 1E0h        ; MONTH (1 to 12) > 0 ?
                jz      short cdv_2     ; no, invalid value
                push    ax
                and     ax, 1E0h        ; isolate MONTH
                cmp     ax, 180h        ; > 12 ?
                pop     ax
                ja      short cdv_2     ; no, invalid value
                mov     dx, ax
                clc                     ; valid

cdv_1:                                  ; ...
                retn
; ---------------------------------------------------------------------------

cdv_2:                                  ; ...
                stc                     ; invalid
                jmp     short cdv_1
check_date_val  endp

; ---------------------------------------------------------------------------

$DUP:                                   ; ...
                mov     ax, bx          ; duplicate a jfn, bx = file handle
                call    JFNFree

DupErrorCheck:                          ; ...
                jb      short DupErr    ; errors go home
                push    es
                push    di
                pop     si
                pop     ds              ; ds:si = (free) jfn address
                xchg    ax, bx          ; get back old handle
                call    CheckOwner      ; get sft in ES:DI
                jb      short DupErr
                call    DOS_Dup_Direct
                call    pJFNFromHandle  ; get pointer
                mov     bl, es:[di]     ; get SFT number
                mov     [si], bl        ; stuff in new SFT
                jmp     SYS_RET_OK      ; and go home
; ---------------------------------------------------------------------------

DupErr:                                 ; ...
                jmp     short ft_error
; ---------------------------------------------------------------------------

$DUP2:                                  ; ...
                push    bx              ; force a dup on a particular jfn
                push    cx              ; bx = file handle, cx = new file handle
                mov     bx, cx
                call    $CLOSE          ; close destination handle
                pop     bx
                pop     ax              ; old in AX, new in BX
                call    pJFNFromHandle
                jmp     short DupErrorCheck ; check error and do dup

; =============== S U B R O U T I N E =======================================


CheckOwner      proc near               ; ...
                call    SFFromHandle
                retn
CheckOwner      endp

; ---------------------------------------------------------------------------

$AssignOper:                            ; ...
                cmp     al, 7           ; set in_use ?
                jnz     short chk08     ; no

srinuse:                                ; ...
                push    ax
                mov     al, dl          ; drive id
                call    GetCDSFromDrv   ; ds:si -> cds
                pop     ax
                jb      short baddrv
                cmp     word ptr [si+45h], 0 ; [SI+curdir.devptr]
                jz      short baddrv
                cmp     al, 7           ; set ?
                jnz     short resetdrv  ; no
                or      word ptr [si+43h], 4000h ; [SI+curdir.flags],curdir_inuse
                jmp     short okdone
; ---------------------------------------------------------------------------

resetdrv:                               ; ...
                and     word ptr [si+43h], 0BFFFh ; [SI+curdir.flags],(~curdir_inuse)
                jmp     short okdone
; ---------------------------------------------------------------------------

baddrv:                                 ; ...
                mov     ax, 0Fh         ; error_invalid_drive
                jmp     short ASS_ERR
; ---------------------------------------------------------------------------

chk08:                                  ; ...
                cmp     al, 8           ; reset inuse ?
                jz      short srinuse   ; yes
                push    ax
                mov     ax, 111Eh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
                                        ; SS = DOS CS
                                        ; STACK: WORD function to execute
                                        ; Return: CF set on error, AX = error code
                                        ; STACK unchanged
                pop     bx
                jb      short ASS_ERR

okdone:                                 ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

ASS_ERR:                                ; ...
                jmp     SYS_RET_ERR

; =============== S U B R O U T I N E =======================================


FIND_DPB        proc near               ; ...
                lds     si, ss:DPBHEAD  ; Find a DPB from a drive number

fdpb5:                                  ; ...
                cmp     si, 0FFFFh      ; -1
                jz      short fdpb10
                cmp     al, [si]        ; [SI+DPB.DRIVE]
                jz      short ret_label15 ; Carry clear (retz)
                lds     si, [si+19h]    ; [SI+DPB.NEXT_DPB]
                jmp     short fdpb5
; ---------------------------------------------------------------------------

fdpb10:                                 ; ...
                stc

ret_label15:                            ; ...
                retn
FIND_DPB        endp


; =============== S U B R O U T I N E =======================================


InitCDS         proc near               ; ...
                push    ax              ; set up an empty CDS
                                        ; AL has uppercase drive letter
                les     di, ss:THISCDS
                mov     word ptr es:[di+43h], 0 ; [ES:DI+curdir.flags] ; "free" CDS
                sub     al, 40h ; '@'   ; [ES:DI+curdir.flags] ; "free" CDS
                cmp     ss:NUMIO, al
                jb      short icdsx     ; Drive does not map a physical drive
                dec     ax              ; (AL) = 0 if A, 1 if B, etc.
                push    ax
                add     al, 'A'
                mov     ah, ':'
                mov     es:[di], ax     ; [ES:DI+curdir.text] ; set "x:"
                mov     word ptr es:[di+2], 5Ch ; '\' ; [ES:DI+curdir.text+2],"\"
                                        ; NUL terminate
                or      byte ptr es:[di+44h], 40h ; [ES:DI+curdir.flags+1],
                                        ; (curdir_inuse>>8)
                xor     ax, ax
                mov     es:[di+49h], ax ; [ES:DI+curdir.ID],0
                mov     es:[di+4Bh], ax ; [ES:DI+curdir.ID+2],0
                mov     al, 2
                mov     es:[di+4Fh], ax ; [ES:DI+curdir.end],2
                pop     ax              ; (al) = drive number
                push    ds
                push    si
                call    FIND_DPB
                jb      short icds5     ; OOOOPPPPPSSSS!!!!
                mov     es:[di+45h], si ; [ES:DI+curdir.devptr]
                mov     word ptr es:[di+47h], ds ; [ES:DI+curdir.devptr+2]

icds5:                                  ; ...
                pop     si
                pop     ds

icdsx:                                  ; ...
                pop     ax

RET45:                                  ; ...
                retn
InitCDS         endp

; ---------------------------------------------------------------------------

$UserOper:                              ; ...
                cmp     al, 1           ; get/set current user ID (for net)
                                        ; AL has function type
                jb      short UserGet   ; 0-get
                jz      short UserSet   ; 1-set
                cmp     al, 5           ; 5-printer-get-flags
                jbe     short UserPrint ; 2-printer-set
                                        ; 3-printer-get
                                        ; 4-printer-set-flags
                mov     ss:EXTERR_LOCUS, 1 ; errLOC_Unk
                mov     al, 1           ; error_invalid_function

useroper_error:                         ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

UserGet:                                ; ...
                push    ds              ; return to user the string
                pop     es
                mov     di, dx          ; destination
                mov     cx, ss:MYNUM    ; Get number
                call    Get_User_Stack
                mov     [si+4], cx      ; [SI+user_env.user_CX]
                                        ; Set number return
                push    ss
                pop     ds
                mov     si, offset MYNAME ; point source to user string

UserMove:                               ; ...
                mov     cx, 15
                rep movsb
                xor     ax, ax          ; 16th byte is 0
                stosb

UserBye:                                ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

UserSet:                                ; ...
                mov     ss:MYNUM, cx    ; set the current user
                mov     si, dx          ; user space has source
                push    ss
                pop     es
                mov     di, offset MYNAME ; point dest to user string
                inc     ss:DIFFNAM      ; signal change
                jmp     short UserMove
; ---------------------------------------------------------------------------

UserPrint:                              ; ...
                push    ax
                mov     ax, 111Fh
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
                                        ; STACK: WORD function
                                        ; Return: CF set on error, AX = error code
                                        ; STACK unchanged
                pop     dx
                jnb     short OKPA
                jmp     short useroper_error
; ---------------------------------------------------------------------------

OKPA:                                   ; ...
                jmp     short UserBye

; =============== S U B R O U T I N E =======================================


GetVisDrv       proc near               ; ...
                call    GETTHISDRV      ; correctly map non-spliced inuse drives
                                        ; get inuse drive
                jb      short RET45
                push    ds
                push    si
                lds     si, ss:THISCDS
                test    word ptr [si+43h], 2000h ; [SI+curdir.flags],curdir_splice
                pop     si
                pop     ds
                jnz     short GetVisdrv_err
                retn
; ---------------------------------------------------------------------------

GetVisdrv_err:                          ; ...
                mov     ss:DrvErr, 0Fh  ; error_invalid_drive
                stc
                retn
GetVisDrv       endp


; =============== S U B R O U T I N E =======================================


GETTHISDRV      proc near               ; ...
                or      al, al          ; are we using default drive?
                jnz     short GTD10     ; no, go get the CDS pointers
                mov     al, ss:CURDRV   ; get the current drive
                inc     ax              ; Counteract next instruction

GTD10:                                  ; ...
                dec     ax              ; 0 = A
                push    ds
                push    si
                mov     ss:EXTERR_LOCUS, 2 ; errLOC_Disk
                test    ss:FSHARING, 0FFh ; Logical or Physical?
                jz      short GTD20     ; Logical
                push    ax
                push    es
                push    di
                mov     word ptr ss:THISCDS, offset DUMMYCDS
                mov     word ptr ss:THISCDS+2, ss
                add     al, 'A'
                call    InitCDS
                test    word ptr es:[di+43h], 4000h ; [ES:DI+curdir.flags],
                                        ; curdir_inuse
                pop     di
                pop     es
                pop     ax
                jz      short GTD30
                jmp     short GTDX      ; carry clear
; ---------------------------------------------------------------------------

GTD20:                                  ; ...
                call    GetCDSFromDrv
                jb      short GTD30     ; Unassigned CDS
                                        ; return error already set
                test    word ptr [si+43h], 4000h ; [SI+curdir.flags],
                                        ; curdir_inuse
                jnz     short GTDX

GTD30:                                  ; ...
                mov     al, 0Fh         ; error_invalid_drive
                                        ; invalid FAT drive
                mov     ss:DrvErr, al   ; save this for IOCTL
                mov     ss:EXTERR_LOCUS, 1 ; errLOC_Unk
                stc

GTDX:                                   ; ...
                pop     si
                pop     ds
                retn
GETTHISDRV      endp


; =============== S U B R O U T I N E =======================================


GetCDSFromDrv   proc near               ; ...
                cmp     al, ss:CDSCOUNT ; is this a valid designator ?
                jb      short GetCDS    ; yes, get the macro
                stc                     ; signal error
                retn
; ---------------------------------------------------------------------------

GetCDS:                                 ; ...
                push    bx
                push    ax
                lds     si, ss:CDSADDR  ; get pointer to table
                mov     bl, 88          ; curdir.size
                mul     bl              ; get net offset
                add     si, ax          ; convert to true pointer
                mov     word ptr ss:THISCDS, si
                mov     word ptr ss:THISCDS+2, ds
                pop     ax
                pop     bx
                clc                     ; no error
                retn
GetCDSFromDrv   endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

TransFCB        proc near               ; ...

FCBTmp          = byte ptr -10h

                push    bp
                mov     bp, sp
                sub     sp, 10h
                push    ss
                pop     es
                push    es
                push    di
                lea     di, [bp+FCBTmp] ; point to FCB temp area
                mov     ss:EXTFCB, 0    ; no extended FCB found
                mov     ss:SATTRIB, 0   ; default search attributes
                call    GetExtended     ; get FCB, extended or not
                jz      short GetDrive  ; not an extended FCB, get drive
                mov     al, [si-1]      ; get attributes
                mov     ss:SATTRIB, al  ; store search attributes
                mov     ss:EXTFCB, 0FFh ; -1 ; signal extended FCB

GetDrive:                               ; ...
                lodsb                   ; get drive byte
                call    GETTHISDRV
                jb      short BadPack
                call    TextFromDrive   ; convert 0-based drive to text
                mov     cx, 11          ; back over name, ext
                push    si

FCBScan:                                ; ...
                lodsb                   ; get a byte
                call    GetCharType     ; get flags
                test    al, 8           ; FFCB
                jz      short BadPack
                loop    FCBScan
                pop     si
                mov     bx, di
                call    PackName        ; crunch the path
                pop     di              ; get original destination
                pop     es
                push    ss
                pop     ds
                lea     si, [bp+FCBTmp] ; lea si,[bp-16] ; point at new pathname
                cmp     byte ptr [bx], 0
                jz      short BadPack
                push    bp
                call    TransPathSet    ; convert the path
                pop     bp
                jnb     short FCBRet

BadPack:                                ; ...
                stc
                mov     al, 3           ; error_path_not_found

FCBRet:                                 ; ...
                mov     sp, bp
                pop     bp

TransPath_retn:                         ; ...
                retn
TransFCB        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


TransPath       proc near               ; ...

; FUNCTION CHUNK AT A6F5 SIZE 000000B2 BYTES

                xor     al, al          ; 0
                jmp     short SetSplice
; ---------------------------------------------------------------------------

TransPathSet:                           ; ...
                mov     al, 0FFh        ; -1

SetSplice:                              ; ...
                mov     ss:NoSetDir, al ; NoSetDir = !fExact
                mov     al, 0FFh

TransPathNoSet:                         ; ...
                mov     ss:FSPLICE, al  ; fSplice = TRUE
                mov     ss:CMETA, 0FFh  ; -1
                mov     ss:WFP_START, di
                mov     ss:CURR_DIR_END, 0FFFFh ; -1 ; crack from start
                push    ss              ; DS:SI - point to ASCIZ string path
                                        ; DI - point to buffer in DOSDATA
                pop     es
                lea     bp, [di+134]    ; [DI+TEMPLEN] ; end of buffer
                test    ss:FSHARING, 0FFh ; if no sharing
                jz      short CheckUNC  ; skip to UNC check
                call    DriveFromText   ; get drive and advance DS:SI
                call    GETTHISDRV      ; Set ThisCDS and convert to 0-based
                jb      short NoPath
                call    TextFromDrive   ; drop in new
                lea     bx, [di+1]      ; backup limit
                call    Canonicalize    ; copy and canonicalize
                jb      short TransPath_retn ; errors
                push    ss
                pop     ds
                mov     si, ds:WFP_START ; point to name
                test    ds:FSPLICE, 0FFh
                jz      short NoServerSplice
                call    Splice

NoServerSplice:                         ; ...
                push    ss
                pop     ds
                les     di, ds:THISCDS  ; for FATREAD
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk

NoPath:                                 ; ...
                mov     al, 3           ; error_path_not_found
                                        ; (Set up for possible bad path error)
                retn                    ; (any errors are in Carry flag)
; ---------------------------------------------------------------------------

CheckUNC:                               ; ...
                mov     word ptr ss:THISCDS, 0FFFFh ; -1 ; NULL thisCDS
                mov     ax, 1123h       ; NetSpoolCheck
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
                                        ; DS:SI -> ASCIZ filename to canonicalize
                                        ; ES:DI -> 128-byte buffer for qualified name
                                        ; Return: CF set if not resolved
                jnb     short UNCDone
                call    DriveFromText   ; eat drive letter
                push    ax
                mov     ax, [si]        ; get first two bytes of path
                call    PATHCHRCMP      ; convert to normal form
                xchg    ah, al          ; swap for second byte
                call    PATHCHRCMP      ; convert to normal form
                jnz     short CheckDevice ; not a path char
                cmp     ah, al          ; are they same?
                jnz     short CheckDevice ; nope
                pop     ax              ; We have a UNC request
                                        ; (prefixed with two leading \\s)
                movsw                   ; get the lead \\.

UNCCpy:                                 ; ...
                cmp     di, bp
                jnb     short CanonBad
                lodsb                   ; get a byte
                call    UCase           ; convert the char
                or      al, al
                jz      short UNCTerm   ; end of string. All done.
                call    PATHCHRCMP      ; is it a path char?
                mov     bx, di          ; backup position
                stosb
                jnz     short UNCCpy    ; no, go copy
                call    Canonicalize    ; wham (and set cMeta)

UNCDone:                                ; ...
                push    ss
                pop     ds
                retn                    ; (return error code)
; ---------------------------------------------------------------------------

UNCTerm:                                ; ...
                stosb
                jmp     short UNCDone
; ---------------------------------------------------------------------------

CheckDevice:                            ; ...
                pop     ax              ; retrieve drive info
                cmp     byte ptr [si], 0 ; check for null file
                jnz     short CheckPath

file_not_found:                         ; ...
                mov     al, 2           ; error_file_not_found
                stc
                retn
; ---------------------------------------------------------------------------

CheckPath:                              ; ...
                push    ax
                push    bp              ; save drive number
                call    no5Dshere
                pop     bp
                pop     ax
                jnb     short DoFile
                mov     ss:FSHARING, 0FFh ; -1 ; simulate sharing dos call
                call    GETTHISDRV      ; set ThisCDS and init DUMMYCDS
                mov     ss:FSHARING, 0
                call    TextFromDrive
                mov     al, 2Fh ; '/'   ; path separator
                stosb
                call    StrCpy          ; move remainder of string
                clc                     ; everything OK.
                push    ss
                pop     ds
                retn
; ---------------------------------------------------------------------------

CanonBad:                               ; ...
                call    ScanPathChar
                mov     al, 3           ; error_path_not_found
                jz      short $+2

PathEnc:                                ; ...
                mov     al, 2           ; error_file_not_found
                stc
                push    ss
                pop     ds

CanonBad_retn:                          ; ...
                retn
TransPath       endp

; ---------------------------------------------------------------------------

no5Dshere:                              ; ...
                jmp     CheckThisDevice
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR TransPath

DoFile:                                 ; ...
                call    GetVisDrv       ; get proper CDS
                mov     al, 3           ; error_path_not_found
                jb      short CanonBad_retn ; CARRY set -> bogus drive/spliced
                test    byte ptr ss:86h, 20h
                jnz     short file_not_found
                push    ds
                push    si
                push    es
                push    di
                call    ValidateCDS     ; poke CDS and make everything OK
                pop     di
                pop     es
                pop     si
                pop     ds
                mov     al, 3

DoFile_jc:                              ; ...
                jb      short CanonBad_retn
                push    ds
                push    si
                lds     si, ss:THISCDS  ; point to CDS
                mov     bx, di          ; point to destination
                add     bx, [si+4Fh]    ; [SI+curdir.end] ; point to backup limit
                lea     bp, [di+134]    ; [DI+TEMPLEN] ; regenerate end of buffer
                call    FStrCpy
                dec     di
                mov     al, 5Ch ; '\'   ; Make sure that there is a path char at end.
                cmp     es:[di-1], al
                jz      short GetOrig   ; get original string
                stosb

GetOrig:                                ; ...
                dec     di              ; point to path char
                pop     si
                pop     ds
                call    PathSep         ; is DS:SI a path sep?
                jnz     short PathAssure ; no, DI is correct. Assure a path char
                or      al, al          ; end of string?
                jz      short DoCanon   ; yes, skip.
                mov     di, bx          ; back up to root point.

SkipPath:                               ; ...
                lodsb
                call    PATHCHRCMP
                jz      short SkipPath
                dec     si
                or      al, al
                jz      short DoCanon

PathAssure:                             ; ...
                mov     al, 5Ch ; '\'   ; DS:SI start at some file name.
                                        ; ES:DI points at some path char.
                stosb

DoCanon:                                ; ...
                call    Canonicalize    ; ES:DI point to the correct spot
                                        ;      for canonicalization to begin.
                                        ; BP is the max extent to advance DI
                                        ; BX is the backup limit for
                jb      short DoFile_jc ; badly formatted path
                push    ss              ; The string has been moved to ES:DI.
                pop     ds
                mov     di, ds:WFP_START ; DS:SI point to string
                lds     si, ds:THISCDS
                call    PathPref        ; is there a prefix?
                jnz     short DoSplice  ; no, do splice
                                        ; yes, we have a match
                mov     al, [si-1]      ; last char to match
                call    PATHCHRCMP      ; did we end on a path char? (root)
                jz      short DoSplice  ; yes, no current dir here.
                cmp     byte ptr es:[di], 0 ; end at NUL?
                jz      short DoSplice  ; yes
                inc     di              ; point to after current path char
                mov     ss:CURR_DIR_END, di

DoSplice:                               ; ...
                push    ss              ; Splice the result.
                pop     ds              ; back to DOSDATA
                mov     si, ds:WFP_START ; point to beginning of string
                xor     cx, cx
                test    ds:FSPLICE, 0FFh ; -1
                jz      short SkipSplice
                call    Splice          ; replaces in place.

SkipSplice:                             ; ...
                push    ss
                pop     ds
                les     di, ds:THISCDS  ; point to correct drive
                test    word ptr es:[di+43h], 8000h ; [ES:DI+curdir.flags],
                                        ; curdir_isnet
                jnz     short Done      ; net, no fatread necessary (retnz)
                call    test_remote_disk_flag
                jnz     short Done
                jcxz    short Done
                call    ECritDisk
                call    FATREAD_CDS
                call    LCritDisk
                mov     al, 3           ; error_path_not_found
                                        ; (Set up for possible bad path error)

Done:                                   ; ...
                retn                    ; (any errors in carry flag)
; END OF FUNCTION CHUNK FOR TransPath

; =============== S U B R O U T I N E =======================================


Canonicalize    proc near               ; ...
                lodsb                   ; copy a path and remove . and .. entries
                                        ; ; DS:SI - point to ASCIZ string path
                                        ; ; ES:DI - point to buffer
                                        ; ; BX - backup limit (offset from ES)
                                        ; ;      points to slash
                                        ; ; BP - end of buffer
                call    PATHCHRCMP      ;  while (PathChr (*s))
                jnz     short CanonDec
                cmp     di, bp          ; if (d > dlim)
                jnb     short CanonBad  ; goto error;
                stosb
                jmp     short Canonicalize ; *d++ = *s++;
; ---------------------------------------------------------------------------

CanonDec:                               ; ...
                dec     si

CanonLoop:                              ; ...
                xor     ax, ax          ; 0
                cmp     [si], al        ; if (*s == 0) {
                jnz     short DoComponent
                cmp     byte ptr es:[di-1], 3Ah ; ':' ;  if (d[-1] == ':')
                jnz     short DoTerminate
                mov     al, 5Ch ; '\'   ; *d++ = '\';
                stosb
                mov     al, ah

DoTerminate:                            ; ...
                stosb                   ; *d++ = 0;
                clc                     ; return (0);
                retn
; ---------------------------------------------------------------------------

CanonBad:                               ; ...
                call    ScanPathChar    ; check for path chars in rest of string
                mov     al, 3           ; error_path_not_found
                                        ; (Set up for bad path error)
                jz      short PathEnc   ; path character encountered in string
                mov     al, 2           ; error_file_not_found
                                        ; (Set bad file error)

PathEnc:                                ; ...
                stc

CanonBad_retn:                          ; ...
                retn
; ---------------------------------------------------------------------------

DoComponent:                            ; ...
                call    CopyComponent   ; if (!CopyComponent (s, d))
                jb      short CanonBad_retn ; return (-1);
                cmp     word ptr es:[di], 2Eh ; '.' ; '.' + (0 SHL 8)
                jz      short Skip1
                cmp     word ptr es:[di], 2E2Eh ; '..'
                jnz     short CanonNormal
                dec     di              ; d--;

Skip1:                                  ; ...
                call    SkipBack        ; SkipBack ();
                mov     al, 3           ; error_path_not_found
                jb      short CanonBad_retn
                jmp     short CanonPath
; ---------------------------------------------------------------------------

CanonNormal:                            ; ...
                add     di, cx          ; else
                                        ;    d += ct;

CanonPath:                              ; ...
                call    PathSep
                jnz     short CanonBad  ; something else...
                lodsb                   ; get the char
                call    PATHCHRCMP      ; is it path char?
                jnz     short CanonDec  ; no, go test for nul
                cmp     di, bp          ; beyond buffer end?
                jnb     short CanonBad  ; yep, error.
                stosb                   ; copy the one byte

CanonPathLoop:                          ; ...
                lodsb                   ; get next byte
                call    PATHCHRCMP      ; path char again?
                jz      short CanonPathLoop ; yep, grab another
                dec     si              ; back up
                jmp     short CanonLoop ; go copy component
Canonicalize    endp


; =============== S U B R O U T I N E =======================================


PathSep         proc near               ; ...
                mov     al, [si]        ; determine if char is a path separator
PathSep         endp


; =============== S U B R O U T I N E =======================================


PathSepGotCh    proc near               ; ...
                or      al, al          ; test for zero
                jz      short CanonBad_retn ; return if equal to zero (NUL)
                call    PATHCHRCMP      ; check for path character
                retn                    ; and return HIS determination
PathSepGotCh    endp


; =============== S U B R O U T I N E =======================================


SkipBack        proc near               ; ...
                cmp     di, bx          ; while (TRUE) {
                jb      short SkipBad   ; if (d < dlim)
                dec     di              ; goto err;
                mov     al, es:[di]     ; if (pathchr (*--d))
                call    PATHCHRCMP      ; break;
                jnz     short SkipBack
                clc                     ; return (0);
                retn
; ---------------------------------------------------------------------------

SkipBad:                                ; ...
                mov     al, 3           ; error_path_not_found ; bad path error
                stc                     ; return (-1);
                retn
SkipBack        endp


; =============== S U B R O U T I N E =======================================


CopyComponent   proc near               ; ...
                sub     sp, 14          ; room for temp buffer
                push    ds
                push    si
                push    es
                push    di
                push    bp
                mov     bp, sp
                mov     ah, 2Eh ; '.'
                lodsb
                stosb
                cmp     al, ah          ; if ((*d++=*s++) == '.') {
                jnz     short NormalComp
                call    PathSep         ; if (!pathsep(*s))
                jz      short NulTerm
                lodsb                   ; if ((*d++=*s++) != '.'
                stosb
                cmp     al, ah
                jnz     short CopyBad
                call    PathSep
                jnz     short CopyBad   ; || !pathsep (*s))
                                        ; return -1;

NulTerm:                                ; ...
                xor     al, al          ; *d++ = 0;
                stosb
                mov     [bp+6], si      ; CopySoff
                jmp     short _GoodRet  ;     }
; ---------------------------------------------------------------------------

NormalComp:                             ; ...
                mov     si, [bp+6]      ; CopySoff
                                        ; else {
                call    NameTrans       ; s = NameTrans (s, Name1);
                cmp     si, [bp+6]      ; CopySoff
                jz      short CopyBad   ; if (s == CopySOff)
                                        ;    return (-1);
                test    ss:FSHARING, 0FFh ; if (!fSharing) {
                jnz     short DoPack
                and     dl, 1
                add     ss:CMETA, dl    ; cMeta += fMeta;
                jg      short CopyBad   ; if (cMeta > 0)
                                        ;   return (-1);
                jnz     short DoPack
                or      dl, dl          ; else
                                        ;   if (cMeta == 0 && fMeta == 0
                jz      short CopyBadPath ; return (-1);

DoPack:                                 ; ...
                mov     [bp+6], si      ; CopySoff
                push    ss
                pop     ds
                mov     si, offset NAME1
                lea     di, [bp+10]     ; CopyTemp
                push    di
                call    PackName        ; PackName (Name1, temp);
                pop     di
                call    StrLen          ; if (strlen(temp)+d > bp)
                dec     cx
                add     cx, [bp+2]      ; CopyDoff
                cmp     cx, [bp+0]      ; CopyB
                jnb     short CopyBad   ; return (-1);
                mov     si, di          ; strcpy (d, temp);
                les     di, [bp+2]      ; CopyD
                call    FStrCpy         ;   }

_GoodRet:                               ; ...
                clc
                jmp     short CopyEnd   ; return 0;
; ---------------------------------------------------------------------------

CopyBad:                                ; ...
                stc
                call    ScanPathChar    ; check for path chars in rest of string
                mov     al, 2           ; error_file_not_found
                jnz     short CopyEnd

CopyBadPath:                            ; ...
                stc
                mov     al, 3           ; error_path_not_found

CopyEnd:                                ; ...
                pop     bp
                pop     di
                pop     es
                pop     si
                pop     ds
                lahf
                add     sp, 14          ; reclaim temp buffer
                call    StrLen
                dec     cx
                sahf
                retn
CopyComponent   endp


; =============== S U B R O U T I N E =======================================


Splice          proc near               ; ...
                test    ss:SPLICES, 0FFh ; pseudo mount by string substitution
                jz      short AllDone
                push    word ptr ss:THISCDS
                push    word ptr ss:THISCDS+2 ; TmpCDS = ThisCDS
                push    ds
                push    si
                pop     di
                pop     es
                xor     ax, ax

SpliceScan:                             ; ...
                call    GetCDSFromDrv   ;  for (i=1; s = GetCDSFromDrv (i); i++)
                jb      short SpliceDone
                inc     al
                test    word ptr [si+43h], 2000h ; [SI+curdir.flags],curdir_splice
                jz      short SpliceScan
                push    di              ; if ( Spliced (i) ) {
                call    PathPref        ; if (!PathPref (s, d))
                jz      short SpliceFound

SpliceSkip:                             ; ...
                pop     di
                jmp     short SpliceScan ; continue;
; ---------------------------------------------------------------------------

SpliceFound:                            ; ...
                cmp     byte ptr es:[di], 0 ; if (*s || NoSetDir) {
                jnz     short SpliceDo
                test    ss:NoSetDir, 0FFh
                jnz     short SpliceSkip

SpliceDo:                               ; ...
                mov     si, di          ; p = src + strlen (p);
                push    es
                pop     ds
                pop     di
                call    TextFromDrive1  ; src = TextFromDrive1(src,i);
                mov     ax, ss:CURR_DIR_END
                or      ax, ax
                js      short NoPoke
                add     ax, di          ; curdirend += src-p;
                sub     ax, si
                mov     ss:CURR_DIR_END, ax

NoPoke:                                 ; ...
                cmp     byte ptr [si], 0 ; if (*p)
                jnz     short SpliceCopy ; *src++ = '\\';
                mov     al, 5Ch ; '\'
                stosb

SpliceCopy:                             ; ...
                call    FStrCpy         ; strcpy (src, p);
                add     sp, 4           ; throw away saved stuff
                or      cl, 1           ; signal splice done.
                jmp     short DoSet     ; return;
; ---------------------------------------------------------------------------

SpliceDone:                             ; ...
                pop     word ptr ss:THISCDS+2 ;  }
                pop     word ptr ss:THISCDS ; ThisCDS = TmpCDS;

AllDone:                                ; ...
                xor     cx, cx

DoSet:                                  ; ...
                lds     si, ss:THISCDS  ; ThisDPB = ThisCDS->devptr;
                les     di, [si+45h]    ; [SI+curdir.devptr]
                mov     word ptr ss:THISDPB, di
                mov     word ptr ss:THISDPB+2, es

Splice_retn:                            ; ...
                retn
Splice          endp

; ---------------------------------------------------------------------------

$NameTrans:                             ; ...
                push    ds              ; partially process a name
                push    si
                push    es
                push    di              ; DS:SI - source string for translation
                                        ; ES:DI - pointer to buffer
                push    cx
                mov     ch, 16h         ; attr_hidden+attr_system+attr_directory
                call    SetAttrib
                mov     di, offset OPENBUF
                call    TransPath       ; to translation (everything)
                pop     cx
                pop     di
                pop     es
                pop     si
                pop     ds
                jnb     short TransOK
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

TransOK:                                ; ...
                mov     si, offset OPENBUF
                push    ss
                pop     ds
                call    FStrCpy
                jmp     SYS_RET_OK

; =============== S U B R O U T I N E =======================================


DriveFromText   proc near               ; ...
                xor     al, al          ; return drive number from a text string
                cmp     byte ptr [si], 0
                jz      short Splice_retn
                cmp     byte ptr [si+1], 3Ah ; ':'
                jnz     short Splice_retn
                lodsw
                or      al, 20h         ; convert to lowercase
                sub     al, 60h         ; 'a'-1
                jnz     short Splice_retn
                mov     al, 0FFh        ; nuke AL...
                retn                    ; AL has drive number
DriveFromText   endp


; =============== S U B R O U T I N E =======================================


TextFromDrive   proc near               ; ...
                inc     al              ; convert a drive number to a text string

TextFromDrive1:                         ; ...
                add     al, 40h ; '@'   ; 'A'-1 ; *d++ = drive-1+'A';
                mov     ah, 3Ah ; ':'   ; strcat (d, ":");
                stosw

PathPref_retn:                          ; ...
                retn
TextFromDrive   endp


; =============== S U B R O U T I N E =======================================


PathPref        proc near               ; ...
                call    DStrLen         ; see if one path is a prefix of another
                dec     cx              ; get length
                                        ; do not include nul byte
                repe cmpsb              ; compare
                jnz     short PathPref_retn ; return NZ
                push    ax
                mov     al, [si-1]      ; get last byte to match
                call    PATHCHRCMP      ; is it a path char (Root!)
                jz      short Prefix    ; yes, match root (I hope)
                mov     al, es:[di]     ; get next char to match
                call    PathSepGotCh    ; was it a pathchar?

Prefix:                                 ; ...
                pop     ax
                retn                    ; (if) Zero flag set => prefix found
PathPref        endp


; =============== S U B R O U T I N E =======================================


ScanPathChar    proc near               ; ...
                lodsb                   ; fetch a character
                call    PathSepGotCh
                jnz     short ScanPathChar ; not \, / or NUL => go back for more
                call    PATHCHRCMP      ; path separator?
                retn
ScanPathChar    endp

; ---------------------------------------------------------------------------
PATHNAMELEN     dw 0                    ; ...

; =============== S U B R O U T I N E =======================================


$OPEN           proc near               ; ...

; FUNCTION CHUNK AT 43B4 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 43BD SIZE 00000013 BYTES

                xor     ah, ah          ; General file open/create code

$Open2:                                 ; ...
                mov     ch, 16h         ; attr_hidden+attr_system+attr_directory
                call    SetAttrib
                mov     cx, offset DOS_OPEN
                push    ax

AccessFile:                             ; ...
                call    ECritDisk       ; call ECritSFT
                call    SFNFree         ; get a free sfn
                call    LCritDisk       ; call LCritSFT
                jb      short OpenFailJ ; no free sft's
                mov     ss:SFN, bx
                mov     word ptr ss:THISSFT, di
                mov     word ptr ss:THISSFT+2, es
                call    JFNFree         ; get a free jfn
                jnb     short SaveJFN   ; there were free JFNs... try SFN

OpenFailJ:                              ; ...
                jmp     OpenFail
; ---------------------------------------------------------------------------

SaveJFN:                                ; ...
                mov     word ptr ss:PJFN, di
                mov     word ptr ss:PJFN+2, es
                mov     ss:JFN, bx
                mov     bx, ss:SFN
                mov     es:[di], bl     ; assign the JFN
                mov     si, dx          ; get name in appropriate place
                mov     di, offset OPENBUF
                push    cx
                call    TransPath       ; convert the path
                pop     bx
                lds     si, ss:THISSFT
                jb      short OpenCleanJ
                cmp     ss:CMETA, 0FFh
                jz      short SetSearch ; no error, go and open file
                mov     al, 2           ; error_file_not_found
                                        ; no meta chars allowed

OpenCleanJ:                             ; ...
                jmp     short OpenClean
; ---------------------------------------------------------------------------

SetSearch:                              ; ...
                pop     ax              ; Mode (Open), Attributes (Create)
                xor     cx, cx          ; 0
                mov     [si+2], cx      ; [SI+SF_ENTRY.sf_mode],0
                                        ; initialize mode field to 0
                mov     [si+33h], cx    ; [SI+SF_ENTRY.sf_MFT],0
                                        ; clean out sharing info
                cmp     bx, offset DOS_OPEN
                jnz     short _DoOper
                test    al, 80h         ; SHARING_NO_INHERIT
                jz      short _DoOper
                and     al, 7Fh         ;  mask off inherit bit
                mov     cx, 1000h       ; sf_no_inherit

_DoOper:                                ; ...
                push    di
                push    es
                push    ds
                pop     es
                push    si
                pop     di              ; (es:di) = SFT address
                call    Set_EXT_mode
                pop     es
                pop     di
                push    ss
                pop     ds
                push    cx
                call    bx              ; DOS_OPEN (or DOS_CREATE)
                pop     cx
                lds     si, ds:THISSFT
                jb      short OpenE     ; check extended open hooks first
                mov     word ptr [si], 1 ; SF_ENTRY.sf_ref_count
                or      [si+5], cx      ; SF_ENTRY.sf_flags
                push    ds
                pop     es
                mov     di, si
                call    set_sftfcb_entry ; set SFT-FCB entry
                                        ; in the internal (SFT_FCB) table
                                        ; (used for FCB calls only!)
                mov     ax, ss:JFN
                clc
                mov     ss:SFN, 0FFFFh  ; -1 ; clear out sfn pointer
                jmp     SYS_RET_OK      ; bye with no errors
; ---------------------------------------------------------------------------

OpenClean:                              ; ...
                pop     bx              ; clean off stack

OpenE:                                  ; ...
                mov     word ptr [si], 0 ; [SI+SF_ENTRY.sf_ref_count],0
                                        ; release SFT
                lds     si, ss:PJFN
                mov     byte ptr [si], 0FFh ; free the SFN...
                jmp     short OpenCritLeave
; ---------------------------------------------------------------------------

OpenFail:                               ; ...
                sti
                pop     cx

OpenCritLeave:                          ; ...
                mov     ss:SFN, 0FFFFh  ; -1 ; remove mark.
                cmp     ss:EXTERR, 37   ; error_Code_Page_Mismatched
                jnz     short NORERR
                jmp     From_GetSet
; ---------------------------------------------------------------------------

NORERR:                                 ; ...
                jmp     SYS_RET_ERR
$OPEN           endp


; =============== S U B R O U T I N E =======================================


$CREAT          proc near               ; ...
                push    cx              ; create a new file and open him for input
                mov     cx, offset DOS_CREATE

AccessSet:                              ; ...
                mov     ss:SATTRIB, 6   ; attr_hidden+attr_system
                jmp     AccessFile
$CREAT          endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR $CHMOD

chmod_x:                                ; ...
                cmp     bp, 5053h
                jnz     short chmod_x_2
                cmp     cl, 39h
                jnz     short chmod_x_1
                mov     ah, cl
                mov     cs:PATHNAMELEN, 128
                jmp     mkdir_x
; ---------------------------------------------------------------------------

chmod_x_1:                              ; ...
                cmp     cl, 56h
                jnz     short chmod_x_2
                mov     ah, cl
                mov     cs:PATHNAMELEN, 128
                jmp     short rename_x
; ---------------------------------------------------------------------------

chmod_x_2:                              ; ...
                mov     al, 1

chmod_errj:                             ; ...
                jmp     short NORERR
; END OF FUNCTION CHUNK FOR $CHMOD

; =============== S U B R O U T I N E =======================================


$CHMOD          proc near               ; ...

; FUNCTION CHUNK AT 43B4 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 43BD SIZE 00000013 BYTES
; FUNCTION CHUNK AT 64D5 SIZE 00000003 BYTES
; FUNCTION CHUNK AT 64DF SIZE 0000002D BYTES
; FUNCTION CHUNK AT AA87 SIZE 0000002B BYTES
; FUNCTION CHUNK AT AB29 SIZE 00000074 BYTES

                cmp     al, 0FFh        ; MS-DOS 7.20 (Win98) - EXTENDED-LENGTH FILENAME OPERATIONS
                                        ; AX = 43FFh
                                        ; BP = 5053h ('PS')
                                        ; CL = function
                                        ; 39h "mkdir" create directory
                                        ; DS:DX -> ASCIZ pathname
                                        ; 56h rename file
                                        ; DS:DX -> ASCIZ filename of existing file (no wildcards)
                                        ; ES:DI -> ASCIZ new filename (no wildcards)
                                        ;
                                        ; ref: Ralf Brown's Interrupt List
                jz      short chmod_x

std_chmod:
                mov     di, offset OPENBUF
                push    ax
                push    cx
                mov     si, dx
                call    TransPathSet    ; get correct path
                pop     cx
                pop     ax
                jb      short ChModErr
                push    ss
                pop     ds
                cmp     ds:CMETA, 0FFh  ; -1
                jnz     short ChModErr
                mov     ds:SATTRIB, 16h ; attr_hidden+attr_system+attr_directory
                sub     al, 1           ; fast way to discriminate
                jb      short ChModGet  ; 0 -> go get value
                jz      short ChModSet  ; 1 -> go set value
                mov     ds:EXTERR_LOCUS, 1
                mov     al, 1           ; error_invalid_function ; bad value

chmod_errj2:                            ; ...
                jmp     short chmod_errj
; ---------------------------------------------------------------------------

ChModGet:                               ; ...
                call    GET_FILE_INFO   ; suck out the ol' info
                jb      short ChModE
                call    Get_User_Stack
                mov     [si+4], ax      ; [SI+user_env.user_CX]
                                        ; return the attributes

OpenOkj:                                ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

ChModSet:                               ; ...
                mov     ax, cx
                call    SET_FILE_ATTRIBUTE
                jb      short ChModE

OpenOkj2:                               ; ...
                jmp     short OpenOkj
; ---------------------------------------------------------------------------

ChModErr:                               ; ...
                mov     al, 3           ; error_path_not_found

ChModE:                                 ; ...
                jmp     short chmod_errj2
$CHMOD          endp


; =============== S U B R O U T I N E =======================================


$UNLINK         proc near               ; ...
                push    cx              ; Delete a File
                mov     si, dx
                mov     di, offset OPENBUF
                call    TransPathSet
                pop     cx
                jb      short ChModErr
                cmp     ss:CMETA, 0FFh
                jnz     short Unlink_notfound
                push    ss
                pop     ds
                mov     ch, 6
                call    SetAttrib
                call    DOS_DELETE
                jb      short UnLinkE
                jmp     short OpenOkj2
; ---------------------------------------------------------------------------

Unlink_notfound:                        ; ...
                mov     al, 3           ; error_path_not_found

UnLinkE:                                ; ...
                jmp     short ChModE
$UNLINK         endp

; ---------------------------------------------------------------------------

$RENAME:                                ; ...
                mov     cs:PATHNAMELEN, 67
; START OF FUNCTION CHUNK FOR $CHMOD

rename_x:                               ; ...
                push    cx              ; cx = search attributes
                push    ds
                push    dx              ; DS:DX = source
                push    es
                pop     ds              ; ES:DI = destination
                mov     si, di          ; move dest to source
                mov     di, offset RENBUF
                call    TransPathSet    ; munge the paths
                push    ss:WFP_START    ; get pointer
                pop     ss:REN_WFP      ; stash it
                pop     si
                pop     ds
                pop     cx

epjc2:                                  ; ...
                jb      short ChModErr  ; get old error
                cmp     ss:CMETA, 0FFh  ; -1
                jnz     short Unlink_notfound
                push    cx
                mov     di, offset OPENBUF ; appropriate buffer
                call    TransPathSet
                pop     cx
                jb      short epjc2
                push    ss
                pop     ds
                cmp     ds:CMETA, 0FFh  ; -1
                jb      short Unlink_notfound
                push    word ptr ds:THISCDS
                push    word ptr ds:THISCDS+2
                mov     di, offset OPENBUF
                push    ss
                pop     es              ; es:di-> source
                xor     al, al          ; scan all CDS

rnloop:                                 ; ...
                call    GetCDSFromDrv
                jb      short dorn      ; end of CDS
                call    StrCmp          ; current dir ?
                jz      short rnerr     ; yes
                inc     al              ; next
                jmp     short rnloop
; ---------------------------------------------------------------------------

rnerr:                                  ; ...
                add     sp, 4
                mov     al, 16          ; error_current_directory
                jmp     short UnLinkE
; ---------------------------------------------------------------------------

dorn:                                   ; ...
                pop     word ptr ss:THISCDS+2
                pop     word ptr ss:THISCDS
                push    ss
                pop     ds
                mov     ch, 16h         ; attr_directory+attr_hidden+attr_system
                call    SetAttrib
                call    DOS_RENAME      ; do the deed
                jb      short UnLinkE
                jmp     SYS_RET_OK
; END OF FUNCTION CHUNK FOR $CHMOD

; =============== S U B R O U T I N E =======================================


$CreateNewFile  proc near               ; ...
                push    cx              ; Save attributes on stack
                mov     cx, offset DOS_Create_New ; routine to call
                jmp     AccessSet       ; use good ol' open
$CreateNewFile  endp


; =============== S U B R O U T I N E =======================================


BinToAscii      proc near               ; ...
                mov     cx, 404h        ; convert a number to a string
                                        ; (in order to generate temp file names)
                                        ; (ax) = value
                                        ; (ch) = digit counter, (cl) = shift cnt

bta_nxtnb:                              ; ...
                rol     ax, cl          ; move leftmost nibble into rightmost
                push    ax              ; preserve remainder of digits
                and     al, 0Fh         ; grab low nibble
                add     al, 41h ; 'A'   ; turn into ascii
                stosb                   ; drop in the character
                pop     ax              ; (ax) = shifted number
                dec     ch
                jnz     short bta_nxtnb ; process 4 digits
                retn
BinToAscii      endp

; ---------------------------------------------------------------------------

$CreateTempFile:                        ; ...
                push    bp              ; create a unique name
                mov     bp, sp
                sub     sp, 10
                test    cx, 0FFD8h      ; ~attr_changeable
                jz      short OKatts    ; Ok if no non-changeable bits set
                mov     ax, 5           ; error_access_denied
                jmp     short SETTMPERR
; ---------------------------------------------------------------------------

OKatts:                                 ; ...
                mov     [bp-10], cx     ; attr
                mov     [bp-8], dx      ; FilPtrL ; pointer to file
                mov     word ptr [bp-6], ds ; FilPtrH
                mov     word ptr [bp-2], ds ; EndPtrH ; seg pointer to end of dir
                push    ds
                pop     es              ; destination for nul search
                mov     di, dx
                mov     cx, di
                neg     cx              ; number of bytes remaining in segment
                or      cx, cx
                jnz     short okok
                mov     cx, 0FFFFh      ; -1

okok:                                   ; ...
                xor     ax, ax
                repne scasb
                dec     di              ; point back to the null
                mov     al, es:[di-1]   ; Get char before the NUL
                call    PATHCHRCMP
                jz      short SETENDPTR ; Is it a path separator?
                mov     al, 5Ch ; '\'   ; Yes
                stosb                   ; Add a path separator (and INC DI)

SETENDPTR:                              ; ...
                mov     [bp-4], di

CreateLoop:                             ; ...
                push    ss              ; let ReadTime see variables
                pop     ds
                push    bp
                call    READTIME        ; go get time
                pop     bp
                les     di, [bp-4]      ; EndPtr ; point to the string
                mov     ax, cx
                call    BinToAscii      ; store upper word
                mov     ax, dx
                call    BinToAscii      ; store lower word
                xor     al, al          ; 0
                stosb                   ; nul terminate
                lds     dx, [bp-8]      ; FilPtr ; get name
                mov     cx, [bp-10]     ; Attr ; get attr
                push    bp
                call    $CreateNewFile  ; try to create a new file
                pop     bp
                jnb     short CreateDone ; failed, go try again
                mov     ax, ss:EXTERR
                cmp     al, 50h         ; error_file_exists
                jz      short CreateLoop
                cmp     al, 5           ; error_access_denied
                jnz     short SETTMPERR
                lds     dx, [bp-8]      ; FilPtr ; get name
                xor     al, al          ; 0
                push    bp
                call    $CHMOD
                pop     bp
                jnb     short CreateLoop
                mov     al, 5           ; error_access_denied

SETTMPERR:                              ; ...
                stc

CreateDone:                             ; ...
                mov     sp, bp
                pop     bp
                jb      short CreateFail
                jmp     SYS_RET_OK      ; success!
; ---------------------------------------------------------------------------

CreateFail:                             ; ...
                jmp     SYS_RET_ERR

; =============== S U B R O U T I N E =======================================


SetAttrib       proc near               ; ...
                test    ss:FSHARING, 0FFh ; fSharing == FALSE => set sattrib to CH
                                        ; fSharing == TRUE => set sattrib to CL
                jnz     short Set
                mov     cl, ch

Set:                                    ; ...
                mov     ss:SATTRIB, cl
                retn
SetAttrib       endp

; ---------------------------------------------------------------------------

$Extended_Open:                         ; ...
                mov     ss:EXTOPEN_FLAG, dx
                mov     ss:EXTOPEN_IO_MODE, 0
                test    dx, 0FE00h
                jnz     short ext_inval2
                mov     ah, dl
                cmp     dl, 0
                jz      short ext_inval2
                and     dl, 0Fh
                cmp     dl, 2
                ja      short ext_inval2
                and     ah, 0F0h
                cmp     ah, 10h
                ja      short ext_inval2
                mov     word ptr ss:5FBh, es
                mov     ss:5F9h, di
                push    word ptr ss:5F4h
                pop     word ptr ss:5FDh
                mov     ss:5FFh, cx
                mov     ss:601h, bx
                mov     word ptr ss:605h, ds
                mov     ss:603h, si
                mov     dx, si
                mov     ax, bx
                jmp     short goopen2
; ---------------------------------------------------------------------------

ext_inval2:                             ; ...
                mov     al, 1

eo_err:                                 ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

ext_inval_parm:
                pop     cx
                pop     si
                mov     al, 13          ; error_invalid_data
                jmp     short eo_err
; ---------------------------------------------------------------------------

error_return:                           ; ...
                retn
; ---------------------------------------------------------------------------

goopen2:                                ; ...
                test    bx, 2000h       ; INT_24_ERROR
                jz      short goopen
                or      ss:EXTOPEN_ON, 2 ; EXT_OPEN_I24_OFF

goopen:                                 ; ...
                or      ss:EXTOPEN_ON, 1 ; EXT_OPEN_ON
                and     ss:EXTOPEN_FLAG, 0FFh
                cmp     ss:EXTOPEN_FLAG, 10h ; EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE
                jnz     short chknext
                call    $CreateNewFile
                jb      short error_return
                cmp     ss:EXTOPEN_ON, 0
                jz      short ok_return2
                mov     ss:EXTOPEN_FLAG, 2 ; ACTION_CREATED_OPENED
                jmp     setXAttr
; ---------------------------------------------------------------------------

ok_return2:                             ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

chknext:                                ; ...
                test    ss:EXTOPEN_FLAG, 1
                jnz     short exist_open
                call    $CREAT
                jb      short error_return
                cmp     ss:EXTOPEN_ON, 0
                jz      short ok_return2
                mov     ss:EXTOPEN_FLAG, 2 ; ACTION_CREATED_OPENED
                test    ss:EXTOPEN_ON, 4 ; EXT_FILE_NOT_EXIST
                jnz     short setXAttr
                mov     ss:EXTOPEN_FLAG, 3 ; ACTION_REPLACED_OPENED
                jmp     short setXAttr
; ---------------------------------------------------------------------------

error_return2:                          ; ...
                stc
                retn
; ---------------------------------------------------------------------------

exist_open:                             ; ...
                test    ss:FSHARING, 0FFh ; -1
                jz      short noserver
                mov     cl, ch          ; search attribute

noserver:                               ; ...
                call    $Open2
                jnb     short ext_ok
                cmp     ss:EXTOPEN_ON, 0
                jz      short error_return2
                cmp     ax, 2
                jnz     short error_return2
                test    ss:EXTOPEN_FLAG, 10h ; EXT_NEXISTS_CREATE
                jnz     short do_creat
                jmp     short extexit
; ---------------------------------------------------------------------------

do_creat:                               ; ...
                mov     cx, ss:SAVE_CX
                lds     si, dword ptr ss:SAVE_SI
                mov     dx, si
                call    $CREAT
                jb      short extexit
                mov     ss:EXTOPEN_FLAG, 2 ; ACTION_CREATED_OPENED
                jmp     short setXAttr
; ---------------------------------------------------------------------------

ext_ok:                                 ; ...
                cmp     ss:EXTOPEN_ON, 0
                jz      short ok_return
                mov     ss:EXTOPEN_FLAG, 1 ; ACTION_OPENED

setXAttr:                               ; ...
                push    ax
                call    Get_User_Stack
                mov     ax, ss:EXTOPEN_FLAG
                mov     [si+4], ax
                pop     ax
                mov     [si], ax

ok_return:                              ; ...
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

extexit2:
                pop     bx
                push    ax
                cmp     ss:EXTOPEN_FLAG, 2 ; ACTION_CREATED_OPENED
                jnz     short justopen
                lds     si, dword ptr ss:SAVE_SI
                lds     dx, [si]
                call    $UNLINK
                jmp     short reserror
; ---------------------------------------------------------------------------

justopen:                               ; ...
                call    $CLOSE

reserror:                               ; ...
                pop     ax
                jmp     short extexit
; ---------------------------------------------------------------------------

ext_file_unfound:                       ; error_file_not_found
                mov     ax, 2
                jmp     short extexit
; ---------------------------------------------------------------------------
                mov     ax, 1           ; error_invalid_function

extexit:                                ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

$LockOper:                              ; ...
                cmp     al, 1           ; Lock Calls
                ja      short lock_bad_func
                push    di
                call    SFFromHandle
                jnb     short lock_do
                pop     di
                mov     al, 6           ; error_invalid_handle

lockoperr:                              ; ...
                jmp     SYS_RET_ERR
; ---------------------------------------------------------------------------

lock_bad_func:                          ; ...
                mov     ss:EXTERR_LOCUS, 1
                mov     al, 1           ; error_invalid_function

lockoperrj:                             ; ...
                jmp     short lockoperr
; ---------------------------------------------------------------------------

lock_do:                                ; ...
                mov     bx, ax
                mov     bp, offset Lock_Buffer
                mov     [bp+0], dx      ; [bp+LockBuf.Lock_position]
                mov     [bp+2], cx      ; [bp+LockBuf.Lock_position+2]
                pop     cx
                mov     [bp+4], cx      ; [bp+LockBuf.Lock_length]
                mov     [bp+6], si      ; [bp+LockBuf.Lock_length+2]
                mov     cx, 1           ; one range
                push    ss
                pop     ds
                mov     dx, bp
                test    al, 1
                jnz     short DOS_Unlock
                jmp     short DOS_Lock
; ---------------------------------------------------------------------------

DOS_Unlock:                             ; ...
                test    byte ptr es:[di+6], 80h ; [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
                jz      short LOCAL_UNLOCK
                mov     ax, 110Ah
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
                                        ; BX = file handle, CX:DX = starting offset, SI = high word of size
                                        ; STACK: WORD low word of size, ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file, SS = DOS CS
                                        ; Return: CF set error
                jmp     short ValChk
; ---------------------------------------------------------------------------

LOCAL_UNLOCK:                           ; ...
                call    SetBad

ValChk:                                 ; ...
                jnb     short Lock_OK
                jmp     short lockoperrj
; ---------------------------------------------------------------------------

Lock_OK:                                ; ...
                mov     ax, ds:TEMP_VAR
                jmp     SYS_RET_OK
; ---------------------------------------------------------------------------

DOS_Lock:                               ; ...
                test    byte ptr es:[di+6], 80h ; [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
                jz      short LOCAL_LOCK
                mov     ax, 110Ah
                int     2Fh             ; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
                                        ; BX = file handle, CX:DX = starting offset, SI = high word of size
                                        ; STACK: WORD low word of size, ES:DI -> SFT
                                        ; SFT DPB field -> DPB of drive containing file, SS = DOS CS
                                        ; Return: CF set error
                jmp     short ValChk
; ---------------------------------------------------------------------------

LOCAL_LOCK:                             ; ...
                call    SetBad
                jmp     short ValChk

; =============== S U B R O U T I N E =======================================


SHARE_VIOLATION proc near               ; ...
                push    ds
                push    es
                push    di
                mov     ds:READOP, 0
                les     di, ds:59Eh
                test    word ptr es:[di+5], 80h
                jz      short loc_F5BE
                or      ah, 80h
                lds     si, es:[di+7]
                mov     di, ax
                call    CHARHARD
                jmp     short loc_F5EE
; ---------------------------------------------------------------------------

loc_F5BE:                               ; ...
                mov     byte ptr ds:34Bh, 18h
                les     bp, ds:58Ah
                mov     di, 1
                mov     cx, di
                cmp     word ptr es:[bp+0Fh], 0
                jz      short loc_F5DF
                mov     word ptr ds:607h, 0
                mov     dx, es:[bp+11h]
                jmp     short loc_F5EB
; ---------------------------------------------------------------------------

loc_F5DF:                               ; ...
                mov     dx, es:[bp+2Bh]
                mov     ds:607h, dx
                mov     dx, es:[bp+29h]

loc_F5EB:                               ; ...
                call    HARDERR

loc_F5EE:                               ; ...
                pop     di
                pop     es
                pop     ds
                cmp     al, 1
                jnz     short loc_F5F6
                retn
; ---------------------------------------------------------------------------

loc_F5F6:                               ; ...
                stc
                retn
SHARE_VIOLATION endp


; =============== S U B R O U T I N E =======================================


check_longname  proc near               ; ...
                push    ds
                push    ss
                pop     ds
                test    ah, ah
                jz      short chk_ln_retn
                cmp     ah, 0E5h
                jz      short chk_ln_2
                and     al, 0Fh
                cmp     al, 0Fh
                jnz     short chk_ln_retn
                cmp     ds:LNE_COUNT, 0 ; Is it the 1st LNE (for file) ?
                jnz     short chk_ln_1  ; no
                mov     cx, ds:DIRSTART ; yes, save directory entry position
                mov     word ptr ds:LNE_DIRSTART, cx
                mov     cx, ds:DIRSTART_HW
                mov     word ptr ds:LNE_DIRSTART+2, cx
                mov     cx, word ptr ds:DIRSEC
                mov     word ptr ds:LNE_DIRSECTOR, cx
                mov     cx, word ptr ds:DIRSEC+2
                mov     word ptr ds:LNE_DIRSECTOR+2, cx
                mov     cx, ds:CLUSNUM
                mov     word ptr ds:LNE_CLUSTER, cx
                mov     cx, ds:CLUSNUM_HW
                mov     word ptr ds:LNE_CLUSTER+2, cx
                mov     cx, ds:LASTENT
                mov     ds:LNE_LASTENT, cx

chk_ln_1:                               ; ...
                inc     ds:LNE_COUNT
                sub     al, al
                pop     ds
                retn
; ---------------------------------------------------------------------------

chk_ln_2:                               ; ...
                cmp     ds:LNE_COUNT, 0
                jz      short chk_ln_retn
                inc     ds:LNE_COUNT

chk_ln_retn:                            ; ...
                or      al, 0FFh        ; -1 ; not a long name entry
                pop     ds
                retn
check_longname  endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR delete_longname_entry

loc_F660:                               ; ...
                clc
                retn
; END OF FUNCTION CHUNK FOR delete_longname_entry

; =============== S U B R O U T I N E =======================================


delete_longname_entry proc near         ; ...

; FUNCTION CHUNK AT AED0 SIZE 00000002 BYTES

                mov     cx, [di]        ; LONG_NAME_ENTRY ; LNE_COUNT
                jcxz    short loc_F660
                add     cx, [di+0Eh]    ; LNE_LASTENT
                dec     cx
                cmp     cx, [di+10h]    ; LNE_ENTLAST
                ja      dlne_error
                mov     ax, [di+2]      ; LNE_DIRSTART
                xchg    ax, ds:DIRSTART
                mov     [di+2], ax
                mov     ax, [di+4]      ; LNE_DIRSTART+2
                xchg    ax, ds:DIRSTART_HW
                mov     [di+4], ax
                mov     ax, [di+6]      ; LNE_DIRSECTOR
                xchg    ax, word ptr ds:DIRSEC
                mov     [di+6], ax
                mov     ax, [di+8]      ; LNE_DIRSECTOR+2
                xchg    ax, word ptr ds:DIRSEC+2
                mov     [di+8], ax
                mov     ax, [di+0Ah]    ; LNE_CLUSTER
                xchg    ax, ds:CLUSNUM
                mov     [di+0Ah], ax
                mov     ax, [di+0Ch]    ; LNE_CLUSTER+2
                xchg    ax, ds:CLUSNUM_HW
                mov     [di+0Ch], ax
                mov     ax, [di+0Eh]    ; LNE_LASTENT
                xchg    ax, ds:LASTENT
                mov     [di+0Eh], ax
                mov     ax, [di+10h]    ; LNE_ENTLAST
                xchg    ax, ds:ENTLAST
                mov     [di+10h], ax
                push    bp
                push    es

dlne_1:                                 ; ...
                les     bp, ds:THISDPB
                push    di
                call    GETENTRY
                pop     di
                jb      short dlne_7    ; error
                les     bp, ds:CURBUF
                xor     ah, ah

dlne_2:                                 ; ...
                mov     al, es:[bx]
                or      al, al
                jz      short dlne_7
                cmp     al, 0E5h
                jz      short dlne_4
                mov     al, 0Fh
                and     al, es:[bx+0Bh]
                cmp     al, 0Fh
                jz      short dlne_3
                cmp     word ptr [di], 1
                jnz     short dlne_8

dlne_3:                                 ; ...
                mov     byte ptr es:[bx], 0E5h
                or      ah, 40h

dlne_4:                                 ; ...
                inc     ds:LASTENT
                dec     word ptr [di]
                jz      short dlne_5
                add     bx, 32
                cmp     bx, dx
                jb      short dlne_2

dlne_5:                                 ; ...
                test    byte ptr es:[bp+5], 40h
                jnz     short dlne_6
                test    ah, ah
                jz      short dlne_1
                call    inc_DirtyBufferCount

dlne_6:                                 ; ...
                or      byte ptr es:[bp+5], 44h
                les     bp, ds:THISDPB
                mov     al, es:[bp+0]
                push    di
                call    FLUSHBUF
                pop     di
                jb      short dlne_7
                cmp     word ptr [di], 0
                jnz     short dlne_1

dlne_7:                                 ; ...
                pop     es
                pop     bp
                mov     ax, [di+2]
                mov     ds:DIRSTART, ax
                mov     ax, [di+4]
                mov     ds:DIRSTART_HW, ax
                mov     ax, [di+6]
                mov     word ptr ds:DIRSEC, ax
                mov     ax, [di+8]
                mov     word ptr ds:DIRSEC+2, ax
                mov     ax, [di+0Ah]
                mov     ds:CLUSNUM, ax
                mov     ax, [di+0Ch]
                mov     ds:CLUSNUM_HW, ax
                mov     ax, [di+0Eh]
                mov     ds:LASTENT, ax
                mov     ax, [di+10h]
                mov     ds:ENTLAST, ax
                mov     word ptr [di], 0
                retn
; ---------------------------------------------------------------------------

dlne_8:                                 ; ...
                stc
                jmp     short dlne_7    ; restore dir entry operation parameters
; ---------------------------------------------------------------------------

dlne_error:                             ; ...
                stc
                retn
delete_longname_entry endp


; =============== S U B R O U T I N E =======================================


move_LNE_parms  proc near               ; ...
                mov     cx, ds:LNE_COUNT
                mov     [di], cx
                jcxz    short mlnep_ret
                push    si
                push    es
                mov     cx, ds
                mov     es, cx
                mov     si, offset LNE_COUNT ; LONG_NAME_ENTRY offset
                mov     cx, 9
                cld
                rep movsw
                pop     es
                pop     si

mlnep_ret:                              ; ...
                retn
move_LNE_parms  endp

; ---------------------------------------------------------------------------

_int21_71h:                             ; ...
                mov     ax, 7100h

loc_F784:                               ; ...
                jmp     From_GetSet
; ---------------------------------------------------------------------------

_int21_72h:                             ; ...
                mov     ax, 7200h
                jmp     short loc_F784

; =============== S U B R O U T I N E =======================================


ExecReady       proc near               ; ...
                call    _sub_unknown_
                mov     si, dx
                test    word ptr [si+2], 1
                jz      short loc_F7AE
                mov     ax, [si+8]
                add     ax, 10h
                mov     es, ax
                mov     cx, [si+0Ah]
                mov     ax, [si+0Ch]
                call    ss:FixExePatch
                call    Rational386Patch

loc_F7AE:                               ; ...
                test    word ptr [si+2], 2
                jnz     short loc_F7CD
                push    ds
                push    si
                lds     si, [si+4]
                call    Scan_Execname1
                call    Scan_Special_Entries
                pop     si
                pop     ds
                mov     es, word ptr [si+8]
                mov     ax, ss:0EBBh
                mov     es:40h, ax

loc_F7CD:                               ; ...
                call    _sub_unknown2_
                xor     ax, ax
                retn
ExecReady       endp

; ---------------------------------------------------------------------------
                cli
                in      al, 21h         ; Interrupt controller, 8259A.
                pusha
                xor     ax, ax
                out     43h, al         ; Timer 8253-5 (AT: 8254.2).
                mov     dx, ds:0EB0h
                out     37h, al
                xor     ax, ax
                out     0F2h, al
                mov     eax, cr0
                mov     cr0, eax
                jmp     far ptr 0F51h:5066h
; ---------------------------------------------------------------------------
                and     al, al
                mov     ss, bx
                pop     cx
                pop     eax
                xchg    ax, bx
                pop     ax
                mov     cx, sp
                mov     ax, 0DE0Ch
                int     67h             ;  - LIM EMS Program Interface - SWITCH TO PROTECTED MODE
                                        ; ESI = linear address in first megabyte of values for system registers
                                        ; Return: interrupts disabled
                                        ; GDTR, IDTR, LDTR, TR loaded
                mov     sp, cx
                jmp     bx
; ---------------------------------------------------------------------------
                xchg    ax, bx
                pop     ax
                mov     cx, sp
                mov     cs:dword_4790, eax
                mov     cs:dword_4790, esi
                mov     sp, cx
                mov     eax, cs:dword_4790
                mov     esi, cs:dword_4790
                jmp     bx
; ---------------------------------------------------------------------------
                cli
                push    dx
                push    cx
                mov     ax, 0DE0Ch
                call    large [fword ptr es:5A59h]
                pop     bx
                cli
                push    eax
                push    ebx
                push    ecx
                push    edx
                pop     edx
                pop     ecx
                pop     ebx
                pop     eax
                pop     bx
                pusha
                push    es
                push    ds
                mov     ax, 0
                mov     ds, ax
                assume ds:BIOSDATA
                pop     ds
                assume ds:nothing
                pop     es
                popa
                pushad
                push    es
                push    ds
                pop     ds
                pop     es
                popad
                retn
; ---------------------------------------------------------------------------
                push    bp
                mov     al, 3
                add     [bx+si-50h], bl
                add     al, 0
                and     [bx+si], al
                db      67h
                mov     al, 4
                add     [bp+di-50h], ch
                or      [bx+si], ax
                add     byte ptr [bx+si], 92h
                mov     al, 3
                add     [di+7B0h], dl
                add     [bx+si-4F00h], al
                mov     al, 4
                add     [bx+di+3B0h], bh
; ---------------------------------------------------------------------------
                db    0
                db  80h
                db    0
; ---------------------------------------------------------------------------

Rational386Patch:                       ; ...
                cmp     word ptr es:0, 395
                jnb     short locret_F8A8
                cmp     word ptr es:0Ch, 20h ; ' '
                jnz     short locret_F8A8
                push    ax
                mov     ax, 18h
                cmp     es:18h, ax
                jnz     short loc_F8A7
                cmp     es:1Ch, ax
                jnz     short loc_F8A7
                cmp     es:24h, ax
                jz      short rp3Maybe

loc_F8A7:                               ; ...
                pop     ax

locret_F8A8:                            ; ...
                retn
; ---------------------------------------------------------------------------

rp3Maybe:                               ; ...
                cld
                push    bx
                push    cx
                push    dx
                push    si
                push    di
                push    es
                push    ds
                push    bp
                sub     sp, 6
                mov     bp, sp
                push    cs
                pop     ds
                assume ds:BIOSCODE
                mov     ax, es:0
                mov     [bp+0], ax
                call    sub_FA63
                jnz     short loc_F8E6
                mov     cx, 4500h
                mov     [bp+2], cx
                mov     es, word ptr es:20h
                mov     si, 0B043h
                mov     dx, 0Ah
                call    sub_FA4B
                jz      short loc_F8E9
                mov     si, 0B04Dh
                mov     dx, 8
                call    sub_FA4B
                jz      short loc_F8E9

loc_F8E6:                               ; ...
                jmp     loc_F9E9
; ---------------------------------------------------------------------------

loc_F8E9:                               ; ...
                mov     [bp+4], di
                cmp     word ptr [bp+0], 17Dh
                jnb     short loc_F93C
                mov     bx, 0B0C5h
                call    sub_F9F6
                jb      short loc_F93C
                push    di
                mov     di, si
                mov     dx, 3
                cmp     byte ptr es:[di-1], 51h ; 'Q'
                jnz     short loc_F90A
                dec     di
                inc     dx

loc_F90A:                               ; ...
                mov     si, 0B05Ch
                mov     cx, 6
                call    sub_FA1F
                pop     di
                cmp     byte ptr es:[di-1], 59h ; 'Y'
                jnz     short loc_F920
                mov     byte ptr es:[di-1], 90h

loc_F920:                               ; ...
                mov     ax, [bp+4]
                mov     es:[di+4], ax
                push    di
                mov     si, 0B062h
                mov     cx, 5
                call    sub_FA33
                pop     bx
                add     bx, 8
                call    sub_FA3F
                mov     [bp+4], di

loc_F93C:                               ; ...
                mov     bx, 0B0CFh
                call    sub_F9F6
                jb      short loc_F986
                push    word ptr [bp+4]
                push    di
                mov     di, si
                mov     dx, 4
                mov     si, 0B074h
                mov     cx, 0Fh
                call    sub_FA1F
                pop     di
                add     di, 5
                mov     bx, [bp+4]
                push    bx
                call    sub_FA3F
                mov     si, 0B083h
                mov     cx, 0Fh
                call    sub_FA33
                pop     di
                pop     si
                mov     ax, [bp+4]
                mov     es:[si+7], ax
                mov     es:[di+5], ax
                add     ax, 4
                mov     es:[si+0Dh], ax
                mov     es:[di+0Bh], ax
                add     word ptr [bp+4], 8

loc_F986:                               ; ...
                mov     bx, 0B0D9h
                call    sub_F9F6
                jb      short loc_F9BB
                add     di, 9
                push    si
                mov     si, 0B09Ch
                mov     dx, 3
                call    sub_FA4E
                pop     si
                jnz     short loc_F9BB
                push    di
                mov     di, si
                mov     dx, 3
                mov     si, 0B09Fh
                mov     cx, 9
                call    sub_FA1F
                pop     di
                mov     dx, 3
                mov     si, 0B0A8h
                mov     cx, 9
                call    sub_FA1F

loc_F9BB:                               ; ...
                cmp     word ptr [bp+0], 168h
                jbe     short loc_F9E9
                mov     bx, 0B0E3h
                call    sub_F9F6
                jb      short loc_F9E9
                push    di
                mov     di, si
                mov     dx, 3
                mov     si, 0B0BCh
                mov     cx, 4
                call    sub_FA1F
                pop     di
                mov     bx, [bp+4]
                call    sub_FA3F
                mov     si, 0B0C0h
                mov     cx, 5
                call    sub_FA33

loc_F9E9:                               ; ...
                add     sp, 6
                pop     bp
                pop     ds
                assume ds:nothing
                pop     es
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                retn

; =============== S U B R O U T I N E =======================================


sub_F9F6        proc near               ; ...
                mov     cx, [bp+2]
                mov     si, [bx]
                mov     dx, [bx+2]
                call    sub_FA4B
                jnz     short loc_FA1D
                push    di
                mov     si, [bx+4]
                mov     dx, [bx+6]
                call    sub_FA4E
                pop     si
                jnz     short loc_FA1D
                mov     ax, di
                sub     ax, si
                jb      short loc_FA1D
                cmp     ax, [bx+8]
                ja      short loc_FA1D
                clc
                retn
; ---------------------------------------------------------------------------

loc_FA1D:                               ; ...
                stc
                retn
sub_F9F6        endp


; =============== S U B R O U T I N E =======================================


sub_FA1F        proc near               ; ...
                push    di
                mov     bx, [bp+4]
                call    sub_FA3F
                call    sub_FA33
                pop     bx
                add     bx, dx
                call    sub_FA3F
                mov     [bp+4], di
                retn
sub_FA1F        endp


; =============== S U B R O U T I N E =======================================


sub_FA33        proc near               ; ...
                push    cx
                mov     di, [bp+4]
                cld
                rep movsb
                pop     cx
                mov     [bp+4], di
                retn
sub_FA33        endp


; =============== S U B R O U T I N E =======================================


sub_FA3F        proc near               ; ...
                mov     al, 0E9h
                stosb
                mov     ax, bx
                sub     ax, di
                sub     ax, 2
                stosw
                retn
sub_FA3F        endp


; =============== S U B R O U T I N E =======================================


sub_FA4B        proc near               ; ...
                mov     di, 200h
sub_FA4B        endp


; =============== S U B R O U T I N E =======================================


sub_FA4E        proc near               ; ...
                push    cx
                sub     cx, dx
                inc     cx

loc_FA52:                               ; ...
                push    si
                push    di
                push    cx
                mov     cx, dx
                repe cmpsb
                pop     cx
                pop     di
                pop     si
                jz      short loc_FA61
                inc     di
                loop    loc_FA52

loc_FA61:                               ; ...
                pop     cx
                retn
sub_FA4E        endp


; =============== S U B R O U T I N E =======================================


sub_FA63        proc near               ; ...
                mov     si, es:2Ah
                mov     bl, 0Ah
                add     si, 3
                call    sub_FA82
                jnz     short locret_FA81
                call    sub_FA82
                jnz     short locret_FA81
                cmp     byte ptr es:[si], 2Eh ; '.'
                jnz     short locret_FA81
                dec     si
                call    sub_FA82

locret_FA81:                            ; ...
                retn
sub_FA63        endp


; =============== S U B R O U T I N E =======================================


sub_FA82        proc near               ; ...
                div     bl
                add     ah, 30h ; '0'
                dec     si
                cmp     es:[si+1], ah
                mov     ah, 0
                retn
sub_FA82        endp

; ---------------------------------------------------------------------------
MsDosVersion8CopyR db 0Dh,0Ah
                db 'MS-DOS version 8.00',0Dh,0Ah
                db 'Copyright 1981,82,83,84,88 Microsoft Corp.',0Dh,0Ah
                db '$MS-DOS Version 8 (C)Copyright 1981-1999 Microsoft Corp Licensed '
                db 'Material - Property of Microsoft All rights reserved '
; ---------------------------------------------------------------------------

Idle:                                   ; ...
                cmp     ss:FSHARING, 0
                jnz     short Idle_retn
                push    cx
                mov     cx, ss:RetryLoop
                jcxz    short Idle3

Idle1:                                  ; ...
                push    cx
                xor     cx, cx

Idle2:                                  ; ...
                loop    Idle2
                pop     cx
                loop    Idle1

Idle3:                                  ; ...
                pop     cx

Idle_retn:                              ; ...
                retn

; =============== S U B R O U T I N E =======================================


DirFromSFT      proc near               ; ...
                mov     ds:EXTERR_LOCUS, 2
                push    es
                push    di
                mov     dx, es:[di+1Dh] ; [ES:DI+SF_ENTRY.sf_dirsec+2]
                mov     ds:HIGH_SECTOR, dx
                mov     dx, es:[di+1Bh] ; [ES:DI+SF_ENTRY.sf_dirsec]
                push    ds:HIGH_SECTOR
                push    dx
                call    FATREAD_SFT
                pop     dx
                pop     ds:HIGH_SECTOR
                jb      short PopDone
                xor     al, al
                mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                call    GETBUFFR
                jb      short PopDone
                pop     si
                pop     ds
                les     di, ss:CURBUF
                or      byte ptr es:[di+5], 4 ; [ES:DI+BUFFINFO.buf_flags],
                                        ; buf_isDIR
                mov     bx, di
                lea     di, [di+18h]    ; [DI+BUFINSIZ]
                mov     al, 32
                mul     byte ptr [si+1Fh] ; [SI+SF_ENTRY.sf_dirpos]
                add     di, ax
                retn
; ---------------------------------------------------------------------------

PopDone:                                ; ...
                pop     di
                pop     es
                retn
DirFromSFT      endp


; =============== S U B R O U T I N E =======================================


DIRREAD         proc near               ; ...
                xor     dx, dx
                cmp     ds:DIRSTART_HW, dx
                jnz     short SubDir
                cmp     ds:DIRSTART, dx
                jnz     short SubDir
                xchg    ax, dx
                jmp     short DoRead
; ---------------------------------------------------------------------------

SubDir:                                 ; ...
                mov     dl, al
                and     dl, es:[bp+4]   ; [ES:BP+DPB.CLUSTER_MASK]
                mov     cl, es:[bp+5]   ; [ES:BP+DPB.CLUSTER_SHIFT]
                shr     ax, cl

DoRead:                                 ; ...
                mov     ds:SECCLUSPOS, dl
                mov     cx, ax
                mov     ah, dl
                mov     dx, word ptr ds:DIRSEC+2
                mov     ds:HIGH_SECTOR, dx
                mov     dx, word ptr ds:DIRSEC
                add     dl, ah
                adc     dh, 0
                adc     ds:HIGH_SECTOR, 0
                mov     bx, ds:CLUSNUM_HW
                mov     ds:NXTCLUSNUM_HW, bx
                mov     ds:CLUSTNUM_HW, bx
                mov     bx, ds:CLUSNUM
                mov     ds:NXTCLUSNUM, bx
                jcxz    short FIRSTCLUSTER

SKPCLLP:                                ; ...
                call    UNPACK
                jb      short dirread_retn
                push    ds:CLUSTNUM_HW
                pop     ds:CLUSTERS_HW
                push    ds:CCONTENT_HW
                pop     ds:CLUSTNUM_HW
                xchg    bx, di
                call    IsEOF
                jnb     short HAVESKIPPED
                dec     cx
                jnz     short SKPCLLP

HAVESKIPPED:                            ; ...
                mov     ds:NXTCLUSNUM, bx
                push    ds:CLUSTNUM_HW
                pop     ds:NXTCLUSNUM_HW
                mov     dx, di
                push    ds:CLUSTERS_HW
                pop     ds:CLUSTNUM_HW
                mov     bl, ah
                call    FIGREC

FIRSTCLUSTER:                           ; ...
                mov     ds:ALLOWED, 18h ; Allowed_RETRY+Allowed_FAIL
                xor     al, al
                call    GETBUFFR
                jb      short dirread_retn

SET_BUF_AS_DIR:                         ; ...
                push    ds
                push    si
                lds     si, ds:CURBUF
                or      byte ptr [si+5], 4 ; [SI+BUFFINFO.buf_flags],buf_isDIR
                pop     si
                pop     ds

dirread_retn:                           ; ...
                retn
DIRREAD         endp


; =============== S U B R O U T I N E =======================================


FATSECRD        proc near               ; ...

; FUNCTION CHUNK AT B545 SIZE 00000010 BYTES

                mov     ss:ALLOWED, 18h ; Allowed_RETRY+Allowed_FAIL
                mov     di, cx
                mov     cx, ss:HIGH_SECTOR
                shl     ecx, 16
                mov     cx, dx
                mov     edx, ecx
                movzx   cx, byte ptr es:[bp+8] ; [ES:BP+DPB.FAT_COUNT]
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jnz     short FATSECRD_cont ; not FAT32
                test    word ptr es:[bp+23h], 80h ; [es:bp+DPB.EXT_FLAGS]
                jz      short FATSECRD_cont
                mov     cx, 1           ; only one FAT is active

FATSECRD_cont:                          ; ...
                push    edx

NXTFAT:                                 ; ...
                push    cx
                push    edx
                mov     eax, edx
                shr     eax, 16
                mov     ss:HIGH_SECTOR, ax
                mov     cx, di
                call    DSKREAD
                pop     edx
                pop     cx
                jz      short loc_FCD5
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jz      short NXTFAT2
                add     dx, es:[bp+0Fh] ; [ES:BP+DPB.FAT_SIZE]
                jmp     short NXTFAT3
; ---------------------------------------------------------------------------

NXTFAT2:                                ; ...
                add     edx, es:[bp+31h] ; [es:bp+DPB.FAT32_SIZE]

NXTFAT3:                                ; ...
                loop    NXTFAT
                pop     edx
                mov     ecx, edx
                shr     ecx, 16
                mov     ss:HIGH_SECTOR, cx
                mov     cx, di
FATSECRD        endp


; =============== S U B R O U T I N E =======================================


DREAD           proc near               ; ...
                call    DSKREAD
                jnz     short loc_FCC1
                retn
; ---------------------------------------------------------------------------

loc_FCC1:                               ; ...
                mov     ss:READOP, 0    ; Read
                call    HARDERRRW
                cmp     al, 1           ; RETRY
                jz      short DREAD
                cmp     al, 3           ; FAIL
                clc
                jnz     short locret_FCD4 ; IGNORE
                stc

locret_FCD4:                            ; ...
                retn
DREAD           endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR FATSECRD

loc_FCD5:                               ; ...
                pop     edx
                mov     ecx, edx
                shr     ecx, 16
                mov     ss:HIGH_SECTOR, cx
                clc
                retn
; END OF FUNCTION CHUNK FOR FATSECRD

; =============== S U B R O U T I N E =======================================


CHECK_WRITE_LOCK proc near              ; ...
                test    byte ptr es:[di+4], 8 ; [ES:DI+SF_ENTRY.sf_attr],
                                        ; attr_volume_id
                jz      short WRITE_OK
                call    SET_ACC_ERR_DS

WRITE_OK:                               ; ...
                retn
CHECK_WRITE_LOCK endp


; =============== S U B R O U T I N E =======================================


CHECK_READ_LOCK proc near               ; ...
                test    byte ptr es:[di+4], 8 ; [ES:DI+SF_ENTRY.sf_attr],
                                        ; attr_volume_id
                jz      short READLOCK_OK
                call    SET_ACC_ERR

READLOCK_OK:                            ; ...
                retn
CHECK_READ_LOCK endp


; =============== S U B R O U T I N E =======================================


DSKREAD         proc near               ; ...
                push    cx              ; DS:BX = Transfer address
                                        ; [HIGH_SECTOR]:DX = Disk sector address
                                        ; CX = Sector count
                                        ; ES:BP = DPB
                mov     ah, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
                mov     al, es:[bp+1]   ; [ES:BP+DPB.UNIT]
                push    bx
                push    es
                call    SETREAD
                jmp     short DODSKOP
DSKREAD         endp


; =============== S U B R O U T I N E =======================================


DWRITE          proc near               ; ...
                call    DSKWRITE
                jz      short NO_CAR2
                mov     ss:READOP, 1    ; Write
                call    HARDERRRW
                cmp     al, 1           ; Retry
                jz      short DWRITE
                cmp     al, 3           ; FAIL
                clc
                jnz     short NO_CAR2   ; Ignore
                stc

NO_CAR2:                                ; ...
                retn
DWRITE          endp


; =============== S U B R O U T I N E =======================================


DSKWRITE        proc near               ; ...
                push    cx
                mov     ah, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
                mov     al, es:[bp+1]   ; [ES:BP+DPB.UNIT]
                push    bx
                push    es
                call    SETWRITE

DODSKOP:                                ; ...
                mov     cx, ds
                pop     ds
                push    ds
                lds     si, ds:[bp+13h] ; [ds:BP+DPB.DRIVER_ADDR]
                call    DEVIOCALL2
                mov     ds, cx
                pop     es
                pop     bx
                mov     cx, ss:CALLBPB  ; [SS:CALLSCNT]
                pop     di
                sub     cx, di
                neg     cx
                mov     ax, ss:DEVCALL_REQSTAT
                test    ax, 8000h
                retn
DSKWRITE        endp


; =============== S U B R O U T I N E =======================================


BREAKDOWN       proc near               ; ...
                mov     ax, ds:BYTSECPOS
                mov     bx, cx
                or      ax, ax
                jz      short SAVFIR
                sub     ax, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                neg     ax
                sub     bx, ax
                jnb     short SAVFIR
                add     ax, bx
                xor     bx, bx

SAVFIR:                                 ; ...
                mov     ds:BYTCNT1, ax
                mov     ax, bx
                xor     dx, dx
                div     word ptr es:[bp+2]
                mov     ds:SECCNT, ax
                mov     ds:BYTCNT2, dx
                retn
BREAKDOWN       endp


; =============== S U B R O U T I N E =======================================


DISKREAD        proc near               ; ...
                mov     eax, es:[di+11h] ; [ES:DI+SF_ENTRY.sf_size]
                sub     eax, ds:BYTPOS
                jb      short RDERR     ; Read starts past EOF
                test    eax, 0FFFF0000h
                jnz     short ENUF      ; More than 64k to EOF
                or      ax, ax
                jz      short RDERR
                cmp     ax, cx
                jnb     short ENUF
                mov     cx, ax

ENUF:                                   ; ...
                call    CHECK_READ_LOCK
                jnb     short _READ_OK  ; There are no locks
                retn
; ---------------------------------------------------------------------------

_READ_OK:                               ; ...
                les     bp, ds:THISDPB
                call    BREAKDOWN
                mov     cx, ds:CLUSNUM_HW
                shl     ecx, 16
                mov     cx, ds:CLUSNUM
                call    FNDCLUS
                jb      short SET_ACC_ERR_DS
                jecxz   SKIPERR

RDERR:                                  ; ...
                mov     ah, 0Eh         ; read/data/fail
                jmp     WRTERR22
; ---------------------------------------------------------------------------

CANOT_READ:                             ; ...
                pop     cx
                pop     ebx

SET_ACC_ERR_DS:                         ; ...
                push    ss
                pop     ds

SET_ACC_ERR:                            ; ...
                xor     cx, cx
                mov     ax, 5           ; error_access_denied
                stc
                retn
; ---------------------------------------------------------------------------

SKIPERR:                                ; ...
                mov     ds:LASTPOS, dx
                shr     edx, 16
                mov     ds:LASTPOS_HW, dx
                mov     ds:CLUSNUM, bx
                shr     ebx, 16
                mov     ds:CLUSNUM_HW, bx
                cmp     ds:BYTCNT1, cx
                jz      short RDMID
                call    BUFRD
                jb      short SET_ACC_ERR_DS

RDMID:                                  ; ...
                cmp     ds:SECCNT, 0
                jz      short RDLAST
                call    NEXTSEC
                jb      SETSFT
                mov     ds:TRANS, 1     ; A transfer is taking place
                mov     dl, ds:SECCLUSPOS ; (dx/DL = Extent start) ((dh = ?))
                mov     cx, ds:SECCNT
                mov     bx, ds:CLUSNUM_HW
                mov     ds:CLUSTNUM_HW, bx
                mov     bx, ds:CLUSNUM

RDLP:                                   ; ...
                call    OPTIMIZE
                jb      short SET_ACC_ERR_DS
                push    ds:CCONTENT_HW  ; (Next physical cluster, hw)
                push    di              ; DI = Next physical cluster.
                push    ax              ; AX = # of sectors remaining.
                push    bx              ; [DMAADD+2]:BX = Transfer address.
                mov     ds:ALLOWED, 38h ; Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
                mov     ds, word ptr ds:DMAADD+2
                push    dx              ; [HIGH_SECTOR]:DX = phys. sector #.
                push    cx              ; CX = # of contiguous sectors to read.
                call    SET_RQ_SC_PARMS
                call    DREAD
                pop     cx
                pop     dx
                pop     ss:TEMP_VAR
                jb      short CANOT_READ
                mov     ss:TEMP_VAR_2, ds
                call    DskRdBufScan
                push    ss
                pop     ds
                pop     cx              ; # of sectors remaining.
                pop     bx              ; Next physical cluster.
                pop     ds:CLUSTNUM_HW  ; (Next physical cluster, hw)
                jcxz    short RDLAST
                call    IsEOF           ; test for eof on fat size
                jnb     short SETSFT
                mov     dl, 0
                add     ds:LASTPOS, 1   ; We'll be using next cluster
                adc     ds:LASTPOS_HW, 0
                jmp     short RDLP
; ---------------------------------------------------------------------------

RDLAST:                                 ; ...
                mov     ax, ds:BYTCNT2
                or      ax, ax
                jz      short SETSFT
                mov     ds:BYTCNT1, ax
                call    NEXTSEC
                jb      short SETSFT
                mov     ds:BYTSECPOS, 0
                call    BUFRD
                jnb     short SETSFT
                jmp     SET_ACC_ERR_DS
DISKREAD        endp


; =============== S U B R O U T I N E =======================================


SETSFT          proc near               ; ...
                les     di, ds:THISSFT

SETCLUS:                                ; ...
                mov     cx, ds:NEXTADD
                sub     cx, word ptr ds:DMAADD ; Number of bytes transfered
                test    byte ptr es:[di+5], 80h ; [ES:DI+SF_ENTRY.sf_flags],
                                        ; devid_device
                jnz     short ADDREC    ; don't set clusters if device
                mov     ax, ds:CLUSNUM_HW
                mov     es:[di+37h], ax ; [ES:DI+SF_ENTRY.sf_lstclus+2]
                mov     ax, ds:CLUSNUM
                mov     es:[di+35h], ax ; [ES:DI+SF_ENTRY.sf_lstclus]
                mov     ax, ds:LASTPOS_HW
                mov     es:[di+0Bh], ax ; [ES:DI+SF_ENTRY.sf_cluspos_hw] ; PCDOS 7.1 & Win ME
                                        ; [ES:DI+SF_ENTRY.sf_firclus] ; MSDOS 5.0-6.22
                mov     ax, ds:LASTPOS
                mov     es:[di+19h], ax ; [ES:DI+SF_ENTRY.sf_cluspos]
SETSFT          endp


; =============== S U B R O U T I N E =======================================


ADDREC          proc near               ; ...
                add     es:[di+15h], cx ; [ES:DI+SF_ENTRY.sf_position]
                                        ; Update current position
                adc     word ptr es:[di+17h], 0 ; [ES:DI+SF_ENTRY.sf_position+2]
                clc
                retn
ADDREC          endp


; =============== S U B R O U T I N E =======================================


DskRdBufScan    proc near               ; ...
                cmp     ss:DirtyBufferCount, 0
                jz      short bufx
                mov     bx, ss:HIGH_SECTOR
                mov     si, bx
                add     cx, dx
                adc     si, 0
                call    GETCURHEAD
                mov     ax, [di+2]
                mov     cs:FIRST_BUFF_ADDR, ax
                mov     al, es:[bp+0]

bufq:                                   ; ...
                cmp     al, [di+4]
                jnz     short bufq1
                cmp     bx, [di+8]
                jnz     short bufq01
                cmp     dx, [di+6]

bufq01:                                 ; ...
                ja      short bufq1
                cmp     si, [di+8]
                jnz     short bufq02
                cmp     cx, [di+6]

bufq02:                                 ; ...
                ja      short bufq2

bufq1:                                  ; ...
                cmp     di, cs:FIRST_BUFF_ADDR
                mov     di, [di]
                jnz     short bufq

bufx:                                   ; ...
                retn
; ---------------------------------------------------------------------------

bufq2:                                  ; ...
                push    ax
                test    byte ptr [di+5], 40h
                jz      short bufq3
                push    cx
                push    dx
                push    si
                push    di
                push    es
                mov     ax, dx
                sub     ax, [di+6]
                neg     ax
                lea     si, [di+18h]
                mov     cx, es:[bp+2]
                mul     cx
                mov     di, ss:TEMP_VAR
                add     di, ax
                mov     es, ss:TEMP_VAR_2
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     es
                pop     di
                pop     si
                pop     dx
                pop     cx

bufq3:                                  ; ...
                mov     ax, di
                call    SCANPLACE
                cmp     ax, cs:FIRST_BUFF_ADDR
                pop     ax
                jnz     short bufq
                jmp     short bufx
DskRdBufScan    endp


; =============== S U B R O U T I N E =======================================


DISKWRITE       proc near               ; ...
                call    CHECK_WRITE_LOCK
                jnb     short _WRITE_OK
                retn
; ---------------------------------------------------------------------------

WRTEOFJ:                                ; ...
                mov     dx, word ptr ds:BYTPOS+2
                jmp     WRTEOF
; ---------------------------------------------------------------------------

_WRITE_OK:                              ; ...
                and     word ptr es:[di+5], 0BFBFh ; [ES:DI+SF_ENTRY.sf_flags],
                                        ; ~(sf_close_nodate|devid_file_clean)
                mov     ax, es:[di+11h] ; [ES:DI+SF_ENTRY.sf_size]
                mov     ds:TEMP_VAR, ax
                mov     ax, es:[di+13h] ; [ES:DI+SF_ENTRY.sf_size+2]
                mov     ds:TEMP_VAR_2, ax
                push    word ptr es:[di+2]
                les     bp, ds:THISDPB
                call    BREAKDOWN
                pop     dx
                mov     eax, ds:BYTPOS
                jcxz    short WRTEOFJ   ; Make the file length = sf_position
                movzx   ecx, cx
                add     eax, ecx        ; EAX = last byte to write + 1.
                jb      SET_ACC_ERRW
                test    dx, 1000h       ; [es:di+SF_ENTRY.sf_mode],1000h
                jnz     short CALCLUS2  ; > 2GB file size (up to 4GB) allowed
                cmp     eax, 7FFFFFFFh  ; check for 2GB file size limit
                ja      SET_ACC_ERRW    ; error,
                                        ; file position/pointer overs 2GB limit!

CALCLUS2:                               ; ...
                movzx   ebx, word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                xor     edx, edx
                div     ebx
                mov     ecx, eax
                shr     ecx, 16
                mov     si, ax
                mov     ds:HIGH_SECTOR, cx
                or      dx, dx
                jnz     short CALCLUS
                dec     eax             ; EAX must be zero base indexed

CALCLUS:                                ; ...
                mov     cl, es:[bp+5]   ; [es:bp+DPB.CLUSTER_SHIFT]
                shr     eax, cl
                push    eax             ; Last cluster to write
                push    dx              ; # of bytes in last sector to write
                mov     eax, dword ptr ds:TEMP_VAR ; EAX = current file size (in bytes).
                xor     edx, edx
                div     ebx
                mov     dword ptr ds:TEMP_VAR, eax
                mov     ds:VALSEC, eax  ; EDX:EAX/EBX = EAX + DX (rem.)
                mov     cx, ax
                mov     bx, si
                or      dx, dx
                jz      short NORND
                inc     ds:VALSEC       ; Round up if any remainder

NORND:                                  ; ...
                xor     ax, ax
                mov     word ptr ds:GROWCNT, ax
                mov     word ptr ds:GROWCNT+2, ax
                pop     ax              ; # of bytes in last sector to write
                mov     di, ds:HIGH_SECTOR
                cmp     di, ds:TEMP_VAR_2
                jb      NOGROW
                jz      short lowsec
                sub     bx, cx
                sbb     di, ds:TEMP_VAR_2
                jmp     short yesgrow
; ---------------------------------------------------------------------------

lowsec:                                 ; ...
                xor     di, di
                sub     bx, cx
                jb      short NOGROW
                jz      short TESTTAIL

yesgrow:                                ; ...
                mov     cx, dx
                xchg    ax, bx
                mul     word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                                        ; Bytes of full sector growth
                mov     ds:HIGH_SECTOR, dx
                mov     ds:TEMP_VAR_2, ax
                mov     ax, di
                mul     word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                add     ax, ds:HIGH_SECTOR
                mov     dx, ax
                mov     ax, ds:TEMP_VAR_2
                sub     ax, cx          ; Take off current "tail"
                sbb     dx, 0
                add     ax, bx          ; Add on new "tail"
                adc     dx, 0
                jmp     short SETGRW
; ---------------------------------------------------------------------------

HAVSTART:                               ; ...
                mov     ecx, eax
                call    SKPCLP
                or      ecx, ecx
                jz      DOWRT
                ror     ecx, 16
                mov     ds:CCOUNT_HW, cx
                ror     ecx, 16
                ror     ebx, 16
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 16
                call    ALLOCATE
                jnb     DOWRT

WRTERR:                                 ; ...
                mov     ah, 0Fh         ; write/data/fail/abort

WRTERR22:                               ; ...
                mov     al, ds:THISDRV
                xor     cx, cx          ; No bytes transferred
                les     di, ds:THISSFT
                clc
                retn
; ---------------------------------------------------------------------------

TESTTAIL:                               ; ...
                sub     ax, dx
                jbe     short NOGROW
                xor     dx, dx

SETGRW:                                 ; ...
                mov     word ptr ds:GROWCNT, ax
                mov     word ptr ds:GROWCNT+2, dx

NOGROW:                                 ; ...
                mov     cx, ds:CLUSNUM_HW
                shl     ecx, 16
                mov     cx, ds:CLUSNUM
                call    FNDCLUS
                pop     eax             ; Last cluster to write
                jb      SET_ACC_ERRW
                mov     ds:CLUSNUM, bx
                mov     ds:LASTPOS, dx
                ror     ebx, 16
                ror     edx, 16
                mov     ds:CLUSNUM_HW, bx
                mov     ds:LASTPOS_HW, dx
                ror     ebx, 16
                ror     edx, 16
                sub     eax, edx        ; Last cluster minus current cluster
                jz      short DOWRT
                or      ecx, ecx
                jz      HAVSTART        ; See if no more data
                push    ecx
                mov     ecx, eax
                ror     ecx, 16
                mov     ds:CCOUNT_HW, cx
                ror     ecx, 16
                ror     ebx, 16
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 16
                call    ALLOCATE
                pop     ecx
                pushf
                ror     ebx, 16
                mov     bx, ds:CLUSTNUM_HW
                ror     ebx, 16
                popf
                jb      WRTERR
                mov     dx, ds:LASTPOS_HW
                shl     edx, 16
                mov     dx, ds:LASTPOS
                inc     edx
                dec     ecx
                jz      short NOSKIP
                call    SKPCLP
                jb      SET_ACC_ERRW

NOSKIP:                                 ; ...
                mov     ds:CLUSNUM, bx
                mov     ds:LASTPOS, dx
                ror     ebx, 16
                ror     edx, 16
                mov     ds:CLUSNUM_HW, bx
                mov     ds:LASTPOS_HW, dx
                ror     ebx, 16
                ror     edx, 16

DOWRT:                                  ; ...
                cmp     ds:BYTCNT1, 0
                jz      short WRTMID
                mov     bx, ds:CLUSNUM_HW
                mov     ds:CLUSTNUM_HW, bx
                mov     bx, ds:CLUSNUM
                call    BUFWRT

dskwrt_1:
                jb      SET_ACC_ERRW

WRTMID:                                 ; ...
                mov     ax, ds:SECCNT
                or      ax, ax
                jz      WRTLAST
                add     word ptr ds:SECPOS, ax
                adc     word ptr ds:SECPOS+2, 0
                call    NEXTSEC
                jb      short SET_ACC_ERRW
                mov     ds:TRANS, 1     ; A transfer is taking place
                mov     dl, ds:SECCLUSPOS ; Extent start
                mov     bx, ds:CLUSNUM_HW
                mov     ds:CLUSTNUM_HW, bx
                mov     bx, ds:CLUSNUM
                mov     cx, ds:SECCNT

WRTLP:                                  ; ...
                call    OPTIMIZE
                jb      short SET_ACC_ERRW
                push    ds:CCONTENT_HW
                push    di              ; CCONTENT_HW:DI = Next physical cluster
                push    ax              ; AX = # sectors remaining
                call    DskWrtBufPurge  ; DS trashed.
                mov     ds, word ptr ss:DMAADD+2
                mov     ss:ALLOWED, 38h ; Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE

DWRITE_LUP:                             ; ...
                call    DSKWRITE
                jz      short DWRITE_OKAY
                cmp     al, 27h         ; error_handle_Disk_Full
                jz      short DWRITE_DISK_FULL
                mov     ss:READOP, 1
                call    HARDERRRW
                cmp     al, 1           ; Check for retry
                jz      short DWRITE_LUP
                cmp     al, 3           ; Check for FAIL
                clc
                jnz     short DWRITE_OKAY ; Ignore
                stc

DWRITE_OKAY:                            ; ...
                pop     cx              ; CX = # sectors remaining
                pop     bx
                pop     ss:CLUSTNUM_HW  ; CLUSTNUM_HW:BX = Next physical cluster
                push    ss
                pop     ds
                jb      short SET_ACC_ERRW
                jcxz    short WRTLAST
                mov     dl, 0
                add     ds:LASTPOS, 1   ; We'll be using next cluster
                adc     ds:LASTPOS_HW, 0
                jmp     short WRTLP
; ---------------------------------------------------------------------------

DWRITE_DISK_FULL:                       ; ...
                push    ss
                pop     ds
                pop     cx              ; unjunk stack
                pop     bx
                pop     bx
                mov     ds:DISK_FULL, 1
                stc
                jmp     WRTERR          ; go to disk full exit
; ---------------------------------------------------------------------------

SET_ACC_ERRW:                           ; ...
                jmp     SET_ACC_ERR_DS
; ---------------------------------------------------------------------------

WRTLAST:                                ; ...
                mov     ax, ds:BYTCNT2
                or      ax, ax
                jz      short FINWRT
                mov     ds:BYTCNT1, ax
                call    NEXTSEC
                jb      short SET_ACC_ERRW
                mov     ds:BYTSECPOS, 0
                call    BUFWRT
                jb      short SET_ACC_ERRW

FINWRT:                                 ; ...
                les     di, ds:THISSFT
                mov     ax, word ptr ds:GROWCNT
                mov     cx, word ptr ds:GROWCNT+2
                or      ax, ax
                jnz     short UPDATE_size
                jcxz    short SAMSIZ

UPDATE_size:                            ; ...
                add     es:[di+11h], ax ; [ES:DI+SF_ENTRY.sf_size]
                adc     es:[di+13h], cx ; [ES:DI+SF_ENTRY.sf_size+2]
                mov     ax, 1

SAMSIZ:                                 ; ...
                jmp     SETCLUS         ; ES:DI already points to SFT
; ---------------------------------------------------------------------------

WRTEOF:                                 ; ...
                mov     cx, ax
                or      cx, dx
                jz      KILLFIL
                mov     cx, dx
                shl     ecx, 16
                mov     cx, ax
                cmp     ecx, 7FFFFFFFh  ; 2GB file size limit
                jbe     short WRTEOF2
                push    es
                les     di, ds:THISSFT
                test    word ptr es:[di+2], 1000h ; [es:di+SF_ENTRY.sf_mode],1000h
                pop     es
                jz      short SET_ACC_ERRW ; > 2GB file size not allowed

WRTEOF2:                                ; ...
                sub     ax, 1
                sbb     dx, 0
                push    bx
                movzx   ebx, word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                shl     edx, 16
                movzx   eax, ax
                or      eax, edx
                xor     edx, edx
                div     ebx
                mov     edx, eax
                shr     edx, 16
                mov     ds:HIGH_SECTOR, dx
                pop     bx
                mov     cl, es:[bp+5]
                shr     eax, cl
                mov     ecx, eax
                call    FNDCLUS
                jb      SET_ACC_ERRW
                jecxz   RELFILE
                ror     ecx, 16
                mov     ds:CCOUNT_HW, cx
                ror     ecx, 16
                ror     ebx, 16
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 16
                call    ALLOCATE
                jb      WRTERR          ; disk full

UPDATE:                                 ; ...
                les     di, ds:THISSFT
                mov     ax, word ptr ds:BYTPOS
                mov     es:[di+11h], ax ; [ES:DI+SF_ENTRY.sf_size]
                mov     ax, word ptr ds:BYTPOS+2
                mov     es:[di+13h], ax ; [ES:DI+SF_ENTRY.sf_size+2]
                mov     ax, 2
                xor     cx, cx
                jmp     ADDREC
; ---------------------------------------------------------------------------

RELFILE:                                ; ...
                push    es              ; Reset Lstclus and cluspos to
                                        ; beginning of file if current
                les     di, ds:THISSFT  ; cluspos is past EOF.
                mov     ax, es:[di+0Bh] ; [ES:DI+SF_ENTRY.sf_firclus]
                shl     eax, 16
                mov     ax, es:[di+19h] ; [ES:DI+SF_ENTRY.sf_cluspos]
                cmp     edx, eax
                jnb     short SKIPRESET
                mov     word ptr es:[di+19h], 0
                mov     word ptr es:[di+0Bh], 0
                mov     edx, es:[di+2Bh] ; [ES:DI+SF_ENTRY.sf_chain]
                                        ; first cluster (32 bit) !?
                mov     es:[di+35h], edx ; [ES:DI+SF_ENTRY.sf_lstclus]

SKIPRESET:                              ; ...
                pop     es
                ror     ebx, 16
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 16
                xor     dx, dx
                dec     dx
                mov     ds:CLUSDATA_HW, dx ; 0FFFFh
                call    RELBLKS

dskwrt_2:                               ; ...
                jb      SET_ACC_ERRW
                jmp     short UPDATE
; ---------------------------------------------------------------------------

KILLFIL:                                ; ...
                xor     bx, bx          ; 0
                push    es
                les     di, ds:THISSFT
                mov     es:[di+0Bh], bx ; [ES:DI+SF_ENTRY.sf_firclus]
                                        ; [ES:DI+SF_ENTRY.sf_cluspos_hw] !?
                mov     es:[di+19h], bx ; [ES:DI+SF_ENTRY.sf_cluspos]
                mov     es:[di+35h], bx ; [ES:DI+SF_ENTRY.sf_lstclus]
                mov     es:[di+37h], bx ; [ES:DI+SF_ENTRY.sf_lstclus+2]
                mov     bx, es:[di+2Dh] ; [ES:DI+SF_ENTRY.sf_chain+2]
                                        ; first cluster (32 bit) hw !?
                mov     ds:CLUSTNUM_HW, bx
                xor     bx, bx
                mov     es:[di+2Dh], bx
                xchg    bx, es:[di+2Bh] ; [ES:DI+SF_ENTRY.sf_chain]
                                        ; first cluster (32 bit) lw !?
                pop     es
                cmp     ds:CLUSTNUM_HW, 0
                jnz     short dskwrt_3
                or      bx, bx
                jz      UPDATE

dskwrt_3:                               ; ...
                call    RELEASE
                jmp     short dskwrt_2
DISKWRITE       endp


; =============== S U B R O U T I N E =======================================


DskWrtBufPurge  proc near               ; ...
                push    bx
                push    cx
                mov     bx, ss:HIGH_SECTOR ; BX:DX = Extent start (sector #).
                mov     si, bx
                add     cx, dx
                adc     si, 0           ; SI:CX = Extent end + 1.
                mov     al, es:[bp+0]
                cmp     ss:SC_CACHE_COUNT, 0 ; Secondary cache in-use?
                jz      short nosc      ; no
                cmp     al, cs:CurSC_DRIVE
                jnz     short nosc
                push    ax
                mov     ax, cs:CurSC_SECTOR
                mov     di, cs:CurSC_SECTOR+2 ; DI:AX = SC start.
                cmp     si, di
                jnz     short sc01
                cmp     cx, ax

sc01:                                   ; ...
                jbe     short sc5
                add     ax, ss:SC_CACHE_COUNT
                adc     di, 0           ; DI:AX = SC end + 1.
                cmp     bx, di          ; Extent start > SC end?
                jnz     short sc02
                cmp     dx, ax

sc02:                                   ; ...
                jnb     short sc5       ; yes
                mov     cs:SC_STATUS, 0 ; Extent intersects SC: invalidate SC.

sc5:                                    ; ...
                pop     ax

nosc:                                   ; ...
                call    GETCURHEAD

_bufq:                                  ; ...
                cmp     al, [di+4]      ; [di+BUFFINFO.buf_ID]
                jnz     short bufq5
                cmp     bx, [di+8]      ; [di+BUFFINFO.buf_sector+2]
                jnz     short bufq04
                cmp     dx, [di+6]      ; [di+BUFFINFO.buf_sector]

bufq04:                                 ; ...
                ja      short bufq5
                cmp     si, [di+8]
                jnz     short bufq05
                cmp     cx, [di+6]

bufq05:                                 ; ...
                jbe     short bufq5
                test    byte ptr [di+5], 40h ; [di+BUFFINFO.buf_flags],
                                        ; buf_dirty
                jz      short bufq4
                call    dec_DirtyBufferCount

bufq4:                                  ; ...
                mov     word ptr [di+4], 20FFh ; [di+BUFFINFO.buf_ID],
                                        ; ((buf_visit<<8)|0FFh)
                call    SCANPLACE
                jmp     short bufq6
; ---------------------------------------------------------------------------

bufq5:                                  ; ...
                mov     di, [di]        ; di+BUFFINFO.buf_next]

bufq6:                                  ; ...
                cmp     di, cs:FIRST_BUFF_ADDR ; Scanned entire buffer queue?
                jnz     short _bufq     ; no, go do next buffer.
                pop     cx
                pop     bx
                retn
DskWrtBufPurge  endp


; =============== S U B R O U T I N E =======================================


MetaCompare     proc near               ; ...
                mov     cx, 11

WILDCRD:                                ; ...
                repe cmpsb
                jz      short MetaRet
                cmp     byte ptr es:[di-1], 3Fh ; '?'
                jz      short WILDCRD

MetaRet:                                ; ...
                retn
MetaCompare     endp


; =============== S U B R O U T I N E =======================================


sub_103B8       proc near               ; ...
                cmp     ss:SC_CACHE_COUNT, 0
                jz      short loc_103E1
                cmp     ss:CALLBPB, 1
                jnz     short loc_103E1
                push    cx
                push    dx
                push    ds
                push    si
                push    es
                push    di
                mov     dx, ss:CALLSSEC
                cmp     ss:DEVCALL_REQFUNC, 4
                jz      short loc_103E3
                call    sub_1049D
                jmp     loc_1046C
; ---------------------------------------------------------------------------

loc_103E1:                              ; ...
                clc
                retn
; ---------------------------------------------------------------------------

loc_103E3:                              ; ...
                call    SC2BUF
                jb      short loc_103F2
                mov     ss:DEVCALL_REQSTAT, 100h
                stc
                jmp     short loc_1045A
; ---------------------------------------------------------------------------

loc_103F2:                              ; ...
                mov     ax, ss:HIGH_SECTOR
                mov     cx, ss:CALLSSEC
                sub     cx, cs:word_CD89
                sbb     ax, cs:word_CD8B
                jnz     short loc_10459
                cmp     cx, 1
                ja      short loc_10459
                mov     cs:SC_STATUS, 0FFFFh
                mov     ax, ss:SC_CACHE_COUNT
                mov     ss:CALLBPB, ax
                mov     ax, ss:CALLXAD_2
                mov     ss:TEMP_VAR_2, ax
                mov     ax, word ptr ss:CALLBR
                mov     ss:TEMP_VAR, ax
                mov     ax, word ptr ss:SC_CACHE_PTR
                mov     word ptr ss:CALLBR, ax
                mov     ax, word ptr ss:SC_CACHE_PTR+2
                mov     ss:CALLXAD_2, ax
                mov     cs:SC_FLAG, 1
                mov     al, cs:SC_DRIVE
                mov     cs:CurSC_DRIVE, al
                mov     ax, ss:CALLSSEC
                mov     cs:CurSC_SECTOR, ax
                mov     ax, ss:HIGH_SECTOR
                mov     cs:CurSC_SECTOR+2, ax

loc_10459:                              ; ...
                clc

loc_1045A:                              ; ...
                mov     ax, ss:HIGH_SECTOR
                mov     cs:word_CD8B, ax
                mov     ax, ss:CALLSSEC
                mov     cs:word_CD89, ax
                jmp     short loc_1046D
; ---------------------------------------------------------------------------

loc_1046C:                              ; ...
                clc

loc_1046D:                              ; ...
                pop     di
                pop     es
                pop     si
                pop     ds
                pop     dx
                pop     cx
                retn
sub_103B8       endp


; =============== S U B R O U T I N E =======================================


IN_SC           proc near               ; ...
                mov     al, cs:SC_DRIVE
                cmp     al, cs:CurSC_DRIVE
                jnz     short loc_1049B
                mov     ax, ss:HIGH_SECTOR
                mov     cx, dx
                sub     cx, cs:CurSC_SECTOR
                sbb     ax, cs:CurSC_SECTOR+2
                jnz     short loc_1049B
                cmp     cx, ss:SC_CACHE_COUNT
                jnb     short loc_1049B
                clc
                jmp     short locret_1049C
; ---------------------------------------------------------------------------

loc_1049B:                              ; ...
                stc

locret_1049C:                           ; ...
                retn
IN_SC           endp


; =============== S U B R O U T I N E =======================================


sub_1049D       proc near               ; ...
                call    IN_SC
                jb      short locret_104AE
                mov     ax, 1
                shl     ax, cl
                not     ax
                and     cs:SC_STATUS, ax

locret_104AE:                           ; ...
                retn
sub_1049D       endp


; =============== S U B R O U T I N E =======================================


VIRREAD         proc near               ; ...
                mov     ax, ss:TEMP_VAR_2
                mov     ss:CALLXAD_2, ax
                mov     ax, ss:TEMP_VAR
                mov     word ptr ss:CALLBR, ax
                mov     cs:SC_FLAG, 0
                mov     ss:CALLBPB, 1   ; [ss:CALLSCNT]
                test    byte ptr ss:DEVCALL_REQSTAT+1, 80h
                jnz     short scerror
                push    ds
                push    si
                push    es
                push    di
                push    dx
                push    cx
                xor     cx, cx
                call    SC2BUF2
                pop     cx
                pop     dx
                pop     di
                pop     es
                pop     si
                pop     ds
                jmp     short sc2end
; ---------------------------------------------------------------------------

scerror:                                ; ...
                mov     ss:CALLBPB, 1
                mov     cs:SC_STATUS, 0
                mov     cs:CurSC_DRIVE, 0FFh
                stc
                retn
; ---------------------------------------------------------------------------

sc2end:                                 ; ...
                clc
                retn
VIRREAD         endp


; =============== S U B R O U T I N E =======================================


SC2BUF          proc near               ; ...

; FUNCTION CHUNK AT BDAC SIZE 00000002 BYTES

                call    IN_SC
                jb      short noSC
                mov     ax, 1
                shl     ax, cl
                test    cs:SC_STATUS, ax
                jz      short noSC
SC2BUF          endp


; =============== S U B R O U T I N E =======================================


SC2BUF2         proc near               ; ...
                mov     ax, cx
                mul     cs:SC_SECTOR_SIZE
                add     ax, word ptr ss:SC_CACHE_PTR
                adc     dx, word ptr ss:SC_CACHE_PTR+2
                mov     ds, dx
                mov     si, ax
                mov     es, ss:CALLXAD_2 ; CALLBR+2
                mov     di, word ptr ss:CALLBR
                mov     cx, cs:SC_SECTOR_SIZE
                shr     cx, 2
                rep movsd
                clc
                retn
SC2BUF2         endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR SC2BUF

noSC:                                   ; ...
                stc
                retn
; END OF FUNCTION CHUNK FOR SC2BUF

; =============== S U B R O U T I N E =======================================


FNDCLUS         proc near               ; ...
                push    es
                les     di, ds:THISSFT
                mov     ebx, es:[di+35h] ; [ES:DI+SF_ENTRY.sf_lstclus]
                mov     dx, es:[di+0Bh] ; [ES:DI+SF_ENTRY.sf_firclus] ; MSDOS 5.0-6.22
                                        ; [ES:DI+SF_ENTRY.sf_cluspos_hw] ; PCDOS 7.1 & Win ME
                shl     edx, 16
                mov     dx, es:[di+19h] ; [ES:DI+SF_ENTRY.sf_cluspos]
                or      ebx, ebx
                jz      short NOCLUS
                sub     ecx, edx
                jnb     short FINDIT
                add     ecx, edx
                xor     edx, edx
                mov     ebx, es:[di+2Bh] ; [ES:DI+SF_ENTRY.sf_chain] ; MSDOS 5.0-6.22
                                        ; [ES:DI+SF_ENTRY.sf_fcluster] ; PCDOS 7.1 & Win ME

FINDIT:                                 ; ...
                pop     es
                jecxz   RET9
FNDCLUS         endp


; =============== S U B R O U T I N E =======================================


SKPCLP          proc near               ; ...
                push    edx
                push    ecx
                ror     ebx, 16
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 16
                call    UNPACK
                pop     ecx
                pop     edx
                jb      short fndclus_retn
                ror     ebx, 16
                mov     bx, ds:CLUSTNUM_HW
                ror     ebx, 16
                ror     edi, 16
                mov     di, ds:CCONTENT_HW
                ror     edi, 16
                push    ds:CCONTENT_HW
                pop     ds:CLUSTNUM_HW
                xchg    ebx, edi
                call    IsEOF
                xchg    ebx, edi
                jnb     short RET9
                xchg    ebx, edi
                inc     edx
                dec     ecx
                jnz     short SKPCLP

RET9:                                   ; ...
                clc
                retn
; ---------------------------------------------------------------------------

NOCLUS:                                 ; ...
                pop     es
                inc     ecx
                dec     edx
                clc

fndclus_retn:                           ; ...
                retn
SKPCLP          endp


; =============== S U B R O U T I N E =======================================


BUFSEC          proc near               ; ...
                push    ds:CLUSTNUM_HW
                mov     dx, ds:CLUSNUM_HW
                mov     ds:CLUSTNUM_HW, dx
                mov     dx, ds:CLUSNUM
                mov     bl, ds:SECCLUSPOS
                mov     ds:ALLOWED, 38h ; Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
                call    FIGREC
                call    GETBUFFR
                pop     ds:CLUSTNUM_HW
                jb      short bufsec_retn
                mov     ds:TRANS, 1     ; A transfer is taking place
                mov     si, ds:NEXTADD
                mov     di, si
                mov     cx, ds:BYTCNT1
                add     di, cx
                mov     ds:NEXTADD, di
                les     di, ds:CURBUF
                or      byte ptr es:[di+5], 8 ; [ES:DI+BUFFINFO.buf_flags],
                                        ; buf_isDATA
                lea     di, [di+18h]    ; [DI+BUFINSIZ] ; Point to buffer
                add     di, ds:BYTSECPOS
                clc

bufsec_retn:                            ; ...
                retn
BUFSEC          endp


; =============== S U B R O U T I N E =======================================


BUFRD           proc near               ; ...
                push    es
                xor     ax, ax
                call    BUFSEC
                jnb     short BUF_OK

BUF_IO_FAIL:                            ; ...
                pop     es
                jmp     short RBUFPLACED
; ---------------------------------------------------------------------------

BUF_OK:                                 ; ...
                mov     bx, es
                mov     es, word ptr ds:DMAADD+2
                mov     ds, bx
                xchg    di, si
                shr     cx, 1
                rep movsw
                adc     cx, 0
                rep movsb
                pop     es
                lds     di, ss:CURBUF
                lea     bx, [di+18h]    ; [DI+BUFINSIZ]
                sub     si, bx
                call    PLACEBUF
                cmp     si, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                jb      short RBUFPLACEDC
                mov     word ptr ss:BufferQueue, di

RBUFPLACEDC:                            ; ...
                clc

RBUFPLACED:                             ; ...
                push    ss
                pop     ds
                retn
BUFRD           endp


; =============== S U B R O U T I N E =======================================


BUFWRT          proc near               ; ...
                push    es
                push    word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                inc     ds:SECPOS
                mov     eax, ds:SECPOS
                cmp     eax, ds:VALSEC  ; Has sector been written before?
                mov     al, 1           ; no need to read sector before buffer update
                ja      short NOREAD    ; Skip preread if SECPOS>VALSEC
                add     sp, 2
                xor     ax, ax
                push    ax              ; 0 ; pre read is needed

NOREAD:                                 ; ...
                call    BUFSEC
                pop     ax              ; sector size
                jb      short BUF_IO_FAIL
                mov     ds, word ptr ds:DMAADD+2
                push    cx
                push    di
                xchg    ax, cx          ; byte count (0 = skip)
                shr     cx, 1           ; word count
                xor     ax, ax          ; 0
                sub     di, ss:BYTSECPOS
                rep stosw               ; clear buffer bytes
                                        ; before current byte position
                pop     di              ; DS:SI-> Source within Transfer memory block
                                        ; ES:DI-> Destination within Buffer
                pop     cx
                shr     cx, 1           ; CX = # of whole WORDs; CF=1 if odd # of bytes
                rep movsw
                adc     cx, 0
                rep movsb
                pop     es
                lds     bx, ss:CURBUF
                test    byte ptr [bx+5], 40h ; [BX+BUFFINFO.buf_flags],buf_dirty
                jnz     short yesdirty10
                call    inc_DirtyBufferCount
                or      byte ptr [bx+5], 40h

yesdirty10:                             ; ...
                lea     si, [bx+24]     ; [BX+BUFINSIZ]
                sub     di, si
                cmp     di, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                jb      short WBUFPLACED ; Written last byte?
                                        ; No, leave buf where it is
                mov     word ptr ss:BufferQueue, bx ; Make it prime candidate for
                                        ; chucking even though it is MRU.

WBUFPLACED:                             ; ...
                clc
                push    ss
                pop     ds
                retn
BUFWRT          endp


; =============== S U B R O U T I N E =======================================


NEXTSEC         proc near               ; ...
                test    ds:TRANS, 0FFh
                jz      short CLRET
                mov     al, ds:SECCLUSPOS
                inc     al
                cmp     al, es:[bp+4]
                jbe     short SAVPOS
                mov     bx, ds:CLUSNUM_HW
                mov     ds:CLUSTNUM_HW, bx
                mov     bx, ds:CLUSNUM
                call    IsEOF
                jnb     short NONEXT
                call    UNPACK
                jb      short NONEXT
                mov     ds:CLUSNUM, di
                push    di
                mov     di, ds:CCONTENT_HW
                mov     ds:CLUSNUM_HW, di
                pop     di
                add     ds:LASTPOS, 1
                adc     ds:LASTPOS_HW, 0
                mov     al, 0

SAVPOS:                                 ; ...
                mov     ds:SECCLUSPOS, al

CLRET:                                  ; ...
                clc
                retn
; ---------------------------------------------------------------------------

NONEXT:                                 ; ...
                stc
                retn
NEXTSEC         endp


; =============== S U B R O U T I N E =======================================


OPTIMIZE        proc near               ; ...
                push    dx
                push    ds:CLUSTNUM_HW
                push    bx
                mov     al, es:[bp+4]   ; [ES:BP+DPB.CLUSTER_MASK]
                inc     al
                mov     ah, al
                sub     al, dl
                mov     dx, cx
                xor     cx, cx

OPTCLUS:                                ; ...
                call    UNPACK
                jb      OP_ERR
                add     cl, al
                adc     ch, 0
                cmp     cx, dx
                jnb     BLKDON
                mov     al, ah
                ror     ebx, 16
                mov     bx, ds:CLUSTNUM_HW
                ror     ebx, 16
                ror     edi, 16
                mov     di, ds:CCONTENT_HW
                ror     edi, 16
                inc     ebx
                cmp     edi, ebx
                jnz     short clusgot3
                ror     edi, 16
                mov     ds:CLUSTNUM_HW, di
                jmp     short OPTCLUS
; ---------------------------------------------------------------------------

clusgot3:                               ; ...
                dec     ebx

FINCLUS:                                ; ...
                ror     ebx, 16
                mov     ds:CLUSNUM_HW, bx
                ror     ebx, 16
                mov     ds:CLUSNUM, bx
                sub     dx, cx
                push    dx
                mov     ax, cx
                mul     word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                mov     si, ds:NEXTADD
                add     ax, si
                mov     ds:NEXTADD, ax
                pop     ax
                ror     ebx, 16
                mov     bx, ds:CLUSNUM_HW
                ror     ebx, 16
                pop     edx
                ror     edx, 16
                mov     ds:CLUSTNUM_HW, dx
                ror     edx, 16
                sub     ebx, edx
                push    eax
                mov     eax, ebx
                shr     eax, 16
                add     ds:LASTPOS, bx
                adc     ds:LASTPOS_HW, ax
                pop     eax
                pop     bx
                call    FIGREC
                mov     bx, si
                clc
                retn
; ---------------------------------------------------------------------------

OP_ERR:                                 ; ...
                add     sp, 6
                stc
                retn
; ---------------------------------------------------------------------------

BLKDON:                                 ; ...
                sub     cx, dx
                sub     ah, cl
                dec     ah
                mov     ds:SECCLUSPOS, ah
                mov     cx, dx
                ror     ebx, 16
                mov     bx, ds:CLUSTNUM_HW
                ror     ebx, 16
                jmp     short FINCLUS
OPTIMIZE        endp


; =============== S U B R O U T I N E =======================================


FIGREC          proc near               ; ...
                push    cx
                mov     cl, es:[bp+5]   ; DPB.CLUSTER_SHIFT
                ror     edx, 16
                mov     dx, ss:CLUSTNUM_HW
                ror     edx, 16
                sub     edx, 2
                shl     edx, cl
                or      dl, bl
                cmp     word ptr es:[bp+0Fh], 0 ; DPB.FAT_SIZE
                jz      short figrec1   ; FAT32
                movzx   ecx, word ptr es:[bp+0Bh] ; DPB.FIRST_SECTOR
                add     edx, ecx
                jmp     short figrec2
; ---------------------------------------------------------------------------

figrec1:                                ; ...
                add     edx, es:[bp+29h] ; DPB.FCLUS_FSECTOR

figrec2:                                ; ...
                ror     edx, 16
                mov     ss:HIGH_SECTOR, dx
                ror     edx, 16
                pop     cx
                retn
FIGREC          endp


; =============== S U B R O U T I N E =======================================


callmagic       proc far                ; ...
                push    ds
                push    ss:OffsetMagicPatch
                retf
callmagic       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


ALLOCATE        proc near               ; ...
                clc
                push    cs
                call    near ptr callmagic
                jb      alloc_disk_full

Regular_Allocate_Path:
                push    ds:CLUSTNUM_HW
                push    bx
                xor     bx, bx
                mov     ds:CLUSTNUM_HW, bx
                call    UNPACK
                mov     ds:FATBYT, di
                mov     bx, ds:CCONTENT_HW
                mov     ds:FATBYT_HW, bx
                pop     bx
                pop     ds:CLUSTNUM_HW
                jb      ads_ret
                push    ds:CCOUNT_HW
                push    cx
                push    ds:CLUSTNUM_HW
                push    bx
                pop     ebx
                pop     ecx
                push    ecx
                push    ebx
                mov     edx, ebx
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short ads0      ; FAT32
                movzx   ebx, word ptr es:[bp+1Dh] ; [es:bp+DPB.NEXT_FREE]
                jmp     short ads1
; ---------------------------------------------------------------------------

ads0:                                   ; ...
                mov     ebx, es:[bp+39h] ; [es:bp+DPB.FAT32_NXTFREE]

ads1:                                   ; ...
                cmp     ebx, 2
                ja      short FINDFRE

ads2:                                   ; ...
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jnz     short ads3
                mov     dword ptr es:[bp+39h], 2 ; [es:bp+DPB.FAT32_NXTFREE]

ads3:                                   ; ...
                mov     word ptr es:[bp+1Dh], 2 ; [es:bp+DPB.NEXT_FREE]
                or      byte ptr es:[bp+18h], 1 ; [es:bp+DPB.FIRST_ACCESS]
                mov     ebx, 1

FINDFRE:                                ; ...
                inc     ebx
                cmp     word ptr es:[bp+0Fh], 0
                jz      short ads4
                cmp     bx, es:[bp+0Dh] ; [es:bp+DPB.MAX_CLUSTER]
                jmp     short ads5
; ---------------------------------------------------------------------------

ads4:                                   ; ...
                cmp     ebx, es:[bp+2Dh] ; [es:bp+DPB.LAST_CLUSTER]

ads5:                                   ; ...
                ja      ads10
                push    ecx
                push    ebx
                push    edx
                ror     ebx, 16
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 16
                call    UNPACK
                pop     edx
                pop     ebx
                pop     ecx
                jb      ads9
                jnz     short FINDFRE
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jnz     short ads6
                mov     es:[bp+39h], ebx ; [es:bp+DPB.FAT32_NXTFREE]

ads6:                                   ; ...
                mov     es:[bp+1Dh], bx ; [es:bp+DPB.NEXT_FREE]
                or      byte ptr es:[bp+18h], 1 ; [es:bp+DPB.FIRST_ACCESS]
                push    ecx
                push    ebx
                push    edx
                mov     dx, 1
                mov     ds:CLUSDATA_HW, 0
                call    PACK
                pop     edx
                pop     ebx
                pop     ecx
                jb      short ads9
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short ads7
                cmp     word ptr es:[bp+1Fh], 0FFFFh
                jz      short NO_ALLOC
                dec     word ptr es:[bp+1Fh] ; [es:bp+DPB.FREE_CNT]
                jmp     short ads8
; ---------------------------------------------------------------------------

ads7:                                   ; ...
                cmp     dword ptr es:[bp+1Fh], 0FFFFFFFFh
                jz      short NO_ALLOC
                dec     dword ptr es:[bp+1Fh] ; [es:bp+DPB.FREE_CNT]

ads8:                                   ; ...
                or      byte ptr es:[bp+18h], 1 ; [es:bp+DPB.FIRST_ACCESS]

NO_ALLOC:                               ; ...
                xchg    ebx, edx
                push    ecx
                push    edx
                ror     ebx, 16
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 16
                ror     edx, 16
                mov     ds:CLUSDATA_HW, dx
                ror     edx, 16
                call    PACK
                pop     ebx
                pop     ecx
                jb      short ads9
                mov     edx, ebx
                dec     ecx
                jnz     FINDFRE
                ror     ebx, 16
                mov     ds:CLUSTNUM_HW, bx
                ror     ebx, 16
                xor     dx, dx
                dec     dx
                mov     ds:CLUSDATA_HW, dx
                call    PACK

ads9:                                   ; ...
                pop     bx
                pop     ds:CLUSTNUM_HW
                pop     ecx
                jb      short ads_ret
                call    UNPACK
                jb      short ads_ret
                push    ds:CLUSTNUM_HW
                push    ds:CCONTENT_HW
                call    RESTFATBYT
                pop     ds:CLUSTNUM_HW
                pop     ds:CCONTENT_HW
                xchg    bx, di
                jb      short ads_ret
                cmp     ds:CCONTENT_HW, 0
                clc
                jnz     short ads_ret
                or      di, di
                jnz     short ads_ret

dofastk:
                push    dx
                push    es
                les     di, ds:THISSFT
                mov     dx, ds:CLUSTNUM_HW
                mov     es:[di+2Dh], dx ; [es:di+SF_ENTRYT.sf_chain+2] ; 32 bit fclust, hw
                mov     es:[di+2Bh], bx ; [es:di+SF_ENTRYT.sf_chain] ; 32 bit fcluster, lw
                mov     es:[di+37h], dx ; [es:di+SF_ENTRYT.sf_lstclus+2] ; 32 bit lclust, hw
                mov     es:[di+35h], bx ; [es:di+SF_ENTRYT.sf_lstclus] ; 32 bit lcluster, lw
                pop     es
                pop     dx

ads_ret:                                ; ...
                retn
; ---------------------------------------------------------------------------

ads10:                                  ; ...
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short ads11
                cmp     word ptr es:[bp+1Dh], 2 ; [es:bp+DPB.NEXT_FREE]
                jmp     short ads12
; ---------------------------------------------------------------------------

ads11:                                  ; ...
                cmp     dword ptr es:[bp+39h], 2 ; [es:bp+DPB.FAT32_NXTFREE]

ads12:                                  ; ...
                jnz     ads2
                pop     bx
                pop     ds:CLUSTNUM_HW
                push    ecx
                xor     dx, dx
                dec     dx
                mov     ds:CLUSDATA_HW, dx
                call    RELBLKS
                call    RESTFATBYT
                pop     ecx
                pop     eax
                sub     eax, ecx
                ror     eax, 16
                mov     ds:CLUSTERS_HW, ax
                ror     eax, 16

alloc_disk_full:                        ; ...
                mov     ds:DISK_FULL, 1
                stc
                retn
ALLOCATE        endp


; =============== S U B R O U T I N E =======================================


RESTFATBYT      proc near               ; ...
                push    bx
                push    dx
                push    di
                xor     bx, bx
                mov     ds:CLUSTNUM_HW, bx
                mov     dx, ds:FATBYT_HW
                mov     ds:CLUSDATA_HW, dx
                mov     dx, ds:FATBYT
                call    PACK
                pop     di
                pop     dx
                pop     bx
                retn
RESTFATBYT      endp


; =============== S U B R O U T I N E =======================================


RELEASE         proc near               ; ...
                xor     dx, dx
                mov     ds:CLUSDATA_HW, dx ; (dx = 0, release)

RELBLKS:                                ; ...
                call    UNPACK
                jbe     short RELEASE_flush
                mov     ax, di
                push    dx
                call    PACK
                mov     dx, ds:CCONTENT_HW
                mov     ds:CLUSTNUM_HW, dx
                pop     dx
                mov     bx, ax
                jb      short RELEASE_flush
                or      dx, dx
                jnz     short NO_DEALLOC
                cmp     ds:CLUSDATA_HW, dx ; (dx = 0, release)
                jnz     short NO_DEALLOC ; no, EOF (allocate, -1)
                cmp     word ptr es:[bp+0Fh], 0
                jz      short relblks_1
                cmp     word ptr es:[bp+1Fh], 0FFFFh
                jz      short NO_DEALLOC
                inc     word ptr es:[bp+1Fh]
                jmp     short relblks_2
; ---------------------------------------------------------------------------

relblks_1:                              ; ...
                cmp     dword ptr es:[bp+1Fh], 0FFFFFFFFh
                jz      short NO_DEALLOC
                inc     dword ptr es:[bp+1Fh]

relblks_2:                              ; ...
                or      byte ptr es:[bp+18h], 1 ; DPB.FIRST_ACCESS

NO_DEALLOC:                             ; ...
                cmp     ds:CLUSTNUM_HW, 0
                jnz     short NO_DEALLOC2
                dec     ax
                jz      short RELEASE_flush

NO_DEALLOC2:                            ; ...
                call    IsEOF
                jb      short RELEASE

RELEASE_flush:                          ; ...
                mov     al, es:[bp+0]
                push    si
                push    cx
                push    es
                push    bp
                call    FLUSHBUF
                pop     bp
                pop     es
                pop     cx
                pop     si
                retn
RELEASE         endp


; =============== S U B R O U T I N E =======================================


GETEOF          proc near               ; ...
                push    dx
                push    ax
                xor     dx, dx
                xor     ax, ax

GETEOF2:                                ; ...
                call    UNPACK
                jb      short GETEOF1
                add     ax, 1
                adc     dx, 0
                push    ds:CLUSTNUM_HW
                push    bx
                push    ds:CCONTENT_HW
                pop     ds:CLUSTNUM_HW
                mov     bx, di
                call    IsEOF
                pop     bx
                pop     ds:CLUSTNUM_HW
                jnb     short GETEOF1
                mov     bx, di
                push    ds:CCONTENT_HW
                pop     ds:CLUSTNUM_HW
                jmp     short GETEOF2
; ---------------------------------------------------------------------------

GETEOF1:                                ; ...
                mov     di, ax
                mov     ds:CLUSTERS_HW, dx ; CLUSTERS_HW:DI = Cluster Count
                pop     ax
                pop     dx
                retn
GETEOF          endp


; =============== S U B R O U T I N E =======================================


IsEOF           proc near               ; ...
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp:DPB.FAT_SIZE]
                jz      short IsEOF_FAT32 ; FAT32

IsEOF_FAT:                              ; ...
                cmp     word ptr es:[bp+0Dh], 0FF6h ; [es:bp+DPB.MAX_CLUSTER]
                jb      short EOF12_1
                cmp     bx, 0FFF8h      ; 16 bit compare
                retn                    ; cf=0 -> EOF, cf=1 -> not EOF
; ---------------------------------------------------------------------------

IsEOF_FAT32:                            ; ...
                cmp     dword ptr es:[bp+2Dh], 0FFF6h
                jb      short IsEOF_FAT
                cmp     ss:CLUSTNUM_HW, 0FFFh
                jnz     short IsEOF_other
                cmp     bx, 0FFF8h      ; 32 bit compare

IsEOF_other:                            ; ...
                retn                    ; cf=0 -> EOF, cf=1 -> not EOF
; ---------------------------------------------------------------------------

EOF12_1:                                ; ...
                cmp     word ptr es:[bp+0Dh], 0FF0h ; [es:bp+DPB.MAX_CLUSTER]
                jnb     short EOF12_2
                cmp     bx, 0FF0h       ; do the 12 bit compare
                retn                    ; cf=0 -> EOF, cf=1 -> not EOF
; ---------------------------------------------------------------------------

EOF12_2:                                ; ...
                cmp     bx, 0FF8h       ; do the 12 bit compare
                retn
IsEOF           endp


; =============== S U B R O U T I N E =======================================


UNPACK          proc near               ; ...
                or      bx, bx
                jz      short up_1

up_cont:                                ; ...
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jz      short up_fat32  ; FAT32 fs
                cmp     bx, es:[bp+0Dh] ; [ES:BP+DPB.MAX_CLUSTER]
                jmp     short up_2
; ---------------------------------------------------------------------------

up_1:                                   ; ...
                cmp     ds:CLUSTNUM_HW, bx ; 0
                jnz     short up_cont
                mov     edi, cs:CL0FATENTRY
                ror     edi, 16
                mov     ds:CCONTENT_HW, di
                ror     edi, 16
                or      edi, edi        ; [CCONTENT_HW]:DI = contents of CL0FATENTRY
                retn
; ---------------------------------------------------------------------------

up_fat32:                               ; ...
                ror     ebx, 16
                mov     bx, ds:CLUSTNUM_HW
                ror     ebx, 16
                cmp     ebx, es:[bp+2Dh]

up_2:                                   ; ...
                ja      short HURTFAT
                mov     ds:CCONTENT_HW, 0
                call    MAPCLUSTER
                jb      short _DoContext
                jnz     short High12
                cmp     word ptr es:[bp+0Fh], 0
                jz      short up_5

up_3:                                   ; ...
                movzx   edi, word ptr [di]
                cmp     word ptr es:[bp+0Dh], 0FF6h
                jb      short Unpack12

up_4:                                   ; ...
                or      edi, edi
                jmp     short _DoContext
; ---------------------------------------------------------------------------

up_5:                                   ; ...
                cmp     dword ptr es:[bp+2Dh], 0FFF6h
                jb      short up_3
                mov     edi, [di]
                and     edi, 0FFFFFFFh
                ror     edi, 16
                mov     ss:CCONTENT_HW, di
                ror     edi, 16
                jmp     short up_4
; ---------------------------------------------------------------------------

High12:                                 ; ...
                mov     di, [di]
                shr     di, 4

Unpack12:                               ; ...
                and     di, 0FFFh

_DoContext:                             ; ...
                push    ss
                pop     ds
                retn
; ---------------------------------------------------------------------------

HURTFAT:                                ; ...
                cmp     word ptr es:[bp+0Fh], 0
                jz      short chk_set_fa_1
                cmp     word ptr es:[bp+1Fh], 0FFFFh
                jz      short HURTFAT2
                mov     word ptr es:[bp+1Fh], 0FFFFh
                jmp     short chk_set_fa_2
; ---------------------------------------------------------------------------

chk_set_fa_1:                           ; ...
                cmp     dword ptr es:[bp+1Fh], 0FFFFFFFFh
                jz      short HURTFAT2
                mov     dword ptr es:[bp+1Fh], 0FFFFFFFFh

chk_set_fa_2:                           ; ...
                or      byte ptr es:[bp+18h], 1

HURTFAT2:                               ; ...
                push    ax
                mov     ah, 88h
                mov     ss:ALLOWED, 8
                push    ss:CLUSTNUM_HW
                push    bx
                call    FATAL
                pop     bx
                pop     ss:CLUSTNUM_HW
                xor     di, di
                dec     di
                mov     ss:CCONTENT_HW, di
                cmp     al, 3
                clc
                jnz     short OKU_RET
                stc

OKU_RET:                                ; ...
                pop     ax
                retn
UNPACK          endp


; =============== S U B R O U T I N E =======================================


PACK            proc near               ; ...
                or      bx, bx          ; CLUSDATA_HW:DX = cluster data/content
                                        ; CLUSTNUM_HW:BX = cluster number (to be updated)
                jz      p_clust_0

p_cont:                                 ; ...
                call    MAPCLUSTER
                jb      short _DoContext
                jnz     pack2
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jnz     short pack1
                cmp     dword ptr es:[bp+2Dh], 0FFF6h ; [ES:BP+DPB.LAST_CLUSTER]
                jb      short pack1
                ror     edx, 10h
                mov     dx, ss:CLUSDATA_HW
                ror     edx, 10h
                xor     edx, [di]
                and     edx, 0FFFFFFFh
                xor     [di], edx
                jmp     short PACKIN2
; ---------------------------------------------------------------------------

pack1:                                  ; ...
                cmp     word ptr es:[bp+0Dh], 0FF6h ; [ES:BP+DPB.MAX_CLUSTER]
                jb      short pack3
                mov     si, dx

PACKIN:                                 ; ...
                mov     [di], si

PACKIN2:                                ; ...
                lds     si, ss:CURBUF
                test    byte ptr [si+5], 40h
                jnz     short yesdirty11
                call    inc_DirtyBufferCount
                or      byte ptr [si+5], 40h ;  [SI+BUFFINFO.buf_flags],buf_dirty

yesdirty11:                             ; ...
                cmp     ss:CLUSSPLIT, 0
                push    ss
                pop     ds
                jz      short pack_retn
                push    ax
                push    ds:CLUSTNUM_HW
                push    bx
                push    cx
                mov     ax, ds:CLUSSAVE
                mov     ds, word ptr ds:CURBUF+2
                add     si, 24          ; BUFINSIZ
                mov     [si], ah
                push    ss
                pop     ds
                push    ax
                mov     dx, word ptr ds:CLUSSEC+2
                mov     ds:HIGH_SECTOR, dx
                mov     dx, word ptr ds:CLUSSEC
                mov     si, 1
                xor     al, al
                call    GETBUFFRB
                pop     ax
                jb      short POPP_RET
                lds     di, ds:CURBUF
                test    byte ptr [di+5], 40h ;  [DI+BUFFINFO.buf_flags],buf_dirty
                jnz     short yesdirty12
                call    inc_DirtyBufferCount
                or      byte ptr [di+5], 40h

yesdirty12:                             ; ...
                add     di, 24
                dec     di
                add     di, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                mov     [di], al
                clc

POPP_RET:                               ; ...
                push    ss
                pop     ds
                pop     cx
                pop     bx
                pop     ds:CLUSTNUM_HW
                pop     ax

pack_retn:                              ; ...
                retn
; ---------------------------------------------------------------------------

pack2:                                  ; ...
                mov     si, [di]
                shl     dx, 4
                and     si, 0Fh
                jmp     short pack4
; ---------------------------------------------------------------------------

pack3:                                  ; ...
                mov     si, [di]
                and     si, 0F000h
                and     dx, 0FFFh

pack4:                                  ; ...
                or      si, dx
                jmp     PACKIN
; ---------------------------------------------------------------------------

p_clust_0:                              ; ...
                cmp     ss:CLUSTNUM_HW, bx
                jnz     p_cont
                mov     word ptr cs:CL0FATENTRY, dx
                push    dx
                mov     dx, ss:CLUSDATA_HW
                mov     word ptr cs:CL0FATENTRY+2, dx
                pop     dx
                retn
PACK            endp


; =============== S U B R O U T I N E =======================================


MAPCLUSTER      proc near               ; ...
                mov     ds:CLUSSPLIT, 0
                push    ax
                push    bx
                push    cx
                push    dx
                xor     edx, edx
                ror     ebx, 16
                mov     bx, ds:CLUSTNUM_HW
                ror     ebx, 16
                mov     eax, ebx
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jz      short mapcl4

mapcl1:                                 ; ...
                cmp     word ptr es:[bp+0Dh], 0FF6h ; [ES:BP+DPB.MAX_CLUSTER]
                jb      mapcl5

mapcl2:                                 ; ...
                add     eax, ebx
                adc     edx, 0

Map16:                                  ; ...
                movzx   ecx, word ptr es:[bp+2] ; [ES:BP+DPB.SECTOR_SIZE]
                div     ecx
                movzx   ebx, word ptr es:[bp+6] ; [ES:BP+DPB.FIRST_FAT]
                add     eax, ebx
                dec     cx
                push    eax
                push    dx
                push    cx
                mov     dx, ax
                shr     eax, 16
                mov     ds:HIGH_SECTOR, ax
                xor     al, al
                mov     si, 1
                call    GETBUFFRB
                pop     cx
                pop     ax
                pop     edx
                jb      short MAP_POP
                lds     si, ds:CURBUF
                lea     di, [si+18h]    ; [SI+BUFINSIZ]
                add     di, ax
                cmp     ax, cx
                jz      short mapcl7

MAPRET:                                 ; ...
                pop     dx
                pop     cx
                pop     bx
                xor     al, al
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jz      short mapcl3    ; FAT32
                cmp     word ptr es:[bp+0Dh], 0FF6h ; [ES:BP+DPB.MAX_CLUSTER]
                jb      short mapcl6

MapSet:                                 ; ...
                test    al, 1
                pop     ax
                retn
; ---------------------------------------------------------------------------

mapcl3:                                 ; ...
                cmp     dword ptr es:[bp+2Dh], 0FF6h ; [es:bp+DPB.LAST_CLUSTER]
                jb      short mapcl6
                jmp     short MapSet
; ---------------------------------------------------------------------------

mapcl4:                                 ; ...
                cmp     dword ptr es:[bp+2Dh], 0FFF6h ; [es:bp+DPB.LAST_CLUSTER]
                jb      short mapcl1
                shl     eax, 1
                rcl     edx, 1
                shl     eax, 1
                rcl     edx, 1
                jmp     short Map16
; ---------------------------------------------------------------------------

mapcl5:                                 ; ...
                shr     eax, 1
                jmp     mapcl2
; ---------------------------------------------------------------------------

mapcl6:                                 ; ...
                mov     al, bl
                jmp     short MapSet
; ---------------------------------------------------------------------------

MAP_POP:                                ; ...
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                retn
; ---------------------------------------------------------------------------

mapcl7:                                 ; ...
                mov     al, [di]
                push    ss
                pop     ds
                inc     ds:CLUSSPLIT
                mov     byte ptr ds:CLUSSAVE, al
                mov     ds:CLUSSEC, edx
                inc     edx
                mov     eax, edx
                shr     eax, 16
                mov     ds:HIGH_SECTOR, ax
                xor     al, al
                mov     si, 1
                call    GETBUFFRB
                jb      short MAP_POP
                lds     si, ds:CURBUF
                lea     di, [si+18h]    ; [SI+BUFINSIZ]
                mov     al, [di]
                push    ss
                pop     ds
                mov     byte ptr ds:CLUSSAVE+1, al
                mov     di, offset CLUSSAVE
                jmp     MAPRET
MAPCLUSTER      endp


; =============== S U B R O U T I N E =======================================


FATREAD_SFT     proc near               ; ...
                les     bp, es:[di+7]   ; [ES:DI+SF_ENTRY.sf_devptr]
                mov     al, es:[bp+0]   ; [ES:BP+DPB.DRIVE]
                mov     ds:THISDRV, al
                call    GOTDPB
                call    FAT_GOT_DPB

fatread_sft_retn:                       ; ...
                retn
FATREAD_SFT     endp


; =============== S U B R O U T I N E =======================================


FATREAD_CDS     proc near               ; ...
                push    es
                push    di
                les     bp, es:[di+45h] ; [ES:DI+curdir.devptr]
                mov     al, es:[bp+0]   ; [ES:BP+DPB.DRIVE]
                mov     ds:THISDRV, al
                call    GOTDPB
                call    FAT_GOT_DPB
                pop     di
                pop     es
                jb      short fatread_sft_retn
                jnz     short NO_CHANGE
                xor     ax, ax
                dec     ax              ; -1
                push    ds
                mov     cl, ds:CDSCOUNT
                xor     ch, ch
                lds     si, es:[di+45h] ; [ES:DI+curdir.devptr]
                les     di, ss:CDSADDR

frcd20:                                 ; ...
                test    byte ptr es:[di+44h], 80h ; [ES:DI+curdir.flags+1],
                                        ; (curdir_isnet>>8)
                jnz     short frcd25
                push    ds
                mov     ds, large cs:DosDSeg
                call    test_remote_disk_flag
                pop     ds
                jnz     short frcd25
                cmp     si, es:[di+45h] ; [ES:DI+curdir.devptr]
                jnz     short frcd25
                mov     bx, ds
                cmp     bx, es:[di+47h] ; [ES:DI+curdir.devptr+2]
                jnz     short frcd25
                test    dword ptr es:[di+49h], 0FFFFFFFFh ; [ES:DI+curdir.ID]
                jz      short frcd25
                mov     es:[di+49h], ax ; -1
                mov     es:[di+4Bh], ax

frcd25:                                 ; ...
                add     di, 88          ; curdir.size
                loop    frcd20
                pop     ds

NO_CHANGE:                              ; ...
                les     bp, ds:THISDPB
                clc
                retn
FATREAD_CDS     endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR FAT_GOT_DPB

FATERR:                                 ; ...
                cmp     word ptr es:[bp+0Fh], 0 ; DPB.FAT_SIZE
                jz      short chk_set_fa_1 ; FAT32
                cmp     word ptr es:[bp+1Fh], 0FFFFh ; DPB.FREE_CNT
                jz      short chk_set_fa_3
                mov     word ptr es:[bp+1Fh], 0FFFFh
                jmp     short chk_set_fa_2
; ---------------------------------------------------------------------------

chk_set_fa_1:                           ; ...
                cmp     dword ptr es:[bp+1Fh], 0FFFFFFFFh ; DPB.FREE_CNT
                jz      short chk_set_fa_3
                mov     dword ptr es:[bp+1Fh], 0FFFFFFFFh ;
                                        ; Err in FAT must force recomp of freespace

chk_set_fa_2:                           ; ...
                or      byte ptr es:[bp+18h], 1 ; DPB.FIRST_ACCESS

chk_set_fa_3:                           ; ...
                and     di, 0FFh
                mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                mov     ah, 1Ah
                mov     al, ds:THISDRV
                call    FATAL1
                les     bp, ds:THISDPB
                cmp     al, 3
                jnz     short FAT_GOT_DPB ; User said retry

FATERR_fail:                            ; ...
                stc                     ; User said FAIL
                retn
; END OF FUNCTION CHUNK FOR FAT_GOT_DPB

; =============== S U B R O U T I N E =======================================


FAT_GOT_DPB     proc near               ; ...

; FUNCTION CHUNK AT C6B3 SIZE 00000047 BYTES

                push    ss
                pop     ds
                mov     ax, es
                or      ax, bp
                jz      short FATERR_fail
                mov     al, 15
                mov     ah, es:[bp+1]   ; [ES:BP+DPB.UNIT]
                mov     word ptr ds:DEVCALL_REQLEN, ax
                mov     ds:DEVCALL_REQFUNC, 1
                mov     ds:DEVCALL_REQSTAT, 0
                mov     al, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
                mov     ds:CALLUNIT, al
                push    es
                push    ds
                mov     bx, offset DEVCALL_REQLEN
                lds     si, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                pop     es
                call    DEVIOCALL2
                push    ss
                pop     ds
                pop     es
                mov     di, ds:DEVCALL_REQSTAT
                or      di, di
                js      FATERR
                mov     ah, es:[bp+18h] ; [es:bp+DPB.FIRST_ACCESS]
                and     ah, 80h
                jz      short fgdpb_1
                cmp     byte ptr es:[bp+18h], 0FFh
                jnz     short fgdpb_1
                mov     es:[bp+18h], ah ; [es:bp+DPB.FIRST_ACCESS]

fgdpb_1:                                ; ...
                and     byte ptr es:[bp+18h], 7Fh ; [es:bp+DPB.FIRST_ACCESS]
                mov     al, ds:THISDRV
                cmp     ds:VOLCHNG_FLAG, al
                jnz     short CHECK_BYT
                mov     ds:VOLCHNG_FLAG, 0FFh
                jmp     GOGETBPB
; ---------------------------------------------------------------------------

CHECK_BYT:                              ; ...
                or      ah, ds:CALLBR
                jns     short CHECK_ZR
                jmp     short NEWDSK
; ---------------------------------------------------------------------------

CHECK_ZR:                               ; ...
                jz      short CHKBUFFDIRT
                clc
                retn
; ---------------------------------------------------------------------------

DISK_CHNG_ERR:                          ; ...
                push    es
                push    bp
                les     bp, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                test    byte ptr es:[bp+5], 8 ; [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
                pop     bp
                pop     es
                jz      short FAIL_OPJ2
                push    ds
                push    di
                push    ss
                pop     ds
                mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                push    es
                les     di, dword ptr ds:CALLVIDM
                mov     word ptr ds:EXTERRPT+2, es
                pop     es
                mov     word ptr ds:EXTERRPT, di
                mov     ax, 0Fh         ; error_I24_wrong_disk
                mov     ds:READOP, 1
                call    HARDERR
                pop     di
                pop     ds
                cmp     al, 3

FAIL_OPJ2:                              ; ...
                jz      short FAIL_OP
                jmp     FAT_GOT_DPB
; ---------------------------------------------------------------------------

CHKBUFFDIRT:                            ; ...
                cmp     ds:DirtyBufferCount, 0
                jz      short NEWDSK
                call    GETCURHEAD

nbuffer:                                ; ...
                cmp     [di+4], al      ; [di+BUFFINFO.buf_ID]
                jnz     short lfnxt
                test    byte ptr [di+5], 40h ; [di+BUFFINFO.buf_flags],buf_dirty
                jz      short lfnxt
                push    ss
                pop     ds
                clc
                retn
; ---------------------------------------------------------------------------

FAIL_OP:                                ; ...
                push    ss
                pop     ds
                stc
                retn
; ---------------------------------------------------------------------------

lfnxt:                                  ; ...
                mov     di, [di]        ; [di+BUFFINFO.buf_next]
                cmp     cs:FIRST_BUFF_ADDR, di
                jnz     short nbuffer

NEWDSK:                                 ; ...
                call    GETCURHEAD

nxbuffer:                               ; ...
                cmp     [di+4], al
                jnz     short lfnxt2
                test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
                jnz     short DISK_CHNG_ERR
                mov     word ptr [di+4], 20FFh ; [DI+BUFFINFO.buf_ID],
                                        ; (buf_visit*256)+0FFh ; free up
                call    SCANPLACE
                jmp     short skpbuff
; ---------------------------------------------------------------------------

lfnxt2:                                 ; ...
                mov     di, [di]        ; [di+BUFFINFO.buf_next]

skpbuff:                                ; ...
                cmp     di, cs:FIRST_BUFF_ADDR
                jnz     short nxbuffer
                cmp     ss:SC_CACHE_COUNT, 0
                jz      short GOGETBPB
                cmp     al, cs:CurSC_DRIVE
                jnz     short GOGETBPB
                mov     cs:CurSC_DRIVE, 0FFh

GOGETBPB:                               ; ...
                lds     di, es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                test    byte ptr [di+5], 20h ; [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
                jnz     short GETFREEBUF
                push    ss
                pop     ds
                mov     word ptr es:[bp+2], 200h ; [es:bp+DPB.SECTOR_SIZE]
                mov     word ptr es:[bp+6], 1 ; [es:bp+DPB.FIRST_FAT]
                mov     byte ptr es:[bp+8], 1 ; [es:bp+DPB.FAT_COUNT]
                mov     word ptr es:[bp+0Dh], 3 ; [es:bp+DPB.MAX_CLUSTER]
                mov     word ptr es:[bp+0Fh], 1 ; [es:bp+DPB.FAT_SIZE]
                mov     ds:CLUSTNUM_HW, 0
                mov     bx, 2
                call    UNPACK
                lds     di, ds:CURBUF
                jb      short FAIL_OP
                jmp     short unpack_ok
; ---------------------------------------------------------------------------

GETFREEBUF:                             ; ...
                cmp     ss:BuffInHMA, 0
                lds     di, ss:LoMemBuff
                jnz     short GOTGETBUF
                push    es
                push    bp
                xor     dx, dx
                mov     ss:HIGH_SECTOR, dx
                call    GETCURHEAD
                call    BUFWRITE
                pop     bp
                pop     es
                jb      FAIL_OP

unpack_ok:                              ; ...
                add     di, 24

GOTGETBUF:                              ; ...
                mov     ss:CALLXAD_2, ds ; [SS:CALLXAD+2]
                push    ss
                pop     ds
                mov     word ptr ds:CALLBR, di ; [CALLXAD]
                mov     al, 22
                mov     ah, es:[bp+1]   ; [ES:BP+DPB.UNIT]
                mov     word ptr ds:DEVCALL_REQLEN, ax
                mov     ds:DEVCALL_REQFUNC, 2
                mov     ds:DEVCALL_REQSTAT, 0
                mov     al, es:[bp+17h] ; [ES:BP+DPB.MEDIA]
                mov     ds:CALLUNIT, al ; [CALLMED]
                push    es
                push    ds
                push    word ptr es:[bp+15h] ; [ES:BP+DPB.DRIVER_ADDR+2]
                push    word ptr es:[bp+13h] ; [ES:BP+DPB.DRIVER_ADDR]
                mov     bx, offset DEVCALL_REQLEN ; offset DEVCALL
                pop     si
                pop     ds
                pop     es
                call    DEVIOCALL2
                pop     es
                push    ss
                pop     ds
                mov     di, ds:DEVCALL_REQSTAT
                or      di, di
                js      gotgetbuf12
                lds     si, dword ptr ds:CALLBPB
                xor     ax, ax
                mov     cx, ax
                mov     es:[bp+1Dh], ax ; [ES:BP+DPB.NEXT_FREE]
                cmp     word ptr [si+0Bh], 0 ; [si+BPB.fatsecs]
                jnz     short gotgetbuf1
                mov     es:[bp+39h], ax ; [ES:BP+DPB.FAT32_NXTFREE],0
                mov     es:[bp+3Bh], ax ; [ES:BP+DPB.FAT32_NXTFREE+2],0
                mov     dword ptr es:[bp+1Fh], 0FFFFFFFFh ; [ES:BP+DPB.FREE_CNT]
                mov     cx, 4558h       ; 'XE' in NASM syntax
                                        ; FAT32 extended BPB/DPB signature
                mov     dx, 4152h       ; 'RA' in NASM syntax

gotgetbuf1:                             ; ...
                call    $SETDPB
                lds     di, dword ptr ss:CALLBR ; [SS:CALLXAD]
                btr     dword ptr es:[bp+18h], 0 ; [ES:BP+DPB.FIRST_ACCESS]
                jb      gotgetbuf7
                cmp     word ptr es:[bp+0Fh], 0 ; [ES:BP+DPB.FAT_SIZE]
                jnz     gotgetbuf7
                mov     dx, es:[bp+25h] ; [es:bp+DPB.FSINFO_SECTOR]
                inc     dx
                jz      gotgetbuf7
                dec     dx
                mov     ss:HIGH_SECTOR, 0
                mov     bx, di
                mov     cx, 1
                mov     ss:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                cmp     ss:BuffInHMA, 0
                jz      short gotgetbuf2
                push    es
                push    ds
                lds     bx, ss:LoMemBuff

gotgetbuf2:                             ; ...
                push    di
                push    bx
                call    DREAD
                pop     bx
                pop     di
                pushf
                cmp     ss:BuffInHMA, 0
                jz      short gotgetbuf3
                mov     cx, es:[bp+2]   ; [es:bp+DPB.SECTORSIZE]
                shr     cx, 1
                popf
                mov     si, bx
                mov     bx, di
                pop     es
                cld
                rep movsw
                push    es
                pop     ds
                mov     di, bx
                pop     es
                pushf

gotgetbuf3:                             ; ...
                popf
                jb      short gotgetbuf5
                cmp     dword ptr [di], 41615252h ; 'RRaA' in NASM syntax
                jnz     short gotgetbuf5
                cmp     dword ptr [di+484], 61417272h ; 'rrAa' in NASM syntax
                jnz     short gotgetbuf5
                mov     eax, [di+488]   ; FSI_FreeCount
                cmp     eax, es:[bp+2Dh] ; [ES:BP+DPB.LAST_CLUSTER]
                jnb     short gotgetbuf4
                mov     es:[bp+1Fh], eax ; [ES:BP+DPB.FREE_CNT]

gotgetbuf4:                             ; ...
                mov     eax, [di+492]   ; FSI_Nxt_Free
                cmp     eax, es:[bp+2Dh]
                jnb     short gotgetbuf5
                mov     es:[bp+39h], eax ; [es:bp+DPB.FAT32_NXTFREE]
                mov     es:[bp+1Dh], ax ; [es:bp+DPB.NEXT_FREE]

gotgetbuf5:                             ; ...
                cmp     ss:BuffInHMA, 0
                jz      short gotgetbuf6
                mov     ax, ds
                cmp     ax, word ptr ss:LoMemBuff+2
                jz      short gotgetbuf11

gotgetbuf6:                             ; ...
                mov     word ptr [di-20], 0FFh ; BUFFINFO.buf_wrtcnt

gotgetbuf7:                             ; ...
                cmp     ss:BuffInHMA, 0
                jz      short gotgetbuf8
                mov     ax, ds
                cmp     ax, word ptr ss:LoMemBuff+2
                jz      short gotgetbuf11

gotgetbuf8:                             ; ...
                cmp     word ptr es:[bp+6], 1 ; [ES:BP+DPB.FIRST_FAT]
                jz      short gotgetbuf9
                mov     word ptr [di-20], 0FFh ; BUFFINFO.buf_ID

gotgetbuf9:                             ; ...
                mov     al, es:[bp+8]   ; [es:bp+DPB.FAT_COUNT]
                mov     [di-14], al     ; BUFFINFO.buf_wrtcnt
                movzx   eax, word ptr es:[bp+0Fh] ; [es:bp+DPB.FAT_SIZE]
                or      ax, ax
                jnz     short gotgetbuf10
                mov     eax, es:[bp+31h] ; [es:bp+DPB.FAT32_SIZE]

gotgetbuf10:                            ; ...
                mov     [di-13], eax    ; BUFFINFO.buf_wrtcntinc

gotgetbuf11:                            ; ...
                push    ss
                pop     ds
                xor     al, al
                retn
; ---------------------------------------------------------------------------

gotgetbuf12:                            ; ...
                push    ds
                push    di
                lds     di, dword ptr ds:CALLBR ; [CALLXAD]
                mov     word ptr [di-20], 0FFh ; BUFFINFO.buf_ID
                pop     di
                pop     ds
                jmp     FATERR
FAT_GOT_DPB     endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


GETCURHEAD      proc near               ; ...
                lds     di, ss:BufferQueue ; Pointer to the first buffer
                mov     cs:FIRST_BUFF_ADDR, di
                retn
GETCURHEAD      endp


; =============== S U B R O U T I N E =======================================


SCANPLACE       proc near               ; ...
                push    word ptr [di]   ; [di+BUFFINFO.buf_next]
                call    PLACEBUF
                pop     di
                retn
SCANPLACE       endp


; =============== S U B R O U T I N E =======================================


PLACEBUF        proc near               ; ...
                push    ax
                push    bx
                push    si
                mov     ax, [di]        ; [DI+BUFFINFO.buf_next]
                mov     bx, word ptr ss:BufferQueue ; bx = offset of head of list
                cmp     ax, bx          ; Buf = last?
                jz      short nret      ; yes
                cmp     di, bx          ; Buf = first?
                jnz     short not_first ; no
                mov     word ptr ss:BufferQueue, ax
                jmp     short nret      ; Continue with repositioning
; ---------------------------------------------------------------------------

not_first:                              ; ...
                mov     si, [di+2]      ; [DI+BUFFINFO.buf_prev] ; prior Buf
                mov     [si], ax        ; [SI+BUFFINFO.buf_next]
                xchg    ax, si
                mov     [si+2], ax      ; [SI+BUFFINFO.buf_prev]
                mov     si, [bx+2]      ; [BX+BUFFINFO.buf_prev] ; last buffer
                mov     [si], di        ; [SI+BUFFINFO.buf_next] ; Add Buf to end of list
                mov     [bx+2], di      ; [BX+BUFFINFO.buf_prev]
                mov     [di+2], si      ; [DI+BUFFINFO.buf_prev] ; Update link in Buf too
                mov     [di], bx        ; [DI+BUFFINFO.buf_next]

nret:                                   ; ...
                pop     si
                pop     bx
                pop     ax
                cmp     byte ptr [di+4], 0FFh ; [DI+BUFFINFO.buf_ID],-1 ; Buffer FREE?
                jnz     short pbx       ; no
                mov     word ptr ss:BufferQueue, di ; yes

pbx:                                    ; ...
                retn
PLACEBUF        endp

; ---------------------------------------------------------------------------

POINTCOMP:                              ; ...
                cmp     si, di
                jnz     short _ret_label
                push    cx
                push    dx
                mov     cx, ds
                mov     dx, es
                cmp     cx, dx
                pop     dx
                pop     cx

_ret_label:                             ; ...
                retn

; =============== S U B R O U T I N E =======================================


GETBUFFR        proc near               ; ...
                xor     si, si
GETBUFFR        endp


; =============== S U B R O U T I N E =======================================


GETBUFFRB       proc near               ; ...
                mov     ds:PREREAD, ax
                or      si, si
                jz      short getb1
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jnz     short getb1     ; not FAT32
                mov     ax, es:[bp+23h] ; [es:bp+DPB.EXT_FLAGS]
                test    ax, 80h         ; bit 7 -- 1 means only one FAT is active
                jz      short getb1
                and     ax, 0Fh         ; Active FAT is the one referenced in bits 0-3
                jz      short getb1
                push    dx
                movzx   eax, ax         ; Zero based number of active FAT.
                                        ; (Only valid if mirroring is disabled.)
                mul     dword ptr es:[bp+31h] ; [es:bp+DPB.FAT32_SIZE]
                mov     ecx, eax
                shr     ecx, 10h
                pop     dx
                add     dx, ax
                adc     ds:HIGH_SECTOR, cx

getb1:                                  ; ...
                mov     al, es:[bp+0]   ; [ES:BP+DPB.DRIVE]
                mov     bx, 0FFFFh      ; -1
                mov     cx, ds:HIGH_SECTOR
                call    GETCURHEAD

getb10:                                 ; ...
                mov     di, [di+2]      ; [DI+BUFFINFO.buf_prev]
                mov     ah, [di+4]      ; [DI+BUFFINFO.buf_ID]
                cmp     dx, [di+6]      ; [DI+BUFFINFO.buf_sector]
                jnz     short getb11
                cmp     cx, [di+8]      ; [DI+BUFFINFO.buf_sector+2]
                jnz     short getb11
                cmp     ah, al
                jz      getb25

getb11:                                 ; ...
                cmp     ah, 0FFh        ; Free buffer ?
                jnz     short getb12    ; no
                mov     bx, di          ; save buffer (offset) addr

getb12:                                 ; ...
                cmp     di, cs:FIRST_BUFF_ADDR ; back at the front again?
                jnz     short getb10    ; no, continue looking
                cmp     bx, 0FFFFh      ; -1 ; invalid (not a free buffer addr)
                jz      short getb12x
                mov     di, bx          ; restore free buff (header offset) addr
                jmp     short getb13
; ---------------------------------------------------------------------------

getb12x:                                ; ...
                push    cx
                push    si
                push    dx
                push    bp
                push    es
                call    BUFWRITE        ; Write out the dirty buffer
                pop     es
                pop     bp
                pop     dx
                pop     si
                pop     ss:HIGH_SECTOR
                jb      getbx           ; if got hard error

getb13:                                 ; ...
                call    SET_RQ_SC_PARMS ; set parms for secondary cache
                                        ; (NOTE: PCDOS 7.1 doesn't use Secondary Cache)
                xor     ah, ah          ; initial flags
                cmp     byte ptr ss:PREREAD, ah ; am to Read in the new sector?
                jnz     short getb20    ; no, we're done
                lea     bx, [di+24]     ; LEA BX,[DI+BUFINSIZ]
                mov     cx, 1
                push    si
                push    di
                push    dx
                push    es
                cmp     ss:BuffInHMA, 0 ; is buffers in HMA?
                jz      short getb14    ; no
                push    ds
                push    bx
                lds     bx, ss:LoMemBuff ; let's read it into scratch buff

getb14:                                 ; ...
                or      si, si          ; FAT sector ?
                jz      short getb15    ; no
                call    FATSECRD
                mov     ah, 2           ; buf_isFAT
                jmp     short getb17    ; Buffer is marked free if read barfs
; ---------------------------------------------------------------------------

getb15:                                 ; ...
                call    DREAD           ; Buffer is marked free if read barfs
                mov     ah, 0           ; Set buf_flags to no type, DO NOT XOR!

getb17:                                 ; ...
                pushf
                cmp     ss:BuffInHMA, 0 ; did we read into scratch buff ?
                jz      short getb19    ; no
                mov     cx, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                shr     cx, 2
                popf
                mov     si, bx
                pop     di
                pop     es
                cld
                pushf
                rep movsd               ; move the contents of scratch buffer
                push    es
                pop     ds

getb19:                                 ; ...
                popf                    ; Retrieve possible CY from DREAD
                pop     es
                pop     dx
                pop     di
                pop     si
                jb      short getbx

getb20:                                 ; ...
                mov     cx, ss:HIGH_SECTOR
                mov     [di+8], cx      ; [DI+BUFFINFO.buf_sector+2]
                mov     [di+6], dx      ; [DI+BUFFINFO.buf_sector]
                mov     [di+0Fh], bp    ; [DI+BUFFINFO.buf_DPB]
                mov     word ptr [di+11h], es ; [DI+BUFFINFO.buf_DPB+2]
                mov     al, es:[bp+0]   ; [ES:BP+DPB.DRIVE]
                mov     [di+4], ax      ; [DI+BUFFINFO.buf_ID]

getb25:                                 ; ...
                mov     byte ptr [di+0Ah], 1 ; [DI+BUFFINFO.buf_wrtcnt],1
                                        ; Default to not a FAT sector
                xor     eax, eax
                or      si, si          ; FAT sector ?
                jz      short getb30    ; no
                cmp     es:[bp+0Fh], ax ; [es:bp+DPB.FAT_SIZE]
                jnz     short getb27    ; not FAT32
                test    word ptr es:[bp+23h], 80h ; FAT32
                                        ; [es:bp+DPB.EXT_FLAGS]
                jnz     short getb26    ; bit 7 -- 1 means only one FAT is active

getb27:                                 ; ...
                mov     al, es:[bp+8]   ; [es:bp+DPB.FAT_COUNT]
                mov     [di+0Ah], al    ; [di+BUFFINFO.buf_wrtcnt]
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short getb26    ; FAT32
                movzx   eax, word ptr es:[bp+0Fh] ; [es:bp+DPB.FAT_SIZE]
                jmp     short getb30
; ---------------------------------------------------------------------------

getb26:                                 ; ...
                mov     eax, es:[bp+31h] ; [es:bp+DPB.FAT32_SIZE]

getb30:                                 ; ...
                mov     [di+0Bh], eax   ; [di+BUFFINFO.buf_wrtcntinc]
                call    PLACEBUF
                mov     word ptr ss:CURBUF, di
                mov     word ptr ss:CURBUF+2, ds
                clc

getbx:                                  ; ...
                push    ss
                pop     ds
                retn
GETBUFFRB       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR FLUSHBUF

FLUSHBUF2:                              ; ...
                cmp     al, 0FFh        ; -1
                jnz     short flshbuf_2
                xor     bx, bx
                mov     cx, 26

flshbuf_1:                              ; ...
                and     ss:drive_flags[bx], 0F7h ; clear bit 3
                inc     bx
                loop    flshbuf_1

flshbuf_2:                              ; ...
                call    GETCURHEAD
                test    byte ptr ss:DOS34_FLAG, 4 ; FROM_DISK_RESET
                jnz     short scan_buf_queue
                cmp     ss:DirtyBufferCount, 0
                jz      short end_scan

scan_buf_queue:                         ; ...
                call    CHECKFLUSH
                mov     ah, [di+4]      ; [DI+BUFFINFO.buf_ID]
                cmp     ss:WPERR, ah
                jz      short free_the_buf
                test    byte ptr ss:DOS34_FLAG, 4
                jz      short ont_free_the_buf

free_the_buf:                           ; ...
                mov     word ptr [di+4], 0FFh

ont_free_the_buf:                       ; ...
                mov     di, [di]
                cmp     di, cs:FIRST_BUFF_ADDR
                jnz     short scan_buf_queue

end_scan:                               ; ...
                push    ss
                pop     ds
                cmp     ds:FAILERR, 0
                jz      short flushbuf_retn
                stc

flushbuf_retn:                          ; ...
                retn
; END OF FUNCTION CHUNK FOR FLUSHBUF

; =============== S U B R O U T I N E =======================================


CHECKFLUSH      proc near               ; ...
                mov     ah, 0FFh        ; -1
                cmp     [di+4], ah      ; [DI+BUFFINFO.buf_ID]
                jnz     short chkflush1

chkflush_retn:                          ; ...
                retn
; ---------------------------------------------------------------------------

chkflush1:                              ; ...
                cmp     ah, al
                jz      short DOBUFFER
                cmp     al, [di+4]      ; [DI+BUFFINFO.buf_ID]
                clc
                jnz     short chkflush_retn
                xor     bx, bx
                mov     bl, al
                test    ss:drive_flags[bx], 8 ; bit 3
                jnz     short chkflush_retn

DOBUFFER:                               ; ...
                test    byte ptr [di+5], 40h ; [DI+BUFFINFO.buf_flags],buf_dirty
                jz      short chkflush_retn
                push    ax
                push    word ptr [di+4] ; [DI+BUFFINFO.buf_ID]
                call    BUFWRITE
                pop     ax
                jb      short LEAVE_BUF
                and     ah, 0BFh        ; ~buf_dirty
                mov     [di+4], ax      ; [DI+BUFFINFO.buf_ID]

LEAVE_BUF:                              ; ...
                pop     ax

checkflush_retn:                        ; ...
                retn
CHECKFLUSH      endp


; =============== S U B R O U T I N E =======================================


BUFWRITE        proc near               ; ...
                mov     ax, 0FFh
                xchg    ax, [di+4]      ; [DI+BUFFINFO.buf_ID]
                cmp     al, 0FFh
                jz      short checkflush_retn
                test    ah, 40h         ; buf_dirty
                jz      short checkflush_retn
                call    dec_DirtyBufferCount
                cmp     al, ss:WPERR
                jz      short checkflush_retn
                mov     cs:SC_DRIVE, al
                les     bp, [di+15]     ; [DI+BUFFINFO.buf_DPB]
                lea     bx, [di+24]     ; [BUFINSIZ]
                mov     edx, [di+6]     ; [DI+BUFFINFO.buf_sector]
                mov     ecx, edx
                shr     ecx, 16
                mov     ss:HIGH_SECTOR, cx
                movzx   cx, byte ptr [di+10] ; [DI+BUFFINFO.buf_wrtcnt]
                mov     ss:ALLOWED, 18h ; Allowed_RETRY+Allowed_FAIL
                test    ah, 8           ; buf_isDATA
                jz      short NO_IGNORE
                or      ss:ALLOWED, 20h ; Allowed_IGNORE

NO_IGNORE:                              ; ...
                mov     eax, [di+11]    ; [DI+BUFFINFO.buf_wrtcntinc]
                push    di
                or      di, 0FFFFh      ; di = -1
                push    ds
                push    bx
                push    eax

WRTAGAIN:                               ; ...
                push    di
                push    cx
                mov     cx, 1
                push    bx
                push    edx
                push    ds
                cmp     ss:BuffInHMA, 0
                jz      short NBUFFINHMA
                push    cx
                push    es
                mov     si, bx
                mov     cx, es:[bp+2]   ; [es:bp+DPB.SECTOR_SIZE]
                shr     cx, 1
                les     di, ss:LoMemBuff
                mov     bx, di
                cld
                rep movsw
                push    es
                pop     ds
                pop     es
                pop     cx

NBUFFINHMA:                             ; ...
                call    DWRITE
                pop     ds
                pop     edx
                pop     bx
                pop     cx
                pop     di
                pop     eax
                jb      short NOSET
                xor     di, di

NOSET:                                  ; ...
                add     edx, eax
                push    eax
                mov     eax, edx
                shr     eax, 16
                mov     ss:HIGH_SECTOR, ax
                loop    WRTAGAIN
                pop     eax
                pop     bx
                pop     ds
                shr     di, 1
                pop     di
                retn
BUFWRITE        endp


; =============== S U B R O U T I N E =======================================


SET_RQ_SC_PARMS proc near               ; ...
                push    ax
                mov     ax, es:[bp+2]   ; DPB.SECTOR_SIZE
                mov     cs:SC_SECTOR_SIZE, ax ; Last used drive's sector size
                mov     al, es:[bp+0]   ; DPB.DRIVE
                mov     cs:SC_DRIVE, al ; Last Used drive
                pop     ax
                retn
SET_RQ_SC_PARMS endp


; =============== S U B R O U T I N E =======================================


inc_DirtyBufferCount proc near          ; ...
                inc     ss:DirtyBufferCount
                retn
inc_DirtyBufferCount endp


; =============== S U B R O U T I N E =======================================


dec_DirtyBufferCount proc near          ; ...
                cmp     ss:DirtyBufferCount, 0
                jz      short ddcx
                dec     ss:DirtyBufferCount

ddcx:                                   ; ...
                retn
dec_DirtyBufferCount endp

; ---------------------------------------------------------------------------

LOCK_VIOLATION:
                push    ds
                push    es
                push    di
                push    cx
                mov     ax, 21h
                mov     ds:ALLOWED, 18h ; Allowed_FAIL+Allowed_RETRY
                les     bp, ds:THISDPB
                mov     di, 1
                mov     cx, di
                cmp     word ptr es:[bp+0Fh], 0 ; [es:bp+DPB.FAT_SIZE]
                jz      short lockv_1
                mov     ds:HIGH_SECTOR, 0
                mov     dx, es:[bp+0Bh] ; [ES:BP+DPB.FIRST_SECTOR]
                jmp     short lockv_2
; ---------------------------------------------------------------------------

lockv_1:                                ; ...
                mov     dx, es:[bp+2Bh] ; [es:bp+DPB.FCLUS_FSECTOR+2]
                mov     ds:HIGH_SECTOR, dx
                mov     dx, es:[bp+29h] ; [es:bp+DPB.FCLUS_FSECTOR]

lockv_2:                                ; ...
                call    HARDERR
                pop     cx
                pop     di
                pop     es
                pop     ds
                cmp     al, 1           ; 1 = retry, carry clear
                jnz     short lockv_3
                retn
; ---------------------------------------------------------------------------

lockv_3:                                ; ...
                stc
                retn
; ---------------------------------------------------------------------------
exepatch_start  db 6, 8Ch, 0D8h, 2Bh, 0C2h, 8Eh, 0D8h, 8Eh ; ...
                db 0C0h, 0BFh, 0Fh, 0, 57h, 0B9h, 10h, 0
                db 0B0h, 0FFh, 0F3h, 0AEh, 47h, 8Bh, 0F7h, 5Fh
                db 58h, 2Bh, 0C2h, 8Eh, 0C0h, 0B9h, 4, 2
                db 8Bh, 0C6h, 0F7h, 0D0h, 0D3h, 0E8h, 74h, 13h
                db 8Ch, 0DAh, 83h, 0CEh, 0F0h, 2Bh, 0D0h, 73h
                db 8, 0F7h, 0DAh, 0D3h, 0E2h, 2Bh, 0F2h, 33h
                db 0D2h, 8Eh, 0DAh, 87h, 0F7h, 1Eh, 6, 1Fh
                db 7, 0FEh, 0CDh, 75h, 0DBh, 0ACh, 92h, 4Eh
                db 0ADh, 8Bh, 0C8h, 46h, 8Ah, 0C2h, 24h, 0FEh
                db 3Ch, 0B0h, 75h, 5, 0ACh, 0F3h, 0AAh, 0EBh
                db 6, 3Ch, 0B2h, 75h, 6Ch, 0F3h, 0A4h, 92h
                db 0A8h, 1, 74h, 0B9h, 90h, 90h
scan_patch1     db 8Ch, 0C3h, 8Ch, 0D8h, 2Bh, 0C2h, 8Eh, 0D8h ; ...
                db 8Eh, 0C0h, 0BFh, 0Fh, 0, 0B9h, 10h, 0
                db 0B0h, 0FFh, 0F3h, 0AEh, 47h, 8Bh, 0F7h, 8Bh
                db 0C3h, 2Bh, 0C2h, 8Eh, 0C0h, 0BFh, 0Fh, 0
                db 0B1h, 4, 8Bh, 0C6h, 0F7h, 0D0h, 0D3h, 0E8h
                db 74h, 9, 8Ch, 0DAh, 2Bh, 0D0h, 8Eh, 0DAh
                db 83h, 0CEh, 0F0h, 8Bh, 0C7h, 0F7h, 0D0h, 0D3h
                db 0E8h, 74h, 9, 8Ch, 0C2h, 2Bh, 0D0h, 8Eh
                db 0C2h, 83h, 0CFh, 0F0h
scan_patch2     db 8Ch, 0C3h, 8Ch, 0D8h, 48h, 8Eh, 0D8h, 8Eh ; ...
                db 0C0h, 0BFh, 0Fh, 0, 0B9h, 10h, 0, 0B0h
                db 0FFh, 0F3h, 0AEh, 47h, 8Bh, 0F7h, 8Bh, 0C3h
                db 48h, 8Eh, 0C0h, 0BFh, 0Fh, 0, 0B1h, 4
                db 8Bh, 0C6h, 0F7h, 0D0h, 0D3h, 0E8h, 74h, 0Ah
                db 8Ch, 0DAh, 2Bh, 0D0h, 8Eh, 0DAh, 81h, 0CEh
                db 0F0h, 0FFh, 8Bh, 0C7h, 0F7h, 0D0h, 0D3h, 0E8h
                db 74h, 0Ah, 8Ch, 0C2h, 2Bh, 0D0h, 8Eh, 0C2h
                db 81h, 0CFh, 0F0h, 0FFh
scan_patch3     db 8Ch, 0C3h, 8Ch, 0D8h, 48h, 8Eh, 0D8h, 8Eh ; ...
                db 0C0h, 0BFh, 0Fh, 0, 0B9h, 10h, 0, 0B0h
                db 0FFh, 0F3h, 0AEh, 47h, 8Bh, 0F7h, 8Bh, 0C3h
                db 48h, 8Eh, 0C0h, 0BFh, 0Fh, 0, 0B1h, 4
                db 8Bh, 0C6h, 0F7h, 0D0h, 0D3h, 0E8h, 74h, 9
                db 8Ch, 0DAh, 2Bh, 0D0h, 8Eh, 0DAh, 83h, 0CEh
                db 0F0h, 8Bh, 0C7h, 0F7h, 0D0h, 0D3h, 0E8h, 74h
                db 9, 8Ch, 0C2h, 2Bh, 0D0h, 8Eh, 0C2h, 83h
                db 0CFh, 0F0h
scan_com        db 0ACh, 8Ah, 0D0h, 4Eh, 0ADh, 8Bh, 0C8h, 46h ; ...
                db 8Ah, 0C2h, 24h, 0FEh, 3Ch, 0B0h, 75h, 6
                db 0ACh, 0F3h, 0AAh, 0EBh, 7, 90h, 3Ch, 0B2h
                db 75h, 6Bh, 0F3h, 0A4h, 8Ah, 0C2h, 0A8h, 1
; ---------------------------------------------------------------------------

ExePatch:                               ; ...
                call    ExePackPatch
                retn

; =============== S U B R O U T I N E =======================================


ExePackPatch    proc near               ; ...
                push    bx
                mov     bx, es
                cmp     bx, 0FFFh
                jbe     short ep_contep_cont
                pop     bx
                retn
; ---------------------------------------------------------------------------

ep_contep_cont:                         ; ...
                push    ds
                push    es
                push    ax
                push    cx
                push    si
                push    di
                sub     cx, 2           ; is IP >=2
                jb      ep_notpacked    ; no, exit
                mov     di, cx
                mov     es, ax
                mov     ss:UNPACK_OFFSET, di
                cmp     word ptr es:[di], 4252h ; 'RB'
                jnz     ep_notpacked
                push    cs
                pop     ds
                assume ds:BIOSCODE
                add     di, 6Ch
                call    chk_common_str
                jnz     short ep_chkpatch2
                mov     si, offset scan_patch1
                mov     di, ss:UNPACK_OFFSET
                add     di, 28h
                mov     cx, 68          ; size_scan_patch1
                mov     bx, 142         ; CHKSUM1_LEN
                mov     ax, 0EF4Eh      ; PATCH1_CHKSUM
                call    chk_patchsum
                jb      short ep_done1
                mov     si, offset exepatch_start ; str1
                mov     cx, 102         ; size_str1
                rep movsb

ep_done1:                               ; ...
                jmp     ep_notpacked
; ---------------------------------------------------------------------------

ep_chkpatch2:                           ; ...
                mov     di, 76h
                call    chk_common_str
                jnz     short ep_chkpatch3
                mov     si, offset scan_patch2
                mov     di, 32h         ; PATCH2_OFFSET
                mov     cx, 68          ; size_scan_patch2
                mov     bx, 140         ; CHKSUM2_LEN
                mov     ax, 78B2h       ; PATCH2_CHKSUM
                call    chk_patchsum
                jnb     short ep_patchcode2
                mov     si, offset scan_patch2
                mov     cx, 68          ; size_scan_patch2
                mov     bx, 129         ; CHKSUM2A_LEN
                mov     ax, 1C47h       ; PATCH2A_CHKSUM
                call    chk_patchsum
                jb      short ep_notpacked

ep_patchcode2:                          ; ...
                mov     si, offset exepatch_start
                mov     cx, 3           ; first_stop
                rep movsb
                mov     ax, 4890h       ; ax = opcodes for dec ax, nop
                stosw
                add     si, 2
                mov     cx, 20          ; second_stop
                rep movsb
                stosw                   ; put in dec ax and nop
                add     si, 2
                mov     cx, 75          ; last_stop
                rep movsb
                jmp     short ep_notpacked
; ---------------------------------------------------------------------------

ep_chkpatch3:                           ; ...
                mov     di, 74h
                call    chk_common_str
                jnz     short ep_notpacked
                mov     si, offset scan_patch3
                mov     di, 32h         ; PATCH3_OFFSET
                mov     cx, 66          ; size_scan_patch3
                mov     bx, 139         ; CHKSUM3_LEN
                mov     ax, 4EDEh       ; PATCH3_CHKSUM
                call    chk_patchsum
                jb      short ep_notpacked
                mov     si, offset exepatch_start ; str1
                mov     cx, 3           ; first_stop
                rep movsb
                mov     al, 48h         ; al = opcode for dec ax
                stosb
                add     si, 2
                mov     cx, 20          ; second_stop
                rep movsb
                stosb                   ; put in dec ax
                add     si, 2
                mov     cx, 75          ; last_stop
                rep movsb

ep_notpacked:                           ; ...
                pop     di
                pop     si
                pop     cx
                pop     ax
                pop     es
                pop     ds
                assume ds:nothing
                pop     bx
                retn
ExePackPatch    endp


; =============== S U B R O U T I N E =======================================


chk_common_str  proc near               ; ...
                mov     si, offset scan_com
                mov     cx, 32          ; size_scan_com
                repe cmpsb
                jz      short ccs_done
                cmp     byte ptr es:[di-1], 56h
                jnz     short ccs_done
                repe cmpsb

ccs_done:                               ; ...
                retn
chk_common_str  endp


; =============== S U B R O U T I N E =======================================


chk_patchsum    proc near               ; ...
                push    di
                repe cmpsb
                jnz     short cp_fail   ; Q: does the patch match
                                        ; N: exit
                                        ; Y:
                mov     di, ss:UNPACK_OFFSET ; di -> start of unpack code
                mov     cx, bx          ; cx = length of check sum
                mov     bx, ax          ; save check sum passed to us in bx
                xor     ax, ax

ep_chksum:                              ; ...
                add     ax, es:[di]
                add     di, 2
                loop    ep_chksum
                pop     di
                cmp     ax, bx          ; Q: does the check sum match
                jnz     short cp_fail   ; N: exit
                                        ; Y:
                clc
                retn
; ---------------------------------------------------------------------------

cp_fail:                                ; ...
                stc
                retn
chk_patchsum    endp ; sp-analysis failed

; ---------------------------------------------------------------------------

DOSINIT:                                ; ...
                cli
                cld
                push    ds
                push    si
                mov     word ptr cs:BCONX, ax
                mov     word ptr cs:BCONX+2, bx
                mov     ax, 3B4h        ; DOSDATA (MSDOS.SYS data) segment
                mov     ds, ax
                assume ds:nothing
                mov     ax, 70h         ; BIOSDATA (IO.SYS data) segment
                mov     es, ax
                assume es:nothing
                mov     es, es:DosDataSg ; Get free location in low memory
                assume es:nothing
                xor     si, si
                xor     di, di
                mov     cx, 4944        ; DOSDATASIZE (from 3440h to 4790h)
                                        ; get end of dosdata = size of dosdata
                shr     cx, 2
                rep movsd
                push    es
                pop     ds
                assume ds:nothing
                mov     si, offset COUNTRY_CDPG
                mov     word ptr [si+79], ds ; UCASE_TAB+2
                mov     word ptr [si+84], ds ; FILE_UCASE_TAB+2
                mov     word ptr [si+89], ds ; FILE_CHAR_TAB+2
                mov     word ptr [si+94], ds ; COLLATE_TAB+2
                mov     word ptr [si+128], ds ; MAP_CASE+2
                mov     word ptr [si+99], ds ; DBCS_TAB+2
                pop     large [ds:NULDEV] ; device chain
                mov     ds:ENDMEM, dx
                mov     cs:DosDSeg, es
                mov     ax, cs
                call    patch_vec_segments
                mov     ds:USER_SP, sp
                mov     ds:USER_SS, ss
                mov     ax, ds
                mov     ss, ax
                mov     sp, 920h        ; dosdata:dskstack
                mov     ds:FixExePatch, offset RetExePatch
                mov     ds:ChkCopyProt, offset RetExePatch
                mov     ds:Instance_Table_Seg, ds
                mov     ds:Unknown_Table_Seg, ds
                mov     si, offset CONTPOS_seg ; Instance_Table+2

Instance_init_loop:                     ; ...
                cmp     word ptr [si], 0
                jz      short Instance_init_loop_2
                mov     word ptr [si], ds ; DOSDATA segment
                add     si, 6           ; size_of_Win386_IIS
                jmp     short Instance_init_loop
; ---------------------------------------------------------------------------

Instance_init_loop_2:                   ; ...
                cmp     si, offset Unknown_Table_2
                jnb     short Instance_init_ok
                mov     si, offset Unknown_Table_2 ; segment of the Unknown_Table
                jmp     short Instance_init_loop
; ---------------------------------------------------------------------------

Instance_init_ok:                       ; ...
                lds     si, ds:NULDEV
                mov     ax, 0
                call    CHARINIT
                push    si
                push    ss
                pop     es
                mov     di, offset SFT0_SFTable ; SFTABL+SFT.SFTable
                mov     ax, 3           ; Refcount
                stosw
                dec     al
                stosw                   ; Access rd/wr, compatibility
                xor     al, al
                stosb                   ; attribute
                mov     al, 0C3h        ; devid_device_EOF|devid_device|ISCIN|ISCOUT
                stosw
                mov     ax, si
                stosw                   ; device pointer in devptr
                mov     ax, ds
                stosw
                xor     eax, eax        ; 0
                mov     es:[di+20h], eax ; SFTABL+SFT.SFTable+SF_ENTRY.sf_fclus32 = 0
                stosd                   ; firclus, time
                stosw                   ; date
                dec     ax              ; -1
                stosd                   ; size
                inc     ax
                stosd                   ; position
                add     di, 7
                add     si, 10          ; SYSDEV.NAME
                mov     cx, 2
                rep movsd               ; name
                mov     cl, 3
                mov     al, 20h ; ' '
                rep stosb               ; extension
                pop     si
                or      byte ptr [si+4], 3 ; [SI+SYSDEV.ATT],ISCIN|ISCOUT
                mov     word ptr ss:BCON, si
                mov     word ptr ss:BCON+2, ds

CHAR_INIT_LOOP:                         ; ...
                lds     si, [si]        ; device chain
                mov     ax, 0
                call    CHARINIT        ; initialize console driver
                test    byte ptr [si+4], 8 ; [SI+SYSDEV.ATT],ISCLOCK
                jz      short CHAR_INIT_LOOP
                mov     word ptr ss:BCLOCK, si
                mov     word ptr ss:BCLOCK+2, ds
                mov     bp, 1350h       ; MSDAT001E ; ES:BP points to DPB
                mov     word ptr ss:DPBHEAD, bp
                mov     word ptr ss:DPBHEAD+2, es

PERDRV:                                 ; ...
                lds     si, [si]        ; [SI+SYSDEV.NEXT] ; Next device
                cmp     si, 0FFFFh      ; -1
                jz      CONTINIT
                mov     ax, 0
                call    CHARINIT
                test    word ptr [si+4], 8000h ; [SI+SYSDEV.ATT],DEVTYP
                jnz     short PERDRV    ; Skip any other character devs
                mov     cl, ss:CALLUNIT
                xor     ch, ch
                mov     [si+10], cl
                mov     bl, ss:NUMIO
                mov     bh, 0
                mov     dh, 0
                add     ss:NUMIO, cl

PERDRV2:                                ; ...
                mov     dl, 0
                test    byte ptr [si+5], 8 ; [SI+SYSDEV.ATT+1], DEVOPCL
                jz      short PERUNIT
                mov     al, 0Fh
                mov     ah, dh
                call    CHARINIT
                test    ah, 2
                jz      short PERUNIT
                or      dl, 6

PERUNIT:                                ; ...
                push    ds
                push    si
                lds     si, dword ptr ss:CALLBPB
                mov     si, [si]
                add     ss:CALLBPB, 2
                mov     es:[bp+0], bl   ; [ES:BP+DPB.DRIVE]
                mov     es:[bp+1], dh   ; [ES:BP+DPB.UNIT]
                or      ss:drive_flags[bx], dl
                push    bx
                push    cx
                push    dx
                mov     cx, 4558h       ; 'XE'
                mov     dx, 4152h       ; 'RA'
                call    $SETDPB         ; build DPB!
                mov     ax, es:[bp+2]   ; [ES:BP+DPB.SECTOR_SIZE]
                cmp     ax, ss:MAXSEC
                jbe     short NOTMAX
                mov     ss:MAXSEC, ax

NOTMAX:                                 ; ...
                mov     ax, bp
                add     ax, 61          ; next DPB (DPB size = 61)
                mov     es:[bp+25], ax  ; DPB.NEXT_DPB offset
                mov     word ptr es:[bp+27], es ; DPB.NEXT_DPB segment
                mov     byte ptr es:[bp+24], 80h ; DPB.FIRST_ACCESS
                pop     dx
                pop     cx
                pop     bx
                pop     si
                pop     ds
                mov     es:[bp+19], si  ; DPB.DRIVER_ADDR offset
                mov     word ptr es:[bp+21], ds ; DPB.DRIVER_ADDR segment
                inc     dh
                inc     bx
                add     bp, 61          ; DPBSIZ
                loop    PERDRV2
                jmp     PERDRV
; ---------------------------------------------------------------------------

CONTINIT:                               ; ...
                sub     bp, 61          ; sub bp,DPBSIZ ; back up to last dpb
                mov     word ptr [bp+19h], 0FFFFh ; [bp+DPB.NEXT_DPB],-1
                mov     word ptr [bp+1Bh], 0FFFFh ; [bp+DPB.NEXT_DPB+2],-1
                add     bp, 61          ; DPBSIZ ; advance to free memory again
                                        ; the DPB chain is done.
                push    ss
                pop     ds
                mov     ax, bp          ; round up to segment
                add     ax, 0Fh
                shr     ax, 4
                mov     dx, ds          ; dx = dosdata segment
                add     dx, ax          ; dx = ds+ax first free segment
                mov     ds:DOSSEG_INIT, ds
                xor     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     es, ax
                assume es:BIOSDATA
                mov     word ptr 0, offset jmp_DIVOV
                mov     di, 80h         ; INTBASE (INT 20h)
                mov     ax, offset irett
                mov     cx, 9           ; sets offsets for ints 20h-28h

iset1:                                  ; ...
                stosw
                add     di, 2
                loop    iset1
                add     di, 4           ; skip vector 29h
                mov     cx, 6           ; sets offsets for ints 2Ah-2Fh

iset2:                                  ; ...
                stosw
                add     di, 2
                loop    iset2
                add     di, 8           ; skip vector 30h & 31h
                mov     cx, 14          ; sets offsets for ints 32h-3Fh

iset3:                                  ; ...
                stosw
                add     di, 2
                loop    iset3
                mov     byte ptr 00C0h, 0EAh ; mov byte [ENTRYPOINT],mi_long_jmp
                mov     word ptr 00C1h, offset CALL_ENTRY ; mov word [ENTRYPOINT+1],CALL_ENTRY
                mov     word ptr 0080h, offset QUIT ; mov word [addr_int_abort],QUIT
                mov     word ptr 0090h, offset INT24h
                mov     word ptr 0084h, offset COMMAND ; mov word [addr_int_command],COMMAND
                mov     word ptr 0094h, offset ABSDRD
                mov     word ptr 0098h, offset ABSDWRT
                mov     word ptr 009Ch, offset stay_resident
                mov     word ptr 0088h, 100h ; mov word [addr_int_terminate],100h
                mov     word ptr 008Ah, dx ; mov word [addr_int_terminate+2],dx
                push    ss
                pop     es
                assume es:nothing
                mov     word ptr 00BCh, offset INT2F ; mov word [02Fh*4],INT2F
                push    ss
                pop     ds
                assume ds:nothing
                push    dx              ; remember address of arena
                inc     dx              ; leave room for arena header
                mov     ds:CurrentPDB, dx ; set current pdb
                xor     di, di          ; 0
                mov     es, dx          ; point es:di at end of memory where psp will be
                xor     eax, eax
                mov     cx, 64          ; psp is 64 dwords
                rep stosd
                mov     ax, ds:ENDMEM
                call    SETMEM          ; build psp at dx; ax is memory size
                push    ss
                pop     ds
                mov     di, 24          ; PDB.JFN_TABLE
                xor     ax, ax          ; es:di -> pdb_jfn_table in psp
                stosw                   ; 0
                stosb                   ; 0,1 and 2 are con device
                mov     al, 0FFh
                mov     cx, 17          ; FILPERPROC-3
                rep stosb               ; rest are unused
                push    ss
                pop     es
                mov     ds:SFT_ADDR_seg, ds
                mov     word ptr ds:SFTABL+2, ds
                mov     si, offset SysInitTable
                mov     word ptr es:[si+6], es ; [es:si+SYSI_EXT.Country_Tab+2]
                mov     word ptr es:[si+2], es ; ...
                                        ; [es:si+SYSI_EXT.SysInitVars+2]
                mov     word ptr es:BUFFHEAD+2, es
                mov     si, offset BufferQueue ; HASHINITVAR
                mov     word ptr es:BUFFHEAD, si
                pop     dx              ; restore address of arena
                mov     word ptr ds:DMAADD+2, dx
                mov     es:arena_head, dx ; ...
                mov     ds, dx
                mov     byte ptr ds:0, 5Ah ; 'Z' ; [ARENA.SIGNATURE],arena_signature_end

iset4:                                  ; ...
                mov     word ptr ds:1, 0 ; [ARENA.OWNER],arena_owner_system
                mov     ax, ss:ENDMEM
                sub     ax, dx
                dec     ax
                mov     ds:3, ax        ; [ARENA.SIZE]
                mov     di, offset SFT0_SFTable ; SFTABL+SFT.SFTable
                mov     ax, 3           ; adjust refcount
                stosw
                mov     di, offset SysInitTable
                inc     dx              ; advance dx from arena to psp
                mov     ds, dx          ; point ds to psp
                mov     ax, ss:USER_SP
                mov     ss, ss:USER_SS
                mov     sp, ax
                mov     cx, offset exepatch_start
                mov     ax, offset DOSINIT
                mov     bx, offset drive_flags
                retf

; =============== S U B R O U T I N E =======================================


CHARINIT        proc near               ; ...
                mov     ss:DEVCALL_REQLEN, 25 ; 19h
                mov     ss:DEVCALL_REQUNIT, ah
                mov     ss:DEVCALL_REQFUNC, al
                mov     ss:DEVCALL_REQSTAT, 0
                push    es
                push    bx
                mov     bx, offset DEVCALL_REQLEN ; offset DEVCALL
                push    ss
                pop     es
                call    DEVIOCALL2
                mov     ax, ss:DEVCALL_REQSTAT
                pop     bx
                pop     es
                retn
CHARINIT        endp

; ---------------------------------------------------------------------------

_seg_reinit:
                mov     ax, es
                call    patch_vec_segments
                push    ds
                mov     ds, cs:DosDSeg
                mov     ds:FixExePatch, offset ExePatch
                pop     ds
                retf

; =============== S U B R O U T I N E =======================================


patch_vec_segments proc near            ; ...
                push    es              ; ax = BIOSCODE (DOSCODE) segment
                xor     cx, cx          ; 0
                mov     es, cx
                assume es:BIOSDATA
                mov     word ptr es:02h, ax ; INT 00h segment
                mov     di, 82h         ; INT 20h segment
                mov     cx, 2

ps_set1:                                ; ...
                stosw                   ; INT 21h segment
                add     di, 2
                loop    ps_set1
                add     di, 4           ; INT 23h segment
                stosw
                add     di, 2
                mov     cx, 5

ps_set2:                                ; ...
                stosw                   ; INT 24h to INT 28h segment
                add     di, 2
                loop    ps_set2
                add     di, 4
                mov     cx, 6

ps_set3:                                ; ...
                stosw                   ; INT 2Ah to INT 2Fh segment
                add     di, 2
                loop    ps_set3
                mov     word ptr es:0C3, ax ; INT 30h far jump address
                                        ; [ENTRYPOINT+3],ax
                add     di, 8           ; INT 32h to INT 3Fh segment
                mov     cx, 14

ps_set4:                                ; ...
                stosw
                add     di, 2
                loop    ps_set4
                mov     cx, 3B4h        ; DOSDATA (MSDOS.SYS data) segment
                mov     es, cx
                assume es:nothing
                mov     di, offset JShare
                mov     cx, 15          ; JSHARE segments = DOSDATA

ps_set5:                                ; ...
                add     di, 2
                stosw
                loop    ps_set5
                pop     es
                assume es:nothing
                retn
patch_vec_segments endp

; ---------------------------------------------------------------------------
                db 10 dup(0)
BIOSCODE        ends

; ===========================================================================

; Segment type: Pure code
SYSINIT         segment byte public 'CODE' use16
                assume cs:SYSINIT
                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
SYSINITSTART    dw 0                    ; ...
stackcount      dw 9                    ; ...
stackat         dw 0
stacksize       dw 256                  ; ...
stacks          dw 2 dup(0)             ; ...
firstentry      dw offset stacks        ; ...
lastentry       dw 72                   ; ...
                                        ; stacks+(defaultcount*entrysize)-entrysize
                                        ; defaultcount = 9, entrysize = 8, offset stacks = 8
nextentry       dw 72                   ; ...
                                        ; stacks+(defaultcount*entrysize)-entrysize
old08           dd 0
; ---------------------------------------------------------------------------

int08:
                call    near ptr do_int_stacks

loc_11A99:
                adc     al, [bx+si]
; ---------------------------------------------------------------------------
old09           dd 0
; ---------------------------------------------------------------------------

int09:
                jmp     short keyboard_lbl
; ---------------------------------------------------------------------------
                nop
; ---------------------------------------------------------------------------
                db 0
; ---------------------------------------------------------------------------

keyboard_lbl:                           ; ...
                call    near ptr do_int_stacks

loc_11AA6:
                sbb     ax, [bx+si]
; ---------------------------------------------------------------------------
old70           dd 0
; ---------------------------------------------------------------------------

int70:
                call    near ptr do_int_stacks

loc_11AAF:
                sub     [bx+si], al

int0A:
                jmp     short entry_int0A_stk
; ---------------------------------------------------------------------------
old0A           dd 0
word_11AB7      dw 424Bh
                db 0
; ---------------------------------------------------------------------------

loc_11ABA:
                jmp     short intret_0A
; ---------------------------------------------------------------------------
byte_11ABC      db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int0A_stk:                        ; ...
                call    near ptr do_int_stacks

loc_11AC6:
                xor     ax, [bx+si]

intret_0A:                              ; ...
                iret
; ---------------------------------------------------------------------------

int0B:
                jmp     short entry_int0B_stk
; ---------------------------------------------------------------------------
old0B           dd 0
word_11ACF      dw 424Bh
                db 0
; ---------------------------------------------------------------------------
                jmp     short intret_0B
; ---------------------------------------------------------------------------
byte_11AD4      db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int0B_stk:                        ; ...
                call    near ptr do_int_stacks

loc_11ADE:
                dec     bx
; ---------------------------------------------------------------------------
                db    0
; ---------------------------------------------------------------------------

intret_0B:                              ; ...
                iret
; ---------------------------------------------------------------------------

int0C:
                jmp     short entry_int0C_stk
; ---------------------------------------------------------------------------
old0C           dd 0
word_11AE7      dw 424Bh                ; ...
                db 0
; ---------------------------------------------------------------------------

loc_11AEA:                              ; ...
                jmp     short intret_0C
; ---------------------------------------------------------------------------
word_11AEC      dw 0                    ; ...
logo_screen_msg db 5 dup(0)             ; ...
; ---------------------------------------------------------------------------

entry_int0C_stk:                        ; ...
                call    near ptr do_int_stacks

loc_11AF6:
                arpl    [bx+si], ax

intret_0C:                              ; ...
                iret
; ---------------------------------------------------------------------------

int0D:
                jmp     short entry_int0D_stk
; ---------------------------------------------------------------------------
old0D           dd 0
word_11AFF      dw 424Bh
firstflag0D     db 0
; ---------------------------------------------------------------------------

loc_11B02:
                jmp     short intret_0D
; ---------------------------------------------------------------------------
byte_11B04      db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int0D_stk:                        ; ...
                call    near ptr do_int_stacks

loc_11B0E:
                jnp     short $+2

intret_0D:                              ; ...
                iret
; ---------------------------------------------------------------------------

int0E:
                jmp     short entry_int0E_stk
; ---------------------------------------------------------------------------
old0E           dd 0
                dw 424Bh
firstflag0E     db 0
; ---------------------------------------------------------------------------
                jmp     short intret_0E
; ---------------------------------------------------------------------------
                db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int0E_stk:                        ; ...
                call    near ptr do_int_stacks

loc_11B26:
                xchg    ax, bx
; ---------------------------------------------------------------------------
                db    0
; ---------------------------------------------------------------------------

intret_0E:                              ; ...
                iret
; ---------------------------------------------------------------------------

int72:
                jmp     short entry_int72_stk
; ---------------------------------------------------------------------------
old72           dd 0
                dw 424Bh
firstflag72     db 0
; ---------------------------------------------------------------------------
                jmp     short intret_72
; ---------------------------------------------------------------------------
                db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int72_stk:                        ; ...
                call    near ptr do_int_stacks
                stosw
; ---------------------------------------------------------------------------
                db    0
; ---------------------------------------------------------------------------

intret_72:                              ; ...
                iret
; ---------------------------------------------------------------------------

int73:
                jmp     short entry_int73_stk
; ---------------------------------------------------------------------------
old73           dd 0
word_11B47      dw 424Bh
firstflag73     db 0
; ---------------------------------------------------------------------------
                jmp     short intret_73
; ---------------------------------------------------------------------------
byte_11B4C      db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int73_stk:                        ; ...
                call    near ptr do_int_stacks
                retn
; ---------------------------------------------------------------------------
                db    0
; ---------------------------------------------------------------------------

intret_73:                              ; ...
                iret
; ---------------------------------------------------------------------------

int74:
                jmp     short entry_int74_stk
; ---------------------------------------------------------------------------
old74           dd 0
                dw 424Bh
firstflag74     db 0
; ---------------------------------------------------------------------------
                jmp     short intret_74
; ---------------------------------------------------------------------------
                db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int74_stk:                        ; ...
                call    near ptr do_int_stacks
                fild    dword ptr [bx+si]

intret_74:                              ; ...
                iret
; ---------------------------------------------------------------------------

int76:
                jmp     short entry_int76_stk
; ---------------------------------------------------------------------------
old76           dd 0                    ; ...
                dw 424Bh
                db 0
; ---------------------------------------------------------------------------
                jmp     short intret_76
; ---------------------------------------------------------------------------
                db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int76_stk:                        ; ...
                call    near ptr do_int_stacks
; ---------------------------------------------------------------------------
                dw offset old76
; ---------------------------------------------------------------------------

intret_76:                              ; ...
                iret
; ---------------------------------------------------------------------------

int77:
                jmp     short entry_int77_stk
; ---------------------------------------------------------------------------
old77           dd 0
                dw 424Bh
                db 0
; ---------------------------------------------------------------------------
                jmp     short intret_77
; ---------------------------------------------------------------------------
                db 7 dup(0)
; ---------------------------------------------------------------------------

entry_int77_stk:                        ; ...
                call    near ptr do_int_stacks
                or      ax, [bx+di]

intret_77:                              ; ...
                iret

; =============== S U B R O U T I N E =======================================


do_int_stacks   proc far                ; ...
                push    eax
                push    bp
                push    es
                mov     es, cs:stacks+2
                mov     bp, cs:nextentry
                mov     al, 1
                xchg    al, es:[bp+0]
                cmp     al, 0
                jnz     short notfree02
                sub     cs:nextentry, 8

found02:                                ; ...
                mov     es:[bp+2], sp
                mov     word ptr es:[bp+4], ss
                mov     ax, bp
                mov     bp, es:[bp+6]
                cmp     es:[bp+0], ax
                jnz     short foundbad02
                mov     ax, es
                mov     es, bp
                mov     bp, sp
                mov     bp, [bp+8]
                mov     ss, ax
                mov     sp, es
                mov     es, ax
                mov     bp, cs:[bp+0]
                pushf
                call    dword ptr cs:[bp+0]
                mov     bp, sp
                mov     bp, es:[bp+0]
                mov     ss, word ptr es:[bp+4]
                mov     sp, es:[bp+2]
                mov     byte ptr es:[bp+0], 0
                mov     cs:nextentry, bp
                pop     es
                pop     bp
                pop     eax
                add     sp, 2
                iret
; ---------------------------------------------------------------------------

notfree02:                              ; ...
                cmp     al, 1
                jz      short longpath
                xchg    al, es:[bp+0]
                jmp     short longpath
; ---------------------------------------------------------------------------

foundbad02:                             ; ...
                cmp     bp, cs:firstentry
                jb      short longpath
                mov     bp, ax
                mov     byte ptr es:[bp+0], 3

longpath:                               ; ...
                mov     bp, cs:lastentry

lploopp:                                ; ...
                cmp     byte ptr es:[bp+0], 0
                jnz     short inuse
                mov     al, 1
                xchg    al, es:[bp+0]
                cmp     al, 0
                jz      short found02
                cmp     al, 1
                jz      short inuse
                mov     es:[bp+0], al

inuse:                                  ; ...
                cmp     bp, cs:firstentry
                jz      short skip_nmis
                sub     bp, 8
                jmp     short lploopp
; ---------------------------------------------------------------------------

skip_nmis:                              ; ...
                cli
                mov     al, 0FFh
                out     21h, al         ; Interrupt controller, 8259A.
                out     0A1h, al        ; Interrupt Controller #2, 8259A
                mov     ax, 70h
                mov     ds, ax
                assume ds:nothing
                test    byte ptr ds:8, 40h
                jz      short write_fatal_msg
                sub     di, di
                mov     es, di
                assume es:BIOSDATA

loc_11C64:
                mov     bx, 15h

loc_11C67:
                mov     ax, 1684h
                int     2Fh             ; - Multiplex - MS WINDOWS - GET DEVICE API ENTRY POINT
                                        ; BX = virtual device (VxD) ID, ES:DI = 0000h:0000h
                                        ; Return: ES:DI -> VxD API entry point, or 0:0 if the VxD does not support an API

loc_11C6C:
                mov     ax, es
                or      ax, di
                jz      short write_fatal_msg
                push    cs
                mov     ax, offset write_fatal_msg
                push    ax
                push    es
                push    di
                mov     ax, 1
                retf
; ---------------------------------------------------------------------------

write_fatal_msg:                        ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     si, offset fatal_msg

fatal_loop:                             ; ...
                lodsb
                or      al, al
                jz      short fatal_done
                mov     bl, 7
                mov     ah, 0Eh
                int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
                                        ; AL = character, BH = display page (alpha modes)
                                        ; BL = foreground color (graphics modes)
                jmp     short fatal_loop
; ---------------------------------------------------------------------------

fatal_done:                             ; ...
                hlt
; ---------------------------------------------------------------------------
                jmp     short fatal_done
do_int_stacks   endp ; sp-analysis failed

; ---------------------------------------------------------------------------
fatal_msg       db 19h                  ; ...
byte_11C93      db 370 dup(0)           ; ...
bds1            dw offset bds2          ; ...
                dw 1218h                ; SYSINIT segment
byte_11E09      db 0                    ; ...
                                        ; BDS.drivenum
byte_11E0A      db 0                    ; BDS.drivelet
word_11E0B      dw 512                  ; BDS.BPB (BDS offset 6) ; .bytespersec
                db 0FFh                 ; .secperclus
word_11E0E      dw 1                    ; .resectors
                db 2                    ; .fats
; ---------------------------------------------------------------------------

loc_11E11:                              ; ...
                inc     ax

loc_11E12:
                add     [bx+si+1], ch

loc_11E15:
                add     [bp+si], al
                add     [bx+di], cl
                add     [bx+di], al
; ---------------------------------------------------------------------------
                db    0
dword_11E1C     dd 0                    ; .hiddensectors
dword_11E20     dd 0                    ; .totalsecs32
                                        ; (End of FAT12/FAT16 BPB)
                                        ;
                                        ; FAT32 extensions to BDS
dword_11E24     dd 0                    ; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
                dw 0                    ; .extflags ; BPB_ExtFlags
                dw 0                    ; .fsver ; BPB_FSVer
                dd 0                    ; .rootdirclust ; BPB_RootClus (BDS offset 39)
                dw 0FFFFh               ; .fsinfo ; BPB_FSInfo ; initialized to -1
                dw 0FFFFh               ; .bkbootsec ; BPB_BkBootSec ; initialized to -1
byte_11E34      db 12 dup(0)            ; .reserved ; BPB_Reserved (12 zero bytes)
                db 0                    ; BDS.fatsiz (BDS offset 59)
                dw 0                    ; BDS.opcnt
                db 3
                dw 20h                  ; BDS.flags (BDS offset 63)
                dw 40
                dw 512                  ; recommended bps for this drive
                db 1
                dw 1
                db 2
                dw 224
                dw 360
                db 0F0h
                dw 2
                dw 9
                dw 2
                dw 0
                dw 0
                dw 0
                dw 0
                db 6 dup(0)
                dw 0
                dd 0
                dd 0FFFFFFFFh
                db 12 dup(0)
                db 255                  ; BDS.track (BDS offset 120)
                dw 0FFFFh               ; BDS.tim_lo ; BDS.bdsm_ismini
                dw 0FFFFh               ; BDS.tim_hi
aNoName         db 'NO NAME    ',0      ; BDS.volid
                dd 0                    ; BDS.vol_serial (BDS offset 137)
aFat12          db 'FAT12   ',0         ; BDS.filesys_id
bds2            dw offset bds3          ; ...
                dw 1218h
                db 0, 1, 0, 2, 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2, 0
                db 9, 0, 1, 15h dup(0), 4 dup(0FFh), 0Fh dup(0), 3, 20h
                db 0, 28h, 2 dup(0), 2, 2 dup(1), 0, 2, 0E0h, 0, 68h, 1
                db 0F0h, 2, 0, 9, 0, 2, 15h dup(0), 4 dup(0FFh), 0Ch dup(0)
                db 5 dup(0FFh), 4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h, 4 dup(20h)
                db 5 dup(0), 46h, 41h, 54h, 31h, 32h, 3 dup(20h), 0
bds3            dw offset bds4          ; ...
                dw 1218h
                db 3 dup(0), 2, 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2, 0
                db 9, 0, 1, 15h dup(0), 4 dup(0FFh), 0Fh dup(0), 3, 20h
                db 0, 28h, 2 dup(0), 2, 2 dup(1), 0, 2, 0E0h, 0, 68h, 1
                db 0F0h, 2, 0, 9, 0, 2, 15h dup(0), 4 dup(0FFh), 0Ch dup(0)
                db 5 dup(0FFh), 4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h, 4 dup(20h)
                db 5 dup(0), 46h, 41h, 54h, 31h, 32h, 3 dup(20h), 0
bds4            dw 0FFFFh               ; ...
                dw 0FFFFh
byte_11FCB      db 3 dup(0), 2, 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2, 0
                db 9, 0, 1, 15h dup(0), 4 dup(0FFh), 0Fh dup(0), 3, 20h
                db 0, 28h, 2 dup(0), 2, 2 dup(1), 0, 2, 0E0h, 0, 68h, 1
                db 0F0h, 2, 0, 9, 0, 2, 15h dup(0), 4 dup(0FFh), 0Ch dup(0)
                db 5 dup(0FFh), 4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h, 4 dup(20h)
                db 5 dup(0), 46h, 41h, 54h, 31h, 32h, 3 dup(20h), 0
bds5            dw 0FFFFh
                dw 0FFFFh
byte_12061      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds6            dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds7            dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds8            dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds9            dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds10           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds11           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds12           dw 0FFFFh
                dw 0FFFFh
byte_1247B      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds13           dw 0FFFFh
                dw 0FFFFh
byte_12511      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds14           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds15           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds16           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds17           dw 0FFFFh
                dw 0FFFFh
byte_12769      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds18           dw 0FFFFh
                dw 0FFFFh
byte_127FF      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds19           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds20           dw 0FFFFh
                dw 0FFFFh
byte_1292B      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds21           dw 0FFFFh
                dw 0FFFFh
byte_129C1      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds22           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds23           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds24           dw 0FFFFh
                dw 0FFFFh
byte_12B83      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds25           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds26           dw 0FFFFh
                dw 0FFFFh
byte_12CAF      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds27           dw 0FFFFh
                dw 0FFFFh
byte_12D45      db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds28           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds29           dw 0FFFFh
                dw 0FFFFh
                db 50h, 3, 0, 2, 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0)
                db 4 dup(0FFh), 0Fh dup(0), 3, 20h, 0, 28h, 2 dup(0), 2
                db 2 dup(1), 0, 2, 0, 2, 9, 0, 0F8h, 1, 19h dup(0), 4 dup(0FFh)
                db 0Ch dup(0), 0FFh, 1, 3 dup(0), 4Eh, 4Fh, 20h, 4Eh, 41h
                db 4Dh, 45h, 4 dup(20h), 5 dup(0), 46h, 41h, 54h, 31h
                db 32h, 3 dup(20h), 0
bds_count       dw 0                    ; ...
bpb_array       dw 29 dup(0)            ; ...
CURRENT_DOS_LOCATION dd 0               ; ...
DEVICE_LIST     dd 0                    ; ...
sysi_country    dd 0                    ; ...
_seg_reinit_ptr dd 4E9D27Fh             ; ...
lo_doscod_size  dw 0                    ; ...
hi_doscod_size  dw 0                    ; ...
def_php         dw 0                    ; ...
                dw 200h
                dw 0
byte_12F59      db 0                    ; ...
byte_12F5A      db 1                    ; ...
                db    0
word_12F5C      dw 1                    ; ...
RPLMemTop       dw 0                    ; ...
DEFAULT_DRIVE   db 0                    ; ...
word_12F61      dw 0FFFFh               ; ...
word_12F63      dw 0                    ; ...
word_12F65      dw 0                    ; ...
FILES           db 30                   ; ...
word_12F68      dw 4                    ; ...
byte_12F6A      db 1Ah                  ; ...
CONFBOT         dw 0                    ; ...
word_12F6D      dw 0                    ; ...
word_12F6F      dw 0                    ; ...
word_12F71      dw 0                    ; ...
word_12F73      dw 3A41h                ; ...
word_12F75      dw 5Ch                  ; ...
                db 0
byte_12F78      db 0                    ; ...
word_12F79      dw 0                    ; ...
showcount       db 5 dup(20h)
crlf$           db 0Dh,0Ah,'$'          ; ...
                db 0
                db 0
word_12F85      dw 0                    ; ...
byte_12F87      db 1Ah                  ; ...
BDataSeg        dw 70h                  ; ...
BCodeSeg        dw 4E9h                 ; ...
MEMORY_SIZE     dw 1                    ; ...
word_12F8E      dw 0                    ; ...
word_12F90      dw 4018h                ; ...
word_12F92      dw 0                    ; ...
word_12F94      dw 0                    ; ...
install_flag    db 0                    ; ...
multi_pass_id   db 0                    ; ...
config_size     dw 0                    ; ...
sysinit_base_ptr dd 0                   ; ...
sysinit_ptr     dw 2 dup(0)             ; ...
byte_12FA2      db 14h dup(20h)         ; ...
ldexec_line     db 0                    ; ...
ldexec_start    db 20h                  ; ...
ldexec_parm     db 80 dup(0)            ; ...
iexec_environ   dw 0                    ; ...
                dw offset ldexec_line
iexec_ldexec_line_seg dw 1218h          ; ...
                dw offset byte_12FA2
iexec_ldexec_5c_fcb_seg dw 1218h        ; ...
                dw offset byte_12FA2
iexec_ldexec_6c_fcb_seg dw 1218h        ; ...
byte_13016      db 0                    ; ...
byte_13017      db 0                    ; ...
byte_13018      db 0                    ; ...
byte_13019      db 0                    ; ...
byte_1301A      db 0                    ; ...
donotshownum    db 0                    ; ...
word_1301C      dw 0                    ; ...
word_1301E      dw 0                    ; ...
word_13020      dw 0                    ; ...
word_13022      dw 0                    ; ...
old_area        dw 0                    ; ...
impossible_owner_size dw 0              ; ...
area            dw 0                    ; ...
                dw 0
memhi           dw 0                    ; ...
                dw 0
word_13030      dw 0                    ; ...
TOOMANYDRIVESFLAG db 0                  ; ...
dword_13033     dd 0                    ; ...
word_13037      dw 0                    ; ...
; ---------------------------------------------------------------------------

move_myself:
                cld
                push    cs
                pop     ds
                mov     bx, MEMORY_SIZE
                mov     word_12F5C, bx
                dec     bx              ; one para for an arena at end of mem
                                        ; in case of UMBs
                cmp     RPLMemTop, 0
                jz      short NoRPL
                mov     bx, RPLMemTop
                dec     bx

NoRPL:                                  ; ...
                mov     edx, 0EBD0h     ; need this much room for sysinit
                                        ; (SI_end == sysinit code size)
                mov     ax, dx
                shr     dx, 4           ; off_to_para
                sub     bx, dx          ; segment where sysinit will be located
                mov     es, bx
                assume es:nothing
                mov     ss, bx
                assume ss:nothing
                mov     sp, ax
                xor     si, si
                mov     di, si
                mov     es, bx
                mov     cx, 0C9D0h      ; SI_end == sysinit code size
                                        ; 51664
                shr     cx, 2
                rep movsd
                push    bx
                push    offset SYSIN
                retf
; ---------------------------------------------------------------------------

SYSIN:                                  ; ...
                push    di              ; make BDS tables consequental (in SYSINIT segment)
                mov     ds, bx          ; SYSINIT (final) segment
                assume ds:nothing
                mov     bx, offset bpb_array
                mov     di, offset bds1
                sub     dx, dx          ; 0

_sn_1:                                  ; ...
                inc     ds:bds_count
                mov     word ptr [di+2], cs ; BDS.link+2 (new SYSINIT segment)
                lea     ax, [di+6]      ; BDS.BPB address/offset
                mov     [bx], ax        ; save BPB address (of the BDS)
                add     bx, 2           ; next pointer
                mov     ax, [di]        ; next BDS address/offset
                cmp     ax, 0FFFFh      ; end of BDS link ? (bds1 is last BDS)
                jz      short _sn_3     ; yes
                sub     ax, dx          ; next bds addr - base address
                mov     si, ax          ; offset (from start of new sysinit segment)
                sub     ax, di
                sub     ax, 150         ; - BDS.size
                jbe     short _sn_2     ; no more distance than +150 bytes (consequental)
                add     dx, ax          ; difference
                push    di
                add     di, 150         ; add 150 to previous destination (BDS)
                mov     cx, offset bpb_array ; end of BDS tables (end_of_bdss)
                sub     cx, si          ; distance to end_of_bdss is also byte count
                                        ; (di addr is adjacent, si addr is not, so, di < si)
                shr     cx, 1
                rep movsw               ; move to just after previous BDS
                adc     cx, cx
                rep movsb
                pop     di

_sn_2:                                  ; ...
                sub     [di], dx        ; sub difference, so, result is current+150
                mov     di, [di]        ; next BDS
                jmp     short _sn_1     ; loop (for next)
; ---------------------------------------------------------------------------

_sn_3:                                  ; ...
                mov     ds, ds:BDataSeg
                assume ds:nothing
                mov     ds:start_bds_seg, cs ; new sysinit segment at BIOSDATA:start_bds+2
                pop     di              ; di = end of sysinit
                                        ; offset 0C9D0h (again) ; new SYSINIT:SI_end
                mov     word ptr ds:disksector, di ; disksector buf will be located at SI_end
                mov     word ptr ds:disksector+2, es
                mov     eax, ds:Old4Fh
                mov     ds:Orig4F, eax
                mov     si, offset Jmp_far_Orig4F
                or      eax, eax
                jnz     short _sn_4
                mov     si, offset _iret

_sn_4:                                  ; ...
                xor     ax, ax
                mov     es, ax
                assume es:BIOSDATA
                cli
                mov     word ptr es:dword_13A+2, si ; change INT 4F vector
                mov     word ptr es:dword_13E, ds
                sti
                mov     ds, cs:BCodeSeg
                assume ds:nothing
                mov     ds:sysi_bds_seg, cs ; new/final SYSINIT segment
                mov     ax, 70h         ; BIOSDATA segment

_sn_5:
                mov     ds, ax
                assume ds:nothing
                or      ds:int19sem, 80h
                sub     eax, eax
                mov     es, ax          ; 0
                mov     di, 600h        ; clear 0:0600h to 0:06FFh
                mov     cx, 64
                rep stosd
                mov     di, 600h
                mov     cx, 5
                mov     eax, 204E4F43h  ; 'CON '

_sn_6:                                  ; ...
                stosd
                add     di, 55
                loop    _sn_6
                lds     si, cs:DEVICE_LIST
                assume ds:nothing
                mov     dx, cs:MEMORY_SIZE
                mov     bx, 70h
                mov     ax, 448h
                call    far ptr 4E9h:0CF81h ; dosinit
                mov     cs:def_php, ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     word ptr dword_17B3C, bx
                mov     word ptr dword_17B3C+2, es
                mov     hi_doscod_size, ax
                mov     lo_doscod_size, cx
                mov     eax, es:[di]
                mov     CURRENT_DOS_LOCATION, eax
                mov     eax, es:[di+4]
                mov     sysi_country, eax
                add     bx, 20h ; ' '
                mov     word ptr dword_13033, bx
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                les     bx, es:[bx+12h]
                assume es:nothing
                mov     bx, es:[bx+13h]
                push    bx
                mov     bx, es:[bx+6]
                mov     si, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     si, SYSI_MSG29_PTR
                mov     al, [si]
                mov     uc_yes, al
                mov     es:[bx], al
                mov     al, [si+3]
                mov     lc_yes, al
                mov     es:[bx+2], al
                mov     al, [si+1]
                mov     uc_no, al
                mov     es:[bx+1], al
                mov     al, [si+4]
                mov     lc_no, al
                mov     es:[bx+3], al
                mov     al, [si+2]
                mov     uc_all, al
                mov     al, [si+5]
                mov     lc_all, al
                pop     bx
                mov     bx, es:[bx+8]
                mov     word ptr es:[bx], 439h
                mov     word ptr es:[bx+2], 70h ; 'p'
                cmp     cs:RPLMemTop, 0
                jz      short NoRPLArena
                mov     bx, 0FFFFh
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     es, ax
                push    es
                sub     ax, cs:RPLMemTop
                neg     ax
                dec     ax
                mov     bx, ax
                mov     ah, 4Ah
                int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                        ; ES = segment address of block to change
                                        ; BX = new size in paragraphs
                mov     bx, 0FFFFh
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                dec     ax
                mov     es, ax
                mov     word ptr es:1, 8 ; [es:arena_owner]
                mov     dword ptr es:8, 4C5052h ; [es:arena_name] ; 'RPL',0
                mov     dword ptr es:0Ch, 0 ; [es:arena_name+4]
                pop     es
                mov     ah, 49h
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed

NoRPLArena:                             ; ...
                les     di, CURRENT_DOS_LOCATION
                mov     ax, es:[di+10h]
                add     ax, 18h
                mov     word_12F65, ax
                mov     al, DEFAULT_DRIVE
                mov     es:[di+43h], al
                push    ds
                mov     cx, 70h ; 'p'
                mov     ds, cx
                assume ds:nothing
                mov     ds:4E4h, al
                pop     ds
                assume ds:nothing
                mov     ax, cs
                sub     ax, 11h
                sub     ax, 111h
                mov     ds:6D25h, ax
                push    ax
                mov     al, es:[di+20h]
                mov     ds:15B0h, al
                pop     ax
                mov     cx, ds:1510h
                shr     cx, 4
                inc     cx
                sub     ax, cx
                mov     ds:14F1h, ax
                push    es
                push    di
                mov     ds:150Eh, ax
                mov     cx, ax
                sub     ax, 8Fh
                mov     ds:14EDh, ax
                mov     ds:14EBh, ax
                lds     si, es:[di+12h]
                mov     word ptr [si+4], 0
                mov     word ptr [si], 0
                mov     [si+2], cx
                mov     ds, cx
                xor     si, si
                mov     ax, cs:word_12F90
                sub     dx, dx
                mov     bx, cs:word_12F65
                div     bx
                xchg    ax, cx

loc_13288:                              ; ...
                mov     [si], bx
                mov     [si+2], dx
                mov     word ptr [si+4], 0FFh
                mov     dword ptr [si+6], 0
                mov     dx, si
                mov     si, bx
                add     bx, cs:word_12F65
                loop    loc_13288
                mov     bx, dx
                mov     [bx], cx
                mov     ds:2, bx
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    sub_15478
                call    sub_1A9AC
                call    sub_1A6AF
                lds     bx, cs:CURRENT_DOS_LOCATION
                assume ds:nothing
                lds     bx, [bx]
                lds     bx, [bx+13h]
                mov     al, byte ptr cs:word_13030
                call    sub_1A72F
                mov     ds, cs:def_php
                sti
                cld
                mov     bx, cs
                sub     bx, 10h
                mov     es, bx
                assume es:nothing
                xor     si, si
                mov     di, si
                mov     cx, 40h ; '@'
                rep movsd
                mov     word ptr es:36h, es
                mov     word ptr es:16h, 0
                mov     word ptr es:2Ch, 0
                mov     cs:word_13037, bx
                mov     ah, 50h
                int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                                        ; BX = segment address of new PSP
                mov     ds, bx
                mov     dx, 80h
                mov     ah, 1Ah
                int     21h             ; DOS - SET DISK TRANSFER AREA ADDRESS
                                        ; DS:DX -> disk transfer buffer
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     ax, 3524h
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     word_15F27, bx
                mov     word_15F29, es
                mov     dx, 358Eh
                mov     ax, 2524h
                int     21h             ; DOS - SET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; DS:DX = new vector to be used for specified interrupt
                mov     es, word_13037
                assume es:nothing
                mov     es:12h, bx
                mov     bx, word_15F29
                mov     es:14h, bx
                mov     ax, 3523h
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     ax, es
                mov     es, word_13037
                mov     es:0Eh, bx
                mov     es:10h, ax
                mov     word ptr es:0Ah, 0
                mov     word ptr es:0Ch, es
                cmp     TOOMANYDRIVESFLAG, 0
                jz      short no_err
                call    print_x
; ---------------------------------------------------------------------------
                dw 8015h
; ---------------------------------------------------------------------------

no_err:                                 ; ...
                mov     dl, DEFAULT_DRIVE
                or      dl, dl
                jz      short nodrvset
                dec     dl
                mov     ah, 0Eh
                int     21h             ; DOS - SELECT DISK
                                        ; DL = new default drive number (0 = A, 1 = B, etc.)
                                        ; Return: AL = number of logical drives

nodrvset:                               ; ...
                mov     ax, def_php
                mov     memhi, ax
                mov     ax, 3700h
                int     21h             ; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
                                        ; Return: AL = FFh unsupported subfunction
                                        ; DL = current switch character
                mov     byte_1634B, dl
                mov     byte_1639F, dl
                mov     byte_1646D, dl
                mov     byte_1653B, dl
                mov     ah, 2Ah
                int     21h             ; DOS - GET CURRENT DATE
                                        ; Return: DL = day, DH = month, CX = year
                                        ; AL = day of the week (0=Sunday, 1=Monday, etc.)
                xchg    ax, cx
                sub     ax, 7BCh
                shl     ax, 9
                or      al, dl
                shr     dx, 3
                and     dl, 0E0h
                or      ax, dx
                mov     cx, word_12F94
                test    cx, cx
                jz      loc_13482
                cmp     cx, 0FFFFh
                jz      loc_1345A
                cmp     cx, ax
                jb      short loc_1341B
                mov     cx, word_12F92
                test    cx, cx
                jz      loc_13482
                cmp     cx, ax
                ja      loc_13482
                mov     dx, 9D6Ah
                add     dx, off_1B7A2
                call    print
                mov     ax, word_12F94
                shr     ax, 5
                and     ax, 0Fh
                cmp     al, 0Ch
                jbe     short loc_133D7
                mov     al, 0Ch

loc_133D7:                              ; ...
                dec     ax
                add     ax, ax
                add     ax, ax
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7A8
                add     dx, ax
                call    print
                mov     dl, 20h ; ' '
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                mov     ax, word_12F94
                and     ax, 1Fh
                call    sub_13740
                mov     dl, 2Ch ; ','
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                mov     dl, 20h ; ' '
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                mov     ax, word_12F94
                shr     ax, 9
                add     ax, 7BCh
                call    sub_13740
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7A4
                call    print
                jmp     short loc_13473
; ---------------------------------------------------------------------------

loc_1341B:                              ; ...
                mov     ax, 4301h
                sub     cx, cx
                mov     dx, offset aIo_sys ; "IO.SYS"
                int     21h             ; DOS - 2+ - SET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name
                                        ; CX = file attribute bits
                jb      short loc_1345A
                mov     ax, 3D02h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 2 - read & write
                jb      short loc_1344F
                xchg    ax, bx
                mov     dx, 1532
                sub     cx, cx
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_1344B
                mov     word_12F94, 0FFFFh
                mov     dx, offset word_12F94
                mov     cx, 2
                mov     ah, 40h
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer

loc_1344B:                              ; ...
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle

loc_1344F:                              ; ...
                mov     ax, 4301h
                mov     cx, 7
                mov     dx, offset aIo_sys ; "IO.SYS"
                int     21h             ; DOS - 2+ - SET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name
                                        ; CX = file attribute bits

loc_1345A:                              ; ...
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7AA
                call    print
                mov     es, BCodeSeg
                mov     byte ptr es:1F1Eh, 0
                or      byte_15141, 1

loc_13473:                              ; ...
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7A6
                call    print
                mov     ax, 0C08h
                int     21h             ; DOS - CLEAR KEYBOARD BUFFER
                                        ; AL must be 01h, 06h, 07h, 08h, or 0Ah.

loc_13482:                              ; ...
                sub     dx, dx
                call    sub_1776E
                push    ds
                mov     ax, 70h ; 'p'
                mov     ds, ax
                assume ds:nothing
                mov     ah, 2Ch
                int     21h             ; DOS - GET CURRENT TIME
                                        ; Return: CH = hours, CL = minutes, DH = seconds
                                        ; DL = hundredths of seconds
                cmp     byte ptr cs:aSafeBoot+0Dh, 0 ; ""
                jz      short loc_1349E
                mov     cx, 100h
                xor     dx, dx

loc_1349E:                              ; ...
                mov     ds:462h, cl
                mov     ds:463h, dx
                cmp     byte ptr cs:aSafeBoot+0Dh, 0 ; ""
                jz      short loc_134B2
                mov     ah, 2Dh
                int     21h             ; DOS - SET CURRENT TIME
                                        ; CH = hours, CL = minutes, DH = seconds, DL = hundredths of seconds
                                        ; Return: AL = 00h if no error / = FFh if bad value sent to routine

loc_134B2:                              ; ...
                pop     ds
                assume ds:nothing
                push    ds
                mov     ax, 1EB5h
                mov     ds, ax
                assume ds:nothing
                mov     word ptr ds:0C0h, offset loc_138F3
                mov     word ptr ds:0C2h, cs
                pop     ds
                assume ds:nothing
                push    word ptr ds:14CDh
                call    1EB5h:356h
                call    sub_13755
                mov     es, word ptr ds:15A8h
                mov     bx, ds:14EDh
                sub     bx, ds:15A8h
                sub     bx, 2
                mov     ah, 4Ah
                int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                        ; ES = segment address of block to change
                                        ; BX = new size in paragraphs
                mov     bx, 0FFFFh
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     ds:14EFh, ax
                mov     bx, 548h
                add     bx, 1Fh
                shr     bx, 4
                add     bx, 4445h
                sub     bx, ds:15A8h
                mov     ah, 4Ah
                int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                        ; ES = segment address of block to change
                                        ; BX = new size in paragraphs
                push    cs
                push    offset loc_138F3
                push    cs
                push    offset byte_15F4B
                call    1EEEh:0DC4h
                add     sp, 8
                call    sub_13788
                push    es
                mov     ax, 3524h
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     word ptr ds:44A9h, es
                pop     es
                mov     dx, 358Eh
                mov     ax, 2524h
                int     21h             ; DOS - SET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; DS:DX = new vector to be used for specified interrupt
                test    byte ptr ds:36C0h, 10h
                jnz     short loc_13585

loc_13533:                              ; ...
                mov     bx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     bx, ds:9CBAh
                mov     dx, 4806h
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jnb     short loc_13580
                mov     bx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     bx, ds:9CB8h
                mov     dx, 4811h
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jnb     short loc_13576
                mov     dx, 481Ch
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jnb     short loc_13576
                mov     bx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     bx, ds:9CE2h
                jmp     short loc_13580
; ---------------------------------------------------------------------------
                mov     bx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     bx, ds:9CB6h
                test    byte ptr ds:36C0h, 1
                jz      short loc_13585

loc_13576:                              ; ...
                mov     byte ptr ds:15B1h, 1
                or      byte ptr ds:36C0h, 1

loc_13580:                              ; ...
                mov     dx, bx
                call    print

loc_13585:                              ; ...
                mov     bx, 486Fh
                call    sub_16C8A
                call    sub_140F2
                test    byte ptr ds:36C5h, 1
                jnz     short loc_135B5
                mov     al, ds:36C0h
                and     al, 10h
                xor     ds:36BFh, al
                test    byte ptr ds:36BFh, 10h
                jnz     short loc_135B0
                test    al, al
                jz      short loc_135B5
                and     byte ptr ds:36C0h, 0EFh
                jmp     short loc_13533
; ---------------------------------------------------------------------------

loc_135B0:                              ; ...
                call    loc_16BB2
                jmp     short loc_135BA
; ---------------------------------------------------------------------------

loc_135B5:                              ; ...
                sub     dx, dx
                call    sub_1AA94

loc_135BA:                              ; ...
                call    sub_16DC4
                cmp     byte ptr ds:15B1h, 2
                jnz     short loc_135DA
                mov     word ptr ds:478Ch, 0
                mov     bx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     bx, ds:off_1B79E
                mov     byte ptr [bx], 24h ; '$'
                mov     bx, 4883h
                call    sub_16C8A

loc_135DA:                              ; ...
                mov     al, ds:36C5h
                and     al, 0Dh
                cmp     al, 1
                jz      short loc_13613
                call    sub_1B3CC
                mov     ds, cs:word_13037
                mov     dx, 80h
                mov     ah, 1Ah
                int     21h             ; DOS - SET DISK TRANSFER AREA ADDRESS
                                        ; DS:DX -> disk transfer buffer
                mov     ax, 70h ; 'p'
                mov     ds, ax
                assume ds:nothing
                cmp     word ptr ds:448h, 0FFFFh
                jz      short loc_13613
                test    byte ptr ds:9, 20h
                jnz     short loc_13613
                mov     word ptr ds:448h, 0
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dx, 1
                call    sub_1AA94

loc_13613:                              ; ...
                push    cs
                pop     ds
                mov     ah, 49h ; 'I'
                mov     es, area
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed
                call    sub_1376E
                mov     ah, 49h ; 'I'
                mov     es, word_12F6F
                assume es:BIOSDATA
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed
                test    byte_15145, 1
                jnz     short loc_13638
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                and     byte ptr es:[bx+60h], 0BFh

loc_13638:                              ; ...
                or      byte_15140, 80h
                call    sub_17280
                push    ds
; ---------------------------------------------------------------------------
                db  8Eh
                db  1Eh
word_13643      dw 150Ah                ; ...
                assume ds:nothing
word_13645      dw 3E80h                ; ...
                db  7Fh ; 
                db  2Bh ; +
                db    2
                db  1Fh
                db  75h ; u
                db  33h ; 3
; ---------------------------------------------------------------------------
                and     byte ptr ds:36C5h, 0BFh
                mov     byte ptr ds:60C4h, 1
                mov     dx, 9D6Ah
                add     dx, ds:off_1B78C
; ---------------------------------------------------------------------------
word_1365E      dw 0C032h               ; ...
byte_13660      db 0E8h                 ; ...
                db  78h ; x
                db  14h
                db  14h
                db    0
                db  2Ah ; *
                db    6
                db 0FFh
                db  36h ; 6
                db  75h ; u
                db  0Eh
                db  50h ; P
; ---------------------------------------------------------------------------
                mov     ax, 3305h
                int     21h             ; DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)
                pop     ax
                cmp     dl, 3
                jnb     short loc_13679
                mov     al, 1

loc_13679:                              ; ...
                mov     ds, ds:BCodeSeg
                assume ds:nothing
                mov     ds:2B7Fh, al
                call    sub_188B9
                push    cs
                pop     ds
                assume ds:SYSINIT
                cmp     byte_12F5A, 0
                jz      short loc_136AE
; ---------------------------------------------------------------------------
word_1368C      dw 1B0h                 ; ...
                db 0A2h
                db  80h
                db  6Ah ; j
                db 0A2h
                dw 6B64h
                dw 4EA2h
                db  6Bh ; k
                db 0A2h
                db  16h
                db  6Bh ; k
                db 0A2h
                db  9Eh
                db  6Bh ; k
                db 0C6h
                db    6
                db 0E7h
                db  14h
                db  1Eh
                db 0C7h
                db    6
                db 0E8h
                db  14h
                db    4
                db    0
                db 0A0h
                db    7
                db  15h
                db 0A2h
                db 0EAh
                db  14h
; ---------------------------------------------------------------------------

loc_136AE:                              ; ...
                call    sub_13755
                call    sub_139BD
                mov     ax, 4A16h
                int     2Fh
                test    byte_15145, 1
                jnz     short $+2

loc_136C0:                              ; ...
                inc     multi_pass_id
                call    multi_pass
                inc     multi_pass_id
                call    sub_16E2D
                push    ds
                mov     ds, word_13037
                assume ds:nothing
                mov     dx, 80h
                mov     ah, 1Ah
                int     21h             ; DOS - SET DISK TRANSFER AREA ADDRESS
                                        ; DS:DX -> disk transfer buffer
                pop     ds
                mov     ax, 4A18h
                int     2Fh             ; - Multiplex -
                call    endfile
                call    sub_16F1E
                call    sub_17088
                call    sub_1A566
                call    sub_1A593
                mov     es, ds:BDataSeg
                assume es:nothing
                and     byte ptr es:9, 7Fh
                test    ds:install_flag, 1
                jz      short ConfigDone
                inc     ds:multi_pass_id
                call    multi_pass

ConfigDone:                             ; ...
                mov     ds:donotshownum, 1
                mov     es, ds:area
                assume es:nothing
                mov     ah, 49h
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed
                test    ds:install_flag, 2
                jz      short skip_free_sysinitbase
                mov     es, ds:old_area
                mov     bx, ds:impossible_owner_size
                mov     ah, 4Ah
                int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                        ; ES = segment address of block to change
                                        ; BX = new size in paragraphs
                mov     ax, es
                dec     ax
                mov     es, ax
                assume es:nothing
                mov     word ptr es:1, 8 ; [es:ARENA.OWNER],8 ; set impossible owner
; ---------------------------------------------------------------------------
                db  26h ; &             ; [es:ARENA.NAME],'SD' ; System Data
                db 0C7h
                db    6
                db    8
                db    0
                db  53h ; S
; ---------------------------------------------------------------------------

loc_13739:                              ; ...
                inc     sp

skip_free_sysinitbase:                  ; ...
                call    sub_13858
; ---------------------------------------------------------------------------
                jmp     loc_166D6

; =============== S U B R O U T I N E =======================================


sub_13740       proc near               ; ...
                mov     cs:word_12F79, ax
                mov     al, 24h ; '$'
                xchg    al, byte ptr cs:crlf$ ; "\r\n$"
                push    ax
                call    sub_1967C
                pop     ax
                mov     byte ptr cs:crlf$, al ; "\r\n$"
                retn
sub_13740       endp


; =============== S U B R O U T I N E =======================================


sub_13755       proc near               ; ...
                mov     bx, 0FFFFh
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                jb      short locret_1376D
                mov     cs:area, ax
                mov     cs:memhi, ax
                call    sub_1A22C

locret_1376D:                           ; ...
                retn
sub_13755       endp


; =============== S U B R O U T I N E =======================================


sub_1376E       proc near               ; ...
                push    bx
                push    ax
                push    es
                mov     bx, 0FFFFh
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                jb      short loc_13784
                mov     es, ax
                assume es:nothing
                mov     ah, 49h
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed

loc_13784:                              ; ...
                pop     es
                pop     ax
                pop     bx
                retn
sub_1376E       endp


; =============== S U B R O U T I N E =======================================


sub_13788       proc near               ; ...
                push    ds
                push    es
                mov     bx, ds:14D1h
                add     bx, 0Fh
                and     bx, 0FFF0h
                mov     ds, word ptr ds:150Ah
                mov     ax, 0FFFFh
                mov     es, ax
                assume es:nothing
                mov     word ptr es:[bx], 534Dh
                mov     word ptr es:[bx+6], 0
                mov     ax, bx
                neg     ax
                sub     ax, 10h
                mov     es:[bx+4], ax
                mov     word ptr es:[bx+2], 0
                mov     ds:36h, bx
                sub     bx, 40h ; '@'
                mov     ds:34h, bx
                mov     si, 30h ; '0'
                mov     di, si
                lea     cx, [bx+10h]
                shr     cx, 2
                rep movsd
                mov     ax, es
                call    sub_138AD
                call    cs:_seg_reinit_ptr
                mov     cx, 0FFFFh
                mov     es, cx
                xor     cx, cx
                mov     ds, cx
                assume ds:BIOSDATA
                mov     si, 0C0h
                mov     di, 0D0h
                mov     cx, 5
                cld
                rep movsb
                call    far ptr 1EB5h:29Dh
                mov     ax, 70h ; 'p'
                mov     ds, ax
                assume ds:nothing
                or      byte ptr ds:8, 1
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                retn
sub_13788       endp

; ---------------------------------------------------------------------------
                db    0
                db    0
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  56h ; V
                db  44h ; D
                db  49h ; I
                db  53h ; S
                db  4Bh ; K
                db  20h
                db  20h
                db  56h ; V
                db  33h ; 3
                db  2Eh ; .
                db  33h ; 3
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  11h
                db 0EAh
dword_13834     dd 0                    ; ...
                db    0
                db    0
                db    0
                db  56h ; V
                db  44h ; D
                db  49h ; I
                db  53h ; S
                db  4Bh ; K
                db  33h ; 3
                db  2Eh ; .
                db  33h ; 3
                db  80h
                db    0
                db    1
                db    1
                db    0
                db    1
                db  40h ; @
                db    0
                db    0
                db    2
                db 0FEh
                db    6
                db    0
                db    8
                db    0
                db    1
                db    0
                db    0
                db    0
                db  40h ; @
                db    4

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_13858       proc near               ; ...
                xor     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     eax, dword ptr word_64
                mov     cs:dword_13834, eax
                mov     ah, 48h ; 'H'
                mov     bx, 4
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
; ---------------------------------------------------------------------------
                dec     ax
                mov     es, ax
                mov     word ptr es:1, 8
                mov     word ptr es:8, 4353h
                inc     ax
                mov     es, ax
                cli
                mov     word_64, 2Fh ; '/'
                mov     off_66, ax
                mov     cx, 34h ; '4'
                mov     si, 1D84h
                xor     di, di
                push    cs
                pop     ds
                assume ds:SYSINIT
                cld
                rep movsb
                sti
                push    di
                push    es
                mov     ax, 0FFFFh
                mov     es, ax
                assume es:nothing
                mov     di, 10h
                mov     cx, 20h ; ' '
                mov     si, 1DB8h
                rep movsb
                pop     di
                pop     es
                assume es:nothing
                retn
sub_13858       endp


; =============== S U B R O U T I N E =======================================


sub_138AD       proc near               ; ...
                push    di
                push    es
                mov     cs:BCodeSeg, ax
                mov     cx, 70h ; 'p'
                mov     es, cx
                assume es:nothing
                mov     di, 12Eh
                mov     cx, 156h
                sub     cx, di
                shr     cx, 2
                cmp     cs:byte_188B2, 0
                jz      short loc_138CC
                dec     cx

loc_138CC:                              ; ...
                inc     di
                inc     di
                stosw
                loop    loc_138CC
                pop     es
                assume es:nothing
                pop     di
                retn
sub_138AD       endp


; =============== S U B R O U T I N E =======================================


print_x         proc near               ; ...
                xchg    si, dx
                pop     si
                cld
                lods    word ptr cs:[si]
                push    si
                xchg    si, dx
                push    bx
                and     ax, 7FFFh
                mov     bx, ax
                shl     bx, 1
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, cs:[bx-634Ah]
                mov     ah, 9
                int     21h             ; DOS - PRINT STRING
                                        ; DS:DX -> string terminated by "$"
                pop     bx
                retn
print_x         endp

; ---------------------------------------------------------------------------

loc_138F3:                              ; ...
                push    bp
                mov     bp, sp
                pusha
                push    ds
                push    es
                push    cs
                pop     ds
                push    cs
                pop     es
                assume es:SYSINIT
                mov     ax, [bp+6]
                cmp     ax, 14h
                ja      loc_139B8
                jnz     short loc_13912
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7D8
                jmp     short loc_13954
; ---------------------------------------------------------------------------

loc_13912:                              ; ...
                cmp     ax, 0Ch
                ja      loc_139B8
                jnz     short loc_13924
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7D4
                jmp     short loc_13954
; ---------------------------------------------------------------------------

loc_13924:                              ; ...
                cmp     ax, 9
                ja      loc_139B8
                jnz     short loc_13936
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7D6
                jmp     short loc_13954
; ---------------------------------------------------------------------------

loc_13936:                              ; ...
                cmp     ax, 5
                ja      short loc_139B8
                jnz     short loc_13946
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7DA
                jmp     short loc_13954
; ---------------------------------------------------------------------------

loc_13946:                              ; ...
                cmp     ax, 4
                ja      short loc_139B8
                jnz     short loc_13956
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7DC

loc_13954:                              ; ...
                jmp     short loc_139B5
; ---------------------------------------------------------------------------

loc_13956:                              ; ...
                cmp     ax, 3
                ja      short loc_139B8
                jnz     short loc_13969
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7E0
                call    print
                jmp     short loc_139B8
; ---------------------------------------------------------------------------

loc_13969:                              ; ...
                cmp     ax, 2
                ja      short loc_139B8
                jnz     short loc_139A7
                xor     al, al
                mov     ah, byte_15140
                or      ah, 8
                xchg    al, byte_15145
                xchg    ah, byte_15140
                push    ax
                mov     byte_17B44, 81h
                mov     word ptr [bp-2], 59h ; 'Y'
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7E2
                call    loc_14AE4
                pop     ax
                mov     byte_15145, al
                mov     byte_15140, ah
                jnb     short loc_139B8
                mov     word ptr [bp-2], 4Eh ; 'N'
                jmp     short loc_139B8
; ---------------------------------------------------------------------------

loc_139A7:                              ; ...
                cmp     ax, 1
                ja      short loc_139B8
                jb      short loc_139B8
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7DE

loc_139B5:                              ; ...
                call    print

loc_139B8:                              ; ...
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                popa
                pop     bp
                retf

; =============== S U B R O U T I N E =======================================


sub_139BD       proc near               ; ...
                mov     ax, 4A11h
                xor     bx, bx
                int     2Fh
                cmp     bx, 444Dh
                jnz     short locret_139F1
                mov     ax, 3305h
                int     21h             ; DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)
                dec     dl
                mov     ax, 4A11h
                mov     bx, 1
                int     2Fh
                or      ax, ax
                jnz     short locret_139F1
                test    bl, 80h
                jz      short locret_139F1
                push    ds
                mov     ds, cs:BCodeSeg
                inc     dl
                xor     dh, dh
                mov     ds:2B82h, dx
                pop     ds

locret_139F1:                           ; ...
                retn
sub_139BD       endp

; ---------------------------------------------------------------------------
byte_139F2      db 0                    ; ...
uc_yes          db 0                    ; ...
lc_yes          db 0                    ; ...
uc_no           db 0                    ; ...
lc_no           db 0                    ; ...
uc_all          db 0                    ; ...
lc_all          db 0                    ; ...
aOn             db 'ON'                 ; ...
aOff            db 'OFF'                ; ...
byte_139FE      db 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_139FF       proc near               ; ...
                push    ds
                push    ax
                push    bx
                push    cx
                push    dx
                push    cs
                pop     ds
                assume ds:SYSINIT
                xor     bx, bx
                mov     bl, byte_152CC
                inc     bl
                mov     word ptr byte_11C93+74h, 0
                mov     dx, 22Bh
                mov     ah, 44h ; 'D'
                mov     al, 0Dh
                mov     ch, 48h ; 'H'
                mov     cl, 40h ; '@'
                int     21h             ; DOS - 2+ - IOCTL -
                jnb     short loc_13A3B
                cmp     word ptr byte_11C93+2Ah, 0
                stc
                jz      short loc_13A63
                mov     word ptr byte_11C93+3Eh, 0
                mov     ah, 44h ; 'D'
                mov     al, 0Dh
                mov     ch, 8
                int     21h             ; DOS - 2+ - IOCTL -
                jb      short loc_13A63

loc_13A3B:                              ; ...
                mov     ds, BCodeSeg
                assume ds:nothing
                test    cs:word_152CD, 4
                jz      short loc_13A55
                mov     cl, cs:byte_152CC
                mov     al, 1
                shl     al, cl
                or      ds:2458h, al

loc_13A55:                              ; ...
                mov     al, cs:byte_11C93+2Ch
                cmp     al, ds:0C5Ch
                jbe     short loc_13A62
                mov     ds:0C5Ch, al

loc_13A62:                              ; ...
                clc

loc_13A63:                              ; ...
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                pop     ds
                retn
sub_139FF       endp


; =============== S U B R O U T I N E =======================================


sub_13A69       proc near               ; ...
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     word ptr byte_11C93+1Ch, 50h ; 'P'
                mov     byte_11C93+19h, 2
                mov     word ptr byte_11C93+1Ah, 0
                mov     byte_11C93+18h, 0
                mov     byte_11C93+1Eh, 0
                mov     word_152CD, 0
                mov     word_152C3, 2
                mov     word_152C5, 9
sub_13A69       endp ; sp-analysis failed

                mov     word_152C7, 1
                mov     word_152C9, 0E0h
                mov     byte_152CB, 1
                pop     ds
                assume ds:nothing
                retn

; =============== S U B R O U T I N E =======================================


sub_13AAC       proc near               ; ...
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT

loc_13AAF:                              ; ...
                cmp     al, 0Dh
                jz      short loc_13AD4
                cmp     al, 0Ah
                jz      short loc_13AED
                cmp     al, 20h ; ' '
                jbe     short loc_13ACB
                cmp     al, 2Fh ; '/'
                jz      short loc_13AC2
                stc
                jmp     short loc_13AEB
; ---------------------------------------------------------------------------

loc_13AC2:                              ; ...
                call    sub_13AF7
                mov     word_152CD, bx
                jb      short loc_13AD2

loc_13ACB:                              ; ...
                call    sub_1964A
                jb      short loc_13AD4
                jmp     short loc_13AAF
; ---------------------------------------------------------------------------

loc_13AD2:                              ; ...
                jmp     short loc_13AEB
; ---------------------------------------------------------------------------

loc_13AD4:                              ; ...
                test    word_152CD, 8
                jnz     short loc_13ADF
                stc
                jmp     short loc_13AEB
; ---------------------------------------------------------------------------

loc_13ADF:                              ; ...
                mov     ax, word_152CD
                and     ax, 3
                mov     word ptr byte_11C93+1Ah, ax
                call    sub_13BE9

loc_13AEB:                              ; ...
                pop     ds
                assume ds:nothing
                retn
; ---------------------------------------------------------------------------

loc_13AED:                              ; ...
                inc     word ptr ds:159Ch
                dec     word ptr ds:15A0h
                jmp     short loc_13AD4
sub_13AAC       endp


; =============== S U B R O U T I N E =======================================


sub_13AF7       proc near               ; ...
                call    sub_1964A
                jb      short loc_13B50
                and     al, 0DFh
                cmp     al, 41h ; 'A'
                jb      short loc_13B50
                cmp     al, 5Ah ; 'Z'
                ja      short loc_13B50
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                mov     cl, ds:396Dh
                mov     ch, 0
                mov     di, 396Eh
                repne scasb
                pop     es
                assume es:nothing
                jnz     short loc_13B50
                mov     ax, 1
                shl     ax, cl
                mov     bx, ds:384Dh
                or      bx, ax
                mov     cx, ax
                test    ax, 7F8h
                jz      short loc_13B4B
                call    sub_1964A
                jb      short loc_13B4E
                cmp     al, 3Ah ; ':'
                jnz     short loc_13B4E
                call    sub_1964A
                push    bx
                mov     cs:byte_12F78, 20h ; ' '
                call    sub_14D7C
                mov     cs:byte_12F78, 0
                pop     bx
                call    sub_13B52
                jb      short loc_13B4E

loc_13B4B:                              ; ...
                clc
                jmp     short locret_13B51
; ---------------------------------------------------------------------------

loc_13B4E:                              ; ...
                xor     bx, cx

loc_13B50:                              ; ...
                stc

locret_13B51:                           ; ...
                retn
sub_13AF7       endp


; =============== S U B R O U T I N E =======================================


sub_13B52       proc near               ; ...

; FUNCTION CHUNK AT 20FA SIZE 0000006F BYTES

                test    ds:384Dh, cx
                jnz     loc_13BE4
                test    cx, 8
                jz      short loc_13B65
                mov     ds:384Ch, al
                jmp     short loc_13BE4
; ---------------------------------------------------------------------------

loc_13B65:                              ; ...
                test    cx, 80h
                jz      short loc_13B7A
                or      ah, ah
                jnz     short loc_13BE6
                cmp     al, ds:396Ch
                jnb     short loc_13BE6
                mov     ds:22Ch, al
sub_13B52       endp

                jmp     short loc_13BE4
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_13B52

loc_13B7A:                              ; ...
                test    cx, 10h
                jz      short loc_13B8A
                cmp     ax, 400h
                ja      short loc_13BE6
                mov     ds:22Fh, ax
                jmp     short loc_13BE4
; ---------------------------------------------------------------------------

loc_13B8A:                              ; ...
                or      ax, ax
                jz      short loc_13BE4
                test    cx, 20h
                jz      short loc_13B9E
                test    ax, 0FFC0h
                jnz     short loc_13BE6
                mov     ds:3845h, ax
                jmp     short loc_13BE4
; ---------------------------------------------------------------------------

loc_13B9E:                              ; ...
                test    cx, 40h
                jz      short loc_13BAD
                or      ah, ah
                jnz     short loc_13BE6
                mov     ds:3843h, ax
                jmp     short loc_13BE4
; ---------------------------------------------------------------------------

loc_13BAD:                              ; ...
                test    cx, 100h
                jz      short loc_13BB8
                mov     ds:3847h, ax
                jmp     short loc_13BE4
; ---------------------------------------------------------------------------

loc_13BB8:                              ; ...
                test    cx, 200h
                jz      short loc_13BC8
                test    ax, 0Fh
                jnz     short loc_13BE6
                mov     ds:3849h, ax
                jmp     short loc_13BE4
; ---------------------------------------------------------------------------

loc_13BC8:                              ; ...
                or      ah, ah
                jnz     short loc_13BE6
                mov     ds:384Bh, al
                or      al, al
                jz      short loc_13BE4
                cmp     al, 80h
                jnb     short loc_13BDD

loc_13BD7:                              ; ...
                shr     al, 1
                jnb     short loc_13BD7
                jz      short loc_13BE4

loc_13BDD:                              ; ...
                mov     byte ptr ds:384Bh, 1
                jmp     short loc_13BE6
; ---------------------------------------------------------------------------

loc_13BE4:                              ; ...
                clc

locret_13BE5:                           ; ...
                retn
; ---------------------------------------------------------------------------

loc_13BE6:                              ; ...
                stc
                jmp     short locret_13BE5
; END OF FUNCTION CHUNK FOR sub_13B52

; =============== S U B R O U T I N E =======================================


sub_13BE9       proc near               ; ...

; FUNCTION CHUNK AT 23A6 SIZE 00000067 BYTES

                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                xor     bx, bx
                mov     bl, ds:22Ch
                test    word ptr ds:384Dh, 10h
                jz      short loc_13C07
                cmp     word ptr ds:22Fh, 0
                jnz     short loc_13C12
                mov     word ptr ds:22Fh, 50h ; 'P'

loc_13C07:                              ; ...
                cmp     bl, 0
                jnz     short loc_13C12
                mov     word ptr ds:22Fh, 28h ; '('

loc_13C12:                              ; ...
                shl     bx, 1
                mov     si, [bx+3958h]
                mov     di, 232h
                mov     cx, 35h ; '5'
                cld
                rep movsb
                pop     es
                assume es:nothing
                test    word ptr ds:384Dh, 20h
                jz      short loc_13C30
                mov     ax, ds:3845h
                mov     ds:23Fh, ax

loc_13C30:                              ; ...
                test    word ptr ds:384Dh, 40h
                jz      short loc_13C3E
                mov     ax, ds:3843h
                mov     ds:241h, ax

loc_13C3E:                              ; ...
                test    word ptr ds:384Dh, 700h
                jz      loc_13E26
                cmp     byte ptr ds:22Ch, 5
                jz      loc_13E8A
sub_13BE9       endp

                test    word ptr ds:384Dh, 100h
                jz      short loc_13C64
                mov     ax, ds:3847h
                or      ax, ax
                jnz     short loc_13C61
                inc     ax

loc_13C61:                              ; ...
                mov     ds:235h, ax

loc_13C64:                              ; ...
                test    word ptr ds:384Dh, 200h
                jz      short loc_13C79
                mov     ax, ds:3849h
                or      ax, ax
                jnz     short loc_13C76
                mov     ax, 0F0h

loc_13C76:                              ; ...
                mov     ds:238h, ax

loc_13C79:                              ; ...
                test    word ptr ds:384Dh, 400h
                jz      short loc_13C8D
                mov     al, ds:384Bh
                or      al, al
                jnz     short loc_13C8A
                inc     al

loc_13C8A:                              ; ...
                mov     ds:234h, al

loc_13C8D:                              ; ...
                mov     ax, ds:241h
                mul     word ptr ds:23Fh
                cli
                movzx   eax, ax
                movzx   ebx, word ptr ds:22Fh
                mul     ebx
                mov     ds:247h, eax
                mov     bx, ax
                test    eax, 0FFFF0000h
                jz      short loc_13CB2
                xor     bx, bx

loc_13CB2:                              ; ...
                mov     ds:23Ah, bx
                test    word ptr ds:384Dh, 400h
                jz      short loc_13CC7
                cmp     byte ptr ds:384Bh, 0
                jnz     loc_13DC6

loc_13CC7:                              ; ...
                or      bx, bx
                jnz     loc_13D6E
                mov     bx, 3979h
                cmp     eax, 100000h
                jb      short loc_13CF0
                mov     bx, 3997h
                test    word ptr ds:384Dh, 100h
                jz      short loc_13CEA
                cmp     word ptr ds:3847h, 0
                jnz     short loc_13CF0

loc_13CEA:                              ; ...
                mov     word ptr ds:235h, 20h ; ' '

loc_13CF0:                              ; ...
                cmp     eax, [bx]
                jbe     short loc_13CFA
                add     bx, 0Ah
                jmp     short loc_13CF0
; ---------------------------------------------------------------------------

loc_13CFA:                              ; ...
                mov     ch, [bx+5]
                mov     cl, [bx+8]
                and     cl, 20h
                movzx   edx, word ptr [bx+6]
                or      cl, cl
                jnz     short loc_13D21
                test    word ptr ds:384Dh, 200h
                jz      short loc_13D21
                cmp     word ptr ds:3849h, 0
                jz      short loc_13D21
                movzx   edx, word ptr ds:238h

loc_13D21:                              ; ...
                mov     ds:238h, dx
                mov     ds:234h, ch

loc_13D29:                              ; ...
                movzx   edx, word ptr ds:238h
                add     edx, 0Fh
                shr     edx, 4
                sub     eax, edx
                movzx   edx, word ptr ds:235h
                sub     eax, edx
                movzx   ebx, byte ptr ds:237h
                mov     bh, ch
                or      cl, cl
                jz      short loc_13D52
                shr     ebx, 1

loc_13D52:                              ; ...
                add     eax, ebx
                dec     eax
                xor     edx, edx
                div     ebx
                or      cl, cl
                jz      short loc_13D67
                mov     ds:24Bh, eax
                xor     ax, ax

loc_13D67:                              ; ...
                mov     ds:23Dh, ax
                sti
                jmp     loc_13E87
; ---------------------------------------------------------------------------

loc_13D6E:                              ; ...
                sti
                test    word ptr ds:384Dh, 200h
                jz      short loc_13D7E
                cmp     word ptr ds:3849h, 0
                jnz     short loc_13D92

loc_13D7E:                              ; ...
                mov     dx, 0E0h
                cmp     ax, 1000h
                jbe     short loc_13D8E
                mov     dx, 200h
                cmp     ax, 4000h
                jb      short loc_13D92

loc_13D8E:                              ; ...
                mov     ds:238h, dx

loc_13D92:                              ; ...
                mov     dx, ds:235h
                sub     ax, dx
                mov     dx, ds:238h
                add     dx, 0Fh
                shr     dx, 4
                sub     ax, dx
                mov     dl, 1

loc_13DA6:                              ; ...
                cmp     ax, 0FF6h
                jb      short loc_13DB1
                shr     ax, 1
                shl     dl, 1
                jmp     short loc_13DA6
; ---------------------------------------------------------------------------

loc_13DB1:                              ; ...
                mov     ds:234h, dl

loc_13DB5:                              ; ...
                sti
                mov     dx, ax
                shl     ax, 1
                add     ax, dx
                shr     ax, 1
                add     ax, 1FFh
                shr     ax, 9
                jmp     short loc_13D67
; ---------------------------------------------------------------------------

loc_13DC6:                              ; ...
                mov     ch, ds:234h
                mov     cl, ch
                xor     bx, bx

loc_13DCE:                              ; ...
                shr     cl, 1
                jb      short loc_13DD7
                add     bx, 8
                jmp     short loc_13DCE
; ---------------------------------------------------------------------------

loc_13DD7:                              ; ...
                add     bx, 39BFh
                cmp     eax, [bx]
                jbe     short loc_13E08
                mov     cl, 0
                cmp     eax, [bx+4]
                jbe     short loc_13E05
                inc     cl
                mov     word ptr ds:238h, 0
                test    word ptr ds:384Dh, 100h
                jz      short loc_13DFF
                cmp     word ptr ds:3847h, 0
                jnz     short loc_13E05

loc_13DFF:                              ; ...
                mov     word ptr ds:235h, 20h ; ' '

loc_13E05:                              ; ...
                jmp     loc_13D29
; ---------------------------------------------------------------------------

loc_13E08:                              ; ...
                movzx   edx, word ptr ds:238h
                add     edx, 0Fh
                shr     edx, 4
                sub     ax, dx
                sub     ax, ds:235h
                xor     cl, cl
                xchg    cl, ch
                xor     dx, dx
                div     cx
                jmp     short loc_13DB5
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_13BE9

loc_13E26:                              ; ...
                mov     byte ptr ds:234h, 2
                mov     bl, 0F0h
                mov     bh, ds:23Ch
                cmp     word ptr ds:241h, 2
                ja      short loc_13E75
                jnz     short loc_13E5E
                mov     bl, bh
                cmp     word ptr ds:23Fh, 12h
                jnz     short loc_13E4C
                cmp     word ptr ds:22Fh, 50h ; 'P'
                jnz     short loc_13E4C
                jmp     short loc_13E70
; ---------------------------------------------------------------------------

loc_13E4C:                              ; ...
                cmp     word ptr ds:22Fh, 28h ; '('
                jnz     short loc_13E75
                cmp     word ptr ds:23Fh, 8
                jnz     short loc_13E75
                mov     bl, 0FCh
                jmp     short loc_13E75
; ---------------------------------------------------------------------------

loc_13E5E:                              ; ...
                cmp     byte ptr ds:22Ch, 0
                jnz     short loc_13E70
                mov     bl, 0FCh
                cmp     word ptr ds:23Fh, 8
                jnz     short loc_13E70
                mov     bl, 0FEh

loc_13E70:                              ; ...
                mov     byte ptr ds:234h, 1

loc_13E75:                              ; ...
                mov     ds:23Ch, bl
                mov     ax, ds:22Fh
                mul     word ptr ds:241h
                mul     word ptr ds:23Fh
                mov     ds:23Ah, ax

loc_13E87:                              ; ...
                clc

loc_13E88:                              ; ...
                sti
                retn
; ---------------------------------------------------------------------------

loc_13E8A:                              ; ...
                stc
                jmp     short loc_13E88
; END OF FUNCTION CHUNK FOR sub_13BE9

; =============== S U B R O U T I N E =======================================


sub_13E8D       proc near               ; ...
                mov     cx, cs:word_1301C
                jcxz    short loc_13EBB
                xor     si, si
                mov     di, si
                xor     ax, ax
                mov     cs:byte_13016, 0

loc_13EA0:                              ; ...
                call    sub_140B7
                jz      short loc_13EB2
                call    sub_1409A
                cmp     al, 0Ah
                jz      short loc_13EB2
                cmp     al, 20h ; ' '
                jbe     short loc_13EA0
                jmp     short loc_13EBD
; ---------------------------------------------------------------------------

loc_13EB2:                              ; ...
                stosb
                mov     cs:byte_13016, 0
                jmp     short loc_13EA0
; ---------------------------------------------------------------------------

loc_13EBB:                              ; ...
                stc
                retn
; ---------------------------------------------------------------------------

loc_13EBD:                              ; ...
                push    cx
                push    si
                push    di
                mov     bp, si
                dec     bp
                mov     si, 3714h
                mov     ch, 0

loc_13EC8:                              ; ...
                mov     di, bp
                mov     cl, [si]
                inc     si
                jcxz    short loc_13F18
                cmp     byte ptr es:[di], 3Bh ; ';'
                jz      short loc_13F09

loc_13ED5:                              ; ...
                mov     al, es:[di]
                inc     di
                and     al, 0DFh
                inc     si
                cmp     al, [si-1]
                loope   loc_13ED5
                lahf
                add     si, cx
                sahf
                lodsb
                jnz     short loc_13EC8
                cmp     byte ptr es:[di], 0Dh
                jz      short loc_13F13
                cmp     byte ptr es:[di], 0Ah
                jz      short loc_13F13
                cmp     al, 5Bh ; '['
                jz      short loc_13F13
                cmp     al, 71h ; 'q'
                jz      short loc_13F13
                push    ax
                mov     al, es:[di]
                cmp     al, 3Fh ; '?'
                jnz     short loc_13F0D
                pop     ax
                or      al, 80h
                jmp     short loc_13F13
; ---------------------------------------------------------------------------

loc_13F09:                              ; ...
                mov     al, 30h ; '0'
                jmp     short loc_13F13
; ---------------------------------------------------------------------------

loc_13F0D:                              ; ...
                call    loc_14C42
                pop     ax
                jnz     short loc_13EC8

loc_13F13:                              ; ...
                pop     di
                pop     si
                pop     cx
                jmp     short loc_13F27
; ---------------------------------------------------------------------------

loc_13F18:                              ; ...
                pop     di
                pop     si
                pop     cx
                mov     al, 5Ah ; 'Z'
                stosb

loc_13F1E:                              ; ...
                call    sub_1409A
                cmp     al, 0Ah
                jnz     short loc_13F1E
                jmp     short loc_13EB2
; ---------------------------------------------------------------------------

loc_13F27:                              ; ...
                stosb
                and     al, 7Fh
                mov     cs:byte_1301A, al
                cmp     al, 5Bh ; '['
                jz      short loc_13F8D
                cmp     al, 4Fh ; 'O'
                jz      short loc_13F45
                cmp     al, 45h ; 'E'
                jz      short loc_13F45
                cmp     al, 41h ; 'A'
                jz      short loc_13F45
                cmp     al, 4Ah ; 'J'
                jz      short loc_13F45
                call    sub_14C6B

loc_13F45:                              ; ...
                call    sub_1409A
                cmp     al, 0Ah
                jz      short loc_13F5B
                cmp     al, 0Dh
                jz      short loc_13F5B
                cmp     al, 2Fh ; '/'
                jz      short loc_13F5B
                call    loc_14C42
                jnz     short loc_13F45
                jmp     short loc_13F5D
; ---------------------------------------------------------------------------

loc_13F5B:                              ; ...
                dec     si
                inc     cx

loc_13F5D:                              ; ...
                cmp     cs:byte_1301A, 59h ; 'Y'
                jz      short loc_13FC7
                cmp     cs:byte_1301A, 44h ; 'D'
                jz      short loc_13FA1
                cmp     cs:byte_1301A, 49h ; 'I'
                jz      short loc_13FA1
                cmp     cs:byte_1301A, 57h ; 'W'
                jz      short loc_13FA1
                cmp     cs:byte_1301A, 53h ; 'S'
                jz      short loc_13FA1
                cmp     cs:byte_1301A, 31h ; '1'
                jz      short loc_13F90

loc_13F8D:                              ; ...
                jmp     loc_14029
; ---------------------------------------------------------------------------

loc_13F90:                              ; ...
                call    sub_140B7
                jz      short loc_1400B
                call    sub_1409A
                call    loc_14C4A
                jz      short loc_13F90
                stosb
                jmp     loc_14038
; ---------------------------------------------------------------------------

loc_13FA1:                              ; ...
                call    sub_140B7
                jz      short loc_1400E
                call    sub_1409A
                call    loc_14C42
                jz      short loc_13FA1
                stosb

loc_13FAF:                              ; ...
                call    sub_140B7
                jz      short loc_1400E
                call    sub_1409A
                cmp     al, 2Fh ; '/'
                jz      short loc_14016
                stosb
                call    loc_14C42
                jz      short loc_1401E
                cmp     al, 20h ; ' '
                ja      short loc_13FAF
                jmp     short loc_1401E
; ---------------------------------------------------------------------------

loc_13FC7:                              ; ...
                call    sub_1409A
                cmp     al, 20h ; ' '
                jz      short loc_13FC7
                cmp     al, 9
                jz      short loc_13FC7
                cmp     al, 3Dh ; '='
                jz      short loc_13FC7
                cmp     al, 0Dh
                jz      short loc_14004
                cmp     al, 0Ah
                jz      short loc_14004
                mov     cs:byte_13018, al
                mov     cs:byte_13017, 1
                call    sub_1409A
                cmp     al, 20h ; ' '
                jz      short loc_14004
                cmp     al, 9
                jz      short loc_14004
                cmp     al, 0Dh
                jz      short loc_14004
                cmp     al, 0Ah
                jz      short loc_1400B
                mov     cs:byte_13019, al
                inc     cs:byte_13017

loc_14004:                              ; ...
                call    sub_1409A
                cmp     al, 0Ah
                jnz     short loc_14004

loc_1400B:                              ; ...
                jmp     loc_13EB2
; ---------------------------------------------------------------------------

loc_1400E:                              ; ...
                mov     byte ptr es:[di], 0
                inc     di
                jmp     loc_13EB2
; ---------------------------------------------------------------------------

loc_14016:                              ; ...
                mov     byte ptr es:[di], 0
                inc     di
                stosb
                jmp     short loc_14038
; ---------------------------------------------------------------------------

loc_1401E:                              ; ...
                mov     byte ptr es:[di-1], 0
                cmp     al, 0Ah
                jz      short loc_1400B
                jmp     short loc_14038
; ---------------------------------------------------------------------------

loc_14029:                              ; ...
                call    sub_140B7
                jz      short loc_1400B
                call    sub_1409A
                call    loc_14C4A
                jz      short loc_14029
                jmp     short loc_14040
; ---------------------------------------------------------------------------

loc_14038:                              ; ...
                call    sub_140B7
                jz      short loc_1400B
                call    sub_1409A

loc_14040:                              ; ...
                stosb
                cmp     al, 22h ; '"'
                jz      short loc_14083
                cmp     al, 20h ; ' '
                ja      short loc_14038
                cmp     cs:byte_1301A, 55h ; 'U'
                jnz     short loc_14066
                cmp     al, 0Ah
                jz      short loc_1406C
                cmp     al, 0Dh
                jnz     short loc_14038
                mov     byte ptr es:[di-1], 20h ; ' '
                stosb
                inc     cs:byte_139FE
                jmp     short loc_14038
; ---------------------------------------------------------------------------

loc_14066:                              ; ...
                cmp     al, 0Ah
                jz      short loc_1407A
                jmp     short loc_14038
; ---------------------------------------------------------------------------

loc_1406C:                              ; ...
                cmp     cs:byte_139FE, 1
                jz      short loc_1407A
                mov     byte ptr es:[di-1], 20h ; ' '
                stosb

loc_1407A:                              ; ...
                mov     cs:byte_139FE, 0
                jmp     loc_13EA0
; ---------------------------------------------------------------------------

loc_14083:                              ; ...
                cmp     cs:byte_13016, 0
                jz      short loc_14093
                mov     cs:byte_13016, 0
                jmp     short loc_14038
; ---------------------------------------------------------------------------

loc_14093:                              ; ...
                inc     cs:byte_13016
                jmp     short loc_14038
sub_13E8D       endp


; =============== S U B R O U T I N E =======================================


sub_1409A       proc near               ; ...

; FUNCTION CHUNK AT 27F8 SIZE 0000030F BYTES

                jcxz    short loc_140A0
                lods    byte ptr es:[si]
                dec     cx
                retn
; ---------------------------------------------------------------------------

loc_140A0:                              ; ...
                pop     cx
                mov     cs:word_1301C, di
                mov     cs:word_1301E, di
                xor     si, si
                mov     cs:word_13020, si
                mov     cx, di
                jmp     loc_14278
sub_1409A       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_140B7       proc near               ; ...
                jcxz    short loc_140A0
                cmp     cs:byte_13016, 0
                jnz     short locret_140F1
                cmp     cs:byte_13017, 1
                jb      short locret_140F1
                mov     al, es:[si]
                cmp     cs:byte_13018, al
                jnz     short locret_140F1
                cmp     cs:byte_13017, 2
                jnz     short loc_140E6
                mov     al, es:[si+1]
                cmp     cs:byte_13019, al
                jnz     short locret_140F1

loc_140E6:                              ; ...
                jcxz    short loc_140A0
                mov     al, es:[si]
                inc     si
                dec     cx
                cmp     al, 0Ah
                jnz     short loc_140E6

locret_140F1:                           ; ...
                retn
sub_140B7       endp


; =============== S U B R O U T I N E =======================================


sub_140F2       proc near               ; ...
                test    byte ptr ds:36C0h, 8
                jnz     short locret_140F1
                sub     dx, dx
                cmp     byte ptr ds:44A0h, 0
                jnz     short loc_14127
                cmp     byte ptr ds:449Ch, 0
                jnz     loc_141FE
                sub     dx, dx
                mov     ah, 2
                int     16h             ; KEYBOARD - GET SHIFT STATUS
                                        ; AL = shift status bits
                test    al, 7
                jz      short loc_1412C
                test    al, 3
                jnz     short loc_14120
                mov     byte ptr ds:449Ch, 1
                jmp     short loc_1412C
; ---------------------------------------------------------------------------

loc_14120:                              ; ...
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CFCh

loc_14127:                              ; ...
                or      byte ptr ds:36C5h, 1

loc_1412C:                              ; ...
                mov     ah, 1
                int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                        ; Return: ZF clear if character in buffer
                                        ; AH = scan code, AL = character
                                        ; ZF set if no character in buffer
                jnz     short loc_1413E
                test    byte ptr ds:449Ch, 1
                jz      loc_14229
                jmp     loc_141FE
; ---------------------------------------------------------------------------

loc_1413E:                              ; ...
                test    al, al
                jz      short loc_14165
                cmp     al, 1Bh
                jnz     loc_14229
                cmp     byte ptr ds:15B1h, 1
                jnz     short loc_1415D
                inc     byte ptr ds:15B1h
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CBAh
                jmp     loc_14220
; ---------------------------------------------------------------------------

loc_1415D:                              ; ...
                or      byte ptr ds:36C0h, 1
                jmp     loc_14220
; ---------------------------------------------------------------------------

loc_14165:                              ; ...
                cmp     ah, 3Fh ; '?'
                jz      short loc_1417B
                cmp     ah, 62h ; 'b'
                jz      short loc_141A1
                cmp     ah, 6Ch ; 'l'
                jz      short loc_141A3
                cmp     ah, 58h ; 'X'
                jnz     short loc_141D1
                jmp     short loc_1418A
; ---------------------------------------------------------------------------

loc_1417B:                              ; ...
                or      byte ptr ds:36C5h, 1
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CFCh
                jmp     loc_14220
; ---------------------------------------------------------------------------

loc_1418A:                              ; ...
                or      byte ptr ds:36C5h, 2
                or      byte ptr ds:36C0h, 40h
                push    ds
                mov     ds, word ptr ds:150Ah
                or      byte ptr ds:1F87h, 40h
                pop     ds
                jmp     short loc_1417B
; ---------------------------------------------------------------------------

loc_141A1:                              ; ...
                jmp     short loc_1418A
; ---------------------------------------------------------------------------

loc_141A3:                              ; ...
                or      byte ptr ds:36C0h, 61h
                push    ds
                mov     ds, word ptr ds:150Ah
                or      byte ptr ds:1F87h, 40h
                pop     ds
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D00h
                jmp     short loc_14220
; ---------------------------------------------------------------------------

loc_141BC:                              ; ...
                or      byte ptr ds:36BFh, 10h
                test    byte ptr ds:36C0h, 10h
                jnz     short loc_14220
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D4Ah
                jmp     short loc_14220
; ---------------------------------------------------------------------------

loc_141D1:                              ; ...
                cmp     ah, 40h ; '@'
                jnz     short loc_141E4
                or      byte ptr ds:36C5h, 5
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CFEh
                jmp     short loc_14220
; ---------------------------------------------------------------------------

loc_141E4:                              ; ...
                test    byte ptr ds:36C0h, 80h
                jnz     short loc_141F5
                cmp     ah, 3Eh ; '>'
                jz      short loc_141BC
                cmp     ah, 61h ; 'a'
                jz      short loc_141BC

loc_141F5:                              ; ...
                cmp     ah, 42h ; 'B'
                jnz     short loc_14205
                mov     ah, 0
                int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                        ; Return: AH = scan code, AL = character

loc_141FE:                              ; ...
                sub     di, di
                call    sub_17361
                jmp     short loc_14229
; ---------------------------------------------------------------------------

loc_14205:                              ; ...
                cmp     ah, 5Bh ; '['
                jz      short loc_1420F
                cmp     ah, 65h ; 'e'
                jnz     short loc_14229

loc_1420F:                              ; ...
                sub     dx, dx
                and     byte ptr ds:36C5h, 0FEh
                or      byte ptr ds:36C5h, 8
                and     byte ptr ds:36C0h, 0EFh

loc_14220:                              ; ...
                mov     ah, 0
                int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                        ; Return: AH = scan code, AL = character
                mov     byte ptr ds:36CCh, 0FFh

loc_14229:                              ; ...
                cmp     byte ptr ds:15B1h, 0
                jz      short loc_14249
                push    dx
                mov     dl, 0Dh
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                mov     cx, 4Fh ; 'O'

loc_1423A:                              ; ...
                mov     dl, 20h ; ' '
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                loop    loc_1423A
                mov     dl, 0Dh
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                pop     dx

loc_14249:                              ; ...
                or      dx, dx
                jz      short locret_14250
                call    print

locret_14250:                           ; ...
                retn
sub_140F2       endp


; =============== S U B R O U T I N E =======================================


sub_14251       proc near               ; ...
                push    ax
                push    ds
                sub     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     ax, es:[si]
                cmp     ax, word ptr cs:aOff ; "OFF"
                jnz     short loc_14268
                and     byte ptr loc_416+1, 0DFh
                jmp     short loc_14275
; ---------------------------------------------------------------------------

loc_14268:                              ; ...
                cmp     ax, word ptr cs:aOn ; "ON"
                stc
                jnz     short loc_14275
                or      byte ptr loc_416+1, 20h

loc_14275:                              ; ...
                pop     ds
                assume ds:nothing
                pop     ax
                retn
sub_14251       endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_1409A

loc_14278:                              ; ...
                mov     byte ptr ds:36B8h, 0
                push    cx
                push    si
                sub     bx, bx

loc_14281:                              ; ...
                call    sub_14AB8
                jb      short loc_142DA
                cmp     al, 5Bh ; '['
                jnz     short loc_1429A
                inc     bx
                push    ds
                mov     ds, word ptr ds:1508h
                test    byte ptr ds:9, 20h
                pop     ds
                jnz     short loc_142D5
                jmp     short loc_142D5
; ---------------------------------------------------------------------------

loc_1429A:                              ; ...
                cmp     al, 4Eh ; 'N'
                jnz     short loc_142AC
                or      bx, bx
                jnz     short loc_142D5
                call    sub_14251
                mov     byte ptr es:[si-1], 30h ; '0'
                jmp     short loc_142D5
; ---------------------------------------------------------------------------

loc_142AC:                              ; ...
                cmp     al, 31h ; '1'
                jnz     short loc_142D5

loc_142B0:                              ; ...
                call    sub_14AB8

loc_142B3:                              ; ...
                cmp     al, 0Ah
                jz      short loc_142D5
                cmp     al, 2Fh ; '/'
                jnz     short loc_142B0
                call    sub_14AB8
                and     al, 0DFh
                cmp     al, ds:6C07h
                jnz     short loc_142CD
                or      byte ptr ds:36C0h, 8
                jmp     short loc_142B0
; ---------------------------------------------------------------------------

loc_142CD:                              ; ...
                cmp     al, ds:6C13h
                jnz     short loc_142B3
                jmp     short loc_142B0
; ---------------------------------------------------------------------------

loc_142D5:                              ; ...
                call    sub_14A76
                jmp     short loc_14281
; ---------------------------------------------------------------------------

loc_142DA:                              ; ...
                pop     si
                pop     cx
                test    byte ptr ds:36C0h, 8
                jz      short loc_142E8
                and     byte ptr ds:36C5h, 0F6h

loc_142E8:                              ; ...
                test    byte ptr ds:36C5h, 1
                jnz     loc_14448

loc_142F1:                              ; ...
                sub     bx, bx
                mov     di, 3708h
                call    sub_146CD
                jnb     short loc_1433A
                mov     byte ptr ds:3700h, 0
                jmp     loc_14478
; ---------------------------------------------------------------------------

loc_14303:                              ; ...
                push    cx
                push    dx
                mov     dx, 7
                call    sub_14A84
                and     bl, 0Fh
                mov     ch, bl
                and     dl, 0F0h
                or      dl, bl
                call    loc_14C42
                jnz     short loc_1432A
                call    sub_14A84
                and     bl, 0Fh
                mov     dh, bl
                and     dl, 0Fh
                shl     bl, 4
                or      dl, bl

loc_1432A:                              ; ...
                cmp     ch, dh
                jnz     short loc_14331
                xor     dl, 8

loc_14331:                              ; ...
                mov     ds:36B9h, dl
                pop     dx
                pop     cx
                jmp     loc_143EC
; ---------------------------------------------------------------------------

loc_1433A:                              ; ...
                mov     byte ptr ds:36C7h, 1
                mov     word ptr ds:36C9h, 0
                mov     byte ptr ds:36CBh, 0FFh
                test    byte ptr ds:36C5h, 10h
                jz      short loc_14356
                and     byte ptr ds:36C5h, 0E7h

loc_14356:                              ; ...
                call    sub_14A76
                sub     dx, dx

loc_1435B:                              ; ...
                call    sub_14AB8
                jb      short loc_1438E
                and     al, 7Fh
                cmp     al, 5Bh ; '['
                jz      short loc_1438E
                cmp     al, 4Fh ; 'O'
                jz      short loc_143B7
                cmp     al, 45h ; 'E'
                jz      short loc_143B7
                cmp     al, 41h ; 'A'
                jz      short loc_14390
                cmp     al, 52h ; 'R'
                jz      short loc_14303
                cmp     al, 4Eh ; 'N'
                jz      short loc_14389
                cmp     al, 30h ; '0'
                jz      short loc_143EC
                call    sub_14C32
                jz      short loc_143EC
                stc
                call    sub_14C00
                jmp     short loc_143EC
; ---------------------------------------------------------------------------

loc_14389:                              ; ...
                call    sub_14251
                jmp     short loc_143EC
; ---------------------------------------------------------------------------

loc_1438E:                              ; ...
                jmp     short loc_143F2
; ---------------------------------------------------------------------------

loc_14390:                              ; ...
                mov     ds:36C9h, si
                cmp     byte ptr ds:36CCh, 0
                jnz     short loc_143B5
                call    sub_14A50
                jb      short loc_143EC
                call    sub_14A67
                jb      short loc_143EC
                mov     si, bx
                call    sub_14A84
                cmp     bx, 5Ah ; 'Z'
                jb      short loc_143B1
                mov     bl, 5Ah ; 'Z'

loc_143B1:                              ; ...
                mov     ds:36CBh, bl

loc_143B5:                              ; ...
                jmp     short loc_143EC
; ---------------------------------------------------------------------------

loc_143B7:                              ; ...
                cmp     dl, 9
                jnb     short loc_143EC
                mov     di, si
                call    sub_146B4
                jz      short loc_143C9
                stc
                call    sub_14C00
                jmp     short loc_143EC
; ---------------------------------------------------------------------------

loc_143C9:                              ; ...
                inc     dx
                mov     bx, dx
                mov     [bx+36CDh], al
                add     bx, bx
                mov     [bx+36D7h], si
                mov     [bx+36EBh], si
                mov     di, bx
                call    sub_14A50
                jb      short loc_143EC
                call    sub_14A67
                jb      short loc_143EC
                xchg    bx, di
                mov     [bx+36EBh], di

loc_143EC:                              ; ...
                call    sub_14A76
                jmp     loc_1435B
; ---------------------------------------------------------------------------

loc_143F2:                              ; ...
                or      dl, dl
                jnz     short loc_143FA
                sub     bx, bx
                jmp     short loc_14443
; ---------------------------------------------------------------------------

loc_143FA:                              ; ...
                sub     bx, bx
                mov     ds:36C8h, dl
                mov     di, ds:36C9h
                or      di, di
                jz      short loc_14424
                inc     bx

loc_14409:                              ; ...
                push    bx
                add     bx, bx
                mov     si, [bx+36D7h]
                mov     cx, 80h
                push    ds
                push    es
                pop     ds
                call    sub_146F5
                pop     ds
                pop     bx
                jz      short loc_14426
                inc     bx
                cmp     bl, ds:36C8h
                jbe     short loc_14409

loc_14424:                              ; ...
                mov     bl, 1

loc_14426:                              ; ...
                mov     ds:36C7h, bl
                cmp     byte ptr ds:36CBh, 0
                jnz     short loc_1443A
                test    byte ptr ds:36C5h, 8
                jnz     short loc_1443A
                jmp     short loc_1445B
; ---------------------------------------------------------------------------

loc_1443A:                              ; ...
                inc     byte ptr ds:36B8h
                sub     di, di
                call    sub_14724

loc_14443:                              ; ...
                cmp     bx, 0FFFFh
                jnz     short loc_1444D

loc_14448:                              ; ...
                sub     cx, cx
                jmp     loc_1457E
; ---------------------------------------------------------------------------

loc_1444D:                              ; ...
                cmp     bx, 0FFFEh
                jnz     short loc_1445B
                mov     cx, ds:159Ch
                sub     si, si
                jmp     loc_142F1
; ---------------------------------------------------------------------------

loc_1445B:                              ; ...
                cmp     byte ptr [bx+36CDh], 4Fh ; 'O'
                jnz     short loc_14472
                add     bx, bx
                mov     di, [bx+36D7h]
                call    sub_146B4
                mov     si, di
                mov     cx, bx
                jmp     loc_1433A
; ---------------------------------------------------------------------------

loc_14472:                              ; ...
                add     bx, bx
                mov     bx, [bx+36D7h]

loc_14478:                              ; ...
                mov     ds:36C9h, bx
                mov     cx, ds:159Ch
                sub     si, si
                push    ds
                mov     ds, word ptr ds:60C2h
                sub     di, di

loc_14489:                              ; ...
                push    bx
                call    sub_14623
                pop     bx
                jb      short loc_144CC

loc_14490:                              ; ...
                push    ax
                push    cx
                push    si
                push    di
                mov     di, 370Dh
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    sub_146F5
                pop     ds
                assume ds:nothing
                pop     di
                pop     si
                pop     cx
                pop     ax
                jz      short loc_144B3
                or      bx, bx
                jz      short loc_144BC
                push    di
                mov     di, bx
                push    ds
                push    es
                pop     ds
                call    sub_146F5
                pop     ds
                pop     di

loc_144B3:                              ; ...
                jb      short loc_144CC
                jnz     short loc_144BC
                call    sub_14A76
                jmp     short loc_14489
; ---------------------------------------------------------------------------

loc_144BC:                              ; ...
                call    sub_14A76
                call    sub_14AB8
                jb      short loc_144CC
                and     al, 7Fh
                cmp     al, 5Bh ; '['
                jz      short loc_14490
                jmp     short loc_144BC
; ---------------------------------------------------------------------------

loc_144CC:                              ; ...
                mov     cx, di
                push    cx
                mov     cx, 7
                mov     si, 3700h
                inc     di

loc_144D6:                              ; ...
                lods    byte ptr cs:[si]
                mov     [di], al
                inc     di
                loop    loc_144D6
                push    es
                mov     si, cs:word_15149
                or      si, si
                jnz     short loc_144EE
                push    cs
                pop     es
                assume es:SYSINIT
                mov     si, 370Dh
                jmp     short loc_1451E
; ---------------------------------------------------------------------------

loc_144EE:                              ; ...
                mov     bx, 44ABh
                cmp     byte ptr cs:[bx], 0
                jz      short loc_1451E
                push    si
                mov     cx, 20h ; ' '

loc_144FB:                              ; ...
                mov     al, cs:[bx]
                test    al, al
                jz      short loc_1451D
                call    sub_17B31
                mov     ah, al
                mov     al, es:[si]
                call    sub_17B31
                cmp     al, ah
                jnz     short loc_14517
                inc     bx
                inc     si
                loop    loc_144FB
                jmp     short loc_1451D
; ---------------------------------------------------------------------------

loc_14517:                              ; ...
                or      cs:byte_15140, 20h

loc_1451D:                              ; ...
                pop     si

loc_1451E:                              ; ...
                mov     cx, 79h ; 'y'

loc_14521:                              ; ...
                mov     al, es:[si]
                call    sub_14C32
                jz      short loc_1452F
                mov     [di], al
                inc     si
                inc     di
                loop    loc_14521

loc_1452F:                              ; ...
                mov     byte ptr [di], 0Ah
                pop     es
                assume es:nothing
                sub     di, di
                mov     cs:config_envlen, di
                sub     si, si
                pop     cx
                push    cx
                rep movsb
                pop     cx
                mov     ax, ds
                pop     ds
                push    es
                mov     es, ax
                inc     si
                mov     byte ptr es:0, 0
                mov     dx, 1
                call    sub_14587
                pop     es
                cmp     byte ptr ds:36B8h, 0
                jz      short loc_14562
                mov     dx, 1
                call    sub_1AA94

loc_14562:                              ; ...
                cmp     byte ptr ds:36BAh, 0
                jz      short loc_1457E
                push    es
                mov     ax, 40h ; '@'
                mov     es, ax
                assume es:nothing
                mov     ax, ds:36C2h
                mov     es:4Eh, ax

loc_14576:                              ; ...
                mov     al, ds:36BEh
                mov     es:62h, al
                pop     es
                assume es:nothing

loc_1457E:                              ; ...
                mov     ds:159Ch, cx
                mov     ds:159Eh, cx
                retn
; END OF FUNCTION CHUNK FOR sub_1409A

; =============== S U B R O U T I N E =======================================


sub_14587       proc near               ; ...
                push    cx
                push    si
                push    ds
                push    es
                push    es
                mov     es, word ptr ds:60C2h
                pop     ds
                sub     cx, cx

loc_14593:                              ; ...
                lodsb
                or      al, al
                stc
                jz      loc_1461E
                cmp     al, 0Dh
                stc
                jz      short loc_1461E
                cmp     al, 0Ah
                stc
                jz      short loc_1461E
                inc     cx
                cmp     al, 3Dh ; '='
                jnz     short loc_14593
                mov     al, 0
                mov     ah, [si]
                sub     si, cx
                dec     cx
                sub     di, di

loc_145B3:                              ; ...
                cmp     es:[di], al
                jz      short loc_145E6
                mov     bx, di
                push    cx
                push    si
                repe cmpsb
                pop     si
                pop     cx
                jnz     short loc_145FA
                cmp     byte ptr es:[di], 3Dh ; '='
                jnz     short loc_145FA
                test    dx, dx
                jnz     short loc_145D1
                lea     dx, [di+1]
                jmp     short loc_1461E
; ---------------------------------------------------------------------------

loc_145D1:                              ; ...
                mov     cx, 0FFFFh
                repne scasb
                push    si
                mov     si, di
                mov     di, bx
                mov     cx, cs:config_envlen
                sub     cx, si
                rep movs byte ptr es:[di], byte ptr es:[si]
                pop     si

loc_145E6:                              ; ...
                test    dx, dx
                jz      short loc_1461E
                test    ah, ah
                jz      short loc_14616
                cmp     ah, 0Dh
                jz      short loc_14616
                cmp     ah, 0Ah
                jz      short loc_14616
                jmp     short loc_14603
; ---------------------------------------------------------------------------

loc_145FA:                              ; ...
                push    cx
                mov     cx, 0FFFFh
                repne scasb
                pop     cx
                jmp     short loc_145B3
; ---------------------------------------------------------------------------

loc_14603:                              ; ...
                lodsb
                test    al, al
                jz      short loc_14613
                cmp     al, 0Dh
                jz      short loc_14613
                cmp     al, 0Ah
                jz      short loc_14613
                stosb
                jmp     short loc_14603
; ---------------------------------------------------------------------------

loc_14613:                              ; ...
                sub     al, al
                stosb

loc_14616:                              ; ...
                mov     es:[di], al
                mov     cs:config_envlen, di

loc_1461E:                              ; ...
                pop     es
                pop     ds
                pop     si
                pop     cx
                retn
sub_14587       endp


; =============== S U B R O U T I N E =======================================


sub_14623       proc near               ; ...
                call    sub_14AB8
                jb      short locret_14697
                and     al, 7Fh
                cmp     al, 5Bh ; '['
                jz      short locret_14697
                cmp     al, 4Ah ; 'J'
                mov     al, ah
                jnz     short loc_1466E
                mov     byte ptr es:[si-1], 30h ; '0'
                push    di
                mov     di, 3708h
                call    sub_14716
                jz      short loc_14667
                mov     di, 370Dh
                call    sub_14716
                jz      short loc_14667
                mov     di, si
                call    sub_146B4
                mov     dx, di
                pop     di
                jnz     short loc_14668
                push    cx
                mov     cx, bx
                push    si
                dec     dx
                mov     si, dx
                call    loc_14A7A
                call    sub_14623
                pop     si
                pop     cx
                sub     al, al
                jmp     short loc_14692
; ---------------------------------------------------------------------------

loc_14667:                              ; ...
                pop     di

loc_14668:                              ; ...
                clc
                call    sub_14C00
                jmp     short loc_14692
; ---------------------------------------------------------------------------

loc_1466E:                              ; ...
                mov     [di], al
                inc     di
                cmp     al, 20h ; ' '
                jb      short loc_14692
                cmp     byte ptr cs:word_17B45, 0
                jz      short loc_14686
                call    sub_14698
                mov     [di], bx
                inc     di
                inc     di
                jmp     short loc_1468E
; ---------------------------------------------------------------------------

loc_14686:                              ; ...
                call    sub_14AB8
                jb      short locret_14697
                mov     [di], al
                inc     di

loc_1468E:                              ; ...
                cmp     al, 0Ah
                jnz     short loc_14686

loc_14692:                              ; ...
                call    sub_14A76
                jmp     short sub_14623
; ---------------------------------------------------------------------------

locret_14697:                           ; ...
                retn
sub_14623       endp


; =============== S U B R O U T I N E =======================================


sub_14698       proc near               ; ...
                push    ax
                sub     bx, bx
                push    cx
                mov     dx, si
                push    si
                mov     cx, cs:word_1301C
                sub     si, si

loc_146A6:                              ; ...
                call    loc_14A7A
                jb      short loc_146B0
                inc     bx
                cmp     si, dx
                jb      short loc_146A6

loc_146B0:                              ; ...
                pop     si
                pop     cx
                pop     ax
                retn
sub_14698       endp


; =============== S U B R O U T I N E =======================================


sub_146B4       proc near               ; ...
                push    ax
                push    cx
                mov     cx, cs:word_1301C
                push    si
                sub     si, si
                push    ds
                push    es
                pop     ds
                call    sub_146CD
                mov     di, si
                mov     bx, cx
                pop     ds
                pop     si
                pop     cx
                pop     ax
                retn
sub_146B4       endp


; =============== S U B R O U T I N E =======================================


sub_146CD       proc near               ; ...
                call    sub_14AB8
                jb      short locret_146F4
                and     al, 7Fh
                cmp     al, 5Bh ; '['
                jz      short loc_146E4
                cmp     al, 4Ah ; 'J'
                jnz     short loc_146EF
                or      byte ptr cs:word_17B45, 1
                jmp     short loc_146EF
; ---------------------------------------------------------------------------

loc_146E4:                              ; ...
                or      byte ptr cs:word_17B45, 1
                call    sub_146F5
                jbe     short locret_146F4

loc_146EF:                              ; ...
                call    sub_14A76
                jmp     short sub_146CD
; ---------------------------------------------------------------------------

locret_146F4:                           ; ...
                retn
sub_146CD       endp


; =============== S U B R O U T I N E =======================================


sub_146F5       proc near               ; ...
                push    di

loc_146F6:                              ; ...
                call    sub_14AB8
                jb      short loc_1470B
                call    sub_14C32
                mov     ah, [di]
                jz      short loc_1470D
                inc     di
                and     ax, 0DFDFh
                cmp     al, ah
                jz      short loc_146F6
                clc

loc_1470B:                              ; ...
                pop     di
                retn
; ---------------------------------------------------------------------------

loc_1470D:                              ; ...
                xchg    al, ah
                call    sub_14C32
                xchg    al, ah
                jmp     short loc_1470B
sub_146F5       endp


; =============== S U B R O U T I N E =======================================


sub_14716       proc near               ; ...
                push    ax
                push    cx
                push    si
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    sub_146F5
                pop     ds
                assume ds:nothing
                pop     si
                pop     cx
                pop     ax
                retn
sub_14716       endp


; =============== S U B R O U T I N E =======================================


sub_14724       proc near               ; ...
                mov     ah, 0Fh
                int     10h             ; - VIDEO - GET CURRENT VIDEO MODE
                                        ; Return: AH = number of columns on screen
                                        ; AL = current video mode
                                        ; BH = current active display page
                mov     ah, 0
                int     10h             ; - VIDEO - SET VIDEO MODE
                                        ; AL = mode
                push    es
                mov     ax, 40h ; '@'
                mov     es, ax
                assume es:nothing
                mov     ax, es:4Eh
                mov     ds:36C2h, ax
                mov     al, es:62h
                mov     ds:36BEh, al
                mov     ax, ds:36BAh
                int     10h             ; - VIDEO -
                mov     ax, 600h
                mov     bh, ds:36B9h
                sub     cx, cx
                mov     dl, large es:4Ah
                dec     dl
                mov     dh, large es:84h
                or      dh, dh
                jnz     short loc_14768
                mov     dh, ds:36BDh

loc_14768:                              ; ...
                int     10h             ; - VIDEO - SCROLL PAGE UP
                                        ; AL = number of lines to scroll window (0 = blank whole window)
                                        ; BH = attributes to be used on blanked lines
                                        ; CH,CL = row,column of upper left corner of window to scroll
                                        ; DH,DL = row,column of lower right corner of window
                pop     es
                assume es:nothing
                mov     ds:36BDh, dh
                call    print_x
                sbb     [bx+si+6F6h], al
                sal     byte ptr ds:7508h, 1Eh
                mov     bh, ds:36BAh
                mov     dh, ds:36BDh
                mov     dl, 0
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                call    print_x
                sbb     al, [bx+si+3B4h]
                int     10h             ; - VIDEO -
                sub     dl, 2
                mov     ds:36BCh, dl
                mov     bx, 1

loc_1479C:                              ; ...
                call    sub_147F7
                inc     bx
                cmp     bl, ds:36C8h
                jbe     short loc_1479C
                mov     dl, 0
                mov     dh, bl
                add     dh, 6
                mov     bh, ds:36BAh
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                test    di, di
                jz      short loc_147BE
                mov     dx, di
                call    print

loc_147BE:                              ; ...
                mov     dl, 0
                mov     dh, bl
                add     dh, 4
                mov     bh, ds:36BAh
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                call    print_x
                sbb     [bx+si-4F18h], ax
                add     [bx+di+1], bh
                test    di, di
                jz      short loc_147DF
                mov     cx, 4

loc_147DF:                              ; ...
                call    print_x
                add     ax, 0E280h
                stc
                push    word ptr ds:36C0h
                or      byte ptr ds:36C0h, 8
                call    sub_14A11
                pop     word ptr ds:36C0h
                retn
sub_14724       endp


; =============== S U B R O U T I N E =======================================


sub_147F7       proc near               ; ...
                pusha
                mov     ah, 3
                mov     bh, ds:36BAh
                int     10h             ; - VIDEO - READ CURSOR POSITION
                                        ; BH = page number
                                        ; Return: DH,DL = row,column, CH = cursor start line, CL = cursor end line
                push    dx
                mov     ah, 2
                mov     dh, bl
                add     dh, 3
                mov     dl, 5
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                mov     al, bl
                add     al, 30h ; '0'
                mov     ah, ds:36B9h
                cmp     bl, ds:36C7h
                jnz     short loc_1482A
                or      ah, 70h
                mov     ch, ah
                mov     cl, 4
                rol     ch, cl
                cmp     ch, ah
                jnz     short loc_1482A
                xor     ah, 8

loc_1482A:                              ; ...
                mov     bh, 0
                add     bx, bx
                mov     di, [bx+36EBh]
                mov     bl, ah
                mov     bh, ds:36BAh
                mov     ah, 9
                mov     cx, 1
                int     10h             ; - VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION
                                        ; AL = character, BH = display page
                                        ; BL = attributes of character (alpha modes) or color (graphics modes)
                                        ; CX = number of times to write character
                inc     dl
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                mov     ax, 92Eh
                int     10h             ; - VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION
                                        ; AL = character, BH = display page
                                        ; BL = attributes of character (alpha modes) or color (graphics modes)
                                        ; CX = number of times to write character
                inc     dl
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                mov     ax, 920h
                int     10h             ; - VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION
                                        ; AL = character, BH = display page
                                        ; BL = attributes of character (alpha modes) or color (graphics modes)
                                        ; CX = number of times to write character
                inc     dl
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number

loc_1485B:                              ; ...
                mov     al, es:[di]
                inc     di
                cmp     al, 9
                jnz     short loc_14865
                mov     al, 20h ; ' '

loc_14865:                              ; ...
                cmp     al, 20h ; ' '
                jb      short loc_1487E
                cmp     al, 24h ; '$'
                jz      short loc_1487E
                mov     ah, 9
                int     10h             ; - VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION
                                        ; AL = character, BH = display page
                                        ; BL = attributes of character (alpha modes) or color (graphics modes)
                                        ; CX = number of times to write character
                inc     dl
                cmp     dl, 4Eh ; 'N'
                jnb     short loc_1487E
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                jmp     short loc_1485B
; ---------------------------------------------------------------------------

loc_1487E:                              ; ...
                pop     dx
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                popa
                retn
sub_147F7       endp

; ---------------------------------------------------------------------------
                mov     bl, ds:36C7h
                mov     al, bl
                call    sub_14A01
                call    sub_14A11
                cmp     byte ptr ds:36CBh, 0FFh
                jz      short loc_148E9
                mov     ah, 2Ch
                int     21h             ; DOS - GET CURRENT TIME
                                        ; Return: CH = hours, CL = minutes, DH = seconds
                                        ; DL = hundredths of seconds
                mov     bh, dh

loc_1489E:                              ; ...
                mov     al, ds:36CBh
                sub     al, ds:36CCh
                jnb     short loc_148B4
                or      byte ptr ds:36C5h, 10h
                mov     byte ptr ds:36CCh, 0
                jmp     loc_149E7
; ---------------------------------------------------------------------------

loc_148B4:                              ; ...
                push    bx
                mov     bl, al
                mov     bh, ds:36BAh
                mov     ah, 3
                int     10h             ; - VIDEO - READ CURSOR POSITION
                                        ; BH = page number
                                        ; Return: DH,DL = row,column, CH = cursor start line, CL = cursor end line
                push    dx
                add     dl, 8
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                call    print_x
                push    ds
                or      byte ptr [bp+si-673Dh], 0B1h
                or      dh, dh
                icebp
                mov     cl, ah
                add     al, 30h ; '0'
                mov     ah, 0Eh
                int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
                                        ; AL = character, BH = display page (alpha modes)
                                        ; BL = foreground color (graphics modes)
                mov     al, cl
                add     al, 30h ; '0'
                mov     ah, 0Eh
                int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
                                        ; AL = character, BH = display page (alpha modes)
                                        ; BL = foreground color (graphics modes)
                pop     dx
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                pop     bx

loc_148E9:                              ; ...
                mov     ah, 6
                mov     dl, 0FFh
                int     21h             ; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
                                        ; DL = character <> FFh
                                        ;  Return: ZF set = no character
                                        ;   ZF clear = character recieved, AL = character
                jnz     short loc_14910
                cmp     byte ptr ds:36CBh, 0FFh
                jz      short loc_148E9
                mov     ah, 2Ch
                int     21h             ; DOS - GET CURRENT TIME
                                        ; Return: CH = hours, CL = minutes, DH = seconds
                                        ; DL = hundredths of seconds
                mov     ah, dh
                sub     dh, bh
                mov     bh, ah
                jnb     short loc_14906
                mov     dh, 1

loc_14906:                              ; ...
                or      dh, dh
                jz      short loc_148E9
                add     ds:36CCh, dh
                jmp     short loc_1489E
; ---------------------------------------------------------------------------

loc_14910:                              ; ...
                push    ax
                mov     ax, 0FFFFh
                xchg    ax, ds:36CBh
                cmp     al, 0FFh
                jz      short loc_1492A
                push    bx
                mov     ax, 0A20h
                mov     bx, ds:36B9h
                mov     cx, 50h ; 'P'
                int     10h             ; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
                                        ; AL = character, BH = display page - alpha mode
                                        ; BL = color of character (graphics mode, PCjr only)
                                        ; CX = number of times to write character
                pop     bx

loc_1492A:                              ; ...
                pop     ax
                or      al, al
                jnz     loc_149C6
                int     21h             ; DOS -
                jz      short loc_148E9
                cmp     al, 48h ; 'H'
                jnz     short loc_14949
                cmp     bl, 1
                jbe     short loc_148E9
                dec     byte ptr ds:36C7h
                call    sub_147F7
                dec     bl
                jmp     short loc_1495B
; ---------------------------------------------------------------------------

loc_14949:                              ; ...
                cmp     al, 50h ; 'P'
                jnz     short loc_14965
                cmp     bl, ds:36C8h
                jnb     short loc_14963
                inc     byte ptr ds:36C7h
                call    sub_147F7
                inc     bx

loc_1495B:                              ; ...
                mov     al, bl

loc_1495D:                              ; ...
                call    sub_147F7
                call    sub_14A01

loc_14963:                              ; ...
                jmp     short loc_148E9
; ---------------------------------------------------------------------------

loc_14965:                              ; ...
                test    byte ptr ds:36C0h, 8
                jnz     short loc_14963
                mov     ah, 1
                test    byte ptr ds:36C0h, 80h
                jnz     short loc_14985
                cmp     al, 3Eh ; '>'
                jnz     short loc_14985
                or      byte ptr ds:36BFh, 10h
                mov     bx, 0FFFFh
                mov     al, 20h ; ' '
                jmp     short sub_149ED
; ---------------------------------------------------------------------------

loc_14985:                              ; ...
                cmp     al, 62h ; 'b'
                jnz     short loc_1498B
                jmp     short loc_149AD
; ---------------------------------------------------------------------------

loc_1498B:                              ; ...
                cmp     al, 5Bh ; '['
                jnz     short loc_1499A
                xor     byte ptr ds:36C5h, 8
                call    sub_14A11
                jmp     loc_148E9
; ---------------------------------------------------------------------------

loc_1499A:                              ; ...
                cmp     al, 3Fh ; '?'
                jnz     short loc_149A9

loc_1499E:                              ; ...
                or      ds:36C5h, ah

loc_149A2:                              ; ...
                mov     bx, 0FFFFh
                mov     al, 20h ; ' '
                jmp     short sub_149ED
; ---------------------------------------------------------------------------

loc_149A9:                              ; ...
                cmp     al, 58h ; 'X'
                jnz     short loc_149B2

loc_149AD:                              ; ...
                or      ah, 2
                jmp     short loc_1499E
; ---------------------------------------------------------------------------

loc_149B2:                              ; ...
                cmp     al, 6Ch ; 'l'
                jnz     short loc_149BD
                or      byte ptr ds:36C0h, 21h
                jmp     short loc_149A2
; ---------------------------------------------------------------------------

loc_149BD:                              ; ...
                cmp     al, 40h ; '@'
                jnz     short loc_14963
                or      ah, 4
                jmp     short loc_1499E
; ---------------------------------------------------------------------------

loc_149C6:                              ; ...
                cmp     al, 0Dh
                jz      short loc_149E7
                cmp     al, 8
                jnz     short loc_149D2
                mov     bx, 0FFFEh
                retn
; ---------------------------------------------------------------------------

loc_149D2:                              ; ...
                sub     al, 30h ; '0'
                jbe     short loc_14963
                cmp     al, ds:36C8h
                ja      short loc_14963
                mov     ds:36C7h, al
                call    sub_147F7
                mov     bl, al
                jmp     loc_1495D
; ---------------------------------------------------------------------------

loc_149E7:                              ; ...
                mov     bh, 0
                mov     al, bl
                add     al, 30h ; '0'

; =============== S U B R O U T I N E =======================================


sub_149ED       proc near               ; ...
                push    ax
                cmp     al, 20h ; ' '
                jnb     short loc_149F4
                mov     al, 20h ; ' '

loc_149F4:                              ; ...
                mov     dl, al
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                call    print_x
                add     ax, 5880h
                retn
sub_149ED       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_14A01       proc near               ; ...
                push    bx
                add     al, 30h ; '0'
                mov     ah, 0Ah
                mov     bx, ds:36B9h
                mov     cx, 1
                int     10h             ; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
                                        ; AL = character, BH = display page - alpha mode
                                        ; BL = color of character (graphics mode, PCjr only)
                                        ; CX = number of times to write character
                pop     bx
                retn
sub_14A01       endp


; =============== S U B R O U T I N E =======================================


sub_14A11       proc near               ; ...
                push    bx
                mov     bx, ds:36B9h
                mov     ah, 3
                int     10h             ; - VIDEO - READ CURSOR POSITION
                                        ; BH = page number
                                        ; Return: DH,DL = row,column, CH = cursor start line, CL = cursor end line
                push    dx
                mov     ah, 2
                mov     dx, ds:36BCh
                test    byte ptr ds:36C0h, 8
                jz      short loc_14A36
                mov     dl, 0
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                mov     ax, 0A20h
                mov     cx, 50h ; 'P'
                int     10h             ; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
                                        ; AL = character, BH = display page - alpha mode
                                        ; BL = color of character (graphics mode, PCjr only)
                                        ; CX = number of times to write character
                jmp     short loc_14A49
; ---------------------------------------------------------------------------

loc_14A36:                              ; ...
                int     10h             ; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
                                        ; AL = character, BH = display page - alpha mode
                                        ; BL = color of character (graphics mode, PCjr only)
                                        ; CX = number of times to write character
                mov     al, ds:1F75h
                test    byte ptr ds:36C5h, 8
                jz      short loc_14A45
                mov     al, ds:1F73h

loc_14A45:                              ; ...
                mov     ah, 0Eh
                int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
                                        ; AL = character, BH = display page (alpha modes)
                                        ; BL = foreground color (graphics modes)

loc_14A49:                              ; ...
                pop     dx
                mov     ah, 2
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                pop     bx
                retn
sub_14A11       endp


; =============== S U B R O U T I N E =======================================


sub_14A50       proc near               ; ...
                call    sub_14AB8
                jb      short locret_14A66
                call    sub_14C32
                jnz     short sub_14A50

loc_14A5A:                              ; ...
                cmp     al, 0Dh
                jz      short loc_14A65
                cmp     al, 0Ah
                jz      short loc_14A65
                clc
                jmp     short locret_14A66
; ---------------------------------------------------------------------------

loc_14A65:                              ; ...
                stc

locret_14A66:                           ; ...
                retn
sub_14A50       endp


; =============== S U B R O U T I N E =======================================


sub_14A67       proc near               ; ...
                call    sub_14AB8
                lea     bx, [si-1]
                jb      short locret_14A66
                call    loc_14C42
                jz      short sub_14A67
                jmp     short loc_14A5A
sub_14A67       endp


; =============== S U B R O U T I N E =======================================


sub_14A76       proc near               ; ...
                cmp     al, 0Ah
                jz      short locret_14A83

loc_14A7A:                              ; ...
                call    sub_14AB8
                jb      short locret_14A83
                cmp     al, 0Ah
                jnz     short loc_14A7A

locret_14A83:                           ; ...
                retn
sub_14A76       endp


; =============== S U B R O U T I N E =======================================


sub_14A84       proc near               ; ...
                push    dx
                sub     bx, bx
                sub     dx, dx

loc_14A89:                              ; ...
                call    sub_14AB8
                jb      short loc_14AB0
                cmp     al, 2Dh ; '-'
                jnz     short loc_14A96
                not     dx
                jmp     short loc_14A89
; ---------------------------------------------------------------------------

loc_14A96:                              ; ...
                cmp     al, 30h ; '0'
                jb      short loc_14AB0
                cmp     al, 39h ; '9'
                ja      short loc_14AB0
                push    ax
                mov     ax, 0Ah
                push    dx
                mul     bx
                pop     dx
                mov     bx, ax
                pop     ax
                sub     al, 30h ; '0'
                cbw
                add     bx, ax
                jmp     short loc_14A89
; ---------------------------------------------------------------------------

loc_14AB0:                              ; ...
                or      dx, dx
                jz      short loc_14AB6
                neg     bx

loc_14AB6:                              ; ...
                pop     dx
                retn
sub_14A84       endp


; =============== S U B R O U T I N E =======================================


sub_14AB8       proc near               ; ...
                sub     cx, 1
                jb      short loc_14AC2
                lods    byte ptr es:[si]
                mov     ah, al
                retn
; ---------------------------------------------------------------------------

loc_14AC2:                              ; ...
                mov     cx, 0
sub_14AB8       endp


; =============== S U B R O U T I N E =======================================


nullsub_15      proc near               ; ...
                retn
nullsub_15      endp


; =============== S U B R O U T I N E =======================================


sub_14AC6       proc near               ; ...
                mov     byte ptr ds:36FFh, 0
                test    byte ptr ds:36C5h, 1
                jz      short sub_14ADB
                test    byte ptr ds:36C4h, 1
                jz      loc_14BFC
sub_14AC6       endp


; =============== S U B R O U T I N E =======================================


sub_14ADB       proc near               ; ...
                test    byte ptr ds:36C5h, 2
                jnz     loc_14BFC

loc_14AE4:                              ; ...
                test    byte ptr ds:36C5h, 50h
                jnz     short nullsub_15
                push    ax
                mov     al, ds:60C4h
                test    byte ptr ds:36C5h, 8
                jnz     short loc_14AFC
                test    al, 80h
                jz      loc_14BF8

loc_14AFC:                              ; ...
                call    sub_1ADD8
                push    si
                and     al, 7Fh
                cmp     al, 1
                jbe     short loc_14B5B
                mov     dh, al
                sub     bx, bx
                mov     di, 3714h

loc_14B0D:                              ; ...
                mov     bl, [di]
                or      bl, bl
                jz      short loc_14B38
                inc     di
                cmp     al, [bx+di]
                jz      short loc_14B1D
                lea     di, [bx+di+1]
                jmp     short loc_14B0D
; ---------------------------------------------------------------------------

loc_14B1D:                              ; ...
                mov     cl, [di-1]
                mov     ch, 0
                mov     ah, 2

loc_14B24:                              ; ...
                mov     al, [di]
                inc     di
                mov     dl, al
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                loop    loc_14B24
                mov     dl, 3Dh ; '='
                cmp     dh, 56h ; 'V'
                jnz     short loc_14B36
                mov     dl, 20h ; ' '

loc_14B36:                              ; ...
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output

loc_14B38:                              ; ...
                lods    byte ptr es:[si]
                or      al, al
                jnz     short loc_14B40
                mov     al, 20h ; ' '

loc_14B40:                              ; ...
                cmp     al, 20h ; ' '
                jb      short loc_14B54
                jnz     short loc_14B4C
                cmp     byte ptr es:[si], 20h ; ' '
                jb      short loc_14B54

loc_14B4C:                              ; ...
                mov     dl, al
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                jmp     short loc_14B38
; ---------------------------------------------------------------------------

loc_14B54:                              ; ...
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CEEh

loc_14B5B:                              ; ...
                call    print

loc_14B5E:                              ; ...
                mov     ax, 0C08h
                int     21h             ; DOS - CLEAR KEYBOARD BUFFER
                                        ; AL must be 01h, 06h, 07h, 08h, or 0Ah.
                test    al, al
                jnz     short loc_14B91
                test    byte ptr ds:36C0h, 8
                jnz     short loc_14B5E
                mov     ah, 8
                int     21h             ; DOS - KEYBOARD INPUT, NO ECHO
                                        ; Return: AL = character
                mov     ah, 1
                cmp     al, 3Fh ; '?'
                jz      short loc_14B88
                cmp     al, 58h ; 'X'
                jz      short loc_14B85
                cmp     al, 40h ; '@'
                jnz     short loc_14B5E
                or      ah, 4
                jmp     short loc_14B88
; ---------------------------------------------------------------------------

loc_14B85:                              ; ...
                or      ah, 2

loc_14B88:                              ; ...
                or      ds:36C5h, ah

loc_14B8C:                              ; ...
                mov     al, ds:1F75h
                jmp     short loc_14BDC
; ---------------------------------------------------------------------------

loc_14B91:                              ; ...
                cmp     al, 0Dh
                jz      short loc_14BD4
                cmp     al, 1Bh
                jz      short loc_14B8C
                cmp     al, ds:1F75h
                jz      short loc_14B8C
                cmp     al, ds:1F73h
                jz      short loc_14BD4
                cmp     al, ds:1F76h
                jz      short loc_14B8C
                cmp     al, ds:1F74h
                jz      short loc_14BD4
                cmp     al, 9
                jnz     short loc_14BBC
                or      byte ptr ds:36C5h, 40h
                jmp     short loc_14BD4
; ---------------------------------------------------------------------------

loc_14BBC:                              ; ...
                test    byte ptr ds:60C4h, 7Fh
                jz      short loc_14B5E
                cmp     al, ds:1F77h
                jz      short loc_14BCF
                cmp     al, ds:1F78h
                jnz     short loc_14B5E

loc_14BCF:                              ; ...
                or      byte ptr ds:36C5h, 10h

loc_14BD4:                              ; ...
                mov     byte ptr ds:36FFh, 1
                mov     al, ds:1F73h

loc_14BDC:                              ; ...
                test    byte ptr ds:36C6h, 1
                jnz     short loc_14BE6
                call    sub_149ED

loc_14BE6:                              ; ...
                and     byte ptr ds:36C6h, 0FEh
                pop     si
                cmp     al, ds:1F75h
                jz      short loc_14BFB
                cmp     al, ds:1F76h
                jz      short loc_14BFB

loc_14BF8:                              ; ...
                pop     ax
                clc
                retn
; ---------------------------------------------------------------------------

loc_14BFB:                              ; ...
                pop     ax

loc_14BFC:                              ; ...
                mov     ah, 30h ; '0'
                stc
                retn
sub_14ADB       endp


; =============== S U B R O U T I N E =======================================


sub_14C00       proc near               ; ...
                push    ax
                push    bx
                push    cx
                push    dx
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                pushf
                call    sub_14698
                mov     word_12F79, bx
                call    sub_1966A
                popf
                jnb     short near ptr loc_14C2A+2
                call    print_x
                and     al, [bx+si+7B8h]
                or      al, 0CDh
                and     [bp+si], cx
                sal     byte ptr [di+4], 0B4h
                pop     es
                int     21h             ; DOS -
                call    print_x

loc_14C2A:                              ; ...
                add     ax, 1F80h
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                retn
sub_14C00       endp


; =============== S U B R O U T I N E =======================================


sub_14C32       proc near               ; ...
                cmp     al, 0Dh
                jz      short locret_14C5D
                cmp     al, 0Ah
                jz      short locret_14C5D
                cmp     al, 5Bh ; '['
                jz      short locret_14C5D
                cmp     al, 5Dh ; ']'
                jz      short locret_14C5D

loc_14C42:                              ; ...
                cmp     al, 2Fh ; '/'
                jz      short locret_14C5D
                cmp     al, 0
                jz      short locret_14C5D

loc_14C4A:                              ; ...
                cmp     al, 20h ; ' '
                jz      short locret_14C5D
                cmp     al, 9
                jz      short locret_14C5D
                cmp     al, 3Dh ; '='
                jz      short locret_14C5D
                cmp     al, 2Ch ; ','
                jz      short locret_14C5D
                cmp     al, 3Bh ; ';'
                clc

locret_14C5D:                           ; ...
                retn
sub_14C32       endp


; =============== S U B R O U T I N E =======================================


sub_14C5E       proc near               ; ...
                call    sub_1964A
                jb      short locret_14C6A
                cmp     al, 0Ah
                jnz     short sub_14C5E
                call    sub_1964A

locret_14C6A:                           ; ...
                retn
sub_14C5E       endp


; =============== S U B R O U T I N E =======================================


sub_14C6B       proc near               ; ...
                push    cx
                push    si
                push    ds
                push    es
                pop     ds
                assume ds:nothing
                mov     bl, al

loc_14C72:                              ; ...
                lodsb
                cmp     al, 61h ; 'a'
                jb      short loc_14C80
                cmp     al, 7Ah ; 'z'
                ja      short loc_14C80
                sub     al, 20h ; ' '
                mov     [si-1], al

loc_14C80:                              ; ...
                cmp     bl, 56h ; 'V'
                jnz     short loc_14C89
                cmp     al, 3Dh ; '='
                jz      short loc_14C93

loc_14C89:                              ; ...
                cmp     al, 0Dh
                jz      short loc_14C93
                cmp     al, 0Ah
                jz      short loc_14C93
                loop    loc_14C72

loc_14C93:                              ; ...
                pop     ds
                pop     si
                pop     cx
                retn
sub_14C6B       endp

; ---------------------------------------------------------------------------
                push    si
                push    ds
                push    ax
                mov     ax, 6300h
                int     21h             ; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
                pop     ax

loc_14CA0:                              ; ...
                cmp     word ptr [si], 0
                jz      short loc_14CB6
                cmp     al, [si]
                jb      short loc_14CBC
                cmp     al, [si+1]
                ja      short loc_14CBC
                push    ax
                xor     ax, ax
                inc     ax
                pop     ax

loc_14CB3:                              ; ...
                pop     ds
                pop     si
                retn
; ---------------------------------------------------------------------------

loc_14CB6:                              ; ...
                push    ax
                xor     ax, ax
                pop     ax
                jmp     short loc_14CB3
; ---------------------------------------------------------------------------

loc_14CBC:                              ; ...
                add     si, 2
                jmp     short loc_14CA0

; =============== S U B R O U T I N E =======================================


sub_14CC1       proc near               ; ...
                lds     si, cs:dword_18748
                push    si
                add     bx, si
                mov     ax, [bx]
                mov     word ptr cs:dword_18748, ax
                mov     bx, 212h
                push    es
                push    si
                mov     si, 6D29h
                cmp     word ptr cs:[si], 4944h
                jnz     short loc_14D22
                cmp     word ptr cs:[si+2], 5243h
                jnz     short loc_14D22
                cmp     word ptr cs:[si+4], 554Dh
                jnz     short loc_14D22
                cmp     word ptr cs:[si+6], 3130h
                jnz     short loc_14D22
                push    bx
                shr     bx, 4
                mov     ax, es
                add     ax, bx
                mov     es, ax
                assume es:nothing
                pop     bx
                and     bx, 0Fh
                mov     si, 40h ; '@'
                mov     ds, si
                assume ds:nothing
                pop     si
                mov     ds, word ptr ds:0Eh
                assume ds:nothing
                push    word ptr [bx+3]
                push    ds
                mov     ds, word ptr cs:dword_18748+2
                assume ds:nothing
                call    cs:dword_18748
                pop     ds
                pop     word ptr [bx+3]
                jmp     short loc_14D69
; ---------------------------------------------------------------------------

loc_14D22:                              ; ...
                cmp     word ptr cs:[si], 5353h
                jnz     short loc_14D4E
                cmp     word ptr cs:[si+2], 4157h
                jnz     short loc_14D4E
                cmp     word ptr cs:[si+4], 2050h
                jnz     short loc_14D4E
                cmp     word ptr cs:[si+6], 2020h
                jnz     short loc_14D4E
                pusha
                mov     cs:byte_139F2, 1
                mov     ax, 4A18h
                int     2Fh
                popa

loc_14D4E:                              ; ...
                pop     si
                call    cs:dword_18748
                cmp     cs:byte_139F2, 0
                jz      short loc_14D69
                pusha
                mov     cs:byte_139F2, 0
                mov     ax, 4A16h
                int     2Fh
                popa

loc_14D69:                              ; ...
                pop     es
                assume es:nothing
                pop     word ptr cs:dword_18748
                retn
sub_14CC1       endp


; =============== S U B R O U T I N E =======================================


sub_14D70       proc near               ; ...
                sub     al, 30h ; '0'
                jb      short loc_14D7A
                cmp     al, 9
                ja      short loc_14D7A
                clc
                retn
; ---------------------------------------------------------------------------

loc_14D7A:                              ; ...
                stc
                retn
sub_14D70       endp


; =============== S U B R O U T I N E =======================================


sub_14D7C       proc near               ; ...
                push    bx
                xor     bx, bx

loc_14D7F:                              ; ...
                call    sub_14D70
                jb      short loc_14DCE
                xchg    ax, bx
                push    bx
                mov     bx, 0Ah
                mul     bx
                pop     bx
                add     al, bl
                adc     ah, 0
                jb      short loc_14DCE
                xchg    ax, bx
                call    sub_1964A
                jb      short loc_14DC8
                cmp     al, 20h ; ' '
                jz      short loc_14DBE
                cmp     al, 2Ch ; ','
                jz      short loc_14DBE
                cmp     al, 9
                jz      short loc_14DBE
                cmp     al, cs:byte_12F78
                jz      short loc_14DBE
                cmp     al, 2Fh ; '/'
                nop
                nop
                jz      short loc_14DBE
                cmp     al, 0Ah
                jz      short loc_14DBE
                cmp     al, 0Dh
                jz      short loc_14DBE
                or      al, al
                jnz     short loc_14D7F

loc_14DBE:                              ; ...
                inc     cs:word_1301C
                dec     cs:word_13020

loc_14DC8:                              ; ...
                mov     ax, bx
                or      ax, ax
                pop     bx
                retn
; ---------------------------------------------------------------------------

loc_14DCE:                              ; ...
                mov     cs:byte_12F78, 0
                xor     ax, ax
                pop     bx
                stc
                retn
sub_14D7C       endp


; =============== S U B R O U T I N E =======================================


sub_14DD9       proc near               ; ...
                push    di
                push    ax
                push    dx
                xor     cx, cx
                xor     dx, dx
                mov     ax, 200h
                call    sub_14F36
                jb      short loc_14E35
                push    es
                push    si
                push    cs
                pop     es
                assume es:SYSINIT
                mov     di, 366Eh
                mov     cx, 8
                repe cmpsb
                pop     si
                pop     es
                assume es:nothing
                jnz     short loc_14E35
                add     si, 12h
                cmp     byte ptr [si], 1
                jnz     short loc_14E35
                inc     si
                mov     dx, [si]
                mov     cx, [si+2]
                mov     ax, 1800h
                call    sub_14F36
                jb      short loc_14E35
                mov     cx, [si]
                cmp     cx, 1B6h
                ja      short loc_14E35
                inc     si
                inc     si
                pop     dx
                pop     ax
                pop     di

loc_14E1B:                              ; ...
                cmp     ax, [si+2]
                jnz     short loc_14E2A
                cmp     dx, 0
                jz      short loc_14E3A
                cmp     dx, [si+4]
                jz      short loc_14E3D

loc_14E2A:                              ; ...
                add     si, [si]
                inc     si
                inc     si
                loop    loc_14E1B
                mov     cx, 0FFFFh

loc_14E33:                              ; ...
                stc
                retn
; ---------------------------------------------------------------------------

loc_14E35:                              ; ...
                pop     si
                pop     cx
                pop     di
                jmp     short loc_14E33
; ---------------------------------------------------------------------------

loc_14E3A:                              ; ...
                mov     dx, [si+4]

loc_14E3D:                              ; ...
                mov     cs:cntrycodepage_id, dx
                mov     dx, [si+0Ah]
                mov     cx, [si+0Ch]
                mov     ax, 200h
                call    sub_14F36
                jb      short loc_14E33
                mov     cx, [si]
                inc     si
                inc     si

loc_14E54:                              ; ...
                push    di
                push    cx
                push    si
                mov     al, [si+2]
                call    sub_14F08
                jb      short loc_14EDC
                mov     dx, [si+4]
                mov     cx, [si+6]
                mov     ax, 4200h
                stc
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_14E35
                mov     dx, 200h
                mov     cx, 14h
                mov     ah, 3Fh ; '?'
                stc
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_14E35
                cmp     ax, cx
                jnz     short loc_14E35
                mov     dx, [si+4]
                mov     cx, [si+6]
                mov     ax, 4200h
                stc
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_14E35
                push    si
                mov     si, 208h
                mov     cx, [si]
                pop     si
                mov     dx, 200h
                add     cx, 0Ah
                mov     ah, 3Fh ; '?'
                stc
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_14E35
                cmp     ax, cx
                jnz     short loc_14E35
                mov     al, [si+2]
                mov     si, 208h
                mov     cx, [si]
                inc     cx
                inc     cx
                cmp     cx, 5F8h
                ja      short loc_14E35
                call    sub_14EED
                cmp     al, 1
                jnz     short loc_14ECD
                push    word ptr es:[di+18h]
                push    word ptr es:[di+1Ah]
                push    di
                push    ax
                mov     ax, cs:cntrycodepage_id
                mov     [si+4], ax
                pop     ax

loc_14ECD:                              ; ...
                rep movsb
                cmp     al, 1
                jnz     short loc_14EDC
                pop     di
                pop     word ptr es:[di+1Ah]
                pop     word ptr es:[di+18h]

loc_14EDC:                              ; ...
                pop     si
                pop     cx
                pop     di
                add     si, [si]
                inc     si
                inc     si
                dec     cx
                cmp     cx, 0
                jz      short locret_14EEC
                jmp     loc_14E54
; ---------------------------------------------------------------------------

locret_14EEC:                           ; ...
                retn
sub_14DD9       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_14EED       proc near               ; ...
                cmp     al, 7
                jnz     short locret_14F07
                cmp     word ptr es:[di], 0
                jz      short locret_14F07
                push    di
                push    ax
                push    cx
                mov     cx, es:[di]
                add     di, 2
                xor     al, al
                rep stosb
                pop     cx
                pop     ax
                pop     di

locret_14F07:                           ; ...
                retn
sub_14EED       endp


; =============== S U B R O U T I N E =======================================


sub_14F08       proc near               ; ...
                push    cx
                add     di, 4Ah ; 'J'
                mov     cx, es:[di]
                inc     di
                inc     di

loc_14F11:                              ; ...
                cmp     es:[di], al
                jz      short loc_14F29
                cmp     byte ptr es:[di], 1
                jz      short loc_14F21
                add     di, 5
                jmp     short loc_14F24
; ---------------------------------------------------------------------------

loc_14F21:                              ; ...
                add     di, 29h ; ')'

loc_14F24:                              ; ...
                loop    loc_14F11
                stc
                jmp     short loc_14F34
; ---------------------------------------------------------------------------

loc_14F29:                              ; ...
                cmp     al, 1
                jnz     short loc_14F30
                inc     di
                jmp     short loc_14F34
; ---------------------------------------------------------------------------

loc_14F30:                              ; ...
                les     di, es:[di+1]

loc_14F34:                              ; ...
                pop     cx
                retn
sub_14F08       endp


; =============== S U B R O U T I N E =======================================


sub_14F36       proc near               ; ...
                push    ax
                mov     ax, 4200h
                stc
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                pop     cx
                jb      short locret_14F49
                xor     dx, dx
                xor     si, si
                mov     ah, 3Fh ; '?'
                stc
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer

locret_14F49:                           ; ...
                retn
sub_14F36       endp

; ---------------------------------------------------------------------------
                push    si
                push    ds
                push    es
                pop     ds
                pop     es
                call    sub_14F80
                jb      short loc_14F5A
                mov     al, [si]
                inc     si
                inc     si
                jmp     short loc_14F60
; ---------------------------------------------------------------------------

loc_14F5A:                              ; ...
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER
                add     al, 41h ; 'A'

loc_14F60:                              ; ...
                mov     byte ptr cs:cntry_drv, al ; "A:"
                mov     di, 3625h
                mov     al, [si]
                cmp     al, 5Ch ; '\'
                jz      short loc_14F73
                cmp     al, 2Fh ; '/'
                jz      short loc_14F73
                jmp     short loc_14F74
; ---------------------------------------------------------------------------

loc_14F73:                              ; ...
                dec     di

loc_14F74:                              ; ...
                call    sub_14F96
                mov     di, 3622h
                push    ds
                push    es
                pop     ds
                pop     es
                pop     si
                retn

; =============== S U B R O U T I N E =======================================


sub_14F80       proc near               ; ...
                push    ax
                cmp     byte ptr [si], 41h ; 'A'
                jb      short loc_14F93
                cmp     byte ptr [si], 5Ah ; 'Z'
                ja      short loc_14F93
                cmp     byte ptr [si+1], 3Ah ; ':'
                jnz     short loc_14F93
                jmp     short loc_14F94
; ---------------------------------------------------------------------------

loc_14F93:                              ; ...
                stc

loc_14F94:                              ; ...
                pop     ax
                retn
sub_14F80       endp


; =============== S U B R O U T I N E =======================================


sub_14F96       proc near               ; ...
                movsb
                cmp     byte ptr [si-1], 0
                jnz     short sub_14F96
                retn
sub_14F96       endp


; =============== S U B R O U T I N E =======================================


badfil          proc near               ; ...
                push    cs
                pop     es
                assume es:SYSINIT
                mov     si, dx

badload:                                ; ...
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, cs:off_1B746
                mov     bx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     bx, cs:off_1B740

loc_14FB2:                              ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                cmp     byte_15144, 0
                jnz     short loc_14FC2
                cmp     word_12F79, 0
                jz      short locret_14FE3

loc_14FC2:                              ; ...
                call    print

loc_14FC5:                              ; ...
                mov     dl, es:[si]
                or      dl, dl
                jz      short loc_14FD3
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                inc     si
                jmp     short loc_14FC5
; ---------------------------------------------------------------------------

loc_14FD3:                              ; ...
                mov     dx, bx
                call    print
                cmp     cs:donotshownum, 1
                jz      short locret_14FE3
                call    sub_1966A

locret_14FE3:                           ; ...
                retn
badfil          endp


; =============== S U B R O U T I N E =======================================


print           proc near               ; ...
                mov     ah, 9
                int     21h             ; DOS - PRINT STRING
                                        ; DS:DX -> string terminated by "$"
                retn
print           endp


; =============== S U B R O U T I N E =======================================


open_dev        proc near               ; ...
                call    sub_15008
                jnb     short loc_14FF5

loc_14FEE:                              ; ...
                mov     dx, 3606h
                call    sub_15008

locret_14FF4:                           ; ...
                retn
; ---------------------------------------------------------------------------

loc_14FF5:                              ; ...
                mov     bx, ax
                xor     ax, ax
                mov     ah, 44h
                int     21h             ; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
                                        ; BX = file or device handle
                test    dl, 80h
                jnz     short locret_14FF4
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                jmp     short loc_14FEE
open_dev        endp


; =============== S U B R O U T I N E =======================================


sub_15008       proc near               ; ...
                mov     ah, 3Dh ; '='
                stc
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                retn
sub_15008       endp

; ---------------------------------------------------------------------------
                mov     al, 3
                iret
; ---------------------------------------------------------------------------
MsDosVers8Copyr db 'MS-DOS Version 8 (C)Copyright 1981-1999 Microsoft Corp Licensed M'
                db 'aterial - Property of Microsoft All rights reserved '
aNul_0          db 'NUL',0
condev          db 'CON',0              ; ...
auxdev          db 'AUX',0              ; ...
prndev          db 'PRN',0              ; ...
config          db '\CONFIG.SYS',0
cntry_drv       db 'A:'                 ; ...
cntry_root      db '\'
cntry_path      db 'COUNTRY.SYS'
                db    0
                db 61 dup(0)            ; (It was 52 in MSDOS 6.22)
country_file_signature db 0FFh
aCountry        db 'COUNTRY'
cntrycodepage_id dw 0                   ; ...
                db 64 dup(0)
                db    0
                db    7
                db    0
                db    5
                db    0
                db  18h
                db 0
byte_1513F      db 1                    ; ...
byte_15140      db 80h                  ; ...
byte_15141      db 0                    ; ...
                dw 0
byte_15144      db 0                    ; ...
byte_15145      db 0                    ; ...
                db 0
                db    1
                db    0
word_15149      dw 0                    ; ...
                db 0FFh
                db 33h dup(0)
                db 0
aConfig         db 'CONFIG=',0
aMenu           db 'MENU',0
aCommon         db 'COMMON',0
                db 1
                db '['
                db '['
aAccdate        db 7,'ACCDATE'
                db 'a'
aBreak          db 5,'BREAK'
                db 'C'
aBuffers        db 7,'BUFFERS'
                db 'B'
aBuffershigh    db 0Bh,'BUFFERSHIGH'
                db 'b'
aComment        db 7,'COMMENT'
                db 'Y'
aCountry_0      db 7,'COUNTRY'
                db 'Q'
aDevice         db 6,'DEVICE'
                db 'D'
aDevicehigh     db 0Ah
                db 'DEVICEHIGH'
                db 'U'
aDos_1          db 3,'DOS'
                db 'H'
aDrivparm       db 8,'DRIVPARM'
                db 'P'
aFcbs           db 4,'FCBS'
                db 'X'
aFcbshigh       db 8,'FCBSHIGH'
                db 'x'
aFiles          db 5,'FILES'
                db 'F'
aFileshigh      db 9,'FILESHIGH'
                db 'f'
aInclude        db 7,'INCLUDE'
                db 'J'
aInstall        db 7,'INSTALL'
                db 'I'
aInstallhigh    db 0Bh,'INSTALLHIGH'
                db 'W'
aLastdrive      db 9,'LASTDRIVE'
                db 'L'
aLastdrivehigh  db 0Dh,'LASTDRIVEHIGH'
                db 'l'
aLogo_0         db 4,'LOGO'
                db 'q'
aSubmenu        db 7,'SUBMENU'
                db 'O'
aMenucolor      db 9,'MENUCOLOR'
                db 'R'
aMenudefault    db 0Bh,'MENUDEFAULT'
                db 'A'
aMenuitem       db 8,'MENUITEM'
                db 'E'
aMultitrack     db 0Ah
                db 'MULTITRACK'
                db 'M'
aNumlock        db 7,'NUMLOCK'
                db 'N'
aRem            db 3,'REM'
                db '0'
aSet            db 3,'SET'
                db 'V'
aShell          db 5,'SHELL'
                db 'S'
aStacks         db 6,'STACKS'
                db 'K'
aStackshigh     db 0Ah
                db 'STACKSHIGH'
                db 'k'
aSwitches       db 8,'SWITCHES'
                db '1'
                db 0
word_152C3      dw 2                    ; ...
word_152C5      dw 9                    ; ...
word_152C7      dw 0                    ; ...
word_152C9      dw 0                    ; ...
byte_152CB      db 0                    ; ...
byte_152CC      db 0                    ; ...
word_152CD      dw 0                    ; ...
_BPB48T         dw 512                  ; ...
                db 2
                dw 1
                db 2
                dw 112
                dw 720
                db 0FDh
                dw 2
                dw 9
                dw 2
                dd 0
                dd 0
                dd 0
                dw 0
                dw 0
                dd 0
                dw 0FFFFh
                dw 0FFFFh
                db 12 dup(0)
_BPB96T         dw 512                  ; ...
                db 1
                dw 1
                db 2
                dw 224
                dw 2400
                db 0F9h
                dw 7
                dw 15
                dw 2
                dd 0
                dd 0
                dd 0
                dw 0
                dw 0
                dd 0
                dw 0FFFFh
                dw 0FFFFh
                db 12 dup(0)
_BPB35          dw 512                  ; ...
                db 2
                dw 1
                db 2
                dw 112
                dw 1440
                db 0F9h
                dw 3
                dw 9
                dw 2
                dd 0
                dd 0
                dd 0
                dw 0
                dw 0
                dd 0
                dw 0FFFFh
                dw 0FFFFh
                db 12 dup(0)
_BPB144         dw 512                  ; ...
                db 1
                dw 1
                db 2
                dw 224
                dw 2880
                db 0F0h
                dw 9
                dw 18
                dw 2
                dd 0
                dd 0
                dd 0
                dw 0
                dw 0
                dd 0
                dw 0FFFFh
                dw 0FFFFh
                db 12 dup(0)
_BPB288         dw 512                  ; ...
                db 2
                dw 1
                db 2
                dw 240
                dw 5760
                db 0F0h
                dw 9
                dw 36
                dw 2
                dd 0
                dd 0
                dd 0
                dw 0
                dw 0
                dd 0
                dw 0FFFFh
                dw 0FFFFh
                db 12 dup(0)
bpbtable        dw offset _BPB48T
                dw offset _BPB96T
                dw offset _BPB35
                dw offset _BPB35
                dw offset _BPB35
                dw offset _BPB35
                dw offset _BPB35
                dw offset _BPB144
                dw offset _BPB35
                dw offset _BPB288
                db 0Ah
switchlist      db 0Bh,'ARVFHSTDICN'
                db    0
                db    0
                db    4
                db    0
                db    2
                db    4
                db    0
                db    2
                db  40h ; @
                db    0
                db    0
                db    0
                db    8
                db    0
                db    3
                db    8
                db    0
                db    2
                db  40h ; @
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    4
                db  10h
                db    0
                db    2
                db  40h ; @
                db    0
                db    0
                db    0
                db    0
                db    1
                db    3
                db    8
                db    0
                db    0
                db  60h ; `
                db    0
                db    0
                db    0
                db    0
                db    2
                db    4
                db  10h
                db    0
                db    0
                db  60h ; `
                db    0
                db    0
                db    0
                db    0
                db    4
                db    5
                db  20h
                db    0
                db    0
                db  60h ; `
                db    0
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    6
                db  40h ; @
                db    0
                db    0
                db  60h ; `
                db    0
                db    7
                db  10h
                db    0
                db    0
                db 0EFh
                db    1
                db    1
                db    0
                db 0F4h
                db  1Fh
                db    0
                db    0
                db 0DCh
                db    1
                db    2
                db    0
                db 0CEh
                db  3Fh ; ?
                db    0
                db    0
                db 0B6h
                db    1
                db    4
                db    0
                db  82h
                db  7Fh ; 
                db    0
                db    0
                db  6Ah ; j
                db    1
                db    8
                db    0
                db 0EAh
                db 0FEh
                db    0
                db    0
                db 0D2h
                db    0
                db  10h
                db    0
                db 0FFh
                db 0FFh
                db    0
                db    0
                db 0A2h
                db 0FFh
                db  1Fh
                db    0
                db 0FFh
                db 0FFh
                db    0
                db    0
                db  42h ; B
                db 0FDh
                db  3Fh ; ?
                db    0
                db    0

; =============== S U B R O U T I N E =======================================


sub_15478       proc near               ; ...
                les     di, CURRENT_DOS_LOCATION
                assume es:nothing
                movzx   cx, byte ptr es:[di+20h]
                mov     es:[di+21h], cl
                mov     al, cl
                mov     ah, 88
                mul     ah
                call    ParaRound
                mov     si, word_12F71
                sub     si, ax
                mov     es:[di+18h], si
                mov     ax, si
                mov     word ptr es:[di+16h], 0
                lds     si, es:[di]
                assume ds:nothing
                mov     es, ax
                xor     di, di
sub_15478       endp


; =============== S U B R O U T I N E =======================================


sub_154A7       proc near               ; ...
                mov     ax, cs:word_12F73
                stosw
                call    sub_1550B
                mov     ax, cs:word_12F75
                stosw
                inc     byte ptr cs:word_12F73
                xor     ax, ax
                push    cx
                mov     cx, 3Fh ; '?'
                rep stosb
                cmp     si, 0FFFFh
                jz      short loc_154DA
                cmp     cs:byte_12F59, 1
                jnz     short loc_154E1
                cmp     byte ptr [si], 1
                ja      short loc_154E1
                mov     cl, 3
                rep stosw
                pop     cx
                jmp     short loc_154F2
; ---------------------------------------------------------------------------

loc_154DA:                              ; ...
                mov     cl, 3
                rep stosw
                pop     cx
                jmp     short loc_154F2
; ---------------------------------------------------------------------------

loc_154E1:                              ; ...
                pop     cx
                cmp     byte ptr [si+8], 0
                jz      short loc_154EB
                mov     ax, 4000h

loc_154EB:                              ; ...
                stosw
                mov     ax, si
                stosw
                mov     ax, ds
                stosw

loc_154F2:                              ; ...
                mov     ax, 0FFFFh
                stosw
                stosw
                stosw
                mov     ax, 2
                stosw
                mov     al, 0
                stosb
                stosw
                stosw
                stosw
                loop    sub_154A7
                mov     byte ptr cs:word_12F73, 41h ; 'A'
                retn
sub_154A7       endp


; =============== S U B R O U T I N E =======================================


sub_1550B       proc near               ; ...
                lds     si, cs:CURRENT_DOS_LOCATION
                lds     si, [si]
                sub     al, 41h ; 'A'

loc_15514:                              ; ...
                cmp     al, [si]
                jz      short locret_15520
                lds     si, [si+19h]
                cmp     si, 0FFFFh
                jnz     short loc_15514

locret_15520:                           ; ...
                retn
sub_1550B       endp


; =============== S U B R O U T I N E =======================================


endfile         proc near               ; ...
                push    ds
                mov     ax, 70h
                mov     ds, ax
                assume ds:nothing
                test    ds:int19sem, 4
                jnz     short loc_15533
                or      ds:int19sem, 2

loc_15533:                              ; ...
                pop     ds
                assume ds:nothing
                mov     ax, ds:14EBh
                mov     ds:14EDh, ax
                mov     ax, ds:14E5h
                mov     ds:14D5h, ax
                call    sub_15AE6
                mov     ax, ds:1483h
                mov     bl, 150
                mul     bl
                push    ax
                call    ParaRound
                mov     bh, 47h ; 'G'
                mov     bl, ds:14DAh
                call    sub_1A5C1
                mov     es, cx
                pop     cx
                mov     si, offset bds1
                sub     di, di
                rep movsb
                mov     bx, di
                sub     di, di
                mov     ax, cs

loc_15567:                              ; ...
                cmp     word ptr es:[di], 0FFFFh
                jz      short loc_1557C
                cmp     es:[di+2], ax
                jnz     short loc_1557C
                sub     word ptr es:[di], 385h
                mov     word ptr es:[di+2], es

loc_1557C:                              ; ...
                add     di, 150
                cmp     di, bx
                jb      short loc_15567
                push    ds
                mov     ds, word ptr ds:1508h
                mov     word ptr ds:0F8h, 0
                mov     word ptr ds:0FAh, es
                pop     ds
                call    sub_15AE6
                les     di, ds:14BFh
                mov     al, es:[di+20h]
                cmp     al, ds:14EAh
                jnb     short loc_155A8
                mov     al, ds:14EAh

loc_155A8:                              ; ...
                mov     ds:14EAh, al
                mov     ax, ds:14C1h
                mov     ds:15B5h, ax
                mov     al, ds:14EAh
                shl     al, 2
                mov     ah, 0
                add     ax, 141h
                push    ax
                add     ax, ds:6D23h
                add     ax, 15h
                and     ax, 0FFF0h
                mov     bx, ax
                mov     ax, 4A03h
                mov     dl, 0
                mov     cx, 0FFFBh
                int     2Fh
                cmp     di, 0FFFFh
                jnz     short loc_155EB
                shr     bx, 4
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     ax, bx
                mov     bx, 5901h
                call    sub_1A5C1
                mov     es, cx
                xor     di, di
                pop     ds
                assume ds:nothing

loc_155EB:                              ; ...
                lds     bx, cs:dword_13033
                mov     [bx], di
                mov     word ptr [bx+2], es
                pop     ax
                mov     cx, ax
                push    ax
                push    di
                xor     ax, ax
                rep stosb
                pop     di
                mov     al, cs:byte_12F6A
                mov     es:[di+140h], al
                mov     ax, di
                add     ax, 0Eh
                mov     es:[di+4], ax
                pop     ax
                add     di, ax
                push    es
                push    di
                mov     byte ptr es:[di], 7
                mov     word ptr es:[di+1], 0
                mov     word ptr es:[di+3], 0
                mov     ax, cs:word_187A7
                mov     es:[di+5], al
                add     di, 6
                lds     si, cs:dword_187A3
                mov     cx, si
                xor     si, si
                cld
                rep movsb
                mov     ax, 70h
                mov     ds, ax
                assume ds:nothing
                mov     ds, word ptr ds:cdev+2
                assume ds:nothing
                pop     large [dword ptr ds:1F7Eh]
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    sub_15AE6
                mov     al, FILES
                sub     al, 5
                jbe     short loc_156A0
                xor     ah, ah
                push    ax
                mov     bl, 3Bh ; ';'
                mul     bl
                add     ax, 6
                call    ParaRound
                mov     bh, 46h ; 'F'
                mov     bl, byte_18596
                call    sub_1A5C1
                mov     es, cx
                xor     di, di
                mov     cx, ax
                shl     cx, 4
                mov     word ptr es:[di], 0FFFFh
                pop     ax
                mov     es:[di+4], ax
                xor     ax, ax
                add     di, 6
                sub     cx, 6
                cld
                rep stosb
                lds     di, CURRENT_DOS_LOCATION
                assume ds:nothing
                lds     di, [di+4]

loc_15692:                              ; ...
                cmp     word ptr [di], 0FFFFh
                jz      short loc_1569B
                lds     di, [di]
                jmp     short loc_15692
; ---------------------------------------------------------------------------

loc_1569B:                              ; ...
                mov     [di], ax
                mov     word ptr [di+2], es

loc_156A0:                              ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     al, byte ptr word_12F68
                xor     ah, ah
                push    ax
                mov     bl, 3Bh ; ';'
                mul     bl
                add     ax, 6
                call    ParaRound
                mov     bh, 58h ; 'X'
                mov     bl, byte_185CE
                call    sub_1A5C1
                mov     es, cx
                xor     di, di
                mov     word ptr es:[di], 0FFFFh
                pop     cx
                mov     es:[di+4], cx
                mov     al, 41h ; 'A'
                add     di, 6

loc_156CE:                              ; ...
                push    cx
                mov     cx, 3Bh ; ';'
                cld
                rep stosb
                mov     word ptr es:[di-3Bh], 0
                mov     word ptr es:[di-26h], 0
                mov     word ptr es:[di-24h], 0
                pop     cx
                loop    loc_156CE
                lds     di, CURRENT_DOS_LOCATION
                assume ds:nothing
                xor     ax, ax
                mov     [di+1Ah], ax
                mov     word ptr [di+1Ch], es
                mov     [di+1Eh], ax
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     cx, word_12F61
                cmp     cx, 0FFFFh
                jz      short loc_15718
                mov     ax, cx
                mul     word_12F65
                test    dx, dx
                jz      short loc_1574F
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B7BA
                call    print

loc_15718:                              ; ...
                mov     cx, 1Eh
                mov     word_12F63, 0
                cmp     byte_12F5A, 0
                jz      short loc_1574B
                mov     ax, 4A01h       ; QUERY FREE HMA SPACE
                int     2Fh
                xchg    ax, bx          ; number of bytes available in HMA
                or      ax, ax
                jz      short loc_1574B ; 0 ; DOS not using HMA
                sub     ax, 0C00h
                jbe     short loc_1574B ; <= 3072
                sub     dx, dx
                div     word_12F65
                cmp     ax, cx
                jnb     short loc_1574B
                xchg    ax, cx
                shr     ax, 1
                cmp     cx, ax
                jnb     short loc_1574B
                add     ax, ax
                xchg    ax, cx

loc_1574B:                              ; ...
                mov     word_12F61, cx

loc_1574F:                              ; ...
                mov     ax, word_12F65
                mul     cx
                or      dx, dx
                jz      short loc_15765
                mov     dx, 1
                xor     ax, ax
                div     word_12F65
                mov     word_12F61, ax
                xchg    ax, cx

loc_15765:                              ; ...
                lds     bx, cs:CURRENT_DOS_LOCATION
                assume ds:nothing
                mov     [bx+3Fh], cx
                mov     ax, cs:word_12F63
                mov     [bx+41h], ax
                lds     bx, [bx+12h]
                call    sub_15B1A
                cmp     cs:word_12F63, 0
                jz      short loc_157AD
                push    ds
                push    bx
                mov     ax, cs:word_12F65
                sub     ax, 18h
                mul     cs:word_12F63
                call    ParaRound
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     bx, 4200h
                call    sub_1A5C1
                pop     bx
                pop     ds
                assume ds:nothing
                mov     [bx+8], cx
                mov     word ptr [bx+6], 0
                mov     cx, cs:word_12F63
                mov     [bx+0Ah], cx

loc_157AD:                              ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    sub_15AE6
                mov     al, byte_12F6A
                push    ax
                mov     ah, 58h ; 'X'
                mul     ah
                call    ParaRound
                mov     bh, 4Ch ; 'L'
                mov     bl, byte_185E4
                call    sub_1A5C1
                les     si, CURRENT_DOS_LOCATION
                pop     ax
                mov     es:[si+21h], al
                mov     es:[si+18h], cx
                xor     di, di
                mov     es:[si+16h], di
                lds     si, es:[si]
                assume ds:nothing
                mov     es, cx
                mov     cl, al
                xor     ch, ch
                call    sub_154A7
                push    cs
                pop     ds
                assume ds:SYSINIT
                cld
                mov     ax, 0
                test    ax, ax
                jz      short loc_15803
                mov     si, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     si, stack_over_msg_off

loc_157F6:                              ; ...
                lodsb
                test    al, al

loc_157F9:                              ; ...
                jz      short loc_157F9
                mov     dl, al
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                jmp     short loc_157F6
; ---------------------------------------------------------------------------

loc_15803:                              ; ...
                mov     ax, stackcount
                or      ax, ax
                jz      skipstack
                mov     ax, 8
                add     ax, stacksize
                mul     stackcount
                push    ax
                call    ParaRound
                mov     bx, ax
                mov     cx, 530
                mov     si, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     si, stack_over_msg_off

so_msg_loop:                            ; ...
                lodsb
                inc     cx
                or      al, al
                jnz     short so_msg_loop
                mov     ax, cx
                call    ParaRound
                push    ax
                add     ax, bx
                mov     bh, 53h ; 'S'
                mov     bl, byte_1861E
                call    sub_1A5C1
                pop     ax
                add     ax, cx
                mov     stacks, 0
                mov     stacks+2, ax
                mov     es, cx
                mov     cx, 212h
                xor     si, si
                xor     di, di
                cld
                rep movsb
                push    ax
                mov     si, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     si, stack_over_msg_off

loc_1585E:                              ; ...
                lodsb
                stosb
                or      al, al
                jnz     short loc_1585E
                pop     ax
                pop     cx
                push    ds
                mov     ds, BCodeSeg
                assume ds:nothing
                mov     ds:1F5Ah, ax
                mov     ds:1F5Ch, cx
                add     cx, 212h
                mov     word ptr ds:1F76h, es
                mov     ds:1F78h, cx
                mov     bx, 10h
                mov     ds:1F5Eh, bx
                mov     word ptr ds:1F60h, es
                mov     word ptr ds:1F62h, 2
                pop     ds
                call    sub_15BD9
                push    cs
                pop     ds
                assume ds:SYSINIT

skipstack:                              ; ...
                call    sub_15AE6
                call    sub_15AD1

dosdata_noumb:
                mov     al, FILES
                xor     ah, ah
                mov     cx, ax
                xor     bx, bx
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                mov     bx, 2

rcclloop:                               ; ...
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                inc     bx
                loop    rcclloop
                mov     dx, offset condev ; "CON"
                mov     al, 2
                mov     ah, 3Dh
                stc
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 2 - read & write
                jnb     short goaux
                call    badfil
                jmp     short goaux2
; ---------------------------------------------------------------------------

goaux:                                  ; ...
                push    ax
                mov     bx, 1
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                pop     ax
                mov     bx, ax
                mov     ah, 45h
                int     21h             ; DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)
                                        ; BX = file handle to duplicate
                mov     ah, 45h
                int     21h             ; DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)
                                        ; BX = file handle to duplicate

goaux2:                                 ; ...
                mov     dx, offset auxdev ; "AUX"
                mov     al, 2
                call    open_dev
                mov     dx, offset prndev ; "PRN"
                mov     al, 1
                call    open_dev
                push    ax
                push    bx
                push    dx
                push    es
                mov     al, 0FFh        ; reset h/w by writing to port
                mov     dx, 2F2h        ; get starting address
                out     dx, al
                inc     dx
                out     dx, al
                inc     dx
                out     dx, al
                inc     dx
                out     dx, al
                inc     dx
                out     dx, al
                inc     dx
                out     dx, al
                mov     ax, 0F000h
                mov     es, ax
                assume es:nothing
                cmp     byte ptr es:0FFFEh, 0FCh
                jz      short startrearm
                mov     ah, 0C0h
                int     15h             ; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
                jb      short finishrearm
                test    byte ptr es:[bx+5], 40h
                jz      short finishrearm

startrearm:                             ; ...
                mov     al, 0FFh
                mov     dx, 6F2h
                out     dx, al
                inc     dx
                out     dx, al
                inc     dx
                out     dx, al
                inc     dx
                inc     dx
                out     dx, al
                inc     dx
                out     dx, al

finishrearm:                            ; ...
                pop     es
                assume es:nothing
                pop     dx
                pop     bx
                pop     ax

set_sysinit_base:
                mov     ax, memhi
                sub     ax, area
                mov     impossible_owner_size, ax
                mov     cx, 110
                mov     si, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     si, MSG_72_PTR  ; "memory allocation error occurred"

mae1_msg_loop:                          ; ...
                lodsb
                inc     cx
                cmp     al, '$'
                jnz     short mae1_msg_loop
                mov     ax, cx
                call    ParaRound
                mov     bx, 5400h
                call    sub_1A5C1
                mov     word ptr sysinit_base_ptr+2, cx
                mov     es, cx
                xor     di, di
                mov     word ptr sysinit_base_ptr, di
                mov     cx, 110         ; number of bytes to move
                mov     si, offset sysinit_base
                cld
                rep movsb
                mov     si, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     si, MSG_72_PTR  ; memory allocation error occurred

mae2_msg_loop:                          ; ...
                lodsb
                stosb
                cmp     al, 24h ; '$'
                jnz     short mae2_msg_loop
                mov     sysinit_ptr, offset sysinitptr
                mov     sysinit_ptr+2, cs
                or      install_flag, 2
                mov     bx, memhi
                mov     ax, area
                mov     old_area, ax
                mov     es, ax
                sub     bx, ax
                mov     ah, 4Ah
                int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                        ; ES = segment address of block to change
                                        ; BX = new size in paragraphs
                push    es
                mov     ax, es
                dec     ax
                mov     es, ax
                assume es:nothing
                mov     word ptr es:1, 8
                mov     word ptr es:8, 4453h
                pop     es
                assume es:nothing
                mov     bx, 0FFFFh
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     memhi, ax
                mov     es, ax
                mov     bx, CONFBOT
                sub     bx, ax
                dec     bx
                dec     bx
                mov     ah, 4Ah
                int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                        ; ES = segment address of block to change
                                        ; BX = new size in paragraphs
                mov     bx, 0FFFFh
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     area, ax
                mov     es, memhi
                mov     ah, 49h
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed
                retn
endfile         endp


; =============== S U B R O U T I N E =======================================


do_install_exec proc near               ; ...
                push    si
                push    es
                push    ds
                pop     es
                assume es:SYSINIT
                pop     ds
                assume ds:nothing
                mov     dx, si
                xor     cx, cx
                cld
                mov     cs:ldexec_start, 20h ; ' '
                mov     di, offset ldexec_parm

installfilename:                        ; ...
                lodsb
                or      al, al
                jnz     short installfilename

got_installparm:                        ; ...
                lodsb
                stosb
                cmp     al, 0Ah
                jz      short done_installparm
                inc     cl
                jmp     short got_installparm
; ---------------------------------------------------------------------------

done_installparm:                       ; ...
                mov     cs:ldexec_line, cl
                or      cl, cl
                jnz     short install_seg_set
                mov     cs:ldexec_start, 0Dh

install_seg_set:                        ; ...
                mov     cs:SYSINITSTART, 0 ; cs:0
                mov     ax, cs
                mov     cx, ax
                cmp     cs:config_envlen, 0
                jz      short no_envdata2
                mov     cx, cs:config_wrkseg

no_envdata2:                            ; ...
                mov     cs:iexec_environ, cx
                mov     cs:iexec_ldexec_line_seg, ax
                mov     cs:iexec_ldexec_5c_fcb_seg, ax
                mov     cs:iexec_ldexec_6c_fcb_seg, ax
                call    sum_up
                push    es
                mov     es, word ptr cs:sysinit_base_ptr+2
                assume es:nothing
                mov     es:68h, ax
                pop     es
                xor     ax, ax
                mov     ah, 4Bh
                mov     bx, offset iexec_environ
                push    es
                push    ds
                jmp     cs:sysinit_base_ptr
do_install_exec endp

; ---------------------------------------------------------------------------

sysinitptr:                             ; ...
                pop     si
                push    es
                push    ds
                pop     es
                pop     ds
                jnb     short install_exit_ret
                push    si
                call    badload
                pop     si

install_exit_ret:                       ; ...
                retn

; =============== S U B R O U T I N E =======================================


ParaRound       proc near               ; ...
                add     ax, 0Fh
                rcr     ax, 1
                shr     ax, 3
                retn
ParaRound       endp

; ---------------------------------------------------------------------------

sysinit_base:                           ; ...
                mov     word ptr cs:loc_11AEA, ss ; sysinit_base module
                mov     cs:word_11AEC, sp
                int     21h             ; load/exec dos call.
                mov     ss, word ptr cs:loc_11AEA
                assume ss:nothing
                mov     sp, cs:word_11AEC
                pop     ds
                pop     es
                jb      short sysinit_base_end
                call    sum_up
                cmp     cs:word_11AE7+1, ax ; sysinit_base_chksum
                jz      short sysinit_base_end
                mov     ax, 160Eh
                mov     bl, 3
                int     2Fh             ; - Multiplex - MS WINDOWS - MS-DOS 7 BOOT LOGO SUPPORT - correct EGA output mode
                mov     ah, 9
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dx, offset logo_screen_msg
                int     21h             ; DOS - PRINT STRING
                                        ; DS:DX -> string terminated by "$"

stall:                                  ; ...
                hlt                     ; use HLT to minimize energy consumption
; ---------------------------------------------------------------------------
                jmp     short stall
; ---------------------------------------------------------------------------

sysinit_base_end:                       ; ...
                jmp     dword ptr es:151Eh

; =============== S U B R O U T I N E =======================================


sum_up          proc near               ; ...
                push    ds              ; return back to sysinit module
                mov     ax, es:CONFBOT
                mov     ds, ax
                assume ds:nothing
                xor     si, si
                xor     ax, ax
                mov     cx, es:config_size ; if config_size has been broken, then this
                                        ; whole test better fail.
                shr     cx, 1
                jz      short sum_sys_code ; when config.sys file not exist.

sum1:                                   ; ...
                add     ax, [si]
                inc     si
                inc     si
                loop    sum1

sum_sys_code:                           ; ...
                xor     si, si          ; locstack ?
                                        ; starting after the stack.
                                        ; this does not cover the possible stack code!
                mov     cx, 0CBD0h      ; SI_end (52176)
                                        ; SI_end is the label at the end of sysinit
                                        ; from after_checksum to SI_end
                sub     cx, si
                shr     cx, 1

sum2:                                   ; ...
                add     ax, es:[si]
                inc     si
                inc     si
                loop    sum2
                pop     ds
                retn
sum_up          endp

; ---------------------------------------------------------------------------
sysinit_base_ssx dw 0
sysinit_base_spx dw 0
sysinit_base_chksum dw 0

; =============== S U B R O U T I N E =======================================


sub_15AD1       proc near               ; ...
                mov     ax, ds:14D5h
                test    ax, ax
                jz      short locret_15B19
                mov     ax, ds:15ACh
                not     ax
                and     ax, 0FFFh
                mov     bx, 4800h
                call    sub_1A5C1
sub_15AD1       endp


; =============== S U B R O U T I N E =======================================


sub_15AE6       proc near               ; ...
                mov     ax, ds:14D5h
                test    ax, ax
                jz      short locret_15B19
                mov     bx, ds:15ACh
                inc     bx
                shl     bx, 4
                add     bx, ax
                jnb     short loc_15AFB
                jnz     short locret_15B19

loc_15AFB:                              ; ...
                call    ParaRound
                mov     bx, 4800h
                call    sub_1A5C1
                sub     ax, ax
                mov     ds:14D5h, ax
                push    ds
                mov     ds, word ptr ds:1508h
                mov     word ptr ds:0FCh, 18h
                mov     ds:0FEh, cx
                pop     ds

locret_15B19:                           ; ...
                retn
sub_15AE6       endp


; =============== S U B R O U T I N E =======================================


sub_15B1A       proc near               ; ...
                call    sub_15B79
                mov     [bx], di
                mov     word ptr [bx+2], es
                mov     word ptr [bx+4], 0
                mov     ax, di
                mov     cx, cs:word_12F61
                push    di

loc_15B2F:                              ; ...
                call    sub_15BB1
                mov     di, ax
                loop    loc_15B2F
                sub     di, cs:word_12F65
                pop     cx
                mov     es:[di], cx
                xchg    cx, di
                mov     es:[di+2], cx
                mov     ax, es
                cmp     ax, [bx+1Fh]
                jb      short locret_15B78
                mov     byte ptr [bx+0Ch], 1
                mov     ax, cs:word_12F65
                sub     ax, 18h
                push    ds
                push    bx
                call    ParaRound
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     bh, 42h ; 'B'
                mov     bl, byte_12F5A
                cmp     bl, 1
                jnz     short loc_15B6B
                mov     bl, 0

loc_15B6B:                              ; ...
                call    sub_1A5C1
                pop     bx
                pop     ds
                assume ds:nothing
                mov     word ptr [bx+0Dh], 0
                mov     [bx+0Fh], cx

locret_15B78:                           ; ...
                retn
sub_15B1A       endp


; =============== S U B R O U T I N E =======================================


sub_15B79       proc near               ; ...
                push    bx
                mov     ax, cs:word_12F65
                mul     cs:word_12F61
                add     ax, 0Fh
                and     ax, 0FFF0h
                xchg    ax, bx
                mov     ax, 4A03h
                mov     dl, 1
                mov     cx, 0FFFAh
                int     2Fh
                cmp     di, 0FFFFh
                jnz     short loc_15BAF
                shr     bx, 4
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     ax, bx
                mov     bh, 42h ; 'B'
                mov     bl, p_buffer_slash_x
                call    sub_1A5C1
                mov     es, cx
                xor     di, di
                pop     ds
                assume ds:nothing

loc_15BAF:                              ; ...
                pop     bx
                retn
sub_15B79       endp


; =============== S U B R O U T I N E =======================================


sub_15BB1       proc near               ; ...
                push    cs:word_12F85
                pop     word ptr es:[di+2]
                mov     cs:word_12F85, ax
                add     ax, cs:word_12F65
                mov     es:[di], ax
                mov     word ptr es:[di+4], 0FFh
                mov     word ptr es:[di+6], 0
                mov     word ptr es:[di+8], 0
                retn
sub_15BB1       endp


; =============== S U B R O U T I N E =======================================


sub_15BD9       proc near               ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     bp, stacks
                mov     es:0Ch, bp
                mov     ax, 8
                mov     cx, stackcount
                mul     cx
                add     ax, bp
                mov     es:4, ax
                mov     bx, ax
                sub     bx, 2
                mov     di, es:4
                mov     ax, stacksize
                mul     cx
                mov     cx, ax
                xor     ax, ax
                push    es
                pop     ds
                assume ds:nothing
                mov     es, word ptr ds:0Ah
                cld
                rep stosb
                mov     cx, ds:2

loc_15C13:                              ; ...
                mov     es:[bp+0], al
                mov     es:[bp+1], al
                mov     es:[bp+2], ax
                mov     es:[bp+4], ax
                add     bx, ds:6
                mov     es:[bp+6], bx
                mov     es:[bx], bp
                add     bp, 8
                loop    loc_15C13
                sub     bp, 8
                mov     ds:0Eh, bp
                mov     ds:10h, bp
                xor     ax, ax
                mov     es, ax
                assume es:BIOSDATA
                cli
                mov     si, 20h ; ' '
                mov     di, 15Eh
                mov     bx, 12h
                mov     dx, 16h
                call    sub_15EFC
                mov     si, 24h ; '$'
                mov     di, 163h
                mov     bx, 1Bh
                mov     dx, 1Fh
                call    sub_15EFC
                mov     si, 1C0h
                mov     di, 181h
                mov     bx, 28h ; '('
                mov     dx, 2Ch ; ','
                call    sub_15EFC
                mov     si, 28h ; '('
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15CAF
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15CAF
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15CA0
                cmp     dx, 0F000h
                jnz     short loc_15CA0
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15CAF

loc_15CA0:                              ; ...
                pop     ds
                mov     di, 168h
                mov     bx, 33h ; '3'
                mov     dx, 31h ; '1'
                call    sub_15EFC
                jmp     short loc_15CB0
; ---------------------------------------------------------------------------

loc_15CAF:                              ; ...
                pop     ds

loc_15CB0:                              ; ...
                mov     si, 2Ch ; ','
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15CEF
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15CEF
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15CE0
                cmp     dx, 0F000h
                jnz     short loc_15CE0
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15CEF

loc_15CE0:                              ; ...
                pop     ds
                mov     di, 16Dh
                mov     bx, 4Bh ; 'K'
                mov     dx, 49h ; 'I'
                call    sub_15EFC
                jmp     short loc_15CF0
; ---------------------------------------------------------------------------

loc_15CEF:                              ; ...
                pop     ds

loc_15CF0:                              ; ...
                mov     si, 30h ; '0'
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15D2F
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15D2F
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15D20
                cmp     dx, 0F000h
                jnz     short loc_15D20
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15D2F

loc_15D20:                              ; ...
                pop     ds
                mov     di, 172h
                mov     bx, 63h ; 'c'
                mov     dx, 61h ; 'a'
                call    sub_15EFC
                jmp     short loc_15D30
; ---------------------------------------------------------------------------

loc_15D2F:                              ; ...
                pop     ds

loc_15D30:                              ; ...
                mov     si, 34h ; '4'
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15D6F
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15D6F
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15D60
                cmp     dx, 0F000h
                jnz     short loc_15D60
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15D6F

loc_15D60:                              ; ...
                pop     ds
                mov     di, 177h
                mov     bx, 7Bh ; '{'
                mov     dx, 79h ; 'y'
                call    sub_15EFC
                jmp     short loc_15D70
; ---------------------------------------------------------------------------

loc_15D6F:                              ; ...
                pop     ds

loc_15D70:                              ; ...
                mov     si, 38h ; '8'
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15DAF
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15DAF
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15DA0
                cmp     dx, 0F000h
                jnz     short loc_15DA0
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15DAF

loc_15DA0:                              ; ...
                pop     ds
                mov     di, 17Ch
                mov     bx, 93h
                mov     dx, 91h
                call    sub_15EFC
                jmp     short loc_15DB0
; ---------------------------------------------------------------------------

loc_15DAF:                              ; ...
                pop     ds

loc_15DB0:                              ; ...
                mov     si, 1C8h
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15DEF
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15DEF
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15DE0
                cmp     dx, 0F000h
                jnz     short loc_15DE0
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15DEF

loc_15DE0:                              ; ...
                pop     ds
                mov     di, 186h
                mov     bx, 0ABh
                mov     dx, 0A9h
                call    sub_15EFC
                jmp     short loc_15DF0
; ---------------------------------------------------------------------------

loc_15DEF:                              ; ...
                pop     ds

loc_15DF0:                              ; ...
                mov     si, 1CCh
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15E2F
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15E2F
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15E20
                cmp     dx, 0F000h
                jnz     short loc_15E20
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15E2F

loc_15E20:                              ; ...
                pop     ds
                mov     di, 18Bh
                mov     bx, 0C3h
                mov     dx, 0C1h
                call    sub_15EFC
                jmp     short loc_15E30
; ---------------------------------------------------------------------------

loc_15E2F:                              ; ...
                pop     ds

loc_15E30:                              ; ...
                mov     si, 1D0h
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15E6F
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15E6F
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15E60
                cmp     dx, 0F000h
                jnz     short loc_15E60
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15E6F

loc_15E60:                              ; ...
                pop     ds
                mov     di, 190h
                mov     bx, 0DBh
                mov     dx, 0D9h
                call    sub_15EFC
                jmp     short loc_15E70
; ---------------------------------------------------------------------------

loc_15E6F:                              ; ...
                pop     ds

loc_15E70:                              ; ...
                mov     si, 1D8h
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15EAF
                cmp     byte ptr [bx], 0CFh ; iret
                jz      short loc_15EAF
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15EA0
                cmp     dx, 0F000h
                jnz     short loc_15EA0
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15EAF

loc_15EA0:                              ; ...
                pop     ds
                mov     di, 195h
                mov     bx, 0F3h
                mov     dx, 0F1h
                call    sub_15EFC
                jmp     short loc_15EB0
; ---------------------------------------------------------------------------

loc_15EAF:                              ; ...
                pop     ds

loc_15EB0:                              ; ...
                mov     si, 1DCh
                push    ds
                lds     bx, es:[si]
                push    ds
                pop     dx
                cmp     dx, 0
                jz      short loc_15EEF
                cmp     byte ptr [bx], 0CFh
                jz      short loc_15EEF
                cmp     word ptr [bx+6], 424Bh
                jz      short loc_15EE0
                cmp     dx, 0F000h
                jnz     short loc_15EE0
                push    es
                push    dx
                mov     dx, 0F000h
                mov     es, dx
                assume es:nothing
                cmp     bx, es:0FF01h
                pop     dx
                pop     es
                assume es:nothing
                jz      short loc_15EEF

loc_15EE0:                              ; ...
                pop     ds
                mov     di, 19Ah
                mov     bx, 10Bh
                mov     dx, 109h
                call    sub_15EFC
                jmp     short loc_15EF0
; ---------------------------------------------------------------------------

loc_15EEF:                              ; ...
                pop     ds

loc_15EF0:                              ; ...
                sti
                mov     ax, 70h
                mov     ds, ax
                assume ds:nothing
                or      ds:int19sem, 1
                retn
sub_15BD9       endp


; =============== S U B R O U T I N E =======================================


sub_15EFC       proc near               ; ...
                mov     ax, es:[si]
                mov     [bx], ax
                mov     cx, es:[si+2]
                mov     [bx+2], cx
                push    ds
                mov     ds, cs:BCodeSeg
                assume ds:nothing
                mov     [di], ax
                mov     [di+2], cx
                pop     ds
                mov     es:[si], dx
                mov     word ptr es:[si+2], ds
                retn
sub_15EFC       endp

; ---------------------------------------------------------------------------
                db    0
                db    1
                db  1Eh
                db    0
                db    0
                db    0
byte_15F22      db 0                    ; ...
byte_15F23      db 0                    ; ...
                db  30h ; 0
                db    0
byte_15F26      db 0                    ; ...
word_15F27      dw 0                    ; ...
word_15F29      dw 0                    ; ...
                db 20h dup(0)
byte_15F4B      db 0                    ; ...
aWindows        db ':\WINDOWS',0
                db 48h dup(0)
byte_15F9E      db 0                    ; ...
aWindows_0      db ':\WINDOWS',0
                db 43h dup(0)
word_15FEC      dw 0                    ; ...
                db    0
                db    0
                db    3
aCommand        db '\COMMAND'
byte_15FF9      db 0FFh                 ; ...
                db 0FFh
aDY             db '/D /Y '
                db 8Eh dup(0)
aTmp            db 'TMP='
aTemp           db 'TEMP='
aTempprompt     db '\TEMPPROMPT='
aPG             db '$p$g',0
aWinbootdir_0   db 'winbootdir='
aWindir_0       db 'windir='
aPath_1         db 'PATH= '
aK              db '/K '
aNetstart       db 'NETSTART',0
aDKAutoexec     db ' /D /K AUTOEXEC',0
aComspecWnbootng_sts db 'COMSPEC=\WNBOOTNG.STS',0
byte_160F3      db 0                    ; ...
byte_160F4      db 0                    ; ...
aAspi2dos_sys   db '\ASPI2DOS.SYS',0
aAspi2hlp_sys   db '\ASPI2HLP.SYS',0
aDblbuff_sys    db '\DBLBUFF.SYS',0
aD              db '/D+',0Dh
aIfshlp_sys     db '\IFSHLP.SYS',0
byte_1612E      db 0                    ; ...
aSetver_exe     db '\SETVER.EXE',0
aEmmxxxx0       db 'EMMXXXX0',0
aQmmxxxx0       db 'QMMXXXX0',0
aIfsHlp         db 'IFS$HLP$',0
aSetverxx       db 'SETVERXX',0
aAutoexec_bat   db '\AUTOEXEC.BAT',0
                db    3
                db  51h ; Q
                db  83h
                db  46h ; F
                db  0Eh
                db    0
                db 0D8h
                db  50h ; P
                db  91h
                db  46h ; F
                db  11h
                db  81h
                db  10h
                db  51h ; Q
                db 0A2h
                db  46h ; F
                db  0Ch
                db    1
                db    0
                db    0
                db 0C3h
                db  4Fh ; O
                db  91h
                db  46h ; F
                db  11h
                db  80h
byte_16187      db 0FFh                 ; ...
                db 5Ah dup(0)
word_161E2      dw 0                    ; ...
word_161E4      dw 0                    ; ...
dword_161E6     dd 0                    ; ...
byte_161EA      db 0                    ; ...
byte_161EB      db 0                    ; ...
                db    3
aIo_sys         db 'IO.SYS',0           ; ...
                db    6
aMsdos_sys      db 'MSDOS.SYS',0
aCMsdos_sys     db 'C:\MSDOS.SYS',0
word_1620C      dw 0                    ; ...
                db 0FFh
                db    0
                db    0
                db    0
                db    0
                db    0
                db    7
                db    0
aIo             db 'IO      '
aDos            db 'DOS',0
                db 18h dup(0)
aMsdos          db 'MSDOS   '
aDos_0          db 'DOS'
aIbmbioCom      db 'IBMBIO  COM'
aIbmdosCom      db 'IBMDOS  COM'
aIo_dos         db 'IO.DOS',0
aIbmbio_com     db 'IBMBIO.COM',0
aW40doswosapp   db 'W40DOSWOSAPP            ',0
aConfig_app     db 'CONFIG.APP',0
aConfig_wos     db 'CONFIG.WOS',0
aCMsdossys_sts  db 'C:\MSDOSSYS.STS',0
                db    8
aCommand_com    db 'COMMAND.COM',0
                db    7
aConfig_sys     db 'CONFIG.SYS',0
                db    9
aAutoexec_bat_0 db 'AUTOEXEC.BAT',0
                db    9
aDblspace_bin   db 'DBLSPACE.BIN',0
                db    9
aDrvspace_bin   db 'DRVSPACE.BIN',0
                db 0EDh
                db  47h ; G
                db 0F0h
                db  47h ; G
                db  6Ch ; l
                db  47h ; G
                db  74h ; t
                db  47h ; G
                db  2Ch ; ,
                db  48h ; H
                db  39h ; 9
                db  48h ; H
                db  45h ; E
                db  48h ; H
                db  53h ; S
                db  48h ; H
                db  61h ; a
                db  48h ; H
                db    0
                db    0
                db 0F3h
                db  47h ; G
                db 0F6h
                db  47h ; G
                db  39h ; 9
                db  48h ; H
                db  45h ; E
                db  48h ; H
                db    0
                db    0
                db    6
aIo_w40         db 'IO.W40',0
                db    6
aJo_sys         db 'JO.SYS',0
                db    9
aMsdos_w40      db 'MSDOS.W40',0
                db  0Bh
aWinboot_ini    db 'WINBOOT.INI',0
                db    0
                db    0
                db  1Dh
                db  49h ; I
                db  18h
                db  12h
                db 0E0h
                db  14h
                db  18h
                db  12h
                db 0F7h
                db  14h
                db  18h
                db  12h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
byte_1634B      db 0                    ; ...
byte_1634C      db 0                    ; ...
                db  4Eh ; N
                db  0Ch
aCommand_com_0  db '\COMMAND.COM',0
                db 41h dup(0)
word_1639D      dw 2003h                ; ...
byte_1639F      db 2Fh                  ; ...
                db  50h ; P
                db 7Ch dup(0)
aCommand_com_1  db '\COMMAND.COM',0
                db 41h dup(0), 3
                db  20h
byte_1646D      db 2Fh                  ; ...
                db  50h ; P
                db 7Ch dup(0)
aCommand_com_2  db '\COMMAND.COM',0
                db 41h dup(0)
                db    3
                db  20h
byte_1653B      db 2Fh                  ; ...
                db  50h ; P
                db 7Ch dup(0)
aWin_com        db '\WIN.COM',0
                db 46h dup(0)
                db 0Dh
                db 7Eh dup(0)
byte_16687      db 0                    ; ...
byte_16688      db 0                    ; ...
aSafeBoot       db '(Safe boot)',0Dh,0Ah,0 ; ...
byte_16697      db 63 dup(0)            ; ...
; ---------------------------------------------------------------------------

loc_166D6:                              ; ...
                call    sub_16884
; ---------------------------------------------------------------------------
                mov     es, word ptr ds:150Ah
                mov     al, es:2056h
                call    sub_16901
; ---------------------------------------------------------------------------
                jb      short loc_166F8
                cmp     al, es:2056h
                jz      short loc_166F8
                mov     es:2056h, al
                mov     es:1F86h, al
                mov     ds:481Ch, al

loc_166F8:                              ; ...
                cmp     byte ptr ds:15B1h, 2
                jnz     short loc_16706
                mov     dx, 481Ch
                mov     ah, 41h
                int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)

loc_16706:                              ; ...
                test    byte ptr ds:36C5h, 1
                jz      short loc_16722
                mov     ax, 4A16h
                int     2Fh
                mov     dx, 4C09h
                mov     ax, 4A17h
                mov     cx, 0Dh
                int     2Fh
                mov     ax, 4A18h
                int     2Fh

loc_16722:                              ; ...
                cld
                mov     es, word ptr ds:15B7h
                mov     word ptr es:2Ch, ds
                xor     bx, bx
                mov     [bx], bx
                cmp     byte ptr ds:4C08h, 0
                jz      short loc_16755
                and     byte ptr ds:36C5h, 0BFh
                mov     byte ptr ds:60C4h, 1
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D14h
                call    sub_14AC6
                jnb     short loc_16781
                or      byte ptr ds:36C5h, 20h
                call    sub_1703F

loc_16755:                              ; ...
                cmp     byte ptr ds:4C07h, 0
                jz      short loc_16781
                and     byte ptr ds:36C5h, 0BFh
                mov     byte ptr ds:60C4h, 1
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D16h
                call    sub_14ADB
                jnb     short loc_16781
                mov     byte ptr ds:48CFh, 0
                mov     byte ptr ds:48CCh, 0
                mov     byte ptr ds:4C07h, 0

loc_16781:                              ; ...
                mov     es, word ptr ds:150Ah
                mov     al, ds:36C5h
                test    al, 10h
                jz      short loc_1678E
                and     al, 0F7h

loc_1678E:                              ; ...
                and     al, 8Fh
                or      es:1F87h, al
                mov     al, ds:36BFh
                and     al, 20h
; ---------------------------------------------------------------------------
                db  26h ; &
                db    8
                db    6
word_1679D      dw 1F87h                ; ...
; ---------------------------------------------------------------------------

loc_1679F:                              ; ...
                cmp     byte ptr ds:48CFh, 0
                jz      short loc_16801
                mov     di, 491Dh
                call    sub_1720B
                call    sub_1723E
                lea     bx, [di+1]
                add     bl, [di]
                adc     bh, 0
                mov     byte ptr [bx], 0Dh
                mov     dx, 48CFh
                call    sub_16967
                jb      short loc_167C5
                call    sub_16934

loc_167C5:                              ; ...
                cmp     byte ptr ds:4A6Bh, 0
                jz      short loc_167D3
                cmp     byte ptr ds:48CCh, 0
                jz      short loc_16801

loc_167D3:                              ; ...
                cmp     ax, 1
                jnz     short loc_167DF
                call    print_x
                adc     [bx+si+22EBh], ax

loc_167DF:                              ; ...
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CC8h
                cmp     byte ptr ds:4C07h, 0
                jnz     short loc_167FE
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CCAh
                cmp     byte ptr ds:491Dh, 0
                jnz     short loc_167FE
                mov     dx, 48CFh

loc_167FE:                              ; ...
                call    badfil

loc_16801:                              ; ...
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER
                add     al, 41h ; 'A'
                mov     dl, al
                mov     si, 499Dh
                cmp     byte ptr [si], 0
                jnz     short loc_1685A
                mov     si, 4A6Bh
                cmp     byte ptr [si], 0
                jnz     short loc_1685A
                push    dx
                call    print_x
                pop     ds

loc_1681E:                              ; ...
                sbb     byte ptr [bp+si-4Ch], 2
                int     21h             ; DOS -
                push    dx
                mov     dl, 3Eh ; '>'
                int     21h             ; DOS -
                mov     bl, ds:48CEh
                mov     bh, 0
                mov     byte ptr [bx+48CFh], 0Dh
                mov     dx, 48CDh
                mov     ah, 0Ah
                int     21h             ; DOS - BUFFERED KEYBOARD INPUT
                                        ; DS:DX -> buffer
                call    print_x
                add     ax, 5A80h
                mov     bl, ds:48CEh
                or      bl, bl
                jz      short near ptr loc_1681E+2
                mov     byte ptr ds:48CCh, 1
                mov     byte ptr [bx+48CFh], 0
                mov     byte ptr ds:491Dh, 0
                jmp     short loc_1687C
; ---------------------------------------------------------------------------

loc_1685A:                              ; ...
                mov     bx, si
                push    ds
                pop     es
                mov     byte ptr ds:48CCh, 0
                mov     di, 48CFh

loc_16866:                              ; ...
                lodsb
                mov     byte ptr [si-1], 0
                stosb
                or      al, al
                jnz     short loc_16866
                mov     di, 491Dh
                lea     si, [bx+4Eh]

loc_16876:                              ; ...
                lodsb
                stosb
                or      al, al
                jnz     short loc_16876

loc_1687C:                              ; ...
                mov     byte ptr ds:4C07h, 0
                jmp     loc_1679F

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_16884       proc near               ; ...
                push    ds
                push    bx
                mov     al, ds:451Eh
                call    sub_16901
; ---------------------------------------------------------------------------
                jnb     short loc_16891
                mov     al, ds:456Eh

loc_16891:                              ; ...
                mov     ds, word ptr ds:150Ah
                mov     bx, 1ECAh
                xchg    al, [bx]
                mov     dx, bx
                push    ax
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                pop     ax
                jnb     short loc_168FE
                push    es
                push    di
                push    ax
                mov     di, bx
                push    ds
                pop     es
                cld
                xor     al, al

loc_168AF:                              ; ...
                mov     cx, 40h ; '@'
                repne scasb
                jnz     short loc_168FB
                dec     di
                dec     di
                push    word ptr [di]
                mov     byte ptr [di], 30h ; '0'
                push    di
                mov     dx, bx
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                pop     di
                pop     ax
                mov     [di], al
                jnb     short loc_168FB
                mov     di, bx
                mov     dl, 3
                push    cs
                pop     es
                assume es:SYSINIT

loc_168D1:                              ; ...
                push    di
                mov     di, offset byte_16697
                mov     cx, 3Fh ; '?'
                mov     ax, 7302h
                int     21h             ; DOS -
                pop     di
                jb      short loc_168F1
                mov     al, dl
                add     al, 40h ; '@'
                mov     [di], al
                push    dx
                mov     dx, di
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                pop     dx
                jnb     short loc_168FB

loc_168F1:                              ; ...
                inc     dx
                cmp     dl, 1Ah
                jbe     short loc_168D1
                pop     ax
                mov     [di], al
                push    ax

loc_168FB:                              ; ...
                pop     ax
                pop     di
                pop     es
                assume es:nothing

loc_168FE:                              ; ...
                pop     bx
                pop     ds
                retn
sub_16884       endp


; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_16901       proc near               ; ...
                push    ds
                sub     al, 40h ; '@'
                push    ax
                or      al, 40h
                call    sub_1B4DE
sub_16901       endp

; ---------------------------------------------------------------------------
                or      ax, ax
                jnz     short loc_16931
                pop     ax
                push    ax
                call    sub_1B590
                or      ax, ax
                jnz     short loc_16931
                pop     dx
                push    dx
                dec     dx
                mov     ax, 4A11h
                mov     bx, 1
                int     2Fh             ; - Multiplex - XMS -
                test    ax, ax
                jz      short loc_16928
                jmp     short loc_16930
; ---------------------------------------------------------------------------

loc_16928:                              ; ...
                mov     al, bl
                and     al, 7Fh
                add     al, 41h ; 'A'
                jmp     short loc_16931
; ---------------------------------------------------------------------------

loc_16930:                              ; ...
                stc

loc_16931:                              ; ...
                pop     dx
                pop     ds
                retn

; =============== S U B R O U T I N E =======================================


sub_16934       proc near               ; ...
                push    ds
                push    dx
                lds     dx, ds:44A7h
                mov     ax, 2524h
                int     21h             ; DOS - SET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; DS:DX = new vector to be used for specified interrupt
                pop     dx
                pop     ds
                push    cs
                pop     es
                assume es:SYSINIT
                mov     bx, 48B5h
                mov     cx, ds:60C0h
                jcxz    short loc_16950
                mov     cx, ds:60C2h

loc_16950:                              ; ...
                mov     [bx], cx
                mov     word ptr [bx+4], cs
                mov     word ptr [bx+8], cs
                mov     word ptr [bx+0Ch], cs
                mov     ax, 4B00h
                stc
                int     21h             ; DOS - 2+ - LOAD OR EXECUTE (EXEC)
                                        ; DS:DX -> ASCIZ filename
                                        ; ES:BX -> parameter block
                                        ; AL = subfunc: load & execute program
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     ax, 2
                retn
sub_16934       endp


; =============== S U B R O U T I N E =======================================


sub_16967       proc near               ; ...
                push    dx
                call    sub_13755
                jb      short loc_16996
                mov     es, ax
                assume es:nothing
                mov     ah, 49h
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed
                mov     bp, bx
                mov     ax, cs
                mov     bx, config_envlen
                test    bx, bx
                jz      short loc_16982
                mov     ax, config_wrkseg

loc_16982:                              ; ...
                mov     cx, es
                add     cx, bp
                cmp     cx, ax
                jbe     short loc_1699A
                mov     cx, es
                add     bx, 0Fh
                shr     bx, 4
                add     cx, bx
                cmp     ax, cx

loc_16996:                              ; ...
                jb      loc_16A3E

loc_1699A:                              ; ...
                mov     ax, 3D00h
                stc
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      loc_16A38
                mov     bx, ax
                cmp     byte_1634C, 0
                jnz     short loc_16A03
                mov     dx, 4D1Dh
                mov     cx, 2
                mov     ah, 3Fh
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_16A17
                cmp     word_1679D, 5A4Dh
                stc
                jnz     short loc_16A17
                mov     dx, 8
                xor     cx, cx
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_16A17
                mov     dx, 4D1Dh
                mov     cx, 2
                mov     ah, 3Fh
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_16A17
                cmp     ax, cx
                stc
                jnz     short loc_16A17
                mov     dx, word_1679D
                shl     dx, 4
                xor     cx, cx
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_16A17
                mov     dx, 4D1Eh
                mov     cx, 1
                mov     ah, 3Fh
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_16A17
                cmp     byte ptr word_1679D+1, 80h
                stc
                jnz     short loc_16A17

loc_16A03:                              ; ...
                xor     cx, cx
                xor     dx, dx
                mov     ax, 100h
                cmp     byte_1634C, 2
                jz      short loc_16A17
                mov     ax, 4202h
                stc
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from end of file

loc_16A17:                              ; ...
                pushf
                push    ax
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                pop     ax
                popf
                jb      short loc_16A38
                add     ax, 0Fh
                adc     dx, 0
                shr     ax, 4
                shl     dx, 0Ch
                or      ax, dx
                add     ax, 10h
                cmp     bp, ax
                jb      short loc_16A3E

loc_16A36:                              ; ...
                pop     dx
                retn
; ---------------------------------------------------------------------------

loc_16A38:                              ; ...
                mov     ax, 2
                stc
                jmp     short loc_16A36
; ---------------------------------------------------------------------------

loc_16A3E:                              ; ...
                mov     ax, 1
                jmp     short loc_16A36
sub_16967       endp

; ---------------------------------------------------------------------------
                cmp     byte_18751, 0
                jz      short locret_16A81
                push    ds
                xor     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     ax, word_19E
                cmp     ax, 1
                jb      short loc_16A67
                mov     ds, ax
                cmp     word ptr unk_B, 4D4Dh
                jnz     short loc_16A67
                cmp     word_E, 5858h

loc_16A67:                              ; ...
                pop     ds
                assume ds:nothing
                jz      short loc_16A7E
                mov     dx, 46BBh
                call    sub_16B98
                jz      short loc_16A7E
                mov     dx, 46C4h
                call    sub_16B98
                jz      short loc_16A7E
                sub     ax, ax
                jmp     short locret_16A81
; ---------------------------------------------------------------------------

loc_16A7E:                              ; ...
                call    sub_16B58

locret_16A81:                           ; ...
                retn
; ---------------------------------------------------------------------------
                db 2
                db 0

; =============== S U B R O U T I N E =======================================


sub_16A84       proc near               ; ...
                cmp     byte ptr ds:6CD1h, 0
                jz      locret_16B10
                cmp     byte ptr ds:6B9Eh, 0
                jz      short locret_16B10
                push    ds
                xor     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     ax, word_19E
                cmp     ax, 1
                jb      short loc_16B0F
                mov     ds, ax
                mov     si, 0Ah
                cmp     word ptr [si+1], 4D4Dh
                jnz     short loc_16B0F
                cmp     word ptr [si+4], 5858h
                jnz     short loc_16B0F
                cld
                mov     di, 4581h
                mov     dx, di
                mov     cx, 8
                rep movsb
                mov     al, 0
                stosb
                pop     ds
                assume ds:nothing
                push    dx
                mov     dl, 1
                mov     ax, 3307h
                int     21h             ; DOS - 7+ SET/CLEAR DOS FLAG (DL = 0 clear, 1 - set)
                pop     dx
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short loc_16B0D
                xchg    ax, bx
                mov     ax, 4400h
                int     21h             ; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
                                        ; BX = file or device handle
                jb      short loc_16B08
                test    dx, 80h
                jz      short loc_16B08
                test    dx, 4000h
                jz      short loc_16B08
                mov     dx, 5002h
                mov     cx, 2
                mov     ax, 4402h
                int     21h             ; DOS - 2+ - IOCTL - READ CHARACTER DEVICE CONTROL STRING
                                        ; BX = device handle, CX = number of bytes to read DS:DX -> buffer
                jb      short loc_16B08
                cmp     ax, cx
                jnz     short loc_16B08
                mov     si, dx
                mov     ax, [si]
                xchg    al, ah
                cmp     ax, 43Ch
                jnb     short loc_16B08
                mov     byte ptr ds:6B9Eh, 0

loc_16B08:                              ; ...
                mov     ax, 3E00h
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle

loc_16B0D:                              ; ...
                jmp     short locret_16B10
; ---------------------------------------------------------------------------

loc_16B0F:                              ; ...
                pop     ds

locret_16B10:                           ; ...
                retn
sub_16A84       endp

; ---------------------------------------------------------------------------
aIbmThinkpad510 db 'IBM ThinkPad 510'

; =============== S U B R O U T I N E =======================================


sub_16B21       proc near               ; ...
                cmp     byte ptr ds:6CD1h, 0
                jz      short locret_16B57
                cmp     byte ptr ds:6B9Eh, 0
                jz      short locret_16B57
                cld
                push    es
                mov     di, 0F000h
                mov     es, di
                assume es:nothing
                mov     di, 0B000h
                mov     al, ds:5091h
                mov     cx, 1000h

loc_16B3F:                              ; ...
                repne scasb
                jcxz    short loc_16B56
                push    cx
                push    di
                mov     cx, 0Fh
                mov     si, 5092h
                repe cmpsb
                pop     di
                pop     cx
                jnz     short loc_16B3F
                mov     byte ptr ds:6B9Eh, 0

loc_16B56:                              ; ...
                pop     es
                assume es:nothing

locret_16B57:                           ; ...
                retn
sub_16B21       endp


; =============== S U B R O U T I N E =======================================


sub_16B58       proc near               ; ...
                push    bx
                push    di
                push    es
                mov     ax, 4A10h
                mov     bx, 5
                int     2Fh
                pop     es
                pop     di
                pop     bx
                cmp     ax, 0BABEh
                jz      short locret_16B82
                test    byte ptr ds:36C5h, 1
                jz      short loc_16B7D
                mov     byte ptr ds:46F7h, 11h
                mov     byte ptr ds:4705h, 11h
                retn
; ---------------------------------------------------------------------------

loc_16B7D:                              ; ...
                cmp     byte ptr ds:44A2h, 0

locret_16B82:                           ; ...
                retn
sub_16B58       endp

; ---------------------------------------------------------------------------
                cmp     byte ptr ds:4673h, 0
                jz      short locret_16B8F
                cmp     byte ptr ds:4674h, 1

locret_16B8F:                           ; ...
                retn
; ---------------------------------------------------------------------------
                mov     dx, 46CDh
                jmp     short sub_16B98
; ---------------------------------------------------------------------------
                mov     dx, 46D6h

; =============== S U B R O U T I N E =======================================


sub_16B98       proc near               ; ...
                push    bx
                push    dx
                mov     dl, 1
                mov     ax, 3307h
                int     21h             ; DOS - 7+ SET/CLEAR DOS FLAG (DL = 0 clear, 1 - set)
                pop     dx
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short loc_16BAE
                xchg    ax, bx
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle

loc_16BAE:                              ; ...
                sbb     ax, ax
                pop     bx
                retn
sub_16B98       endp

; ---------------------------------------------------------------------------

loc_16BB2:                              ; ...
                push    ds
                mov     ah, 2Fh
                int     21h             ; DOS - GET DISK TRANSFER AREA ADDRESS
                                        ; Return: ES:BX -> DTA
                push    es
                push    bx
                mov     ds, word ptr ds:15ACh
                sub     dx, dx
                mov     ah, 1Ah
                int     21h             ; DOS - SET DISK TRANSFER AREA ADDRESS
                                        ; DS:DX -> disk transfer buffer
                push    ds
                pop     es
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     di, 47DBh
                mov     si, 4796h
                call    sub_16E15
                jz      short loc_16BDF
                mov     di, 47E2h
                mov     si, 47C5h
                call    sub_16E15
                jnz     loc_16C76

loc_16BDF:                              ; ...
                mov     bx, es:22h
                mov     si, 47BAh
                call    sub_16E15
                jz      short loc_16BF6
                mov     si, 47D0h
                call    sub_16E15
                jnz     loc_16C76

loc_16BF6:                              ; ...
                mov     cx, es:22h
                jcxz    short loc_16C64
                sub     dx, dx
                mov     es, dx
                assume es:BIOSDATA
                mov     es:word_51A, bx
                mov     es:word_53A, cx
                mov     dx, di
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short near ptr loc_16C81+1
                mov     bx, ax
                mov     ax, word_12F6D
                sub     ax, 60h ; '`'
                mov     ds, ax
                assume ds:nothing
                sub     dx, dx
                mov     cx, 600h
                mov     ah, 3Fh
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_16C64
                cmp     ax, cx
                jnz     short loc_16C64
                cmp     byte ptr ds:0, 0E9h
                jz      short loc_16C3B
                cmp     byte ptr ds:0, 0EBh
                jnz     short loc_16C64

loc_16C3B:                              ; ...
                mov     ax, ds:3
                xchg    al, ah
                cmp     ax, 500h
                jb      short loc_16C64
                cmp     ax, 800h
                jnb     short loc_16C64
                mov     cs:word_1620C, ds
                mov     cs:word_12F6D, ds
                or      cs:byte_15145, 1
                push    bx
                mov     bx, 486Fh
                call    sub_16C8A
                pop     bx
                jmp     short near ptr loc_16C6F+1
; ---------------------------------------------------------------------------

loc_16C64:                              ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    print_x
                dec     ax
                sub     al, 66h ; 'f'
                int     3               ; Trap to Debugger
                dec     cx

loc_16C6F:                              ; ...
                xor     byte ptr [si-32C2h], 21h
                jmp     short near ptr loc_16C81+1
; ---------------------------------------------------------------------------

loc_16C76:                              ; ...
                push    cs
                pop     ds
                call    print_x
                inc     di
                sub     al, 54h ; 'T'
                int     3               ; Trap to Debugger
                dec     cx

loc_16C81:                              ; ...
                sbb     byte ptr [bp+si+1Fh], 0B4h
                sbb     cl, ch
                and     [bx], bx
                retn

; =============== S U B R O U T I N E =======================================


sub_16C8A       proc near               ; ...
                cld
                push    cs
                pop     ds
                push    cs
                pop     es
                assume es:SYSINIT
                test    byte_15140, 80h
                jz      short loc_16C9D
                cmp     bx, 486Fh
                jnz     short loc_16C9D
                retn
; ---------------------------------------------------------------------------

loc_16C9D:                              ; ...
                sub     sp, 4
                mov     bp, sp
                mov     ax, [bx]
                mov     dx, [bx+2]
                add     bx, 4
                mov     [bp+0], ax
                mov     [bp+2], dx
                cmp     word_1620C, 0
                jz      short loc_16CBD
                mov     [bp+0], dx
                mov     [bp+2], ax

loc_16CBD:                              ; ...
                mov     si, [bx]
                or      si, si
                jz      loc_16D88
                lodsb
                cbw
                xchg    ax, cx
                mov     di, 47F9h
                mov     dx, di
                rep movsb
                mov     si, [bp+0]
                mov     cl, 3
                rep movsb
                mov     al, 0
                stosb
                push    dx
                push    di
                mov     di, dx
                call    sub_16DB1
                mov     dx, di
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                pop     di
                pop     dx
                jb      loc_16D83
                test    cl, 2
                jz      short loc_16D04
                or      ax, 0FFFFh
                cmp     word ptr [bx], 476Ch
                jz      short loc_16D04
                cmp     word ptr [bx], 4774h
                jz      short loc_16D04
                call    sub_16D8C

loc_16D04:                              ; ...
                push    ax
                push    cx
                push    dx
                push    di
                push    bx
                mov     dx, [bx]
                inc     dx
                mov     si, [bp+2]
                sub     di, 4
                mov     cx, 3
                rep movsb
                mov     al, 0
                stosb
                mov     di, 47F9h
                call    sub_16DB1
                mov     ah, 56h
                int     21h             ; DOS - 2+ - RENAME A FILE
                                        ; DS:DX -> ASCIZ old name (drive and path allowed, no wildcards)
                                        ; ES:DI -> ASCIZ new name
                jnb     short loc_16D53
                cmp     ax, 2
                jnz     short loc_16D44
                mov     dx, di
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jnb     short loc_16D53
                mov     cx, 2
                mov     ah, 3Ch
                int     21h             ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)
                                        ; CX = attributes for file
                                        ; DS:DX -> ASCIZ filename (may include drive and path)
                jb      short loc_16D53
                xchg    ax, bx
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                jmp     short loc_16D53
; ---------------------------------------------------------------------------

loc_16D44:                              ; ...
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, off_1B79E
                call    print
                mov     bx, dx
                mov     byte ptr [bx], 24h ; '$'

loc_16D53:                              ; ...
                pop     bx
                pop     di
                pop     dx
                mov     si, [bp+0]
                sub     di, 4
                mov     cx, 3
                rep movsb
                mov     al, 0
                stosb
                mov     di, 47F9h
                call    sub_16DB1
                mov     dx, di
                pop     ax
                pop     cx
                test    al, 2
                jz      short loc_16D7C
                test    cx, cx
                jnz     short loc_16D7C
                mov     ah, 41h
                int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)
                jmp     short loc_16D83
; ---------------------------------------------------------------------------

loc_16D7C:                              ; ...
                mov     di, [bx]
                inc     di
                mov     ah, 56h
                int     21h             ; DOS - 2+ - RENAME A FILE
                                        ; DS:DX -> ASCIZ old name (drive and path allowed, no wildcards)
                                        ; ES:DI -> ASCIZ new name

loc_16D83:                              ; ...
                inc     bx
                inc     bx
                jmp     loc_16CBD
; ---------------------------------------------------------------------------

loc_16D88:                              ; ...
                add     sp, 4
                retn
sub_16C8A       endp


; =============== S U B R O U T I N E =======================================


sub_16D8C       proc near               ; ...
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short locret_16DB0
                push    bx
                push    cx
                push    dx
                xchg    ax, bx
                sub     cx, cx
                sub     dx, dx
                mov     ax, 4202h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from end of file
                add     dx, 0FFFFh
                sbb     dx, dx
                or      ax, dx
                xchg    ax, cx
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                xchg    ax, cx
                pop     dx
                pop     cx
                pop     bx

locret_16DB0:                           ; ...
                retn
sub_16D8C       endp


; =============== S U B R O U T I N E =======================================


sub_16DB1       proc near               ; ...
                mov     ch, 0
                mov     ax, di
                mov     si, 488Dh
                mov     cl, [si]
                inc     si
                repe cmpsb
                jnz     short loc_16DC2
                mov     ax, 4896h

loc_16DC2:                              ; ...
                xchg    ax, di
                retn
sub_16DB1       endp


; =============== S U B R O U T I N E =======================================


sub_16DC4       proc near               ; ...

; FUNCTION CHUNK AT 0700 SIZE 00000003 BYTES

                cmp     cs:word_1620C, 0
                jz      short locret_16E14
                cli
                mov     bp, 648h
                push    cs
                call    loc_1AE23
                mov     ds, cs:word_1620C
                assume ds:nothing
                sub     si, si
                mov     ax, 70h ; 'p'
                mov     es, ax
                assume es:nothing
                sub     di, di
                mov     cx, 300h
                cld
                rep movsw
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     si, 4708h
                mov     cx, 31h ; '1'
                sub     ax, ax
                mov     es, ax
                assume es:BIOSDATA
                mov     di, 7C00h
                rep movsw
                mov     bx, word_161E2
                mov     ax, word_161E4
                mov     ch, byte_161EB
                mov     dl, byte_161EA
                lds     si, dword_161E6
                assume ds:nothing
                jmp     large far ptr 70h:0
; ---------------------------------------------------------------------------

locret_16E14:                           ; ...
                retn
sub_16DC4       endp


; =============== S U B R O U T I N E =======================================


sub_16E15       proc near               ; ...
                push    es
                push    di
                push    ds
                pop     es
                assume es:nothing
                mov     di, 4796h
                mov     cx, 0Bh
                rep movsb
                pop     di
                pop     es
                mov     dx, 478Eh
                mov     ah, 11h
                int     21h             ; DOS - SEARCH FIRST USING FCB
                                        ; DS:DX -> FCB
                test    al, al
                retn
sub_16E15       endp


; =============== S U B R O U T I N E =======================================


sub_16E2D       proc near               ; ...
                cld
                push    cs
                pop     ds
                assume ds:SYSINIT
                push    cs
                pop     es
                assume es:SYSINIT
                mov     bx, 46EDh

loc_16E35:                              ; ...
                call    sub_16E46
                jb      short loc_16E3F
                add     bx, 6
                jmp     short loc_16E35
; ---------------------------------------------------------------------------

loc_16E3F:                              ; ...
                call    sub_16A84
                call    sub_16B21
                retn
sub_16E2D       endp


; =============== S U B R O U T I N E =======================================


sub_16E46       proc near               ; ...
                cld
                pusha
                push    es
                push    cs
                pop     ds
                push    cs
                pop     es
                mov     cx, [bx]
                stc
                jcxz    short loc_16EB9
                cmp     byte_12F5A, 0
                jz      short loc_16EB9
                test    byte_1513F, 20h
                jnz     short loc_16EB9
                inc     byte_16187
                jnz     short loc_16EB4
                call    cx
                jz      short loc_16EB4
                mov     di, 451Eh
                add     di, word_15FEC
                push    di
                mov     si, [bx+2]
                mov     byte_1612E, 0
                cmp     si, 46A2h
                jnz     short loc_16E84
                inc     byte_1612E

loc_16E84:                              ; ...
                mov     dx, [bx+4]
                movzx   cx, dl
                rep movsb
                mov     cl, 55h ; 'U'
                test    dh, 80h
                jz      short loc_16E9D
                mov     cl, 44h ; 'D'
                and     dh, 7Fh
                mov     al, 0Ah
                stosb
                jmp     short loc_16EA5
; ---------------------------------------------------------------------------

loc_16E9D:                              ; ...
                mov     byte ptr [di-1], 20h ; ' '
                mov     ax, 0A0Dh
                stosw

loc_16EA5:                              ; ...
                xchg    ax, cx
                mov     si, 451Bh
                mov     cx, di
                sub     cx, si
                call    sub_16EBC
                pop     di
                mov     al, 0
                stosb

loc_16EB4:                              ; ...
                dec     byte_16187
                clc

loc_16EB9:                              ; ...
                pop     es
                assume es:nothing
                popa
                retn
sub_16E46       endp


; =============== S U B R O U T I N E =======================================


sub_16EBC       proc near               ; ...
                push    bx
                mov     [si], al
                mov     word ptr [si+1], 0
                push    CONFBOT
                push    word_13020
                push    word_1301C
                push    word_12F79
                push    word_17B45
                mov     word_17B45, 1
                mov     CONFBOT, es
                mov     word_13020, si
                mov     word_1301C, cx
                xchg    dh, byte_15144
                mov     dl, multi_pass_id
                push    dx
                mov     multi_pass_id, 2
                push    ds
                push    es
                call    loc_189BE
                pop     es
                pop     ds
                assume ds:nothing
                pop     dx
                mov     ds:1517h, dl
                mov     ds:36C4h, dh
                pop     word ptr ds:60C5h
                pop     word ptr ds:14F9h
                pop     word ptr ds:159Ch
                pop     word ptr ds:15A0h
                pop     word ptr ds:14EBh
                pop     bx
                retn
sub_16EBC       endp


; =============== S U B R O U T I N E =======================================


sub_16F1E       proc near               ; ...
                cld
                push    cs
                pop     ds
                assume ds:SYSINIT
                push    cs
                pop     es
                assume es:SYSINIT
                test    byte_1513F, 20h
                jnz     locret_1703E
                mov     si, 451Eh
                mov     cx, word_15FEC
                mov     di, 4B39h
                mov     dx, 4Eh ; 'N'
                call    sub_1725B
                mov     di, 48CFh
                mov     bx, 491Eh
                cmp     byte_1634C, 0
                jz      short loc_16F4F
                mov     di, 499Dh
                mov     bx, 49ECh

loc_16F4F:                              ; ...
                call    sub_1725B
                mov     dx, 7Eh ; '~'
                mov     di, bx
                call    sub_1725B
                jb      short loc_16F5F
                add     [di-1], cl

loc_16F5F:                              ; ...
                sub     ax, ax
                mov     bx, 491Eh
                mov     di, bx
                test    byte_15145, 4
                jz      short loc_16F96
                cmp     byte_15F23, al
                jnz     short loc_16F96
                cmp     byte_15F26, al
                jnz     short loc_16F96
                push    di
                mov     al, [di-1]
                add     di, ax
                mov     cx, 0Ch
                add     ax, cx
                cmp     ax, 7Fh
                jnb     short loc_16F95
                add     [bx-1], cl
                inc     cx
                mov     si, 4640h
                rep movsb
                pop     di
                jmp     short loc_16FDF
; ---------------------------------------------------------------------------

loc_16F95:                              ; ...
                pop     di

loc_16F96:                              ; ...
                test    byte_15140, 20h
                jz      short loc_16FDF
                test    byte_15145, 1
                jnz     short loc_16FDF
                mov     cx, 0Fh
                mov     si, 464Dh
                mov     ax, 3D00h
                mov     dx, 46DFh
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jnb     short loc_16FBE
                mov     ax, 0FFFFh
                mov     cx, 3
                mov     byte ptr [si+3], 0

loc_16FBE:                              ; ...
                inc     ax
                jz      short loc_16FCB
                dec     ax
                push    bx
                mov     bx, ax
                mov     ax, 3E00h
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                pop     bx

loc_16FCB:                              ; ...
                sub     ax, ax
                mov     al, [di-1]
                add     di, ax
                add     ax, cx
                cmp     ax, 7Fh
                jnb     short loc_16FDF
                add     [bx-1], cl
                inc     cx
                rep movsb

loc_16FDF:                              ; ...
                mov     es, BCodeSeg
                assume es:nothing
                mov     si, 48CFh
                mov     di, 1F88h
                mov     cx, 4Eh ; 'N'
                rep movsb
                mov     si, 491Dh
                mov     di, 1FD6h
                mov     cx, 80h
                rep movsb
                mov     al, 6
                cmp     byte_15F23, 0
                jnz     short loc_1700B
                cmp     byte_15F26, 0
                jz      short loc_1700B
                and     al, 0FBh

loc_1700B:                              ; ...
                test    byte_15145, al
                jnz     short locret_1703E
                test    byte_15145, 1
                jnz     short loc_1703B
                mov     ax, 3D00h
                mov     dx, 46DFh
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short loc_1703B
                xchg    ax, bx
                sub     cx, cx
                sub     dx, dx
                mov     ax, 4202h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from end of file
                or      ax, dx
                xchg    ax, cx
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                jcxz    short loc_1703B
                inc     byte_16688
                jmp     short locret_1703E
; ---------------------------------------------------------------------------

loc_1703B:                              ; ...
                call    sub_1703F

locret_1703E:                           ; ...
                retn
sub_16F1E       endp


; =============== S U B R O U T I N E =======================================


sub_1703F       proc near               ; ...
                test    byte_1513F, 20h
                jnz     short locret_17087
                test    byte_15140, 20h
                jnz     short locret_17087
                test    byte_1513F, 4
                jz      short loc_1705A
                mov     ah, 0Eh
                mov     dl, 2
                int     21h             ; DOS - SELECT DISK
                                        ; DL = new default drive number (0 = A, 1 = B, etc.)
                                        ; Return: AL = number of logical drives

loc_1705A:                              ; ...
                cld
                push    cs
                pop     es
                assume es:SYSINIT
                mov     cx, 0CEh
                mov     si, 499Dh
                mov     di, 4A6Bh
                rep movsb
                mov     cx, 0CEh
                mov     si, 48CFh
                mov     di, 499Dh
                rep movsb
                mov     cx, 0CEh
                mov     si, 4B39h
                mov     di, 48CFh
                rep movsb
                mov     byte_1634C, 1
                inc     byte_16687

locret_17087:                           ; ...
                retn
sub_1703F       endp


; =============== S U B R O U T I N E =======================================


sub_17088       proc near               ; ...
                cld
                push    ds
                pop     es
                test    byte_1513F, 20h
                jnz     locret_1720A
                cmp     byte_15F23, 0
                jnz     locret_1720A
                sub     dx, dx
                mov     si, 460Fh
                call    sub_14587
                test    dx, dx
                jnz     short loc_1710E
                push    ds
                mov     ds, word_13037
                assume ds:nothing
                mov     dx, 80h
                mov     ah, 1Ah
                int     21h             ; DOS - SET DISK TRANSFER AREA ADDRESS
                                        ; DS:DX -> disk transfer buffer
                pop     ds
                mov     di, 4582h
                mov     cx, 4
                rep movsb
                mov     dx, di
                mov     si, 44CBh
                mov     cx, ds:4519h
                rep movsb
                mov     bx, di
                mov     si, 4618h
                mov     cx, 5
                rep movsb
                mov     ax, 4E00h
                stosb
                dec     di
                mov     cx, 10h
                int     21h             ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
                                        ; CX = search attributes
                                        ; DS:DX -> ASCIZ filespec
                                        ; (drive, path, and wildcards allowed)
                jb      short loc_170EE
                push    ds
                mov     ds, word ptr ds:15B7h
                test    byte ptr ds:95h, 10h
                pop     ds
                jz      short loc_170F4
                jmp     short loc_17103
; ---------------------------------------------------------------------------

loc_170EE:                              ; ...
                mov     ah, 39h
                int     21h             ; DOS - 2+ - CREATE A SUBDIRECTORY (MKDIR)
                                        ; DS:DX -> ASCIZ pathname (may include drive)
                jnb     short loc_17103

loc_170F4:                              ; ...
                mov     di, bx
                cmp     word ptr ds:4519h, 2
                ja      short loc_17100
                mov     al, 5Ch ; '\'
                stosb

loc_17100:                              ; ...
                sub     al, al
                stosb

loc_17103:                              ; ...
                mov     dx, 1
                mov     si, 4582h
                call    sub_14587
                jmp     short loc_1711E
; ---------------------------------------------------------------------------

loc_1710E:                              ; ...
                push    ds
                mov     ds, word ptr ds:60C2h
                mov     si, dx
                mov     di, 4586h
                mov     cx, 40h ; '@'
                rep movsb
                pop     ds

loc_1711E:                              ; ...
                sub     dx, dx
                mov     si, 4613h
                call    sub_14587
                test    dx, dx
                jnz     short loc_1713B
                mov     di, 4581h
                mov     cx, 5
                rep movsb
                mov     dx, 1
                mov     si, 4581h
                call    sub_14587

loc_1713B:                              ; ...
                sub     dx, dx
                mov     si, 461Dh
                call    sub_14587
                test    dx, dx
                jnz     short loc_1714B
                inc     dx
                call    sub_14587

loc_1714B:                              ; ...
                sub     dx, dx
                mov     si, 4629h
                call    sub_14587
                test    dx, dx
                jnz     short loc_17172
                mov     di, 4581h
                mov     cx, 0Bh
                rep movsb
                mov     si, 451Eh
                mov     cx, ds:456Ch
                rep movsb
                mov     al, 0
                stosb
                inc     dx
                mov     si, 4581h
                call    sub_14587

loc_17172:                              ; ...
                sub     dx, dx
                mov     si, 463Bh
                call    sub_14587
                test    dx, dx
                jnz     short loc_171DD
                mov     di, 4581h
                mov     cx, 5
                rep movsb
                mov     al, ds:44CBh
                cmp     al, ds:451Eh
                jz      short loc_171AA
                cmp     byte ptr ds:451Eh, 43h ; 'C'
                jb      short loc_171AA
                mov     si, 451Eh
                mov     cx, ds:456Ch
                cmp     cx, 2
                rep movsb
                ja      short loc_171A7
                mov     al, 5Ch ; '\'
                stosb

loc_171A7:                              ; ...
                mov     al, 3Bh ; ';'
                stosb

loc_171AA:                              ; ...
                mov     si, 44CBh
                mov     cx, ds:4519h
                cmp     cx, 2
                rep movsb
                ja      short loc_171BD
                mov     al, 5Ch ; '\'
                stosb
                jmp     short loc_171D1
; ---------------------------------------------------------------------------

loc_171BD:                              ; ...
                mov     al, 3Bh ; ';'
                stosb
                mov     si, 44CBh
                mov     cx, ds:4519h
                rep movsb
                mov     si, 4571h
                mov     cx, 8
                rep movsb

loc_171D1:                              ; ...
                sub     al, al
                stosb
                mov     dx, 1
                mov     si, 4581h
                call    sub_14587

loc_171DD:                              ; ...
                cmp     byte ptr ds:4C07h, 0
                jz      short locret_1720A
                sub     dx, dx
                mov     si, 465Dh
                call    sub_14587
                test    dx, dx
                jnz     short locret_1720A
                mov     di, 4581h
                mov     cx, 8
                rep movsb
                mov     si, 499Dh

loc_171FB:                              ; ...
                lodsb
                stosb
                or      al, al
                jnz     short loc_171FB
                mov     dx, 1
                mov     si, 4581h
                call    sub_14587

locret_1720A:                           ; ...
                retn
sub_17088       endp


; =============== S U B R O U T I N E =======================================


sub_1720B       proc near               ; ...
                cmp     byte ptr ds:4C07h, 0
                jnz     short locret_1723D
                test    byte ptr ds:36C5h, 4
                jnz     short locret_1723D
                test    byte ptr ds:36C5h, 21h
                jz      short locret_1723D
                mov     cx, 3
                mov     si, 457Bh

loc_17226:                              ; ...
                mov     al, ds:48CBh
                test    al, al
                jz      short loc_1722F
                mov     [si], al

loc_1722F:                              ; ...
                push    ds
                pop     es
                assume es:nothing
                inc     di
                mov     dx, 7Eh ; '~'
                call    sub_1725B
                dec     di
                jb      short locret_1723D
                add     [di], cl

locret_1723D:                           ; ...
                retn
sub_1720B       endp


; =============== S U B R O U T I N E =======================================


sub_1723E       proc near               ; ...
                cmp     byte ptr ds:4C07h, 0
                jnz     short locret_1723D
                test    byte ptr ds:36C5h, 8
                jz      short locret_1723D
                test    byte ptr ds:36C5h, 50h
                jnz     short locret_1723D
                mov     cx, 3
                mov     si, 457Eh
                jmp     short loc_17226
sub_1723E       endp


; =============== S U B R O U T I N E =======================================


sub_1725B       proc near               ; ...
                pusha
                mov     bx, cx
                xor     al, al
                mov     cx, dx
                repne scasb
                cmp     cx, bx
                jb      short loc_1727E
                dec     di
                mov     si, di
                add     di, bx
                neg     cx
                add     cx, dx
                std
                rep movsb
                cld
                pop     di
                pop     si
                push    si
                push    di
                mov     cx, bx
                rep movsb
                clc

loc_1727E:                              ; ...
                popa
                retn
sub_1725B       endp


; =============== S U B R O U T I N E =======================================


sub_17280       proc near               ; ...
                cld
                push    ds
                pop     es
                test    byte ptr ds:36C5h, 3
                jnz     locret_17360
                test    word ptr ds:36C0h, 120h
                jnz     locret_17360
                cmp     byte ptr ds:4579h, 0Dh
                jnz     short loc_172BA

loc_1729D:                              ; ...
                mov     di, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     di, ds:9D18h
                mov     byte ptr ds:4570h, 6
                cmp     byte ptr ds:44A4h, 30h ; '0'
                jnz     loc_1735D
                sub     byte ptr ds:4570h, 1
                jmp     loc_1735D
; ---------------------------------------------------------------------------

loc_172BA:                              ; ...
                cmp     byte ptr ds:4579h, 1
                jnz     short loc_17327
                push    es
                push    di
                push    cx
                push    ds
                mov     dl, ds:456Eh
                mov     ds, word ptr ds:150Ah
                cmp     dl, ds:1ECAh
                jz      short loc_1730B
                pop     es
                push    es
                mov     di, 4C17h
                mov     cx, 3Fh ; '?'
                sub     dl, 40h ; '@'
                mov     ax, 7302h
                int     21h             ; DOS -
                pop     ds
                pop     cx
                pop     di
                pop     es
                jnb     short loc_17303
                mov     byte ptr ds:4570h, 7
                cmp     byte ptr ds:44A4h, 30h ; '0'
                jnz     short loc_172FA
                sub     byte ptr ds:4570h, 1

loc_172FA:                              ; ...
                mov     di, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     di, ds:9D1Ah
                jmp     short loc_1735D
; ---------------------------------------------------------------------------

loc_17303:                              ; ...
                push    es
                push    di
                push    cx
                push    ds
                mov     ds, word ptr ds:150Ah

loc_1730B:                              ; ...
                mov     dl, ds:1ECAh
                pop     es
                push    es
                mov     di, 4C17h
                mov     cx, 3Fh ; '?'
                sub     dl, 40h ; '@'
                mov     ax, 7302h
                int     21h             ; DOS -
                pop     ds
                pop     cx
                pop     di
                pop     es
                jnb     loc_1729D

loc_17327:                              ; ...
                mov     si, 4665h
                mov     di, 4581h
                mov     cx, 0Eh
                rep movsb
                mov     si, 44CBh
                mov     cx, ds:4519h
                mov     di, 4581h
                push    di
                mov     dx, 4Eh ; 'N'
                call    sub_1725B
                pop     dx
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jb      short locret_17360
                mov     ah, 41h
                int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)
                cmp     byte ptr ds:4579h, 2
                jz      short locret_17360
                mov     di, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     di, ds:9D1Ch

loc_1735D:                              ; ...
                call    sub_17361

locret_17360:                           ; ...
                retn
sub_17280       endp


; =============== S U B R O U T I N E =======================================


sub_17361       proc near               ; ...
                mov     bx, 2
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D2Ch
                mov     [bx+36EBh], dx
                add     bx, 2
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D2Eh
                mov     [bx+36EBh], dx
                add     bx, 2
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D30h
                mov     [bx+36EBh], dx
                cmp     byte ptr ds:44A4h, 30h ; '0'
                jz      short loc_173A0
                add     bx, 2
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D32h
                mov     [bx+36EBh], dx

loc_173A0:                              ; ...
                add     bx, 2
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D34h
                mov     [bx+36EBh], dx
                add     bx, 2
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D36h
                mov     [bx+36EBh], dx
                add     bx, 2
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D38h
                mov     [bx+36EBh], dx
                shr     bx, 1
                mov     ds:36C8h, bl
                mov     al, ds:449Dh
                cmp     al, bl
                jbe     short loc_173D9
                mov     al, bl

loc_173D9:                              ; ...
                mov     ds:36C7h, al
                mov     ax, ds:449Eh
                test    di, di
                jnz     short loc_173EF
                cmp     byte ptr ds:449Ch, 0
                jnz     short loc_1740F
                mov     ax, 0FFh
                jmp     short loc_1740F
; ---------------------------------------------------------------------------

loc_173EF:                              ; ...
                mov     dl, ds:4570h
                mov     ds:36C7h, dl
                cmp     dl, 3
                jnz     short loc_1740F
                cmp     byte ptr ds:44A3h, 0
                jz      short loc_1740F
                cmp     byte ptr ds:44A4h, 30h ; '0'
                jz      short loc_1740F
                mov     byte ptr ds:36C7h, 4

loc_1740F:                              ; ...
                mov     ds:36CBh, ax
                push    cs
                pop     es
                assume es:SYSINIT
                call    sub_14724
                sub     cx, cx
                sub     dx, dx
                cmp     bx, 0FFFFh
                jz      short loc_17495
                cmp     bx, 4
                jb      short loc_1742F
                cmp     byte ptr ds:44A4h, 30h ; '0'
                jnz     short loc_1742F
                add     bx, 1

loc_1742F:                              ; ...
                cmp     bx, 1
                jz      short loc_174B3
                cmp     bx, 2
                jnz     short loc_17446
                push    ds
                mov     ds, word ptr ds:150Ah
                mov     byte ptr ds:2B7Fh, 0FFh
                pop     ds
                jmp     short loc_174B3
; ---------------------------------------------------------------------------

loc_17446:                              ; ...
                cmp     bx, 3
                jnz     short loc_17459
                or      byte ptr ds:36C5h, 1
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CFCh
                jmp     short loc_174B3
; ---------------------------------------------------------------------------

loc_17459:                              ; ...
                cmp     bx, 4
                jnz     short loc_1746C
                or      byte ptr ds:36C5h, 5
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CFEh
                jmp     short loc_174B3
; ---------------------------------------------------------------------------

loc_1746C:                              ; ...
                cmp     bx, 5
                jnz     short loc_17484
                or      byte ptr ds:36C5h, 8
                and     byte ptr ds:36C0h, 0EFh
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D02h
                jmp     short loc_174B4
; ---------------------------------------------------------------------------

loc_17484:                              ; ...
                cmp     bx, 6
                jnz     short loc_17490
                or      byte ptr ds:36C0h, 61h
                jmp     short loc_174B4
; ---------------------------------------------------------------------------

loc_17490:                              ; ...
                or      byte ptr ds:36C5h, 3

loc_17495:                              ; ...
                test    byte ptr ds:36C5h, 4
                jz      short loc_174A5
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CFEh
                jmp     short loc_174B3
; ---------------------------------------------------------------------------

loc_174A5:                              ; ...
                test    byte ptr ds:36C5h, 3
                jz      short loc_174B3
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9CFCh

loc_174B3:                              ; ...
                inc     cx

loc_174B4:                              ; ...
                jcxz    short locret_17511
                pushf
                pusha
                push    cx
                push    ds
                mov     ax, 40h ; '@'
                mov     ds, ax
                assume ds:nothing
                mov     dx, ds:4Ah
                mov     dh, ds:84h
                pop     ds
                assume ds:nothing
                or      dh, dh
                jnz     short loc_174CE
                mov     dh, 18h

loc_174CE:                              ; ...
                dec     dl
                push    dx
                mov     ah, 0Bh
                xor     bx, bx
                int     10h             ; - VIDEO - SET COLOR PALETTE
                                        ; BH = 00h, BL = border color
                                        ; BH = 01h, BL = palette (0-3)
                pop     dx
                xor     cx, cx
                mov     ax, 600h
                mov     bx, 700h
                int     10h             ; - VIDEO - SCROLL PAGE UP
                                        ; AL = number of lines to scroll window (0 = blank whole window)
                                        ; BH = attributes to be used on blanked lines
                                        ; CH,CL = row,column of upper left corner of window to scroll
                                        ; DH,DL = row,column of lower right corner of window
                mov     ah, 0Fh
                int     10h             ; - VIDEO - GET CURRENT VIDEO MODE
                                        ; Return: AH = number of columns on screen
                                        ; AL = current video mode
                                        ; BH = current active display page
                mov     ah, 2
                xor     dx, dx
                int     10h             ; - VIDEO - SET CURSOR POSITION
                                        ; DH,DL = row, column (0,0 = upper left)
                                        ; BH = page number
                mov     ah, 2
                int     16h             ; KEYBOARD - GET SHIFT STATUS
                                        ; AL = shift status bits

loc_174F0:                              ; ...
                mov     ah, 1
                int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                        ; Return: ZF clear if character in buffer
                                        ; AH = scan code, AL = character
                                        ; ZF set if no character in buffer
                jz      short loc_174FC
                mov     ah, 0
                int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                                        ; Return: AH = scan code, AL = character
                jmp     short loc_174F0
; ---------------------------------------------------------------------------

loc_174FC:                              ; ...
                pop     dx
                mov     dx, cx
                call    sub_1AA94
                push    ds
                mov     ax, 70h ; 'p'
                mov     ds, ax
                assume ds:nothing
                mov     word ptr ds:448h, 0
                pop     ds
                assume ds:nothing
                popa
                popf

locret_17511:                           ; ...
                retn
sub_17361       endp

; ---------------------------------------------------------------------------
                db 106h dup(0)
                dw 5B9Ah
aPaths          db '[PATHS]'
                db    0
                dw 5E35h
aOptions        db '[OPTIONS]'
                db    0
                dw 5E3Ch
                db    0
                dw 5E43h
aWindir         db 'WINDIR'
                db    0
                dw 5D7Ch
aWinbootdir     db 'WINBOOTDIR'
                db    0
                dw 5D94h
aHostwinbootdrv db 'HOSTWINBOOTDRV'
                db    0
                dw 5DA3h
aUninstalldir   db 'UNINSTALLDIR'
                db    0
                dw 5DB2h
                db    0
                dw 5E2Ch
aLogo           db 'LOGO'
                db    2
                db    1
                db    0
aDblspace       db 'DBLSPACE'
                db    2
                db    2
                db    0
aDrvspace       db 'DRVSPACE'
                db    2
                db    4
                db    0
aBootkeys       db 'BOOTKEYS'
                db    2
                db    8
                db    0
aBootdelay      db 'BOOTDELAY'
                db    0
                dw 5DBAh
aBootwin        db 'BOOTWIN'
                db    2
                db  10h
                db    0
aBootgui        db 'BOOTGUI'
                db    2
                db  20h
                db    0
aBootwarn       db 'BOOTWARN'
                db    2
                db    0
                db    1
aBootmulti      db 'BOOTMULTI'
                db    2
                db  80h
                db    0
aDoublebuffer   db 'DOUBLEBUFFER'
                db    1
                dw 44A2h
aBootmenudefault db 'BOOTMENUDEFAULT'
                db    1
                dw 449Dh
aBootmenudelay  db 'BOOTMENUDELAY'
                db    1
                dw 449Eh
aBootmenu       db 'BOOTMENU'
                db    1
                dw 449Ch
aBootsafe       db 'BOOTSAFE'
                db    1
                db 0A0h
                db  44h ; D
aNetwork        db 'NETWORK'
                db    1
                dw 44A1h
aLoadtop        db 'LOADTOP'
                db    2
                db  40h ; @
                db    0
aBootconfig     db 'BOOTCONFIG'
                db    0
                dw 5E1Eh
aDisablelog     db 'DISABLELOG'
                db    0
                dw 5E0Ah
aSystemreg      db 'SYSTEMREG'
                db    2
                db    0
                db    2
aAutoscan       db 'AUTOSCAN',0
                dw 5DD1h
aWinver         db 'WINVER',0
                dw 5E04h
aBootperf       db 'BOOTPERF',0
                dw 5DBBh
                db    0
                dw 5E2Ch

; =============== S U B R O U T I N E =======================================


sub_1776E       proc near               ; ...
                push    ds
                pop     es
                assume es:nothing
                mov     word ptr ds:98D2h, ds
                mov     dx, 48A9h
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short loc_17785
                and     byte ptr ds:36C0h, 7Fh
                jmp     short loc_177BE
; ---------------------------------------------------------------------------

loc_17785:                              ; ...
                mov     byte ptr ds:48A8h, 0
                mov     dx, 489Eh
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jnb     short loc_177BE
                mov     byte ptr ds:489Dh, 0
                mov     dx, 4775h
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jnb     short loc_177BE
                mov     dx, 477Fh
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      loc_178EC
                push    ds
                lds     si, ds:14BFh
                mov     byte ptr [si+43h], 3
                pop     ds
                or      byte ptr ds:36BFh, 4

loc_177BE:                              ; ...
                mov     ds:5A92h, ax
                push    es
                mov     si, dx
                cmp     si, 489Eh
                jnz     short loc_177CD
                mov     si, 4775h

loc_177CD:                              ; ...
                mov     di, 2059h
                mov     es, word ptr ds:150Ah
                mov     cx, 0Dh
                rep movsb
                mov     ax, 3305h
                int     21h             ; DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)
                add     dl, 40h ; '@'
                mov     es:2056h, dl
                pop     es

loc_177E7:                              ; ...
                call    sub_179F5
                jb      loc_178E4
                and     byte ptr ds:36BFh, 0FEh
                mov     di, ds:5B98h

loc_177F7:                              ; ...
                call    sub_17A78
                jmp     short loc_177E7
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     loc_178C3
                mov     cx, 40h ; '@'
                mov     di, 44CBh

loc_17809:                              ; ...
                lodsb
                stosb
                cmp     al, 0Dh
                loopne  loc_17809
                mov     byte ptr [di-1], 0
                retn
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     loc_178C3
                mov     cx, 40h ; '@'
                mov     di, 451Eh
                jmp     short loc_17809
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     loc_178C3
                mov     cx, 2
                mov     di, 456Eh
                jmp     short loc_17809
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     loc_178C3
                retn
; ---------------------------------------------------------------------------
                retn
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     loc_178C3
                call    sub_17AF2
                jb      short loc_178C3
                or      al, al
                jz      short locret_17850
                mov     byte ptr ds:4C16h, 1

locret_17850:                           ; ...
                retn
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     short loc_178C3
                call    sub_17AF2
                jb      short loc_178C3
                cmp     ax, 2
                ja      short loc_178C3
                push    es
                push    bx
                push    ax
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                pop     ax
                and     byte ptr es:[bx+60h], 7Dh
                or      al, al
                jnz     short loc_17878
                or      byte ptr es:[bx+60h], 80h
                jmp     short loc_17881
; ---------------------------------------------------------------------------

loc_17878:                              ; ...
                dec     al
                jz      short loc_17881
                or      byte ptr es:[bx+60h], 2

loc_17881:                              ; ...
                pop     bx
                pop     es
                retn
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     short loc_178C3
                retn
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     short loc_178C3
                call    sub_17AF2
                jb      short loc_178C3
                push    ds
                mov     ds, word ptr ds:150Ah
                mov     ds:2B7Fh, al
                pop     ds
                retn
; ---------------------------------------------------------------------------
                lodsb
                cmp     al, 3Dh ; '='
                jnz     short loc_178C3
                mov     cx, 20h ; ' '
                mov     di, 44ABh
                jmp     loc_17809
; ---------------------------------------------------------------------------
                mov     di, 5B9Ah
                add     sp, 2
                jmp     loc_177F7
; ---------------------------------------------------------------------------
                mov     word ptr ds:5B98h, 5BB3h
                retn
; ---------------------------------------------------------------------------
                mov     word ptr ds:5B98h, 5BECh
                retn
; ---------------------------------------------------------------------------

loc_178C3:                              ; ...
                mov     ah, 9
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D4Ch
                int     21h             ; DOS - PRINT STRING
                                        ; DS:DX -> string terminated by "$"
                mov     si, 5B14h

loc_178D1:                              ; ...
                lodsb
                mov     dl, al
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                cmp     dl, 0Dh
                jnz     short loc_178D1
                mov     dl, 0Ah
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                retn
; ---------------------------------------------------------------------------

loc_178E4:                              ; ...
                mov     ah, 3Eh ; '>'
                mov     bx, ds:5A92h
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle

loc_178EC:                              ; ...
                call    sub_178F0
                retn
sub_1776E       endp


; =============== S U B R O U T I N E =======================================


sub_178F0       proc near               ; ...
                mov     di, 44CBh
                cmp     byte ptr [di], 0
                jnz     short loc_17912
                or      byte ptr ds:36BFh, 20h
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER
                add     al, 41h ; 'A'
                mov     [di], al
                cmp     al, 43h ; 'C'
                jnb     short loc_17912
                mov     byte ptr [di+3], 0
                or      byte ptr ds:36C0h, 1

loc_17912:                              ; ...
                xor     al, al
                mov     cx, 40h ; '@'
                repne scasb
                not     cx
                add     cx, 40h ; '@'
                mov     ds:4519h, cx
                cmp     byte ptr [di-2], 5Ch ; '\'
                jnz     short loc_17931
                mov     byte ptr [di-2], 0
                dec     cx
                mov     ds:4519h, cx

loc_17931:                              ; ...
                mov     di, 451Eh
                cmp     byte ptr [di], 0
                jnz     short loc_17941
                push    di
                mov     si, 44CBh
                inc     cx
                rep movsb
                pop     di

loc_17941:                              ; ...
                xor     al, al
                mov     cx, 40h ; '@'
                repne scasb
                not     cx
                add     cx, 40h ; '@'
                mov     ds:456Ch, cx
                cmp     byte ptr [di-2], 5Ch ; '\'
                jnz     short loc_1795F
                mov     byte ptr [di-2], 0
                dec     word ptr ds:456Ch

loc_1795F:                              ; ...
                mov     di, 451Eh
                mov     al, [di]
                mov     bx, 456Eh
                cmp     byte ptr [bx], 0
                jnz     short loc_1796E
                mov     [bx], al

loc_1796E:                              ; ...
                test    byte ptr ds:36BFh, 8
                jnz     short loc_179D0
                or      byte ptr ds:36BFh, 8
                push    es
                mov     es, word ptr ds:150Ah
                add     di, ds:456Ch
                push    di
                mov     cx, es:1EC8h
                sub     cx, 2
                mov     si, 1ECCh
                mov     es:[si-2], al

loc_17993:                              ; ...
                lods    byte ptr es:[si]
                mov     [di], al
                inc     di
                loop    loc_17993
                sub     cx, cx
                mov     si, 451Eh
                mov     di, 1ECAh

loc_179A2:                              ; ...
                lodsb
                stosb
                inc     cx
                test    al, al
                jnz     short loc_179A2
                mov     es:1EC8h, cx
                pop     di
                pop     es
                sub     al, al
                stosb
                cmp     byte ptr ds:44A1h, 0
                jz      short loc_179BF
                mov     byte ptr ds:44A4h, 31h ; '1'

loc_179BF:                              ; ...
                cmp     byte ptr ds:44A2h, 1
                ja      short loc_179D0
                mov     byte ptr ds:46F7h, 0Dh
                mov     byte ptr ds:4705h, 0Dh

loc_179D0:                              ; ...
                test    byte ptr ds:36C0h, 80h
                jnz     short locret_179F4
                mov     ax, 3305h
                int     21h             ; DOS - 4+ Get Boot Drive (DL = boot drive, 1 = A:, ...)
                mov     di, 4C17h
                mov     cx, 3Fh ; '?'
                mov     ax, 7302h
                int     21h             ; DOS -
                jb      short locret_179F4
                cmp     word ptr [di+11h], 0
                jnz     short locret_179F4
                or      byte ptr ds:36C0h, 80h

locret_179F4:                           ; ...
                retn
sub_178F0       endp


; =============== S U B R O U T I N E =======================================


sub_179F5       proc near               ; ...
                mov     si, 5B14h

loc_179F8:                              ; ...
                call    sub_17A3C
                jb      short locret_17A3B
                cmp     al, 0E9h
                stc
                jz      short locret_17A3B
                cmp     al, 0EBh
                stc
                jz      short locret_17A3B

loc_17A07:                              ; ...
                cmp     al, 9
                jz      short loc_17A23
                cmp     al, 20h ; ' '
                jz      short loc_17A23
                cmp     al, 3Bh ; ';'
                jz      short loc_17A28
                cmp     al, 0Dh
                jz      short loc_17A2F
                call    sub_17B31
                mov     [si], al
                inc     si
                cmp     si, 5B93h
                jz      short loc_17A28

loc_17A23:                              ; ...
                call    sub_17A3C
                jmp     short loc_17A07
; ---------------------------------------------------------------------------

loc_17A28:                              ; ...
                call    sub_17A3C
                cmp     al, 0Dh
                jnz     short loc_17A28

loc_17A2F:                              ; ...
                mov     byte ptr [si], 0Dh
                mov     si, 5B14h
                cmp     byte ptr [si], 0Dh
                jz      short loc_179F8
                clc

locret_17A3B:                           ; ...
                retn
sub_179F5       endp


; =============== S U B R O U T I N E =======================================


sub_17A3C       proc near               ; ...
                mov     bx, ds:5B96h
                cmp     bx, ds:5B94h
                jb      short loc_17A5F
                mov     bx, ds:5A92h
                mov     dx, 5A94h
                mov     cx, 80h
                mov     ah, 3Fh
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_17A74
                test    ax, ax
                jz      short loc_17A74
                mov     ds:5B94h, ax
                sub     bx, bx

loc_17A5F:                              ; ...
                mov     al, [bx+5A94h]
                inc     bx
                mov     ds:5B96h, bx
                cmp     al, 1Ah
                jz      short loc_17A70
                cmp     al, 0Ah
                jnz     short loc_17A72

loc_17A70:                              ; ...
                mov     al, 0Dh

loc_17A72:                              ; ...
                clc
                retn
; ---------------------------------------------------------------------------

loc_17A74:                              ; ...
                mov     al, 0Dh
                stc
                retn
sub_17A3C       endp


; =============== S U B R O U T I N E =======================================


sub_17A78       proc near               ; ...
                mov     bx, si
                cmp     byte ptr [di], 0
                jz      short loc_17A93

loc_17A7F:                              ; ...
                mov     al, [di]
                inc     di
                cmp     al, 1
                jz      short loc_17A96
                jb      short loc_17AE3
                cmp     al, 2
                jz      short loc_17AB0
                cmp     al, [si]
                jnz     short loc_17AE5
                inc     si
                jmp     short loc_17A7F
; ---------------------------------------------------------------------------

loc_17A93:                              ; ...
                inc     di
                jmp     word ptr [di]
; ---------------------------------------------------------------------------

loc_17A96:                              ; ...
                lodsb
                cmp     al, 3Dh ; '='
                jnz     loc_178C3
                call    sub_17AF2
                jb      loc_178C3
                cmp     ax, 5Ah ; 'Z'
                ja      loc_178C3
                mov     di, [di]
                mov     [di], al
                retn
; ---------------------------------------------------------------------------

loc_17AB0:                              ; ...
                lodsb
                cmp     al, 3Dh ; '='
                jnz     loc_178C3
                call    sub_17AF2
                jb      loc_178C3
                mov     cx, [di]
                or      ds:36C0h, cx
                test    al, al
                jz      short loc_17ACE
                not     cx
                and     ds:36C0h, cx

loc_17ACE:                              ; ...
                push    ds
                mov     al, ds:36C0h
                and     al, 40h
                mov     ds, word ptr ds:150Ah
                and     byte ptr ds:1F87h, 0BFh
                or      ds:1F87h, al
                pop     ds
                retn
; ---------------------------------------------------------------------------

loc_17AE3:                              ; ...
                jmp     word ptr [di]
; ---------------------------------------------------------------------------

loc_17AE5:                              ; ...
                mov     al, [di]
                inc     di
                cmp     al, 2
                ja      short loc_17AE5
                inc     di
                inc     di
                mov     si, bx
                jmp     short sub_17A78
sub_17A78       endp


; =============== S U B R O U T I N E =======================================


sub_17AF2       proc near               ; ...
                lodsb
                mov     cx, 1
                cmp     al, 2Dh ; '-'
                jnz     short loc_17AFD
                neg     cx
                lodsb

loc_17AFD:                              ; ...
                sub     al, 30h ; '0'
                jb      short loc_17B2C
                cmp     al, 0Ah
                ja      short loc_17B2C
                cbw
                mov     bx, ax

loc_17B08:                              ; ...
                lodsb
                sub     al, 30h ; '0'
                jb      short loc_17B25
                cmp     al, 0Ah
                ja      short loc_17B25
                cbw
                xchg    ax, bx
                mov     dx, 0Ah
                mul     dx
                or      dx, dx
                jnz     short loc_17B20
                add     bx, ax
                jnb     short loc_17B08

loc_17B20:                              ; ...
                mov     ax, 0FFFFh
                stc
                retn
; ---------------------------------------------------------------------------

loc_17B25:                              ; ...
                mov     ax, bx
                dec     si
                mul     cx
                clc
                retn
; ---------------------------------------------------------------------------

loc_17B2C:                              ; ...
                xor     ax, ax
                dec     si
                stc
                retn
sub_17AF2       endp


; =============== S U B R O U T I N E =======================================


sub_17B31       proc near               ; ...
                cmp     al, 61h ; 'a'
                jb      short locret_17B3B
                cmp     al, 7Ah ; 'z'
                ja      short locret_17B3B
                sub     al, 20h ; ' '

locret_17B3B:                           ; ...
                retn
sub_17B31       endp

; ---------------------------------------------------------------------------
dword_17B3C     dd 0                    ; ...
config_envlen   dw 0                    ; ...
config_wrkseg   dw 0                    ; ...
byte_17B44      db 0                    ; ...
word_17B45      dw 0                    ; ...
byte_17B47      db 0                    ; ...
byte_17B48      db 0                    ; ...
word_17B49      dw 400h                 ; ...
word_17B4B      dw 0                    ; ...
word_17B4D      dw 0                    ; ...
word_17B4F      dw 0                    ; ...
word_17B51      dw 0                    ; ...
word_17B53      dw 0                    ; ...
word_17B55      dw 0                    ; ...
byte_17B57      db 0                    ; ...
word_17B58      dw 0                    ; ...
word_17B5A      dw 0                    ; ...
word_17B5C      dw 0                    ; ...
word_17B5E      dw 0                    ; ...
word_17B60      dw 0                    ; ...
word_17B62      dw 0                    ; ...
word_17B64      dw 0                    ; ...
                db 104h dup(0), 0FFh, 4 dup(0)
word_17C6F      dw 5D5Bh                ; ...
word_17C71      dw 3C7Ch                ; ...
word_17C73      dw 2B3Eh                ; ...
word_17C75      dw 3B3Dh                ; ...
                db  22h ; "
byte_17C78      db 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_17C79       proc near               ; ...
                mov     cs:word_17B5C, 0
                cld
                mov     cs:word_17B4F, cx
                mov     cs:word_17B51, 0
                mov     cs:word_17B64, 0
                mov     cs:word_17B55, 0
                mov     cs:word_17C6F, 5D5Bh
                mov     cs:word_17C71, 3C7Ch
                mov     cs:word_17C73, 2B3Eh
                mov     cs:word_17C75, 3B3Dh
                call    sub_18387
                jnb     short loc_17CCF
                mov     ax, 0FFFFh
                push    bx
                mov     bx, es:[di]
                cmp     cl, es:[bx]
                jnb     short loc_17CCB
                mov     ax, 2

loc_17CCB:                              ; ...
                pop     bx
                jmp     loc_17DF2
; ---------------------------------------------------------------------------

loc_17CCF:                              ; ...
                mov     cs:word_17B5E, si
                push    bx
                push    di
                push    bp
                lea     bx, ds:60E6h
                test    byte ptr cs:word_17B5C+1, 20h
                jnz     short loc_17D26

loc_17CE3:                              ; ...
                lodsb
                call    sub_18444
                jb      short loc_17D25
                call    sub_183AD
                jz      short loc_17D25
                call    sub_183E3
                jnz     short loc_17D0B
                test    byte ptr cs:word_17B5C+1, 20h
                jnz     short loc_17D00
                call    sub_18387
                jmp     short loc_17D26
; ---------------------------------------------------------------------------

loc_17D00:                              ; ...
                test    byte ptr cs:word_17B5C+1, 41h
                jz      short loc_17D26
                dec     si
                jmp     short loc_17D26
; ---------------------------------------------------------------------------

loc_17D0B:                              ; ...
                mov     cs:[bx], al
                cmp     al, 3Dh ; '='
                jnz     short loc_17D18
                or      byte ptr cs:word_17B5C+1, 1

loc_17D18:                              ; ...
                inc     bx
                call    sub_18462
                jnb     short loc_17CE3
                lodsb
                mov     cs:[bx], al
                inc     bx
                jmp     short loc_17CE3
; ---------------------------------------------------------------------------

loc_17D25:                              ; ...
                dec     si

loc_17D26:                              ; ...
                mov     cs:word_17B53, si
                mov     byte ptr cs:[bx], 0
                mov     cs:word_17B62, bx
                mov     bx, es:[di]
                lea     si, ds:60E6h
                cmp     byte ptr cs:[si], 2Fh ; '/'
                jz      short loc_17D77
                cmp     byte ptr cs:[si], 22h ; '"'
                jz      short loc_17D4F
                test    byte ptr cs:word_17B5C+1, 1
                jnz     short loc_17DA3

loc_17D4F:                              ; ...
                mov     al, es:[bx+1]
                xor     ah, ah
                cmp     cs:word_17B4F, ax
                jnb     short loc_17D6E
                mov     ax, cs:word_17B4F
                shl     ax, 1
                inc     bx
                inc     bx
                add     bx, ax
                mov     bx, es:[bx]
                call    sub_17DF4
                jmp     short loc_17DD7
; ---------------------------------------------------------------------------

loc_17D6E:                              ; ...
                mov     cs:word_17B51, 1
                jmp     short loc_17DD7
; ---------------------------------------------------------------------------

loc_17D77:                              ; ...
                mov     al, es:[bx+1]
                xor     ah, ah
                inc     ax
                shl     ax, 1
                add     bx, ax
                mov     cl, es:[bx]
                xor     ch, ch
                or      cx, cx
                jz      short loc_17D9A
                inc     bx

loc_17D8C:                              ; ...
                push    bx
                mov     bx, es:[bx]
                call    sub_17E59
                pop     bx
                jnb     short loc_17DD7
                inc     bx
                inc     bx
                loop    loc_17D8C

loc_17D9A:                              ; ...
                mov     cs:word_17B51, 3
                jmp     short loc_17DD7
; ---------------------------------------------------------------------------

loc_17DA3:                              ; ...
                mov     al, es:[bx+1]
                xor     ah, ah
                inc     ax
                shl     ax, 1
                add     bx, ax
                mov     al, es:[bx]
                xor     ah, ah
                shl     ax, 1
                inc     ax
                add     bx, ax
                mov     cl, es:[bx]
                xor     ch, ch
                or      cx, cx
                jz      short loc_17DD0
                inc     bx

loc_17DC2:                              ; ...
                push    bx
                mov     bx, es:[bx]
                call    sub_17E26
                pop     bx
                jnb     short loc_17DD7
                inc     bx
                inc     bx
                loop    loc_17DC2

loc_17DD0:                              ; ...
                mov     cs:word_17B51, 4

loc_17DD7:                              ; ...
                pop     bp
                pop     di
                pop     bx
                mov     cx, cs:word_17B4F
                mov     ax, cs:word_17B51
                mov     si, cs:word_17B53
                mov     dx, cs:word_17B55
                mov     bl, cs:byte_17B57

loc_17DF2:                              ; ...
                clc
                retn
sub_17C79       endp


; =============== S U B R O U T I N E =======================================


sub_17DF4       proc near               ; ...
                push    ax
                mov     ax, es:[bx]
                test    ax, 2
                jnz     short loc_17E02
                inc     cs:word_17B4F

loc_17E02:                              ; ...
                cmp     byte ptr cs:[si], 0
                jnz     short loc_17E21
                test    ax, 1
                jnz     short loc_17E16
                mov     cs:word_17B51, 2
                jmp     short loc_17E24
; ---------------------------------------------------------------------------

loc_17E16:                              ; ...
                push    ax
                mov     al, 3
                mov     ah, 0FFh
                call    sub_17EBC
                pop     ax
                jmp     short loc_17E24
; ---------------------------------------------------------------------------

loc_17E21:                              ; ...
                call    sub_17F41

loc_17E24:                              ; ...
                pop     ax
                retn
sub_17DF4       endp


; =============== S U B R O U T I N E =======================================


sub_17E26       proc near               ; ...
                stc
                retn
sub_17E26       endp


; =============== S U B R O U T I N E =======================================


sub_17E28       proc near               ; ...
                push    bp
                push    cx
                mov     cl, es:[bx+8]
                xor     ch, ch
                or      cx, cx
                jz      short loc_17E41
                lea     bp, [bx+9]

loc_17E37:                              ; ...
                call    sub_1821A
                jnb     short loc_17E44
                call    sub_17E4D
                loop    loc_17E37

loc_17E41:                              ; ...
                stc
                jmp     short loc_17E4A
; ---------------------------------------------------------------------------

loc_17E44:                              ; ...
                mov     cs:word_17B64, bp
                clc

loc_17E4A:                              ; ...
                pop     cx
                pop     bp
                retn
sub_17E28       endp


; =============== S U B R O U T I N E =======================================


sub_17E4D       proc near               ; ...
                cmp     byte ptr es:[bp+0], 0
                jz      short loc_17E57
                inc     bp
                jmp     short sub_17E4D
; ---------------------------------------------------------------------------

loc_17E57:                              ; ...
                inc     bp
                retn
sub_17E4D       endp


; =============== S U B R O U T I N E =======================================


sub_17E59       proc near               ; ...
                or      byte ptr cs:word_17B5C+1, 10h
                call    sub_17E28
                jb      short loc_17EAE
                and     byte ptr cs:word_17B5C+1, 0EFh
                push    ax
                mov     ax, cs:word_17B60
                sub     ax, si
                add     cs:word_17B5E, ax
                pop     ax
                mov     si, cs:word_17B60
                cmp     byte ptr cs:[si], 0
                jnz     short loc_17EA8
                cmp     byte ptr cs:[si-1], 3Ah ; ':'
                jnz     short loc_17E92
                mov     cs:word_17B51, 9
                jmp     short loc_17EB1
; ---------------------------------------------------------------------------

loc_17E92:                              ; ...
                cmp     word ptr es:[bx], 0
                jz      short loc_17EB1
                test    word ptr es:[bx], 1
                jnz     short loc_17EB1
                mov     cs:word_17B51, 2
                jmp     short loc_17EB1
; ---------------------------------------------------------------------------

loc_17EA8:                              ; ...
                call    sub_17F41
                clc
                jmp     short locret_17EBB
; ---------------------------------------------------------------------------

loc_17EAE:                              ; ...
                stc
                jmp     short locret_17EBB
; ---------------------------------------------------------------------------

loc_17EB1:                              ; ...
                push    ax
                mov     al, 3
                mov     ah, 0FFh
                call    sub_17EBC
                pop     ax
                clc

locret_17EBB:                           ; ...
                retn
sub_17E59       endp


; =============== S U B R O U T I N E =======================================


sub_17EBC       proc near               ; ...
                push    di
                mov     di, es:[bx+4]
                mov     cs:word_17B55, di
                mov     es:[di], al
                mov     es:[di+1], ah
                push    ax
                mov     ax, cs:word_17B64
                mov     es:[di+2], ax
                pop     ax
                cmp     al, 1
                jnz     short loc_17EE5

loc_17EDB:                              ; ...
                mov     es:[di+4], dx
                mov     es:[di+6], cx
                jmp     short loc_17F3F
; ---------------------------------------------------------------------------

loc_17EE5:                              ; ...
                cmp     al, 2
                jnz     short loc_17EEF
                mov     es:[di+4], dx
                jmp     short loc_17F3F
; ---------------------------------------------------------------------------

loc_17EEF:                              ; ...
                cmp     al, 7
                jz      short loc_17EDB
                cmp     al, 8
                jz      short loc_17EDB
                cmp     al, 6
                jnz     short loc_17F01
                mov     es:[di+4], dl
                jmp     short loc_17F3F
; ---------------------------------------------------------------------------

loc_17F01:                              ; ...
                cmp     al, 4
                jnz     short loc_17F14
                mov     ax, cs:word_17B5E
                inc     ax
                mov     es:[di+4], ax
                mov     word ptr es:[di+6], ds
                jmp     short loc_17F3F
; ---------------------------------------------------------------------------

loc_17F14:                              ; ...
                mov     es:[di+4], si
                mov     word ptr es:[di+6], cs
                push    ax
                test    byte ptr es:[bx+2], 1
                jz      short loc_17F28
                mov     al, 4
                jmp     short loc_17F31
; ---------------------------------------------------------------------------

loc_17F28:                              ; ...
                test    byte ptr es:[bx+2], 2
                jz      short loc_17F34
                mov     al, 2

loc_17F31:                              ; ...
                call    sub_18018

loc_17F34:                              ; ...
                pop     ax
                test    byte ptr es:[bx+2], 10h
                jz      short loc_17F3F
                call    sub_17FF2

loc_17F3F:                              ; ...
                pop     di
                retn
sub_17EBC       endp


; =============== S U B R O U T I N E =======================================


sub_17F41       proc near               ; ...
                mov     cs:byte_17C78, 0
                push    ax
                mov     ax, es:[bx]
                or      ax, ax
                jnz     short loc_17F67
                push    ax
                push    bx
                push    dx
                push    di
                mov     cs:word_17B51, 9
                mov     ah, 0FFh
                mov     al, 3
                call    sub_17EBC
                pop     di
                pop     dx
                pop     bx
                pop     ax
                jmp     short loc_17F69
; ---------------------------------------------------------------------------

loc_17F67:                              ; ...
                jmp     short loc_17F6B
; ---------------------------------------------------------------------------

loc_17F69:                              ; ...
                jmp     short loc_17FD9
; ---------------------------------------------------------------------------

loc_17F6B:                              ; ...
                test    ax, 8000h
                jz      short loc_17F82
                mov     cs:word_17B51, 0
                call    sub_180A0
                cmp     cs:word_17B51, 9
                jnz     short loc_17FD9

loc_17F82:                              ; ...
                test    ax, 4000h
                jz      short loc_17F99
                mov     cs:word_17B51, 0
                call    sub_1807C
                cmp     cs:word_17B51, 9
                jnz     short loc_17FD9

loc_17F99:                              ; ...
                test    ax, 100h
                jz      short loc_17FB3
                mov     cs:word_17B51, 0
                call    sub_182BD
                call    sub_18343
                cmp     cs:word_17B51, 9
                jnz     short loc_17FD9

loc_17FB3:                              ; ...
                test    ax, 200h
                jz      short loc_17FCA
                mov     cs:word_17B51, 0
                call    sub_182BD
                cmp     cs:word_17B51, 9
                jnz     short loc_17FD9

loc_17FCA:                              ; ...
                test    ax, 2000h
                jz      short loc_17FD9
                mov     cs:word_17B51, 0
                call    sub_181B1

loc_17FD9:                              ; ...
                cmp     cs:byte_17C78, 1
                jnz     short loc_17FF0
                cmp     cs:word_17B51, 0
                jnz     short loc_17FF0
                mov     cs:word_17B51, 9

loc_17FF0:                              ; ...
                pop     ax
                retn
sub_17F41       endp


; =============== S U B R O U T I N E =======================================


sub_17FF2       proc near               ; ...
                push    ax
                push    si

loc_17FF4:                              ; ...
                mov     al, cs:[si]
                or      al, al
                jz      short loc_18015
                cmp     al, 3Ah ; ':'
                jnz     short loc_1800C
                cmp     byte ptr cs:[si+1], 0
                jnz     short loc_1800C
                mov     byte ptr cs:[si], 0
                jmp     short loc_18015
; ---------------------------------------------------------------------------

loc_1800C:                              ; ...
                call    sub_18462
                jnb     short loc_18012
                inc     si

loc_18012:                              ; ...
                inc     si
                jmp     short loc_17FF4
; ---------------------------------------------------------------------------

loc_18015:                              ; ...
                pop     si
                pop     ax
                retn
sub_17FF2       endp


; =============== S U B R O U T I N E =======================================


sub_18018       proc near               ; ...
                push    si
                push    dx
                mov     dl, al

loc_1801C:                              ; ...
                mov     al, cs:[si]
                call    sub_18462
                jb      short loc_18030
                or      al, al
                jz      short loc_18034
                call    sub_18037
                mov     cs:[si], al
                jmp     short loc_18031
; ---------------------------------------------------------------------------

loc_18030:                              ; ...
                inc     si

loc_18031:                              ; ...
                inc     si
                jmp     short loc_1801C
; ---------------------------------------------------------------------------

loc_18034:                              ; ...
                pop     dx
                pop     si
                retn
sub_18018       endp


; =============== S U B R O U T I N E =======================================


sub_18037       proc near               ; ...
                cmp     al, 80h
                jnb     short loc_18047
                cmp     al, 61h ; 'a'
                jb      short locret_1807B
                cmp     al, 7Ah ; 'z'
                ja      short locret_1807B
                and     al, 0DFh
                jmp     short locret_1807B
; ---------------------------------------------------------------------------

loc_18047:                              ; ...
                push    bx
                push    es
                push    di
                lea     di, ds:61EAh
                cmp     cs:[di], dl
                jz      short loc_1806A
                push    ax
                push    cx
                push    dx
                push    cs
                pop     es
                assume es:SYSINIT
                mov     ah, 65h ; 'e'
                mov     al, dl
                mov     bx, 0FFFFh
                mov     cx, 5
                mov     dx, 0FFFFh
                int     21h             ; DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
                                        ; AL = function -
                pop     dx
                pop     cx
                pop     ax

loc_1806A:                              ; ...
                mov     bx, cs:[di+1]
                mov     es, word ptr cs:[di+3]
                assume es:nothing
                inc     bx
                inc     bx
                sub     al, 80h
                xlat    byte ptr es:[bx]
                pop     di
                pop     es
                pop     bx

locret_1807B:                           ; ...
                retn
sub_18037       endp


; =============== S U B R O U T I N E =======================================


sub_1807C       proc near               ; ...
                push    ax
                or      byte ptr cs:word_17B5C+1, 80h
                and     byte ptr cs:word_17B5C+1, 0FDh
                mov     al, cs:[si]
                cmp     al, 2Bh ; '+'
                jz      short loc_1809A
                cmp     al, 2Dh ; '-'
                jnz     short loc_1809B
                or      byte ptr cs:word_17B5C+1, 2

loc_1809A:                              ; ...
                inc     si

loc_1809B:                              ; ...
                call    sub_180A0
                pop     ax
                retn
sub_1807C       endp


; =============== S U B R O U T I N E =======================================


sub_180A0       proc near               ; ...
                push    ax
                push    cx
                push    dx
                push    si
                xor     cx, cx
                xor     dx, dx
                push    bx

loc_180A9:                              ; ...
                mov     al, cs:[si]
                or      al, al
                jz      short loc_180F2
                call    sub_181A3
                jb      short loc_180EE
                xor     ah, ah
                mov     bp, ax
                shl     dx, 1
                rcl     cx, 1
                call    sub_18191
                jb      short loc_180EE
                mov     bx, dx
                mov     ax, cx
                shl     dx, 1
                rcl     cx, 1
                call    sub_18191
                jb      short loc_180EE
                shl     dx, 1
                rcl     cx, 1
                call    sub_18191
                jb      short loc_180EE
                add     dx, bx
                adc     cx, ax
                call    sub_18191
                jb      short loc_180EE
                add     dx, bp
                adc     cx, 0
                call    sub_18191
                jb      short loc_180EE
                inc     si
                jmp     short loc_180A9
; ---------------------------------------------------------------------------

loc_180EE:                              ; ...
                pop     bx
                jmp     loc_1817E
; ---------------------------------------------------------------------------

loc_180F2:                              ; ...
                pop     bx
                test    byte ptr cs:word_17B5C+1, 2
                jz      short loc_18105
                not     cx
                not     dx
                add     dx, 1
                adc     cx, 0

loc_18105:                              ; ...
                mov     si, es:[bx+6]
                mov     al, es:[si]
                cmp     al, 0
                jnz     short loc_18116
                mov     al, 1
                mov     ah, 0FFh
                jmp     short loc_18189
; ---------------------------------------------------------------------------

loc_18116:                              ; ...
                inc     si
                mov     al, es:[si]
                cmp     al, 0
                jz      short loc_1817E
                inc     si

loc_1811F:                              ; ...
                test    byte ptr cs:word_17B5C+1, 80h
                jnz     short loc_18145
                cmp     cx, es:[si+3]
                jb      short loc_18163
                ja      short loc_18135
                cmp     dx, es:[si+1]
                jb      short loc_18163

loc_18135:                              ; ...
                cmp     cx, es:[si+7]
                ja      short loc_18163
                jb      short loc_18177
                cmp     dx, es:[si+5]
                ja      short loc_18163
                jmp     short loc_18177
; ---------------------------------------------------------------------------

loc_18145:                              ; ...
                cmp     cx, es:[si+3]
                jl      short loc_18163
                jg      short loc_18153
                cmp     dx, es:[si+1]
                jl      short loc_18163

loc_18153:                              ; ...
                cmp     cx, es:[si+7]
                jg      short loc_18163
                jl      short loc_18177
                cmp     dx, es:[si+5]
                jg      short loc_18163
                jmp     short loc_18177
; ---------------------------------------------------------------------------

loc_18163:                              ; ...
                add     si, 9
                dec     al
                jnz     short loc_1811F
                mov     cs:word_17B51, 6
                mov     al, 1
                mov     ah, 0FFh
                jmp     short loc_18189
; ---------------------------------------------------------------------------

loc_18177:                              ; ...
                mov     al, 1
                mov     ah, es:[si]
                jmp     short loc_18189
; ---------------------------------------------------------------------------

loc_1817E:                              ; ...
                mov     cs:word_17B51, 9
                mov     al, 3
                mov     ah, 0FFh

loc_18189:                              ; ...
                call    sub_17EBC
                pop     si
                pop     dx
                pop     cx
                pop     ax
                retn
sub_180A0       endp


; =============== S U B R O U T I N E =======================================


sub_18191       proc near               ; ...
                pushf
                test    byte ptr cs:word_17B5C+1, 2
                jnz     short loc_1819C
                popf
                retn
; ---------------------------------------------------------------------------

loc_1819C:                              ; ...
                popf
                jo      short loc_181A1
                clc
                retn
; ---------------------------------------------------------------------------

loc_181A1:                              ; ...
                stc
                retn
sub_18191       endp


; =============== S U B R O U T I N E =======================================


sub_181A3       proc near               ; ...
                cmp     al, 30h ; '0'
                jb      short loc_181AF
                cmp     al, 39h ; '9'
                ja      short loc_181AF
                sub     al, 30h ; '0'
                clc
                retn
; ---------------------------------------------------------------------------

loc_181AF:                              ; ...
                stc
                retn
sub_181A3       endp


; =============== S U B R O U T I N E =======================================


sub_181B1       proc near               ; ...
                push    ax
                push    bx
                push    dx
                push    di
                mov     di, es:[bx+6]
                mov     al, es:[di]
                or      al, al
                jnz     short loc_181C4
                mov     ah, 0FFh
                jmp     short loc_18210
; ---------------------------------------------------------------------------

loc_181C4:                              ; ...
                cmp     al, 3
                jnz     short loc_18207
                inc     di
                mov     al, es:[di]
                mov     ah, 9
                mul     ah
                inc     ax
                add     di, ax
                mov     al, es:[di]
                mov     ah, 5
                mul     ah
                inc     ax
                add     di, ax
                mov     al, es:[di]
                inc     di
                inc     di

loc_181E2:                              ; ...
                mov     bp, es:[di]
                call    sub_1821A
                jnb     short loc_181FC
                add     di, 3
                dec     al
                jnz     short loc_181E2
                mov     cs:word_17B51, 8
                mov     ah, 0FFh
                jmp     short loc_18210
; ---------------------------------------------------------------------------

loc_181FC:                              ; ...
                mov     ah, es:[di-1]
                mov     al, 2
                mov     dx, es:[di]
                jmp     short loc_18212
; ---------------------------------------------------------------------------

loc_18207:                              ; ...
                mov     cs:word_17B51, 9
                mov     ah, 0FFh

loc_18210:                              ; ...
                mov     al, 3

loc_18212:                              ; ...
                call    sub_17EBC
                pop     di
                pop     dx
                pop     bx
                pop     ax
                retn
sub_181B1       endp


; =============== S U B R O U T I N E =======================================


sub_1821A       proc near               ; ...
                push    ax
                push    bp
                push    dx
                push    si
                mov     dl, 2

loc_18220:                              ; ...
                mov     al, cs:[si]
                call    sub_18462
                jb      short loc_18264
                call    sub_18037
                test    byte ptr cs:word_17B5C+1, 8
                jz      short loc_18240
                cmp     al, 3Dh ; '='
                jnz     short loc_18256
                cmp     byte ptr es:[bp+1], 0
                jnz     short loc_182AF
                jmp     short loc_18253
; ---------------------------------------------------------------------------

loc_18240:                              ; ...
                test    byte ptr cs:word_17B5C+1, 10h
                jz      short loc_18256
                cmp     al, 3Ah ; ':'
                jnz     short loc_18256
                cmp     byte ptr es:[bp+0], 0
                jnz     short loc_182AF

loc_18253:                              ; ...
                inc     si
                jmp     short loc_182B2
; ---------------------------------------------------------------------------

loc_18256:                              ; ...
                cmp     al, es:[bp+0]
                jnz     short loc_18279
                or      al, al
                jz      short loc_182B2
                inc     si
                inc     bp
                jmp     short loc_18277
; ---------------------------------------------------------------------------

loc_18264:                              ; ...
                cmp     al, es:[bp+0]
                jnz     short loc_182AF
                inc     si
                mov     al, cs:[si]
                inc     bp
                cmp     al, es:[bp+0]
                jnz     short loc_182AF
                inc     si
                inc     bp

loc_18277:                              ; ...
                jmp     short loc_18220
; ---------------------------------------------------------------------------

loc_18279:                              ; ...
                test    byte ptr cs:word_17B5C+1, 40h
                jz      short loc_18290
                test    word ptr es:[bx+2], 20h
                jz      short loc_18290
                cmp     byte ptr es:[bp+0], 0
                jz      short loc_182B2

loc_18290:                              ; ...
                test    word ptr es:[bx], 10h
                jz      short loc_182AF
                cmp     al, 3Ah ; ':'
                jnz     short loc_182A4
                cmp     byte ptr es:[bp+0], 0
                jnz     short loc_182AF
                jmp     short loc_182B2
; ---------------------------------------------------------------------------

loc_182A4:                              ; ...
                cmp     al, 0
                jnz     short loc_182AF
                cmp     byte ptr es:[bp+0], 3Ah ; ':'
                jz      short loc_182B2

loc_182AF:                              ; ...
                stc
                jmp     short loc_182B8
; ---------------------------------------------------------------------------

loc_182B2:                              ; ...
                mov     cs:word_17B60, si
                clc

loc_182B8:                              ; ...
                pop     si
                pop     dx
                pop     bp
                pop     ax
                retn
sub_1821A       endp


; =============== S U B R O U T I N E =======================================


sub_182BD       proc near               ; ...
                push    ax
                push    di
                push    si
                mov     di, cs:word_17B5E
                mov     al, cs:[si]
                or      al, al
                jz      short loc_182DF
                call    sub_1832E
                jnz     short loc_182F5
                mov     cs:byte_17C78, 1
                pop     si
                mov     byte ptr cs:[si], 0
                pop     di
                jmp     short loc_1831E
; ---------------------------------------------------------------------------

loc_182DF:                              ; ...
                pop     si
                mov     byte ptr cs:[si], 0
                pop     di
                test    word ptr es:[bx], 1
                jnz     short loc_1831E
                mov     cs:word_17B51, 2
                jmp     short loc_1831E
; ---------------------------------------------------------------------------

loc_182F5:                              ; ...
                pop     ax
                push    si

loc_182F7:                              ; ...
                mov     al, cs:[si]
                or      al, al
                jz      short loc_1831C
                call    sub_1832E
                jz      short loc_1830E
                call    sub_18462
                jnb     short loc_1830A
                inc     di
                inc     si

loc_1830A:                              ; ...
                inc     di
                inc     si
                jmp     short loc_182F7
; ---------------------------------------------------------------------------

loc_1830E:                              ; ...
                mov     cs:byte_17B57, al
                mov     byte ptr cs:[si], 0
                inc     di
                mov     cs:word_17B53, di

loc_1831C:                              ; ...
                pop     si
                pop     di

loc_1831E:                              ; ...
                pop     ax
                test    ax, 200h
                jz      short locret_1832D
                push    ax
                mov     ah, 0FFh
                mov     al, 5
                call    sub_17EBC
                pop     ax

locret_1832D:                           ; ...
                retn
sub_182BD       endp


; =============== S U B R O U T I N E =======================================


sub_1832E       proc near               ; ...
                push    bx
                push    cx
                lea     bx, ds:61EFh
                mov     cx, 9

loc_18337:                              ; ...
                cmp     al, cs:[bx]
                jz      short loc_18340
                inc     bx
                loop    loc_18337
                inc     cx

loc_18340:                              ; ...
                pop     cx
                pop     bx
                retn
sub_1832E       endp


; =============== S U B R O U T I N E =======================================


sub_18343       proc near               ; ...
                push    ax
                push    dx
                mov     al, cs:[si]
                or      al, al
                jz      short loc_18384
                call    sub_18462
                jb      short loc_1837D
                cmp     word ptr cs:[si+1], 3Ah ; ':'
                jz      short loc_18366
                test    word ptr es:[bx], 10h
                jz      short loc_1837D
                cmp     byte ptr cs:[si+1], 0
                jnz     short loc_1837D

loc_18366:                              ; ...
                or      al, 20h
                cmp     al, 61h ; 'a'
                jb      short loc_1837D
                cmp     al, 7Ah ; 'z'
                ja      short loc_1837D
                sub     al, 60h ; '`'
                mov     dl, al
                mov     ah, 0FFh
                mov     al, 6
                call    sub_17EBC
                jmp     short loc_18384
; ---------------------------------------------------------------------------

loc_1837D:                              ; ...
                mov     cs:word_17B51, 9

loc_18384:                              ; ...
                pop     dx
                pop     ax
                retn
sub_18343       endp


; =============== S U B R O U T I N E =======================================


sub_18387       proc near               ; ...
                lodsb
                call    sub_183AD
                jz      short loc_183A5
                call    sub_183E3
                jnz     short loc_183A8
                test    byte ptr cs:word_17B5C+1, 20h
                jz      short sub_18387
                test    byte ptr cs:word_17B5C+1, 41h
                jz      short loc_183AB
                dec     si
                jmp     short loc_183AB
; ---------------------------------------------------------------------------

loc_183A5:                              ; ...
                stc
                jmp     short loc_183A9
; ---------------------------------------------------------------------------

loc_183A8:                              ; ...
                clc

loc_183A9:                              ; ...
                dec     si
                retn
; ---------------------------------------------------------------------------

loc_183AB:                              ; ...
                clc
                retn
sub_18387       endp


; =============== S U B R O U T I N E =======================================


sub_183AD       proc near               ; ...
                push    bx
                push    cx
                cmp     al, 0Dh
                jz      short loc_183E0
                cmp     al, 0
                jz      short loc_183E0
                cmp     al, 0Ah
                jz      short loc_183E0
                cmp     byte ptr es:[di+2], 2
                jb      short loc_183E0
                xor     bx, bx
                mov     bl, es:[di+3]
                add     bx, 4
                cmp     byte ptr es:[bx+di], 0
                jz      short loc_183DE
                xor     cx, cx
                mov     cl, es:[bx+di]

loc_183D6:                              ; ...
                inc     bx
                cmp     al, es:[bx+di]
                jz      short loc_183E0
                loop    loc_183D6

loc_183DE:                              ; ...
                cmp     al, 0Dh

loc_183E0:                              ; ...
                pop     cx
                pop     bx
                retn
sub_183AD       endp


; =============== S U B R O U T I N E =======================================


sub_183E3       proc near               ; ...
                push    bx
                push    cx
                mov     cs:byte_17B57, 20h ; ' '
                and     byte ptr cs:word_17B5C+1, 0DFh
                cmp     al, 20h ; ' '
                jz      short loc_1842B
                cmp     al, 9
                jz      short loc_1842B
                cmp     al, 2Ch ; ','
                jz      short loc_1842E
                cmp     al, 20h ; ' '
                jnz     short loc_1840D
                cmp     byte ptr [si], 20h ; ' '
                jnz     short loc_1840D
                mov     al, 20h ; ' '
                inc     si
                cmp     al, al
                jmp     short loc_1842B
; ---------------------------------------------------------------------------

loc_1840D:                              ; ...
                cmp     byte ptr es:[di+2], 1
                jb      short loc_1842B
                xor     cx, cx
                mov     cl, es:[di+3]
                or      cx, cx
                jz      short loc_18429
                mov     bx, 3

loc_18421:                              ; ...
                inc     bx
                cmp     al, es:[bx+di]
                jz      short loc_1842E
                loop    loc_18421

loc_18429:                              ; ...
                cmp     al, 20h ; ' '

loc_1842B:                              ; ...
                pop     cx
                pop     bx
                retn
; ---------------------------------------------------------------------------

loc_1842E:                              ; ...
                mov     cs:byte_17B57, al
                test    byte ptr cs:word_17B5C+1, 1
                jnz     short loc_18440
                or      byte ptr cs:word_17B5C+1, 20h

loc_18440:                              ; ...
                cmp     al, al
                jmp     short loc_1842B
sub_183E3       endp


; =============== S U B R O U T I N E =======================================


sub_18444       proc near               ; ...
                lea     bp, ds:60E6h
                cmp     bx, bp
                jz      short loc_18456
                cmp     al, 2Fh ; '/'
                jnz     short loc_18453
                stc
                jmp     short locret_18461
; ---------------------------------------------------------------------------

loc_18453:                              ; ...
                clc
                jmp     short locret_18461
; ---------------------------------------------------------------------------

loc_18456:                              ; ...
                cmp     al, 2Fh ; '/'
                jnz     short loc_18460
                or      byte ptr cs:word_17B5C+1, 40h

loc_18460:                              ; ...
                clc

locret_18461:                           ; ...
                retn
sub_18444       endp


; =============== S U B R O U T I N E =======================================


sub_18462       proc near               ; ...
                push    ds
                push    si
                push    bx
                cmp     cs:word_17B5A, 0
                jnz     short loc_18494
                push    ax
                push    ds
                push    cx
                push    dx
                push    di
                push    bp
                push    es
                xor     si, si
                mov     ds, si
                assume ds:BIOSDATA
                mov     ax, 6300h
                int     21h             ; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
                mov     bx, ds
                or      bx, bx
                pop     es
                pop     bp
                pop     di
                pop     dx
                pop     cx
                pop     ds
                assume ds:nothing
                pop     ax
                jz      short loc_184B3
                mov     cs:word_17B58, si
                mov     cs:word_17B5A, bx

loc_18494:                              ; ...
                mov     si, cs:word_17B58
                mov     ds, cs:word_17B5A

loc_1849E:                              ; ...
                cmp     word ptr [si], 0
                jz      short loc_184B3
                cmp     al, [si]
                jb      short loc_184AF
                cmp     al, [si+1]
                ja      short loc_184AF
                stc
                jmp     short loc_184B4
; ---------------------------------------------------------------------------

loc_184AF:                              ; ...
                inc     si
                inc     si
                jmp     short loc_1849E
; ---------------------------------------------------------------------------

loc_184B3:                              ; ...
                clc

loc_184B4:                              ; ...
                pop     bx
                pop     si
                pop     ds
                retn
sub_18462       endp

; ---------------------------------------------------------------------------
                db  3Dh ; =
                db  6Ah ; j
                db    1
                db    1
                db  3Bh ; ;
                db    1
                db    2
                db  47h ; G
                db  6Ah ; j
                db  5Bh ; [
                db  6Ah ; j
                db    1
                db  6Fh ; o
                db  6Ah ; j
                db    0
                db    0
                db  80h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db  50h ; P
                db  6Ah ; j
                db    0
                db    1
                db    1
                db    1
                db    1
                db    0
                db    0
                db    0
                db  63h ; c
                db    0
                db    0
                db    0
                db    1
                db  80h
                db    0
                db    0
                dw offset result_val
                dw offset buf_range_2
                db    0
buf_range_2     db 1                    ; ...
                db 1
                db 1
                dd 0
                dd 8
sw_x_ctrl       dw 0
                dw 0
                dw offset result_val
                dw offset noval
                db 1
switch_x        db '/X',0
p_h_buffers     dw 0
                dw 0
                db 0
p_buffer_slash_x db 0                   ; ...
noval           db 0                    ; ...
result_val      db 0                    ; ...
result_val_itag db 0                    ; ...
result_val_swoff dw 0
rv_dword        dd 0                    ; ...
                dw 6A8Fh
                db    1
                db    1
                db  3Bh ; ;
                db    1
                db    1
                db  95h
                db  6Ah ; j
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db  9Eh
                db  6Ah ; j
                db    0
                db 3
                db 0
                db 0
                db 2
                db 1
                dw offset _on_string    ; "ON"
                db 2
                dw offset _off_string   ; "OFF"
_on_string      db 'ON',0               ; ...
_off_string     db 'OFF',0              ; ...
unk_1852F       db    1                 ; ...
                db    1
                db    2
                db  30h ; 0
                db    0
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0C2h
                db  6Ah ; j
                db    1
                db    1
                db  3Bh ; ;
                db    1
                db    3
                db 0CCh
                db  6Ah ; j
                db 0E0h
                db  6Ah ; j
                db 0E9h
                db  6Ah ; j
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db 0D5h
                db  6Ah ; j
                db    0
                db    1
                db    1
                db    1
                db    1
                db    0
                db    0
                db    0
                db 0E7h
                db    3
                db    0
                db    0
                db    1
                db  80h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db 0D5h
                db  6Ah ; j
                db    0
                db    1
                db    2
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db  81h
                db  6Ah ; j
                db    0
word_18572      dw 0                    ; ...
word_18574      dw 0                    ; ...
                db 0FBh
                db  6Ah ; j
                db    1
                db    1
                db  3Bh ; ;
                db    1
                db    1
                db    1
                db  6Bh ; k
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db  0Ah
                db  6Bh ; k
                db    0
                db    1
                db    1
                db    1
                db    8
                db    0
                db    0
                db    0
                db 0FFh
                db    0
                db    0
                db    0
byte_18595      db 0                    ; ...
byte_18596      db 0                    ; ...
                db  1Ch
                db  6Bh ; k
                db    1
                db    1
                db  3Bh ; ;
                db    1
                db    2
                db  24h ; $
                db  6Bh ; k
                db  38h ; 8
                db  6Bh ; k
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db  2Dh ; -
                db  6Bh ; k
                db    0
                db    1
                db    1
                db    1
                db    1
                db    0
                db    0
                db    0
                db 0FFh
                db    0
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db  41h ; A
                db  6Bh ; k
                db    0
                db    1
                db    1
                db    1
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db    0
                db    0
                db    0
byte_185CC      db 0                    ; ...
byte_185CD      db 0                    ; ...
byte_185CE      db 0                    ; ...
                db  54h ; T
                db  6Bh ; k
                db    1
                db    1
                db  3Bh ; ;
                db    1
                db    1
                db  5Ah ; Z
                db  6Bh ; k
                db    0
                db    0
                db  10h
                db    1
                db  10h
                db    0
                db  82h
                db  6Ah ; j
                db  81h
                db  6Ah ; j
                db    0
byte_185E3      db 0                    ; ...
byte_185E4      db 0                    ; ...
                db  6Ah ; j
                db  6Bh ; k
                db    1
                db    1
                db  3Bh ; ;
                db    2
                db    2
                db  72h ; r
                db  6Bh ; k
                db  86h
                db  6Bh ; k
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db  7Bh ; {
                db  6Bh ; k
                db    0
                db    1
                db    1
                db    1
                db    0
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db  82h
                db  6Ah ; j
                db  8Fh
                db  6Bh ; k
                db    0
                db    1
                db    1
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
word_1861A      dw 0                    ; ...
word_1861C      dw 0                    ; ...
byte_1861E      db 0                    ; ...
                dw 6BA4h
                db    1
                db    1
                db  3Bh ; ;
                db    1
                db    1
                dw 6BAAh
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                dw 6A82h
                dw 6A9Eh
                db    0
byte_18633      db 0                    ; ...
                dw 6BB9h
                db    1
                db    1
                db  3Bh ; ;
                db    0
                db    0
                db    8
                dw offset unk_1864D
                dw offset unk_18659
                dw offset unk_18665
                dw offset unk_18671
                dw offset unk_1867D
                dw offset unk_18689
                dw offset unk_18695
                dw offset unk_186A1
                db    0
unk_1864D       db    0                 ; ...
                db    0
                db    0
                db    0
                dw 6A82h
                dw 6A81h
                db    1
                dw 4B2Fh
                db    0
unk_18659       db    0                 ; ...
                db    0
                db    0
                db    0
                dw 6A82h
                dw 6A81h
                db    1
                db  2Fh ; /
                db  54h ; T
                db    0
unk_18665       db    0                 ; ...
                db    0
                db    0
                db    0
                dw 6A82h
                dw 6A81h
                db    1
                db  2Fh ; /
                db  57h ; W
                db    0
unk_18671       db    0                 ; ...
                db    0
                db    0
                db    0
                dw offset result_val
                dw offset noval
                db    1
                dw offset loc_15DAF
                db    0
unk_1867D       db    0                 ; ...
                db    0
                db    0
                db    0
                dw offset result_val
                dw offset noval
                db    1
                dw offset loc_168AF
                db    0
unk_18689       db    0                 ; ...
                db    0
                db    0
                db    0
                dw offset result_val
                dw offset noval
                db    1
                dw 462Fh
                db    0
unk_18695       db    0                 ; ...
                db    0
                db    0
                db    0
                dw offset result_val
                dw offset noval
                db    1
                dw 442Fh
                db    0
unk_186A1       db    1                 ; ...
                db  80h
                db    0
                db    0
                dw offset result_val
                dw offset unk_1852F
                db    1
                dw 452Fh
                db    0
byte_186AD      db 0                    ; ...
byte_186AE      db 0                    ; ...
byte_186AF      db 0                    ; ...
byte_186B0      db 0                    ; ...
                db    0
byte_186B2      db 0FFh                 ; ...
                dw offset unk_186B8
                db    1
                db    1
                db  3Bh ; ;
unk_186B8       db    1                 ; ...
                db    4
                dw offset word_186C2
                dw offset word_186C2
                dw offset word_186C2
                db    0
                db    0
word_186C2      dw 2000h                ; ...
                db    0
                db    0
                dw offset result_val
                dw offset dos_strings
                db    0
dos_strings     db 3                    ; ...
                db 0
                db 0
                db 7
                db 1
                dw offset hi_string     ; "HIGH"
                db 2
                dw offset lo_string     ; "LOW"
                db 3
                dw offset umb_string    ; "UMB"
                db 4
                dw offset noumb_string  ; "NOUMB"
                db 5
                dw offset auto_string   ; "AUTO"
                db 6
                dw offset noauto_string ; "NOAUTO"
                db 7
                dw offset single_string ; "SINGLE"
hi_string       db 'HIGH',0             ; ...
lo_string       db 'LOW',0              ; ...
umb_string      db 'UMB',0              ; ...
noumb_string    db 'NOUMB',0            ; ...
auto_string     db 'AUTO',0             ; ...
noauto_string   db 'NOAUTO',0           ; ...
single_string   db 'SINGLE',0           ; ...
byte_1870A      db 0                    ; ...
byte_1870B      db 0                    ; ...
word_1870C      dw 0                    ; ...
byte_1870E      db 0                    ; ...
                db 30h dup(0)
byte_1873F      db 0                    ; ...
                db    0
byte_18741      db 0                    ; ...
word_18742      dw 0                    ; ...
word_18744      dw 0                    ; ...
word_18746      dw 0                    ; ...
dword_18748     dd 0                    ; ...
dword_1874C     dd 0                    ; ...
byte_18750      db 0                    ; ...
byte_18751      db 0                    ; ...
byte_18752      db 0                    ; ...
word_18753      dw 0                    ; ...
word_18755      dw 0                    ; ...
word_18757      dw 0                    ; ...
dword_18759     dd 0                    ; ...
word_1875D      dw 0                    ; ...
word_1875F      dw 0                    ; ...
byte_18761      db 0                    ; ...
word_18762      dw 0                    ; ...
byte_18764      db 0                    ; ...
word_18765      dw 0                    ; ...
aProtman        db 'PROTMAN$'
aAtivideo       db 'ATiVideo'
aQemm386        db 'QEMM386$'
aQlodr          db 'QLODR$'
a10?stacCdprot  db '10?STAC-CDProT'
                dw 6782h
                dw 5782h
word_18797      dw 0                    ; ...
word_18799      dw 0                    ; ...
byte_1879B      db 0                    ; ...
word_1879C      dw 0                    ; ...
word_1879E      dw 0                    ; ...
word_187A0      dw 0                    ; ...
byte_187A2      db 0                    ; ...
dword_187A3     dd 0                    ; ...
word_187A7      dw 0                    ; ...
                db  49h ; I
                db  4Fh ; O
                db  20h
                db  20h
                db  20h
                db  20h
                db  20h
                db  20h
                db  53h ; S
                db  59h ; Y
                db  53h ; S
word_187B4      dw 0                    ; ...
                db    0
                db    1
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    2
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    3
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    4
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    5
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    6
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    7
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    8
word_187DB      dw 0FFFFh               ; ...
                db 0FFh
                db 0FFh
                db    9
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db  0Ah
word_187E5      dw 0                    ; ...
word_187E7      dw 0                    ; ...
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db  53h ; S
                db  43h ; C
                db  53h ; S
                db  49h ; I
                db  4Dh ; M
                db  47h ; G
                db  52h ; R
                db  24h ; $
                db    0
word_1889A      dw 0                    ; ...
word_1889C      dw 0                    ; ...
dword_1889E     dd 0                    ; ...
                db  4Dh ; M
                db  42h ; B
                db  52h ; R
                db  49h ; I
                db  4Eh ; N
                db  54h ; T
                db  31h ; 1
                db  33h ; 3
                db  53h ; S
                db  59h ; Y
                db  53h ; S
                db    0
                db    0
                db    0
                db    1
                db    2
byte_188B2      db 0                    ; ...
word_188B3      dw 0                    ; ...
word_188B5      dw 0                    ; ...
word_188B7      dw 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_188B9       proc near               ; ...

; FUNCTION CHUNK AT 6F4E SIZE 00000065 BYTES
; FUNCTION CHUNK AT 6FB5 SIZE 000006F9 BYTES
; FUNCTION CHUNK AT 7725 SIZE 00000126 BYTES
; FUNCTION CHUNK AT 7869 SIZE 00000081 BYTES
; FUNCTION CHUNK AT 791A SIZE 000000D1 BYTES
; FUNCTION CHUNK AT 79EC SIZE 0000016A BYTES
; FUNCTION CHUNK AT 7B98 SIZE 00000008 BYTES

                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dx, 3616h
                mov     ax, 3D00h
                stc
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jnb     short loc_188E9

loc_188C6:                              ; ...
                mov     ax, word_12F6D
                sub     ax, 20h ; ' '
                mov     config_wrkseg, ax
                mov     es, ax
                mov     byte ptr es:0, 0
                mov     word_12F6D, ax
                mov     multi_pass_id, 0Bh
                mov     ax, 3700h
                int     21h             ; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
                                        ; Return: AL = FFh unsupported subfunction
                                        ; DL = current switch character
                mov     byte_1639F, dl
                retn
; ---------------------------------------------------------------------------

loc_188E9:                              ; ...
                xchg    ax, bx
                xor     cx, cx
                xor     dx, dx
                mov     ax, 4202h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from end of file
                test    dx, dx
                jz      short loc_188FA
                or      ax, 0FFFFh

loc_188FA:                              ; ...
                push    ax
                push    bx
                and     byte_15145, 0BFh
                mov     byte_17B44, 1
                mov     dx, 9D6Ah
                add     dx, off_1B792
                call    sub_14AC6
                pop     bx
                pop     ax
                jnb     short loc_1891A
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                jmp     short loc_188C6
; ---------------------------------------------------------------------------

loc_1891A:                              ; ...
                mov     word_1301C, ax
                xor     cx, cx
                xor     dx, dx
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                mov     dx, word_12F6D
                mov     ax, word_1301C
                mov     config_size, ax
                call    ParaRound
                sub     dx, ax
                sub     dx, 20h ; ' '
                mov     config_wrkseg, dx
                mov     es, dx
                mov     word ptr es:0, 0
                sub     dx, ax
                sub     dx, 11h
                mov     word_12F6D, dx
                mov     CONFBOT, dx
                mov     ds, dx
                assume ds:nothing
                mov     es, dx
                xor     dx, dx
                mov     cx, cs:word_1301C
                mov     ah, 3Fh ; '?'
                stc
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                pushf
                push    ax
                push    di
                push    cx
                mov     al, 1Ah
                mov     di, dx
                jcxz    short loc_18972
                repne scasb
                jnz     short loc_18972
                dec     di

loc_18972:                              ; ...
                mov     al, 0Dh
                stosb
                mov     al, 0Ah
                stosb
                sub     di, dx
                mov     cs:word_1301C, di
                pop     cx
                pop     di
                pop     ax
                push    cs
                pop     ds
                assume ds:SYSINIT
                push    ax
                push    cx
                push    dx
                mov     ax, 5700h
                int     21h             ; DOS - 2+ - GET FILE'S DATE/TIME
                                        ; BX = file handle
                mov     word_188B5, cx
                mov     word_188B7, dx
                pop     dx
                pop     cx
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                pop     ax
                popf
                jb      short loc_189A2
                cmp     cx, ax
                jz      short loc_189CE

loc_189A2:                              ; ...
                mov     dx, 3616h
                call    badfil

locret_189A8:                           ; ...
                retn
sub_188B9       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


multi_pass      proc near               ; ...
                push    cs
                pop     ds
                cmp     multi_pass_id, 0Ah

loc_189B0:                              ; ...
                jnb     short locret_189A8
                mov     ax, word_1301E
                mov     word_1301C, ax
                mov     word_13020, 0
multi_pass      endp


loc_189BE:                              ; ...
                push    CONFBOT
                pop     es
                mov     word_12F79, 0
                call    sub_1964A
                jmp     short loc_189D4
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_188B9

loc_189CE:                              ; ...
                call    sub_13E8D
                call    sub_1964A

loc_189D4:                              ; ...
                jb      short locret_189A8
                inc     word_12F79
                mov     byte_17B47, 0
                cmp     al, 0Ah
                jz      short loc_18A2E
                mov     byte_17B44, al
                and     al, 7Fh
                cmp     byte ptr word_17B45, 0
                jz      short loc_18A16
                push    ax
                call    sub_1964A
                mov     ah, al
                call    sub_1964A
                xchg    al, ah
                mov     word_12F79, ax
                pop     ax
                cmp     multi_pass_id, 2
                jb      short loc_18A16
                test    install_flag, 1
                jz      short loc_18A13
                cmp     multi_pass_id, 3
                jb      short loc_18A16

loc_18A13:                              ; ...
                mov     es:[si], al

loc_18A16:                              ; ...
                mov     ah, al
                call    sub_1964A
                jnb     short loc_18A35
                cmp     multi_pass_id, 2
                jnb     short loc_189B0
                jmp     loc_19618
; ---------------------------------------------------------------------------

loc_18A27:                              ; ...
                push    cs
                pop     ds
                call    sub_14C5E
                jmp     short loc_189D4
; ---------------------------------------------------------------------------

loc_18A2E:                              ; ...
                call    sub_1964A
                jmp     short loc_189D4
; END OF FUNCTION CHUNK FOR sub_188B9
; ---------------------------------------------------------------------------
                push    cs
                pop     ds
; START OF FUNCTION CHUNK FOR sub_188B9

loc_18A35:                              ; ...
                cmp     multi_pass_id, 0
                jnz     short loc_18A4F
                cmp     ah, 44h ; 'D'
                jz      short loc_18A49
                cmp     ah, 55h ; 'U'
                jz      short loc_18A49
                jmp     loc_18C54
; ---------------------------------------------------------------------------

loc_18A49:                              ; ...
                call    sub_1AA57
                jmp     loc_18AFB
; ---------------------------------------------------------------------------

loc_18A4F:                              ; ...
                cmp     multi_pass_id, 2
                jz      short loc_18A83
                cmp     multi_pass_id, 3
                jz      short loc_18A93
                cmp     ah, 48h ; 'H'
                jz      loc_18AFB
                cmp     ah, 71h ; 'q'
                jz      loc_18AFB
                cmp     ah, 61h ; 'a'
                jz      short loc_18A7C
                cmp     ah, 49h ; 'I'
                jz      short loc_18A7C
                cmp     ah, 57h ; 'W'
                jnz     loc_18B44

loc_18A7C:                              ; ...
                or      install_flag, 1
                jmp     short loc_18A27
; ---------------------------------------------------------------------------

loc_18A83:                              ; ...
                cmp     ah, 44h ; 'D'
                jnz     short loc_18A8B
                jmp     loc_18DA8
; ---------------------------------------------------------------------------

loc_18A8B:                              ; ...
                cmp     ah, 55h ; 'U'
                jnz     short loc_18AE4
                jmp     loc_18D1F
; ---------------------------------------------------------------------------

loc_18A93:                              ; ...
                cmp     ah, 49h ; 'I'
                jnz     short loc_18AA2
                call    sub_14AC6
                jb      short loc_18AE4
                call    do_install_exec
                jmp     short loc_18A27
; ---------------------------------------------------------------------------

loc_18AA2:                              ; ...
                cmp     ah, 57h ; 'W'
                jnz     short loc_18ADF
                call    sub_14AC6
                jb      short loc_18AE4
                mov     ax, 5800h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: get allocation strategy
                mov     bx, ax
                push    bx
                or      bx, 80h
                mov     ax, 5801h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: set allocation strategy
                mov     ax, 5802h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) get UMB link state
                xor     ah, ah
                push    ax
                mov     ax, 5803h
                mov     bx, 1
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) set UMB link state
                call    do_install_exec
                mov     ax, 5803h
                pop     bx
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) set UMB link state
                pop     bx
                mov     ax, 5801h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: set allocation strategy
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18ADF:                              ; ...
                cmp     ah, 61h ; 'a'
                jz      short loc_18AFE

loc_18AE4:                              ; ...
                cmp     ah, 59h ; 'Y'
                jz      short loc_18AF3
                cmp     ah, 5Ah ; 'Z'
                jz      short loc_18AF3
                cmp     ah, 30h ; '0'
                jnz     short loc_18AFB

loc_18AF3:                              ; ...
                dec     word_13020
                inc     word_1301C

loc_18AFB:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18AFE:                              ; ...
                call    sub_14AC6
                jb      short loc_18AE4
                lds     di, dword_17B3C
                assume ds:nothing
                jmp     short loc_18B0E
; ---------------------------------------------------------------------------

loc_18B09:                              ; ...
                call    sub_1964A
                jb      short loc_18AFB

loc_18B0E:                              ; ...
                cmp     al, 20h ; ' '
                jz      short loc_18B09
                cmp     al, 9
                jz      short loc_18B09
                cmp     al, 0Dh
                jz      short loc_18B09
                cmp     al, 0Ah
                jz      short loc_18AFB
                and     al, 0DFh
                sub     al, 41h ; 'A'
                jb      short loc_18B41
                cmp     al, 1Ah
                jnb     short loc_18B41
                cbw
                xchg    ax, bx
                call    sub_1964A
                jb      short loc_18B41
                cmp     al, 2Bh ; '+'
                jnz     short loc_18B38
                or      byte ptr [bx+di], 6
                jmp     short loc_18B09
; ---------------------------------------------------------------------------

loc_18B38:                              ; ...
                cmp     al, 2Dh ; '-'
                jnz     short loc_18B41
                and     byte ptr [bx+di], 0F9h
                jmp     short loc_18B09
; ---------------------------------------------------------------------------

loc_18B41:                              ; ...
                jmp     loc_1959C
; ---------------------------------------------------------------------------

loc_18B44:                              ; ...
                cmp     ah, 42h ; 'B'
                jnz     short loc_18BAA
                call    sub_14AC6
                jb      short loc_18BAA

loc_18B4E:                              ; ...
                mov     byte ptr ds:6A7Fh, 0
                mov     di, 6A38h
                xor     cx, cx
                mov     dx, cx

loc_18B5A:                              ; ...
                call    sub_195F1
                jnb     short loc_18B64
                call    near ptr sub_19620
                jmp     short loc_18BA7
; ---------------------------------------------------------------------------

loc_18B64:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_18B83
                cmp     word ptr ds:6A84h, 6A78h
                jz      short loc_18B5A
                mov     ax, ds:6A86h
                cmp     cx, 1
                jnz     short loc_18B7E
                mov     ds:6A7Bh, ax
                jmp     short loc_18B5A
; ---------------------------------------------------------------------------

loc_18B7E:                              ; ...
                mov     ds:6A7Dh, ax
                jmp     short loc_18B5A
; ---------------------------------------------------------------------------

loc_18B83:                              ; ...
                cmp     word ptr ds:6A7Bh, 63h ; 'c'
                jbe     short loc_18B95
                call    near ptr sub_19620
                mov     word ptr ds:6A7Dh, 0
                jmp     short loc_18BA7
; ---------------------------------------------------------------------------

loc_18B95:                              ; ...
                mov     ax, ds:6A7Bh
                mov     ds:14E1h, ax
                mov     ax, ds:6A7Dh
                mov     ds:14E3h, ax
                mov     ax, ds:14F9h
                mov     ds:1503h, ax

loc_18BA7:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18BAA:                              ; ...
                cmp     ah, 62h ; 'b'
                jnz     short loc_18BBB
                call    sub_14AC6
                jb      short loc_18BBB
                mov     byte ptr ds:6A80h, 1
                jmp     short loc_18B4E
; ---------------------------------------------------------------------------

loc_18BBB:                              ; ...
                cmp     ah, 43h ; 'C'
                jnz     short loc_18BFD
                call    sub_14AC6
                jb      short loc_18BFD
                mov     di, 6A8Ah
                xor     cx, cx
                mov     dx, cx

loc_18BCC:                              ; ...
                call    sub_195F1
                jnb     short loc_18BD6
                call    near ptr sub_19620
                jmp     short loc_18BFA
; ---------------------------------------------------------------------------

loc_18BD6:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_18BF0
                cmp     byte ptr ds:6A83h, 1
                jnz     short loc_18BE9
                mov     byte ptr ds:6ABCh, 1
                jmp     short loc_18BEE
; ---------------------------------------------------------------------------

loc_18BE9:                              ; ...
                mov     byte ptr ds:6ABCh, 0

loc_18BEE:                              ; ...
                jmp     short loc_18BCC
; ---------------------------------------------------------------------------

loc_18BF0:                              ; ...
                mov     ah, 33h ; '3'
                mov     al, 1
                mov     dl, ds:6ABCh
                int     21h             ; DOS - EXTENDED CONTROL-BREAK CHECKING
                                        ; AL = 00h get state / 01h set state / 02h set AND get
                                        ; DL = 00h for OFF or 01h for ON

loc_18BFA:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18BFD:                              ; ...
                cmp     ah, 4Dh ; 'M'
                jnz     loc_18D1F
                call    sub_14AC6
                jb      loc_18D1F
                mov     di, 6B9Fh
                xor     cx, cx
                mov     dx, cx

loc_18C12:                              ; ...
                call    sub_195F1
                jnb     short loc_18C1C
                call    near ptr sub_19620
                jmp     short loc_18C51
; ---------------------------------------------------------------------------

loc_18C1C:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_18C36
                cmp     byte ptr ds:6A83h, 1
                jnz     short loc_18C2F
                mov     byte ptr ds:6BB3h, 1
                jmp     short loc_18C34
; ---------------------------------------------------------------------------

loc_18C2F:                              ; ...
                mov     byte ptr ds:6BB3h, 0

loc_18C34:                              ; ...
                jmp     short loc_18C12
; ---------------------------------------------------------------------------

loc_18C36:                              ; ...
                push    ds
                mov     ax, 70h ; 'p'
                mov     ds, ax
                assume ds:nothing
                or      word ptr ds:8, 400h
                cmp     cs:byte_18633, 0
                jz      short loc_18C50
                or      word ptr ds:8, 200h

loc_18C50:                              ; ...
                pop     ds
                assume ds:nothing

loc_18C51:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18C54:                              ; ...
                cmp     ah, 48h ; 'H'
                jnz     short loc_18C7C
                call    sub_14AC6
                jb      short loc_18C7C
                mov     di, 6C33h
                xor     cx, cx
                mov     dx, cx

loc_18C65:                              ; ...
                call    sub_195F1
                jnb     short loc_18C6F
                call    near ptr sub_19620
                jmp     short loc_18C79
; ---------------------------------------------------------------------------

loc_18C6F:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_18C79
                call    sub_196AA
                jmp     short loc_18C65
; ---------------------------------------------------------------------------

loc_18C79:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18C7C:                              ; ...
                cmp     ah, 31h ; '1'
                jnz     short loc_18CF7
                call    sub_14AC6
                jb      short loc_18CF7
                mov     di, 6BB4h
                xor     cx, cx
                mov     dx, cx

loc_18C8D:                              ; ...
                call    sub_195F1
                jnb     short loc_18C97
                call    near ptr sub_19620
                jmp     short loc_18C79
; ---------------------------------------------------------------------------

loc_18C97:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_18C79
                cmp     word ptr ds:6A84h, 6BD6h
                jnz     short loc_18CAB
                mov     byte ptr ds:6C2Dh, 1
                jmp     short loc_18C8D
; ---------------------------------------------------------------------------

loc_18CAB:                              ; ...
                cmp     word ptr ds:6A84h, 6BE2h
                jnz     short loc_18CBA
                mov     byte ptr ds:6C2Eh, 80h
                jmp     short loc_18C8D
; ---------------------------------------------------------------------------

loc_18CBA:                              ; ...
                cmp     word ptr ds:6A84h, 6BEEh
                jnz     short loc_18CC9
                mov     byte ptr ds:6C2Fh, 1
                jmp     short loc_18C8D
; ---------------------------------------------------------------------------

loc_18CC9:                              ; ...
                cmp     word ptr ds:6A84h, 6BFAh
                jnz     short loc_18CD8
                mov     byte ptr ds:6C30h, 1
                jmp     short loc_18C8D
; ---------------------------------------------------------------------------

loc_18CD8:                              ; ...
                cmp     word ptr ds:6A84h, 6C2Ah
                jnz     short loc_18C8D
                mov     ax, 0FFFFh
                cmp     byte ptr ds:6A83h, 2
                jnz     short loc_18CF2
                mov     ax, ds:6A86h
                add     ax, 0Fh
                and     al, 0F0h

loc_18CF2:                              ; ...
                mov     ds:60C9h, ax
                jmp     short loc_18C8D
; ---------------------------------------------------------------------------

loc_18CF7:                              ; ...
                cmp     ah, 71h ; 'q'
                jz      short loc_18CFF

loc_18CFC:                              ; ...
                jmp     loc_18AE4
; ---------------------------------------------------------------------------

loc_18CFF:                              ; ...
                call    sub_14AC6
                jb      short loc_18CFC
                push    es
                pop     ds
                sub     dx, dx
                mov     al, [si]
                cmp     al, 20h ; ' '
                jb      short loc_18D19
                mov     dx, si

loc_18D10:                              ; ...
                lodsb
                cmp     al, 20h ; ' '
                jnb     short loc_18D10
                mov     byte ptr [si-1], 0

loc_18D19:                              ; ...
                call    sub_1AA94
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18D1F:                              ; ...
                cmp     ah, 55h ; 'U'
                jnz     loc_18DA8
                call    sub_14AC6
                jb      short loc_18DA8
                mov     bx, 4701h
                call    sub_16E46
                call    sub_19927
                call    sub_1A2B8
                jnb     short loc_18D49
                mov     cs:word_17B4B, si
                mov     cs:word_17B4D, es
                call    near ptr sub_19620
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18D49:                              ; ...
                mov     ax, cs:word_18762
                or      ax, ax
                jnz     short loc_18D66
                call    sub_199D8
                jnb     short loc_18D66
                mov     cs:word_17B4B, si
                mov     cs:word_17B4D, es
                call    near ptr sub_19620
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18D66:                              ; ...
                push    si
                push    es

loc_18D68:                              ; ...
                mov     al, es:[si]
                cmp     al, 0Dh
                jz      short loc_18D7B
                cmp     al, 0Ah
                jz      short loc_18D7B
                call    loc_14C42
                jz      short loc_18D7B
                inc     si
                jmp     short loc_18D68
; ---------------------------------------------------------------------------

loc_18D7B:                              ; ...
                mov     cs:byte_187A2, al
                mov     byte ptr es:[si], 0
                pop     es
                pop     si
                call    sub_19F63
                jnb     short loc_18D92
                mov     cs:byte_18761, 0
                jmp     short loc_18DEB
; ---------------------------------------------------------------------------

loc_18D92:                              ; ...
                mov     cs:byte_18761, 0
                cmp     cs:byte_18751, 0
                jz      short loc_18DEB
                mov     cs:byte_18761, 1
                jmp     short loc_18DEB
; ---------------------------------------------------------------------------

loc_18DA8:                              ; ...
                cmp     ah, 44h ; 'D'
                jz      short loc_18DB0

loc_18DAD:                              ; ...
                jmp     loc_191A5
; ---------------------------------------------------------------------------

loc_18DB0:                              ; ...
                cmp     cs:byte_1612E, 0
                jz      short loc_18DD3
                test    cs:byte_15145, 8
                jz      short loc_18DD3
                push    ds
                pusha
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dx, 9D6Ah
                add     dx, cs:off_1B7E4
                call    print
                popa
                pop     ds
                assume ds:nothing
                jmp     short loc_18DD8
; ---------------------------------------------------------------------------

loc_18DD3:                              ; ...
                call    sub_14AC6
                jb      short loc_18DAD

loc_18DD8:                              ; ...
                mov     cs:byte_18761, 0
                mov     cs:word_18762, 0
                mov     cs:byte_187A2, 20h ; ' '

loc_18DEB:                              ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     cx, si
                mov     dx, es
                mov     ax, 6122h
                sub     ax, si
                jb      short loc_18E06
                and     ax, 0FFF0h
                add     cx, ax
                jb      short loc_18E06
                shr     ax, 4
                sub     dx, ax
                jnb     short loc_18E0A

loc_18E06:                              ; ...
                mov     cx, si
                mov     dx, es

loc_18E0A:                              ; ...
                mov     word_18797, cx
                mov     word_18799, dx
                mov     word ptr byte_11C93+11h, si
                mov     word ptr byte_11C93+13h, es
                mov     word_1879E, si
                mov     word_187A0, es
                mov     byte_17B48, 0
                call    sub_1A1A4
                jb      short loc_18E6E
                mov     byte_18750, 1
                mov     al, byte_18761
                or      byte_18761, 0
                jz      short loc_18E59
                call    sub_19CAA
                cmp     al, 0FFh
                jz      short loc_18E59
                dec     byte_18750
                call    sub_19CB2
                or      ax, ax
                jz      short loc_18E53
                cmp     ax, word_18742
                jge     short loc_18E59

loc_18E53:                              ; ...
                mov     ax, word_18742
                call    sub_19CE8

loc_18E59:                              ; ...
                call    sub_1A080
                mov     ax, word_18744
                add     ax, word_18742
                jb      short loc_18E6B
                cmp     word_18746, ax
                jnb     short loc_18E7D

loc_18E6B:                              ; ...
                jmp     loc_1A23A
; ---------------------------------------------------------------------------

loc_18E6E:                              ; ...
                cmp     byte ptr es:[si], 20h ; ' '
                jnb     short loc_18E77
                jmp     loc_19618
; ---------------------------------------------------------------------------

loc_18E77:                              ; ...
                call    badload
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18E7D:                              ; ...
                push    es
                pop     ds
                assume ds:nothing
                mov     dx, si
                call    sub_1A8F5
                call    sub_1A96E
                call    sub_1A1E8
                push    ds
                pop     es
                push    cs
                pop     ds
                assume ds:SYSINIT
                jb      short loc_18E6E

loc_18E90:                              ; ...
                push    es
                push    si
                call    sub_1A219
                push    es
                push    si
                push    cs
                pop     es
                assume es:SYSINIT
                push    ds
                push    si
                lds     si, cs:dword_18748
                assume ds:nothing
                test    word ptr [si+4], 8000h
                jnz     short loc_18EBC
                lds     si, cs:CURRENT_DOS_LOCATION
                cmp     byte ptr [si+20h], 1Ah
                jb      short loc_18EBC
                pop     si
                pop     ds
                pop     si
                pop     es
                assume es:nothing
                call    sub_1A205
                jmp     loc_18F57
; ---------------------------------------------------------------------------

loc_18EBC:                              ; ...
                pop     si
                pop     ds
                sub     ax, ax
                call    sub_1977C
                call    sub_19723
                call    sub_19915
                cmp     cs:byte_17B47, 0
                jnz     short loc_18EE2
                mov     word ptr cs:byte_11C93+0Dh, 0
                mov     bx, cs:word_18746
                mov     word ptr cs:byte_11C93+0Fh, bx

loc_18EE2:                              ; ...
                mov     cs:byte_11C93+0Ch, 0
                push    ds
                lds     si, cs:dword_18748
                test    word ptr [si+4], 8000h
                lds     bx, cs:CURRENT_DOS_LOCATION
                mov     al, byte ptr cs:word_13030
                mov     cs:byte_11C93+15h, al
                mov     ax, [bx+20h]
                jnz     short loc_18F0E
                mov     al, byte ptr cs:word_13030
                mov     ah, al
                xchg    ax, [bx+20h]

loc_18F0E:                              ; ...
                pop     ds
                push    ax
                call    sub_1A9EA
                mov     bx, 6
                call    sub_14CC1
                mov     bx, 8
                call    sub_14CC1
                call    sub_1AA0D
                pop     ax
                push    ds
                lds     bx, cs:CURRENT_DOS_LOCATION
                mov     [bx+20h], ax
                pop     ds
                call    sub_1975F
                or      ax, 0FFFFh
                call    sub_1977C
                mov     eax, dword ptr cs:byte_11C93+0Dh
                mov     cs:dword_1874C, eax
                call    sub_1A205
                cmp     cs:byte_18751, 0
                jz      short loc_18F4E
                call    sub_1A371

loc_18F4E:                              ; ...
                pop     si
                pop     ds
                mov     byte ptr [si], 0
                push    cs
                pop     ds
                assume ds:SYSINIT
                jmp     short loc_18F92
; ---------------------------------------------------------------------------

loc_18F57:                              ; ...
                push    cs
                pop     ds
                call    print_x

loc_18F5C:                              ; ...
                adc     al, [bx+si-3AD2h]
                push    ds
                enter   2E6Ch, 83h
                xor     bp, ds:[bp+0]
                jz      short loc_18F74
                mov     bx, cs:word_188B3
                mov     ds, bx
                assume ds:nothing
                xor     bx, bx

loc_18F74:                              ; ...
                xor     al, al
                call    sub_1A72F
                pop     si
                pop     es
                push    cs
                pop     ds
                assume ds:SYSINIT
                cmp     word ptr cs:byte_11C93+16h, 0
                jz      short loc_18F8F
                call    sub_1966A
                mov     word ptr cs:byte_11C93+16h, 0

loc_18F8F:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_18F92:                              ; ...
                mov     ax, word ptr cs:dword_1874C+2
                cmp     ax, cs:word_18746
                jbe     short loc_18FA2
                pop     si
                pop     es
                jmp     loc_18E6E
; ---------------------------------------------------------------------------

loc_18FA2:                              ; ...
                lds     dx, cs:dword_18748
                assume ds:nothing
                mov     si, dx
                les     di, cs:CURRENT_DOS_LOCATION
                mov     ax, [si+4]
                test    ax, 8000h
                jz      short loc_18FD8
                call    sub_1A265

loc_18FB9:                              ; ...
                jb      short near ptr loc_18F5C+2
                test    ax, 1
                jz      short loc_18FC8
                mov     es:[di+0Ch], dx
                mov     word ptr es:[di+0Eh], ds

loc_18FC8:                              ; ...
                test    ax, 8
                jz      short loc_18FD5
                mov     es:[di+8], dx
                mov     word ptr es:[di+0Ah], ds

loc_18FD5:                              ; ...
                jmp     loc_190AE
; ---------------------------------------------------------------------------

loc_18FD8:                              ; ...
                mov     al, cs:byte_11C93+0Ch
                or      al, al
                jz      near ptr loc_18F5C+2
                mov     [si+0Ah], al
                add     cs:byte_17B48, al
                cbw
                mov     cx, ax
                mov     dh, ah
                mov     dl, es:[di+20h]
                mov     ah, dl
                add     ah, al
                cmp     ah, 1Ah
                jbe     short loc_18FFF
                jmp     loc_18F57
; ---------------------------------------------------------------------------

loc_18FFF:                              ; ...
                call    sub_1A265
                jb      short loc_18FB9
                add     es:[di+20h], al
                add     byte ptr cs:word_13030, al
                lds     bx, dword ptr cs:byte_11C93+11h

loc_19012:                              ; ...
                les     bp, cs:CURRENT_DOS_LOCATION
                les     bp, es:[bp+0]

loc_1901B:                              ; ...
                cmp     word ptr es:[bp+19h], 0FFFFh
                jz      short loc_19028
                les     bp, es:[bp+19h]
                jmp     short loc_1901B
; ---------------------------------------------------------------------------

loc_19028:                              ; ...
                mov     ax, word ptr cs:dword_1874C
                mov     es:[bp+19h], ax
                mov     ax, word ptr cs:dword_1874C+2
                mov     es:[bp+1Bh], ax
                les     bp, cs:dword_1874C
                add     word ptr cs:dword_1874C, 3Dh ; '='
                call    loc_1A244
                mov     word ptr es:[bp+19h], 0FFFFh
                mov     byte ptr es:[bp+18h], 80h
                mov     si, [bx]
                push    word ptr [si+0Bh]
                cmp     word ptr [si+0Bh], 0
                jnz     short loc_19073
                cmp     word ptr [si+1Fh], 0
                ja      short loc_1906E
                cmp     word ptr [si+19h], 0
                jnz     short loc_19073
                cmp     word ptr [si+1Bh], 0
                jnz     short loc_19073

loc_1906E:                              ; ...
                mov     word ptr [si+0Bh], 9

loc_19073:                              ; ...
                inc     bx
                inc     bx
                mov     es:[bp+0], dx
                push    dx
                push    cx
                mov     cx, 4558h
                mov     dx, 4152h
                mov     ah, 53h
                int     21h             ; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
                                        ; DS:SI -> BPB (BIOS Parameter Block)
                                        ; ES:BP -> buffer for DOS Drive Parameter Block
                pop     cx
                pop     dx
                pop     word ptr [si+0Bh]
                mov     ax, word ptr cs:dword_18748
                mov     es:[bp+13h], ax
                mov     ax, word ptr cs:dword_18748+2
                mov     es:[bp+15h], ax
                sub     si, si
                call    sub_1912F
                jb      short loc_19117
                inc     dx
                inc     dh
                dec     cx
                jnz     loc_19012
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    sub_15478

loc_190AE:                              ; ...
                les     di, cs:CURRENT_DOS_LOCATION
                mov     cx, es:[di+22h]
                mov     dx, es:[di+24h]
                lds     si, cs:dword_18748
                assume ds:nothing
                mov     es:[di+22h], si
                mov     word ptr es:[di+24h], ds
                mov     ax, [si]
                mov     word ptr cs:dword_18748, ax
                mov     [si], cx
                mov     [si+2], dx
                push    ax
                mov     al, [si+0Ah]
                test    word ptr [si+4], 8000h
                jz      short loc_190E0
                xor     al, al

loc_190E0:                              ; ...
                mov     bx, si
                call    sub_1A72F
                pop     ax
                cmp     cs:byte_1612E, 0
                jz      short loc_19107
                test    cs:byte_15145, 8
                jz      short loc_19107
                push    ds
                pusha
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dx, 9D6Ah
                add     dx, cs:off_1B7E6
                call    print
                popa
                pop     ds
                assume ds:nothing

loc_19107:                              ; ...
                pop     si
                pop     es
                inc     ax
                jz      short loc_1911C
                inc     cs:byte_17B47
                call    sub_1A28A
                jmp     loc_18E90
; ---------------------------------------------------------------------------

loc_19117:                              ; ...
                pop     si
                pop     es
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_1911C:                              ; ...
                mov     cs:byte_17B47, 0
                call    sub_1A28A
                call    sub_195D6
                call    nullsub_16
                jmp     loc_18A27
; END OF FUNCTION CHUNK FOR sub_188B9
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_16. PRESS CTRL-NUMPAD+ TO EXPAND]

; =============== S U B R O U T I N E =======================================


sub_1912F       proc near               ; ...
                mov     di, es:[bp+2]
                les     bp, cs:CURRENT_DOS_LOCATION
                cmp     di, es:[bp+10h]
                jbe     short loc_1917C
                lea     ax, [di+18h]
                cmp     ax, cs:word_12F90
                ja      short loc_1917E
                mov     cs:word_12F65, ax
                mov     es:[bp+10h], di
                mov     ah, 0Dh
                int     21h             ; DOS - DISK RESET
                xor     ax, ax
                les     di, es:[bp+12h]
                mov     es:[di+4], ax
                mov     es:[di], ax
                mov     es, cs:word_12F8E
                assume es:BIOSDATA
                xchg    ax, di
                mov     es:[di], di
                mov     es:[di+2], di
                mov     word ptr es:[di+4], 0FFh
                mov     es:[di+6], di
                mov     es:[di+8], di

loc_1917C:                              ; ...
                clc
                retn
; ---------------------------------------------------------------------------

loc_1917E:                              ; ...
                or      si, si
                jnz     short loc_191A3
                pop     di
                pop     si
                pop     es
                assume es:nothing
                push    es
                push    si
                push    di
                push    bx
                push    cx
                push    dx
                push    ds
                mov     dx, 9D6Ah
                add     dx, cs:off_1B744
                mov     bx, 9D6Ah
                add     bx, cs:off_1B740
                call    loc_14FB2
                pop     ds
                pop     dx
                pop     cx
                pop     bx

loc_191A3:                              ; ...
                stc
                retn
sub_1912F       endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_188B9

loc_191A5:                              ; ...
                cmp     ah, 51h ; 'Q'
                jz      short loc_191AD

loc_191AA:                              ; ...
                jmp     loc_192E9
; ---------------------------------------------------------------------------

loc_191AD:                              ; ...
                call    sub_14AC6
                jb      short loc_191AA
                mov     byte ptr cs:cntry_drv, 0 ; "A:"
                mov     cs:word_18574, 0
                mov     di, 6ABDh
                xor     cx, cx
                mov     dx, cx

loc_191C6:                              ; ...
                call    sub_195F1
                jnb     short loc_191D7
                call    sub_192CB
                mov     cs:word_18572, 0FFFFh
                jmp     short loc_19210
; ---------------------------------------------------------------------------

loc_191D7:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_19210
                cmp     cs:result_val, 1
                jnz     short loc_191F9
                mov     ax, word ptr cs:rv_dword
                cmp     cx, 1
                jnz     short loc_191F3
                mov     cs:word_18572, ax
                jmp     short loc_191F7
; ---------------------------------------------------------------------------

loc_191F3:                              ; ...
                mov     cs:word_18574, ax

loc_191F7:                              ; ...
                jmp     short loc_1920E
; ---------------------------------------------------------------------------

loc_191F9:                              ; ...
                push    ds
                push    es
                push    si
                push    di
                push    cs
                pop     es
                assume es:SYSINIT
                lds     si, cs:rv_dword
                mov     di, 3622h
                call    sub_14F96
                pop     di
                pop     si
                pop     es
                assume es:nothing
                pop     ds

loc_1920E:                              ; ...
                jmp     short loc_191C6
; ---------------------------------------------------------------------------

loc_19210:                              ; ...
                cmp     cs:word_18572, 0FFFFh
                jnz     short loc_19227
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_1921B:                              ; ...
                stc
                mov     dx, 9D6Ah
                add     dx, cs:off_1B74C
                jmp     loc_192AE
; ---------------------------------------------------------------------------

loc_19227:                              ; ...
                cmp     byte ptr cs:cntry_drv, 0 ; "A:"
                jz      short loc_19234
                mov     dx, 3622h
                jmp     short loc_19237
; ---------------------------------------------------------------------------

loc_19234:                              ; ...
                mov     dx, 3624h

loc_19237:                              ; ...
                mov     ax, 3D00h
                stc
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short loc_19288
                mov     cs:word_13022, ax
                mov     bx, ax
                mov     ax, cs:word_18572
                mov     dx, cs:word_18574
                mov     cx, cs:memhi
                add     cx, 180h
                cmp     cx, cs:word_12F6D
                ja      short loc_192A6
                mov     si, 3622h
                cmp     byte ptr [si], 0
                jnz     short loc_19268
                inc     si
                inc     si

loc_19268:                              ; ...
                les     di, cs:sysi_country
                push    di
                add     di, 8
                call    sub_14F96
                pop     di
                mov     cx, cs:memhi
                mov     ds, cx
                xor     si, si
                call    sub_14DD9
                jnb     short loc_192AE
                cmp     cx, 0FFFFh
                jz      short loc_1921B

loc_19288:                              ; ...
                push    cs
                pop     es
                assume es:SYSINIT
                cmp     byte ptr cs:cntry_drv, 0 ; "A:"
                jz      short loc_19297
                mov     si, 3622h
                jmp     short loc_1929A
; ---------------------------------------------------------------------------

loc_19297:                              ; ...
                mov     si, 3624h

loc_1929A:                              ; ...
                call    badload
                mov     cx, cs:CONFBOT
                mov     es, cx
                assume es:nothing
                jmp     short loc_192BF
; ---------------------------------------------------------------------------

loc_192A6:                              ; ...
                mov     dx, 9D6Ah
                add     dx, cs:off_1B756

loc_192AE:                              ; ...
                mov     cx, cs:CONFBOT
                mov     es, cx
                push    cs
                pop     ds
                assume ds:SYSINIT
                jnb     short loc_192BF
                call    print
                call    sub_1966A

loc_192BF:                              ; ...
                mov     bx, cs:word_13022
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                jmp     loc_18A27
; END OF FUNCTION CHUNK FOR sub_188B9

; =============== S U B R O U T I N E =======================================


sub_192CB       proc near               ; ...
                cmp     ax, 6
                jnz     short loc_192DA
                mov     dx, 9D6Ah
                add     dx, cs:off_1B74C
                jmp     short loc_192E2
; ---------------------------------------------------------------------------

loc_192DA:                              ; ...
                mov     dx, 9D6Ah
                add     dx, cs:off_1B74E

loc_192E2:                              ; ...
                call    print
                call    sub_1966A
                retn
sub_192CB       endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_188B9

loc_192E9:                              ; ...
                cmp     ah, 46h ; 'F'
                jnz     short loc_1931E
                call    sub_14AC6
                jb      short loc_1931E

loc_192F3:                              ; ...
                mov     di, 6AF6h
                xor     cx, cx
                mov     dx, cx

loc_192FA:                              ; ...
                call    sub_195F1
                jnb     short loc_19304
                call    near ptr sub_19620
                jmp     short loc_1931B
; ---------------------------------------------------------------------------

loc_19304:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_19313
                mov     al, byte ptr cs:rv_dword
                mov     cs:byte_18595, al
                jmp     short loc_192FA
; ---------------------------------------------------------------------------

loc_19313:                              ; ...
                mov     al, cs:byte_18595
                mov     cs:FILES, al

loc_1931B:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_1931E:                              ; ...
                cmp     ah, 66h ; 'f'
                jnz     short loc_19330
                call    sub_14AC6
                jb      short loc_19330
                mov     cs:byte_18596, 1
                jmp     short loc_192F3
; ---------------------------------------------------------------------------

loc_19330:                              ; ...
                cmp     ah, 4Ch ; 'L'
                jnz     short loc_1939A
                call    sub_14AC6
                jb      short loc_1939A

loc_1933A:                              ; ...
                call    sub_1936A
                jnb     short loc_19363
                mov     di, 6B4Fh
                xor     cx, cx
                mov     dx, cx

loc_19346:                              ; ...
                call    sub_195F1
                jnb     short loc_19350
                call    near ptr sub_19620
                jmp     short loc_19367
; ---------------------------------------------------------------------------

loc_19350:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_1935F
                mov     al, byte ptr cs:rv_dword
                mov     cs:byte_185E3, al
                jmp     short loc_19346
; ---------------------------------------------------------------------------

loc_1935F:                              ; ...
                mov     al, cs:byte_185E3

loc_19363:                              ; ...
                mov     cs:byte_12F6A, al

loc_19367:                              ; ...
                jmp     loc_18A27
; END OF FUNCTION CHUNK FOR sub_188B9

; =============== S U B R O U T I N E =======================================


sub_1936A       proc near               ; ...
                push    si
                sub     dx, dx

loc_1936D:                              ; ...
                mov     al, es:[si]
                inc     si
                cmp     al, 20h ; ' '
                jbe     short loc_1938C
                sub     al, 30h ; '0'
                jb      short loc_1938A
                cmp     al, 9
                ja      short loc_1938A
                push    ax
                mov     ax, 0Ah
                mul     dx
                xchg    ax, dx
                pop     ax
                cbw
                add     dx, ax
                jmp     short loc_1936D
; ---------------------------------------------------------------------------

loc_1938A:                              ; ...
                sub     dx, dx

loc_1938C:                              ; ...
                pop     si
                xchg    ax, dx
                cmp     ax, 21h ; '!'
                cmc
                jb      short locret_19399
                test    ax, ax
                jnz     short locret_19399
                stc

locret_19399:                           ; ...
                retn
sub_1936A       endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_188B9

loc_1939A:                              ; ...
                cmp     ah, 6Ch ; 'l'
                jnz     short loc_193AC
                call    sub_14AC6
                jb      short loc_193AC
                mov     cs:byte_185E4, 1
                jmp     short loc_1933A
; ---------------------------------------------------------------------------

loc_193AC:                              ; ...
                cmp     ah, 50h ; 'P'
                jnz     short loc_193CD
                call    sub_14AC6
                jb      short loc_193CD
                call    sub_13A69
                call    sub_13AAC
                jb      loc_19618
                call    sub_139FF
                call    sub_13A69
                jb      loc_19618
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_193CD:                              ; ...
                cmp     ah, 4Bh ; 'K'
                jz      short loc_193DA
                cmp     ah, 6Bh ; 'k'
                jz      short loc_193DA

loc_193D7:                              ; ...
                jmp     loc_19486
; ---------------------------------------------------------------------------

loc_193DA:                              ; ...
                call    sub_14AC6
                jb      short loc_193D7
                cmp     ah, 6Bh ; 'k'
                jnz     short loc_193EA
                mov     cs:byte_1861E, 1

loc_193EA:                              ; ...
                mov     di, 6B65h
                xor     cx, cx
                mov     dx, cx

loc_193F1:                              ; ...
                call    sub_195F1
                jnb     short loc_193FD
                call    print_x
                adc     ax, [bx+si+6CEBh]

loc_193FD:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_19417
                mov     ax, word ptr cs:rv_dword
                cmp     cx, 1
                jnz     short loc_19411
                mov     cs:word_1861A, ax
                jmp     short loc_193F1
; ---------------------------------------------------------------------------

loc_19411:                              ; ...
                mov     cs:word_1861C, ax
                jmp     short loc_193F1
; ---------------------------------------------------------------------------

loc_19417:                              ; ...
                cmp     cs:word_1861A, 0
                jz      short loc_19438
                cmp     cs:word_1861A, 8
                jb      short loc_1942F
                cmp     cs:word_1861C, 20h ; ' '
                jnb     short loc_19436

loc_1942F:                              ; ...
                mov     cs:word_1861A, 0FFFFh

loc_19436:                              ; ...
                jmp     short loc_19447
; ---------------------------------------------------------------------------

loc_19438:                              ; ...
                cmp     cs:word_1861C, 0
                jz      short loc_19447
                mov     cs:word_1861A, 0FFFFh

loc_19447:                              ; ...
                cmp     cs:word_1861A, 0FFFFh
                jnz     short loc_1946C
                mov     cs:stackcount, 9
                mov     cs:stacksize, 100h
                mov     cs:stacks, 0
                call    print_x
                adc     ax, [bx+si+30E9h]
; END OF FUNCTION CHUNK FOR sub_188B9
; ---------------------------------------------------------------------------
                db    1
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_188B9

loc_1946C:                              ; ...
                mov     ax, cs:word_1861A
                mov     cs:stackcount, ax
                mov     ax, cs:word_1861C
                mov     cs:stacksize, ax
                mov     cs:stacks, 0FFFFh
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_19486:                              ; ...
                cmp     ah, 6Bh ; 'k'
                jz      loc_193DA
                cmp     ah, 53h ; 'S'
                jnz     short loc_194F0
                call    sub_14AC6
                jb      short loc_194F0
                mov     cs:byte_1634C, 1
                mov     cs:word_1639D, 0
                mov     di, 48D0h
                mov     [di-1], al

loc_194AA:                              ; ...
                call    sub_1964A
                or      al, al
                jz      short loc_194C0
                cmp     al, 20h ; ' '
                jb      short loc_194E1
                mov     [di], al
                inc     di
                cmp     di, 490Eh
                jb      short loc_194AA
                jmp     short loc_194E1
; ---------------------------------------------------------------------------

loc_194C0:                              ; ...
                mov     byte ptr [di], 0
                mov     di, 491Eh

loc_194C6:                              ; ...
                call    sub_1964A
                cmp     al, 20h ; ' '
                jb      short loc_194D6
                mov     [di], al
                inc     di
                cmp     di, 499Bh
                jb      short loc_194C6

loc_194D6:                              ; ...
                mov     cx, di
                sub     cx, 491Eh
                mov     byte ptr cs:word_1639D, cl

loc_194E1:                              ; ...
                mov     byte ptr [di], 0

loc_194E4:                              ; ...
                cmp     al, 0Ah
                jz      short loc_194ED
                call    sub_1964A
                jnb     short loc_194E4

loc_194ED:                              ; ...
                jmp     loc_189D4
; ---------------------------------------------------------------------------

loc_194F0:                              ; ...
                cmp     ah, 58h ; 'X'
                jnz     short loc_19530
                call    sub_14AC6
                jb      short loc_19530

loc_194FA:                              ; ...
                mov     di, 6B17h
                xor     cx, cx
                mov     dx, cx

loc_19501:                              ; ...
                call    sub_195F1
                jnb     short loc_1950B
                call    near ptr sub_19620
                jmp     short loc_1952D
; ---------------------------------------------------------------------------

loc_1950B:                              ; ...
                cmp     ax, 0FFFFh
                jz      short loc_19525
                mov     al, byte ptr cs:rv_dword
                cmp     cx, 1
                jnz     short loc_1951F
                mov     cs:byte_185CC, al
                jmp     short loc_19523
; ---------------------------------------------------------------------------

loc_1951F:                              ; ...
                mov     cs:byte_185CD, al

loc_19523:                              ; ...
                jmp     short loc_19501
; ---------------------------------------------------------------------------

loc_19525:                              ; ...
                mov     al, cs:byte_185CC
                mov     byte ptr cs:word_12F68, al

loc_1952D:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_19530:                              ; ...
                cmp     ah, 78h ; 'x'
                jnz     short loc_19542
                call    sub_14AC6
                jb      short loc_19542
                mov     cs:byte_185CE, 1
                jmp     short loc_194FA
; ---------------------------------------------------------------------------

loc_19542:                              ; ...
                cmp     ah, 31h ; '1'
                jz      short loc_19549
                jmp     short loc_1958A
; ---------------------------------------------------------------------------

loc_19549:                              ; ...
                cmp     cs:byte_186AD, 1
                push    ds
                mov     ax, 70h
                mov     ds, ax
                assume ds:nothing
                jnz     short loc_19561
                mov     ds:keyrd_func, 0
                mov     ds:keysts_func, 1

loc_19561:                              ; ...
                mov     al, cs:byte_186AE
                or      ds:8, al
                push    es
                push    bx
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                cmp     cs:byte_186AF, 0
                jz      short $+2

loc_19577:                              ; ...
                cmp     cs:byte_186B0, 0
                jz      short loc_19584
                or      byte ptr es:[bx+60h], 8

loc_19584:                              ; ...
                pop     bx
                pop     es
                pop     ds
                assume ds:nothing
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_1958A:                              ; ...
                cmp     ah, 56h ; 'V'
                jnz     short loc_195A1
                call    sub_14AC6
                jb      short loc_195A1
                mov     dx, 1
                call    sub_14587
                jnb     short loc_195BF

loc_1959C:                              ; ...
                call    sub_1966A
                jmp     short loc_195BF
; ---------------------------------------------------------------------------

loc_195A1:                              ; ...
                cmp     ah, 4Eh ; 'N'
                jnz     short loc_195B2
                call    sub_14AC6
                jb      short loc_195B2
                call    sub_14251
                jb      short loc_1959C
                jmp     short loc_195BF
; ---------------------------------------------------------------------------

loc_195B2:                              ; ...
                cmp     ah, 59h ; 'Y'
                jnz     short loc_195C2

loc_195B7:                              ; ...
                dec     word ptr ds:15A0h
                inc     word ptr ds:159Ch

loc_195BF:                              ; ...
                jmp     loc_18A27
; ---------------------------------------------------------------------------

loc_195C2:                              ; ...
                cmp     ah, 30h ; '0'
                jz      short loc_195B7
                cmp     ah, 0FFh
                jz      short loc_195B7
                dec     word ptr ds:15A0h
                inc     word ptr ds:159Ch
                jmp     short loc_19618
; END OF FUNCTION CHUNK FOR sub_188B9

; =============== S U B R O U T I N E =======================================


sub_195D6       proc near               ; ...
                push    es
                mov     ax, cs:area
                dec     ax
                mov     es, ax
                add     ax, es:3
                inc     ax
                cmp     ax, cs:word_12F6D
                ja      short loc_195EF
                mov     cs:word_12F6D, ax

loc_195EF:                              ; ...
                pop     es
                retn
sub_195D6       endp


; =============== S U B R O U T I N E =======================================


sub_195F1       proc near               ; ...
                push    es
                push    ds
                push    es
                pop     ds
                push    cs
                pop     es
                assume es:SYSINIT
                mov     cs:word_17B4D, ds
                mov     cs:word_17B4B, si
                mov     dx, 0
                call    sub_17C79
                cmp     ax, 0
                jz      short loc_19611
                cmp     ax, 0FFFFh
                jnz     short loc_19614

loc_19611:                              ; ...
                clc
                jmp     short loc_19615
; ---------------------------------------------------------------------------

loc_19614:                              ; ...
                stc

loc_19615:                              ; ...
                pop     ds
                pop     es
                assume es:nothing
                retn
sub_195F1       endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_188B9

loc_19618:                              ; ...
                call    print_x
                add     al, 80h
                jmp     loc_1959C
; END OF FUNCTION CHUNK FOR sub_188B9

; =============== S U B R O U T I N E =======================================


sub_19620       proc far                ; ...
                push    ds
                push    dx
                push    si
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    print_x
                push    es
                add     ch, 36h
                retf
sub_19620       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                pusha

loc_1962E:                              ; ...
                mov     dl, [si]
                cmp     dl, 0Dh
                jz      short loc_1963C
                mov     ah, 2
                int     21h             ; DOS - DISPLAY OUTPUT
                                        ; DL = character to send to standard output
                inc     si
                jmp     short loc_1962E
; ---------------------------------------------------------------------------

loc_1963C:                              ; ...
                push    cs
                pop     ds
                call    print_x
                add     ax, 0E880h
                and     al, 0
                pop     si
                pop     dx
                pop     ds
                assume ds:nothing
                retn

; =============== S U B R O U T I N E =======================================


sub_1964A       proc near               ; ...
                push    cx
                mov     cx, cs:word_1301C
                jcxz    short loc_19667
                mov     si, cs:word_13020
                mov     al, es:[si]
                dec     cs:word_1301C
                inc     cs:word_13020
                clc

loc_19665:                              ; ...
                pop     cx
                retn
; ---------------------------------------------------------------------------

loc_19667:                              ; ...
                stc
                jmp     short loc_19665
sub_1964A       endp


; =============== S U B R O U T I N E =======================================


sub_1966A       proc near               ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                cmp     word_12F79, 0
                jz      short locret_1967B
                call    print_x
                adc     al, 80h
                call    sub_1967C

locret_1967B:                           ; ...
                retn
sub_1966A       endp


; =============== S U B R O U T I N E =======================================


sub_1967C       proc near               ; ...
                push    es
                push    ds
                push    di
                push    cs
                pop     es
                assume es:SYSINIT
                push    cs
                pop     ds
                mov     di, 14FFh
                mov     cx, 0Ah
                mov     ax, word_12F79

loc_1968C:                              ; ...
                cmp     ax, 0Ah
                jb      short loc_1969D
                xor     dx, dx
                div     cx
                or      dl, 30h
                mov     [di], dl
                dec     di
                jmp     short loc_1968C
; ---------------------------------------------------------------------------

loc_1969D:                              ; ...
                or      al, 30h
                mov     [di], al
                mov     dx, di
                call    print
                pop     di
                pop     ds
                assume ds:nothing
                pop     es
                assume es:nothing
                retn
sub_1967C       endp


; =============== S U B R O U T I N E =======================================


sub_196AA       proc near               ; ...
                xor     ax, ax
                cwd
                inc     cs:byte_186B2
                jnz     short $+2

loc_196B4:                              ; ...
                mov     al, cs:result_val_itag
                dec     ax
                jz      short locret_19722
                dec     ax
                jz      short locret_19722
                dec     ax
                jz      short loc_1971C
                dec     ax
                jz      short loc_19715
                dec     ax
                jz      short loc_196CD
                dec     ax
                jz      short loc_196D5
                dec     ax
                jz      short loc_196F5

loc_196CD:                              ; ...
                mov     cs:byte_12F5A, 1
                jmp     short loc_196DB
; ---------------------------------------------------------------------------

loc_196D5:                              ; ...
                mov     cs:byte_12F5A, 0

loc_196DB:                              ; ...
                push    ds
                mov     ax, 70h ; 'p'
                mov     ds, ax
                assume ds:nothing
                and     byte ptr ds:9, 0EFh
                cmp     cs:byte_12F5A, 0
                jz      short loc_196F3
                or      byte ptr ds:9, 10h

loc_196F3:                              ; ...
                pop     ds
                assume ds:nothing
                retn
; ---------------------------------------------------------------------------

loc_196F5:                              ; ...
                dec     cs:byte_186B2
                jge     short $+2

loc_196FC:                              ; ...
                or      cs:byte_15145, 80h
                or      cs:byte_15140, 40h
                push    ds
                mov     ds, cs:BCodeSeg
                or      byte ptr ds:1F87h, 0C0h
                pop     ds
                retn
; ---------------------------------------------------------------------------

loc_19715:                              ; ...
                mov     cs:byte_18751, 0
                retn
; ---------------------------------------------------------------------------

loc_1971C:                              ; ...
                mov     cs:byte_18751, 0FFh

locret_19722:                           ; ...
                retn
sub_196AA       endp


; =============== S U B R O U T I N E =======================================


sub_19723       proc near               ; ...
                mov     ax, cs:word_12F6D
                mov     di, 6CE7h
                mov     cx, 1
                call    sub_198F1
                jz      short loc_1973E
                cmp     cs:byte_18761, 0
                jz      short locret_19741
                mov     ax, cs:word_18746

loc_1973E:                              ; ...
                call    sub_19742

locret_19741:                           ; ...
                retn
sub_19723       endp


; =============== S U B R O U T I N E =======================================


sub_19742       proc near               ; ...
                push    ds
                mov     bx, 40h ; '@'
                mov     ds, bx
                assume ds:nothing
                mov     bx, ds:13h
                mov     cs:word_18765, bx
                shr     ax, 6
                mov     ds:13h, ax
                or      cs:byte_18764, 1
                pop     ds
                assume ds:nothing
                retn
sub_19742       endp


; =============== S U B R O U T I N E =======================================


sub_1975F       proc near               ; ...
                test    cs:byte_18764, 1
                jz      short locret_1977B
                push    ds
                mov     ax, 40h ; '@'
                mov     ds, ax
                assume ds:nothing
                mov     ax, cs:word_18765
                mov     ds:13h, ax
                pop     ds
                assume ds:nothing
                and     cs:byte_18764, 0FEh

locret_1977B:                           ; ...
                retn
sub_1975F       endp


; =============== S U B R O U T I N E =======================================


sub_1977C       proc near               ; ...
                test    ax, ax
                jnz     loc_1982C
                mov     di, 6D0Fh
                mov     cx, 1
                mov     bx, 12h
                call    sub_198F4
                jz      short loc_197DB
                mov     di, 6CEFh
                mov     cx, 1
                call    sub_198F1
                jz      loc_19836
                mov     di, 6D07h
                mov     cx, 1
                call    sub_198F1
                jz      short loc_19819
                mov     di, 6CF7h
                mov     cx, 1
                call    sub_198F1
                jz      loc_19836
                mov     di, 6CFFh
                mov     cx, 1
                call    sub_198F1
                jz      short loc_19836
                mov     di, 46BBh
                mov     cx, 1
                call    sub_198F1
                jnz     locret_198F0
                mov     di, 6CF7h
                mov     cx, 80h
                call    sub_198F1
                jz      short loc_19836
                jmp     locret_198F0
; ---------------------------------------------------------------------------

loc_197DB:                              ; ...
                pusha
                push    es
                mov     ah, 0Dh
                int     21h             ; DOS - DISK RESET
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     cx, es:[bx+10h]
                shr     cx, 1
                les     bx, es:[bx+12h]
                les     bx, es:[bx]
                mov     di, bx
                xor     ax, ax
                cld

loc_197F7:                              ; ...
                test    byte ptr es:[di+5], 40h
                jnz     short loc_1980D
                mov     word ptr es:[di+4], 0FFh
                push    di
                push    cx
                add     di, 18h
                rep stosw
                pop     cx
                pop     di

loc_1980D:                              ; ...
                mov     di, es:[di]
                cmp     di, bx
                jnz     short loc_197F7
                pop     es
                popa
                jmp     locret_198F0
; ---------------------------------------------------------------------------

loc_19819:                              ; ...
                mov     ax, cs:word_18797
                mov     word ptr cs:byte_11C93+11h, ax
                mov     ax, cs:word_18799
                mov     word ptr cs:byte_11C93+13h, ax
                jmp     locret_198F0
; ---------------------------------------------------------------------------

loc_1982C:                              ; ...
                test    cs:byte_18764, 2
                jz      locret_198F0

loc_19836:                              ; ...
                mov     bp, 315h
                and     cs:byte_18764, 0FDh
                test    ax, ax
                jnz     short loc_1984C
                mov     bp, 37Ch
                or      cs:byte_18764, 2

loc_1984C:                              ; ...
                call    near ptr sub_1AE15
                push    ds
                push    es
                sub     cx, cx
                mov     ds, cx
                assume ds:BIOSDATA
                mov     cx, 70h ; 'p'
                test    ax, ax
                jnz     short loc_19898
                cmp     word ptr aClock+4, cx ; "K$  "
                jnz     short loc_19879
                mov     es, cx
                assume es:nothing
                les     di, es:15Eh
                assume es:nothing
                cli
                mov     word ptr aClock+2, di ; "OCK$  "
                mov     word ptr aClock+4, es ; "K$  "
                sti
                or      cs:byte_18764, 4

loc_19879:                              ; ...
                cmp     word ptr dword_13E, cx
                jnz     short loc_198EE
                mov     es, cx
                assume es:nothing
                les     di, es:162h
                assume es:nothing
                cli
                mov     word ptr dword_13A+2, di
                mov     word ptr dword_13E, es
                sti
                or      cs:byte_18764, 8
                jmp     short loc_198EE
; ---------------------------------------------------------------------------

loc_19898:                              ; ...
                test    cs:byte_18764, 4
                jz      short loc_198C3
                les     di, dword ptr aClock+2 ; "OCK$  "
                mov     ax, es
                mov     es, cx
                assume es:nothing
                mov     es:15Eh, di
                mov     es:160h, ax
                cli
                mov     word ptr aClock+2, 3F9h ; "OCK$  "
                mov     word ptr aClock+4, cx ; "K$  "
                sti
                and     cs:byte_18764, 0FBh

loc_198C3:                              ; ...
                test    cs:byte_18764, 8
                jz      short loc_198EE
                les     di, dword_13A+2
                assume es:nothing
                mov     ax, es
                mov     es, cx
                assume es:nothing
                mov     es:162h, di
                mov     es:164h, ax
                cli
                mov     word ptr dword_13A+2, 43Fh
                mov     word ptr dword_13E, cx
                sti
                and     cs:byte_18764, 0F7h

loc_198EE:                              ; ...
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing

locret_198F0:                           ; ...
                retn
sub_1977C       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_198F1       proc near               ; ...
                mov     bx, 0Ah
sub_198F1       endp


; =============== S U B R O U T I N E =======================================


sub_198F4       proc near               ; ...
                cld
                push    ds
                push    es
                push    si
                lds     si, cs:dword_18748
                add     si, bx
                push    cs
                pop     es
                assume es:SYSINIT

loc_19901:                              ; ...
                push    si
                push    di
                push    cx
                mov     cx, 8
                repe cmpsb
                pop     cx
                pop     di
                pop     si
                lea     si, [si+1]
                loopne  loc_19901
                pop     si
                pop     es
                assume es:nothing
                pop     ds
                retn
sub_198F4       endp


; =============== S U B R O U T I N E =======================================


sub_19915       proc near               ; ...
                push    ds
                mov     ah, 62h
                int     21h             ; DOS - 3+ - GET PSP ADDRESS
                mov     ds, bx
                mov     bx, cs:word_12F6D
                mov     ds:2, bx
                pop     ds
                retn
sub_19915       endp


; =============== S U B R O U T I N E =======================================


sub_19927       proc near               ; ...
                push    ax
                push    cx
                push    di
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                xor     ax, ax
                mov     es:byte_1870B, al
                mov     es:byte_1870A, al
                mov     es:word_1870C, ax
                mov     es:byte_1870E, 0FFh
                mov     es:byte_18741, al
                cld
                mov     cx, 10h
                mov     di, 6C8Fh
                rep stosb
                mov     cx, 10h
                mov     di, 6C9Fh
                rep stosw
                pop     es
                assume es:nothing
                pop     di
                pop     cx
                pop     ax
                retn
sub_19927       endp


; =============== S U B R O U T I N E =======================================


sub_1995B       proc near               ; ...
                push    ax
                push    bx
                push    cx
                push    dx
                push    es
                call    sub_199B2
                call    sub_19BBF
                jb      short loc_199A9
                mov     es, ax
                xor     dx, dx
                mov     cx, dx
                inc     dx

loc_1996F:                              ; ...
                mov     al, es:0
                mov     bx, es:1
                or      bx, dx
                jnz     short loc_19994
                mov     bx, es:3
                mov     es, cx
                assume es:BIOSDATA
                mov     byte ptr es:loc_0, al
                add     bx, es:DosDataSg
                add     bx, 1
                mov     es:DosDataSg, bx

loc_19994:                              ; ...
                mov     cx, es
                mov     dx, word ptr es:loc_0+1
                mov     bx, es
                add     bx, es:DosDataSg
                inc     bx
                mov     es, bx
                assume es:nothing
                cmp     al, 5Ah ; 'Z'
                jnz     short loc_1996F

loc_199A9:                              ; ...
                call    sub_199C8
                pop     es
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                retn
sub_1995B       endp


; =============== S U B R O U T I N E =======================================


sub_199B2       proc near               ; ...
                mov     ax, 5802h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) get UMB link state
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                mov     es:byte_1873F, al
                pop     es
                assume es:nothing
                mov     ax, 5803h
                mov     bx, 1
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) set UMB link state
                retn
sub_199B2       endp


; =============== S U B R O U T I N E =======================================


sub_199C8       proc near               ; ...
                xor     bx, bx
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     bl, byte_1873F
                pop     ds
                assume ds:nothing
                mov     ax, 5803h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) set UMB link state
                retn
sub_199C8       endp


; =============== S U B R O U T I N E =======================================


sub_199D8       proc near               ; ...
                push    di
                push    ds
                push    es
                push    es
                pop     ds
                cld

loc_199DE:                              ; ...
                lodsb
                call    sub_19A94
                jz      short loc_199DE
                cmp     al, 2Fh ; '/'
                jz      short loc_199EC
                dec     si
                clc
                jmp     short loc_19A14
; ---------------------------------------------------------------------------

loc_199EC:                              ; ...
                lodsb
                and     al, 0DFh
                cmp     al, 53h ; 'S'
                jnz     short loc_19A02
                call    sub_19A75
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                mov     es:byte_1870B, 1
                pop     es
                assume es:nothing
                jmp     short loc_199DE
; ---------------------------------------------------------------------------

loc_19A02:                              ; ...
                cmp     al, 4Ch ; 'L'
                jnz     short loc_19A0E
                call    sub_19A18
                jnb     short loc_199DE
                dec     si
                jmp     short loc_19A11
; ---------------------------------------------------------------------------

loc_19A0E:                              ; ...
                mov     ax, 3

loc_19A11:                              ; ...
                dec     si
                dec     si
                stc

loc_19A14:                              ; ...
                pop     es
                pop     ds
                pop     di
                retn
sub_199D8       endp


; =============== S U B R O U T I N E =======================================


sub_19A18       proc near               ; ...
                lodsb
                cmp     al, 3Ah ; ':'
                jnz     short loc_19A67

loc_19A1D:                              ; ...
                call    sub_19B3F
                jb      short loc_19A6D
                call    sub_19C33
                mov     cl, al
                call    sub_19AC1
                jb      short loc_19A6D
                call    sub_19A75
                lodsb
                cmp     al, 3Bh ; ';'
                jz      short loc_19A1D
                call    sub_19A94
                jz      short loc_19A73
                call    sub_19A89
                jz      short loc_19A72
                cmp     al, 2Fh ; '/'
                jz      short loc_19A72
                cmp     al, 2Ch ; ','
                jnz     short loc_19A67
                call    sub_19B3F
                jb      short loc_19A67
                call    sub_19BB1
                call    sub_19AF5
                call    sub_19A75
                lodsb
                cmp     al, 3Bh ; ';'
                jz      short loc_19A1D
                call    sub_19A94
                jz      short loc_19A73
                call    sub_19A89
                jz      short loc_19A72
                cmp     al, 2Fh ; '/'
                jz      short loc_19A72

loc_19A67:                              ; ...
                mov     ax, 1
                dec     si
                stc
                retn
; ---------------------------------------------------------------------------

loc_19A6D:                              ; ...
                mov     ax, 2
                stc
                retn
; ---------------------------------------------------------------------------

loc_19A72:                              ; ...
                dec     si

loc_19A73:                              ; ...
                clc
                retn
sub_19A18       endp


; =============== S U B R O U T I N E =======================================


sub_19A75       proc near               ; ...
                push    ax
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     al, byte_18741
                pop     ds
                assume ds:nothing
                inc     al
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                mov     es:byte_18741, al
                pop     es
                assume es:nothing
                pop     ax
                retn
sub_19A75       endp


; =============== S U B R O U T I N E =======================================


sub_19A89       proc near               ; ...
                cmp     al, 0
                jz      short locret_19A93
                cmp     al, 0Dh
                jz      short locret_19A93
                cmp     al, 0Ah

locret_19A93:                           ; ...
                retn
sub_19A89       endp


; =============== S U B R O U T I N E =======================================


sub_19A94       proc near               ; ...
                cmp     al, 20h ; ' '
                jz      short locret_19A9E
                cmp     al, 3Dh ; '='
                jz      short locret_19A9E
                cmp     al, 9

locret_19A9E:                           ; ...
                retn
sub_19A94       endp


; =============== S U B R O U T I N E =======================================


sub_19A9F       proc near               ; ...
                push    ax
                push    bx
                push    di
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                xor     ah, ah
                mov     bx, ax
                mov     byte ptr es:[bx+6C8Fh], 0
                cmp     es:byte_1870E, al
                jnz     short loc_19ABC
                mov     es:byte_1870E, 0

loc_19ABC:                              ; ...
                pop     es
                assume es:nothing
                pop     di
                pop     bx
                pop     ax
                retn
sub_19A9F       endp


; =============== S U B R O U T I N E =======================================


sub_19AC1       proc near               ; ...
                cmp     al, 10h
                jb      short loc_19AC7
                stc
                retn
; ---------------------------------------------------------------------------

loc_19AC7:                              ; ...
                push    bx
                push    di
                push    si
                push    ds
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                push    cs
                pop     ds
                assume ds:SYSINIT
                cmp     byte_1870E, 0FFh
                jnz     short loc_19ADA
                mov     byte_1870E, al

loc_19ADA:                              ; ...
                or      al, al
                jz      short loc_19AEF
                mov     bl, al
                xor     bh, bh
                mov     ax, 1
                xchg    al, es:[bx+6C8Fh]
                or      al, al
                jz      short loc_19AEF
                stc

loc_19AEF:                              ; ...
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                pop     bx
                retn
sub_19AC1       endp


; =============== S U B R O U T I N E =======================================


sub_19AF5       proc near               ; ...
                push    bx
                push    di
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                mov     bl, cl
                mov     bh, 0
                shl     bl, 1
                mov     es:[bx+6C9Fh], ax
                pop     es
                assume es:nothing
                pop     di
                pop     bx
                retn
sub_19AF5       endp

; ---------------------------------------------------------------------------
word_19B09      dw 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_19B0B       proc near               ; ...
                cmp     cs:word_19B09, 10h
                jnz     short loc_19B2F
                cmp     cl, 61h ; 'a'
                jb      short loc_19B21
                cmp     cl, 66h ; 'f'
                ja      short loc_19B3D
                sub     cl, 57h ; 'W'
                retn
; ---------------------------------------------------------------------------

loc_19B21:                              ; ...
                cmp     cl, 41h ; 'A'
                jb      short loc_19B2F
                cmp     cl, 46h ; 'F'
                ja      short loc_19B3D
                sub     cl, 37h ; '7'
                retn
; ---------------------------------------------------------------------------

loc_19B2F:                              ; ...
                cmp     cl, 30h ; '0'
                jb      short loc_19B3D
                cmp     cl, 39h ; '9'
                ja      short loc_19B3D
                sub     cl, 30h ; '0'
                retn
; ---------------------------------------------------------------------------

loc_19B3D:                              ; ...
                stc
                retn
sub_19B0B       endp


; =============== S U B R O U T I N E =======================================


sub_19B3F       proc near               ; ...
                push    bx
                push    cx
                push    ds
                cld
                xor     ax, ax
                xor     bx, bx
                xor     cx, cx
                xor     dx, dx
                mov     cs:word_19B09, 0Ah
                mov     cl, es:[si]
                call    sub_19B0B
                jb      short loc_19B8B
                or      cl, cl
                jnz     short loc_19B75
                mov     cl, es:[si+1]
                cmp     cl, 78h ; 'x'
                jz      short loc_19B6C
                cmp     cl, 58h ; 'X'
                jnz     short loc_19B75

loc_19B6C:                              ; ...
                mov     cs:word_19B09, 10h
                inc     si
                inc     si

loc_19B75:                              ; ...
                mov     cl, es:[si]
                inc     si
                call    sub_19B0B
                jb      short loc_19B8E
                call    sub_19B94
                jb      short loc_19B90
                add     ax, cx
                adc     dx, bx
                jb      short loc_19B90
                jmp     short loc_19B75
; ---------------------------------------------------------------------------

loc_19B8B:                              ; ...
                stc
                jmp     short loc_19B90
; ---------------------------------------------------------------------------

loc_19B8E:                              ; ...
                dec     si
                clc

loc_19B90:                              ; ...
                pop     ds
                pop     cx
                pop     bx
                retn
sub_19B3F       endp


; =============== S U B R O U T I N E =======================================


sub_19B94       proc near               ; ...
                push    ax
                mov     ax, dx
                mul     cs:word_19B09
                jb      short loc_19BAF
                mov     dx, ax
                pop     ax
                xchg    dx, bx

loc_19BA3:
                mul     cs:word_19B09
                xchg    dx, bx
                add     dx, bx
                xor     bx, bx
                retn
; ---------------------------------------------------------------------------

loc_19BAF:                              ; ...
                pop     ax
                retn
sub_19B94       endp


; =============== S U B R O U T I N E =======================================


sub_19BB1       proc near               ; ...
                push    cx
                mov     cl, 4
                shr     ax, cl
                xchg    ax, dx
                mov     cl, 0Ch
                shl     ax, cl
                or      ax, dx
                pop     cx
                retn
sub_19BB1       endp


; =============== S U B R O U T I N E =======================================


sub_19BBF       proc near               ; ...
                push    si
                push    ds
                push    es
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     ax, es:8Ch
                cmp     ax, 0FFFFh
                jz      short loc_19BD2
                clc
                jmp     short loc_19BD3
; ---------------------------------------------------------------------------

loc_19BD2:                              ; ...
                stc

loc_19BD3:                              ; ...
                pop     es
                pop     ds
                pop     si
                retn
sub_19BBF       endp


; =============== S U B R O U T I N E =======================================


sub_19BD7       proc near               ; ...
                push    ax
                mov     ax, es:1
                cmp     ax, 8
                jz      short loc_19BE8
                cmp     ax, 9
                jz      short loc_19BE8
                jmp     short loc_19BEF
; ---------------------------------------------------------------------------

loc_19BE8:                              ; ...
                mov     ax, es:8
                cmp     ax, 4353h

loc_19BEF:                              ; ...
                pop     ax
                retn
sub_19BD7       endp


; =============== S U B R O U T I N E =======================================


sub_19BF1       proc near               ; ...
                push    cx
                push    dx
                push    es
                mov     dx, ax
                call    sub_19BBF
                jb      short loc_19C2A
                mov     es, ax
                xor     cx, cx

loc_19BFF:                              ; ...
                mov     ax, es
                cmp     ax, dx
                jnb     short loc_19C2D
                call    sub_19BD7
                jnz     short loc_19C0B
                inc     cx

loc_19C0B:                              ; ...
                mov     al, es:0
                cmp     al, 5Ah ; 'Z'
                jz      short loc_19C1F
                mov     ax, es
                add     ax, es:3
                inc     ax
                mov     es, ax
                jmp     short loc_19BFF
; ---------------------------------------------------------------------------

loc_19C1F:                              ; ...
                mov     ax, es
                add     ax, es:3
                cmp     ax, dx
                jnb     short loc_19C2D

loc_19C2A:                              ; ...
                xor     cx, cx
                dec     cx

loc_19C2D:                              ; ...
                mov     ax, cx
                pop     es
                pop     dx
                pop     cx
                retn
sub_19BF1       endp


; =============== S U B R O U T I N E =======================================


sub_19C33       proc near               ; ...
                cmp     cs:word_19B09, 10h
                jnz     short locret_19C44
                call    sub_19BF1
                cmp     ax, 0FFFFh
                jnz     short locret_19C44
                inc     ax

locret_19C44:                           ; ...
                retn
sub_19C33       endp


; =============== S U B R O U T I N E =======================================


sub_19C45       proc near               ; ...
                push    ax
                push    bx
                call    sub_199B2
                pop     bx
                pop     ax
                retn
sub_19C45       endp

; ---------------------------------------------------------------------------
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     al, byte_1870E
                cmp     al, 0FFh
                jnz     short loc_19C5C
                mov     al, 1
                stc
                jmp     short loc_19C63
; ---------------------------------------------------------------------------

loc_19C5C:                              ; ...
                or      al, al
                jz      short loc_19C63
                mov     al, 1
                clc

loc_19C63:                              ; ...
                pop     ds
                assume ds:nothing
                retn

; =============== S U B R O U T I N E =======================================


sub_19C65       proc near               ; ...
                push    ax
                push    cx
                push    ds
                push    es
                call    sub_19F63
                jb      short loc_19CA5
                call    sub_1995B
                call    sub_19C45
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                mov     es:byte_1870A, 1
                pop     es
                assume es:nothing
                call    sub_19CAA
                cmp     al, 0FFh
                jz      short loc_19CA5
                xor     cx, cx

loc_19C87:                              ; ...
                inc     cx
                cmp     cx, 10h
                jnb     short loc_19C9B
                mov     al, cl
                push    es
                call    sub_19D7A
                pop     es
                jb      short loc_19C9B
                call    sub_19E5C
                jmp     short loc_19C87
; ---------------------------------------------------------------------------

loc_19C9B:                              ; ...
                call    sub_19CAA
                or      al, al
                jnz     short loc_19CA5
                call    sub_19FA1

loc_19CA5:                              ; ...
                pop     es
                pop     ds
                pop     cx
                pop     ax
                retn
sub_19C65       endp


; =============== S U B R O U T I N E =======================================


sub_19CAA       proc near               ; ...
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     al, byte_1870E
                pop     ds
                assume ds:nothing
                retn
sub_19CAA       endp


; =============== S U B R O U T I N E =======================================


sub_19CB2       proc near               ; ...
                push    bx
                push    si
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     al, byte_1870E
                xor     ah, ah
                mov     bx, 6C9Fh
                shl     al, 1
                add     ax, bx
                mov     si, ax
                lodsw
                pop     ds
                assume ds:nothing
                pop     si
                pop     bx
                retn
sub_19CB2       endp


; =============== S U B R O U T I N E =======================================


sub_19CCA       proc near               ; ...
                push    bx
                push    si
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                xor     ah, ah
                mov     bx, 6C9Fh
                shl     al, 1
                add     ax, bx
                mov     si, ax
                lodsw
                pop     ds
                assume ds:nothing
                pop     si
                pop     bx
                retn
sub_19CCA       endp

; ---------------------------------------------------------------------------
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                mov     es:byte_1870E, al
                pop     es
                assume es:nothing
                retn

; =============== S U B R O U T I N E =======================================


sub_19CE8       proc near               ; ...
                push    dx
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dl, byte_1870E
                pop     ds
                assume ds:nothing
                cmp     dl, 0FFh
                jz      short loc_19CF9
                call    sub_19AF5

loc_19CF9:                              ; ...
                pop     dx
                retn
sub_19CE8       endp


; =============== S U B R O U T I N E =======================================


sub_19CFB       proc near               ; ...
                push    ax
                push    es
                call    sub_19D7A
                jb      short loc_19D23

loc_19D02:                              ; ...
                call    sub_19BD7
                jz      short loc_19D23
                call    sub_19D32
                jnz     short loc_19D0F
                call    sub_19D39

loc_19D0F:                              ; ...
                mov     al, es:0
                cmp     al, 5Ah ; 'Z'
                jz      short loc_19D23
                mov     ax, es
                add     ax, es:3
                inc     ax
                mov     es, ax
                jmp     short loc_19D02
; ---------------------------------------------------------------------------

loc_19D23:                              ; ...
                pop     es
                pop     ax
                retn
sub_19CFB       endp


; =============== S U B R O U T I N E =======================================


sub_19D26       proc near               ; ...
                push    ax
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     al, byte_1870B
                pop     ds
                assume ds:nothing
                or      al, al
                pop     ax
                retn
sub_19D26       endp


; =============== S U B R O U T I N E =======================================


sub_19D32       proc near               ; ...
                or      word ptr es:1, 0
                retn
sub_19D32       endp


; =============== S U B R O U T I N E =======================================


sub_19D39       proc near               ; ...
                mov     word ptr es:1, 8
                mov     word ptr es:8, 4948h
                mov     word ptr es:0Ah, 4444h
                mov     word ptr es:0Ch, 4E45h
                mov     word ptr es:0Eh, 2020h
                retn
sub_19D39       endp


; =============== S U B R O U T I N E =======================================


sub_19D5D       proc near               ; ...
                push    ax
                mov     word ptr es:1, 0
                mov     ax, 2020h
                mov     es:8, ax
                mov     es:0Ah, ax
                mov     es:0Ch, ax
                mov     es:0Eh, ax
                pop     ax
                retn
sub_19D5D       endp


; =============== S U B R O U T I N E =======================================


sub_19D7A       proc near               ; ...
                push    ax
                push    cx
                push    dx
                xor     ah, ah
                mov     dx, ax
                call    sub_19BBF
                mov     es, ax
                xor     cx, cx

loc_19D88:                              ; ...
                cmp     cx, dx
                jz      short loc_19DA7
                call    sub_19BD7
                jnz     short loc_19D92
                inc     cx

loc_19D92:                              ; ...
                mov     al, es:0
                cmp     al, 5Ah ; 'Z'
                jz      short loc_19DA6
                mov     ax, es
                add     ax, es:3
                inc     ax
                mov     es, ax
                jmp     short loc_19D88
; ---------------------------------------------------------------------------

loc_19DA6:                              ; ...
                stc

loc_19DA7:                              ; ...
                pop     dx
                pop     cx
                pop     ax
                retn
sub_19D7A       endp


; =============== S U B R O U T I N E =======================================


sub_19DAB       proc near               ; ...
                push    bx
                push    cx
                call    sub_19D7A
                jb      short loc_19DEB
                xor     bx, bx
                xor     cx, cx

loc_19DB6:                              ; ...
                call    sub_19BD7
                jz      short loc_19DE2
                call    sub_19D32
                jnz     short loc_19DCE
                cmp     cx, es:3
                jg      short loc_19DCE
                mov     bx, es
                mov     cx, es:3

loc_19DCE:                              ; ...
                mov     al, es:0
                cmp     al, 5Ah ; 'Z'
                jz      short loc_19DE2
                mov     ax, es
                add     ax, es:3
                inc     ax
                mov     es, ax
                jmp     short loc_19DB6
; ---------------------------------------------------------------------------

loc_19DE2:                              ; ...
                mov     es, bx
                mov     ax, cx
                or      bx, bx
                jnz     short loc_19DEB
                stc

loc_19DEB:                              ; ...
                pop     cx
                pop     bx
                retn
sub_19DAB       endp


; =============== S U B R O U T I N E =======================================


sub_19DEE       proc near               ; ...
                push    ax
                xor     bh, bh
                mov     bl, al
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     al, [bx+6C8Fh]
                pop     ds
                assume ds:nothing
                or      al, al
                pop     ax
                retn
sub_19DEE       endp


; =============== S U B R O U T I N E =======================================


sub_19DFF       proc near               ; ...
                push    bx
                push    cx
                push    es
                mov     bx, ax
                mov     ax, es
                mov     cx, es:3
                sub     cx, 20h ; ' '
                cmp     bx, cx
                ja      short loc_19E57
                mov     dl, es:0
                mov     cx, es:3
                mov     es:3, bx
                mov     byte ptr es:0, 4Dh ; 'M'
                add     ax, bx
                inc     ax
                mov     es, ax
                mov     ax, cx
                sub     ax, bx
                dec     ax
                mov     es:0, dl
                mov     word ptr es:1, 0
                mov     es:3, ax
                mov     ax, 2020h
                mov     es:8, ax
                mov     es:0Ah, ax
                mov     es:0Ch, ax
                mov     es:0Eh, ax
                clc
                jmp     short loc_19E58
; ---------------------------------------------------------------------------

loc_19E57:                              ; ...
                stc

loc_19E58:                              ; ...
                pop     es
                pop     cx
                pop     bx
                retn
sub_19DFF       endp


; =============== S U B R O U T I N E =======================================


sub_19E5C       proc near               ; ...
                push    bx
                push    dx
                push    es
                mov     al, cl
                call    sub_19DEE
                jz      short loc_19E91
                mov     al, cl
                call    sub_19DAB
                jb      short loc_19E91
                push    ax
                mov     al, cl
                call    sub_19CCA
                pop     bx
                or      ax, ax
                jz      short loc_19E91
                cmp     ax, bx
                jbe     short loc_19E83
                mov     al, cl
                call    sub_19A9F
                jmp     short loc_19E91
; ---------------------------------------------------------------------------

loc_19E83:                              ; ...
                call    sub_19D26
                jz      short loc_19E91
                call    sub_19DFF
                jb      short loc_19E91
                mov     dx, es
                jmp     short loc_19E9A
; ---------------------------------------------------------------------------

loc_19E91:                              ; ...
                mov     ax, cx
                call    sub_19DEE
                jnz     short loc_19EA8
                xor     dx, dx

loc_19E9A:                              ; ...
                mov     al, cl
                call    sub_19CFB
                or      dx, dx
                jz      short loc_19EA8
                mov     es, dx
                call    sub_19D5D

loc_19EA8:                              ; ...
                pop     es
                pop     dx
                pop     bx
                retn
sub_19E5C       endp


; =============== S U B R O U T I N E =======================================


sub_19EAC       proc near               ; ...
                push    ax
                push    es
                call    sub_19BBF
                jb      short loc_19ED1
                mov     es, ax

loc_19EB5:                              ; ...
                call    sub_19ED4
                jnz     short loc_19EBD
                call    sub_19D5D

loc_19EBD:                              ; ...
                mov     al, es:0
                cmp     al, 5Ah ; 'Z'
                jz      short loc_19ED1
                mov     ax, es
                add     ax, es:3
                inc     ax
                mov     es, ax
                jmp     short loc_19EB5
; ---------------------------------------------------------------------------

loc_19ED1:                              ; ...
                pop     es
                pop     ax
                retn
sub_19EAC       endp


; =============== S U B R O U T I N E =======================================


sub_19ED4       proc near               ; ...
                push    ax
                mov     ax, es:1
                cmp     ax, 8
                jnz     short loc_19F00
                mov     ax, es:8
                cmp     ax, 5246h
                jnz     short loc_19F00
                mov     ax, es:0Ah
                cmp     ax, 5A4Fh
                jnz     short loc_19F00
                mov     ax, es:0Ch
                cmp     ax, 4E45h
                jnz     short loc_19F00
                mov     ax, es:0Eh
                cmp     ax, 2020h

loc_19F00:                              ; ...
                pop     ax
                retn
sub_19ED4       endp


; =============== S U B R O U T I N E =======================================


sub_19F02       proc near               ; ...
                mov     word ptr es:1, 8
                mov     word ptr es:8, 5246h
                mov     word ptr es:0Ah, 5A4Fh
                mov     word ptr es:0Ch, 4E45h
                mov     word ptr es:0Eh, 2020h
                retn
sub_19F02       endp


; =============== S U B R O U T I N E =======================================


sub_19F26       proc near               ; ...
                push    ax
                push    cx
                push    dx
                push    es
                call    sub_19CAA
                xor     ah, ah
                mov     dx, ax
                call    sub_19BBF
                mov     es, ax
                xor     cx, cx

loc_19F38:                              ; ...
                call    sub_19BD7
                jnz     short loc_19F3E
                inc     cx

loc_19F3E:                              ; ...
                cmp     cx, dx
                jz      short loc_19F4A
                call    sub_19D32
                jnz     short loc_19F4A
                call    sub_19F02

loc_19F4A:                              ; ...
                mov     al, es:0
                cmp     al, 5Ah ; 'Z'
                jz      short loc_19F5E
                mov     ax, es
                add     ax, es:3
                inc     ax
                mov     es, ax
                jmp     short loc_19F38
; ---------------------------------------------------------------------------

loc_19F5E:                              ; ...
                pop     es
                pop     dx
                pop     cx
                pop     ax
                retn
sub_19F26       endp


; =============== S U B R O U T I N E =======================================


sub_19F63       proc near               ; ...
                push    ax
                push    bx
                push    ds
                push    es
                call    sub_199B2
                call    sub_19F77
                pushf
                call    sub_199C8
                popf
                pop     es
                pop     ds
                pop     bx
                pop     ax
                retn
sub_19F63       endp


; =============== S U B R O U T I N E =======================================


sub_19F77       proc near               ; ...
                push    ax
                push    bx
                push    es
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     ax, es:[bx-2]
                mov     es, ax

loc_19F84:                              ; ...
                mov     al, es:0
                cmp     al, 5Ah ; 'Z'
                jz      short loc_19F98
                mov     bx, es
                add     bx, es:3
                inc     bx
                mov     es, bx
                jmp     short loc_19F84
; ---------------------------------------------------------------------------

loc_19F98:                              ; ...
                mov     ax, es
                cmp     ax, 9FFFh
                pop     es
                pop     bx
                pop     ax
                retn
sub_19F77       endp


; =============== S U B R O U T I N E =======================================


sub_19FA1       proc near               ; ...
                xor     bh, bh
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     bl, byte_1873F
                pop     ds
                assume ds:nothing
                mov     ax, 5803h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) set UMB link state
                retn
sub_19FA1       endp


; =============== S U B R O U T I N E =======================================


sub_19FB1       proc near               ; ...
                push    ax
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     al, byte_1870A
                pop     ds
                assume ds:nothing
                or      al, al
                jnz     short loc_19FC0
                pop     ax
                stc
                retn
; ---------------------------------------------------------------------------

loc_19FC0:                              ; ...
                call    sub_1A06E
                call    sub_19FE6
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                mov     es:byte_1870A, 0
                pop     es
                assume es:nothing
                call    sub_19FD6
                pop     ax
                clc
                retn
sub_19FB1       endp


; =============== S U B R O U T I N E =======================================


sub_19FD6       proc near               ; ...
                xor     bh, bh
                push    ds
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     bl, byte_1873F
                pop     ds
                assume ds:nothing
                mov     ax, 5803h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) set UMB link state
                retn
sub_19FD6       endp


; =============== S U B R O U T I N E =======================================


sub_19FE6       proc near               ; ...
                push    ax
                push    es
                call    sub_1A056
                jb      short loc_1A00B
                mov     es, ax

loc_19FEF:                              ; ...
                call    sub_1A00E
                jnz     short loc_19FF7
                call    sub_1A03B

loc_19FF7:                              ; ...
                mov     al, es:0
                cmp     al, 5Ah ; 'Z'
                jz      short loc_1A00B
                mov     ax, es
                add     ax, es:3
                inc     ax
                mov     es, ax
                jmp     short loc_19FEF
; ---------------------------------------------------------------------------

loc_1A00B:                              ; ...
                pop     es
                pop     ax
                retn
sub_19FE6       endp


; =============== S U B R O U T I N E =======================================


sub_1A00E       proc near               ; ...
                push    ax
                cmp     word ptr es:1, 8
                jnz     short loc_1A039
                mov     ax, es:8
                cmp     ax, 4948h
                jnz     short loc_1A039
                mov     ax, es:0Ah
                cmp     ax, 4444h
                jnz     short loc_1A039
                mov     ax, es:0Ch
                cmp     ax, 4E45h
                jnz     short loc_1A039
                mov     ax, es:0Eh
                cmp     ax, 2020h

loc_1A039:                              ; ...
                pop     ax
                retn
sub_1A00E       endp


; =============== S U B R O U T I N E =======================================


sub_1A03B       proc near               ; ...
                mov     word ptr es:1, 0
                mov     ax, 2020h
                mov     es:8, ax
                mov     es:0Ah, ax
                mov     es:0Ch, ax
                mov     es:0Eh, ax
                retn
sub_1A03B       endp


; =============== S U B R O U T I N E =======================================


sub_1A056       proc near               ; ...
                push    si
                push    ds
                push    es
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     ax, es:8Ch
                cmp     ax, 0FFFFh
                jz      short loc_1A069
                clc
                jmp     short loc_1A06A
; ---------------------------------------------------------------------------

loc_1A069:                              ; ...
                stc

loc_1A06A:                              ; ...
                pop     es
                pop     ds
                pop     si
                retn
sub_1A056       endp


; =============== S U B R O U T I N E =======================================


sub_1A06E       proc near               ; ...
                mov     ax, 5802h
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) get UMB link state
                or      al, al
                jnz     short locret_1A07F
                mov     ax, 5803h
                mov     bx, 1
                int     21h             ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
                                        ; AL = function code: (DOS 5beta) set UMB link state

locret_1A07F:                           ; ...
                retn
sub_1A06E       endp


; =============== S U B R O U T I N E =======================================


sub_1A080       proc near               ; ...
                cmp     cs:byte_18761, 0
                jz      short loc_1A0C2

loc_1A088:
                cmp     cs:byte_18750, 1

loc_1A08E:
                jz      short loc_1A0A5
                call    sub_1A566
                call    sub_19C65
                call    sub_19F26
                call    sub_1A123
                pushf
                call    sub_19EAC
                popf
                jb      short loc_1A0C2
                jmp     short loc_1A0B2
; ---------------------------------------------------------------------------

loc_1A0A5:                              ; ...
                call    sub_1A0E9
                jnb     short loc_1A0B2
                call    sub_1A566
                call    sub_1A123
                jb      short loc_1A0C2

loc_1A0B2:                              ; ...
                mov     ax, cs:word_18757
                mov     dx, cs:word_18753
                add     dx, cs:word_18755
                jmp     short loc_1A0D1
; ---------------------------------------------------------------------------

loc_1A0C2:                              ; ...
                mov     cs:byte_18761, 0
                mov     ax, cs:memhi
                mov     dx, cs:word_12F6D

loc_1A0D1:                              ; ...
                call    sub_1A155
                mov     cs:word_18744, ax
                mov     cs:word_18746, dx
                mov     word ptr cs:dword_18748, 0
                mov     word ptr cs:dword_18748+2, ax
                retn
sub_1A080       endp


; =============== S U B R O U T I N E =======================================


sub_1A0E9       proc near               ; ...
                mov     ax, cs:word_18755
                add     ax, cs:word_18753
                sub     ax, cs:word_18757
                or      ax, ax
                jnz     short loc_1A0FD
                stc
                retn
; ---------------------------------------------------------------------------

loc_1A0FD:                              ; ...
                dec     ax
                cmp     ax, cs:word_18742
                retn
sub_1A0E9       endp


; =============== S U B R O U T I N E =======================================


sub_1A104       proc near               ; ...
                push    ds
                mov     ds, ax
                mov     word ptr ds:1, 8
                mov     word ptr ds:8, 4453h
                pop     ds
                inc     ax
                mov     cs:word_18753, ax
                mov     cs:word_18757, ax
                mov     cs:word_18755, bx
                retn
sub_1A104       endp


; =============== S U B R O U T I N E =======================================


sub_1A123       proc near               ; ...
                mov     bx, 0FFFFh
                mov     ax, 4800h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                or      bx, bx
                jz      short loc_1A145
                dec     bx
                cmp     cs:word_18742, bx
                ja      short loc_1A145
                inc     bx
                mov     ax, 4800h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                jb      short loc_1A145
                dec     ax
                call    sub_1A104
                clc
                retn
; ---------------------------------------------------------------------------

loc_1A145:                              ; ...
                xor     ax, ax
                mov     cs:word_18755, ax
                mov     cs:word_18753, ax
                mov     cs:word_18757, ax
                stc
                retn
sub_1A123       endp


; =============== S U B R O U T I N E =======================================


sub_1A155       proc near               ; ...
                push    es
                push    di
                push    ds
                push    si
                mov     es, ax
                mov     byte ptr es:0, 44h ; 'D'
                inc     ax
                mov     es:1, ax
                push    ax
                lds     si, dword ptr cs:byte_11C93+11h
                mov     di, si
                cld

loc_1A16F:                              ; ...
                lodsb
                cmp     al, 3Ah ; ':'
                jnz     short loc_1A178
                mov     di, si
                jmp     short loc_1A16F
; ---------------------------------------------------------------------------

loc_1A178:                              ; ...
                cmp     al, 5Ch ; '\'
                jnz     short loc_1A180
                mov     di, si
                jmp     short loc_1A16F
; ---------------------------------------------------------------------------

loc_1A180:                              ; ...
                or      al, al
                jnz     short loc_1A16F
                mov     si, di
                mov     di, 8
                mov     cx, 8

loc_1A18C:                              ; ...
                lodsb
                or      al, al
                jz      short loc_1A198
                cmp     al, 2Eh ; '.'
                jz      short loc_1A198
                stosb
                loop    loc_1A18C

loc_1A198:                              ; ...
                jcxz    short loc_1A19E
                mov     al, 20h ; ' '
                rep stosb

loc_1A19E:                              ; ...
                pop     ax
                pop     si
                pop     ds
                pop     di
                pop     es
                retn
sub_1A155       endp


; =============== S U B R O U T I N E =======================================


sub_1A1A4       proc near               ; ...
                push    ds
                push    es
                pop     ds
                mov     dx, si
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short loc_1A1E6
                mov     bx, ax
                mov     ax, 4202h
                xor     cx, cx
                mov     dx, cx
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from end of file
                jb      short loc_1A1DF
                add     ax, 0Fh
                adc     dx, 0
                test    dx, 0FFF0h
                jz      short loc_1A1D2
                mov     cs:word_18742, 0FFFFh
                jmp     short loc_1A1DF
; ---------------------------------------------------------------------------

loc_1A1D2:                              ; ...
                shr     ax, 4
                shl     dx, 0Ch
                or      ax, dx
                mov     cs:word_18742, ax
                clc

loc_1A1DF:                              ; ...
                pushf
                mov     ax, 3E00h
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                popf

loc_1A1E6:                              ; ...
                pop     ds
                retn
sub_1A1A4       endp


; =============== S U B R O U T I N E =======================================


sub_1A1E8       proc near               ; ...
                mov     bx, cs:word_18744
                mov     cs:word_1875D, bx
                mov     cs:word_1875F, bx
                mov     bx, cs
                mov     es, bx
                assume es:SYSINIT
                mov     bx, 6CDDh
                mov     al, 3
                mov     ah, 4Bh
                int     21h             ; DOS - 2+ - LOAD OR EXECUTE (EXEC)
                                        ; DS:DX -> ASCIZ filename
                                        ; ES:BX -> parameter block
                                        ; AL = subfunc: called by MSC spawn(P_NOWAIT,...) when running DOS 4.x.
                retn
sub_1A1E8       endp


; =============== S U B R O U T I N E =======================================


sub_1A205       proc near               ; ...
                pushf
                mov     cs:byte_18750, 1
                call    sub_19FB1
                jb      short loc_1A217
                mov     cs:byte_18750, 0

loc_1A217:                              ; ...
                popf
                retn
sub_1A205       endp


; =============== S U B R O U T I N E =======================================


sub_1A219       proc near               ; ...
                mov     bl, es:[si]
                or      bl, bl
                jz      short loc_1A223
                inc     si
                jmp     short sub_1A219
; ---------------------------------------------------------------------------

loc_1A223:                              ; ...
                mov     bl, cs:byte_187A2
                mov     es:[si], bl
                retn
sub_1A219       endp


; =============== S U B R O U T I N E =======================================


sub_1A22C       proc near               ; ...
                push    ax
                mov     ax, cs:memhi
                cmp     cs:word_12F6D, ax
                jbe     short loc_1A23A
                pop     ax
                retn
; ---------------------------------------------------------------------------

loc_1A23A:                              ; ...
                push    cs
                pop     ds
                assume ds:SYSINIT
                call    print_x
                adc     [bx+si-140Ch], ax
                std

loc_1A244:                              ; ...
                mov     ax, word ptr cs:dword_1874C
                call    ParaRound
                add     word ptr cs:dword_1874C+2, ax
                mov     word ptr cs:dword_1874C, 0
                mov     ax, cs:word_18746
                cmp     word ptr cs:dword_1874C+2, ax
                jbe     short locret_1A264
                jmp     short loc_1A23A
; ---------------------------------------------------------------------------

locret_1A264:                           ; ...
                retn
sub_1A22C       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_1A265       proc near               ; ...
                push    ax
                mov     ax, word ptr cs:dword_1874C+2
                cmp     cs:byte_17B47, 0
                jnz     short loc_1A281
                cmp     ax, cs:word_18744
                jnz     short loc_1A281
                cmp     word ptr cs:dword_1874C, 0
                jz      short loc_1A287

loc_1A281:                              ; ...
                call    loc_1A244
                pop     ax
                clc
                retn
; ---------------------------------------------------------------------------

loc_1A287:                              ; ...
                pop     ax
                stc
                retn
sub_1A265       endp


; =============== S U B R O U T I N E =======================================


sub_1A28A       proc near               ; ...
                push    ds
                mov     ax, cs:word_18744
                mov     bx, word ptr cs:dword_1874C+2
                dec     ax
                mov     ds, ax
                assume ds:nothing
                inc     ax
                sub     ax, bx
                neg     ax
                mov     ds:3, ax
                cmp     cs:byte_18761, 0
                jz      short loc_1A2AE
                mov     cs:word_18757, bx
                jmp     short loc_1A2B6
; ---------------------------------------------------------------------------

loc_1A2AE:                              ; ...
                mov     cs:memhi, bx
                call    sub_1A22C

loc_1A2B6:                              ; ...
                pop     ds
                retn
sub_1A28A       endp


; =============== S U B R O U T I N E =======================================


sub_1A2B8       proc near               ; ...
                push    bx
                mov     bx, si
                mov     cs:word_18762, 0
                mov     cs:word_1879E, si
                mov     cs:word_187A0, es
                call    sub_1A300
                cmp     word ptr es:[si], 4953h
                jnz     short loc_1A2F8
                cmp     word ptr es:[si+2], 455Ah
                jnz     short loc_1A2F8
                mov     al, es:[si+4]
                call    loc_14C42
                jnz     short loc_1A2F8
                add     si, 5
                call    sub_1A30C
                jb      short loc_1A2FD
                mov     cs:word_18762, ax
                call    sub_1A300
                mov     bx, si

loc_1A2F8:                              ; ...
                mov     si, bx
                pop     bx
                clc
                retn
; ---------------------------------------------------------------------------

loc_1A2FD:                              ; ...
                pop     bx
                stc
                retn
sub_1A2B8       endp


; =============== S U B R O U T I N E =======================================


sub_1A300       proc near               ; ...
                mov     al, es:[si]
                call    loc_14C42
                jnz     short locret_1A30B
                inc     si
                jmp     short sub_1A300
; ---------------------------------------------------------------------------

locret_1A30B:                           ; ...
                retn
sub_1A300       endp


; =============== S U B R O U T I N E =======================================


sub_1A30C       proc near               ; ...
                xor     ax, ax
                xor     dx, dx

loc_1A310:                              ; ...
                mov     bl, es:[si]
                cmp     bl, 0Dh
                jz      short loc_1A351
                cmp     bl, 0Ah
                jz      short loc_1A351
                push    ax
                mov     al, bl
                call    loc_14C42
                pop     ax
                jz      short loc_1A339
                call    sub_1A353
                jb      short loc_1A351
                mov     cx, 4

loc_1A32E:                              ; ...
                shl     ax, 1
                rcl     dx, 1
                loop    loc_1A32E
                or      al, bl
                inc     si
                jmp     short loc_1A310
; ---------------------------------------------------------------------------

loc_1A339:                              ; ...
                add     ax, 0Fh
                adc     dx, 0
                test    dx, 0FFF0h
                jnz     short loc_1A351
                mov     cx, 4

loc_1A348:                              ; ...
                clc
                rcr     dx, 1
                rcr     ax, 1
                loop    loc_1A348
                clc
                retn
; ---------------------------------------------------------------------------

loc_1A351:                              ; ...
                stc
                retn
sub_1A30C       endp


; =============== S U B R O U T I N E =======================================


sub_1A353       proc near               ; ...
                cmp     bl, 30h ; '0'
                jb      short loc_1A36F
                cmp     bl, 39h ; '9'
                ja      short loc_1A361
                sub     bl, 30h ; '0'
                retn
; ---------------------------------------------------------------------------

loc_1A361:                              ; ...
                cmp     bl, 41h ; 'A'
                jb      short loc_1A36F
                cmp     bl, 46h ; 'F'
                ja      short loc_1A36F
                sub     bl, 37h ; '7'
                retn
; ---------------------------------------------------------------------------

loc_1A36F:                              ; ...
                stc
                retn
sub_1A353       endp


; =============== S U B R O U T I N E =======================================


sub_1A371       proc near               ; ...
                call    sub_1A390
                jb      short locret_1A38F
                mov     cs:byte_18752, 0FFh
                or      cs:word_187B4, 2

loc_1A382:                              ; ...
                call    sub_1A3BF
                jb      short loc_1A38C
                call    sub_1A3E0
                jmp     short loc_1A382
; ---------------------------------------------------------------------------

loc_1A38C:                              ; ...
                call    sub_1A49F

locret_1A38F:                           ; ...
                retn
sub_1A371       endp


; =============== S U B R O U T I N E =======================================


sub_1A390       proc near               ; ...
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     cs:word_1879C, es
                mov     ax, 4310h
                int     2Fh             ; - Multiplex - XMS - GET DRIVER ADDRESS
                                        ; Return: ES:BX -> driver entry point
                mov     word ptr cs:dword_18759, bx
                mov     word ptr cs:dword_18759+2, es
                cmp     cs:byte_1879B, 0
                jnz     short loc_1A3BB
                call    sub_1A4EF
                jb      short loc_1A3BD
                mov     cs:byte_1879B, 0FFh

loc_1A3BB:                              ; ...
                clc
                retn
; ---------------------------------------------------------------------------

loc_1A3BD:                              ; ...
                stc
                retn
sub_1A390       endp


; =============== S U B R O U T I N E =======================================


sub_1A3BF       proc near               ; ...
                push    ax
                mov     ah, 10h
                mov     dx, 0FFFFh
                call    cs:dword_18759
                or      dx, dx
                jz      short loc_1A3DD
                mov     ah, 10h
                call    cs:dword_18759
                cmp     ax, 1
                jnz     short loc_1A3DD
                clc

loc_1A3DB:                              ; ...
                pop     ax
                retn
; ---------------------------------------------------------------------------

loc_1A3DD:                              ; ...
                stc
                jmp     short loc_1A3DB
sub_1A3BF       endp


; =============== S U B R O U T I N E =======================================


sub_1A3E0       proc near               ; ...
                push    ds
                mov     ds, cs:word_1879C
                mov     ds, word ptr ds:8Ch
                mov     ax, ds
                mov     es, ax
                assume es:nothing

loc_1A3EE:                              ; ...
                cmp     ax, bx
                ja      short loc_1A401
                cmp     byte ptr es:0, 5Ah ; 'Z'
                jz      short loc_1A456
                mov     ds, ax
                call    sub_1A4DB
                jmp     short loc_1A3EE
; ---------------------------------------------------------------------------

loc_1A401:                              ; ...
                mov     cx, ds
                inc     cx
                sub     cx, bx
                neg     cx
                mov     byte ptr ds:0, 4Dh ; 'M'
                mov     word ptr ds:1, 8
                mov     ds:3, cx
                mov     word ptr ds:8, 4353h
                mov     es, bx
                mov     byte ptr es:0, 4Dh ; 'M'
                mov     word ptr es:1, 0
                sub     dx, 2
                mov     es:3, dx
                add     bx, dx
                inc     bx
                mov     es, bx
                inc     bx
                sub     ax, bx
                mov     byte ptr es:0, 4Dh ; 'M'
                mov     word ptr es:1, 8
                mov     es:3, ax
                mov     word ptr es:8, 4353h
                jmp     short loc_1A49D
; ---------------------------------------------------------------------------

loc_1A456:                              ; ...
                add     ax, es:3
                sub     word ptr es:3, 1
                mov     byte ptr es:0, 4Dh ; 'M'
                mov     cx, ax
                inc     ax
                sub     ax, bx
                neg     ax
                mov     es, cx
                mov     byte ptr es:0, 4Dh ; 'M'
                mov     word ptr es:1, 8
                mov     es:3, ax
                mov     word ptr es:8, 4353h
                mov     es, bx
                mov     byte ptr es:0, 5Ah ; 'Z'
                mov     word ptr es:1, 0
                dec     dx
                mov     es:3, dx

loc_1A49D:                              ; ...
                pop     ds
                retn
sub_1A3E0       endp


; =============== S U B R O U T I N E =======================================


sub_1A49F       proc near               ; ...
                xor     di, di
                mov     es, cs:word_1879C
                mov     es, word ptr es:8Ch

loc_1A4AB:                              ; ...
                mov     ax, es
                mov     ds, ax
                cmp     es:1, di
                jz      short loc_1A4BD
                call    sub_1A4DB
                jb      short locret_1A4DA
                jmp     short loc_1A4AB
; ---------------------------------------------------------------------------

loc_1A4BD:                              ; ...
                call    sub_1A4DB
                jb      short locret_1A4DA
                cmp     es:1, di
                jnz     short loc_1A4AB
                mov     cx, es:3
                inc     cx
                add     ds:3, cx
                mov     cl, es:[di]
                mov     [di], cl
                jmp     short loc_1A4BD
; ---------------------------------------------------------------------------

locret_1A4DA:                           ; ...
                retn
sub_1A49F       endp


; =============== S U B R O U T I N E =======================================


sub_1A4DB       proc near               ; ...
                cmp     byte ptr ds:0, 5Ah ; 'Z'
                jz      short loc_1A4ED
                mov     ax, ds
                add     ax, ds:3
                inc     ax
                mov     es, ax
                clc
                retn
; ---------------------------------------------------------------------------

loc_1A4ED:                              ; ...
                stc
                retn
sub_1A4DB       endp


; =============== S U B R O U T I N E =======================================


sub_1A4EF       proc near               ; ...
                call    sub_1A3BF
                jb      short loc_1A564
                int     12h             ; MEMORY SIZE -
                                        ; Return: AX = number of contiguous 1K blocks of memory
                shl     ax, 6
                mov     cx, ax
                sub     ax, bx
                neg     ax
                sub     cx, 1
                mov     es, cx
                mov     byte ptr es:0, 4Dh ; 'M'
                mov     word ptr es:1, 8
                mov     es:3, ax
                mov     word ptr es:8, 4353h
                mov     es, bx
                mov     byte ptr es:0, 5Ah ; 'Z'
                mov     word ptr es:1, 0
                dec     dx
                mov     es:3, dx
                mov     es, cs:word_1879C
                mov     di, 8Ch
                mov     es:[di], cx
                mov     di, 24h ; '$'
                mov     es, word ptr es:[di]
                xor     di, di

loc_1A544:                              ; ...
                cmp     byte ptr es:[di], 5Ah ; 'Z'
                jz      short loc_1A556
                mov     ax, es
                add     ax, es:3
                inc     ax
                mov     es, ax
                jmp     short loc_1A544
; ---------------------------------------------------------------------------

loc_1A556:                              ; ...
                sub     word ptr es:3, 1
                mov     byte ptr es:0, 4Dh ; 'M'
                clc
                retn
; ---------------------------------------------------------------------------

loc_1A564:                              ; ...
                stc
                retn
sub_1A4EF       endp


; =============== S U B R O U T I N E =======================================


sub_1A566       proc near               ; ...
                cmp     cs:word_18753, 0
                jz      short locret_1A592
                push    es
                push    bx
                mov     bx, cs:word_18757
                sub     bx, cs:word_18753
                mov     es, cs:word_18753
                mov     ax, 4A00h
                int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                        ; ES = segment address of block to change
                                        ; BX = new size in paragraphs
                mov     ax, es
                dec     ax
                mov     es, ax
                assume es:nothing
                mov     word ptr es:1, 8
                pop     bx
                pop     es
                assume es:nothing

locret_1A592:                           ; ...
                retn
sub_1A566       endp


; =============== S U B R O U T I N E =======================================


sub_1A593       proc near               ; ...
                push    ds
                push    es
                cmp     cs:byte_1879B, 0
                jz      short loc_1A5BE
                mov     es, cs:word_1879C
                mov     ds, word ptr es:24h
                mov     di, es:8Ch

loc_1A5AC:                              ; ...
                call    sub_1A4DB
                jb      short loc_1A5BE
                cmp     di, ax
                jz      short loc_1A5B9
                mov     ds, ax
                jmp     short loc_1A5AC
; ---------------------------------------------------------------------------

loc_1A5B9:                              ; ...
                mov     byte ptr ds:0, 5Ah ; 'Z'

loc_1A5BE:                              ; ...
                pop     es
                pop     ds
                retn
sub_1A593       endp


; =============== S U B R O U T I N E =======================================


sub_1A5C1       proc near               ; ...
                push    ax
                or      bl, bl
                jz      short loc_1A5EA
                mov     ds:6CC2h, ax
                call    sub_1A0E9
                jnb     short loc_1A5D8
                push    bx
                call    sub_1A566
                call    sub_1A123
                pop     bx
                jb      short loc_1A5EA

loc_1A5D8:                              ; ...
                pop     dx
                mov     cx, ds:6CD7h
                call    sub_1A600
                mov     ax, dx
                add     dx, cx
                mov     ds:6CD7h, dx
                jmp     short locret_1A5FF
; ---------------------------------------------------------------------------

loc_1A5EA:                              ; ...
                pop     dx
                mov     cx, ds:15ACh
                call    sub_1A600
                add     ds:15ACh, dx
                inc     word ptr ds:15ACh
                call    sub_1A22C
                mov     ax, dx

locret_1A5FF:                           ; ...
                retn
sub_1A5C1       endp


; =============== S U B R O U T I N E =======================================


sub_1A600       proc near               ; ...
                push    bx
                mov     bl, 0
                cmp     bh, 52h ; 'R'
                jz      short loc_1A617
                cmp     bh, 47h ; 'G'
                jz      short loc_1A617
                cmp     bh, 59h ; 'Y'
                jz      short loc_1A617
                cmp     bh, 48h ; 'H'
                jnz     short loc_1A61B

loc_1A617:                              ; ...
                mov     bl, bh
                mov     bh, 49h ; 'I'

loc_1A61B:                              ; ...
                mov     es, cx
                mov     es:0, bh
                mov     es:7, bl
                inc     cx
                mov     es:1, cx
                mov     es:3, dx
                pop     bx
                retn
sub_1A600       endp

; ---------------------------------------------------------------------------
                push    dx
                push    si
                push    di
                cmp     word ptr ds:15AEh, 0
                jnz     short loc_1A676
                mov     dx, ds:15A8h
                dec     dx
                push    ds
                mov     ds, dx
                add     dx, ds:3
                dec     word ptr ds:3
                mov     es, dx
                xor     si, si
                xor     di, di
                mov     cx, 8
                cld
                rep movsw
                xor     si, si
                mov     byte ptr [si], 4Dh ; 'M'
                mov     word ptr es:[si+3], 0
                mov     word ptr es:[si+1], 8
                mov     word ptr es:[si+8], 4453h
                pop     ds
                mov     word ptr ds:15AEh, es

loc_1A676:                              ; ...
                mov     dx, ds:15A8h
                dec     dx
                mov     es, dx
                inc     ax
                sub     es:3, ax
                mov     dx, ds:15AEh
                push    ds
                mov     ds, dx
                sub     dx, ax
                mov     es, dx
                xor     si, si
                xor     di, di
                mov     cx, 8
                cld
                rep movsw
                pop     ds
                mov     ds:15AEh, dx
                add     es:3, ax
                mov     cx, dx
                inc     cx
                dec     ax
                mov     dx, ax
                call    sub_1A600
                pop     di
                pop     si
                pop     dx
                retn

; =============== S U B R O U T I N E =======================================


sub_1A6AF       proc near               ; ...
                push    ds
                push    es
                mov     ax, 70h
                mov     ds, ax
                assume ds:nothing
                mov     bx, word ptr ds:Old13
                mov     dx, word ptr ds:Old13+2
                cmp     dx, 0A000h
                jnb     short loc_1A72C
                mov     ds, dx
                assume ds:nothing
                cmp     word ptr [bx], 0E1Eh
                jnz     short loc_1A6FD
                cmp     byte ptr [bx+2], 1Fh
                jnz     short loc_1A70E
                cmp     byte ptr [bx+3], 0EAh
                jnz     short loc_1A6E1
                cmp     word ptr [bx+6], 0A000h
                jnb     short loc_1A72C
                jmp     short loc_1A70E
; ---------------------------------------------------------------------------

loc_1A6E1:                              ; ...
                cmp     word ptr [bx+3], 2EFFh
                jz      short loc_1A6EF
                cmp     word ptr [bx+3], 1EFFh
                jnz     short loc_1A70E

loc_1A6EF:                              ; ...
                push    bx
                mov     bx, [bx+5]
                cmp     word ptr [bx+2], 0A000h
                pop     bx
                jnb     short loc_1A72C
                jmp     short loc_1A70E
; ---------------------------------------------------------------------------

loc_1A6FD:                              ; ...
                cmp     byte ptr [bx], 9Ah
                jz      short loc_1A707
                cmp     byte ptr [bx], 0EAh
                jnz     short loc_1A70E

loc_1A707:                              ; ...
                cmp     word ptr [bx+3], 0A000h
                jnb     short loc_1A72C

loc_1A70E:                              ; ...
                les     di, cs:dword_187A3
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     si, 6E22h
                mov     cx, 10h
                cld
                rep movsb
                xchg    ax, bx
                stosw
                xchg    ax, dx
                stosw
                mov     word ptr cs:dword_187A3, di
                inc     cs:word_187A7

loc_1A72C:                              ; ...
                pop     es
                pop     ds
                assume ds:nothing
                retn
sub_1A6AF       endp


; =============== S U B R O U T I N E =======================================


sub_1A72F       proc near               ; ...
                pusha
                push    es
                push    ds
                cld
                les     di, cs:dword_187A3
                mov     si, 6D29h
                mov     cx, 0Bh
                push    si
                push    di
                rep movs byte ptr es:[di], byte ptr cs:[si]
                pop     di
                pop     si
                mov     es:[di+0Dh], al
                xor     ax, ax
                xchg    ax, cs:word_187B4
                mov     es:[di+0Bh], ax
                lea     di, [di+0Fh]
                xor     cx, cx
                mov     al, 1
                mov     dx, ds
                call    sub_1A802
                call    sub_1A82B
                jb      short loc_1A76A
                mov     al, 6
                call    sub_1A802

loc_1A76A:                              ; ...
                mov     ax, 70h ; 'p'
                mov     ds, ax
                assume ds:nothing
                mov     bx, ds:0B4h
                mov     dx, ds:0B6h
                mov     al, 3
                call    sub_1A802
                xor     ax, ax
                mov     ds, ax
                assume ds:BIOSDATA
                mov     bx, word ptr timdev
                mov     dx, word ptr timdev+2
                mov     al, 2
                call    sub_1A802
                mov     bx, word ptr Old16+3
                mov     dx, word ptr cdev
                mov     al, 4
                call    sub_1A802
                mov     bx, word ptr dword_13A+2
                mov     dx, word ptr dword_13E
                mov     al, 5
                call    sub_1A802
                call    sub_1A872
                mov     bx, cs:word_12F79
                or      bx, bx
                jnz     short loc_1A7BA
                mov     cs:word_187DB, 0FFFFh

loc_1A7BA:                              ; ...
                xor     dx, dx
                mov     al, 8
                call    sub_1A802
                mov     bx, cs:word_188B5
                mov     dx, cs:word_188B7
                mov     ax, bx
                or      ax, dx
                jz      short loc_1A7D6
                mov     al, 9
                call    sub_1A802

loc_1A7D6:                              ; ...
                xor     ax, ax
                mov     cs:word_187E5, ax
                mov     cs:word_187E7, ax
                call    sub_1A9AC
                mov     al, 0Ah
                call    sub_1A802
                jcxz    short loc_1A7FE
                push    di
                les     di, cs:dword_187A3
                mov     es:[di+0Eh], cl
                pop     word ptr cs:dword_187A3
                inc     cs:word_187A7

loc_1A7FE:                              ; ...
                pop     ds
                assume ds:nothing
                pop     es
                popa
                retn
sub_1A72F       endp


; =============== S U B R O U T I N E =======================================


sub_1A802       proc near               ; ...
                push    si
                lea     si, [si+0Eh]
                mov     ah, 5
                dec     al
                mul     ah
                add     si, ax
                cmp     cs:[si+1], bx
                jnz     short loc_1A81A
                cmp     cs:[si+3], dx
                jz      short loc_1A829

loc_1A81A:                              ; ...
                mov     cs:[si+1], bx
                mov     cs:[si+3], dx
                movs    byte ptr es:[di], byte ptr cs:[si]
                movs    word ptr es:[di], word ptr cs:[si]
                movs    word ptr es:[di], word ptr cs:[si]
                inc     cx

loc_1A829:                              ; ...
                pop     si
                retn
sub_1A802       endp


; =============== S U B R O U T I N E =======================================


sub_1A82B       proc near               ; ...
                push    si
                push    di
                push    ds
                push    es
                push    cx
                lea     si, [bx+0Ah]
                mov     di, 6E11h
                push    cs
                pop     es
                assume es:SYSINIT
                mov     cx, 8
                repe cmpsb
                jnz     short loc_1A86B
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dx, 6E11h
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jb      short loc_1A86B
                push    ax
                mov     bx, ax
                mov     dx, 6E1Ah
                mov     cx, 4
                mov     ax, 4402h
                int     21h             ; DOS - 2+ - IOCTL - READ CHARACTER DEVICE CONTROL STRING
                                        ; BX = device handle, CX = number of bytes to read DS:DX -> buffer
                pop     bx
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                mov     bx, cs:word_1889A
                mov     dx, cs:word_1889C
                clc
                jmp     short loc_1A86C
; ---------------------------------------------------------------------------

loc_1A86B:                              ; ...
                stc

loc_1A86C:                              ; ...
                pop     cx
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                pop     di
                pop     si
                retn
sub_1A82B       endp


; =============== S U B R O U T I N E =======================================


sub_1A872       proc near               ; ...
                mov     cs:dword_1889E, 0
                push    ds
                push    si
                push    cx
                lds     bx, cs:CURRENT_DOS_LOCATION
                xor     ch, ch
                mov     cl, [bx+20h]
                jcxz    short loc_1A8DA
                xor     dx, dx
                mov     si, 6D69h
                lds     bx, [bx+16h]

loc_1A893:                              ; ...
                push    ds
                push    bx
                test    word ptr [bx+43h], 4000h
                jz      short loc_1A8CF
                lds     bx, [bx+45h]
                mov     ax, cs:[si]
                cmp     [bx+13h], ax
                jnz     short loc_1A8B0
                mov     ax, cs:[si+2]
                cmp     [bx+15h], ax
                jz      short loc_1A8CF

loc_1A8B0:                              ; ...
                inc     ax
                jz      short loc_1A8C2
                push    edx
                movzx   edx, dx
                bts     cs:dword_1889E, edx
                pop     edx

loc_1A8C2:                              ; ...
                mov     ax, [bx+13h]
                mov     cs:[si], ax
                mov     ax, [bx+15h]
                mov     cs:[si+2], ax

loc_1A8CF:                              ; ...
                add     si, 4
                inc     dx
                pop     bx
                pop     ds
                add     bx, 58h ; 'X'
                loop    loc_1A893

loc_1A8DA:                              ; ...
                pop     cx
                pop     si
                pop     ds
                cmp     cs:dword_1889E, 0
                jz      short locret_1A8F4
                inc     cx
                mov     al, 7
                stosb
                mov     ax, word ptr cs:dword_1889E
                stosw
                mov     ax, word ptr cs:dword_1889E+2
                stosw

locret_1A8F4:                           ; ...
                retn
sub_1A872       endp


; =============== S U B R O U T I N E =======================================


sub_1A8F5       proc near               ; ...
                push    si
                push    cs
                pop     es
                assume es:SYSINIT
                mov     di, 6D29h
                mov     cx, 0Bh
                mov     al, 20h ; ' '
                cld
                rep stosb

loc_1A903:                              ; ...
                lodsb
                or      al, al
                jnz     short loc_1A903

loc_1A908:                              ; ...
                dec     si
                cmp     dx, si
                ja      short loc_1A917
                cmp     byte ptr [si], 5Ch ; '\'
                jz      short loc_1A917
                cmp     byte ptr [si], 3Ah ; ':'
                jnz     short loc_1A908

loc_1A917:                              ; ...
                inc     si
                call    sub_1A947
                mov     cx, 8
                mov     di, 6D29h
                call    sub_1A93A

loc_1A924:                              ; ...
                or      al, al
                jz      short loc_1A938
                cmp     al, 2Eh ; '.'
                jz      short loc_1A92F
                lodsb
                jmp     short loc_1A924
; ---------------------------------------------------------------------------

loc_1A92F:                              ; ...
                mov     cx, 3
                mov     di, 6D31h
                call    sub_1A93A

loc_1A938:                              ; ...
                pop     si
                retn
sub_1A8F5       endp


; =============== S U B R O U T I N E =======================================


sub_1A93A       proc near               ; ...
                lodsb
                or      al, al
                jz      short locret_1A946
                cmp     al, 2Eh ; '.'
                jz      short locret_1A946
                stosb
                loop    sub_1A93A

locret_1A946:                           ; ...
                retn
sub_1A93A       endp


; =============== S U B R O U T I N E =======================================


sub_1A947       proc near               ; ...
                push    si
                mov     di, 4676h
                mov     cx, 0Ch
                repe cmpsb
                jnz     short loc_1A95A
                mov     cs:byte_160F3, 1
                jmp     short loc_1A96C
; ---------------------------------------------------------------------------

loc_1A95A:                              ; ...
                pop     si
                push    si
                mov     di, 4684h
                mov     cx, 0Ch
                repe cmpsb
                jnz     short loc_1A96C
                mov     cs:byte_160F4, 1

loc_1A96C:                              ; ...
                pop     si
                retn
sub_1A947       endp


; =============== S U B R O U T I N E =======================================


sub_1A96E       proc near               ; ...
                push    ds
                push    es
                pusha
                push    cs
                pop     es
                mov     di, 6D69h
                xor     ch, ch
                lds     bx, cs:CURRENT_DOS_LOCATION
                mov     cl, [bx+20h]
                jcxz    short loc_1A9A8
                lds     bx, [bx+16h]

loc_1A985:                              ; ...
                push    ds
                push    bx
                test    word ptr [bx+43h], 4000h
                jz      short loc_1A99E
                lds     bx, [bx+45h]
                mov     ax, [bx+13h]
                mov     es:[di], ax
                mov     ax, [bx+15h]
                mov     es:[di+2], ax

loc_1A99E:                              ; ...
                pop     bx
                pop     ds
                add     bx, 58h ; 'X'
                add     di, 4
                loop    loc_1A985

loc_1A9A8:                              ; ...
                popa
                pop     es
                assume es:nothing
                pop     ds
                retn
sub_1A96E       endp


; =============== S U B R O U T I N E =======================================


sub_1A9AC       proc near               ; ...
                push    eax
                push    cx
                push    si
                push    di
                push    es
                xor     bx, bx
                mov     es, bx
                assume es:BIOSDATA
                mov     di, 1DCh
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     si, 6E0Dh
                std
                call    sub_1A9D2
                mov     di, 3Ch ; '<'
                call    sub_1A9D2
                xor     dx, dx
                cld
                pop     es
                assume es:nothing
                pop     di
                pop     si
                pop     cx
                pop     eax
                retn
sub_1A9AC       endp


; =============== S U B R O U T I N E =======================================


sub_1A9D2       proc near               ; ...
                mov     cx, 8

loc_1A9D5:                              ; ...
                shl     bx, 1
                cmpsd
                jz      short loc_1A9E7
                mov     eax, es:[di+4]
                mov     [si+4], eax
                or      bx, 1

loc_1A9E7:                              ; ...
                loop    loc_1A9D5
                retn
sub_1A9D2       endp


; =============== S U B R O U T I N E =======================================


sub_1A9EA       proc near               ; ...
                push    ds
                mov     ax, cs:BDataSeg
                mov     ds, ax
                assume ds:nothing
                cli
                mov     ax, 8FABh
                mov     ds:152h, ax
                mov     ax, cs
                mov     ds:154h, ax
                sti
                mov     cs:byte_188B2, 1
                mov     cs:word_188B3, 0
                pop     ds
                assume ds:nothing
                retn
sub_1A9EA       endp


; =============== S U B R O U T I N E =======================================


sub_1AA0D       proc near               ; ...
                push    ds
                mov     ax, cs:BDataSeg
                mov     ds, ax
                assume ds:nothing
                cli
                mov     ax, 2066h
                mov     ds:152h, ax
                mov     ax, cs:BCodeSeg
                mov     ds:154h, ax
                sti
                mov     cs:byte_188B2, 0
                pop     ds
                assume ds:nothing
                retn
sub_1AA0D       endp

; ---------------------------------------------------------------------------
                cmp     ax, 4A30h
                jz      short loc_1AA39
                push    cs:BCodeSeg
                push    offset i2f
                retf
; ---------------------------------------------------------------------------

loc_1AA39:                              ; ...
                pusha
                push    ds
                push    es
                mov     ax, es:[bx]
                mov     cs:word_188B3, ax
                mov     si, dx
                call    sub_1A8F5
                pop     es
                pop     ds
                popa
                iret
; ---------------------------------------------------------------------------
aQemm386_sys    db 'QEMM386.SYS'

; =============== S U B R O U T I N E =======================================


sub_1AA57       proc near               ; ...
                push    ds
                push    es
                pusha
                push    es
                pop     ds
                push    cs
                pop     es
                assume es:SYSINIT
                cld
                mov     di, 8FCCh
                mov     ah, es:[di]

loc_1AA65:                              ; ...
                lodsb
                cmp     al, 0Ah
                jz      short loc_1AA81
                cmp     al, ah
                jnz     short loc_1AA65
                push    si
                push    di
                dec     si
                mov     cx, 0Bh
                repe cmpsb
                pop     di
                pop     si
                jnz     short loc_1AA65
                mov     cs:word_17B49, 0FFFFh

loc_1AA81:                              ; ...
                popa
                pop     es
                assume es:nothing
                pop     ds
                retn
sub_1AA57       endp

; ---------------------------------------------------------------------------
                db    0
byte_1AA86      db 5Ch                  ; ...
                db  4Ch ; L
                db  4Fh ; O
                db  47h ; G
                db  4Fh ; O
                db  2Eh ; .
                db  53h ; S
                db  59h ; Y
                db  53h ; S
                db    0
word_1AA90      dw 0                    ; ...
word_1AA92      dw 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_1AA94       proc near               ; ...
                pusha
                push    ds
                push    es
                mov     ds, cs:BCodeSeg
                cmp     byte ptr ds:24Bh, 0
                jnz     short loc_1AAB1
                test    cs:byte_15140, 1
                jnz     short loc_1AAB1
                test    cs:byte_15145, 0Ah

loc_1AAB1:                              ; ...
                jnz     short loc_1AB2C
                cmp     dx, 1
                jnz     short loc_1AB09
                sub     dx, dx
                cmp     cs:byte_1AA86, dl
                jnz     short loc_1AB09
                jmp     loc_1AB45
; ---------------------------------------------------------------------------
                push    ss
                pop     es
                sub     sp, 26h
                mov     di, sp
                mov     bp, 3C2h
                call    near ptr sub_1AE15
                sub     cx, cx
                call    sub_1AC84
                mov     ax, 0A000h
                mov     ds, ax
                assume ds:nothing
                mov     si, 0FD00h
                sub     di, di
                mov     cx, 100h
                call    loc_1AD07
                mov     di, sp
                call    sub_1AD33
                push    ss
                pop     es
                mov     bp, 5E1h
                call    near ptr sub_1AE15
                add     sp, 26h
                call    sub_1AD29
                mov     ds, cs:BDataSeg
                assume ds:nothing
                or      byte ptr ds:9, 20h
                mov     bp, 315h
                call    near ptr sub_1AE15

loc_1AB09:                              ; ...
                cmp     cs:byte_1AA86, 0
                jz      short loc_1AB2C
                mov     ax, 1A00h
                push    dx
                int     10h             ; - VIDEO - DISPLAY COMBINATION (PS,VGA/MCGA): read display combination code
                pop     dx
                cmp     al, 1Ah
                jnz     short loc_1AB2C
                or      bl, bl
                jnz     short loc_1AB22
                mov     bl, bh

loc_1AB22:                              ; ...
                cmp     bl, 7
                jz      short loc_1AB2F
                cmp     bl, 8
                jz      short loc_1AB2F

loc_1AB2C:                              ; ...
                jmp     loc_1AC80
; ---------------------------------------------------------------------------

loc_1AB2F:                              ; ...
                or      dx, dx
                jnz     short loc_1AB3A
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dx, 9006h
                sub     bx, bx

loc_1AB3A:                              ; ...
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                jnb     short loc_1AB48
                test    bx, bx
                jnz     short loc_1AB2C

loc_1AB45:                              ; ...
                or      ax, 0FFFFh

loc_1AB48:                              ; ...
                mov     dx, 2476h
                mov     ds, dx
                assume ds:nothing
                mov     cs:word_1AA90, ax
                xchg    ax, bx
                mov     dx, 0
                call    sub_1ADE1
                jb      loc_1AC78
                mov     si, dx
                cmp     word ptr [si], 4D42h
                jnz     loc_1AC78
                add     si, 0Eh
                cmp     word ptr [si], 28h ; '('
                jnz     loc_1AC78
                cmp     word ptr [si+0Ch], 1
                jnz     loc_1AC78
                cmp     word ptr [si+0Eh], 8
                jnz     loc_1AC78
                cmp     word ptr [si+4], 140h
                jnz     loc_1AC78
                cmp     word ptr [si+8], 190h
                jnz     loc_1AC78
                cmp     word ptr [si+10h], 0
                jnz     loc_1AC78
                mov     ax, [si+24h]
                push    ds
                mov     ds, cs:BDataSeg
                assume ds:nothing
                mov     ds:2B0h, al
                neg     al
                add     al, 0FFh
                mov     ds:2B1h, al
                test    ah, ah
                jz      short loc_1ABB7
                mov     ds:2B2h, ax
                mov     ds:2B4h, ax

loc_1ABB7:                              ; ...
                pop     ds
                assume ds:nothing
                mov     cs:byte_1AA86, 0
                push    ss
                pop     es
                sub     sp, 26h
                mov     di, sp
                mov     bp, 3C2h
                call    near ptr sub_1AE15
                mov     cx, 8000h
                call    sub_1AC84
                mov     cs:word_1AA92, 0
                mov     ax, 0A000h
                mov     es, ax
                assume es:nothing
                mov     di, 0FD00h
                mov     cx, 2476h
                mov     ds, cx
                assume ds:nothing
                mov     si, 36h ; '6'
                mov     cx, 100h
                call    sub_1ACE5
                mov     bx, 436h
                mov     cx, ds:16h
                push    ds

loc_1ABF6:                              ; ...
                sub     di, 50h ; 'P'
                push    cx
                call    sub_1AD70
                pop     cx
                add     bx, 140h
                cmp     bx, 8000h
                jb      short loc_1AC14
                sub     bx, 8000h
                mov     dx, ds
                add     dx, 800h
                mov     ds, dx
                assume ds:nothing

loc_1AC14:                              ; ...
                loop    loc_1ABF6
                pop     ds
                assume ds:nothing
                mov     di, sp
                call    sub_1AD33
                push    ss
                pop     es
                assume es:nothing
                mov     bp, 5E1h
                call    near ptr sub_1AE15
                add     sp, 26h
                call    sub_1AD29
                mov     ds, cs:BCodeSeg
                mov     ax, cs:word_1AA92
                mov     ds:1EC6h, ax
                mov     ds, cs:BDataSeg
                assume ds:nothing
                mov     ax, es:46Ch

loc_1AC3F:                              ; ...
                mov     dx, es:46Ch
                cmp     dx, ax
                jz      short loc_1AC3F
                sub     cx, cx

loc_1AC4A:                              ; ...
                mov     ah, 1
                int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                                        ; Return: ZF clear if character in buffer
                                        ; AH = scan code, AL = character
                                        ; ZF set if no character in buffer
                inc     cx
                cmp     dx, es:46Ch
                jz      short loc_1AC4A
                xchg    ax, cx
                sub     dx, dx
                mov     cx, 14h
                div     cx
                test    ax, ax
                jz      short loc_1AC68
                mov     ds:44Ah, ax
                mov     ds:44Ch, ax

loc_1AC68:                              ; ...
                or      byte ptr ds:9, 20h
                mov     bp, 315h
                call    near ptr sub_1AE15
                mov     bx, cs:word_1AA90

loc_1AC78:                              ; ...
                test    bx, bx
                js      short loc_1AC80
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle

loc_1AC80:                              ; ...
                pop     es
                pop     ds
                assume ds:nothing
                popa
                retn
sub_1AA94       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_1AC84       proc near               ; ...
                mov     ax, 93h
                int     10h             ; - VIDEO - SET VIDEO MODE
                                        ; AL = mode
                mov     dx, 3DAh
                in      al, dx          ; Video status bits:
                                        ; 0: retrace.  1=display is in vert or horiz retrace.
                                        ; 1: 1=light pen is triggered; 0=armed
                                        ; 2: 1=light pen switch is open; 0=closed
                                        ; 3: 1=vertical sync pulse is occurring.
                mov     dl, 0C0h
                xor     al, al
                out     dx, al          ; EGA: palette register: select colors for attribute AL:
                                        ; 0: RED
                                        ; 1: GREEN
                                        ; 2: BLUE
                                        ; 3: blue
                                        ; 4: green
                                        ; 5: red
                mov     dl, 0C4h
                mov     ax, 0F02h
                out     dx, ax          ; EGA: sequencer address reg
                                        ; unknown register
                mov     al, 4
                out     dx, al          ; EGA: sequencer address reg
                                        ; memory mode. Data bits:
                                        ; 0: 1=text char generator; 0=graphics
                                        ; 1: 1=EGA ram > 64K; 0=64K
                                        ; 2: 1=sequential; 0=odd/even
                inc     dx
                in      al, dx          ; EGA port: sequencer data register
                and     al, 0F7h
                or      al, 4
                out     dx, al          ; EGA port: sequencer data register
                mov     dl, 0CEh
                mov     al, 5
                out     dx, al          ; EGA: graph 1 and 2 addr reg:
                                        ; mode register.Data bits:
                                        ; 0-1: Write mode 0-2
                                        ; 2: test condition
                                        ; 3: read mode: 1=color compare, 0=direct
                                        ; 4: 1=use odd/even RAM addressing
                                        ; 5: 1=use CGA mid-res map (2-bits/pixel)
                inc     dx
                in      al, dx          ; EGA port: graphics controller data register
                and     al, 0EFh
                out     dx, al          ; EGA port: graphics controller data register
                dec     dx
                mov     al, 6
                out     dx, al          ; EGA: graph 1 and 2 addr reg:
                                        ; miscellaneous graphics control.Data bits:
                                        ; 0: 1=graphics; 0=enable char gen (text)
                                        ; 1: 1=chain odd maps after even maps
                                        ; 2: memory mapping for CPU
                                        ;    00=a000H (128K);   01=a000H (64K)
                                        ;    10=b000H (32K MDA);11=b800H (32K CGA)
                inc     dx
                in      al, dx          ; EGA port: graphics controller data register
                and     al, 0FDh
                out     dx, al          ; EGA port: graphics controller data register
                jcxz    short loc_1ACC4
                mov     ax, 0A000h
                mov     es, ax
                assume es:nothing
                xor     ax, ax
                mov     di, 8000h
                cld
                rep stosb

loc_1ACC4:                              ; ...
                mov     dl, 0D4h
                mov     ax, 800Ch
                out     dx, ax          ; Video: CRT cntrlr addr
                                        ;
                mov     al, 9
                out     dx, al          ; Video: CRT cntrlr addr
                                        ; maximum scan line
                inc     dx
                in      al, dx          ; Video: CRT controller internal registers
                and     al, 0E0h
                out     dx, al          ; Video: CRT controller internal registers
                dec     dx
                mov     al, 14h
                out     dx, al          ; Video: CRT cntrlr addr
                                        ; underline location.  Bits 0-5 are scan line number.
                inc     dx
                in      al, dx          ; Video: CRT controller internal registers
                and     al, 0BFh
                out     dx, al          ; Video: CRT controller internal registers
                dec     dx
                mov     al, 17h
                out     dx, al          ; Video: CRT cntrlr addr
                                        ; mode control.Data bits:
                                        ; 0:0=CGA compatible
                                        ; 1:select row scan counter
                                        ; 2:hor retrace:1=double vert res
                                        ; 3:1=use char clock/2 for word refresh
                                        ; 4:1=high impedance on output
                                        ; 5:addr wrapping mode
                                        ; 6:1=byte,0=word mode
                                        ; 7:0=hardware reset
                inc     dx
                in      al, dx          ; Video: CRT controller internal registers
                or      al, 40h
                out     dx, al          ; Video: CRT controller internal registers
                retn
sub_1AC84       endp


; =============== S U B R O U T I N E =======================================


sub_1ACE5       proc near               ; ...
                push    di
                push    es
                push    si
                push    cx
                mov     di, si
                push    ds
                pop     es
                assume es:nothing
                cld

loc_1ACEE:                              ; ...
                lodsw
                mov     dx, ax
                lodsw
                shr     al, 2
                shr     dl, 2
                shr     dh, 2
                stosb
                xchg    dl, dh
                mov     ax, dx
                stosw
                loop    loc_1ACEE
                pop     cx
                pop     si
                pop     es
                pop     di

loc_1AD07:                              ; ...
                push    di
                xor     ax, ax
                mov     dx, 3C8h
                out     dx, al
                mov     dx, 3C9h
                mov     bx, cx
                add     cx, cx
                add     cx, bx

loc_1AD17:                              ; ...
                push    cx
                mov     cx, 14h

loc_1AD1B:                              ; ...
                loop    loc_1AD1B
                pop     cx
                lodsb
                out     dx, al
                or      di, di
                jz      short loc_1AD25
                stosb

loc_1AD25:                              ; ...
                loop    loc_1AD17
                pop     di
                retn
sub_1ACE5       endp


; =============== S U B R O U T I N E =======================================


sub_1AD29       proc near               ; ...
                mov     dx, 3DAh
                in      al, dx          ; Video status bits:
                                        ; 0: retrace.  1=display is in vert or horiz retrace.
                                        ; 1: 1=light pen is triggered; 0=armed
                                        ; 2: 1=light pen switch is open; 0=closed
                                        ; 3: 1=vertical sync pulse is occurring.
                mov     dl, 0C0h
                mov     al, 20h ; ' '
                out     dx, al          ; EGA: palette register: select colors for attribute AL:
                                        ; 0: RED
                                        ; 1: GREEN
                                        ; 2: BLUE
                                        ; 3: blue
                                        ; 4: green
                                        ; 5: red
                retn
sub_1AD29       endp


; =============== S U B R O U T I N E =======================================


sub_1AD33       proc near               ; ...
                mov     dx, 3C4h
                mov     al, 2
                out     dx, al          ; EGA: sequencer address reg
                                        ; map mask: data bits 0-3 enable writes to bit planes 0-3
                inc     dx
                in      al, dx          ; EGA port: sequencer data register
                and     al, 0F3h
                or      al, 3
                out     dx, al          ; EGA port: sequencer data register
                dec     dx
                mov     al, 4
                out     dx, al          ; EGA: sequencer address reg
                                        ; memory mode. Data bits:
                                        ; 0: 1=text char generator; 0=graphics
                                        ; 1: 1=EGA ram > 64K; 0=64K
                                        ; 2: 1=sequential; 0=odd/even
                inc     dx
                in      al, dx          ; EGA port: sequencer data register
                and     al, 0FBh
                out     dx, al          ; EGA port: sequencer data register
                mov     dl, 0CEh
                mov     ax, 4
                out     dx, ax          ; EGA: graph 1 and 2 addr reg:
                                        ; read map select.
                                        ; Data bits 0-2 select map # for read mode 00.
                mov     al, 5
                out     dx, al          ; EGA: graph 1 and 2 addr reg:
                                        ; mode register.Data bits:
                                        ; 0-1: Write mode 0-2
                                        ; 2: test condition
                                        ; 3: read mode: 1=color compare, 0=direct
                                        ; 4: 1=use odd/even RAM addressing
                                        ; 5: 1=use CGA mid-res map (2-bits/pixel)
                inc     dx
                in      al, dx          ; EGA port: graphics controller data register
                or      al, 10h
                out     dx, al          ; EGA port: graphics controller data register
                dec     dx
                mov     al, 6
                out     dx, al          ; EGA: graph 1 and 2 addr reg:
                                        ; miscellaneous graphics control.Data bits:
                                        ; 0: 1=graphics; 0=enable char gen (text)
                                        ; 1: 1=chain odd maps after even maps
                                        ; 2: memory mapping for CPU
                                        ;    00=a000H (128K);   01=a000H (64K)
                                        ;    10=b000H (32K MDA);11=b800H (32K CGA)
                inc     dx
                in      al, dx          ; EGA port: graphics controller data register
                or      al, 0Eh
                mov     si, 0B800h
                cmp     byte ptr ss:[di+1], 7
                jnz     short loc_1AD6E
                and     al, 0FBh
                mov     si, 0B000h

loc_1AD6E:                              ; ...
                out     dx, al          ; EGA port: graphics controller data register
                retn
sub_1AD33       endp


; =============== S U B R O U T I N E =======================================


sub_1AD70       proc near               ; ...
                push    bp
                cld
                mov     dx, 3C4h
                mov     cx, 140h
                shr     cx, 2
                mov     bp, cx
                mov     ax, 102h
                out     dx, ax          ; EGA: sequencer address reg
                                        ; unknown register
                mov     si, bx
                push    di

loc_1AD84:                              ; ...
                lodsd
                stosb
                mov     ah, 0
                add     cs:word_1AA92, ax
                loop    loc_1AD84
                pop     di
                mov     ax, 202h
                out     dx, ax          ; EGA: sequencer address reg
                                        ; unknown register
                lea     si, [bx+1]
                mov     cx, bp
                push    di

loc_1AD9B:                              ; ...
                lodsd
                stosb
                mov     ah, 0
                add     cs:word_1AA92, ax
                loop    loc_1AD9B
                pop     di
                mov     ax, 402h
                out     dx, ax          ; EGA: sequencer address reg
                                        ; unknown register
                lea     si, [bx+2]
                mov     cx, bp
                push    di

loc_1ADB2:                              ; ...
                lodsd
                stosb
                mov     ah, 0
                add     cs:word_1AA92, ax
                loop    loc_1ADB2
                pop     di
                mov     ax, 802h
                out     dx, ax          ; EGA: sequencer address reg
                                        ; unknown register
                lea     si, [bx+3]
                mov     cx, bp
                push    di

loc_1ADC9:                              ; ...
                lodsd
                stosb
                mov     ah, 0
                add     cs:word_1AA92, ax
                loop    loc_1ADC9
                pop     di
                pop     bp
                retn
sub_1AD70       endp


; =============== S U B R O U T I N E =======================================


sub_1ADD8       proc near               ; ...
                push    bp
                mov     bp, 25Eh
                call    near ptr sub_1AE15
                pop     bp
                retn
sub_1ADD8       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_1ADE1       proc near               ; ...
                mov     bx, cs:word_1AA90
                test    bx, bx
                clc
                js      short locret_1AE12
                push    ds
                push    si
                mov     si, ds
                mov     cx, 3

loc_1ADF2:                              ; ...
                push    cx
                mov     cx, 8000h
                mov     ah, 3Fh ; '?'
                stc
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                pop     cx
                jb      short loc_1AE06
                add     si, 800h
                mov     ds, si
                loop    loc_1ADF2

loc_1AE06:                              ; ...
                jb      short loc_1AE10
                mov     cx, 7836h
                mov     ah, 3Fh ; '?'
                stc
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer

loc_1AE10:                              ; ...
                pop     si
                pop     ds

locret_1AE12:                           ; ...
                retn
sub_1ADE1       endp

; ---------------------------------------------------------------------------
word_1AE13      dw 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_1AE15       proc far                ; ...
                pop     cs:word_1AE13
                push    cs
                push    cs:word_1AE13
                push    157h

loc_1AE23:                              ; ...
                push    cs:BCodeSeg
                push    bp
                retf
sub_1AE15       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
aLoadingDevice  db 'Loading Device ='   ; ...
aLoadfailed     db ' LoadFailed     ='
aLoadsuccess    db ' LoadSuccess    = '
                db 11h dup(0)
byte_1AE6E      db 106h dup(0)          ; ...
word_1AF74      dw 0                    ; ...
; ---------------------------------------------------------------------------
                push    ds
                push    es
                pusha
                push    cs
                pop     ds
                assume ds:SYSINIT
                mov     dx, offset aLoadingDevice ; "Loading Device ="
                call    sub_1AF85
                popa
                pop     es
                pop     ds
                assume ds:nothing
                retn

; =============== S U B R O U T I N E =======================================


sub_1AF85       proc near               ; ...
                or      si, si
                jz      short loc_1AFA7
                push    es
                pop     ds
                push    cs
                pop     es
                assume es:SYSINIT
                mov     di, offset byte_1AE6E

loc_1AF90:                              ; ...
                lodsb
                or      al, al
                jz      short loc_1AF98
                stosb
                jmp     short loc_1AF90
; ---------------------------------------------------------------------------

loc_1AF98:                              ; ...
                mov     ax, 0A0Dh
                stosw
                mov     cx, di
                sub     cx, 93DDh
                mov     cs:word_1AF74, cx

loc_1AFA7:                              ; ...
                mov     si, dx
                push    cs
                pop     ds
                assume ds:SYSINIT
                push    cs
                pop     es
                mov     cx, 11h
                mov     di, 93DDh
                mov     dx, di
                rep movsb
                mov     ax, 4A17h
                mov     cx, cs:word_1AF74
                int     2Fh
                retn
sub_1AF85       endp

; ---------------------------------------------------------------------------
                push    ds
                push    es
                pusha
                push    cs
                pop     ds
                xor     si, si
                mov     dx, 93CCh
                or      al, al
                jz      short loc_1AFD3
                mov     dx, 93BBh

loc_1AFD3:                              ; ...
                call    sub_1AF85
                popa
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                retn
; ---------------------------------------------------------------------------
aPath           db 'PATH='              ; ...
_PATH           db 110 dup(0)           ; ...
; ---------------------------------------------------------------------------
                push    cs
                pop     es
                assume es:SYSINIT
                mov     di, offset _PATH

loc_1B052:                              ; ...
                lodsb
                or      al, al
                jz      short loc_1B05E
                cmp     al, bh
                jz      short loc_1B05E
                stosb
                jmp     short loc_1B052
; ---------------------------------------------------------------------------

loc_1B05E:                              ; ...
                push    si
                mov     bl, al
                mov     al, 5Ch ; '\'
                cmp     al, es:[di-1]
                jz      short loc_1B06A
                stosb

loc_1B06A:                              ; ...
                mov     si, dx

loc_1B06C:                              ; ...
                lods    byte ptr es:[si]
                stosb
                or      al, al
                jnz     short loc_1B06C
                or      bl, bl
                clc
                jnz     short loc_1B079
                cmc

loc_1B079:                              ; ...
                pop     si
                retn
; ---------------------------------------------------------------------------
byte_1B07B      db 0                    ; ...
; ---------------------------------------------------------------------------
                push    cs
                pop     ds
                assume ds:SYSINIT
                push    si
                push    ax
                mov     di, dx
                mov     cx, 3
                mov     ah, 4Eh
                int     21h             ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
                                        ; CX = search attributes
                                        ; DS:DX -> ASCIZ filespec
                                        ; (drive, path, and wildcards allowed)
                pop     ax
                jb      short loc_1B0D3
                or      al, al
                jnz     short loc_1B0CE
                mov     byte_1B07B, 0

loc_1B095:                              ; ...
                call    sub_1B0E2
                cmp     al, byte_1B07B
                jle     short loc_1B0A5
                mov     byte_1B07B, al
                cmp     al, 8
                jz      short loc_1B0AE

loc_1B0A5:                              ; ...
                mov     cx, 3
                mov     ah, 4Fh
                int     21h             ; DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)
                                        ; [DTA] = data block from
                                        ; last AH = 4Eh/4Fh call
                jnb     short loc_1B095

loc_1B0AE:                              ; ...
                cmp     byte_1B07B, 0
                jz      short loc_1B0D3
                cmp     byte_1B07B, 8
                mov     si, 9658h
                jz      short loc_1B0C2
                mov     si, 965Dh

loc_1B0C2:                              ; ...
                mov     di, dx
                mov     al, 2Eh ; '.'
                mov     cx, 67
                repe scasb
                dec     di
                movsw
                movsw

loc_1B0CE:                              ; ...
                mov     al, byte_1B07B
                jmp     short loc_1B0D6
; ---------------------------------------------------------------------------

loc_1B0D3:                              ; ...
                mov     ax, 0

loc_1B0D6:                              ; ...
                pop     si
                retn
; ---------------------------------------------------------------------------
a_com           db '.COM',0             ; ...
a_exe           db '.EXE',0             ; ...

; =============== S U B R O U T I N E =======================================


sub_1B0E2       proc near               ; ...
                push    di
                push    si
                mov     al, 0
                mov     di, (offset _PATH+61h)
                mov     cx, 23
                cld
                repne scasb
                jnz     short loc_1B11E
                dec     di
                mov     cx, 5
                std
                mov     al, 2Eh ; '.'
                repne scasb
                jnz     short loc_1B11E
                inc     di
                cld
                mov     si, offset a_com ; ".COM"
                mov     ax, di
                cmpsw
                jnz     short loc_1B10D
                cmpsw
                jnz     short loc_1B10D
                mov     al, 8
                jmp     short loc_1B11E
; ---------------------------------------------------------------------------

loc_1B10D:                              ; ...
                mov     di, ax
                mov     si, offset a_exe ; ".EXE"
                cmpsw
                jnz     short loc_1B11C
                cmpsw
                jnz     short loc_1B11C
                mov     al, 4
                jmp     short loc_1B11E
; ---------------------------------------------------------------------------

loc_1B11C:                              ; ...
                mov     al, 0

loc_1B11E:                              ; ...
                pop     si
                pop     di
                retn
sub_1B0E2       endp

; ---------------------------------------------------------------------------
                lea     si, aPath       ; "PATH="
                mov     cx, 5
                cmp     config_envlen, 0
                jz      short loc_1B14E
                cld
                mov     es, config_wrkseg
                assume es:nothing
                xor     di, di

loc_1B136:                              ; ...
                push    si
                push    cx
                repe cmpsb
                pop     dx
                pop     si
                jz      short locret_1B14F
                dec     di
                xor     al, al
                mov     cx, 256
                repne scasb
                cmp     byte ptr es:[di], 0
                mov     cx, dx
                jnz     short loc_1B136

loc_1B14E:                              ; ...
                stc

locret_1B14F:                           ; ...
                retn
; ---------------------------------------------------------------------------
byte_1B150      db 200h dup(0), 0D0h, 96h, 0Bh dup(0), 1, 3 dup(0)
unk_1B361       db  68h ; h             ; ...
                db 0FFh
                db  11h
                db  40h ; @
                db    0
                dw 44CBh
word_1B368      dw 0F000h               ; ...
                db    2
                db    0
                dw 2B80h
word_1B36E      dw 0F000h               ; ...
                db    3
                db    0
                dw 98D4h
word_1B374      dw 0F000h               ; ...
                db    1
                db    0
                dw 44A2h
word_1B37A      dw 0F000h               ; ...
                db    1
                db    0
                dw 14DBh
word_1B380      dw 0F000h               ; ...
                db    1
                db    0
                dw 44A3h
word_1B386      dw 0F000h               ; ...
                db    2
                db    0
                dw 44A4h
word_1B38C      dw 0F000h               ; ...
                db    4
                db    0
                dw 98DDh
word_1B392      dw 0F000h               ; ...
                db    2
                db    0
                dw 467h
word_1B398      dw 0F000h               ; ...
                db    2
                db    0
                dw 469h
word_1B39E      dw 0F000h               ; ...
                db    2
                db    0
                dw 46Bh
word_1B3A4      dw 0F000h               ; ...
                db    2
                db    0
                dw 46Dh
word_1B3AA      dw 0F000h               ; ...
                db    2
                db    0
                dw 46Fh
word_1B3B0      dw 0F000h               ; ...
                db  0Dh
                db    0
                dw 4BDh
word_1B3B6      dw 0F000h               ; ...
                db  0Dh
                db    0
                dw 4CAh
word_1B3BC      dw 0F000h               ; ...
                db  0Dh
                db    0
                dw 4D7h
word_1B3C2      dw 0F000h               ; ...
                db    0
                db    2
word_1B3C6      dw 0FFFFh               ; ...
word_1B3C8      dw 0FFFFh               ; ...
                db 0Dh
                db 0

; =============== S U B R O U T I N E =======================================


sub_1B3CC       proc near               ; ...
                test    byte_1513F, 1
                jnz     locret_1B4DD
                test    byte_15141, 2
                jnz     locret_1B4DD
                mov     cx, ds
                mov     word_1B368, cx
                mov     ax, BCodeSeg
                mov     dx, BDataSeg
                mov     word_1B36E, ax
                mov     word_1B392, cx
                mov     word_1B380, cx
                mov     word_1B374, cx
                mov     word_1B37A, cx
                mov     word_1B386, cx
                mov     word_1B38C, cx
                mov     word_1B398, dx
                mov     word_1B39E, dx
                mov     word_1B3A4, dx
                mov     word_1B3AA, dx
                mov     word_1B3B0, dx
                mov     word_1B3B6, dx
                mov     word_1B3BC, dx
                mov     word_1B3C2, dx
                mov     ax, word ptr byte_1B150+200h
                mov     word_1B3C6, ax
                mov     ax, word ptr byte_1B150+202h
                mov     word_1B3C8, ax
                call    sub_16884
; ---------------------------------------------------------------------------
                mov     al, byte_15F4B
                or      al, 80h
                xchg    al, byte_15F4B
                mov     ah, byte_15F22
                push    ax
                and     byte_15145, 0BFh
                mov     byte_17B44, 1
                mov     dx, offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$"
                add     dx, ds:9D0Ah
                push    bx
                call    sub_14ADB
                pop     bx
                jnb     short loc_1B45F
                sub     al, al
                jmp     short loc_1B46B
; ---------------------------------------------------------------------------

loc_1B45F:                              ; ...
                push    cs
                push    offset unk_1B361
                call    1EEEh:5E4h
                add     sp, 4

loc_1B46B:                              ; ...
                mov     byte_15FF9, al
                mov     ax, BCodeSeg
                mov     es, ax
                xor     al, al
                cmp     dword ptr byte_1B150+20Dh, 0
                jz      short loc_1B47F
                inc     al

loc_1B47F:                              ; ...
                mov     es:164Dh, al
                mov     ax, cs
                mov     es, ax
                assume es:SYSINIT
                pop     ax
                or      byte_15F22, ah
                xchg    al, byte_15F4B
                test    al, 80h
                jnz     short loc_1B4A6
                mov     byte_15F4B, al
                test    byte_1513F, 20h
                jz      short loc_1B4A3
                mov     byte_15F9E, 0

loc_1B4A3:                              ; ...
                call    sub_178F0

loc_1B4A6:                              ; ...
                cmp     byte_15FF9, 0FFh
                jnz     short loc_1B4B7
                mov     dx, 9D6Ah
                add     dx, off_1B7A0
                call    print

loc_1B4B7:                              ; ...
                mov     si, 98D4h
                call    sub_1936A
                jnb     short loc_1B4CB
                mov     al, [si]
                and     al, 0DFh
                sub     al, 40h ; '@'
                jbe     short loc_1B4D1
                cmp     al, 1Ah
                ja      short loc_1B4D1

loc_1B4CB:                              ; ...
                mov     byte_12F6A, al
                mov     byte_12F87, al

loc_1B4D1:                              ; ...
                cmp     byte_15F23, 0
                jz      short locret_1B4DD
                or      byte_15144, 1

locret_1B4DD:                           ; ...
                retn
sub_1B3CC       endp


; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_1B4DE       proc near               ; ...
                push    es
                push    ds
                and     al, 5Fh
                mov     byte_1B582, al
                xor     ax, ax
                mov     es, ax
                assume es:BIOSDATA
                call    sub_1B507
sub_1B4DE       endp

; ---------------------------------------------------------------------------
                or      ax, ax
                jz      short loc_1B502
                call    sub_1B53D
; ---------------------------------------------------------------------------
                cmp     ax, 0FFFFh
                jz      short loc_1B502
                cmp     al, byte_1B582
                jz      short loc_1B502
                xor     ah, ah
                jmp     short loc_1B504
; ---------------------------------------------------------------------------

loc_1B502:                              ; ...
                xor     ax, ax

loc_1B504:                              ; ...
                pop     ds
                assume ds:nothing
                pop     es
                assume es:nothing
                retn

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_1B507       proc near               ; ...
                mov     al, 13h
                mov     bl, ds:9B02h
                xor     bh, bh
                call    sub_1B55B
sub_1B507       endp

; ---------------------------------------------------------------------------
                test    ah, 80h
                jz      short loc_1B52F
                cmp     word ptr ds:9B03h, 0AA55h
                jz      short loc_1B52B
                cmp     byte ptr ds:9B05h, 1
                jnz     short loc_1B52B
                mov     ax, 13h
                jmp     short locret_1B53C
; ---------------------------------------------------------------------------

loc_1B52B:                              ; ...
                xor     ax, ax
                jmp     short locret_1B53C
; ---------------------------------------------------------------------------

loc_1B52F:                              ; ...
                mov     al, ds:9B0Ch
                mov     cl, 4
                shl     al, cl
                or      al, ds:9B0Bh
                xor     ah, ah

locret_1B53C:                           ; ...
                retn

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_1B53D       proc near               ; ...
                mov     al, 8
                mov     bl, ds:9B02h
                xor     bh, bh
                call    sub_1B55B
sub_1B53D       endp

; ---------------------------------------------------------------------------
                test    ah, 80h
                jz      short loc_1B552
                mov     ax, 0FFFFh
                jmp     short locret_1B55A
; ---------------------------------------------------------------------------

loc_1B552:                              ; ...
                mov     al, ds:9B07h
                xor     ah, ah
                add     ax, 41h ; 'A'

locret_1B55A:                           ; ...
                retn

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

sub_1B55B       proc near               ; ...
                mov     word ptr ds:9B03h, 0AA55h
                mov     byte ptr ds:9B05h, 1
                mov     ds:9B06h, al
                mov     ax, 4405h
                sub     bl, 40h ; '@'
                mov     cx, 0Dh
                mov     dx, 9B03h
                int     21h             ; DOS - 2+ - IOCTL -
; ---------------------------------------------------------------------------
                jnb     short loc_1B57E
                or      ah, 80h
                jmp     short locret_1B581
; ---------------------------------------------------------------------------

loc_1B57E:                              ; ...
                mov     ax, ds:9B03h

locret_1B581:                           ; ...
                retn
sub_1B55B       endp

; ---------------------------------------------------------------------------
byte_1B582      db 0                    ; ...
                db 13 dup(0)

; =============== S U B R O U T I N E =======================================


sub_1B590       proc near               ; ...
                dec     ax
                mov     ds:9BABh, al
                push    ds
                push    es
                push    cs
                pop     es
                assume es:SYSINIT
                sub     sp, 400h
                mov     bx, sp
                push    ds
                push    bx
                mov     ax, 0CDCDh
                mov     cx, 1
                xor     dx, dx
                mov     [bx], dx
                mov     bp, bx
                int     25h             ; DOS - ABSOLUTE DISK READ (except DOS 4.0/COMPAQ DOS 3.31 >32M partitn)
                                        ; AL = drive number (0=A, 1=B, etc), DS:BX = Disk Transfer Address (buffer)
                                        ; CX = number of sectors to read, DX = first relative sector to read
                                        ; Return: CF set on error
                pop     cx
                pop     bx
                pop     ds
                xor     ax, ax
                cmp     word ptr [bx], 0CDCDh
                jnz     short loc_1B624
                cmp     word ptr [bx+2], 1
                jnz     short loc_1B624
                les     di, [bx+4]
                assume es:nothing
                cmp     word ptr es:[di], 0A55Ah
                jnz     short loc_1B624
                mov     bx, es:[di+2]
                cmp     bx, 0C8h
                jb      short loc_1B624
                cmp     word ptr es:[di+52h], 5753h
                jnz     short loc_1B624
                cmp     word ptr es:[di+54h], 5041h
                jnz     short loc_1B624
                mov     al, ds:9BABh
                mov     ah, al
                mov     dx, ds
                lea     bx, [di+56h]
                xlat    byte ptr es:[bx]
                cmp     al, ah
                jnz     short loc_1B621
                mov     ax, 4408h
                mov     bx, ds:9BABh
                inc     bx
                mov     byte ptr es:[di+3Eh], 0FFh
                int     21h             ; DOS - 2+ - IOCTL -
                xor     ax, ax
                mov     al, es:[di+3Eh]
                cmp     al, 0FFh
                jz      short loc_1B61D
                mov     di, es:[di+4]
                add     ax, ax
                add     di, ax
                mov     di, es:[di]
                mov     al, es:[di+41h]
                jmp     short loc_1B624
; ---------------------------------------------------------------------------

loc_1B61D:                              ; ...
                xor     ax, ax
                jmp     short loc_1B624
; ---------------------------------------------------------------------------

loc_1B621:                              ; ...
                inc     ax
                or      al, 40h

loc_1B624:                              ; ...
                add     sp, 400h
                pop     es
                pop     ds
                retn
sub_1B590       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                db 0
                db    0
                db    0
; ---------------------------------------------------------------------------
                enter   16h, 0
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     si, [bp+12h]
                mov     byte ptr [bp-16h], 30h ; '0'
                mov     byte ptr [bp-15h], 31h ; '1'
                mov     byte ptr [bp-14h], 32h ; '2'
                mov     byte ptr [bp-13h], 33h ; '3'
                mov     byte ptr [bp-12h], 34h ; '4'
                mov     byte ptr [bp-11h], 35h ; '5'
                mov     byte ptr [bp-10h], 36h ; '6'
                mov     byte ptr [bp-0Fh], 37h ; '7'
                mov     byte ptr [bp-0Eh], 38h ; '8'
                mov     byte ptr [bp-0Dh], 39h ; '9'
                mov     byte ptr [bp-0Ch], 41h ; 'A'
                mov     byte ptr [bp-0Bh], 42h ; 'B'
                mov     byte ptr [bp-0Ah], 43h ; 'C'
                mov     byte ptr [bp-9], 44h ; 'D'
                mov     byte ptr [bp-8], 45h ; 'E'
                mov     byte ptr [bp-7], 46h ; 'F'
                cmp     word ptr [bp+0Ah], 1
                sbb     di, di
                and     di, 0FFFAh
                add     di, 10h
                mov     eax, [bp+6]
                mov     [bp-4], eax
                les     bx, [bp+0Eh]
                mov     byte ptr es:[bx+si], 0
                mov     [bp-6], di

loc_1B69B:                              ; ...
                cmp     dword ptr [bp+6], 0
                jnz     short loc_1B6B1
                cmp     dword ptr [bp-4], 0
                jnz     short loc_1B6F6
                mov     dword ptr [bp-4], 1

loc_1B6B1:                              ; ...
                mov     ax, di
                cwd
                push    dx
                push    di
                mov     eax, [bp+6]
                pop     ecx
                xor     edx, edx
                div     ecx
                mov     eax, edx
                shr     edx, 10h
                mov     bx, ax
                lea     ax, [bp-16h]
                add     bx, ax
                mov     al, ss:[bx]
                les     bx, [bp+0Eh]
                dec     si
                mov     es:[bx+si], al
                cmp     si, 0
                jz      short loc_1B6F6
                mov     ax, di
                cwd
                push    dx
                push    di
                mov     eax, [bp+6]
                pop     ecx
                xor     edx, edx
                div     ecx
                mov     [bp+6], eax
                jmp     short loc_1B69B
; ---------------------------------------------------------------------------

loc_1B6F6:                              ; ...
                cmp     byte ptr [bp+0Ch], 0
                jnz     short loc_1B70C
                mov     di, [bp+0Eh]
                mov     ax, di
                mov     dx, [bp+10h]
                add     ax, si
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------
                nop

loc_1B70C:                              ; ...
                mov     di, [bp+0Eh]
                or      si, si
                jz      short loc_1B723
                mov     es, word ptr [bp+10h]

loc_1B716:                              ; ...
                mov     bx, di
                dec     si
                mov     al, [bp+0Ch]
                mov     es:[bx+si], al
                or      si, si
                jnz     short loc_1B716

loc_1B723:                              ; ...
                mov     ax, di
                mov     dx, [bp+10h]
                pop     ds
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------
                nop
                pop     cx
                add     [bp+si-63h], ch
                add     [bx+di], al
                sub     ax, 16h
                add     [si], ah
                add     [bx+0], ah
                xchg    ax, sp
                add     bl, bl
; ---------------------------------------------------------------------------
                db    0
off_1B740       dw offset Sysinit_Msg_05 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_06 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B744       dw offset Sysinit_Msg_07 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B746       dw offset Sysinit_Msg_08 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_09 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_10 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B74C       dw offset Sysinit_Msg_11 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B74E       dw offset Sysinit_Msg_12 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_13 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_14 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_15 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B756       dw offset Sysinit_Msg_16 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_17 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_18 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_19 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_20 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_21 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_22 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_23 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_24 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_25 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_26 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_27 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_28 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
SYSI_MSG29_PTR  dw offset Sysinit_Msg_29 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_30 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_31 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_32 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_33 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_34 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_35 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_36 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_37 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_38 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_39 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_40 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_41 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_46 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B78C       dw offset Sysinit_Msg_47 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_48 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_49 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B792       dw offset Sysinit_Msg_50 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_51 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_52 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_53 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_54 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_55 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B79E       dw offset Sysinit_Msg_56 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7A0       dw offset Sysinit_Msg_57 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7A2       dw offset Sysinit_Msg_58 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$"
off_1B7A4       dw offset Sysinit_Msg_59 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$"
off_1B7A6       dw offset Sysinit_Msg_60 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$"
off_1B7A8       dw offset Sysinit_Msg_61 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$"
off_1B7AA       dw offset Sysinit_Msg_62 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$"
                dw offset Sysinit_Msg_63 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_64 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_65 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_66 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_67 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_68 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_69 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7BA       dw offset Sysinit_Msg_70 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_71 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
MSG_72_PTR      dw offset Sysinit_Msg_72 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_73 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_74 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_75 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_76 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_77 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_78 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_79 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
stack_over_msg_off dw offset Sysinit_Msg_80 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_81 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset Sysinit_Msg_82 - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7D4       dw offset Sysinit_Msg_83 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7D6       dw offset Sysinit_Msg_84 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7D8       dw offset Sysinit_Msg_85 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7DA       dw offset Sysinit_Msg_86 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7DC       dw offset Sysinit_Msg_87 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7DE       dw offset Sysinit_Msg_88 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$"
off_1B7E0       dw offset Sysinit_Msg_89 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7E2       dw offset Sysinit_Msg_90 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7E4       dw offset Sysinit_Msg_91 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
off_1B7E6       dw offset Sysinit_Msg_92 - offset SYSINITMSGS ; ...
                                        ; "Starting Windows Millennium...\r\n\r\n$" ...
                dw offset IOSYSMSG - offset SYSINITMSGS ; "Starting Windows Millennium...\r\n\r\n$" ...
SYSINITMSGS     db 'Starting Windows Millennium...',0Dh,0Ah ; ...
                db 0Dh,0Ah              ; WinMeStartMsg
                db '$',0
Sysinit_Msg_01  db 'Windows Millennium is now starting your MS-DOS-based program.',0Dh
                db 0Ah
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_02  db 'Windows Millennium is now restarting...',0Dh,0Ah
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_03  db 'Press Esc now to cancel MS-DOS mode and restart Windows Millenniu'
                db 'm...$',0
Sysinit_Msg_04  db 0Dh,0Ah
                db 'There is an unrecognized command in your CONFIG.SYS file.',0Dh,0Ah
                db '$',0
Sysinit_Msg_05  db 0Dh,0Ah              ; ...
                db '$',0
Sysinit_Msg_06  db 0Dh,0Ah              ; ...
                db 'The following command in your CONFIG.SYS file is incorrect:',0Dh,0Ah
                db '$',0
Sysinit_Msg_07  db 0Dh,0Ah              ; ...
                db 'The sector size specified in this file is too large: $',0
Sysinit_Msg_08  db 0Dh,0Ah              ; ...
                db 'The following file is missing or corrupted: $',0
Sysinit_Msg_09  db 'WIN.COM',0          ; ...
Sysinit_Msg_10  db 'COMMAND.COM',0      ; ...
Sysinit_Msg_11  db 0Dh,0Ah              ; ...
                db 'There is an invalid country code or code page in your CONFIG.SYS '
                db 'file.',0Dh,0Ah
                db '$',0
Sysinit_Msg_12  db 0Dh,0Ah              ; ...
                db 'There is an error in the COUNTRY command in your CONFIG.SYS file.'
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_13  db 0Dh,0Ah              ; ...
                db 'There is an invalid country setting in your registry.',0Dh,0Ah
                db '$',0
Sysinit_Msg_14  db 0Dh,0Ah              ; ...
                db 'Cannot find the COUNTRY.SYS file.',0Dh,0Ah
                db '$',0
Sysinit_Msg_15  db 0Dh,0Ah              ; ...
                db 'Cannot set the code page(s) in DISPLAY.SYS.',0Dh,0Ah
                db '$',0
Sysinit_Msg_16  db 0Dh,0Ah              ; ...
                db 'There is not enough memory for the COUNTRY.SYS file.',0Dh,0Ah
                db 'Remove some drivers from your CONFIG.SYS file, and then try again'
                db '.',0Dh,0Ah
                db '$',0
Sysinit_Msg_17  db 0Dh,0Ah              ; ...
                db 'The configuration specified in your CONFIG.SYS file is too large '
                db 'for memory.',0Dh,0Ah
                db 'Remove some drivers, and then try again.',0Dh,0Ah
                db '$',0
Sysinit_Msg_18  db 0Dh,0Ah              ; ...
                db 'You have too many block devices specified in your CONFIG.SYS file'
                db '.',0Dh,0Ah
                db 'Remove some disk drivers from your CONFIG.SYS file, and then try '
                db 'again.',0Dh,0Ah
                db '$',0
Sysinit_Msg_19  db 0Dh,0Ah              ; ...
                db 'The STACKS setting(s) in your CONFIG.SYS file are incorrect.',0Dh
                db 0Ah
                db 'Default stack settings will be used instead.',0Dh,0Ah
                db '$',0
Sysinit_Msg_20  db 'There is an error in your CONFIG.SYS file on line $',0 ; ...
Sysinit_Msg_21  db 'Warning: Logical drives past Z exist and will be ignored.',0Dh,0Ah ; ...
                db '$',0
Sysinit_Msg_22  db 'Now preparing to start your new computer...',0Dh,0Ah ; ...
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_23  db 'Starting Windows Millennium Emergency Boot...',0Dh,0Ah ; ...
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_24  db 0Dh,0Ah              ; ...
                db '  Microsoft Windows Millennium Startup Menu',0Dh,0Ah
                db '  ',0CDh,0CDh,0CDh,0CDh,0CDh,0CDh,0CDh,0CDh,0CDh,0CDh,0CDh,0CDh,0CDh,0CDh
                db 14h dup(0CDh), 0Dh, 0Ah
                db '$',0
Sysinit_Msg_25  db '  Enter a choice: $',0 ; ...
Sysinit_Msg_26  db '  F5=Safe mode  Shift+F5=Command prompt  Shift+F8=Step-by-step co' ; ...
                db 'nfirmation [ ]$',0
Sysinit_Msg_27  db '  F5=Safe mode  Shift+F8=Step-by-step confirmation [ ]$',0 ; ...
Sysinit_Msg_28  db ' [Enter=Y,Esc=N]?$',0 ; ...
Sysinit_Msg_29  db 'YNAyna',0           ; ...
Sysinit_Msg_30  db 'Time remaining: $',0 ; ...
Sysinit_Msg_31  db 'Type the name of the Command Interpreter (e.g., C:\WINDOWS\COMMAN' ; ...
                db 'D.COM)',0Dh,0Ah
                db '$',0
Sysinit_Msg_32  db 'Type the name of the Windows loader (e.g., C:\WINDOWS\SYSTEM\VMM3' ; ...
                db '2.VXD)',0Dh,0Ah
                db '$',0
Sysinit_Msg_33  db 'Type the name of the Windows loader (e.g., C:\WINDOWS\WIN.COM)',0Dh ; ...
                db 0Ah
                db '$',0
Sysinit_Msg_34  db 'Press any key to continue . . .',0Dh,0Ah ; ...
                db '$',0
Sysinit_Msg_35  db 'Windows is bypassing your startup files.',0Dh,0Ah ; ...
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_36  db 'Windows is bypassing your startup files.',0Dh,0Ah ; ...
                db 'Minimal network support will be loaded if available.',0Dh,0Ah
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_37  db 'Windows is starting the command prompt only.',0Dh,0Ah ; ...
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_38  db 'Windows will prompt you to confirm each startup command.',0Dh,0Ah ; ...
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_39  db 'Load DoubleSpace driver [Enter=Y,Esc=N]?$',0 ; ...
Sysinit_Msg_40  db 'Load DriveSpace driver [Enter=Y,Esc=N]?$',0 ; ...
Sysinit_Msg_41  db 'The compression driver cannot be set up correctly.',0Dh,0Ah ; ...
                db 'Get a version from your vendor that is compatible with this versi'
                db 'on of Windows.',0Dh,0Ah
                db '$',0
Sysinit_Msg_46  db 'Process the system registry [Enter=Y,Esc=N]?$',0 ; ...
Sysinit_Msg_47  db 'Create a startup log file (BOOTLOG.TXT) [Enter=Y,Esc=N]?$',0 ; ...
Sysinit_Msg_48  db 'Enable SMARTDRV disk cache [Enter=Y,Esc=N]?$',0 ; ...
Sysinit_Msg_49  db 'Load and initialize country and code page settings [Enter=Y,Esc=N' ; ...
                db ']?$',0
Sysinit_Msg_50  db 'Process your startup device drivers (CONFIG.SYS) [Enter=Y,Esc=N]?' ; ...
                db '$',0
Sysinit_Msg_51  db 'Process your startup command file (AUTOEXEC.BAT) [Enter=Y,Esc=N]?' ; ...
                db '$',0
Sysinit_Msg_52  db 'Load the Windows graphical user interface [Enter=Y,Esc=N]?$',0 ; ...
Sysinit_Msg_53  db '  Warning: Windows has detected a registry/configuration error.',0Dh ; ...
                db 0Ah
                db '  Use SCANREG to correct this error.',0Dh,0Ah
                db '$',0
Sysinit_Msg_54  db '  Warning: Windows has detected a compressed drive access error.',0Dh ; ...
                db 0Ah
                db '  Choose Safe mode command prompt only, to help you identify the '
                db 'problem.',0Dh,0Ah
                db '$',0
Sysinit_Msg_55  db '  Warning: Windows did not finish loading on the previous attempt' ; ...
                db '.',0Dh,0Ah
                db '  Choose Safe mode, to start Windows with a minimal set of driver'
                db 's.',0Dh,0Ah
                db '$',0
Sysinit_Msg_56  db 'Warning: Windows multi-boot may not function correctly.',0Dh,0Ah ; ...
                db 'Check for system files in your root directory with conflicting ex'
                db 'tensions.',0Dh,0Ah
                db '$',0
Sysinit_Msg_57  db 'Warning: the system configuration manager failed to run.',0Dh,0Ah ; ...
                db 'Some of your real-mode device drivers may not initialize properly'
                db '.',0Dh,0Ah
                db '$',0
Sysinit_Msg_58  db 0ADh dup(20h)        ; ...
                                        ; 173 blank/space chars
                db '$',0
Sysinit_Msg_59  db 48h dup(20h)         ; ...
                                        ; 72 blank/space chars
                db '$',0
Sysinit_Msg_60  db 22h dup(20h)         ; ...
                                        ; 34 blank/space chars
                db '$',0
Sysinit_Msg_61  db 3 dup(' '), '$', 3 dup(' '), '$', 3 dup(' '), '$', 3 dup(' ') ; ...
                db '$', 3 dup(' '), '$', 3 dup(' '), '$', 3 dup(' '), '$'
                db 3 dup(' '), '$', 3 dup(' '), '$', 3 dup(' '), '$', 3 dup(' ')
                db '$', 3 dup(' '), '$', 0
Sysinit_Msg_62  db 7Dh dup(20h)         ; ...
                                        ; 125 blank chars
                db '$',0
Sysinit_Msg_63  db 'Normal',0           ; ...
                db 0
Sysinit_Msg_64  db 'Logged (\BOOTLOG.TXT)',0 ; ...
                db 0
Sysinit_Msg_65  db 'Safe mode',0        ; ...
                db 0
Sysinit_Msg_66  db 'Safe mode with network support',0 ; ...
                db 0
Sysinit_Msg_67  db 'Step-by-step confirmation',0 ; ...
                db 0
Sysinit_Msg_68  db 'Command prompt only',0 ; ...
                db 0
Sysinit_Msg_69  db 'Safe mode command prompt only',0 ; ...
                db 0
Sysinit_Msg_70  db 0Dh,0Ah              ; ...
                db 'The BUFFERS setting(s) in your CONFIG.SYS file are too large.',0Dh
                db 0Ah
                db 'Default buffer settings will be used instead.',0Dh,0Ah
                db '$',0
Sysinit_Msg_71  db 0Dh,0Ah              ; ...
                db 'A memory allocation error occurred during startup.',0Dh,0Ah
                db 'Restart your computer and select Minimal boot.',0Dh,0Ah
                db '$',0
Sysinit_Msg_72  db 0Dh,0Ah              ; ...
                db 'A memory allocation error occurred during startup.',0Dh,0Ah
                db 'Restart your computer and select Interactive Start to identify th'
                db 'e problem.',0Dh,0Ah
                db '$',0
Sysinit_Msg_73  db 0Dh,0Ah              ; ...
                db 'Warning: the high memory area (HMA) is not available.',0Dh,0Ah
                db 'Additional low memory (below 640K) will be used instead.',0Dh,0Ah
                db '$',0
Sysinit_Msg_74  db 'There is not enough memory for Windows.',0Dh,0Ah ; ...
                db 'Remove some drivers from your CONFIG.SYS file, and then try again'
                db '.',0Dh,0Ah
                db '$',0
Sysinit_Msg_75  db 'Your previous MS-DOS files were not found.  $',0 ; ...
Sysinit_Msg_76  db 'Your previous MS-DOS version is not supported.  $',0 ; ...
Sysinit_Msg_77  db 'MS-DOS startup failed.',0Dh,0Ah ; ...
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_78  db 'Now loading your previous version of MS-DOS, please wait.',0Dh,0Ah ; ...
                db 0Dh,0Ah
                db '$',0
Sysinit_Msg_79  db 'Invalid setting in the MSDOS.SYS file: $',0 ; ...
Sysinit_Msg_80  db 0Dh,0Ah              ; ...
                db 7,0Dh,0Ah
                db 'An internal stack overflow has caused this session to be halted.',0Dh
                db 0Ah
                db 'Change the STACKS setting in your CONFIG.SYS file, and then try a'
                db 'gain.',0Dh,0Ah,0
                db    0
Sysinit_Msg_81  db 'WININIT.EXE: Missing/unable to load.',0Dh,0Ah ; ...
                db '$',0
Sysinit_Msg_82  db 'Load all Windows drivers [Enter=Y,Esc=N]?$',0 ; ...
Sysinit_Msg_83  db 7,'       XMS Driver not installed. Serious hardware problem, halt' ; ...
                db 'ing boot.',0Dh,0Ah
                db '$',0
Sysinit_Msg_84  db 'ERROR: No available extended memory was found.',0Dh,0Ah ; ...
                db '$',0
Sysinit_Msg_85  db 'ERROR: The High Memory Area (HMA) is unavailable.',0Dh,0Ah ; ...
                db '$',0
Sysinit_Msg_86  db 0Dh,'$',0            ; ...
Sysinit_Msg_87  db 0Dh,0Ah              ; ...
                db 0Dh,0Ah
                db 'Failed to resume from hibernate.',0Dh,0Ah
                db '$',0
Sysinit_Msg_88  db 0Dh, 19h dup(0Ah)    ; ...
aReturningToWindows db '                         Returning to Windows ...',0Dh,0Ah
                db '  $',0
Sysinit_Msg_89  db 0DBh,24h,0           ; ...
Sysinit_Msg_90  db 0Dh,0Ah              ; ...
                db 'Previous resume from hibernate failed.',0Dh,0Ah
                db '  Would you like to try again [Enter=Y,Esc=N]?$',0
Sysinit_Msg_91  db 'Loading and initializing IFSHLP.SYS driver...$',0 ; ...
Sysinit_Msg_92  db '    Complete.',0Dh,0Ah ; ...
                db '$',0
IOSYSMSG        db 'IOSYSMSG'           ; ...
                db 0E9h
                dw 4D16h
aPadm           db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPRDMPADMPADMPADMPUDMPADMPADMPADMPDDMPADMPADMPADMPODMPADMPADMP'
                db 'ADMPLDMPADMPADMPADMPPDMPADMPADMPADMPHDMPADMPADMPADMPLDMPADMPADMPA'
                db 'DMPODMPADMPADMPADMPEDMPADMPADMPADMPWDMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADM'
                db 'PADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMP'
                db 'ADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPA'
                db 'DMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPADMPAD'
                db 'MPADMPADMPADMPADMPAD',0
                db 2 dup(0)
SYSINIT         ends

; ===========================================================================

; Segment type: Pure code
DOSINIT         segment byte public 'CODE' use16
                assume cs:DOSINIT
                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
byte_1E450      db 0                    ; ...

; =============== S U B R O U T I N E =======================================


sub_1E451       proc near               ; ...
                push    ds

loc_1E452:
                push    es
                xor     eax, eax
                mov     ds, ax
                assume ds:BIOSDATA

loc_1E458:
                dec     ax

loc_1E459:
                mov     es, ax

loc_1E45B:
                mov     eax, dword ptr loc_0

loc_1E45F:
                mov     dword ptr loc_0, 55AA55AAh

loc_1E468:
                cmp     dword ptr es:10h, 55AA55AAh
                jnz     short loc_1E487

loc_1E474:
                mov     dword ptr loc_0, 0AA55AA55h

loc_1E47D:
                cmp     dword ptr es:10h, 0AA55AA55h

loc_1E487:                              ; ...
                mov     dword ptr loc_0, eax
                pop     es

loc_1E48C:
                pop     ds
                assume ds:nothing
                retn
sub_1E451       endp


; =============== S U B R O U T I N E =======================================


sub_1E48E       proc near               ; ...
                or      ax, ax
                mov     ah, 0DFh
                jnz     short loc_1E496
                mov     ah, 0DDh

loc_1E496:                              ; ...
                call    sub_1E4E2
                jnz     short loc_1E4DF
                mov     al, 0D1h
                out     64h, al         ; 8042 keyboard controller command register.
                                        ; Write output port (next byte to port 60h):
                                        ; 7:  1=keyboard data line pulled low (inhibited)
                                        ; 6:  1=keyboard clock line pulled low (inhibited)
                                        ; 5:  enables IRQ 12 interrupt on mouse IBF
                                        ; 4:  enables IRQ 1 interrupt on keyboard IBF
                                        ; 3:  1=mouse clock line pulled low (inhibited)
                                        ; 2:  1=mouse data line pulled low (inhibited)
                                        ; 1:  A20 gate on/off
                                        ; 0:  reset the PC (THIS BIT SHOULD ALWAYS BE SET TO 1)

loc_1E49F:
                call    sub_1E4E2
                jnz     short loc_1E4DF

loc_1E4A4:
                mov     al, ah
                out     60h, al         ; 8042 keyboard controller data register.

loc_1E4A8:
                call    sub_1E4E2
                jnz     short loc_1E4DF

loc_1E4AD:
                xor     cx, cx

loc_1E4AF:
                mov     cl, cs:byte_1E450
                jcxz    short loc_1E4BB

loc_1E4B6:
                dec     cx
                jcxz    short loc_1E4DB
                jmp     short loc_1E4C6
; ---------------------------------------------------------------------------

loc_1E4BB:                              ; ...
                mov     al, 0FFh

loc_1E4BD:                              ; 8042 keyboard controller command register.
                out     64h, al         ; Pulse output port.
                                        ; Bits 0-3 indicate ports to pulse.

loc_1E4BF:
                call    sub_1E4E2
                jnz     short loc_1E4DF
                jmp     short loc_1E4DB
; ---------------------------------------------------------------------------

loc_1E4C6:                              ; ...
                mov     cx, 2

loc_1E4C9:                              ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_1E4CB:                              ; ...
                in      al, 61h         ; PC/XT PPI port B bits:
                                        ; 0: Tmr 2 gate ___ OR 03H=spkr ON
                                        ; 1: Tmr 2 data ͼ  AND 0fcH=spkr OFF
                                        ; 3: 1=read high switches
                                        ; 4: 0=enable RAM parity checking
                                        ; 5: 0=enable I/O channel check
                                        ; 6: 0=hold keyboard clock low
                                        ; 7: 0=enable kbrd
                test    al, 10h

loc_1E4CF:
                jz      short loc_1E4C9

loc_1E4D1:                              ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_1E4D3:                              ; ...
                in      al, 61h         ; PC/XT PPI port B bits:
                                        ; 0: Tmr 2 gate ___ OR 03H=spkr ON
                                        ; 1: Tmr 2 data ͼ  AND 0fcH=spkr OFF
                                        ; 3: 1=read high switches
                                        ; 4: 0=enable RAM parity checking
                                        ; 5: 0=enable I/O channel check
                                        ; 6: 0=hold keyboard clock low
                                        ; 7: 0=enable kbrd

loc_1E4D5:
                test    al, 10h

loc_1E4D7:
                jnz     short loc_1E4D1

loc_1E4D9:
                loop    loc_1E4C9

loc_1E4DB:                              ; ...
                mov     ax, 1

locret_1E4DE:
                retn
; ---------------------------------------------------------------------------

loc_1E4DF:                              ; ...
                xor     ax, ax
                retn
sub_1E48E       endp


; =============== S U B R O U T I N E =======================================


sub_1E4E2       proc near               ; ...
                xor     cx, cx

loc_1E4E4:                              ; ...
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_1E4E6:                              ; ...
                in      al, 64h         ; 8042 keyboard controller status register
                                        ; 7:  PERR    1=parity error in data received from keyboard
                                        ;    +----------- AT Mode ----------+------------ PS/2 Mode ------------+
                                        ; 6: |RxTO    receive (Rx) timeout  | TO      general timeout (Rx or Tx)|
                                        ; 5: |TxTO    transmit (Tx) timeout | MOBF    mouse output buffer full  |
                                        ;    +------------------------------+-----------------------------------+
                                        ; 4:  INH     0=keyboard communications inhibited
                                        ; 3:  A2      0=60h was the port last written to, 1=64h was last
                                        ; 2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot
                                        ; 1:  IBF     1=input buffer full (keyboard can't accept data)
                                        ; 0:  OBF     1=output buffer full (data from keyboard is available)
                and     al, 2
                loopne  loc_1E4E4
                retn
sub_1E4E2       endp


; =============== S U B R O U T I N E =======================================


sub_1E4ED       proc near               ; ...
                pushf
                cli
                mov     ax, 1
                call    sub_1E48E

loc_1E4F5:
                popf

loc_1E4F6:
                or      ax, ax
                jnz     short locret_1E50B
                xor     ax, ax

loc_1E4FC:
                call    sub_1E48E
                inc     byte ptr ds:0
                cmp     byte ptr ds:0, 2
                jbe     short sub_1E4ED
                stc

locret_1E50B:                           ; ...
                retn
sub_1E4ED       endp

; ---------------------------------------------------------------------------
                dd 54h
dword_1E510     dd 0FFFFFFFFh           ; ...
byte_1E514      db 1                    ; ...
                db    0
                db    0
                db    0
unk_1E518       db    0
a00000000       db '00000000$'

; =============== S U B R O U T I N E =======================================


sub_1E522       proc near               ; ...
                cld
                mov     ah, 2
                int     16h             ; KEYBOARD - GET SHIFT STATUS
                                        ; AL = shift status bits
                test    al, 8
                jz      short loc_1E530
                mov     byte ptr ds:0C4h, 0

loc_1E530:                              ; ...
                call    sub_1E451
                jnz     short loc_1E53A
                call    sub_1E4ED
                jb      short loc_1E5A4

loc_1E53A:                              ; ...
                call    sub_1E6C6
                call    sub_1E654
                jnb     short loc_1E559
                call    sub_1E5EC
                or      ax, ax
                jz      short loc_1E556
                movzx   edx, ax
                mov     eax, 400h
                call    sub_1E71F

loc_1E556:                              ; ...
                call    sub_1E5F6

loc_1E559:                              ; ...
                push    es
                mov     ah, 52h
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     eax, ds:0C5h
                cmp     eax, 10000h
                sbb     ecx, ecx
                not     cx
                or      ax, cx
                mov     es:[bx+45h], ax
                pop     es
                mov     bx, es:34FCh
                mov     cx, es:34FAh
                xor     eax, eax

loc_1E581:                              ; ...
                cmp     byte ptr es:[bx], 1
                jnz     short loc_1E594
                mov     eax, es:[bx+2]

loc_1E58C:
                cmp     eax, 400h
                jz      short loc_1E5B3

loc_1E594:                              ; ...
                add     bx, 0Ah
                loop    loc_1E581

loc_1E599:                              ; ...
                mov     dx, 14h
                or      eax, eax
                jnz     short loc_1E5A4
                mov     dx, 9

loc_1E5A4:                              ; ...
                push    dx
                call    sub_1E5DA
                pop     dx
                mov     dx, 0Ch
                call    sub_1E5DA

loc_1E5AF:                              ; ...
                cli
                hlt
; ---------------------------------------------------------------------------
                jmp     short loc_1E5AF
; ---------------------------------------------------------------------------

loc_1E5B3:                              ; ...
                mov     ecx, es:[bx+6]
                cmp     ecx, 40h ; '@'
                jbe     short loc_1E599
                add     dword ptr es:[bx+2], 40h ; '@'
                sub     dword ptr es:[bx+6], 40h ; '@'
                mov     dx, 17h
                call    sub_1E5D1
                retn
sub_1E522       endp


; =============== S U B R O U T I N E =======================================


sub_1E5D1       proc near               ; ...
                cmp     cs:byte_1E514, 0
                jnz     short $+2

locret_1E5D9:                           ; ...
                retn
sub_1E5D1       endp


; =============== S U B R O U T I N E =======================================


sub_1E5DA       proc near               ; ...
                mov     cs:byte_1E514, 0
                mov     ax, dx
                push    ax
                call    cs:dword_1E510
                add     sp, 2
                retn
sub_1E5DA       endp


; =============== S U B R O U T I N E =======================================


sub_1E5EC       proc near               ; ...
                mov     ah, 88h
                clc
                int     15h             ; Get Extended Memory Size
                                        ; Return: CF clear on success
                                        ; AX = size of memory above 1M in K
                jnb     short locret_1E5F5
                xor     ax, ax

locret_1E5F5:                           ; ...
                retn
sub_1E5EC       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1E5F6       proc near               ; ...
                push    dx
                push    cx
                push    bx
                push    si
                push    es
                push    es
                push    bp
                mov     bp, sp
                sub     sp, 20h
                mov     bx, sp
                shr     bx, 4
                inc     bx
                mov     ax, ss
                add     ax, bx
                mov     es, ax
                mov     ax, 0E801h
                xor     bx, bx
                stc
                int     15h             ; BIOS Memory Services
                mov     sp, bp
                pop     bp
                pop     es
                jb      short loc_1E636
                test    bx, bx
                jz      short loc_1E636
                cmp     ax, 4000h
                ja      short loc_1E636
                movzx   edx, bx
                shl     edx, 6
                mov     eax, 4000h

loc_1E633:
                call    sub_1E71F

loc_1E636:                              ; ...
                pop     es
                pop     si

loc_1E638:
                pop     bx
                pop     cx
                pop     dx
                retn
sub_1E5F6       endp

; ---------------------------------------------------------------------------
byte_1E63C      db 24 dup(0)

; =============== S U B R O U T I N E =======================================


sub_1E654       proc near               ; ...
                push    es
                push    ds
                pop     es
                xor     ebx, ebx

loc_1E65A:                              ; ...
                mov     di, 1F0h
                mov     ecx, 14h
                mov     edx, 534D4150h
                mov     eax, 0E820h
                int     15h             ; BIOS Memory Services
                jb      short loc_1E6BE
                cmp     eax, 534D4150h
                jnz     short loc_1E6BE
                cmp     ecx, 14h
                jnz     short loc_1E6BE
                cmp     dword ptr [di+10h], 1
                jnz     short loc_1E6B9
                cmp     dword ptr [di+4], 0
                jnz     short loc_1E6B9
                mov     eax, es:[di]
                cmp     eax, 100000h
                jb      short loc_1E6B9
                mov     edx, 0FFFFFFFFh
                cmp     dword ptr es:[di+0Ch], 0
                jnz     short loc_1E6AE
                mov     edx, es:[di+8]

loc_1E6AE:                              ; ...
                shr     eax, 0Ah
                shr     edx, 0Ah
                call    sub_1E71F

loc_1E6B9:                              ; ...
                or      ebx, ebx
                jnz     short loc_1E65A

loc_1E6BE:                              ; ...
                cmp     dword ptr ds:0C5h, 1
                pop     es
                retn
sub_1E654       endp


; =============== S U B R O U T I N E =======================================


sub_1E6C6       proc near               ; ...
                push    ds
                push    es
                pop     ds
                mov     cx, ds:34FAh
                mov     bx, ds:34FCh
                xor     eax, eax

loc_1E6D4:                              ; ...
                mov     byte ptr [bx], 4
                mov     [bx+1], al
                mov     [bx+2], eax
                mov     [bx+6], eax
                add     bx, 0Ah
                loop    loc_1E6D4
                mov     ds:3500h, bx
                pop     ds
                retn
sub_1E6C6       endp

; ---------------------------------------------------------------------------
                push    ds
                push    eax
                mov     eax, 0FFFF0000h
                mov     ds, ax
                assume ds:BIOSDATA
                mov     ax, 3204h
                xchg    eax, dword ptr word_BC
                mov     es:31FCh, eax
                mov     eax, 0FFFF328Dh
                xchg    eax, dword ptr off_54
                mov     es:31F8h, eax
                mov     ax, 0FFFFh
                call    sub_1E7BB
                pop     eax
                pop     ds
                assume ds:nothing
                retf

; =============== S U B R O U T I N E =======================================


sub_1E71F       proc near               ; ...
                pushad
                lea     esi, [edx+eax]
                cmp     esi, ds:0C5h
                jbe     short loc_1E732
                mov     ds:0C5h, esi

loc_1E732:                              ; ...
                push    ds
                push    4E9h
                pop     ds
                assume ds:nothing
                xor     di, di
                mov     bx, ds:34FCh
                mov     cx, ds:34FAh

loc_1E741:                              ; ...
                cmp     byte ptr [bx], 4
                jnz     short loc_1E74E
                or      di, di
                jnz     short loc_1E78A
                mov     di, bx
                jmp     short loc_1E78A
; ---------------------------------------------------------------------------

loc_1E74E:                              ; ...
                cmp     byte ptr [bx], 1

loc_1E751:
                jnz     short loc_1E78A

loc_1E753:
                mov     ebp, [bx+2]
                add     ebp, [bx+6]
                cmp     ebp, eax
                jb      short loc_1E78A
                cmp     esi, [bx+2]
                jb      short loc_1E78A
                mov     edx, esi
                cmp     eax, [bx+2]
                jbe     short loc_1E773

loc_1E76F:
                mov     eax, [bx+2]

loc_1E773:                              ; ...
                cmp     edx, ebp

loc_1E776:
                jnb     short loc_1E77B

loc_1E778:
                mov     edx, ebp

loc_1E77B:                              ; ...
                mov     esi, edx

loc_1E77E:
                sub     edx, eax

loc_1E781:
                mov     byte ptr [bx], 4

loc_1E784:
                or      di, di
                jnz     short loc_1E78A
                mov     di, bx

loc_1E78A:                              ; ...
                add     bx, 0Ah

loc_1E78D:
                loop    loc_1E741

loc_1E78F:
                or      di, di

loc_1E791:
                jz      short loc_1E7A2

loc_1E793:
                mov     byte ptr [di+1], 0

loc_1E797:
                mov     byte ptr [di], 1

loc_1E79A:
                mov     [di+2], eax

loc_1E79E:
                mov     [di+6], edx

loc_1E7A2:                              ; ...
                pop     ds
                assume ds:nothing
                popad
                retn
sub_1E71F       endp

; ---------------------------------------------------------------------------
                pusha

loc_1E7A7:
                mov     bp, sp

loc_1E7A9:
                push    ds

loc_1E7AA:
                push    es

loc_1E7AB:
                push    cs

loc_1E7AC:
                pop     ds
                assume ds:DOSINIT

loc_1E7AD:
                mov     ax, [bp+14h]
                mov     es, ax
                call    sub_1E522
                pop     es
                pop     ds
                assume ds:nothing

loc_1E7B7:
                popa

locret_1E7B8:
                retf    2

; =============== S U B R O U T I N E =======================================


sub_1E7BB       proc near               ; ...
                push    ds

loc_1E7BC:
                mov     ds, ax
                mov     ds:3C12h, ax
                mov     ds:34FEh, ax
                mov     cx, 10h
                mul     cx
                mov     ds:3A4Ch, ax

loc_1E7CC:
                mov     ds:3A4Eh, dl

loc_1E7D0:
                add     ax, 3A42h
                adc     dx, 0
                mov     ds:3A5Ch, ax

loc_1E7D9:
                mov     ds:3A5Eh, dx
                pop     ds

locret_1E7DE:
                retn
sub_1E7BB       endp

; ---------------------------------------------------------------------------
                db    0
DOSINIT         ends

; ===========================================================================

; Segment type: Pure code
DOSCODE         segment byte public 'CODE' use16
                assume cs:DOSCODE
                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
unk_1E7E0       db    0
unk_1E7E1       db    0
unk_1E7E2       db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_1E7E8       db    0
                db    0
unk_1E7EA       db    0
unk_1E7EB       db    0
unk_1E7EC       db    0
unk_1E7ED       db    0
unk_1E7EE       db    0
unk_1E7EF       db    0
; ---------------------------------------------------------------------------
                push    bp
                mov     bp, sp

loc_1E7F3:
                push    ds
                push    es

loc_1E7F5:
                push    si

loc_1E7F6:
                push    di
                push    bx

loc_1E7F8:
                les     di, [bp+6]

loc_1E7FB:
                mov     cx, 40h ; '@'

loc_1E7FE:
                mov     ax, 1613h
                int     2Fh             ; - Multiplex - MS WINDOWS - MS-DOS 7 GET SYSTEM.DAT (REGISTRY FILE) PATHNAME
                                        ; ES:DI -> buffer for full ASCIZ pathname
                                        ; CX = buffer size in bytes
                                        ; Return: AX=0 if supported
                                        ; CX=number of bytes copied into buffer

loc_1E803:
                or      ax, ax

loc_1E805:
                jnz     short loc_1E815

loc_1E807:
                mov     cx, 7

loc_1E80A:
                push    ds

loc_1E80B:
                lds     dx, [bp+6]

loc_1E80E:
                mov     ah, 4Eh

loc_1E810:                              ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
                int     21h             ; CX = search attributes
                                        ; DS:DX -> ASCIZ filespec
                                        ; (drive, path, and wildcards allowed)

loc_1E812:
                pop     ds

loc_1E813:
                jnb     short loc_1E81C

loc_1E815:                              ; ...
                les     di, [bp+6]

loc_1E818:
                mov     byte ptr es:[di], 0

loc_1E81C:                              ; ...
                pop     bx
                pop     di
                pop     si
                pop     es
                pop     ds
                pop     bp
                retf
; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1E824       proc far                ; ...

arg_0           = word ptr  6

                push    bp

loc_1E825:
                mov     bp, sp
                push    ds

loc_1E828:
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing

loc_1E82D:
                cmp     word ptr ds:0Ch, 0
                jnz     short loc_1E83A

loc_1E834:
                mov     ax, [bp+arg_0]

loc_1E837:
                mov     ds:0Ch, ax

loc_1E83A:                              ; ...
                pop     ds
                assume ds:nothing
                leave
                retf
sub_1E824       endp

; ---------------------------------------------------------------------------

loc_1E83D:
                nop

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1E83E       proc far                ; ...

var_26          = byte ptr -26h
var_25          = byte ptr -25h
var_16          = word ptr -16h
var_14          = word ptr -14h
var_12          = dword ptr -12h
var_E           = dword ptr -0Eh
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = dword ptr  6
arg_4           = word ptr  0Ah

                enter   26h, 0
                push    di

loc_1E843:
                push    si
                push    ds

loc_1E845:
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                les     bx, [bp+arg_0]

loc_1E84D:
                inc     word ptr [bp+arg_0]

loc_1E850:
                mov     al, es:[bx]
                cbw
                mov     cx, ax

loc_1E856:
                cmp     cx, 8

loc_1E859:
                jl      loc_1E9FF
                mov     bx, word ptr [bp+arg_0]

loc_1E860:
                inc     word ptr [bp+arg_0]

loc_1E863:
                cmp     byte ptr es:[bx], 0FFh

loc_1E867:
                jnz     loc_1E9FF

loc_1E86B:
                sub     cx, 2

loc_1E86E:
                mov     [bp+var_8], cx
                mov     bx, word ptr [bp+arg_0]
                inc     word ptr [bp+arg_0]
                mov     al, es:[bx]
                cbw
                sub     ax, 11h
                sbb     dx, dx
                and     ax, dx
                add     ax, 11h

loc_1E885:
                mov     si, ax
                or      si, ax
                jz      short loc_1E89C

loc_1E88B:
                cmp     cx, 6
                jl      short loc_1E89C

loc_1E890:
                mov     bx, word ptr [bp+arg_0]
                mov     eax, es:[bx+2]
                mov     ds:1Ah, eax

loc_1E89C:                              ; ...
                cmp     [bp+arg_4], 0
                jnz     loc_1E9FF
                xor     di, di
                or      si, si

loc_1E8A8:
                jle     loc_1E9FF

loc_1E8AC:
                mov     [bp+var_A], si
                xor     dx, dx
                mov     [bp+var_6], dx
                mov     si, dx

loc_1E8B6:                              ; ...
                cmp     [bp+var_8], 6
                jl      loc_1E9FF
                lea     ax, [bp+var_E]
                push    ss
                push    ax
                push    large dword ptr [si+1C4h]
                push    large 80000002h
                call    far ptr 1EEEh:29DAh
                add     sp, 0Ch
                or      dx, ax
                jz      short loc_1E8E2
                add     word ptr [bp+arg_0], 6
                jmp     loc_1E9F0
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1E8E2:                              ; ...
                les     bx, [bp+arg_0]
                add     word ptr [bp+arg_0], 2
                mov     ax, es:[bx]
                mov     [bp+var_16], ax
                mov     [bp+var_14], 0
                mov     bx, word ptr [bp+arg_0]
                add     word ptr [bp+arg_0], 4
                mov     eax, es:[bx]
                mov     [bp+var_4], eax
                mov     ax, di
                cmp     ax, 10h
                jz      loc_1E9D0
                ja      short loc_1E91A
                sub     al, 8
                jl      short loc_1E91A
                sub     al, 3
                jle     short loc_1E93E
                dec     al
                jz      short loc_1E990

loc_1E91A:                              ; ...
                lea     ax, [bp+var_16]
                push    ss
                push    ax

loc_1E91F:
                push    large [bp+var_4]
                push    large 0
                push    large 0
                push    large dword ptr [si+2B0h]
                push    large [bp+var_E]
                call    far ptr 1EEEh:2CFAh
                add     sp, 18h
                jmp     loc_1E9E4
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1E93E:                              ; ...
                mov     [bp+var_12], 10h
                lea     ax, [bp+var_12]
                push    ss
                push    ax
                lea     ax, [bp+var_26]
                push    ss
                push    ax
                push    large 0
                push    large 0
                push    large dword ptr [si+2B0h]
                push    large [bp+var_E]
                call    far ptr 1EEEh:2CFAh
                add     sp, 18h
                or      dx, ax
                jnz     short loc_1E9E4
                cmp     [bp+var_26], 0
                jnz     short loc_1E97C
                les     bx, [bp+var_4]
                mov     word ptr es:[bx], 0
                jmp     short loc_1E9E4
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1E97C:                              ; ...
                lea     ax, [bp+var_26]
                push    ss
                push    ax
                push    cs
                call    near ptr sub_1EA04
                add     sp, 4
                les     bx, [bp+var_4]
                mov     es:[bx], ax
                jmp     short loc_1E9E4
; ---------------------------------------------------------------------------

loc_1E990:                              ; ...
                mov     [bp+var_12], 10h
                lea     ax, [bp+var_12]
                push    ss
                push    ax
                lea     ax, [bp+var_26]
                push    ss
                push    ax
                push    large 0
                push    large 0
                push    large dword ptr [si+2B0h]
                push    large [bp+var_E]
                call    far ptr 1EEEh:2CFAh
                add     sp, 18h
                or      dx, ax
                jnz     short loc_1E9E4
                mov     al, [bp+var_26]
                les     bx, [bp+var_4]

loc_1E9C3:
                mov     es:[bx], al

loc_1E9C6:
                mov     al, [bp+var_25]

loc_1E9C9:
                mov     es:[bx+1], al
                jmp     short loc_1E9E4
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1E9D0:                              ; ...
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                push    large [bp+var_4]
                push    large [bp+var_E]
                push    cs
                call    near ptr sub_1EE74
                add     sp, 0Ch

loc_1E9E4:                              ; ...
                push    large [bp+var_E]
                call    far ptr 1EEEh:29F8h
                add     sp, 4

loc_1E9F0:                              ; ...
                add     si, 4
                sub     [bp+var_8], 6
                inc     di
                cmp     [bp+var_A], di
                jg      loc_1E8B6

loc_1E9FF:                              ; ...
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                leave
                retf
sub_1E83E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1EA04       proc far                ; ...

var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   8, 0
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     ds, [bp+arg_2]
                assume ds:nothing
                mov     si, [bp+arg_0]
                sub     eax, eax
                mov     [bp+var_4], eax
                cmp     [si], al
                jz      short loc_1EA74

loc_1EA21:                              ; ...
                cmp     byte ptr [si], 30h ; '0'
                jl      short loc_1EA6C
                cmp     byte ptr [si], 39h ; '9'
                jg      short loc_1EA6C
                cmp     [bp+var_4], 10000h
                ja      short loc_1EA6C
                mov     al, [si]
                cbw
                sub     ax, 30h ; '0'
                cwd
                mov     cx, word ptr [bp+var_4]
                mov     bx, word ptr [bp+var_4+2]
                mov     [bp+var_6], dx
                mov     di, cx
                mov     dx, bx
                add     cx, cx
                adc     bx, bx
                add     cx, cx
                adc     bx, bx
                add     cx, di
                adc     bx, dx
                add     cx, cx
                adc     bx, bx
                add     cx, ax
                adc     bx, [bp+var_6]
                mov     word ptr [bp+var_4], cx
                mov     word ptr [bp+var_4+2], bx
                inc     si
                cmp     byte ptr [si], 0
                jnz     short loc_1EA21
                jmp     short loc_1EA74
; ---------------------------------------------------------------------------

loc_1EA6C:                              ; ...
                mov     [bp+var_4], 0

loc_1EA74:                              ; ...
                mov     ax, word ptr [bp+var_4]
                pop     ds
                pop     si
                pop     di
                leave
                retf
sub_1EA04       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1EA7C       proc far                ; ...

var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = dword ptr  0Ch

                enter   4, 0
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     di, [bp+arg_4]
                mov     ax, [bp+arg_0]
                mov     dx, [bp+arg_2]
                add     ax, di
                dec     ax
                mov     si, ax
                mov     [bp+var_2], dx
                or      di, di
                jz      short loc_1EABF
                mov     es, [bp+var_2]

loc_1EAA0:                              ; ...
                mov     bl, byte ptr [bp+arg_6]
                and     bx, 0Fh
                mov     al, [bx+2F4h]
                mov     bx, si
                dec     si
                mov     es:[bx], al
                mov     eax, [bp+arg_6]
                shr     eax, 4
                mov     [bp+arg_6], eax
                dec     di
                jnz     short loc_1EAA0

loc_1EABF:                              ; ...
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                leave
                retf
sub_1EA7C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1EAC4       proc far                ; ...

var_8           = word ptr -8
var_6           = word ptr -6
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh
arg_A           = word ptr  10h

                enter   0Ch, 0
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                sub     ax, ax
                cmp     [bp+arg_A], ax
                jnz     short loc_1EADC
                cmp     [bp+arg_8], ax
                jz      short loc_1EB1E

loc_1EADC:                              ; ...
                mov     ax, [bp+arg_8]

loc_1EADF:
                mov     [bp+var_6], ax

loc_1EAE2:
                mov     ax, [bp+arg_A]
                mov     [bp+var_8], ax
                neg     [bp+var_6]
                neg     [bp+var_6]
                adc     [bp+var_8], 0FFFFh
                mov     si, [bp+arg_4]
                mov     di, [bp+arg_0]

loc_1EAF8:                              ; ...
                mov     es, [bp+arg_6]
                mov     al, es:[si]
                sub     ah, ah

loc_1EB00:
                push    0

loc_1EB02:
                push    ax

loc_1EB03:
                push    2

loc_1EB05:
                push    [bp+arg_2]

loc_1EB08:
                push    di
                push    cs

loc_1EB0A:
                call    near ptr sub_1EA7C

loc_1EB0D:
                add     sp, 0Ah

loc_1EB10:
                add     di, 2
                inc     si

loc_1EB14:
                dec     [bp+var_6]
                jnz     short loc_1EAF8

loc_1EB19:
                dec     [bp+var_8]

loc_1EB1C:
                jns     short loc_1EAF8

loc_1EB1E:                              ; ...
                pop     ds
                assume ds:nothing
                pop     si

loc_1EB20:
                pop     di
                leave

locret_1EB22:
                retf
sub_1EAC4       endp

; ---------------------------------------------------------------------------
                nop

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1EB24       proc far                ; ...

var_100         = byte ptr -100h
arg_0           = dword ptr  6
arg_4           = dword ptr  0Ah
arg_8           = word ptr  0Eh
arg_A           = word ptr  10h

                enter   100h, 0

loc_1EB28:
                push    di
                push    si

loc_1EB2A:
                push    ds

loc_1EB2B:
                mov     ax, 43F9h

loc_1EB2E:
                mov     ds, ax
                assume ds:nothing
                mov     si, [bp+arg_8]
                mov     ax, [bp+arg_A]

loc_1EB36:
                or      ax, si

loc_1EB38:
                jz      loc_1EBC4

loc_1EB3C:
                mov     es, [bp+arg_A]
                push    large dword ptr es:[si]
                push    8
                push    ds

loc_1EB46:
                push    307h

loc_1EB49:
                push    cs

loc_1EB4A:
                call    near ptr sub_1EA7C
                add     sp, 0Ah
                mov     es, [bp+arg_A]
                push    0
                push    word ptr es:[si+4]
                push    4
                push    ds

loc_1EB5C:
                push    310h

loc_1EB5F:
                push    cs

loc_1EB60:
                call    near ptr sub_1EA7C
                add     sp, 0Ah
                mov     es, [bp+arg_A]

loc_1EB69:
                push    0

loc_1EB6B:
                push    word ptr es:[si+6]
                push    4
                push    ds

loc_1EB72:
                push    315h

loc_1EB75:
                push    cs
                call    near ptr sub_1EA7C
                add     sp, 0Ah
                push    large 2

loc_1EB7F:
                mov     ax, si

loc_1EB81:
                mov     dx, [bp+arg_A]

loc_1EB84:
                add     ax, 8
                push    dx
                push    ax
                push    ds
                push    31Ah
                push    cs
                call    near ptr sub_1EAC4
                add     sp, 0Ch
                push    large 6
                mov     ax, si
                mov     dx, [bp+arg_A]

loc_1EB9C:
                add     ax, 0Ah
                push    dx
                push    ax
                push    ds
                push    31Fh
                push    cs
                call    near ptr sub_1EAC4
                add     sp, 0Ch
                push    ds
                push    306h
                push    large [bp+arg_4]
                lea     ax, [bp+var_100]
                push    ss
                push    ax
                call    1EEEh:9D4h
                add     sp, 0Ch
                jmp     short loc_1EBEA
; ---------------------------------------------------------------------------

loc_1EBC4:                              ; ...
                push    ds
                lea     si, [bp+var_100]
                mov     cx, ss
                mov     ds, cx
                assume ds:nothing
                les     di, [bp+arg_4]
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds

loc_1EBEA:                              ; ...
                lea     ax, [bp+var_100]
                push    ss
                push    ax
                push    large [bp+arg_0]
                push    cs
                call    near ptr sub_1F0DA
                add     sp, 8
                mov     ax, 1
                pop     ds
                pop     si
                pop     di
                leave
                retf
sub_1EB24       endp

; ---------------------------------------------------------------------------
                nop

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1EC04       proc far                ; ...

var_108         = word ptr -108h
var_106         = word ptr -106h
var_104         = byte ptr -104h
var_C           = byte ptr -0Ch
var_A           = byte ptr -0Ah
var_6           = byte ptr -6
var_4           = word ptr -4
var_2           = byte ptr -2

                enter   10Ah, 0
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
; ---------------------------------------------------------------------------
                assume ds:nothing
word_1EC10      dw 46C7h                ; ...
word_1EC12      dw 0FFFCh               ; ...
                db 0FFh
; ---------------------------------------------------------------------------
                mov     [bp+var_6], 0
                mov     ax, ds:32Dh
                mov     [bp+var_106], ax
                xor     eax, eax
                mov     ecx, 3Fh ; '?'
                lea     di, [bp+var_104]
                push    ss
                pop     es
                rep stosd
                stosw
                push    ds
                push    32Fh
                push    large [dword ptr ds:1Ah]
                push    ds
                push    4D4h
                call    1EEEh:9D4h
                add     sp, 0Ch
                and     byte ptr ds:4D4h, 7Fh
                push    si
                mov     si, 4D4h
                mov     bx, 10h
                mov     dx, 1
                mov     ax, 6C00h
                mov     cx, 6
                push    bp
                int     21h             ; DOS - 4.0 - EXTENDED OPEN/CREATE
                                        ; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
                                        ; BH = flags, CX = create attribute, DL = action if file exists/does not exists
                                        ; DH = 00h (reserved), DS:SI -> ASCIZ file name
                pop     bp
                jb      short loc_1EC66
                mov     [bp+var_4], ax

loc_1EC66:                              ; ...
                pop     si
                cmp     [bp+var_4], 0FFFFh
                jz      loc_1EDBE
                mov     ah, 3Fh ; '?'
                mov     bx, [bp+var_4]
                mov     cx, 118h
                mov     dx, 6D4h
                push    bp
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                pop     bp
                jb      short loc_1EC86
                cmp     ax, 118h
                jz      short loc_1EC86
                stc

loc_1EC86:                              ; ...
                pushf
                mov     ax, 3E00h
                mov     bx, [bp+var_4]
                push    bp
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                pop     bp
                popf
                jb      short loc_1EC98
                mov     [bp+var_6], 1

loc_1EC98:                              ; ...
                cmp     [bp+var_6], 0
                jz      loc_1EDBE
                push    ds
                push    6D4h
                push    ds
                push    337h
                push    ds
                push    7ECh
                push    cs
                call    near ptr sub_1EB24
                add     sp, 0Ch
                or      ax, ax
                jz      loc_1EDAC
                mov     eax, ds:6E8h
                mov     dx, ds:6EAh
                cmp     eax, 100h
                jbe     short loc_1ECCC
                mov     ax, 100h

loc_1ECCC:                              ; ...
                mov     [bp+var_108], ax
                mov     cx, ax
                lea     di, [bp+var_106]
                mov     si, 6ECh
                mov     ax, ss
                mov     es, ax
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                mov     ax, ds:6E8h
                or      dx, dx
                jnz     short loc_1ECF1
                cmp     ax, 100h
                jbe     short loc_1ECF6

loc_1ECF1:                              ; ...
                xor     dx, dx
                mov     ax, 100h

loc_1ECF6:                              ; ...
                mov     si, ax
                mov     byte ptr [bp+si+var_106], 0
                cmp     dword ptr ds:6E8h, 100h
                jbe     short loc_1ED20
                mov     [bp+var_C], 2Dh ; '-'
                push    0
                push    word ptr ds:7EAh
                push    4
                lea     ax, [bp+var_A]
                push    ss
                push    ax
                push    cs
                call    near ptr sub_1EA7C
                add     sp, 0Ah

loc_1ED20:                              ; ...
                mov     [bp+var_2], 2
                push    large 1
                lea     ax, [bp+var_2]
                push    ss

loc_1ED2B:
                push    ax
                push    large 3
                lea     ax, [bp+var_106]
                push    ss
                push    ax
                push    ds
                push    7ECh
                push    cs
                call    near ptr sub_1F10C
                add     sp, 14h
                push    large 21Ch
                mov     ax, ds:36h

loc_1ED49:
                inc     word ptr ds:36h

loc_1ED4D:
                imul    ax, 21Ch

loc_1ED51:
                add     ax, 2

loc_1ED54:
                push    0

loc_1ED56:
                push    ax
                push    ds

loc_1ED58:
                push    7ECh

loc_1ED5B:
                push    cs

loc_1ED5C:
                call    near ptr sub_1F184

loc_1ED5F:
                add     sp, 0Ch

loc_1ED62:
                push    ds

loc_1ED63:
                push    361h

loc_1ED66:
                push    ds

loc_1ED67:
                push    7ECh

loc_1ED6A:
                push    cs

loc_1ED6B:
                call    near ptr sub_1F0DA
                add     sp, 8
                push    large 0Bh
                push    ds

loc_1ED75:
                push    2Ah

loc_1ED78:
                push    large 1
                push    ds

loc_1ED7C:
                push    1Eh
                push    ds

loc_1ED80:
                push    7ECh
                push    cs

loc_1ED84:
                call    near ptr sub_1F10C
                add     sp, 14h

loc_1ED8A:
                push    large 21Ch

loc_1ED90:
                mov     ax, ds:36h

loc_1ED93:
                inc     word ptr ds:36h

loc_1ED97:
                imul    ax, 21Ch

loc_1ED9B:
                add     ax, 2
                push    0
                push    ax
                push    ds

loc_1EDA2:
                push    7ECh
                push    cs
                call    near ptr sub_1F184
                add     sp, 0Ch

loc_1EDAC:                              ; ...
                mov     ah, 41h ; 'A'
                mov     dx, 4D4h
                push    bp
                int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)
                pop     bp
                push    2
                push    cs

loc_1EDB8:
                call    near ptr sub_1E824
                add     sp, 2

loc_1EDBE:                              ; ...
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                leave

locret_1EDC2:
                retf
sub_1EC04       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                nop

loc_1EDC4:
                push    bp
                mov     bp, sp
                push    di
                push    si
                push    ds

loc_1EDCA:
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     di, [bp+6]
                push    1

loc_1EDD4:
                push    word ptr [bp+8]
                push    di
                push    cs
                call    near ptr sub_1E83E
                add     sp, 6

loc_1EDDF:
                push    ds
                push    4D4h

loc_1EDE3:
                call    1EEEh:10h

loc_1EDE8:
                add     sp, 4

loc_1EDEB:                              ; ...
                push    large 43Ah

loc_1EDF1:
                push    ds

loc_1EDF2:
                push    4D4h
                call    1EEEh:10CEh

loc_1EDFA:
                add     sp, 8

loc_1EDFD:
                mov     si, ax
                or      si, ax
                jz      short loc_1EE0C
                push    1
                push    cs
                call    near ptr sub_1E824
                add     sp, 2

loc_1EE0C:                              ; ...
                or      si, si
                jnz     short loc_1EE3D
                push    si
                call    far ptr 1EEEh:1746h
                add     sp, 2
                or      dx, ax
                jnz     short loc_1EE34
                push    si
                push    ds
                push    4D4h
                push    large 80000002h
                call    far ptr 1EEEh:20C6h
                add     sp, 0Ah
                or      dx, ax
                jz      short loc_1EE3D

loc_1EE34:                              ; ...
                push    1
                push    cs
                call    near ptr sub_1E824
                add     sp, 2

loc_1EE3D:                              ; ...
                push    0
                push    word ptr [bp+8]
                push    di
                push    cs
                call    near ptr sub_1E83E
                add     sp, 6
                cmp     word ptr ds:0Ch, 0
                jnz     short loc_1EE55
                push    cs
                call    near ptr sub_1EC04

loc_1EE55:                              ; ...
                push    large 2
                push    large 0
                push    ds
                push    36h
                push    cs
                call    near ptr sub_1F184
                add     sp, 0Ch
                call    far ptr 1EEEh:17ACh
                mov     ax, ds:0Ch
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------
                nop

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1EE74       proc far                ; ...

var_22          = dword ptr -22h
var_1E          = dword ptr -1Eh
var_1A          = dword ptr -1Ah
var_16          = dword ptr -16h
var_12          = dword ptr -12h
var_E           = dword ptr -0Eh
var_A           = word ptr -0Ah
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  6
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh
arg_A           = word ptr  10h

                enter   22h, 0
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     si, [bp+arg_4]
                mov     [bp+var_1A], 0
                mov     [bp+var_A], 1
                mov     ax, [bp+arg_6]
                or      ax, si
                jz      loc_1F0D2
                mov     di, [bp+arg_8]
                mov     ax, [bp+arg_A]
                or      ax, di
                jz      loc_1F0D2
                mov     es, [bp+arg_A]  ; ...
                cmp     dword ptr es:[di], 2
                jb      loc_1F0D2
                xor     al, al
                mov     es, [bp+arg_6]
                mov     es:[si], al
                mov     es:[si+1], al
                sub     eax, eax
                mov     [bp+var_8], eax
                push    ax
                push    ax
                push    ax
                push    ax
                lea     ax, [bp+var_E]
                push    ss
                push    ax
                lea     ax, [bp+var_1E]
                push    ss
                push    ax
                lea     ax, [bp+var_1A]
                push    ss
                push    ax
                push    large 0
                push    large 0
                push    large 0
                push    large 0
                push    large 0
                push    large 0
                push    large [bp+arg_0]
                call    far ptr 1EEEh:3042h ; ...
                add     sp, 30h
                or      dx, ax
                jnz     short loc_1EF16
                mov     es, [bp+arg_A]
                mov     eax, [bp+var_E]
                add     eax, [bp+var_1E]
                add     eax, 3
                cmp     eax, es:[di]
                jbe     short loc_1EF1C
                xor     cx, cx
                jmp     loc_1F0BF
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1EF16:                              ; ...
                mov     cx, [bp+var_A]
                jmp     loc_1F0BF
; ---------------------------------------------------------------------------

loc_1EF1C:                              ; ...
                sub     eax, eax
                mov     [bp+var_4], eax
                cmp     word ptr [bp+var_1A+2], ax
                jnz     short loc_1EF2F
                cmp     word ptr [bp+var_1A], ax
                jz      loc_1F02D

loc_1EF2F:                              ; ...
                mov     es, [bp+arg_A]
                mov     eax, es:[di]
                sub     eax, [bp+var_8]
                mov     [bp+var_E], eax
                mov     [bp+var_1E], eax
                mov     [bp+var_12], eax
                mov     [bp+var_16], eax
                lea     ax, [bp+var_12]
                push    ss
                push    ax
                mov     ax, si
                mov     dx, [bp+arg_6]
                add     ax, word ptr [bp+var_8]
                push    dx
                push    ax
                lea     cx, [bp+var_22]
                push    ss
                push    cx
                push    large 0
                lea     cx, [bp+var_16]
                push    ss
                push    cx
                push    dx
                push    ax
                push    large [bp+var_4]
                push    large [bp+arg_0]
                call    far ptr 1EEEh:2FB4h
                add     sp, 20h
                or      dx, ax
                jnz     loc_1F034
                cmp     [bp+var_22], 1
                jnz     loc_1F01D
                mov     es, [bp+arg_A]
                mov     eax, [bp+var_12]
                add     eax, [bp+var_16]
                add     eax, 3
                cmp     eax, es:[di]
                ja      loc_1F034
                lea     ax, [bp+var_E]
                push    ss
                push    ax
                mov     ax, word ptr [bp+var_8]
                add     ax, word ptr [bp+var_16]
                mov     cx, [bp+arg_6]
                add     ax, si
                inc     ax
                push    cx
                push    ax
                lea     ax, [bp+var_22]
                push    ss
                push    ax
                push    large 0
                lea     ax, [bp+var_1E]
                push    ss
                push    ax
                mov     ax, word ptr [bp+var_8]
                add     ax, si
                push    cx
                push    ax
                push    large [bp+var_4]
                push    large [bp+arg_0]
                call    far ptr 1EEEh:2FB4h
                add     sp, 20h
                or      dx, ax
                jnz     loc_1F066
                mov     eax, [bp+var_16]
                add     [bp+var_8], eax
                mov     eax, [bp+var_8]
                mov     bx, ax
                mov     cx, [bp+arg_6]
                add     bx, si
                mov     es, cx
                mov     byte ptr es:[bx], 3Dh ; '='
                add     eax, [bp+var_12]
                mov     [bp+var_8], eax
                mov     dx, word ptr [bp+var_8+2]
                mov     bx, ax
                add     bx, si
                add     ax, 1
                mov     byte ptr es:[bx], 0
                adc     dx, 0
                mov     word ptr [bp+var_8], ax
                mov     word ptr [bp+var_8+2], dx
                mov     bx, ax
                add     bx, si
                mov     byte ptr es:[bx], 0

loc_1F01D:                              ; ...
                mov     eax, [bp+var_1A]
                inc     [bp+var_4]
                cmp     [bp+var_4], eax
                jb      loc_1EF2F

loc_1F02D:                              ; ...
                mov     cx, [bp+var_A]
                jmp     short loc_1F0AD
; ---------------------------------------------------------------------------
                db  90h
                db  90h
; ---------------------------------------------------------------------------

loc_1F034:                              ; ...
                mov     ds, [bp+arg_A]
                assume ds:nothing
                mov     eax, [di]
                cmp     [bp+var_8], eax
                jnb     short loc_1F0AB
                mov     bx, word ptr [bp+var_8]
                mov     ax, [bp+arg_6]
                add     bx, si
                mov     es, ax
                mov     byte ptr es:[bx], 0
                mov     ax, word ptr [bp+var_8]
                mov     dx, word ptr [bp+var_8+2]
                add     ax, 1
                adc     dx, 0
                cmp     dx, [di+2]
                ja      short loc_1F0AB
                jb      short loc_1F09C
                cmp     ax, [di]
                jmp     short loc_1F09A
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1F066:                              ; ...
                mov     eax, [bp+var_8]
                mov     es, [bp+arg_A]
                cmp     es:[di], eax
                jbe     short loc_1F0AB
                mov     bx, ax
                mov     ax, [bp+arg_6]
                add     bx, si
                mov     es, ax
                mov     byte ptr es:[bx], 0
                mov     es, [bp+arg_A]
                mov     ax, word ptr [bp+var_8]
                mov     dx, word ptr [bp+var_8+2]
                add     ax, 1
                adc     dx, 0
                cmp     dx, es:[di+2]
                ja      short loc_1F0AB
                jb      short loc_1F09C
                cmp     ax, es:[di]

loc_1F09A:                              ; ...
                jnb     short loc_1F0AB

loc_1F09C:                              ; ...
                mov     bx, word ptr [bp+var_8]
                mov     ax, [bp+arg_6]
                add     bx, si
                mov     es, ax
                mov     byte ptr es:[bx+1], 0

loc_1F0AB:                              ; ...
                xor     cx, cx

loc_1F0AD:                              ; ...
                mov     bx, word ptr [bp+var_8]
                mov     ax, [bp+arg_6]
                add     bx, si
                mov     es, ax
                mov     byte ptr es:[bx], 0
                inc     [bp+var_8]

loc_1F0BF:                              ; ...
                mov     eax, [bp+var_8]
                mov     es, [bp+arg_A]
                mov     es:[di], eax
                mov     ax, cx
                pop     ds
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1F0D2:                              ; ...
                xor     ax, ax
                pop     ds
                pop     si
                pop     di
                leave
                retf
sub_1EE74       endp

; ---------------------------------------------------------------------------
                db  90h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F0DA       proc far                ; ...

arg_0           = dword ptr  6
arg_4           = dword ptr  0Ah

                push    bp
                mov     bp, sp
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                les     di, [bp+arg_4]
                push    ax
                lds     si, [bp+arg_0]
                assume ds:nothing
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                pop     ds
                pop     si
                pop     di
                leave
                retf
sub_1F0DA       endp

; ---------------------------------------------------------------------------
                db  90h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F10C       proc far                ; ...

arg_0           = dword ptr  6
arg_4           = dword ptr  0Ah
arg_8           = dword ptr  0Eh
arg_C           = word ptr  12h
arg_E           = word ptr  14h
arg_10          = dword ptr  16h

                push    bp
                mov     bp, sp
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     bx, word ptr [bp+arg_0]
                mov     cx, word ptr [bp+arg_0+2]
                add     bh, 1
                push    ax
                mov     si, bx
                mov     ds, cx
                assume ds:nothing
                les     di, [bp+arg_4]
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                mov     eax, [bp+arg_8]
                les     bx, [bp+arg_0]
                mov     es:[bx+200h], eax
                mov     eax, [bp+arg_10]
                mov     es:[bx+204h], eax
                mov     si, [bp+arg_C]
                mov     di, [bp+arg_E]
                les     bx, [bp+arg_0]
                mov     ecx, [bp+arg_10]
                cmp     ecx, 14h
                jbe     short loc_1F16F
                mov     cx, 14h

loc_1F16F:                              ; ...
                push    ds
                push    di
                lea     di, [bx+208h]
                pop     ds
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                pop     ds
                pop     si
                pop     di
                leave
                retf
sub_1F10C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F184       proc far                ; ...

arg_0           = dword ptr  6
arg_4           = dword ptr  0Ah
arg_8           = dword ptr  0Eh

                push    bp
                mov     bp, sp
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     eax, [bp+arg_8]
                add     eax, [bp+arg_4]
                cmp     eax, 43Ah
                ja      short loc_1F1B1
                push    large [bp+arg_8]
                push    large [bp+arg_4]
                push    large [bp+arg_0]
                call    far ptr 1EEEh:1251h
                add     sp, 0Ch

loc_1F1B1:                              ; ...
                pop     ds
                assume ds:nothing
                leave
                retf
sub_1F184       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F1B4       proc far                ; ...

var_4           = word ptr -4
arg_0           = dword ptr  6
arg_4           = dword ptr  0Ah
arg_8           = dword ptr  0Eh

                enter   4, 0
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                les     di, [bp+arg_4]
                push    ax
                lds     si, [bp+arg_0]
                assume ds:nothing
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                mov     ax, word ptr [bp+arg_0]
                mov     dx, word ptr [bp+arg_0+2]
                mov     bx, ax
                mov     di, ax
                mov     es, dx
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                dec     cx
                add     bx, cx
                mov     [bp+var_4], bx
                mov     ds, dx
                cmp     bx, word ptr [bp+arg_0]
                jbe     short loc_1F20F
                cmp     byte ptr [bx-1], 5Ch ; '\'
                jz      short loc_1F20F
                mov     byte ptr [bx], 5Ch ; '\'
                inc     [bp+var_4]

loc_1F20F:                              ; ...
                mov     bx, [bp+var_4]
                push    ds
                mov     si, bx
                les     di, [bp+arg_8]
                mov     cx, 0FFFFh
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                mov     ax, word ptr [bp+arg_0]
                mov     dx, word ptr [bp+arg_0+2]
                pop     ds
                pop     si
                pop     di
                leave
                retf
sub_1F1B4       endp

; ---------------------------------------------------------------------------
                nop

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F23C       proc far                ; ...

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = dword ptr  0Ch
arg_A           = dword ptr  10h

                push    bp
                mov     bp, sp
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     si, [bp+arg_2]
                mov     es, [bp+arg_4]
                cmp     dword ptr es:[si], 2
                jbe     short loc_1F25C

loc_1F254:                              ; ...
                xor     ax, ax
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1F25C:                              ; ...
                cmp     dword ptr es:[si+4], 534A5059h
                jz      short loc_1F2A0

loc_1F267:
                cmp     dword ptr es:[si+4], 5059534Ah
                jnz     short loc_1F254
                mov     di, [bp+arg_0]
                mov     dword ptr es:[si+4], 534A5059h

loc_1F27E:
                push    large 10000h
                push    0
                push    di
                call    far ptr 1EEEh:0F23h
                add     sp, 8
                push    [bp+arg_4]
                push    si
                push    18h
                push    di
                call    far ptr 1EEEh:0F02h
                add     sp, 8
                jmp     short loc_1F2CC
; ---------------------------------------------------------------------------

loc_1F2A0:                              ; ...
                push    large 2
                call    [bp+arg_A]
                add     sp, 4
                cbw
                cmp     ax, 79h ; 'y'
                jz      short loc_1F2CC
                ja      short loc_1F2A0
                sub     al, 4Eh ; 'N'
                jz      short loc_1F2BD
                sub     al, 0Bh
                jz      short loc_1F2CC

loc_1F2B9:
                sub     al, 15h

loc_1F2BB:
                jnz     short loc_1F2A0

loc_1F2BD:                              ; ...
                push    large [bp+arg_6]

loc_1F2C1:
                call    far ptr 1EEEh:0ECBh

loc_1F2C6:
                add     sp, 4

loc_1F2C9:
                jmp     short loc_1F254
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1F2CC:                              ; ...
                mov     ax, 1
                pop     ds

loc_1F2D0:
                pop     si
                pop     di
                leave
                retf
sub_1F23C       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F2D4       proc far                ; ...

var_40          = word ptr -40h
var_3E          = dword ptr -3Eh
var_3A          = word ptr -3Ah
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = word ptr -2Ch
var_2A          = word ptr -2Ah
var_28          = word ptr -28h
var_26          = word ptr -26h
var_24          = word ptr -24h
var_22          = word ptr -22h
var_20          = word ptr -20h
var_1E          = word ptr -1Eh
var_1C          = word ptr -1Ch
var_1A          = word ptr -1Ah
var_18          = dword ptr -18h
var_14          = word ptr -14h
var_12          = word ptr -12h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = dword ptr  0Ch

                enter   40h, 0

loc_1F2D8:
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                mov     [bp+var_24], 0Fh
                push    large 1
                call    [bp+arg_6]
                add     sp, 4
                mov     [bp+var_20], 0
                lea     ax, [bp+var_20]
                push    ss
                push    ax
                push    0FFFFh
                call    far ptr 1EEEh:0F42h
                add     sp, 6
                mov     al, byte ptr [bp+var_20+1]
                sub     ah, ah
                mov     si, ax
                cmp     si, 3
                jnb     short loc_1F316

loc_1F30E:                              ; ...
                xor     ax, ax
                cwd
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------

loc_1F316:                              ; ...
                mov     [bp+var_2C], ax
                lea     ax, [bp+var_20]
                push    ss
                push    ax
                push    [bp+var_20]
                call    far ptr 1EEEh:0F42h
                add     sp, 6
                mov     [bp+var_20], ax
                or      ax, ax
                jz      short loc_1F30E
                mov     [bp+var_22], ax
                mov     si, [bp+var_2C]
                test    al, 0FFh
                jz      short loc_1F343
                dec     si
                mov     byte ptr [bp+var_20], 0
                add     byte ptr [bp+var_20+1], 1

loc_1F343:                              ; ...
                mov     ax, [bp+var_20]
                sub     dx, dx
                mov     cx, ax
                mov     bx, dx
                mov     [bp+var_2A], dx
                mov     [bp+var_28], ax
                add     cx, ax
                adc     bx, dx
                add     cx, cx
                adc     bx, bx
                add     cx, cx
                adc     bx, bx
                add     cx, cx
                adc     bx, bx
                mov     [bp+var_14], cx
                mov     [bp+var_12], bx
                dec     si
                cmp     si, 0Fh
                jnb     short loc_1F371
                mov     [bp+var_24], si

loc_1F371:                              ; ...
                mov     [bp+var_2C], si
                mov     di, [bp+arg_2]
                add     ah, 1
                mov     word ptr [bp+var_34], dx
                mov     word ptr [bp+var_34+2], ax
                add     ax, ax
                adc     dx, dx
                add     ax, ax
                adc     dx, dx
                add     ax, ax
                adc     dx, dx
                add     ax, ax
                adc     dx, dx
                mov     word ptr [bp+var_18], ax
                mov     word ptr [bp+var_18+2], dx
                mov     es, [bp+arg_4]
                mov     dword ptr es:[di+4], 5059534Ah
                push    large 18h
                push    es
                push    di
                call    far ptr 1EEEh:0FC1h
                add     sp, 8
                mov     [bp+var_1C], ax
                mov     [bp+var_1A], dx
                mov     es, [bp+arg_4]
                mov     eax, es:[di+8]
                mov     [bp+var_38], eax
                mov     ecx, 4Ch ; 'L'
                xor     edx, edx
                div     ecx
                mov     [bp+var_4], eax
                or      eax, eax
                jnz     short loc_1F3DA
                inc     [bp+var_4]

loc_1F3DA:                              ; ...
                mov     eax, [bp+var_4]
                mov     [bp+var_C], eax
                mov     eax, [bp+var_38]
                mov     [bp+var_8], eax
                mov     [bp+var_10], 3FAh
                or      eax, eax
                jz      loc_1F553

loc_1F3F9:                              ; ...
                mov     si, [bp+var_2A]
                mov     eax, [bp+var_10]
                cmp     eax, [bp+var_8]
                jbe     short loc_1F409
                mov     ax, word ptr [bp+var_8]

loc_1F409:                              ; ...
                mov     di, ax
                mov     [bp+var_1E], 0
                push    [bp+var_28]
                push    si
                shl     ax, 2
                push    ax
                push    [bp+arg_0]
                mov     [bp+var_3A], ax
                call    far ptr 1EEEh:0EE7h
                add     sp, 8
                cmp     [bp+var_3A], ax
                jnz     loc_1F572
                sub     ax, ax
                mov     word ptr [bp+var_3E], di
                mov     word ptr [bp+var_3E+2], ax
                cmp     word ptr [bp+var_8], di
                jnz     short loc_1F466
                cmp     word ptr [bp+var_8+2], ax
                jnz     short loc_1F466
                push    ax
                mov     ax, word ptr [bp+var_10]
                mov     dx, word ptr [bp+var_10+2]
                sub     ax, di
                sbb     dx, word ptr [bp+var_3E+2]
                add     ax, ax
                adc     dx, dx
                add     ax, ax
                adc     dx, dx
                push    dx
                push    ax
                push    [bp+arg_0]
                call    far ptr 1EEEh:0F23h
                add     sp, 8
                or      ax, ax
                jz      loc_1F572

loc_1F466:                              ; ...
                mov     ax, di
                shl     ax, 2
                push    0
                push    ax
                push    [bp+var_28]
                push    si
                call    far ptr 1EEEh:0FC1h
                add     sp, 8
                add     [bp+var_1C], ax
                adc     [bp+var_1A], dx
                mov     word ptr [bp+var_10+2], di
                or      di, di
                jz      loc_1F53A
                mov     [bp+var_26], di

loc_1F48C:                              ; ...
                mov     eax, [bp+var_34]
                mov     [bp+var_30], eax
                mov     di, word ptr [bp+var_10+2]
                mov     si, [bp+var_2C]
                cmp     di, si
                jbe     short loc_1F4A0
                mov     di, si

loc_1F4A0:                              ; ...
                mov     word ptr [bp+var_10], di
                or      di, di
                jz      short loc_1F506

loc_1F4A7:                              ; ...
                mov     si, [bp+var_24]
                cmp     si, di
                jbe     short loc_1F4B0
                mov     si, di

loc_1F4B0:                              ; ...
                push    large [bp+var_30]
                mov     ax, si
                shl     ax, 0Ch
                push    ax
                push    [bp+arg_0]
                mov     [bp+var_40], ax
                call    far ptr 1EEEh:0EE7h ; ...
                add     sp, 8
                cmp     ax, [bp+var_40]
                jnz     loc_1F572
                mov     ax, word ptr [bp+var_30+2]
                mov     cx, si
                mov     ch, cl
                sub     cl, cl
                add     ax, cx
                mov     word ptr [bp+var_30], 0
                mov     word ptr [bp+var_30+2], ax
                sub     di, si
                sub     ax, ax
                sub     word ptr [bp+var_C], si
                sbb     word ptr [bp+var_C+2], ax
                cmp     word ptr [bp+var_C+2], ax
                jge     short loc_1F502
                mov     eax, [bp+var_4]
                add     [bp+var_C], eax
                push    large 3
                call    [bp+arg_6]
                add     sp, 4

loc_1F502:                              ; ...
                or      di, di
                jnz     short loc_1F4A7

loc_1F506:                              ; ...
                push    0
                push    word ptr [bp+var_10]
                push    large [bp+var_18]
                mov     ax, [bp+var_1E]
                shl     ax, 2
                sub     dx, dx
                add     ax, [bp+var_14]
                adc     dx, [bp+var_12]
                push    dx
                push    ax
                call    far ptr 1EEEh:0FE8h
                add     sp, 0Ch
                add     [bp+var_1C], ax
                adc     [bp+var_1A], dx
                mov     ax, word ptr [bp+var_10]
                add     [bp+var_1E], ax
                sub     word ptr [bp+var_10+2], ax
                jnz     loc_1F48C

loc_1F53A:                              ; ...
                mov     [bp+var_10], 400h

loc_1F542:
                mov     eax, [bp+var_3E]

loc_1F546:
                sub     [bp+var_8], eax
                cmp     [bp+var_8], 0
                jnz     loc_1F3F9

loc_1F553:                              ; ...
                mov     dx, [bp+var_20]
                sub     cx, cx
                mov     si, cx
                mov     word ptr [bp+var_4+2], dx
                push    dx
                push    cx
                push    1000h
                push    [bp+arg_0]
                call    far ptr 1EEEh:0EE7h
                add     sp, 8
                cmp     ax, 1000h
                jz      short loc_1F580

loc_1F572:                              ; ...
                push    [bp+var_22]
                call    far ptr 1EEEh:0F5Eh
                add     sp, 2
                jmp     loc_1F30E
; ---------------------------------------------------------------------------

loc_1F580:                              ; ...
                push    si
                push    1000h
                push    word ptr [bp+var_4+2]
                push    si
                call    far ptr 1EEEh:0FC1h
                add     sp, 8
                add     ax, [bp+var_1C]
                adc     dx, [bp+var_1A]
                or      dx, ax

loc_1F598:
                jnz     short loc_1F572
                mov     ax, si

loc_1F59C:
                mov     dx, word ptr [bp+var_4+2]
                pop     ds
                pop     si
                pop     di
                leave
                retf
sub_1F2D4       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                enter   11Ch, 0
                push    di
                push    si
                push    ds
                mov     ax, 43F9h
                mov     ds, ax
                assume ds:nothing
                push    ax
                push    394h
                push    large dword ptr [bp+6]
                lea     ax, [bp-11Ch]
                push    ss
                push    ax
                push    cs
                call    near ptr sub_1F1B4
                add     sp, 0Ch
                lea     ax, [bp-11Ch]
                push    ss
                push    ax
                call    far ptr 1EEEh:0EB8h
                add     sp, 4
                mov     si, ax
                cmp     si, 0FFFFh
                jz      loc_1F692
                lea     ax, [bp-1Ch]
                push    ss
                push    ax
                push    18h
                push    si
                call    far ptr 1EEEh:0EE7h
                add     sp, 8
                cmp     ax, 18h
                jz      short loc_1F600

loc_1F5F1:                              ; ...
                push    si
                call    far ptr 1EEEh:0ED9h
                add     sp, 2
                pop     ds
                assume ds:nothing
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1F600:                              ; ...
                push    large dword ptr [bp+0Ah]
                lea     ax, [bp-11Ch]
                push    ss
                push    ax
                lea     ax, [bp-1Ch]
                push    ss
                push    ax
                push    si
                push    cs
                call    near ptr sub_1F23C
                add     sp, 0Eh
                or      ax, ax
                jz      short loc_1F5F1
                push    large dword ptr [bp+0Ah]
                lea     ax, [bp-1Ch]
                push    ss
                push    ax
                push    si
                push    cs
                call    near ptr sub_1F2D4
                add     sp, 0Ah
                mov     [bp-4], ax
                mov     [bp-2], dx
                or      dx, ax
                jnz     short loc_1F642
                push    large 4
                call    dword ptr [bp+0Ah]
                add     sp, 4
                jmp     short loc_1F5F1
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_1F642:                              ; ...
                push    large 5
                call    dword ptr [bp+0Ah]
                add     sp, 4
                mov     eax, [bp-8]
                shr     eax, 4
                mov     edx, eax
                shr     edx, 10h
                mov     cx, ax
                xor     bx, bx
                mov     es, bx
                assume es:BIOSDATA
                mov     dword ptr es:loc_0, 0CBFCA4F3h
                push    large dword ptr [bp-4]
                push    1000h
                sub     ax, ax
                push    cx
                push    ax
                mov     si, ax
                mov     di, cx
                call    far ptr 1EEEh:10ACh
                add     sp, 0Ah
                push    large dword ptr [bp-4]
                push    1000h
                push    di
                push    si
                call    far ptr 1EEEh:10ACh
                add     sp, 0Ah

loc_1F692:                              ; ...
                pop     ds
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------
                nop
                push    bp
                mov     bp, sp

loc_1F69B:
                push    ds
                lds     dx, [bp+6]

loc_1F69F:
                mov     ax, 3D02h

loc_1F6A2:                              ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                int     21h             ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 2 - read & write

loc_1F6A4:
                sbb     cx, cx

loc_1F6A6:
                or      ax, cx
                pop     ds
                pop     bp
                retf
; ---------------------------------------------------------------------------
unk_1F6AB       db  55h ; U
                db  8Bh
unk_1F6AD       db 0ECh
                db  1Eh
unk_1F6AF       db 0C5h
                db  56h ; V
unk_1F6B1       db    6
                db 0B4h
unk_1F6B3       db  41h ; A
                db 0CDh
unk_1F6B5       db  21h ; !
                db  1Fh
unk_1F6B7       db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
unk_1F6BB       db 0ECh
                db  53h ; S
                db  8Bh
                db  5Eh ; ^
unk_1F6BF       db    6
                db 0B4h
                db  3Eh ; >
                db 0CDh
                db  21h ; !
                db  5Bh ; [
                db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
                db 0ECh
                db  1Eh
                db  53h ; S
                db  8Bh
                db  5Eh ; ^
                db    6
                db  8Bh
                db  4Eh ; N
unk_1F6D1       db    8
                db 0C5h
                db  56h ; V
                db  0Ah
unk_1F6D5       db 0B4h
                db  3Fh ; ?
                db 0CDh
                db  21h ; !
                db 0F5h
                db  1Bh
                db 0C9h
                db  23h ; #
                db 0C1h
                db  5Bh ; [
                db  1Fh
                db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
                db 0ECh
                db  1Eh
                db  53h ; S
                db  8Bh
                db  5Eh ; ^
                db    6
                db  8Bh
                db  4Eh ; N
                db    8
                db 0C5h
                db  56h ; V
                db  0Ah
                db 0B4h
                db  40h ; @
                db 0CDh
                db  21h ; !
                db 0F5h
                db  1Bh
                db 0C9h
                db  23h ; #
                db 0C1h
                db  50h ; P
                db 0B4h
                db  68h ; h
                db 0CDh
                db  21h ; !
                db  58h ; X
                db  5Bh ; [
                db  1Fh
                db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
                db 0ECh
                db  53h ; S
                db  8Bh
                db  5Eh ; ^
                db    6
                db  8Bh
                db  4Eh ; N
                db  0Ah
                db  8Bh
                db  56h ; V
                db    8
                db 0B8h
                db    0
                db  42h ; B
                db  83h
                db  7Eh ; ~
                db  0Ch
                db    0
                db  75h ; u
                db    1
                db  40h ; @
                db 0CDh
                db  21h ; !
                db  1Bh
unk_1F71D       db 0C0h
                db  40h ; @
                db  5Bh ; [
                db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
                db 0ECh
                db  1Eh
                db  53h ; S
                db  8Bh
                db  5Eh ; ^
                db    6
                db 0B4h
                db  48h ; H
                db 0CDh
                db  21h ; !
                db  8Bh
                db 0CBh
                db 0F5h
                db 0C5h
                db  5Eh ; ^
                db    8
                db  1Bh
                db 0D2h
                db  89h
                db  0Fh
                db  23h ; #
                db 0C2h
                db  5Bh ; [
unk_1F73B       db  1Fh
                db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
                db 0ECh
                db    6
                db  8Eh
                db  46h ; F
                db    6
                db 0B4h
                db  49h ; I
                db 0CDh
                db  21h ; !
                db    7
                db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
                db 0ECh
                db    6
                db  1Eh
                db  57h ; W
                db 0C5h
                db  7Eh ; ~
                db    6
                db  8Ch
                db 0D8h
                db  8Eh
                db 0C0h
                db 0FCh
                db 0B9h
                db 0FFh
                db 0FFh
                db  32h ; 2
                db 0C0h
                db 0F2h
                db 0AEh
                db  4Fh ; O
                db 0C6h
                db    5
                db  24h ; $
                db  8Bh
                db 0D7h
                db    3
                db 0D1h
                db  42h ; B
                db  42h ; B
                db 0B4h
                db    9
                db 0CDh
                db  21h ; !
                db 0C6h
                db    5
                db    0
                db  5Fh ; _
                db  1Fh
                db    7
                db  5Dh ; ]
                db 0CBh
                db 0B8h
                db    1
                db  0Ch
                db 0CDh
                db  21h ; !
                db 0CBh
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db  9Fh
                db    0
                db    0
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db  93h
                db 0CFh
                db    0
                db  17h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  55h ; U
                db  8Bh
                db 0ECh
                db  1Eh
                db  56h ; V
                db 0C5h
                db  76h ; v
                db    6
                db  66h ; f
                db  8Bh
                db  4Eh ; N
                db  0Ah
                db  66h ; f
                db 0C1h
                db 0E9h
                db    2
                db  66h ; f
                db  33h ; 3
                db 0D2h
                db 0FCh
                db  66h ; f
                db 0ADh
                db  66h ; f
                db    3
                db 0D0h
                db 0E2h
                db 0F9h
                db  66h ; f
                db  0Fh
                db 0B7h
                db 0C2h
                db  66h ; f
                db 0C1h
                db 0EAh
                db  10h
                db  5Eh ; ^
                db  1Fh
                db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
                db 0ECh
                db  1Eh
                db    6
                db  66h ; f
                db  56h ; V
                db  66h ; f
                db  57h ; W
                db  66h ; f
                db  53h ; S
                db  9Ch
                db 0FAh
                db  66h ; f
                db  8Bh
                db  5Eh ; ^
                db    6
                db  66h ; f
                db  8Bh
                db  76h ; v
                db  0Ah
                db  66h ; f
                db  8Bh
                db  56h ; V
                db  0Eh
                db  66h ; f
                db  33h ; 3
                db 0C0h
                db  8Ch
                db 0C8h
                db  66h ; f
                db 0C1h
                db 0E0h
                db    4
                db  2Eh ; .
                db 0A3h
                db 0A7h
                db  0Fh
                db  66h ; f
                db 0C1h
                db 0C0h
                db  10h
                db  2Eh ; .
                db 0A2h
                db 0A9h
                db  0Fh
                db  66h ; f
                db 0C1h
                db 0C0h
                db  10h
                db  66h ; f
                db    5
                db  9Dh
                db  0Fh
                db    0
                db    0
                db  66h ; f
                db  2Eh ; .
                db 0A3h
                db 0B7h
                db  0Fh
                db  66h ; f
                db  2Eh ; .
                db  0Fh
                db    1
                db  16h
                db 0B5h
                db  0Fh
                db  0Fh
                db  20h
                db 0C0h
                db  0Ch
                db    1
                db  0Fh
                db  22h ; "
                db 0C0h
                db 0EAh
                db  39h ; 9
                db  10h
                db    8
                db    0
                db 0B8h
                db  10h
                db    0
                db  8Eh
                db 0C0h
                db  8Eh
                db 0D8h
                db 0FCh
                db  66h ; f
                db  33h ; 3
                db 0C9h
                db  66h ; f
                db  33h ; 3
                db 0EDh
                db  67h ; g
                db  66h ; f
                db  8Bh
                db  3Bh ; ;
                db  66h ; f
                db  41h ; A
                db  66h ; f
                db  83h
                db 0C3h
                db    4
                db  66h ; f
                db  47h ; G
                db  66h ; f
                db  3Bh ; ;
                db 0CAh
                db  74h ; t
                db  10h
                db  67h ; g
                db  66h ; f
                db  39h ; 9
                db  3Bh ; ;
                db  75h ; u
                db  0Ah
                db  66h ; f
                db  41h ; A
                db  66h ; f
                db  83h
                db 0C3h
                db    4
                db  66h ; f
                db  47h ; G
                db 0EBh
                db 0EBh
                db  66h ; f
                db  2Bh ; +
                db 0D1h
                db  66h ; f
                db  2Bh ; +
                db 0F9h
                db  66h ; f
                db 0C1h
                db 0E1h
                db  0Ah
                db  66h ; f
                db 0C1h
                db 0E7h
                db  0Ch
                db  67h ; g
                db  66h ; f
                db 0ADh
                db  66h ; f
                db    3
                db 0E8h
                db  67h ; g
                db  66h ; f
                db 0ABh
                db  67h ; g
                db 0E2h
                db 0F4h
                db  66h ; f
                db  0Bh
                db 0D2h
                db  75h ; u
                db 0C0h
                db  0Fh
                db  20h
                db 0C0h
                db  24h ; $
                db 0FEh
                db  0Fh
                db  22h ; "
                db 0C0h
                db 0EAh
                db  94h
                db  10h
                db 0EEh
                db  1Eh
                db  66h ; f
                db  8Bh
                db 0D5h
                db  66h ; f
                db  0Fh
                db 0B7h
                db 0EDh
                db  8Bh
                db 0C5h
                db  66h ; f
                db 0C1h
                db 0EAh
                db  10h
                db  9Dh
                db  66h ; f
                db  5Bh ; [
                db  66h ; f
                db  5Fh ; _
                db  66h ; f
                db  5Eh ; ^
                db    7
                db  1Fh
                db  5Dh ; ]
                db 0CBh
                db  55h ; U
                db  8Bh
                db 0ECh
                db 0C4h
                db  7Eh ; ~
                db    6
                db  33h ; 3
                db 0C0h
                db 0C5h
                db  76h ; v
                db  0Ch
                db  8Bh
                db  4Eh ; N
                db  0Ah
                db  8Eh
                db 0D0h
                db 0BCh
                db    0
                db    7
                db    6
                db  57h ; W
                db    3
                db 0F1h
                db    3
                db 0F9h
                db  4Eh ; N
                db  4Fh ; O
                db 0FAh
                db 0FDh
                db 0EAh
                db    0
                db    0
                db    0
                db    0
                db  55h ; U
                db  8Bh
                db 0ECh
                db  83h
                db 0C4h
                db 0FEh

; =============== S U B R O U T I N E =======================================


sub_1F8B4       proc far                ; ...
                push    es
                push    ds
                push    si
                push    di
                mov     ax, 4310h
                int     2Fh             ; - Multiplex - XMS - GET DRIVER ADDRESS
                                        ; Return: ES:BX -> driver entry point
                mov     ds:3B8h, bx
                mov     ax, es
                mov     ds:3BAh, ax
                mov     word ptr [bp-2], 0FFFFh
                push    ds
                lds     di, [bp+6]
                mov     ax, 3D00h
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read
                pop     ds
                mov     dx, 2
                jb      short loc_1F935
                mov     [bp-2], ax
                mov     bx, ax
                mov     ax, 4202h
                xor     cx, cx
                mov     dx, cx
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from end of file
                shl     edx, 10h
                mov     dx, ax
                mov     ds:3BCh, edx
                mov     ax, 4200h
                xor     cx, cx
                mov     dx, cx
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                mov     edx, ds:3BCh
                add     edx, [bp+0Ah]
                add     edx, 3FFh
                shr     edx, 0Ah
                mov     cx, dx
                mov     ah, 9
                call    dword ptr ds:3B8h
                or      ax, ax
                jz      short loc_1F932
                mov     ds:3B6h, dx
                mov     word ptr ds:OPENBUF+2, cx
                push    word ptr [bp-2]
                push    cs
                call    near ptr sub_1F989

loc_1F92B:
                add     sp, 2
                mov     dx, ax
                jmp     short loc_1F948
; ---------------------------------------------------------------------------

loc_1F932:                              ; ...
                mov     dx, 0Eh

loc_1F935:                              ; ...
                cmp     ds:TIMEBUF, 0FFFFh
                jnz     short loc_1F948
                mov     ah, 0Ah
                call    dword ptr ds:TIMEBUF+2
                mov     ds:TIMEBUF, 0FFFFh

loc_1F948:                              ; ...
                mov     bx, [bp-2]
                cmp     bx, 0FFFFh
                jz      short loc_1F954
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle

loc_1F954:                              ; ...
                or      dx, dx
                jnz     short loc_1F97F
                mov     ax, 0FFFFh
                mov     es, ax
                assume es:nothing
                mov     di, 2D46h
                mov     eax, dword ptr ds:DEVIOBUF
                mov     es:[di], eax
                mov     eax, [bp+0Ah]
                mov     es:[di+4], eax
                mov     ax, ds:3B6h
                mov     es:[di+8], ax
                mov     ax, ds:3C0h
                mov     es:[di+0Ah], ax

loc_1F97F:                              ; ...
                mov     ax, dx
                pop     di
                pop     si
                pop     ds
                pop     es
                assume es:nothing
                mov     sp, bp
                pop     bp
                retf
sub_1F8B4       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F989       proc far                ; ...

var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                add     sp, 0FFFAh
                push    ds
                push    si
                push    di
                mov     [bp+var_4], 0
                mov     [bp+var_6], 0
                mov     bx, 800h
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                mov     dx, 800Eh
                jb      short loc_1FA1B
                mov     [bp+var_6], ax

loc_1F9AE:                              ; ...
                push    ds
                mov     bx, [bp+arg_0]
                mov     ax, [bp+var_6]
                mov     ds, ax
                xor     dx, dx
                mov     cx, 8000h
                mov     ah, 3Fh
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                pop     ds
                jb      short loc_1FA18
                or      ax, ax
                jz      short loc_1FA18
                movzx   eax, ax
                lea     si, ds:3A6h
                add     eax, 3
                and     eax, 0FFFFFFFCh
                mov     [si], eax
                mov     word ptr [si+4], 0
                mov     word ptr [si+6], 0
                mov     dx, [bp+var_6]
                mov     [si+8], dx
                mov     dx, ds:3B6h
                mov     [si+0Ah], dx
                mov     ecx, [bp+var_4]
                mov     [si+0Ch], ecx
                lea     ecx, [eax+ecx]
                mov     [bp+var_4], ecx
                mov     ah, 0Bh
                call    dword ptr ds:3B8h
                or      ax, ax
                jz      short loc_1FA18
                cmp     ecx, ds:3BCh
                jb      short loc_1F9AE
                mov     dx, 0
                jmp     short loc_1FA1B
; ---------------------------------------------------------------------------

loc_1FA18:                              ; ...
                mov     dx, 3F4h

loc_1FA1B:                              ; ...
                cmp     [bp+var_6], 0
                jz      short loc_1FA28
                mov     es, [bp+var_6]
                mov     ah, 49h
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed

loc_1FA28:                              ; ...
                mov     ax, dx
                pop     di
                pop     si
                pop     ds
                mov     sp, bp
                pop     bp
                retf
sub_1F989       endp

; ---------------------------------------------------------------------------
                push    bp
                mov     bp, sp
                push    es
                push    si
                lea     si, ds:3A6h
                mov     eax, [bp+0Eh]
                mov     [si], eax
                mov     word ptr [si+4], 0
                mov     ecx, [bp+6]
                mov     [si+6], ecx
                mov     cx, ds:3B6h
                mov     [si+0Ah], cx
                mov     ecx, ds:3BCh
                add     ecx, [bp+0Ah]
                mov     [si+0Ch], ecx
                mov     ah, 0Bh
                call    dword ptr ds:3B8h
                or      ax, ax
                jnz     short loc_1FA6F
                mov     ax, 0

loc_1FA6F:                              ; ...
                pop     si
                pop     es
                pop     bp
                retf
; ---------------------------------------------------------------------------
                db  55h ; U
                db  8Bh
                db 0ECh
                db  56h ; V
                db 0BEh
                db 0A6h
                db    3
                db  33h ; 3
                db 0C0h
                db  89h
                db  44h ; D
                db  0Ah
                db  66h ; f
                db  8Bh
                db  1Eh
                db 0A2h
                db    3
                db  66h ; f
                db  89h
                db  5Ch ; \
                db    6
                db  66h ; f
                db  0Fh
                db 0B7h
                db  4Eh ; N
                db  0Ah
                db  66h ; f
                db  89h
                db  0Ch
                db  66h ; f
                db  8Bh
                db 0D3h
                db  66h ; f
                db    3
                db 0D1h
                db  66h ; f
                db  3Bh ; ;
unk_1FA98       db  16h
                db 0BCh
                db    3
                db  77h ; w
                db  22h ; "
                db 0A1h
                db 0B6h
                db    3
                db  89h
                db  44h ; D
                db    4
                db  66h ; f
                db  8Bh
                db  46h ; F
                db    6
unk_1FAA7       db  66h ; f
                db  89h
                db  44h ; D
                db  0Ch
                db 0B4h
                db  0Bh
                db 0FFh
                db  1Eh
                db 0B8h
                db    3
                db  0Bh
                db 0C0h
                db  74h ; t
                db  0Ah
                db  66h ; f
                db  0Fh
                db 0B7h
                db  4Eh ; N
                db  0Ah
                db  66h ; f
                db    1
                db  0Eh
                db 0A2h
                db    3
                db  5Eh ; ^
                db  5Dh ; ]
                db 0C3h
                db  55h ; U
                db  8Bh
                db 0ECh
                db  33h ; 3
                db 0C0h
                db  5Dh ; ]
                db 0C3h
                db  55h ; U
                db  8Bh
                db 0ECh
                db  33h ; 3
                db 0C0h
                db  66h ; f
                db  8Bh
                db  4Eh ; N
                db    6
                db  66h ; f
                db  3Bh ; ;
                db  0Eh
                db 0BCh
                db    3
                db  73h ; s
                db    6
                db  66h ; f
                db  89h
                db  0Eh
                db 0A2h
                db    3
                db  40h ; @
                db  5Dh ; ]
unk_1FAE0       db 0C3h
                db 0B8h
                db 0FFh
                db 0FFh
                db 0C2h
                db    4
                db    0
                db 0B8h
unk_1FAE8       db 0FEh
                db 0FFh
                db  66h ; f
                db 0C7h
                db    6
                db 0A2h
                db    3
                db    0
                db    0
                db    0
                db    0
                db 0C2h
                db    6
                db    0
                db 0B8h
                db    1
                db    0
                db 0C2h
                db    2
                db    0
                db 0C2h
                db    2
                db    0
                db 0B8h
                db 0FFh
                db 0FFh
                db  8Bh
                db 0D0h
                db 0C2h
                db    4
                db    0
                db  33h ; 3
unk_1FB08       db 0C0h
                db 0C2h
                db    6
                db    0
unk_1FB0C       db 0B8h
                db 0FFh
                db 0FFh
                db 0C2h
                db    4
                db    0
                db  33h ; 3
                db 0C0h
                db 0C2h
                db    4
unk_1FB16       db    0
                db  33h ; 3
                db 0C0h
                db 0C2h
unk_1FB1A       db    8
                db    0
                db  55h ; U
                db  8Bh
                db 0ECh
                db  57h ; W
                db  56h ; V
                db  1Eh
                db  8Bh
                db  4Eh ; N
                db  0Eh
                db 0E3h
                db  27h ; '
                db  8Bh
                db 0D9h
                db 0C4h
                db  7Eh ; ~
                db    6
                db  8Bh
                db 0F7h
                db  33h ; 3
                db 0C0h
                db 0F2h
                db 0AEh
                db 0F7h
                db 0D9h
                db    3
                db 0CBh
                db  8Bh
                db 0FEh
                db 0C5h
                db  76h ; v
                db  0Ah
                db 0F3h
                db 0A6h
                db  8Ah
                db  44h ; D
                db 0FFh
                db  33h ; 3
                db 0C9h
                db  26h ; &
                db  3Ah ; :
                db  45h ; E
                db 0FFh
                db  77h ; w
                db    4
                db  74h ; t
                db    4
                db  49h ; I
                db  49h ; I
                db 0F7h
                db 0D1h
                db  8Bh
                db 0C1h
                db  1Fh
                db  5Eh ; ^
                db  5Fh ; _
                db  8Bh
                db 0E5h
                db  5Dh ; ]
                db 0CBh
                db    0
                db  55h ; U
                db  8Bh
                db 0ECh
                db  8Bh
                db 0D6h
                db  1Eh
                db 0C5h
                db  76h ; v
                db  0Ah
                db 0C4h
                db  5Eh ; ^
                db    6
                db 0B0h
                db 0FFh
                db  0Ah
                db 0C0h
                db  74h ; t
                db  2Dh ; -
                db 0ACh
                db  26h ; &
                db  8Ah
                db  27h ; '
                db  43h ; C
                db  38h ; 8
                db 0C4h
                db  74h ; t
                db 0F3h
                db  2Ch ; ,
                db  41h ; A
                db  3Ch ; <
                db  1Ah
                db  1Ah
                db 0C9h
                db  80h
                db 0E1h
                db  20h
                db    2
                db 0C1h
                db    4
                db  41h ; A
                db  86h
                db 0E0h
                db  2Ch ; ,
                db  41h ; A
                db  3Ch ; <
                db  1Ah
                db  1Ah
                db 0C9h
                db  80h
                db 0E1h
                db  20h
                db    2
                db 0C1h
                db    4
                db  41h ; A
                db  38h ; 8
                db 0E0h
                db  74h ; t
                db 0D3h
                db  1Ah
                db 0C0h
                db  1Ch
                db 0FFh
                db  98h
                db  1Fh
                db  8Bh
                db 0F2h
                db  5Dh ; ]
                db 0CBh
                db    0
                db  55h ; U
                db  8Bh
                db 0ECh
                db  57h ; W
                db  56h ; V
                db  1Eh
                db 0C4h
                db  7Eh ; ~
                db    6
                db 0C5h
                db  76h ; v
                db  0Ah
                db  8Bh
                db 0DFh
                db  8Bh
                db  4Eh ; N
                db  0Eh
                db 0E3h
                db  0Ch
                db 0ACh
                db  0Ah
                db 0C0h
                db  74h ; t
                db    3
                db 0AAh
                db 0E2h
                db 0F8h
                db  32h ; 2
                db 0C0h
                db 0F3h
                db 0AAh
                db  8Bh
                db 0C3h
                db  8Ch
                db 0C2h
                db  1Fh
                db  5Eh ; ^
                db  5Fh ; _
                db  8Bh
                db 0E5h
                db  5Dh ; ]
                db 0CBh
                db  32h ; 2
                db 0EDh
                db 0E3h
                db    6
                db 0D1h
                db 0E0h
                db 0D1h
                db 0D2h
                db 0E2h
                db 0FAh
                db 0CBh
                db    0
                db  55h ; U
                db  8Bh
                db 0ECh
                db  53h ; S
                db  8Bh
                db  46h ; F
                db  0Ch
                db  0Bh
                db 0C0h
                db  75h ; u
                db  15h
                db  8Bh
                db  4Eh ; N
                db  0Ah
                db  8Bh
                db  46h ; F
                db    8
                db  33h ; 3
                db 0D2h
                db 0F7h
                db 0F1h
                db  8Bh
                db  46h ; F
                db    6
                db 0F7h
                db 0F1h
                db  8Bh
                db 0C2h
                db  33h ; 3
                db 0D2h
                db 0EBh
                db  45h ; E
                db  8Bh
                db 0C8h
                db  8Bh
                db  5Eh ; ^
                db  0Ah
                db  8Bh
                db  56h ; V
                db    8
                db  8Bh
                db  46h ; F
                db    6
                db 0D1h
                db 0E9h
                db 0D1h
                db 0DBh
                db 0D1h
                db 0EAh
                db 0D1h
                db 0D8h
                db  0Bh
                db 0C9h
                db  75h ; u
                db 0F4h
                db 0F7h
                db 0F3h
                db  8Bh
                db 0C8h
                db 0F7h
                db  66h ; f
                db  0Ch
                db  91h
                db 0F7h
                db  66h ; f
                db  0Ah
                db    3
                db 0D1h
                db  72h ; r
                db  0Ch
                db  3Bh ; ;
                db  56h ; V
                db    8
                db  77h ; w
                db    7
                db  72h ; r
                db  0Bh
                db  3Bh ; ;
                db  46h ; F
                db    6
                db  76h ; v
                db    6
                db  2Bh ; +
                db  46h ; F
                db  0Ah
                db  1Bh
                db  56h ; V
                db  0Ch
                db  2Bh ; +
                db  46h ; F
                db    6
                db  1Bh
                db  56h ; V
                db    8
                db 0F7h
                db 0DAh
                db 0F7h
                db 0D8h
                db  83h
                db 0DAh
                db    0
                db  5Bh ; [
                db  5Dh ; ]
                db 0CAh
                db    8
                db    0
                db  32h ; 2
                db 0EDh
                db 0E3h
                db    6
                db 0D1h
                db 0EAh
                db 0D1h
                db 0D8h
                db 0E2h
                db 0FAh
                db 0CBh
                db    0
                db  55h ; U
                db  8Bh
                db 0ECh
                db  53h ; S
                db  56h ; V
                db  8Bh
                db  46h ; F
                db  0Ch
                db  0Bh
                db 0C0h
                db  75h ; u
                db  15h
                db  8Bh
                db  4Eh ; N
                db  0Ah
                db  8Bh
                db  46h ; F
                db    8
                db  33h ; 3
                db 0D2h
                db 0F7h
                db 0F1h
                db  8Bh
                db 0D8h
                db  8Bh
                db  46h ; F
                db    6
                db 0F7h
                db 0F1h
                db  8Bh
                db 0D3h
                db 0EBh
                db  38h ; 8
                db  8Bh
                db 0C8h
                db  8Bh
                db  5Eh ; ^
                db  0Ah
                db  8Bh
                db  56h ; V
                db    8
                db  8Bh
                db  46h ; F
                db    6
                db 0D1h
                db 0E9h
                db 0D1h
                db 0DBh
                db 0D1h
                db 0EAh
                db 0D1h
                db 0D8h
                db  0Bh
                db 0C9h
                db  75h ; u
                db 0F4h
                db 0F7h
                db 0F3h
                db  8Bh
                db 0F0h
                db 0F7h
                db  66h ; f
                db  0Ch
                db  91h
                db  8Bh
                db  46h ; F
                db  0Ah
                db 0F7h
                db 0E6h
                db    3
                db 0D1h
                db  72h ; r
                db  0Ch
                db  3Bh ; ;
                db  56h ; V
                db    8
                db  77h ; w
                db    7
                db  72h ; r
                db    6
                db  3Bh ; ;
                db  46h ; F
                db    6
                db  76h ; v
                db    1
                db  4Eh ; N
                db  33h ; 3
                db 0D2h
                db  96h
                db  5Eh ; ^

; =============== S U B R O U T I N E =======================================


sub_1FCA4       proc far                ; ...
                pop     bx
                pop     bp
                retf    8
sub_1FCA4       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                db    0
; ---------------------------------------------------------------------------
                push    bp
                mov     bp, sp
                mov     ax, [bp+8]
                mov     cx, [bp+0Ch]
                or      cx, ax
                mov     cx, [bp+0Ah]
                jnz     short loc_1FCC3
                mov     ax, [bp+6]
                mul     cx
                pop     bp
                retf    8
; ---------------------------------------------------------------------------

loc_1FCC3:                              ; ...
                push    bx
                mul     cx
                mov     bx, ax
                mov     ax, [bp+6]
                mul     word ptr [bp+0Ch]
                add     bx, ax
                mov     ax, [bp+6]
                mul     cx
                add     dx, bx
                pop     bx
                pop     bp
                retf    8

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FCDC       proc near               ; ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                lds     si, [bp+arg_0]
                mov     bx, 1
                xor     cx, cx
                mov     dx, 12h
                mov     ah, 6Ch
                int     21h             ; DOS - 4.0 - EXTENDED OPEN/CREATE
                                        ; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
                                        ; BH = flags, CX = create attribute, DL = action if file exists/does not exists
                                        ; DH = 00h (reserved), DS:SI -> ASCIZ file name
                jnb     short loc_1FCF6
                mov     ax, 0FFFFh

loc_1FCF6:                              ; ...
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    4
sub_1FCDC       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FCFD       proc near               ; ...

arg_0           = word ptr  4
arg_2           = dword ptr  6

                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                lds     dx, [bp+arg_2]
                mov     ax, [bp+arg_0]
                mov     ah, 3Dh
                int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                                        ; DS:DX -> ASCIZ filename
                                        ; AL = access mode
                                        ; 0 - read, 1 - write, 2 - read & write
                jnb     short loc_1FD12
                mov     ax, 0FFFFh

loc_1FD12:                              ; ...
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    6
sub_1FCFD       endp


; =============== S U B R O U T I N E =======================================


sub_1FD19       proc near               ; ...
                mov     ah, 40h ; '@'
                jmp     short loc_1FD1F
sub_1FD19       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FD1D       proc near               ; ...

arg_0           = word ptr  4
arg_2           = dword ptr  6
arg_6           = word ptr  0Ah

                mov     ah, 3Fh ; '?'

loc_1FD1F:                              ; ...
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                mov     bx, [bp+arg_6]
                mov     cx, [bp+arg_0]
                lds     dx, [bp+arg_2]
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                jb      short loc_1FD37
                cmp     ax, [bp+arg_0]
                jz      short loc_1FD39

loc_1FD37:                              ; ...
                xor     ax, ax

loc_1FD39:                              ; ...
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    8
sub_1FD1D       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FD40       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     bx, [bp+arg_4]
                mov     dx, [bp+arg_0]
                mov     cx, [bp+arg_2]
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_1FD64
                cmp     ax, [bp+arg_0]
                jnz     short loc_1FD64
                cmp     dx, [bp+arg_2]
                jnz     short loc_1FD64
                mov     ax, 1
                jmp     short loc_1FD66
; ---------------------------------------------------------------------------

loc_1FD64:                              ; ...
                xor     ax, ax

loc_1FD66:                              ; ...
                pop     di
                pop     si
                pop     bp
                retn    6
sub_1FD40       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FD6C       proc near               ; ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     bx, [bp+arg_0]
                mov     ah, 68h
                int     21h             ; DOS - 3.3+ - COMMIT FILE, WRITE ALL BUFFERED DATA TO DISK
                                        ; BX = file handle
                cmc
                sbb     ax, ax
                pop     di
                pop     si
                pop     bp
                retn    2
sub_1FD6C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FD81       proc near               ; ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     bx, [bp+arg_0]
                mov     ah, 3Eh
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                pop     di
                pop     si
                pop     bp
                retn    2
sub_1FD81       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FD94       proc near               ; ...

arg_0           = word ptr  4
arg_2           = dword ptr  6
arg_6           = dword ptr  0Ah

                push    bp
                mov     bp, sp
                push    ds

loc_1FD98:                              ; ...
                push    si
                push    di
                lds     si, [bp+arg_2]
                les     di, [bp+arg_6]
                mov     cx, [bp+arg_0]
                mov     ax, ds
                cmp     ax, word ptr [bp+arg_6+2]
                jnz     short loc_1FDD9
                cmp     si, di          ; ...
                jnb     short loc_1FDD9
                mov     ax, si
                add     ax, cx
                cmp     ax, di
                jb      short loc_1FDD9
                add     si, cx
                sub     si, 4           ; ...
                add     di, cx
                sub     di, 4
                std
                mov     dx, cx
                shr     cx, 2
                rep movsd               ; ...
                mov     cx, dx
                and     cx, 3
                add     si, 3
                add     di, 3
                rep movsb
                cld
                jmp     short loc_1FDE7
; ---------------------------------------------------------------------------

loc_1FDD9:                              ; ...
                cld
                push    cx
                shr     cx, 2
                rep movsd
                pop     cx

loc_1FDE2:                              ; ...
                and     cx, 3
                rep movsb

loc_1FDE7:                              ; ...
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    0Ah
sub_1FD94       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FDEE       proc near               ; ...

arg_0           = word ptr  4
arg_2           = dword ptr  6

                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                les     di, [bp+arg_2]
                mov     cx, [bp+arg_0]
                cld
                xor     eax, eax
                mov     dx, cx
                shr     cx, 2

loc_1FE03:                              ; ...
                rep stosd
                mov     cx, dx
                and     cx, 3
                rep stosb
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    6
sub_1FDEE       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FE14       proc near               ; ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     bx, [bp+arg_0]
                add     bx, 0Fh
                jnb     short loc_1FE26
                mov     bx, 1000h       ; ...
                jmp     short loc_1FE29
; ---------------------------------------------------------------------------

loc_1FE26:                              ; ...
                shr     bx, 4

loc_1FE29:                              ; ...
                mov     ah, 48h
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                jnb     short loc_1FE31
                xor     ax, ax

loc_1FE31:                              ; ...
                mov     dx, ax
                xor     ax, ax
                pop     di
                pop     si
                pop     bp
                retn    2
sub_1FE14       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FE3B       proc near               ; ...

arg_2           = word ptr  6

                push    bp
                mov     bp, sp

loc_1FE3E:                              ; ...
                push    si
                push    di
                mov     es, [bp+arg_2]
                mov     ah, 49h
                int     21h             ; DOS - 2+ - FREE MEMORY
                                        ; ES = segment address of area to be freed
                pop     di
                pop     si
                pop     bp
                retn    4
sub_1FE3B       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FE4D       proc near               ; ...

arg_0           = word ptr  4
arg_4           = word ptr  8

                push    bp
                mov     bp, sp
                push    si
                push    di
                xor     dx, dx
                mov     bx, [bp+arg_0]
                add     bx, 0Fh
                jo      short loc_1FE93
                shr     bx, 4
                mov     es, [bp+arg_4]
                push    es
                mov     ah, 4Ah
                int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                                        ; ES = segment address of block to change
                                        ; BX = new size in paragraphs
                pop     dx
                jnb     short loc_1FE93
                mov     si, dx
                push    [bp+arg_0]
                call    sub_1FE14
                or      dx, dx
                jz      short loc_1FE95
                push    dx
                xor     di, di
                dec     si
                mov     es, si
                inc     si
                mov     cx, es:3
                shl     cx, 4
                push    dx
                push    di
                push    si
                push    di
                push    cx
                call    sub_1FD94
                push    si
                push    di
                call    sub_1FE3B
                pop     dx

loc_1FE93:                              ; ...
                xor     ax, ax

loc_1FE95:                              ; ...
                pop     di
                pop     si
                pop     bp
                retn    6
sub_1FE4D       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FE9C       proc near               ; ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    ds
                push    si

loc_1FEA1:                              ; ...
                push    di
                lds     dx, [bp+arg_0]
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jb      short loc_1FEB7
                mov     ax, cx
                xor     dx, dx

loc_1FEB0:                              ; ...
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    4
; ---------------------------------------------------------------------------

loc_1FEB7:                              ; ...
                mov     ax, 0FFFFh
                mov     dx, ax
                jmp     short loc_1FEB0
sub_1FE9C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FEBE       proc near               ; ...

arg_0           = word ptr  4
arg_2           = dword ptr  6

                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                mov     cx, [bp+arg_0]
                lds     dx, [bp+arg_2]  ; ...
                mov     ax, 4301h
                int     21h             ; DOS - 2+ - SET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name
                                        ; CX = file attribute bits
                cmc
                sbb     ax, ax
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    6
sub_1FEBE       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FED9       proc near               ; ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                lds     dx, [bp+arg_0]
                mov     ah, 41h
                int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)
                cmc
                sbb     ax, ax
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    4
sub_1FED9       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FEF0       proc near               ; ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                lds     dx, [bp+arg_4]
                les     di, [bp+arg_0]
                mov     ah, 56h
                int     21h             ; DOS - 2+ - RENAME A FILE
                                        ; DS:DX -> ASCIZ old name (drive and path allowed, no wildcards)
                                        ; ES:DI -> ASCIZ new name
                cmc
                sbb     ax, ax
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    8
sub_1FEF0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FF0A       proc near               ; ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                xor     cx, cx
                lds     dx, [bp+arg_0]
                mov     ah, 5Ah
                int     21h             ; DOS - 3+ - CREATE UNIQUE FILE
                                        ; DS:DX -> ASCIZ directory path name ending with a '' + 13 bytes to
                                        ; receive generated filename
                                        ; CX = file attributes (only bits 0,1,2,5 may be set)
                jnb     short loc_1FF1E
                mov     ax, 0FFFFh

loc_1FF1E:                              ; ...
                pop     di
                pop     si
                pop     ds
                pop     bp
                retn    4
sub_1FF0A       endp

; ---------------------------------------------------------------------------
                db    0
; ---------------------------------------------------------------------------
                mov     ax, 43F9h
                push    bp
                mov     bp, sp
                push    ds
                mov     ds, ax
                assume ds:nothing
                push    7000h
                call    sub_219DA
                mov     ds:3C4h, ax
                mov     ds:3C6h, dx
                mov     ax, dx
                or      ax, ds:3C4h
                jz      short loc_1FF55
                call    loc_21BC2
                or      ax, ax
                jz      short loc_1FF55
                call    sub_21A9C
                call    sub_21E3C
                xor     ax, ax
                jmp     short loc_1FF60
; ---------------------------------------------------------------------------

loc_1FF55:                              ; ...
                call    sub_21E3C
                call    far ptr 1EEEh:17ACh
                mov     ax, 0Eh

loc_1FF60:                              ; ...
                xor     dx, dx
                pop     ds
                assume ds:nothing
                leave
                retf
; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FF66       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                mov     si, [bp+arg_0]
                mov     es, [bp+arg_2]
                test    byte ptr es:[si+4], 4
                jnz     short loc_1FF87
                push    large dword ptr es:[si+0Ah]
                call    sub_20332
                mov     es, [bp+arg_2]
                or      byte ptr es:[si+4], 4

loc_1FF87:                              ; ...
                pop     si
                leave
                retn    4
sub_1FF66       endp

; ---------------------------------------------------------------------------

loc_1FF8C:                              ; ...
                mov     ax, 43F9h
                push    bp
                mov     bp, sp
                push    ds
                mov     ds, ax
                assume ds:nothing
                push    1C6Eh
                call    sub_206EA
                push    ds
                push    3D0h
                call    sub_1FF66
                push    ds
                push    3F8h
                call    sub_1FF66
                push    ds
                push    420h
; ---------------------------------------------------------------------------
                db 0E8h

; =============== S U B R O U T I N E =======================================


sub_1FFAE       proc far                ; ...
                mov     dh, 0FFh
                call    sub_21C0C
                cmp     dword ptr ds:3C4h, 0
                jz      short loc_1FFC3
                push    large [dword ptr ds:3C4h]
                call    sub_1FE3B

loc_1FFC3:                              ; ...
                call    sub_21E3C
                pop     ds
                assume ds:nothing
                leave
                retf
sub_1FFAE       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FFCA       proc near               ; ...

var_E           = word ptr -0Eh
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = dword ptr  6
arg_6           = dword ptr  0Ah

                enter   0Eh, 0
                push    di
                push    si
                les     di, [bp+arg_2]
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                dec     cx
                add     cx, 59h ; 'Y'
                push    cx
                call    sub_219DA
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                or      dx, ax
                jnz     short loc_1FFF4
                mov     si, 0Eh
                jmp     loc_201B6
; ---------------------------------------------------------------------------

loc_1FFF4:                              ; ...
                push    word ptr [bp+var_4+2]
                push    ax
                push    59h ; 'Y'
                call    sub_1FDEE
                mov     bx, word ptr [bp+var_4]
                mov     cx, word ptr [bp+var_4+2]
                add     bx, 58h ; 'X'
                push    ds
                mov     si, bx
                mov     ds, cx
                les     di, [bp+arg_2]
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                mov     al, byte ptr [bp+arg_0]
                and     ax, 2
                mov     [bp+var_E], ax
                or      ax, ax
                jnz     short loc_2004D
                push    large [bp+arg_2]
                call    sub_1FCDC
                mov     si, ax
                cmp     si, 0FFFFh
                jnz     short loc_20049
                mov     si, 3F8h
                jmp     loc_201AF
; ---------------------------------------------------------------------------

loc_20049:                              ; ...
                push    si
                call    sub_1FD81

loc_2004D:                              ; ...
                mov     di, [bp+arg_0]
                les     bx, [bp+var_4]
                mov     word ptr es:[bx+56h], 3
                cmp     [bp+var_E], 0
                jz      short loc_20068
                les     bx, [bp+var_4]
                mov     word ptr es:[bx+56h], 43h ; 'C'

loc_20068:                              ; ...
                les     bx, [bp+var_4]
                mov     dword ptr es:[bx+16h], 47455243h
                test    di, 4
                jz      short loc_2008D
                les     bx, [bp+var_4]
                mov     dword ptr es:[bx+1Ah], 20000h
                or      byte ptr es:[bx+56h], 8
                jmp     short loc_20099
; ---------------------------------------------------------------------------

loc_2008D:                              ; ...
                les     bx, [bp+var_4]
                mov     dword ptr es:[bx+1Ah], 10000h

loc_20099:                              ; ...
                les     bx, [bp+var_4]
                mov     dword ptr es:[bx+28h], 1
                mov     ax, di
                and     ax, 1
                cmp     ax, 1
                sbb     ax, ax
                and     al, 81h
                add     ax, 80h
                mov     es:[bx+2Ch], ax
                mov     dword ptr es:[bx+36h], 4E4B4752h
                mov     eax, 0FFFFFFFFh
                mov     es:[bx+3Eh], eax
                mov     es:[bx+42h], ax
                mov     es:[bx+44h], ax
                mov     dword ptr es:[bx+46h], 9
                push    es
                push    bx
                call    sub_22F8C
                mov     si, ax
                or      si, ax
                jnz     loc_201A2
                les     bx, [bp+var_4]
                test    byte ptr es:[bx+56h], 8
                jnz     short loc_200FD
                mov     dword ptr es:[bx+0Ch], 20h ; ' '

loc_200FD:                              ; ...
                push    large [bp+var_4]
                push    0FFFFh
                call    sub_23B76
                mov     si, ax
                or      si, ax
                jnz     loc_201A2
                push    large [bp+var_4]
                lea     ax, [bp+var_C]
                push    ss
                push    ax
                lea     ax, [bp+var_8]
                push    ss
                push    ax
                call    sub_228A8
                mov     si, ax
                or      si, ax
                jnz     short loc_201A2
                mov     eax, [bp+var_C]
                les     bx, [bp+var_4]
                mov     es:[bx+3Eh], eax

loc_20131:                              ; ...
                les     bx, [bp+var_8]
                or      dword ptr es:[bx+8], 0FFFFFFh
                les     bx, [bp+var_8]
                or      dword ptr es:[bx], 0FFFFFFh
                les     bx, [bp+var_8]
                or      dword ptr es:[bx+4], 0FFFFFFh
                les     bx, [bp+var_8]
                mov     word ptr es:[bx+0Eh], 0
                les     bx, [bp+var_8]
                mov     word ptr es:[bx+0Ch], 0FFFFh
                push    large [bp+var_4]
                push    large [bp+var_C]
                push    1
                call    sub_2285A
                push    large [bp+var_4]
                call    sub_2044E
                mov     si, ax
                or      si, ax
                jnz     short loc_201A2
                mov     eax, ds:3C8h
                les     bx, [bp+var_4]
                mov     es:[bx], eax
                mov     ds:3C8h, bx
                mov     word ptr ds:3CAh, es
                les     bx, [bp+arg_6]
                mov     eax, [bp+var_4]
                mov     es:[bx], eax
                xor     ax, ax
                jmp     short loc_201B8
; ---------------------------------------------------------------------------

loc_201A2:                              ; ...
                cmp     [bp+var_E], 0
                jnz     short loc_201AF
                push    large [bp+arg_2]
                call    sub_1FED9

loc_201AF:                              ; ...
                push    large [bp+var_4]
                call    sub_20332

loc_201B6:                              ; ...
                mov     ax, si

loc_201B8:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Ah
sub_1FFCA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_201BE       proc near               ; ...

var_A           = word ptr -0Ah
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = dword ptr  4

                enter   0Ah, 0
                push    di
                push    si
                les     di, [bp+arg_0]
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                dec     cx
                add     cx, 59h ; 'Y'
                push    cx
                call    sub_219DA
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                or      dx, ax
                jnz     short loc_201E8
                mov     si, 0Eh
                jmp     loc_2032A
; ---------------------------------------------------------------------------

loc_201E8:                              ; ...
                push    word ptr [bp+var_4+2]
                push    ax
                push    59h ; 'Y'
                call    sub_1FDEE
                mov     bx, word ptr [bp+var_4]
                mov     cx, word ptr [bp+var_4+2]
                add     bx, 58h ; 'X'
                push    ds
                mov     si, bx
                mov     ds, cx
                les     di, [bp+arg_0]
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                mov     [bp+var_6], 3F8h
                push    large [bp+arg_0]
                push    ax
                call    sub_1FCFD
                mov     [bp+var_A], ax
                inc     ax
                jz      short loc_202A9
                push    [bp+var_A]
                mov     eax, [bp+var_4]
                add     ax, 16h
                push    eax
                push    20h ; ' '
                call    sub_1FD1D
                or      ax, ax
                jz      short loc_202AE
                les     bx, [bp+var_4]
                cmp     dword ptr es:[bx+16h], 47455243h
                jnz     loc_2031A
                cmp     dword ptr es:[bx+1Ah], 10000h
                jz      short loc_2026C
                cmp     dword ptr es:[bx+1Ah], 20000h
                jnz     loc_2031A

loc_2026C:                              ; ...
                and     byte ptr es:[bx+28h], 0FAh
                cmp     dword ptr es:[bx+1Ah], 20000h
                jnz     short loc_20284
                les     bx, [bp+var_4]
                or      byte ptr es:[bx+56h], 8

loc_20284:                              ; ...
                push    [bp+var_A]
                mov     eax, [bp+var_4]
                add     ax, 36h ; '6'
                push    eax
                push    20h ; ' '
                call    sub_1FD1D
                or      ax, ax
                jz      short loc_202AE
                les     bx, [bp+var_4]
                cmp     dword ptr es:[bx+36h], 4E4B4752h
                jz      short loc_202B3
                jmp     short loc_2031A
; ---------------------------------------------------------------------------

loc_202A9:                              ; ...
                mov     si, [bp+var_6]
                jmp     short loc_20323
; ---------------------------------------------------------------------------

loc_202AE:                              ; ...
                mov     si, [bp+var_6]
                jmp     short loc_2031D
; ---------------------------------------------------------------------------

loc_202B3:                              ; ...
                push    es
                push    bx
                call    sub_22F8C
                mov     si, ax
                or      si, ax
                jnz     short loc_2031D
                push    large [bp+var_4]
                push    [bp+var_A]
                call    sub_23B76
sub_201BE       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_202C8       proc near               ; ...
                mov     si, ax
                or      si, ax
                jnz     short loc_2031D
                push    word ptr [bp-0Ah]
                call    sub_1FD81
                push    large dword ptr [bp+4]
                call    sub_1FE9C
                cmp     ax, 0FFFFh
                jnz     short loc_202E4
                cmp     dx, ax
                jz      short loc_202F8

loc_202E4:                              ; ...
                push    large dword ptr [bp+4]
                push    ax
                call    sub_1FEBE
                or      ax, ax
                jnz     short loc_202F8
                les     bx, [bp-4]
                or      byte ptr es:[bx+56h], 80h

loc_202F8:                              ; ...
                mov     eax, ds:3C8h
                les     bx, [bp-4]
                mov     es:[bx], eax
                mov     ds:3C8h, bx
                mov     word ptr ds:3CAh, es
                les     bx, [bp+8]
                mov     eax, [bp-4]
                mov     es:[bx], eax
                xor     ax, ax
                jmp     short loc_2032C
; ---------------------------------------------------------------------------

loc_2031A:                              ; ...
                mov     si, 3F1h

loc_2031D:                              ; ...
                push    word ptr [bp-0Ah]
                call    sub_1FD81

loc_20323:                              ; ...
                push    large dword ptr [bp-4]
                call    sub_20332

loc_2032A:                              ; ...
                mov     ax, si

loc_2032C:                              ; ...
                pop     si
                pop     di
                leave
                retn    8
sub_202C8       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_20332       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   8, 0
                push    di
                push    si
                mov     di, [bp+arg_0]
                push    [bp+arg_2]
sub_20332       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_2033E       proc near               ; ...
                push    di
                push    0FFFFh
                call    sub_2216C
                xor     ax, ax
                cwd
                mov     si, ax
                mov     [bp-6], dx      ; ...
sub_2033E       endp ; sp-analysis failed

                mov     ecx, ds:3C8h
                mov     bx, ds:3CAh
                mov     [bp-4], ecx
                cmp     cx, ax
                jnz     short loc_20361
                cmp     bx, dx
                jz      short loc_203AF

loc_20361:                              ; ...
                mov     bx, [bp-4]
                mov     cx, si

loc_20366:                              ; ...
                mov     ax, [bp-2]
                cmp     bx, di
                jnz     short loc_20372
                cmp     ax, [bp+6]
                jz      short loc_2038B

loc_20372:                              ; ...
                mov     cx, bx
                mov     [bp-6], ax
                mov     es, ax
                mov     ax, es:[bx]
                mov     dx, es:[bx+2]
                mov     bx, ax
                mov     [bp-2], dx
                or      dx, ax
                jnz     short loc_20366
                jmp     short loc_203AF
; ---------------------------------------------------------------------------

loc_2038B:                              ; ...
                mov     ax, [bp-6]
                or      ax, cx
                jnz     short loc_2039F
                mov     es, word ptr [bp-2]
                mov     eax, es:[bx]
                mov     ds:3C8h, eax
                jmp     short loc_203AF
; ---------------------------------------------------------------------------

loc_2039F:                              ; ...
                mov     es, word ptr [bp-2]
                mov     eax, es:[bx]
                mov     bx, cx
                mov     es, word ptr [bp-6]
                mov     es:[bx], eax

loc_203AF:                              ; ...
                mov     es, word ptr [bp+6]
                cmp     dword ptr es:[di+4], 0
                jz      short loc_203FC
                xor     cx, cx
                mov     ax, es:[di+4]
                mov     dx, es:[di+6]
                mov     si, ax
                mov     [bp-4], dx
                cmp     es:[di+8], cx
                jz      short loc_203F4
                mov     [bp-2], cx
                mov     di, cx

loc_203D4:                              ; ...
                mov     es, word ptr [bp-4]
                cmp     dword ptr es:[si], 0
                jz      short loc_203E5
                push    large dword ptr es:[si]
                call    sub_1FE3B

loc_203E5:                              ; ...
                add     si, 0Ch
                inc     di
                les     bx, [bp+4]
                cmp     es:[bx+8], di
                ja      short loc_203D4
                mov     di, bx

loc_203F4:                              ; ...
                push    large dword ptr es:[di+4]
                call    sub_1FE3B

loc_203FC:                              ; ...
                mov     es, word ptr [bp+6]
                cmp     dword ptr es:[di+10h], 0
                jz      short loc_2043F
                xor     cx, cx
                mov     ax, es:[di+10h]
                mov     dx, es:[di+12h]
                mov     si, ax
                mov     [bp-4], dx
                cmp     es:[di+26h], cx
                jz      short loc_20437
                mov     [bp-2], cx
                mov     di, cx

loc_20421:                              ; ...
                push    word ptr [bp-4]
                push    si
                call    sub_2309E
                add     si, 1Ah
                inc     di
                les     bx, [bp+4]
                cmp     es:[bx+26h], di
                ja      short loc_20421
                mov     di, bx

loc_20437:                              ; ...
                push    large dword ptr es:[di+10h]
                call    sub_1FE3B

loc_2043F:                              ; ...
                push    word ptr [bp+6]
                push    di
                call    sub_1FE3B
                xor     ax, ax
                pop     si
                pop     di
                leave
                retn    4

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2044E       proc near               ; ...

var_10C         = byte ptr -10Ch
var_10B         = byte ptr -10Bh
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = dword ptr  4

                enter   10Ch, 0
                push    di
                push    si
                mov     si, word ptr [bp+arg_0]
                mov     es, word ptr [bp+arg_0+2]
                test    byte ptr es:[si+56h], 1
                jnz     short loc_20466

loc_20461:                              ; ...
                xor     ax, ax
                jmp     loc_206B2
; ---------------------------------------------------------------------------

loc_20466:                              ; ...
                test    byte ptr es:[si+56h], 50h
                jnz     short loc_20461
                mov     bx, si
                or      byte ptr es:[bx+56h], 10h
                mov     [bp+var_8], 3F8h
                mov     ax, 0FFFFh
                mov     [bp+var_6], ax
                mov     [bp+var_4], ax
                lea     ax, [bx+58h]
                push    es
                push    ax
                push    0
                call    sub_1FEBE
                or      ax, ax
                jz      loc_20546
                les     bx, [bp+arg_0]
                test    byte ptr es:[bx+56h], 4
                jz      loc_20551
                mov     ax, bx
                add     ax, 58h ; 'X'
                mov     di, ax
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                dec     cx
                mov     [bp+var_2], cx
                cmp     cx, 104h
                jnb     loc_20546
                mov     bx, word ptr [bp+arg_0]
                add     bx, 58h ; 'X'
                push    ds
                mov     di, bx
                lea     si, [bp+var_10C]
                push    ss
                pop     ds
                mov     cx, 0FFFFh
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                mov     bx, [bp+var_2]

loc_204E4:                              ; ...
                dec     bx
                jz      short loc_204F0
                mov     si, bx
                cmp     [bp+si+var_10C], 5Ch ; '\'
                jnz     short loc_204E4

loc_204F0:                              ; ...
                or      bx, bx
                jz      short loc_204FD
                mov     si, bx
                mov     [bp+si+var_10B], 0
                jmp     short loc_20523
; ---------------------------------------------------------------------------

loc_204FD:                              ; ...
                push    ds
                mov     di, 3CCh
                lea     si, [bp+var_10C]
                push    ds
                pop     es
                push    ss
                pop     ds
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds

loc_20523:                              ; ...
                lea     ax, [bp+var_10C]
                push    ss
                push    ax
                call    sub_1FF0A
                mov     [bp+var_4], ax
                inc     ax
                jz      short loc_20546
                mov     eax, [bp+arg_0]
                add     ax, 58h ; 'X'
                push    eax
                push    0
                call    sub_1FCFD
                mov     [bp+var_6], ax
                inc     ax
                jnz     short loc_2054C

loc_20546:                              ; ...
                mov     si, word ptr [bp+arg_0]
                jmp     loc_20668
; ---------------------------------------------------------------------------

loc_2054C:                              ; ...
                mov     si, word ptr [bp+arg_0]
                jmp     short loc_20565
; ---------------------------------------------------------------------------

loc_20551:                              ; ...
                mov     si, bx
                lea     ax, [bx+58h]
                push    es
                push    ax
                push    1
                call    sub_1FCFD
                mov     [bp+var_4], ax
                inc     ax
                jz      loc_20668

loc_20565:                              ; ...
                cmp     [bp+var_6], 0FFFFh
                jnz     short loc_20575
                mov     es, word ptr [bp+arg_0+2]
                test    byte ptr es:[si+28h], 1
                jz      short loc_205C3

loc_20575:                              ; ...
                mov     es, word ptr [bp+arg_0+2]
                or      byte ptr es:[si+28h], 20h
                test    byte ptr es:[si+56h], 8
                jz      short loc_20594
                mov     es, word ptr [bp+arg_0+2]
                mov     ax, es:[si+0Ch]
                mov     dx, es:[si+0Eh]
                add     ah, 10h
                jmp     short loc_205A2
; ---------------------------------------------------------------------------

loc_20594:                              ; ...
                mov     es, word ptr [bp+arg_0+2]
                mov     ax, es:[si+0Ch]
                mov     dx, es:[si+0Eh]
                add     ax, 20h ; ' '

loc_205A2:                              ; ...
                adc     dx, 0
                mov     es:[si+1Eh], ax
                mov     es:[si+20h], dx
                push    [bp+var_4]
                mov     ax, si
                mov     dx, word ptr [bp+arg_0+2]
                add     ax, 16h
                push    dx
                push    ax
                push    20h ; ' '
                call    sub_1FD19
                or      ax, ax
                jz      short loc_205EB

loc_205C3:                              ; ...
                push    word ptr [bp+arg_0+2]
                push    si
                push    [bp+var_6]
                push    [bp+var_4]
                call    sub_22D70
                mov     [bp+var_8], ax
                or      ax, ax
                jnz     short loc_205EB
                push    word ptr [bp+arg_0+2]
                push    si
                push    [bp+var_6]
                push    [bp+var_4]
                call    sub_23994
                mov     [bp+var_8], ax
                or      ax, ax
                jz      short loc_205ED

loc_205EB:                              ; ...
                jmp     short loc_20668
; ---------------------------------------------------------------------------

loc_205ED:                              ; ...
                mov     es, word ptr [bp+arg_0+2]
                test    byte ptr es:[si+57h], 2
                jnz     short loc_205FD
                cmp     [bp+var_6], 0FFFFh
                jz      short loc_20607

loc_205FD:                              ; ...
                push    [bp+var_4]
                call    sub_1FD6C
                or      ax, ax
                jz      short loc_20668

loc_20607:                              ; ...
                push    [bp+var_4]
                call    sub_1FD81
                cmp     [bp+var_6], 0FFFFh
                jz      short loc_20646
                push    [bp+var_6]
                call    sub_1FD81
                mov     [bp+var_8], 3F8h
                mov     ax, si
                mov     dx, word ptr [bp+arg_0+2]
                add     ax, 58h ; 'X'

loc_20626:                              ; ...
                push    dx
                push    ax
                call    sub_1FED9
                or      ax, ax
                jz      short loc_20698
                lea     ax, [bp+var_10C]
                push    ss
                push    ax
                mov     ax, si
                mov     dx, word ptr [bp+arg_0+2]
                add     ax, 58h ; 'X'
                push    dx
                push    ax
                call    sub_1FEF0
                or      ax, ax
                jz      short loc_20698

loc_20646:                              ; ...
                push    word ptr [bp+arg_0+2]
                push    si
                call    sub_23A96
                push    word ptr [bp+arg_0+2]
                push    si
                call    sub_22EE2
                mov     es, word ptr [bp+arg_0+2]
                and     word ptr es:[si+28h], 0FFFEh
                and     word ptr es:[si+56h], 0FFFAh
                mov     [bp+var_8], 0
                jmp     short loc_20698
; ---------------------------------------------------------------------------

loc_20668:                              ; ...
                cmp     [bp+var_6], 0FFFFh
                jz      short loc_20674
                push    [bp+var_6]
                call    sub_1FD81

loc_20674:                              ; ...
                cmp     [bp+var_4], 0FFFFh
                jz      short loc_20698
                cmp     [bp+var_6], 0FFFFh
                jz      short loc_20689
                lea     ax, [bp+var_10C]
                push    ss
                push    ax
                call    sub_1FED9

loc_20689:                              ; ...
                mov     ax, si
                mov     dx, word ptr [bp+arg_0+2] ; ...
                add     ax, 58h ; 'X'
                push    dx
                push    ax
                push    3
                call    sub_1FEBE

loc_20698:                              ; ...
                mov     ax, si
                mov     dx, word ptr [bp+arg_0+2]
                add     ax, 58h ; 'X'
                push    dx
                push    ax
                push    3
                call    sub_1FEBE
                mov     es, word ptr [bp+arg_0+2]
                and     byte ptr es:[si+56h], 0EFh
                mov     ax, [bp+var_8]

loc_206B2:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_2044E       endp

; ---------------------------------------------------------------------------
                push    bp
                mov     bp, sp
                push    si
                mov     si, [bp+4]
                mov     es, word ptr [bp+6]
                test    byte ptr es:[si+56h], 50h
                jnz     short loc_206E2
                or      byte ptr es:[si+56h], 20h
                push    es
                push    si
                call    sub_22F26
                push    word ptr [bp+6]
                push    si
                call    sub_23AEE
                mov     es, word ptr [bp+6]
                and     byte ptr es:[si+56h], 0DFh

loc_206E2:                              ; ...
                xor     ax, ax
                pop     si
                leave
                retn    4
; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_206EA       proc near               ; ...

var_6           = word ptr -6
arg_0           = word ptr  4

                enter   8, 0
                push    di
                push    si
                mov     ax, ds:3C8h
                mov     dx, ds:3CAh
                mov     si, ax
                mov     [bp+var_6], dx
                or      dx, ax
                jz      short loc_2071D

loc_20700:                              ; ...
                mov     es, [bp+var_6]
                mov     di, si
                mov     ax, es:[si]
                mov     dx, es:[si+2]
                mov     si, ax
                mov     [bp+var_6], dx
                push    es
                push    di
                call    [bp+arg_0]
                mov     ax, [bp+var_6]
                or      ax, si
                jnz     short loc_20700

loc_2071D:                              ; ...
                pop     si
                pop     di
                leave
                retn    2
sub_206EA       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_20724       proc near               ; ...

var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   4, 0
                push    di
                push    si
                mov     si, [bp+arg_0]
                mov     es, [bp+arg_2]
                les     bx, es:[si+0Ah]
                mov     eax, es:[bx+3Eh]
                mov     dx, es:[bx+40h]
                mov     es, [bp+arg_2]
                mov     es:[si+0Eh], eax
                push    large dword ptr es:[si+0Ah]
                push    dx
                push    word ptr es:[si+0Eh]
                lea     ax, [bp+var_4]
                push    ss
                push    ax
                call    sub_22816
                mov     di, ax
                or      di, ax
                jnz     short loc_207B0
                mov     es, [bp+arg_2]
                mov     word ptr es:[si], 4B48h
                and     word ptr es:[si+4], 0FBE9h
                les     bx, [bp+var_4]
                mov     ax, es:[bx+4]
                mov     dx, es:[bx+6]
                sub     dh, dh
                mov     es, [bp+arg_2]
                mov     es:[si+12h], ax
                mov     es:[si+14h], dx
                les     bx, [bp+var_4]
                mov     ax, es:[bx+0Ch]
                mov     es, [bp+arg_2]
                mov     es:[si+16h], ax
                les     bx, [bp+var_4]
                mov     al, es:[bx+0Bh]
                mov     es, [bp+arg_2]
                mov     es:[si+18h], al
                push    large dword ptr es:[si+0Ah]
                push    large dword ptr es:[si+0Eh]
                push    0
                call    sub_2285A
                jmp     short loc_207BB
; ---------------------------------------------------------------------------

loc_207B0:                              ; ...
                mov     es, [bp+arg_2]
                push    large dword ptr es:[si+0Ah]
                call    sub_20332

loc_207BB:                              ; ...
                mov     ax, di
                pop     si
                pop     di
                leave
                retn    4
sub_20724       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_207C4       proc near               ; ...

var_4           = dword ptr -4
arg_0           = byte ptr  4
arg_2           = dword ptr  6
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch

                enter   4, 0
                push    di
                push    si
                mov     di, [bp+arg_6]
                mov     es, [bp+arg_8]
                test    byte ptr es:[di+4], 4
                jnz     short loc_207DF
                push    large dword ptr es:[di+0Ah]
                call    sub_20332

loc_207DF:                              ; ...
                cmp     [bp+arg_2], 0
                jnz     short loc_207EB
                xor     ax, ax
                jmp     loc_2089F
; ---------------------------------------------------------------------------

loc_207EB:                              ; ...
                test    [bp+arg_0], 1
                jz      short loc_20814
                mov     ax, di
                mov     dx, [bp+arg_8]
                add     ax, 0Ah
                push    dx
                push    ax
                push    large [bp+arg_2]
                mov     al, [bp+arg_0]
                and     ax, 2
                cmp     ax, 1
                cmc
                sbb     ax, ax
                and     ax, 4
                push    ax
                call    sub_1FFCA
                jmp     short loc_20825
; ---------------------------------------------------------------------------

loc_20814:                              ; ...
                mov     ax, di
                mov     dx, [bp+arg_8]
                add     ax, 0Ah
                push    dx
                push    ax
                push    large [bp+arg_2]
                call    sub_201BE

loc_20825:                              ; ...
                mov     si, ax
                or      si, ax
                jnz     short loc_20834
                push    [bp+arg_8]
                push    di
                call    sub_20724
                mov     si, ax

loc_20834:                              ; ...
                or      si, si
                jnz     short loc_2089D
                mov     ax, [bp+arg_8]
                mov     cx, ds
                cmp     di, 420h
                jnz     short loc_2089D
                cmp     ax, cx
                jnz     short loc_2089D
                test    byte ptr ds:3D4h, 4
                jnz     short loc_2089D
                mov     ax, 3D0h
                mov     ds:48Ch, ax
                mov     word ptr ds:48Eh, ds
                mov     ds:490h, di
                mov     word ptr ds:492h, ds
                push    ds
                push    ax
                push    43F9h
                push    470h
                lea     ax, [bp+var_4]
                push    ss
                push    ax
                push    1
                call    sub_20AE4
                or      ax, ax
                jnz     short loc_2089D
                cmp     dword ptr ds:494h, 0FFFFFFh
                jb      short loc_20896
                les     bx, [bp+var_4]
                mov     eax, es:[bx+0Eh]
                mov     ds:494h, eax
                mov     eax, es:[bx+0Ah]
                mov     ds:498h, eax

loc_20896:                              ; ...
                push    large [bp+var_4]
                call    sub_21D6A

loc_2089D:                              ; ...
                mov     ax, si

loc_2089F:                              ; ...
                cwd
                pop     si
                pop     di
                leave
                retn    0Ah
sub_207C4       endp

; ---------------------------------------------------------------------------
                mov     ax, 43F9h
                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ds, ax
                assume ds:nothing
                cmp     dword ptr [bp+6], 80000002h
                jz      short loc_208DD
                cmp     dword ptr [bp+6], 80000003h
                jz      short loc_208DD
                cmp     dword ptr [bp+6], 80000000h
                jz      short loc_208DD
                cmp     dword ptr [bp+6], 80000001h
                jz      short loc_208DD
                mov     ax, 57h ; 'W'
                jmp     short loc_20914
; ---------------------------------------------------------------------------

loc_208DD:                              ; ...
                cmp     dword ptr [bp+6], 80000000h
                jnz     short loc_208F7
                mov     es, word ptr ds:4C2h
                mov     word ptr es:448h, 420h
                mov     word ptr es:44Ah, ds

loc_208F7:                              ; ...
                lea     ax, [bp+6]
                push    ss
                push    ax
                call    sub_21E70
                push    large dword ptr [bp+6]
                push    large dword ptr [bp+0Ah]
                push    word ptr [bp+0Eh]
                call    sub_207C4
                mov     si, ax
                call    sub_21E3C
                mov     ax, si

loc_20914:                              ; ...
                cwd
                pop     ds
                assume ds:nothing
                pop     si
                leave
                retf
; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2091A       proc near               ; ...

var_4           = word ptr -4
var_1           = byte ptr -1
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   6, 0
                push    di
                push    si
                mov     di, [bp+arg_0]
                mov     ax, [bp+arg_2]
                or      ax, di
                jnz     short loc_2092E

loc_2092A:                              ; ...
                xor     ax, ax
                jmp     short loc_2096F
; ---------------------------------------------------------------------------

loc_2092E:                              ; ...
                mov     ax, [bp+arg_2]
                mov     si, di
                mov     [bp+var_4], ax
                xor     cx, cx

loc_20938:                              ; ...
                mov     es, [bp+var_4]
                mov     al, es:[si]
                mov     [bp+var_1], al
                or      al, al
                jz      short loc_2092A
                cmp     al, 5Ch ; '\'
                jnz     short loc_2095C
                or      cx, cx
                jnz     short loc_20958
                mov     ax, es
                cmp     si, di
                jnz     short loc_2096C
                cmp     ax, [bp+arg_2]
                jnz     short loc_2096C

loc_20958:                              ; ...
                xor     cx, cx
                jmp     short loc_20969
; ---------------------------------------------------------------------------

loc_2095C:                              ; ...
                cmp     [bp+var_1], 20h ; ' '
                jb      short loc_2096C
                inc     cx
                cmp     cx, 100h
                jnb     short loc_2096C

loc_20969:                              ; ...
                inc     si
                jmp     short loc_20938
; ---------------------------------------------------------------------------

loc_2096C:                              ; ...
                mov     ax, 1

loc_2096F:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_2091A       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_20976       proc near               ; ...

var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = word ptr  10h
arg_E           = word ptr  12h

                enter   4, 0
                push    si
                mov     bx, [bp+arg_C]
                mov     ax, [bp+arg_E]
                or      ax, bx
                jz      short loc_20992
                mov     ax, [bp+arg_E]
                les     si, [bp+arg_0]
                mov     es:[si], bx
                mov     es:[si+2], ax

loc_20992:                              ; ...
                les     bx, [bp+arg_0]
                les     bx, es:[bx]
                mov     si, bx
                mov     [bp+var_2], es
                cmp     byte ptr es:[bx], 0
                jnz     short loc_209B5
                les     bx, [bp+arg_8]
                sub     eax, eax
                mov     es:[bx], eax
                les     bx, [bp+arg_4]
                mov     es:[bx], ax
                jmp     short loc_209FB
; ---------------------------------------------------------------------------

loc_209B5:                              ; ...
                cmp     byte ptr es:[si], 5Ch ; '\'
                jnz     short loc_209BC
                inc     si

loc_209BC:                              ; ...
                mov     ax, es
                les     bx, [bp+arg_8]
                mov     es:[bx], si
                mov     es:[bx+2], ax
                mov     es, ax
                cmp     byte ptr es:[si], 0
                jz      short loc_209E0

loc_209D0:                              ; ...
                mov     es, [bp+var_2]
                cmp     byte ptr es:[si], 5Ch ; '\'
                jz      short loc_209E0
                inc     si
                cmp     byte ptr es:[si], 0
                jnz     short loc_209D0

loc_209E0:                              ; ...
                mov     ax, [bp+var_2]
                les     bx, [bp+arg_0]
                mov     es:[bx], si
                mov     es:[bx+2], ax
                mov     ax, si
                les     si, [bp+arg_8]
                sub     ax, es:[si]
                les     si, [bp+arg_4]
                mov     es:[si], ax

loc_209FB:                              ; ...
                pop     si
                leave
                retn    10h
sub_20976       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_20A00       proc near               ; ...

var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                enter   0Ch, 0
                push    di
                push    si
                xor     si, si
                push    large [bp+arg_4]
                push    large [bp+arg_0]
                lea     ax, [bp+var_8]
                push    ss
                push    ax
                call    sub_22816
                or      ax, ax
                jnz     loc_20ADC
                mov     ax, ds:4B2h
                les     bx, [bp+var_8]
                cmp     es:[bx+0Eh], ax
                jnz     loc_20ACF
                push    large [bp+arg_4]
                push    word ptr es:[bx+0Ch]
                mov     al, es:[bx+0Bh]
                sub     ah, ah
                push    ax
                lea     ax, [bp+var_C]
                push    ss
                push    ax
                call    sub_232DA
                or      ax, ax
                jnz     loc_20ACF
                mov     ax, ds:4B0h
                les     bx, [bp+var_C]
                cmp     es:[bx+0Ch], ax
                jnz     short loc_20A7C
                push    43F9h
                push    4A6h
                lea     ax, [bx+14h]
                push    es
                push    ax
                push    word ptr ds:4B0h
                call    sub_23CA4
                or      ax, ax
                jz      short loc_20A7C
                push    large [bp+arg_4]
                les     bx, [bp+var_8]
                push    word ptr es:[bx+0Ch]
                push    si
                call    sub_23296
                jmp     short loc_20ACF
; ---------------------------------------------------------------------------

loc_20A7C:                              ; ...
                push    large [bp+arg_4]
                les     bx, [bp+var_8]
                push    word ptr es:[bx+0Ch]
                push    si
                call    sub_23296
                les     bx, [bp+var_8]
                mov     ax, es:[bx+8]
                mov     dx, es:[bx+0Ah]
                sub     dh, dh
                cmp     dx, 0FFh
                ja      short loc_20ACF
                jb      short loc_20AA5
                cmp     ax, 0FFFFh
                jnb     short loc_20ACF

loc_20AA5:                              ; ...
                push    large [bp+arg_4]
                mov     dx, es:[bx+0Ah]
                sub     dh, dh
                push    dx
                push    ax
                call    sub_2207E
                mov     di, ax
                mov     [bp+var_2], dx
                or      dx, ax
                jz      short loc_20ACF
                mov     ax, [bp+var_2]
                cmp     di, ds:48Ch
                jnz     short loc_20ACF
                cmp     ax, ds:48Eh
                jnz     short loc_20ACF
                mov     si, 1

loc_20ACF:                              ; ...
                push    large [bp+arg_4]
                push    large [bp+arg_0]
                push    0
                call    sub_2285A

loc_20ADC:                              ; ...
                mov     ax, si
                pop     si
                pop     di
                leave
                retn    8
sub_20A00       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_20AE4       proc near               ; ...

var_38          = word ptr -38h
var_36          = word ptr -36h
var_34          = word ptr -34h
var_32          = dword ptr -32h
var_2E          = dword ptr -2Eh
var_2A          = dword ptr -2Ah
var_26          = dword ptr -26h
var_22          = dword ptr -22h
var_1E          = dword ptr -1Eh
var_1A          = word ptr -1Ah
var_18          = word ptr -18h
var_16          = word ptr -16h
var_13          = byte ptr -13h
var_12          = dword ptr -12h
var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = dword ptr -0Ah
var_6           = dword ptr -6
var_2           = word ptr -2
arg_0           = byte ptr  4
arg_2           = dword ptr  6
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch
arg_A           = word ptr  0Eh
arg_C           = word ptr  10h

                enter   38h, 0
                push    di
                push    si
                mov     di, [bp+arg_A]
                mov     si, [bp+arg_6]
                sub     eax, eax
                mov     [bp+var_32], eax
                mov     es, [bp+arg_C]
                mov     al, es:[di+19h]
                mov     [bp+var_13], al
                mov     [bp+var_34], 0
                mov     ax, [bp+arg_8]
                or      ax, si
                jz      short loc_20B27
                push    [bp+arg_8]
                push    si
                lea     ax, [bp+var_26]
                push    ss
                push    ax
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                lea     ax, [bp+var_32]
                push    ss
                push    ax
                call    sub_20976
                or      ax, ax
                jnz     short loc_20B2A

loc_20B27:                              ; ...
                jmp     loc_21154
; ---------------------------------------------------------------------------

loc_20B2A:                              ; ...
                mov     al, [bp+arg_0]
                and     al, 1
                jnz     short loc_20B44
                mov     ax, si
                sub     ax, word ptr [bp+var_26]
                neg     ax
                add     [bp+var_16], ax
                mov     ax, [bp+arg_8]
                mov     word ptr [bp+var_26], si
                mov     word ptr [bp+var_26+2], ax

loc_20B44:                              ; ...
                mov     es, [bp+arg_C]
                mov     eax, es:[di+0Ah]
                mov     [bp+var_12], eax
                mov     eax, es:[di+12h]
                mov     [bp+var_1E], eax
                mov     eax, es:[di+0Eh]
                mov     [bp+var_A], eax
                mov     [bp+var_1A], 0

loc_20B67:                              ; ...
                push    large [bp+var_26]
                push    [bp+var_16]
                call    sub_23C50
                mov     word ptr [bp+var_6], ax
                mov     word ptr [bp+var_6+2], dx
                cmp     [bp+var_1E], 0FFFFFFh
                jnb     short loc_20BFC
                mov     si, word ptr [bp+var_12]

loc_20B84:                              ; ...
                mov     [bp+var_2], 0

loc_20B89:                              ; ...
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_1E]
                lea     ax, [bp+var_22]
                push    ss
                push    ax
                call    sub_22816
                mov     di, ax
                or      di, ax
                jnz     loc_21172
                les     bx, [bp+var_22]
                sub     dx, dx
                mov     ax, es:[bx+0Eh]
                cmp     ax, word ptr [bp+var_6]
                jnz     short loc_20BB4
                cmp     dx, word ptr [bp+var_6+2]
                jz      short loc_20BB7

loc_20BB4:                              ; ...
                jmp     loc_20D26
; ---------------------------------------------------------------------------

loc_20BB7:                              ; ...
                push    word ptr [bp+var_12+2]
                push    si
                push    word ptr es:[bx+0Ch]
                mov     al, es:[bx+0Bh]
                sub     ah, ah
                push    ax
                lea     ax, [bp+var_2A]
                push    ss
                push    ax
                call    sub_232DA
                mov     di, ax
                or      di, ax
                jz      short loc_20C02
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_1E]
                push    0
                call    sub_2285A
                cmp     [bp+var_2], 0
                jnz     loc_21172
                mov     [bp+var_2], 1
                push    1ED8h
                call    sub_206EA
                push    1ED8h
                call    sub_206EA
                jmp     short loc_20B89
; ---------------------------------------------------------------------------

loc_20BFC:                              ; ...
                mov     si, word ptr [bp+var_12]
                jmp     loc_20C9A
; ---------------------------------------------------------------------------

loc_20C02:                              ; ...
                mov     [bp+var_18], di
                les     bx, [bp+var_22]
                test    word ptr es:[bx+2], 400h
                jnz     short loc_20C15
                mov     ax, 1
                jmp     short loc_20C17
; ---------------------------------------------------------------------------

loc_20C15:                              ; ...
                xor     ax, ax

loc_20C17:                              ; ...
                mov     cl, [bp+arg_0]
                and     cx, 4
                cmp     cx, 1
                sbb     cx, cx
                neg     cx
                cmp     ax, cx
                jnz     short loc_20C4C
                mov     ax, [bp+var_16]
                les     bx, [bp+var_2A]
                cmp     es:[bx+0Ch], ax
                jnz     short loc_20C4C
                push    large [bp+var_26]
                lea     ax, [bx+14h]
                push    es
                push    ax
                push    [bp+var_16]
                call    sub_23CA4
                or      ax, ax
                jnz     short loc_20C4C
                mov     di, 1
                jmp     short loc_20C4E
; ---------------------------------------------------------------------------

loc_20C4C:                              ; ...
                xor     di, di

loc_20C4E:                              ; ...
                push    word ptr [bp+var_12+2]
                push    si
                les     bx, [bp+var_22]
                push    word ptr es:[bx+0Ch]
                push    0
                call    sub_23296
                or      di, di
                jnz     short loc_20C9A

loc_20C62:                              ; ...
                mov     [bp+var_1A], 1
                mov     eax, [bp+var_1E]
                mov     [bp+var_A], eax
                les     bx, [bp+var_22]
                mov     ax, es:[bx]
                mov     dx, es:[bx+2]
                sub     dh, dh
                mov     word ptr [bp+var_1E], ax
                mov     word ptr [bp+var_1E+2], dx
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_A]
                push    0
                call    sub_2285A
                cmp     [bp+var_1E], 0FFFFFFh
                jb      loc_20B84

loc_20C9A:                              ; ...
                cmp     [bp+var_1E], 0FFFFFFh
                jnb     loc_20D2C
                push    0
                push    0
                lea     ax, [bp+var_26]
                push    ss
                push    ax
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                lea     ax, [bp+var_32]
                push    ss
                push    ax
                call    sub_20976
                or      ax, ax
                jz      short loc_20D2C
                mov     eax, [bp+var_1E]
                mov     [bp+var_A], eax
                les     bx, [bp+var_22]
                mov     ax, es:[bx+4]
                mov     dx, es:[bx+6]
                sub     dh, dh
                mov     word ptr [bp+var_1E], ax
                mov     word ptr [bp+var_1E+2], dx
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_A]
                xor     ax, ax
                mov     [bp+var_1A], ax
                push    ax
                call    sub_2285A
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_A]
                call    sub_22244
                or      ax, ax
                jz      loc_20B67
                les     bx, ds:490h
                mov     eax, es:[bx+0Ah]
                mov     [bp+var_12], eax
                mov     eax, es:[bx+12h]
                mov     [bp+var_1E], eax
                mov     eax, es:[bx+0Eh]
                mov     [bp+var_A], eax
                mov     al, es:[bx+19h]
                mov     [bp+var_13], al
                jmp     loc_20B67
; ---------------------------------------------------------------------------

loc_20D26:                              ; ...
                mov     [bp+var_18], di
                jmp     loc_20C62
; ---------------------------------------------------------------------------

loc_20D2C:                              ; ...
                cmp     [bp+var_1E], 0FFFFFFh
                jb      loc_20FBE
                mov     al, [bp+arg_0]
                and     al, 1
                jz      loc_2106C
                mov     es, word ptr [bp+var_12+2]
                test    byte ptr es:[si+56h], 80h
                jnz     loc_21072
                push    es
                push    si
                push    large [bp+var_A]
                lea     ax, [bp+var_22]
                push    ss
                push    ax
                call    sub_22816
                mov     di, ax
                or      di, ax
                jnz     loc_21172
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_A]
                call    sub_2207E
                mov     [bp+var_E], ax
                mov     [bp+var_C], dx

loc_20D74:                              ; ...
                push    word ptr [bp+var_12+2]
                push    si
                lea     ax, [bp+var_1E]
                push    ss
                push    ax
                lea     ax, [bp+var_2E]
                push    ss
                push    ax
                call    sub_228A8
                mov     di, ax
                or      di, ax
                jnz     loc_210A1
                push    word ptr [bp+var_12+2]
                push    si
                mov     ax, [bp+var_16]
                add     ax, 14h
                push    ax
                lea     ax, [bp+var_2A]
                push    ss
                push    ax
                call    sub_2384C
                mov     [bp+var_18], ax
                or      ax, ax
                jnz     loc_21078
                cmp     [bp+var_1A], ax
                jz      short loc_20DF5
                mov     [bp+var_1A], ax
                cwd
                mov     bx, ax
                mov     [bp+var_C], dx
                les     di, [bp+var_2E]
                mov     ax, es:[di+8]
                mov     dx, es:[di+0Ah]
                les     di, [bp+var_22]
                xor     ax, es:[di+8]
                xor     dx, es:[di+0Ah]
                sub     dh, dh
                les     di, [bp+var_2E]
                xor     es:[di+8], ax
                xor     es:[di+0Ah], dx
                les     di, [bp+var_22]
                mov     ax, es:[di]
                mov     dx, es:[di+2]
                xor     ax, word ptr [bp+var_1E]
                xor     dx, word ptr [bp+var_1E+2]
                sub     dh, dh
                xor     es:[di], ax
                xor     es:[di+2], dx
                jmp     short loc_20E54
; ---------------------------------------------------------------------------

loc_20DF5:                              ; ...
                les     bx, [bp+var_2E]
                mov     ax, es:[bx+8]
                mov     dx, es:[bx+0Ah]
                xor     ax, word ptr [bp+var_A]
                xor     dx, word ptr [bp+var_A+2]
                sub     dh, dh
                xor     es:[bx+8], ax
                xor     es:[bx+0Ah], dx
                les     bx, [bp+var_22]
                mov     ax, es:[bx+4]
                mov     dx, es:[bx+6]
                xor     ax, word ptr [bp+var_1E]
                xor     dx, word ptr [bp+var_1E+2]
                sub     dh, dh
                xor     es:[bx+4], ax
                xor     es:[bx+6], dx
                mov     bx, [bp+var_E]
                mov     ax, [bp+var_C]
                or      ax, bx
                jz      short loc_20E54
                mov     es, [bp+var_C]
                cmp     dword ptr es:[bx+12h], 0FFFFFFh
                jb      short loc_20E4C
                mov     eax, [bp+var_1E]
                mov     es:[bx+12h], eax

loc_20E4C:                              ; ...
                xor     ax, ax
                cwd
                mov     bx, ax
                mov     [bp+var_C], dx

loc_20E54:                              ; ...
                mov     [bp+var_E], bx
                cmp     [bp+var_6], 0
                jnz     short loc_20E6E
                push    large [bp+var_26]
                push    [bp+var_16]
                call    sub_23C50
                mov     word ptr [bp+var_6], ax
                mov     word ptr [bp+var_6+2], dx

loc_20E6E:                              ; ...
                les     bx, [bp+var_2E]
                or      dword ptr es:[bx], 0FFFFFFh
                les     bx, [bp+var_2E]
                or      dword ptr es:[bx+4], 0FFFFFFh
                les     bx, [bp+var_2A]
                mov     ax, es:[bx+6]
                les     bx, [bp+var_2E]
                mov     es:[bx+0Ch], ax
                les     bx, [bp+var_2A]
                sub     al, al
                mov     ah, es:[bx+4]
                mov     dx, ax
                sub     cx, cx
                les     bx, [bp+var_2E]
                mov     [bp+var_38], cx
                mov     [bp+var_36], ax
                xor     cx, es:[bx+8]
                xor     dx, es:[bx+0Ah]
                and     dh, al
                xor     cx, [bp+var_38]
                xor     dx, ax
                mov     es:[bx+8], cx
                mov     es:[bx+0Ah], dx
                mov     ax, word ptr [bp+var_6]
                les     bx, [bp+var_2E]
                mov     es:[bx+0Eh], ax
                mov     ax, [bp+var_16]
                add     ax, 14h
                les     bx, [bp+var_2A]
                mov     es:[bx+8], ax
                mov     word ptr es:[bx+0Ah], 0
                mov     ax, [bp+var_16]
                les     bx, [bp+var_2A]
                mov     es:[bx+0Ch], ax
                mov     eax, [bp+var_2A]
                add     ax, 14h
                push    eax
                push    large [bp+var_26]
                push    [bp+var_16]
                call    sub_1FD94
                les     bx, [bp+var_2A]
                mov     word ptr es:[bx+0Eh], 0
                les     bx, [bp+var_2A]
                mov     word ptr es:[bx+10h], 0
                les     bx, [bp+var_2A]
                mov     word ptr es:[bx+12h], 0
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_A]
                push    1
                call    sub_2285A
                mov     eax, [bp+var_1E]
                mov     [bp+var_A], eax
                mov     eax, [bp+var_2E]
                mov     [bp+var_22], eax
                push    word ptr [bp+var_12+2]
                push    si
                les     bx, [bp+var_2A]
                push    word ptr es:[bx+6]
                mov     ax, 1
                mov     [bp+var_34], ax
                push    ax
                call    sub_23296
                cmp     dword ptr ds:494h, 0FFFFFFh
                jb      short loc_20F9D
                mov     ax, ds:4B4h
                sub     dx, dx
                cmp     word ptr [bp+var_6], ax
                jnz     short loc_20F9D
                cmp     word ptr [bp+var_6+2], dx
                jnz     short loc_20F9D
                cmp     [bp+var_13], 2
                jnz     short loc_20F9D
                mov     ax, ds:4A4h
                cmp     [bp+var_16], ax
                jnz     short loc_20F9D
                push    large [bp+var_26]
                push    43F9h
                push    49Ch
                push    [bp+var_16]
                call    sub_23CA4
                or      ax, ax
                jnz     short loc_20F9D
                push    word ptr [bp+var_12+2]
                push    si
                les     bx, [bp+var_2E]
                mov     ax, es:[bx+8]
                mov     dx, es:[bx+0Ah]
                sub     dh, dh
                push    dx
                push    ax
                call    sub_20A00
                or      ax, ax
                jnz     short loc_20FE9

loc_20F9D:                              ; ...
                sub     eax, eax
                mov     [bp+var_6], eax
                push    ax
                push    ax

loc_20FA6:                              ; ...
                lea     ax, [bp+var_26]
                push    ss
                push    ax
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                lea     ax, [bp+var_32]
                push    ss
                push    ax
                call    sub_20976
                or      ax, ax
                jnz     loc_20D74

loc_20FBE:                              ; ...
                mov     si, [bp+var_18]
                test    [bp+arg_0], 8
                jnz     loc_210A6
                push    large [bp+var_12]
                push    large [bp+var_1E]
                call    sub_22244
                or      ax, ax
                jz      loc_210A6
                mov     ax, ds:490h
                mov     dx, ds:492h
                mov     di, ax
                mov     [bp+var_C], dx
                jmp     loc_21130
; ---------------------------------------------------------------------------

loc_20FE9:                              ; ...
                mov     eax, [bp+var_A]
                mov     dx, word ptr [bp+var_A+2]
                mov     ds:494h, eax
                mov     ecx, [bp+var_12]
                mov     ds:498h, ecx
                push    ecx
                push    dx
                push    ax
                push    1
                call    sub_2285A
                les     bx, ds:490h
                mov     eax, es:[bx+0Ah]
                mov     [bp+var_12], eax
                mov     eax, es:[bx+0Eh]
                mov     [bp+var_A], eax
                mov     eax, es:[bx+12h]
                mov     [bp+var_1E], eax
                mov     al, es:[bx+19h]
                mov     [bp+var_13], al
                push    0
                push    0
                lea     ax, [bp+var_26]
                push    ss
                push    ax
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                lea     ax, [bp+var_32]
                push    ss
                push    ax
                call    sub_20976
                or      ax, ax
                jnz     loc_20B67
                mov     eax, [bp+var_A]
                mov     [bp+var_1E], eax
                push    large [bp+var_12]
                push    eax
                lea     ax, [bp+var_22]
                push    ss
                push    ax
                call    sub_22816
                mov     di, ax
                mov     [bp+var_18], ax
                or      di, ax
                jz      loc_20FBE
                jmp     loc_21172
; ---------------------------------------------------------------------------

loc_2106C:                              ; ...
                mov     ax, 3F3h
                jmp     loc_21174
; ---------------------------------------------------------------------------

loc_21072:                              ; ...
                mov     ax, 5
                jmp     loc_21174
; ---------------------------------------------------------------------------

loc_21078:                              ; ...
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_1E]
                push    0
                call    sub_2285A
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_1E]
                call    sub_22B78

loc_21090:                              ; ...
                push    word ptr [bp+var_12+2]
                push    si
                push    large [bp+var_A]
                push    [bp+var_34]
                call    sub_2285A
                jmp     loc_21148
; ---------------------------------------------------------------------------

loc_210A1:                              ; ...
                mov     [bp+var_18], di
                jmp     short loc_21090
; ---------------------------------------------------------------------------

loc_210A6:                              ; ...
                push    large [bp+var_12]
                push    large [bp+var_1E]
                call    sub_2207E
                mov     di, ax
                mov     [bp+var_C], dx
                or      dx, ax
                jnz     short loc_21130
                call    sub_21C6E
                mov     di, ax
                mov     [bp+var_C], dx
                or      dx, ax
                jnz     short loc_210CB
                mov     si, 0Eh
                jmp     short loc_21130
; ---------------------------------------------------------------------------

loc_210CB:                              ; ...
                mov     eax, [bp+var_12]
                mov     es, [bp+var_C]
                mov     es:[di+0Ah], eax
                mov     eax, [bp+var_1E]
                mov     es:[di+0Eh], eax
                les     bx, [bp+var_22]
                mov     ax, es:[bx+4]
                mov     dx, es:[bx+6]
                sub     dh, dh
                mov     es, [bp+var_C]
                mov     es:[di+12h], ax
                mov     es:[di+14h], dx
                les     bx, [bp+var_22]
                mov     ax, es:[bx+0Ch]
                mov     es, [bp+var_C]
                mov     es:[di+16h], ax
                les     bx, [bp+var_22]
                sub     ah, ah
                mov     al, es:[bx+0Bh]
                mov     es, [bp+var_C]
                mov     es:[di+18h], al
                mov     al, [bp+var_13]
                mov     es:[di+19h], al
                les     bx, [bp+var_22]
                test    word ptr es:[bx+2], 200h
                jz      short loc_21130
                mov     es, [bp+var_C]
                or      byte ptr es:[di+5], 1

loc_21130:                              ; ...
                push    large [bp+var_12]
                push    large [bp+var_1E]
                push    [bp+var_34]
                call    sub_2285A
                mov     [bp+var_18], si
                mov     ax, [bp+var_C]
                or      ax, di
                jnz     short loc_2114D

loc_21148:                              ; ...
                mov     di, [bp+var_18]
                jmp     short loc_21172
; ---------------------------------------------------------------------------

loc_2114D:                              ; ...
                mov     [bp+var_E], di
                mov     si, di
                jmp     short loc_2115C
; ---------------------------------------------------------------------------

loc_21154:                              ; ...
                mov     ax, [bp+arg_C]
                mov     si, di
                mov     [bp+var_C], ax

loc_2115C:                              ; ...
                mov     ax, [bp+var_C]
                push    ax
                push    si
                mov     di, ax
                call    sub_2203C
                les     bx, [bp+arg_2]
                mov     es:[bx], si
                mov     es:[bx+2], di
                xor     di, di

loc_21172:                              ; ...
                mov     ax, di

loc_21174:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Eh
sub_20AE4       endp

; ---------------------------------------------------------------------------
                push    bp
                mov     bp, sp
                push    di
                push    large dword ptr [bp+0Ah]
                call    sub_2091A
                or      ax, ax
                jz      short loc_2118E
                mov     ax, 3F2h
                jmp     short loc_211B5
; ---------------------------------------------------------------------------

loc_2118E:                              ; ...
                lea     ax, [bp+0Eh]
                push    ss
                push    ax
                call    sub_21E70
                mov     di, ax
                or      di, ax
                jnz     short loc_211B0
                push    large dword ptr [bp+0Eh]
                push    large dword ptr [bp+0Ah]
                push    large dword ptr [bp+6]
                push    word ptr [bp+4]
                call    sub_20AE4
                mov     di, ax

loc_211B0:                              ; ...
                call    sub_21E3C
                mov     ax, di

loc_211B5:                              ; ...
                pop     di
                leave
                retn    0Eh
; ---------------------------------------------------------------------------
                db 0B8h
                db 0F9h
                db  43h ; C
                db  55h ; U
                db  8Bh
                db 0ECh
                db  1Eh
                db  8Eh
                db 0D8h
                db  66h ; f
                db 0FFh
                db  76h ; v
                db    6
                db  66h ; f
                db 0FFh
                db  76h ; v
                db  0Ah
                db  66h ; f
                db 0FFh
                db  76h ; v
                db  0Eh
                db  6Ah ; j
                db    0
                db 0E8h
                db 0A6h
                db 0FFh
                db  99h
                db  1Fh
                db 0C9h
                db 0CBh
                db 0B8h
                db 0F9h
                db  43h ; C
                db  55h ; U
                db  8Bh
                db 0ECh
                db  56h ; V
                db  1Eh
                db  8Eh
                db 0D8h
                db  8Dh
                db  46h ; F
                db    6
                db  16h
                db  50h ; P
                db 0E8h
                db  86h
                db  0Ch
                db  8Bh
                db 0F0h
                db  0Bh
                db 0F0h
                db  74h ; t
                db    6
                db  81h
                db 0FEh
                db 0FAh
                db    3
                db  75h ; u
                db    9
                db  66h ; f
                db 0FFh
                db  76h ; v
                db    6
                db 0E8h
                db  6Dh ; m
                db  0Bh
                db  33h ; 3
                db 0F6h
                db 0E8h
                db  3Ah ; :
                db  0Ch
                db  8Bh
                db 0C6h
                db  99h
                db  1Fh
                db  5Eh ; ^
                db 0C9h
                db 0CBh
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2120A       proc near               ; ...

var_E           = dword ptr -0Eh
var_A           = dword ptr -0Ah
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h
arg_10          = dword ptr  14h

                enter   0Eh, 0
                push    di
                push    si
                mov     di, word ptr [bp+arg_10]
                mov     es, word ptr [bp+arg_10+2]
                mov     ax, es:[di+16h]
                les     bx, [bp+arg_0]
                mov     es:[bx], ax
                push    word ptr [bp+arg_10+2]
                push    di
                push    large [bp+arg_C]
                push    large [bp+arg_8]
                push    large [bp+arg_4]
                call    sub_212E2
                mov     si, ax
                cmp     si, 3F4h
                jnz     short loc_21245
                mov     es, word ptr [bp+arg_10+2]
                test    byte ptr es:[di+5], 1
                jnz     short loc_21248

loc_21245:                              ; ...
                jmp     loc_212DA
; ---------------------------------------------------------------------------

loc_21248:                              ; ...
                push    100h
                call    sub_219DA
                mov     [bp+var_4], dx
                or      dx, ax
                jnz     short loc_2125B
                mov     ax, 0Eh
                jmp     loc_212DC
; ---------------------------------------------------------------------------

loc_2125B:                              ; ...
                mov     [bp+var_2], 0
                mov     [bp+var_6], ax
                mov     di, ax

loc_21265:                              ; ...
                mov     [bp+var_E], 100h
                push    large [bp+arg_10]
                push    [bp+var_2]
                inc     [bp+var_2]
                push    [bp+var_4]
                push    di
                lea     ax, [bp+var_E]
                push    ss
                push    ax
                push    4
                call    sub_23DF6
                or      ax, ax
                jnz     short loc_212D0
                push    large [bp+arg_10]
                push    [bp+var_4]
                push    di
                lea     ax, [bp+var_A]
                push    ss
                push    ax
                push    4
                call    sub_20AE4
                or      ax, ax
                jnz     short loc_212D0
                les     bx, [bp+var_A]
                mov     ax, es:[bx+16h]
                les     bx, [bp+arg_0]
                mov     es:[bx], ax
                push    large [bp+var_A]
                push    large [bp+arg_C]
                push    large [bp+arg_8]
                push    large [bp+arg_4]
                call    sub_212E2
                mov     si, ax
                push    large [bp+var_A]
                call    sub_21D6A
                cmp     si, 3F4h
                jz      short loc_21265
                jmp     short loc_212D3
; ---------------------------------------------------------------------------

loc_212D0:                              ; ...
                mov     si, 3F4h

loc_212D3:                              ; ...
                push    [bp+var_4]
                push    di
                call    sub_1FE3B

loc_212DA:                              ; ...
                mov     ax, si

loc_212DC:                              ; ...
                pop     si
                pop     di
                leave
                retn    14h
sub_2120A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_212E2       proc near               ; ...

var_C           = dword ptr -0Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                enter   0Ch, 0
                push    di
                push    si
                les     bx, [bp+arg_C]
                cmp     word ptr es:[bx+16h], 0FFFFh
                jnz     short loc_212F8
                mov     ax, 3F4h
                jmp     loc_213BF
; ---------------------------------------------------------------------------

loc_212F8:                              ; ...
                push    large dword ptr es:[bx+0Ah]
                push    word ptr es:[bx+16h]
                mov     al, es:[bx+18h]
                push    ax
                lea     ax, [bp+var_C]
                push    ss
                push    ax
                call    sub_232DA
                mov     si, ax
                or      si, ax
                jnz     loc_213BD
                cmp     [bp+arg_8], 0
                jnz     short loc_21321
                xor     si, si
                jmp     short loc_21330
; ---------------------------------------------------------------------------

loc_21321:                              ; ...
                les     di, [bp+arg_8]
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                dec     cx
                mov     si, cx

loc_21330:                              ; ...
                les     bx, [bp+var_C]
                mov     ax, es:[bx+0Ch]
                add     ax, es:[bx+10h]
                add     ax, bx
                add     ax, 14h
                mov     cx, ax
                mov     [bp+var_2], es
                mov     ax, es:[bx+0Eh]
                mov     [bp+var_8], ax
                or      ax, ax
                jz      short loc_213A9
                mov     [bp+var_4], cx
                mov     [bp+var_6], si
                mov     si, cx
                mov     di, [bp+var_6]

loc_2135B:                              ; ...
                cmp     es:[si+8], di
                jnz     short loc_21376
                or      di, di
                jz      short loc_2138D
                push    large [bp+arg_8]
                lea     ax, [si+0Ch]
                push    es
                push    ax
                push    di
                call    sub_23CA4
                or      ax, ax
                jz      short loc_2138D

loc_21376:                              ; ...
                mov     es, [bp+var_2]
                mov     ax, es:[si+8]
                add     ax, es:[si+0Ah]
                add     ax, 0Ch
                add     si, ax
                dec     [bp+var_8]
                jnz     short loc_2135B
                jmp     short loc_213A9
; ---------------------------------------------------------------------------

loc_2138D:                              ; ...
                mov     eax, [bp+var_C]
                les     bx, [bp+arg_4]
                mov     es:[bx], eax
                les     bx, [bp+arg_0]
                mov     ax, [bp+var_2]
                mov     es:[bx], si
                mov     es:[bx+2], ax
                xor     ax, ax
                jmp     short loc_213BF
; ---------------------------------------------------------------------------

loc_213A9:                              ; ...
                les     bx, [bp+arg_C]
                push    large dword ptr es:[bx+0Ah]
                push    word ptr es:[bx+16h]
                push    0
                call    sub_23296
                mov     si, 3F4h

loc_213BD:                              ; ...
                mov     ax, si

loc_213BF:                              ; ...
                pop     si
                pop     di
                leave
                retn    10h
sub_212E2       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_213C6       proc near               ; ...

var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = word ptr  0Ch
arg_A           = word ptr  0Eh
arg_C           = dword ptr  10h
arg_10          = dword ptr  14h
arg_14          = dword ptr  18h

                enter   2, 0
                push    di
                push    si
                mov     bx, [bp+arg_8]
                mov     di, word ptr [bp+arg_14]
                mov     ax, [bp+arg_A]
                or      ax, bx
                jz      short loc_213E7
                mov     es, word ptr [bp+arg_14+2]
                mov     eax, es:[di]
                mov     es, [bp+arg_A]
                mov     es:[bx], eax

loc_213E7:                              ; ...
                mov     es, word ptr [bp+arg_14+2]
                mov     si, es:[di+0Ah]
                cmp     dword ptr es:[di], 1
                jnz     short loc_213F6
                inc     si

loc_213F6:                              ; ...
                cmp     [bp+arg_4], 0
                jz      short loc_2144D
                sub     ax, ax
                les     bx, [bp+arg_0]
                cmp     es:[bx+2], ax
                ja      short loc_2141C
                jb      short loc_2140F
                cmp     es:[bx], si
                jnb     short loc_2141C

loc_2140F:                              ; ...
                mov     es:[bx], si
                mov     es:[bx+2], ax

loc_21416:                              ; ...
                mov     ax, 0EAh
                jmp     loc_214D4
; ---------------------------------------------------------------------------

loc_2141C:                              ; ...
                push    large [bp+arg_4]
                mov     es, word ptr [bp+arg_14+2]
                mov     ax, es:[di+8]
                add     ax, di
                add     ax, 0Ch
                push    es
                push    ax
                push    word ptr es:[di+0Ah]
                call    sub_1FD94
                mov     es, word ptr [bp+arg_14+2]
                cmp     dword ptr es:[di], 1
                jnz     short loc_2144D
                mov     bx, es:[di+0Ah]
                add     bx, word ptr [bp+arg_4]
                mov     es, word ptr [bp+arg_4+2]
                mov     byte ptr es:[bx], 0

loc_2144D:                              ; ...
                cmp     [bp+arg_0], 0
                jz      short loc_21460
                les     bx, [bp+arg_0]
                mov     es:[bx], si
                mov     word ptr es:[bx+2], 0

loc_21460:                              ; ...
                cmp     [bp+arg_10], 0
                jz      short loc_214D2
                mov     [bp+var_2], 0
                mov     cx, word ptr [bp+arg_C]
                mov     bx, cx
                mov     es, word ptr [bp+arg_C+2]
                mov     ax, es
                mov     es, word ptr [bp+arg_14+2]
                mov     dx, es:[di+8]
                sub     si, si
                mov     es, ax
                cmp     si, es:[bx+2]
                jb      short loc_214A2
                ja      short loc_2148E
                cmp     dx, es:[bx]
                jb      short loc_214A2

loc_2148E:                              ; ...
                mov     [bp+var_2], 0EAh
                cmp     dword ptr es:[bx], 0
                jz      loc_21416
                mov     si, es:[bx]
                dec     si
                jmp     short loc_214A9
; ---------------------------------------------------------------------------

loc_214A2:                              ; ...
                les     bx, [bp+arg_14]
                mov     si, es:[bx+8]

loc_214A9:                              ; ...
                push    large [bp+arg_10]
                mov     eax, [bp+arg_14]
                add     ax, 0Ch
                push    eax
                push    si
                call    sub_1FD94
                les     bx, [bp+arg_10]
                mov     byte ptr es:[bx+si], 0
                les     bx, [bp+arg_C]
                mov     es:[bx], si
                mov     word ptr es:[bx+2], 0
                mov     ax, [bp+var_2]
                jmp     short loc_214D4
; ---------------------------------------------------------------------------

loc_214D2:                              ; ...
                xor     ax, ax

loc_214D4:                              ; ...
                pop     si
                pop     di
                leave
                retn    1Ch
sub_213C6       endp

; ---------------------------------------------------------------------------
                mov     ax, 43F9h
                enter   10h, 0
                push    di
                push    ds
                mov     ds, ax
                assume ds:nothing
                cmp     dword ptr [bp+1Ah], 0
                jnz     short loc_214F9
                cmp     dword ptr [bp+16h], 0
                jz      short loc_214F9
                mov     ax, 57h ; 'W'
                jmp     loc_215EF
; ---------------------------------------------------------------------------

loc_214F9:                              ; ...
                mov     dword ptr [bp-8], 0
                cmp     dword ptr [bp+1Ah], 0
                jz      short loc_21513
                les     bx, [bp+1Ah]
                mov     eax, es:[bx]
                mov     [bp-8], eax

loc_21513:                              ; ...
                mov     di, [bp+12h]
                mov     ax, [bp+14h]
                or      ax, di
                jz      short loc_21528
                mov     es, word ptr [bp+14h]
                mov     dword ptr es:[di], 0

loc_21528:                              ; ...
                lea     ax, [bp+6]
                push    ss
                push    ax
                call    sub_21E70
                mov     [bp-2], ax
                or      ax, ax
                jnz     loc_215E9
                push    large dword ptr [bp+6]
                push    large dword ptr [bp+0Ah]
                lea     ax, [bp-10h]
                push    ss
                push    ax
                lea     ax, [bp-0Ch]
                push    ss
                push    ax
                lea     ax, [bp-4]
                push    ss
                push    ax
                call    sub_2120A
                mov     [bp-2], ax
                or      ax, ax
                jnz     short loc_2158B
                push    large dword ptr [bp+6]
                push    large dword ptr [bp-0Ch]
                push    ax
                push    ax
                push    ax
                push    ax
                push    word ptr [bp+14h]
                push    di
                push    large dword ptr [bp+16h]
                lea     ax, [bp-8]
                push    ss
                push    ax
                call    sub_213C6
                mov     [bp-2], ax
                les     bx, [bp+6]
                push    large dword ptr es:[bx+0Ah]
                push    word ptr [bp-4]
                push    0
                call    sub_23296
                jmp     short loc_215D7
; ---------------------------------------------------------------------------

loc_2158B:                              ; ...
                cmp     ax, 3F4h
                jnz     short loc_215D7
                mov     bx, [bp+0Ah]
                mov     ax, [bp+0Ch]
                or      ax, bx
                jz      short loc_215A3
                mov     es, word ptr [bp+0Ch]
                cmp     byte ptr es:[bx], 0
                jnz     short loc_215D7

loc_215A3:                              ; ...
                mov     ax, [bp+14h]
                or      ax, di
                jz      short loc_215B5
                mov     es, word ptr [bp+14h]
                mov     dword ptr es:[di], 1

loc_215B5:                              ; ...
                cmp     dword ptr [bp+16h], 0
                jz      short loc_215CA
                cmp     dword ptr [bp-8], 0
                jz      short loc_215CA
                les     bx, [bp+16h]
                mov     byte ptr es:[bx], 0

loc_215CA:                              ; ...
                mov     dword ptr [bp-8], 1
                mov     word ptr [bp-2], 0

loc_215D7:                              ; ...
                cmp     dword ptr [bp+1Ah], 0
                jz      short loc_215E9
                mov     eax, [bp-8]
                les     bx, [bp+1Ah]
                mov     es:[bx], eax

loc_215E9:                              ; ...
                call    sub_21E3C
                mov     ax, [bp-2]

loc_215EF:                              ; ...
                cwd
                pop     ds
                assume ds:nothing
                pop     di
                leave
                retf

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_215F4       proc near               ; ...

var_12          = dword ptr -12h
var_E           = dword ptr -0Eh
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_A           = dword ptr  0Eh

                enter   12h, 0
                push    di
                push    si
                mov     di, word ptr [bp+arg_A]
                push    word ptr [bp+arg_A+2]
                push    di
                push    large [bp+arg_4+2]
                push    word ptr [bp+arg_4]
                lea     ax, [bp+var_A]
                push    ss
                push    ax
                call    sub_216E4
                mov     [bp+var_4], ax
                mov     es, word ptr [bp+arg_A+2]
                mov     ax, es:[di+16h]
                les     bx, [bp+arg_0]
                mov     es:[bx], ax
                cmp     [bp+var_4], 103h
                jnz     short loc_21631
                mov     es, word ptr [bp+arg_A+2]
                test    byte ptr es:[di+5], 1
                jnz     short loc_21634

loc_21631:                              ; ...
                jmp     loc_216DA
; ---------------------------------------------------------------------------

loc_21634:                              ; ...
                push    100h
                call    sub_219DA
                mov     [bp+var_8], ax
                mov     [bp+var_6], dx
                or      dx, ax
                jnz     short loc_2164A
                mov     ax, 0Eh
                jmp     loc_216DD
; ---------------------------------------------------------------------------

loc_2164A:                              ; ...
                mov     [bp+var_2], 0
                mov     di, ax
                cmp     [bp+var_4], 103h
                jnz     short loc_216D3
                mov     si, [bp+0Ch]

loc_2165B:                              ; ...
                cmp     [bp+var_A], si
                ja      short loc_216D3
                sub     si, [bp+var_A]
                mov     [bp+var_12], 100h
                push    large [bp+arg_A]
                push    [bp+var_2]
                inc     [bp+var_2]
                push    [bp+var_6]
                push    di
                lea     ax, [bp+var_12]
                push    ss
                push    ax
                push    4
                call    sub_23DF6
                or      ax, ax
                jnz     short loc_216CE
                push    large [bp+arg_A]
                push    [bp+var_6]
                push    di
                lea     ax, [bp+var_E]
                push    ss
                push    ax
                push    4
                call    sub_20AE4
                or      ax, ax
                jnz     short loc_216CE
                les     bx, [bp+var_E]
                mov     ax, es:[bx+16h]
                les     bx, [bp+arg_0]
                mov     es:[bx], ax
                push    large [bp+var_E]
                push    si
                push    large [bp+arg_4]
                lea     ax, [bp+var_A]
                push    ss
                push    ax
                call    sub_216E4
                mov     [bp+var_4], ax
                push    large [bp+var_E]
                call    sub_21D6A
                cmp     [bp+var_4], 103h
                jz      short loc_2165B
                jmp     short loc_216D3
; ---------------------------------------------------------------------------

loc_216CE:                              ; ...
                mov     [bp+var_4], 103h

loc_216D3:                              ; ...
                push    [bp+var_6]
                push    di
                call    sub_1FE3B

loc_216DA:                              ; ...
                mov     ax, [bp+var_4]

loc_216DD:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Eh
sub_215F4       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_216E4       proc near               ; ...

var_8           = dword ptr -8
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = word ptr  0Ch
arg_A           = word ptr  0Eh
arg_C           = word ptr  10h

                enter   8, 0
                push    di
                push    si
                mov     si, [bp+arg_A]
                les     bx, [bp+arg_0]
                mov     word ptr es:[bx], 0
                mov     es, [bp+arg_C]
                cmp     word ptr es:[si+16h], 0FFFFh
                jnz     short loc_21705
                mov     ax, 103h
                jmp     loc_2178E
; ---------------------------------------------------------------------------

loc_21705:                              ; ...
                push    large dword ptr es:[si+0Ah]
                push    word ptr es:[si+16h]
                mov     al, es:[si+18h]
                push    ax
                lea     ax, [bp+var_8]
                push    ss
                push    ax
                call    sub_232DA
                mov     di, ax
                or      di, ax
                jnz     short loc_2178C
                les     bx, [bp+var_8]
                mov     ax, es:[bx+0Eh]
                les     bx, [bp+arg_0]
                mov     es:[bx], ax
                mov     cx, [bp+arg_8]
                les     bx, [bp+var_8]
                cmp     es:[bx+0Eh], cx
                ja      short loc_21750
                mov     es, [bp+arg_C]
                push    large dword ptr es:[si+0Ah]
                push    word ptr es:[si+16h]
                push    0
                call    sub_23296
                mov     di, 103h
                jmp     short loc_2178C
; ---------------------------------------------------------------------------

loc_21750:                              ; ...
                mov     si, bx
                mov     ax, es:[si+0Ch]
                add     ax, es:[si+10h]
                add     ax, bx
                add     ax, 14h
                mov     bx, ax
                mov     [bp+var_2], es
                jmp     short loc_21776
; ---------------------------------------------------------------------------

loc_21766:                              ; ...
                mov     es, [bp+var_2]
                mov     ax, es:[bx+8]
                add     ax, es:[bx+0Ah]
                add     ax, 0Ch
                add     bx, ax

loc_21776:                              ; ...
                mov     ax, cx
                dec     cx
                or      ax, ax
                jnz     short loc_21766
                les     si, [bp+arg_4]
                mov     ax, [bp+var_2]
                mov     es:[si], bx
                mov     es:[si+2], ax
                xor     di, di

loc_2178C:                              ; ...
                mov     ax, di

loc_2178E:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Eh
sub_216E4       endp

; ---------------------------------------------------------------------------
                mov     ax, 43F9h
                enter   6, 0
                push    si
                push    ds
                mov     ds, ax
                assume ds:nothing
                cmp     dword ptr [bp+22h], 0
                jnz     short loc_217B4
                cmp     dword ptr [bp+1Eh], 0
                jz      short loc_217B4
                mov     ax, 57h ; 'W'

loc_217B0:                              ; ...
                xor     dx, dx
                jmp     short loc_2181E
; ---------------------------------------------------------------------------

loc_217B4:                              ; ...
                cmp     word ptr [bp+0Ch], 0
                jz      short loc_217BF
                mov     ax, 103h
                jmp     short loc_217B0
; ---------------------------------------------------------------------------

loc_217BF:                              ; ...
                lea     ax, [bp+6]
                push    ss
                push    ax
                call    sub_21E70
                mov     si, ax
                or      si, ax
                jnz     short loc_21818
                push    large dword ptr [bp+6]
                push    word ptr [bp+0Ah]
                lea     ax, [bp-6]
                push    ss
                push    ax
                lea     ax, [bp-2]
                push    ss
                push    ax
                call    sub_215F4
                mov     si, ax
                or      si, ax
                jnz     short loc_21818
                push    large dword ptr [bp+6]
                push    large dword ptr [bp-6]
                push    large dword ptr [bp+0Eh]
                push    large dword ptr [bp+12h]
                push    large dword ptr [bp+1Ah]
                push    large dword ptr [bp+1Eh]
                push    large dword ptr [bp+22h]
                call    sub_213C6
                mov     si, ax
                les     bx, [bp+6]
                push    large dword ptr es:[bx+0Ah]
                push    word ptr [bp-2]
                push    0
                call    sub_23296

loc_21818:                              ; ...
                call    sub_21E3C
                mov     ax, si
                cwd

loc_2181E:                              ; ...
                pop     ds
                assume ds:nothing
                pop     si
                leave
                retf
; ---------------------------------------------------------------------------
                db 0B8h
                db 0F9h
                db  43h ; C
                db 0C8h
                db  1Eh
                db    0
                db    0
                db  57h ; W
                db  56h ; V
                db  1Eh
                db  8Eh
                db 0D8h
                db  8Dh
                db  46h ; F
                db    6
                db  16h
                db  50h ; P
                db 0E8h
                db  3Ah ; :
                db    6
                db  8Bh
                db 0F8h
                db  0Bh
                db 0F8h
                db  0Fh
                db  85h
                db  90h
                db    1
                db  66h ; f
                db  83h
                db  7Eh ; ~
                db  22h ; "
                db    0
                db  75h ; u
                db  10h
                db  66h ; f
                db  83h
                db  7Eh ; ~
                db  26h ; &
                db    0
                db  75h ; u
                db    9
                db  66h ; f
                db  83h
                db  7Eh ; ~
                db  2Ah ; *
                db    0
                db  0Fh
                db  84h
                db 0E6h
                db    0
                db  33h ; 3
                db 0F6h
                db  66h ; f
                db  2Bh ; +
                db 0C0h
                db  66h ; f
                db  89h
                db  46h ; F
                db 0FCh
                db  66h ; f
                db  89h
                db  46h ; F
                db 0F8h
                db 0EBh
                db  6Eh ; n
; ---------------------------------------------------------------------------

loc_21864:                              ; ...
                inc     si
                les     bx, [bp-12h]
                sub     dx, dx
                mov     ax, es:[bx+8]
                mov     [bp-1Eh], ax
                mov     [bp-1Ch], dx
                cmp     dx, [bp-2]
                jb      short loc_21889
                ja      short loc_21880
                cmp     ax, [bp-4]
                jbe     short loc_21889

loc_21880:                              ; ...
                mov     dx, [bp-1Ch]
                mov     [bp-4], ax
                mov     [bp-2], dx

loc_21889:                              ; ...
                push    large dword ptr [bp+6]
                push    es
                push    bx
                push    0
                push    0
                push    0
                push    0
                push    0
                push    0
                push    0
                push    0
                lea     ax, [bp-1Ah]
                push    ss
                push    ax
                call    sub_213C6
                mov     di, ax
                les     bx, [bp+6]
                push    large dword ptr es:[bx+0Ah]
                push    word ptr [bp-0Eh]
                push    0
                call    sub_23296
; ---------------------------------------------------------------------------
                db  0Bh

; =============== S U B R O U T I N E =======================================


sub_218BA       proc near               ; ...
                dec     word ptr [bx]
                test    [bx], cx
                add     [bp-75h], sp
                inc     si
                out     8Bh, al         ; DMA page register 74LS612:
                                        ; Channel 5 (address bits 17-23)
                push    si
                call    near ptr byte_24496+0D98h
                inc     si
                clc
                jnb     short loc_218D2
                mov     [bp-8], ax
                mov     [bp-6], dx

loc_218D2:                              ; ...
                push    large dword ptr [bp+6]
                push    si
                lea     ax, [bp-12h]    ; ...
sub_218BA       endp ; sp-analysis failed

                push    ss
                push    ax
                lea     ax, [bp-0Eh]
                push    ss
                push    ax
                call    sub_215F4
                mov     di, ax
                or      di, ax
                jz      loc_21864
                mov     [bp-0Ah], di
                mov     [bp-0Ch], si
                cmp     di, 103h
                jnz     short loc_2193B
                mov     ecx, [bp+22h]
                or      ecx, ecx
                jz      short loc_2190F
                mov     bx, cx
                mov     es, word ptr [bp+24h]
                mov     es:[bx], si
                mov     word ptr es:[bx+2], 0

loc_2190F:                              ; ...
                mov     bx, [bp+26h]
                mov     ax, [bp+28h]
                or      ax, bx
                jz      short loc_21924
                mov     eax, [bp-4]
                mov     es, word ptr [bp+28h]
                mov     es:[bx], eax

loc_21924:                              ; ...
                mov     bx, [bp+2Ah]
                mov     ax, [bp+2Ch]
                or      ax, bx
                jz      short loc_21939
                mov     eax, [bp-8]
                mov     es, word ptr [bp+2Ch]
                mov     es:[bx], eax

loc_21939:                              ; ...
                xor     di, di

loc_2193B:                              ; ...
                cmp     dword ptr [bp+16h], 0
                jnz     short loc_2194B
                cmp     dword ptr [bp+1Ah], 0
                jz      loc_219CE

loc_2194B:                              ; ...
                xor     si, si
                sub     eax, eax
                mov     [bp-4], eax
                mov     [bp-16h], eax

loc_21958:                              ; ...
                push    large dword ptr [bp+6]
                push    si
                push    0
                push    0
                lea     ax, [bp-16h]
                push    ss
                push    ax
                push    0
                call    sub_23DF6
                mov     di, ax
                or      di, ax
                jz      short loc_21977
                cmp     di, 0EAh
                jnz     short loc_21997

loc_21977:                              ; ...
                inc     si
                cmp     dword ptr [bp-16h], 0
                jz      short loc_21958
                mov     eax, [bp-16h]
                inc     eax
                cmp     eax, [bp-4]
                jbe     short loc_21958
                mov     eax, [bp-16h]
                inc     eax
                mov     [bp-4], eax
                jmp     short loc_21958
; ---------------------------------------------------------------------------

loc_21997:                              ; ...
                mov     [bp-0Ah], di
                cmp     di, 103h
                jnz     short loc_219CE
                mov     ecx, [bp+16h]
                or      ecx, ecx
                jz      short loc_219B7
                mov     bx, cx
                mov     es, word ptr [bp+18h]
                mov     es:[bx], si
                mov     word ptr es:[bx+2], 0

loc_219B7:                              ; ...
                mov     bx, [bp+1Ah]
                mov     ax, [bp+1Ch]
                or      ax, bx
                jz      short loc_219CC
                mov     eax, [bp-4]
                mov     es, word ptr [bp+1Ch]
                mov     es:[bx], eax

loc_219CC:                              ; ...
                xor     di, di

loc_219CE:                              ; ...
                call    sub_21E3C
                mov     ax, di
                cwd
                pop     ds
                pop     si
                pop     di
                leave
                retf
; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_219DA       proc near               ; ...

var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4

                enter   6, 0
                push    di
                mov     ax, [bp+arg_0]
                mov     [bp+var_2], ax
                push    ax
                call    sub_1FE14
                mov     [bp+var_4], dx
                or      dx, ax
                jnz     short loc_21A28
                mov     di, [bp+var_2]
                push    1ED8h
                call    sub_206EA
                push    di
                call    sub_1FE14
                mov     [bp+var_4], dx
                or      dx, ax
                jnz     short loc_21A28
                push    1ED8h
                call    sub_206EA
                push    di
                call    sub_1FE14
                mov     [bp+var_4], dx
                or      dx, ax
                jnz     short loc_21A28
                push    1C6Eh
                call    sub_206EA
                push    1ED8h
                call    sub_206EA
                push    di
                call    sub_1FE14
                mov     [bp+var_4], dx

loc_21A28:                              ; ...
                mov     dx, [bp+var_4]
                pop     di
                leave
                retn    2
sub_219DA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21A30       proc near               ; ...

var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8

                enter   6, 0
                push    di
                mov     di, [bp+arg_2]
                push    [bp+arg_4]
                push    di
                mov     ax, [bp+arg_0]
                mov     [bp+var_2], ax
                push    ax
                call    sub_1FE4D
                mov     [bp+var_4], dx
                or      dx, ax
                jnz     short loc_21A94
                push    1ED8h
                call    sub_206EA
                push    [bp+arg_4]
                push    di
                push    [bp+var_2]
                call    sub_1FE4D
                mov     [bp+var_4], dx
                or      dx, ax
                jnz     short loc_21A94
                push    1ED8h
                call    sub_206EA
                push    [bp+arg_4]
                push    di
                push    [bp+var_2]
                call    sub_1FE4D
                mov     [bp+var_4], dx
                or      dx, ax
                jnz     short loc_21A94
                push    1C6Eh
                call    sub_206EA
                push    1ED8h
                call    sub_206EA
                push    [bp+arg_4]
                push    di
                push    [bp+var_2]
                call    sub_1FE4D
                mov     [bp+var_4], dx

loc_21A94:                              ; ...
                mov     dx, [bp+var_4]
                pop     di
                leave
                retn    6
sub_21A30       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21A9C       proc near               ; ...

var_78          = word ptr -78h
var_76          = word ptr -76h
var_74          = dword ptr -74h
var_70          = word ptr -70h
var_6E          = dword ptr -6Eh
var_6A          = word ptr -6Ah
var_68          = word ptr -68h
var_66          = word ptr -66h
var_64          = word ptr -64h
var_62          = word ptr -62h
var_60          = byte ptr -60h
var_5F          = byte ptr -5Fh
var_5E          = word ptr -5Eh
var_5C          = word ptr -5Ch
var_5A          = word ptr -5Ah
var_58          = word ptr -58h
var_56          = word ptr -56h
var_54          = word ptr -54h
var_52          = word ptr -52h
var_50          = word ptr -50h
var_4E          = word ptr -4Eh
var_4C          = dword ptr -4Ch
var_48          = word ptr -48h
var_46          = dword ptr -46h
var_42          = word ptr -42h
var_40          = word ptr -40h
var_3E          = word ptr -3Eh
var_3C          = word ptr -3Ch
var_3A          = word ptr -3Ah
var_38          = byte ptr -38h
var_37          = byte ptr -37h
var_36          = word ptr -36h
var_34          = word ptr -34h
var_32          = word ptr -32h
var_30          = word ptr -30h
var_2E          = word ptr -2Eh
var_2C          = word ptr -2Ch
var_2A          = word ptr -2Ah
var_28          = word ptr -28h
var_26          = word ptr -26h
var_24          = dword ptr -24h
var_20          = word ptr -20h
var_1E          = dword ptr -1Eh
var_1A          = word ptr -1Ah
var_18          = word ptr -18h
var_16          = word ptr -16h
var_14          = word ptr -14h
var_12          = word ptr -12h
var_10          = byte ptr -10h
var_F           = byte ptr -0Fh
var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   78h, 0
                push    di
                push    si
                sub     eax, eax
                mov     [bp+var_6E], eax
                mov     [bp+var_5F], 2
                mov     [bp+var_5C], ax
                mov     [bp+var_5E], ax
                mov     [bp+var_58], ax
                mov     [bp+var_5A], ax
                mov     eax, 25h ; '%'
                mov     [bp+var_74], eax
                mov     [bp+var_24], eax
                sub     eax, eax
                mov     [bp+var_1E], eax
                mov     [bp+var_F], 3
                mov     [bp+var_C], ax
                mov     [bp+var_E], ax
                mov     [bp+var_8], ax
                mov     [bp+var_A], ax
                mov     ax, 4B48h
                mov     [bp+var_78], ax
                mov     [bp+var_28], ax
                mov     [bp+var_50], ax
                mov     [bp+var_4C], 5
                sub     eax, eax
                mov     [bp+var_46], eax
                mov     [bp+var_76], ax
                mov     [bp+var_70], ax
                mov     [bp+var_62], ax
                mov     [bp+var_26], ax
                mov     [bp+var_20], ax
                mov     [bp+var_12], ax
                mov     [bp+var_4E], ax
                mov     [bp+var_48], ax
                mov     [bp+var_3A], ax
                mov     [bp+var_60], al
                mov     [bp+var_10], al
                mov     [bp+var_38], al
                mov     [bp+var_37], al
                mov     [bp+var_34], ax
                mov     [bp+var_36], ax
                mov     [bp+var_30], ax
                mov     [bp+var_32], ax
                mov     ax, 0FFFFh
                mov     [bp+var_56], ax
                mov     [bp+var_6], ax
                mov     [bp+var_2E], ax
                cwd
                mov     [bp+var_6A], ax
                mov     [bp+var_68], dx
                mov     [bp+var_66], ax
                mov     [bp+var_64], dx
                mov     [bp+var_54], ax
                mov     [bp+var_52], dx
                mov     [bp+var_1A], ax
                mov     [bp+var_18], dx
                mov     [bp+var_16], ax
                mov     [bp+var_14], dx
                mov     [bp+var_4], ax
                mov     [bp+var_2], dx
                mov     [bp+var_42], ax
                mov     [bp+var_40], dx
                mov     [bp+var_3E], ax
                mov     [bp+var_3C], dx
                mov     [bp+var_2C], ax
                mov     [bp+var_2A], dx
                push    ds
                mov     di, 3D0h
                lea     si, [bp+var_78]
                push    ds
                pop     es
                push    ss
                pop     ds
                mov     cx, 14h
                rep movsw
                pop     ds
                push    ds
                mov     di, 3F8h
                lea     si, [bp+var_28]
                push    ds
                pop     es
                push    ss
                pop     ds
                mov     cx, 14h
                rep movsw
                pop     ds
                push    ds
                mov     di, 420h
                lea     si, [bp+var_50]
                push    ds
                pop     es
                push    ss
                pop     ds
                mov     cx, 14h
                rep movsw
                pop     ds
                push    ds
                push    49Ch
                push    word ptr ds:4A4h
                call    sub_23C50
                mov     ds:4B4h, ax
                push    ds
                push    4A6h
                push    word ptr ds:4B0h
                call    sub_23C50
                mov     ds:4B2h, ax
                pop     si
                pop     di
                leave
                retn
sub_21A9C       endp

; ---------------------------------------------------------------------------

loc_21BC2:                              ; ...
                enter   4, 0
                push    500h
                call    sub_219DA
                mov     ds:460h, ax
                mov     ds:462h, dx
                mov     ax, dx
                or      ax, ds:460h
; ---------------------------------------------------------------------------
                db  75h ; u

; =============== S U B R O U T I N E =======================================


sub_21BDA       proc near               ; ...
                add     al, 33h ; '3'
                ror     cl, 0C3h
                mov     cx, 20h ; ' '
                mov     ax, ds:460h
                mov     bx, ax
                mov     [bp-2], dx
                mov     es, word ptr [bp-2]

loc_21BED:                              ; ...
                mov     word ptr es:[bx], 4B48h
                mov     dword ptr es:[bx+4], 0Ch
                mov     word ptr es:[bx+8], 0
                add     bx, 28h ; '('
                loop    loc_21BED
                mov     ax, 1
                leave
                retn
sub_21BDA       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21C0C       proc near               ; ...

var_6           = word ptr -6

                enter   8, 0
                push    di
                push    si
                mov     ax, ds:464h
                mov     dx, ds:466h
                mov     si, ax
                mov     [bp+var_6], dx
                or      dx, ax
                jz      short loc_21C48

loc_21C22:                              ; ...
                mov     es, [bp+var_6]
                mov     di, si
                mov     ax, es:[si+1Ah]
                mov     dx, es:[si+1Ch]
                mov     si, ax
                mov     [bp+var_6], dx
                push    es
                push    di
                call    sub_1FE3B
                mov     ax, [bp+var_6]
                cmp     si, ds:464h
                jnz     short loc_21C22
                cmp     ax, ds:466h
                jnz     short loc_21C22

loc_21C48:                              ; ...
                mov     dword ptr ds:464h, 0
                cmp     dword ptr ds:460h, 0
                jz      short loc_21C6A
                push    large [dword ptr ds:460h]
                call    sub_1FE3B
                mov     dword ptr ds:460h, 0

loc_21C6A:                              ; ...
                pop     si
                pop     di
                leave
                retn
sub_21C0C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21C6E       proc near               ; ...

var_2           = word ptr -2

                enter   4, 0
                push    si
                cmp     dword ptr ds:460h, 0
                jz      short loc_21C99
                mov     cx, 20h ; ' '
                mov     ax, ds:460h
                mov     dx, ds:462h
                mov     bx, ax
                mov     [bp+var_2], dx

loc_21C8A:                              ; ...
                mov     es, [bp+var_2]
                test    byte ptr es:[bx+4], 4
                jnz     short loc_21CDC
                add     bx, 28h ; '('
                loop    loc_21C8A

loc_21C99:                              ; ...
                push    28h ; '('
                call    sub_219DA
                mov     si, ax
                mov     [bp+var_2], dx
                or      dx, ax
                jz      loc_21D3B
                mov     es, [bp+var_2]
                mov     word ptr es:[si], 4B48h
                sub     eax, eax
                mov     es:[si+4], eax
                mov     es:[si+8], ax
                cmp     dword ptr ds:464h, 0
                jnz     short loc_21CE9
                mov     ax, [bp+var_2]
                mov     es, ax
                mov     es:[si+1Eh], si
                mov     es:[si+20h], ax
                mov     es:[si+1Ah], si
                mov     es:[si+1Ch], ax
                jmp     short loc_21D31
; ---------------------------------------------------------------------------

loc_21CDC:                              ; ...
                and     word ptr es:[bx+4], 0FBE9h
                mov     ax, bx
                mov     dx, es
                pop     si
                leave
                retn
; ---------------------------------------------------------------------------

loc_21CE9:                              ; ...
                mov     ax, [bp+var_2]
                cmp     si, ds:464h
                jnz     short loc_21CF8
                cmp     ax, ds:466h
                jz      short loc_21D31

loc_21CF8:                              ; ...
                mov     eax, ds:464h
                mov     es, [bp+var_2]
                mov     es:[si+1Ah], eax
                les     bx, ds:464h
                les     bx, es:[bx+1Eh]
                mov     ax, es
                mov     es, [bp+var_2]
                mov     es:[si+1Eh], bx
                mov     es:[si+20h], ax
                mov     cx, es
                mov     es, ax
                mov     es:[bx+1Ah], si
                mov     es:[bx+1Ch], cx
                les     bx, ds:464h
                mov     es:[bx+1Eh], si
                mov     es:[bx+20h], cx

loc_21D31:                              ; ...
                mov     ax, [bp+var_2]
                mov     ds:464h, si
                mov     ds:466h, ax

loc_21D3B:                              ; ...
                mov     ax, si
                mov     dx, [bp+var_2]
                pop     si
                leave
                retn
sub_21C6E       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21D44       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   4, 0
                push    si
                mov     si, [bp+arg_0]
                inc     dword ptr ds:46Ch
                mov     eax, ds:468h
                mov     es, [bp+arg_2]
                mov     es:[si+1Ah], eax
                mov     ds:468h, si
                mov     word ptr ds:46Ah, es
                pop     si
                leave
                retn    4
sub_21D44       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21D6A       proc near               ; ...

var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   4, 0
                push    si
                mov     si, [bp+arg_0]
                mov     es, [bp+arg_2]
                mov     ax, es:[si+8]
                sub     dx, dx
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                or      dx, ax
                jz      short loc_21D98
                mov     dx, word ptr [bp+var_4+2]
                sub     ax, 1
                sbb     dx, 0
                mov     es:[si+8], ax
                mov     es:[si+0Ah], dx
                jmp     short loc_21D9C
; ---------------------------------------------------------------------------

loc_21D98:                              ; ...
                inc     [bp+var_4]

loc_21D9C:                              ; ...
                cmp     [bp+var_4], 1
                jnz     short loc_21E1A
                mov     es, [bp+arg_2]
                test    byte ptr es:[si+4], 81h
                jnz     short loc_21E1A
                test    byte ptr es:[si+4], 8
                jz      short loc_21DBB
                or      byte ptr es:[si+4], 4
                jmp     short loc_21E1A
; ---------------------------------------------------------------------------

loc_21DBB:                              ; ...
                mov     ax, es
                cmp     es:[si+1Ah], si
                jnz     short loc_21DD4
                cmp     es:[si+1Ch], ax
                jnz     short loc_21DD4
                mov     dword ptr ds:464h, 0
                jmp     short loc_21E0D
; ---------------------------------------------------------------------------

loc_21DD4:                              ; ...
                mov     eax, es:[si+1Ah]
                les     bx, es:[si+1Eh]
                mov     es:[bx+1Ah], eax
                mov     es, [bp+arg_2]
                mov     eax, es:[si+1Eh]
                les     bx, es:[si+1Ah]
                mov     es:[bx+1Eh], eax
                mov     ax, [bp+arg_2]
                cmp     si, ds:464h
                jnz     short loc_21E0D
                cmp     ax, ds:466h
                jnz     short loc_21E0D
                mov     es, ax
                mov     eax, es:[si+1Ah]
                mov     ds:464h, eax

loc_21E0D:                              ; ...
                mov     es, [bp+arg_2]
                mov     word ptr es:[si], 0
                push    es
                push    si
                call    sub_21D44

loc_21E1A:                              ; ...
                pop     si
                leave
                retn    4
sub_21D6A       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21E20       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                mov     si, [bp+arg_0]
                mov     es, [bp+arg_2]
                test    byte ptr es:[si+4], 89h
                jnz     short loc_21E36
                push    es
                push    si
                call    sub_1FE3B

loc_21E36:                              ; ...
                pop     si
                leave
                retn    4
sub_21E20       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================


sub_21E3C       proc near               ; ...
                push    si
                cmp     dword ptr ds:468h, 0
                jz      short loc_21E6D

loc_21E45:                              ; ...
                mov     ax, ds:468h
                mov     dx, ds:46Ah
                mov     si, ax
                mov     bx, ax
                mov     es, dx
                mov     eax, es:[bx+1Ah]
                mov     ds:468h, eax
                dec     dword ptr ds:46Ch
                push    es
                push    si
                call    sub_21E20
                cmp     dword ptr ds:468h, 0
                jnz     short loc_21E45

loc_21E6D:                              ; ...
                pop     si
                retn
sub_21E3C       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21E70       proc near               ; ...

var_112         = byte ptr -112h
var_E           = dword ptr -0Eh
var_A           = dword ptr -0Ah
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = dword ptr  4

                enter   274, 0
                push    di
                push    si
                les     bx, [bp+arg_0]
                mov     eax, es:[bx]
                mov     dx, es:[bx+2]
                mov     [bp+var_E], eax
                cmp     dx, 8000h
                jb      short loc_21E8D
                jbe     short loc_21E90

loc_21E8D:                              ; ...
                jmp     loc_22010
; ---------------------------------------------------------------------------

loc_21E90:                              ; ...
                jb      short loc_21E99
                cmp     ax, 6           ; ...
                jnb     loc_22010

loc_21E99:                              ; ...
                mov     si, ax
                mov     bx, ax
                shl     bx, 2

loc_21EA0:
                mov     eax, [bx+448h]
                mov     [bp+var_E], eax
                or      eax, eax
                jz      short loc_21EBA
                les     bx, [bp+var_E]
                test    byte ptr es:[bx+4], 2
                jz      loc_21FF0

loc_21EBA:                              ; ...
                or      si, si
                jz      short loc_21ED5
                cmp     si, 1
                jnz     loc_21FA2
                mov     word ptr [bp+var_4], 3F8h
                mov     word ptr [bp+var_4+2], ds
                mov     word ptr [bp+var_A], 482h
                mov     word ptr [bp+var_A+2], ds

loc_21ED5:                              ; ...
                mov     [bp+var_6], si
                cmp     [bp+var_E], 0
                jz      short loc_21EFC
                mov     bx, si
                shl     bx, 2
                mov     dword ptr [bx+448h], 0
                les     bx, [bp+var_E]
                and     byte ptr es:[bx+4], 0FEh
                push    large [bp+var_E]
                call    sub_21D6A

loc_21EFC:                              ; ...
                cmp     [bp+var_6], 0
                jnz     loc_21FAA
                mov     ax, 420h
                mov     word ptr [bp+var_E], ax
                mov     word ptr [bp+var_E+2], ds
                mov     bx, [bp+var_6]
                shl     bx, 2
                mov     [bx+448h], ax
                mov     word ptr [bx+44Ah], ds
                mov     bx, ds:3DAh
                mov     cx, ds:3DCh     ; ...
                add     bx, 58h ; 'X'
                push    ds
                mov     di, bx
                lea     si, [bp+var_112]
                mov     es, cx
                push    ss
                pop     ds
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                lea     ax, [bp+var_112]
                push    ss
                push    ax
                push    5Ch ; '\'
                call    sub_23D9A
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                or      dx, ax
                jz      short loc_21F9D
                mov     bx, ax
                mov     cx, word ptr [bp+var_4+2]
                inc     bx
                push    ds
                mov     di, 4B6h
                mov     si, bx
                push    ds
                pop     es
                mov     ds, cx
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                sub     di, cx
                xchg    di, si
                push    ds
                push    es
                pop     ds
                pop     es
                shr     cx, 1
                rep movsw
                adc     cx, cx
                rep movsb
                pop     ds
                push    large [bp+var_E]
                lea     ax, [bp+var_112]
                push    ss
                push    ax
                push    0
                call    sub_207C4
                or      dx, ax
                jz      short loc_21FA0

loc_21F9D:                              ; ...
                jmp     loc_22033
; ---------------------------------------------------------------------------

loc_21FA0:                              ; ...
                jmp     short loc_21FF0
; ---------------------------------------------------------------------------

loc_21FA2:                              ; ...
                cmp     si, 3
                jz      short loc_21FF0
                jmp     loc_22033
; ---------------------------------------------------------------------------

loc_21FAA:                              ; ...
                les     bx, [bp+var_4]
                test    byte ptr es:[bx+4], 4
                jnz     short loc_22033
                push    es
                push    bx
                push    large [bp+var_A]
                lea     ax, [bp+var_E]
                push    ss
                push    ax
                push    1
                call    sub_20AE4
                or      ax, ax
                jnz     short loc_22033
                mov     si, [bp+var_6]
                mov     ax, word ptr [bp+var_E]
                mov     dx, word ptr [bp+var_E+2]
                mov     bx, si
                shl     bx, 2
                mov     [bx+448h], ax
                mov     [bx+44Ah], dx
                mov     bx, ax
                mov     es, dx
                or      byte ptr es:[bx+4], 1
                mov     ax, si
                les     bx, [bp+var_E]
                mov     es:[bx+19h], al

loc_21FF0:                              ; ...
                mov     eax, [bp+var_E]
                les     bx, [bp+arg_0]
                mov     es:[bx], eax
                les     bx, [bp+var_E]
                mov     al, es:[bx+4]
                and     ax, 4
                cmp     ax, 1
                cmc
                sbb     ax, ax
                and     ax, 3F2h
                jmp     short loc_22036
; ---------------------------------------------------------------------------

loc_22010:                              ; ...
                les     bx, [bp+var_E]
                cmp     word ptr es:[bx], 4B48h
                jnz     short loc_22033
                test    byte ptr es:[bx+4], 4
                jnz     short loc_22033
                mov     al, es:[bx+4]
                and     ax, 2
                cmp     ax, 1
                cmc
                sbb     ax, ax
                and     ax, 3FAh
                jmp     short loc_22036
; ---------------------------------------------------------------------------

loc_22033:                              ; ...
                mov     ax, 3F2h

loc_22036:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_21E70       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2203C       proc near               ; ...

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   4, 0
                mov     bx, [bp+arg_0]
                mov     es, [bp+arg_2]
                mov     ax, es:[bx+8]
                sub     dx, dx
                mov     [bp+var_2], dx
                cmp     ax, 0FFFFh
                jnz     short loc_22062
                mov     al, es:[bx+4]
                and     al, 80h
                cmp     al, 80h
                jnz     short loc_22075
                xor     cx, cx
                jmp     short locret_2207A
; ---------------------------------------------------------------------------

loc_22062:                              ; ...
                mov     dx, [bp+var_2]
                add     ax, 1
                adc     dx, 0
                mov     es:[bx+8], ax
                mov     es:[bx+0Ah], dx
                jmp     short locret_2207A
; ---------------------------------------------------------------------------

loc_22075:                              ; ...
                or      byte ptr es:[bx+4], 80h

locret_2207A:                           ; ...
                leave
                retn    4
sub_2203C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2207E       proc near               ; ...

var_6           = word ptr -6
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                enter   8, 0
                push    di
                mov     cx, 6
                mov     ax, 448h
                mov     di, ax
                mov     [bp+var_2], ds

loc_2208E:                              ; ...
                mov     es, [bp+var_2]
                mov     ax, es:[di]
                mov     dx, es:[di+2]
                mov     bx, ax
                mov     [bp+var_6], dx
                or      dx, ax
                jz      short loc_220C3
                mov     es, [bp+var_6]
                mov     eax, [bp+arg_4]
                cmp     es:[bx+0Ah], eax
                jnz     short loc_220C3
                mov     eax, [bp+arg_0]
                cmp     es:[bx+0Eh], eax
                jnz     short loc_220C3
                test    byte ptr es:[bx+4], 6
                jz      loc_22162

loc_220C3:                              ; ...
                add     di, 4
                loop    loc_2208E
                mov     di, word ptr [bp+arg_4]
                cmp     dword ptr ds:460h, 0
                jz      short loc_2210B
                mov     cx, 20h ; ' '
                mov     ax, ds:460h
                mov     dx, ds:462h
                mov     bx, ax
                mov     [bp+var_6], dx

loc_220E2:                              ; ...
                mov     es, [bp+var_6]
                mov     ax, word ptr [bp+arg_4+2]
                cmp     es:[bx+0Ah], di
                jnz     short loc_22106
                cmp     es:[bx+0Ch], ax
                jnz     short loc_22106
                mov     eax, [bp+arg_0]
                cmp     es:[bx+0Eh], eax
                jnz     short loc_22106
                test    byte ptr es:[bx+4], 6
                jz      short loc_22162

loc_22106:                              ; ...
                add     bx, 28h ; '('
                loop    loc_220E2

loc_2210B:                              ; ...
                mov     ax, ds:464h
                mov     dx, ds:466h
                mov     bx, ax
                mov     [bp+var_6], dx
                or      dx, ax
                jz      short loc_2215A

loc_2211B:                              ; ...
                mov     eax, [bp+arg_0]
                mov     es, [bp+var_6]
                cmp     es:[bx+0Eh], eax
                jnz     short loc_2213F
                mov     ax, word ptr [bp+arg_4+2]
                cmp     es:[bx+0Ah], di
                jnz     short loc_2213F
                cmp     es:[bx+0Ch], ax
                jnz     short loc_2213F
                test    byte ptr es:[bx+4], 2
                jz      short loc_22162

loc_2213F:                              ; ...
                mov     ax, es:[bx+1Ah]
                mov     dx, es:[bx+1Ch]
                mov     bx, ax
                mov     [bp+var_6], dx
                mov     ax, dx
                cmp     bx, ds:464h
                jnz     short loc_2211B
                cmp     ax, ds:466h
                jnz     short loc_2211B

loc_2215A:                              ; ...
                xor     ax, ax
                cwd
                mov     bx, ax
                mov     [bp+var_6], dx

loc_22162:                              ; ...
                mov     ax, bx
                mov     dx, [bp+var_6]
                pop     di
                leave
                retn    8
sub_2207E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2216C       proc near               ; ...

var_6           = word ptr -6
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = dword ptr  6

                enter   8, 0
                push    di
                mov     cx, 6
                mov     ax, 448h
                mov     di, ax
                mov     [bp+var_6], ds

loc_2217C:                              ; ...
                mov     es, [bp+var_6]
                mov     ax, es:[di]
                mov     dx, es:[di+2]
                mov     bx, ax
                mov     [bp+var_2], dx
                or      dx, ax
                jz      short loc_221AB
                mov     es, [bp+var_2]
                mov     eax, [bp+arg_2]
                cmp     es:[bx+0Ah], eax
                jz      short loc_221A6
                mov     al, byte ptr [bp+arg_0]
                cmp     es:[bx+19h], al
                jnz     short loc_221AB

loc_221A6:                              ; ...
                or      byte ptr es:[bx+4], 6

loc_221AB:                              ; ...
                add     di, 4
                loop    loc_2217C
                mov     di, word ptr [bp+arg_2]
                cmp     dword ptr ds:460h, 0
                jz      short loc_221F1
                mov     cx, 20h ; ' '
                mov     ax, ds:460h
                mov     dx, ds:462h
                mov     bx, ax
                mov     [bp+var_2], dx

loc_221CA:                              ; ...
                mov     es, [bp+var_2]
                mov     ax, word ptr [bp+arg_2+2]
                cmp     es:[bx+0Ah], di
                jnz     short loc_221DC
                cmp     es:[bx+0Ch], ax
                jz      short loc_221E7

loc_221DC:                              ; ...
                mov     al, es:[bx+19h]
                sub     ah, ah
                cmp     ax, [bp+arg_0]
                jnz     short loc_221EC

loc_221E7:                              ; ...
                or      byte ptr es:[bx+4], 6

loc_221EC:                              ; ...
                add     bx, 28h ; '('
                loop    loc_221CA

loc_221F1:                              ; ...
                mov     ax, ds:464h
                mov     dx, ds:466h
                mov     bx, ax
                mov     [bp+var_2], dx
                or      dx, ax
                jz      short loc_2223F
                mov     cx, [bp+arg_0]

loc_22204:                              ; ...
                mov     es, [bp+var_2]
                mov     ax, word ptr [bp+arg_2+2]
                cmp     es:[bx+0Ah], di
                jnz     short loc_22216
                cmp     es:[bx+0Ch], ax
                jz      short loc_2221C

loc_22216:                              ; ...
                cmp     es:[bx+19h], cl
                jnz     short loc_22221

loc_2221C:                              ; ...
                or      byte ptr es:[bx+4], 6

loc_22221:                              ; ...
                mov     es, [bp+var_2]
                mov     ax, es:[bx+1Ah]
                mov     dx, es:[bx+1Ch]
                mov     bx, ax
                mov     [bp+var_2], dx
                mov     ax, dx
                cmp     bx, ds:464h
                jnz     short loc_22204
                cmp     ax, ds:466h
                jnz     short loc_22204

loc_2223F:                              ; ...
                pop     di
                leave
                retn    6
sub_2216C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22244       proc near               ; ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    bp
                mov     bp, sp
                cmp     dword ptr ds:494h, 0FFFFFFh
                jnb     short loc_2226B
                mov     eax, ds:498h
                cmp     [bp+arg_4], eax
                jnz     short loc_2226B
                mov     eax, ds:494h
                cmp     [bp+arg_0], eax
                jnz     short loc_2226B
                mov     ax, 1
                jmp     short locret_2226D
; ---------------------------------------------------------------------------

loc_2226B:                              ; ...
                xor     ax, ax

locret_2226D:                           ; ...
                leave
                retn    8
sub_22244       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22272       proc near               ; ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                cmp     [bp+arg_0], 0FFFFFFFFh
                jnz     short loc_22284
                mov     ax, word ptr [bp+arg_0]
                mov     dx, word ptr [bp+arg_0+2]
                jmp     short locret_22291
; ---------------------------------------------------------------------------

loc_22284:                              ; ...
                push    0
                push    1Ch
                push    large [bp+arg_0]
                call    far ptr 1EEEh:146Ah

locret_22291:                           ; ...
                leave
                retn    4
sub_22272       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22296       proc near               ; ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    di
                push    si
                cmp     [bp+arg_0], 0FFFFFFh
                jb      short loc_222AB
                mov     ax, 0FFFFh
                cwd
                jmp     short loc_22306
; ---------------------------------------------------------------------------

loc_222AB:                              ; ...
                cmp     [bp+arg_0], 124h
                jb      short loc_222EC
                mov     eax, [bp+arg_0]
                mov     ecx, 1Ch
                mul     ecx
                add     eax, 1Bh
                mov     edx, eax
                shr     edx, 10h
                mov     cx, ax
                and     ax, 0F000h
                mov     si, ax
                mov     di, dx
                mov     ax, cx
                and     ah, 0Fh
                mov     cx, 1Ch
                sub     dx, dx
                div     cx
                mul     cx
                add     ax, si
                adc     dx, di
                jmp     short loc_22306
; ---------------------------------------------------------------------------

loc_222EC:                              ; ...
                mov     eax, [bp+arg_0]
                mov     ecx, 1Ch
                mul     ecx
                add     eax, 4
                mov     edx, eax
                shr     edx, 10h

loc_22306:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_22296       endp

; ---------------------------------------------------------------------------
                enter   4, 0
                push    di
                push    si
                mov     di, [bp+8]
                mov     si, [bp+4]
                mov     es, word ptr [bp+0Ah]
                mov     byte ptr es:[di+3], 0
                mov     es, word ptr [bp+6]
                cmp     dword ptr es:[si], 0
                jz      short loc_22385
                cmp     dword ptr es:[si], 1
                jz      short loc_22385
                cmp     dword ptr es:[si], 2
                jz      short loc_22385
                cmp     dword ptr es:[si], 80000000h
                jz      short loc_22349
                cmp     dword ptr es:[si], 0FFFFFFFFh
                jnz     short loc_2237C

loc_22349:                              ; ...
                mov     eax, es:[si+4]
                mov     es, word ptr [bp+0Ah]
                mov     es:[di+8], eax
                mov     es, word ptr [bp+6]
                push    large dword ptr es:[si+8]
                call    sub_22272
                mov     es, word ptr [bp+0Ah]
                xor     ax, es:[di]
                xor     dx, es:[di+2]
                sub     dh, dh
                xor     es:[di], ax
                xor     es:[di+2], dx
                cmp     dword ptr es:[di+8], 38h ; '8'
                ja      short loc_2237F

loc_2237C:                              ; ...
                jmp     loc_22459
; ---------------------------------------------------------------------------

loc_2237F:                              ; ...
                mov     ax, 1
                jmp     loc_2245B
; ---------------------------------------------------------------------------

loc_22385:                              ; ...
                mov     es, word ptr [bp+0Ah]
                mov     dx, es:[di+2]
                mov     dh, 1
                mov     es:[di+2], dx
                mov     es, word ptr [bp+6]
                push    large dword ptr es:[si+0Ch]
                call    sub_22272
                mov     es, word ptr [bp+0Ah]
                xor     ax, es:[di+8]
                xor     dx, es:[di+0Ah]
                sub     dh, dh
                xor     es:[di+8], ax
                xor     es:[di+0Ah], dx
                mov     es, word ptr [bp+6]
                push    large dword ptr es:[si+14h]
                call    sub_22272
                mov     es, word ptr [bp+0Ah]
                xor     ax, es:[di]
                xor     dx, es:[di+2]
                sub     dh, dh
                xor     es:[di], ax
                xor     es:[di+2], dx
                mov     es, word ptr [bp+6]
                push    large dword ptr es:[si+10h]
                call    sub_22272
                mov     es, word ptr [bp+0Ah]
                xor     ax, es:[di+4]
                xor     dx, es:[di+6]
                sub     dh, dh
                xor     es:[di+4], ax
                xor     es:[di+6], dx
                mov     es, word ptr [bp+6]
                mov     ah, es:[si+18h]
                sub     al, al
                mov     dx, ax
                sub     cx, cx
                mov     es, word ptr [bp+0Ah]
                mov     [bp-4], cx
                xor     cx, es:[di+8]
                xor     dx, es:[di+0Ah]
                and     dh, al
                xor     cx, [bp-4]
                xor     dx, ax
                mov     es:[di+8], cx
                mov     es:[di+0Ah], dx
                mov     es, word ptr [bp+6]
                mov     ax, es:[si+1Ah]
                mov     es, word ptr [bp+0Ah]
                mov     es:[di+0Ch], ax
                mov     es, word ptr [bp+6]
                mov     ax, es:[si+4]
                mov     es, word ptr [bp+0Ah]
                mov     es:[di+0Eh], ax
                mov     es, word ptr [bp+6]
                cmp     dword ptr es:[si], 1
                jnz     short loc_2244A
                mov     es, word ptr [bp+0Ah]
                or      byte ptr es:[di+3], 2
                jmp     short loc_22459
; ---------------------------------------------------------------------------

loc_2244A:                              ; ...
                cmp     dword ptr es:[si], 2
                jnz     short loc_22459
                mov     es, word ptr [bp+0Ah]
                or      byte ptr es:[di+3], 4

loc_22459:                              ; ...
                xor     ax, ax

loc_2245B:                              ; ...
                pop     si
                pop     di
                leave
                retn    8
; ---------------------------------------------------------------------------
                db    0
; ---------------------------------------------------------------------------
                enter   4, 0
                push    di
                push    si
                mov     di, [bp+8]
                mov     es, word ptr [bp+0Ah]
                test    word ptr es:[di+2], 100h
                jz      loc_2254F
                test    word ptr es:[di+2], 200h
                jz      short loc_22493
                mov     si, [bp+4]
                mov     es, word ptr [bp+6]
                mov     word ptr es:[si], 1

loc_2248B:                              ; ...
                mov     word ptr es:[si+2], 0
                jmp     short loc_224B6
; ---------------------------------------------------------------------------

loc_22493:                              ; ...
                test    word ptr es:[di+2], 400h
                jz      short loc_224A8
                mov     si, [bp+4]
                mov     es, word ptr [bp+6]
                mov     word ptr es:[si], 2
                jmp     short loc_2248B
; ---------------------------------------------------------------------------

loc_224A8:                              ; ...
                mov     si, [bp+4]
                mov     es, word ptr [bp+6]
                mov     dword ptr es:[si], 0

loc_224B6:                              ; ...
                mov     es, word ptr [bp+0Ah]
                mov     ax, es:[di+8]
                mov     dx, es:[di+0Ah]
                sub     dh, dh
                push    dx
                push    ax
                call    sub_22296
                mov     es, word ptr [bp+6]
                mov     es:[si+0Ch], ax
                mov     es:[si+0Eh], dx
                mov     es, word ptr [bp+0Ah]
                mov     ax, es:[di]
                mov     dx, es:[di+2]
                sub     dh, dh
                push    dx
                push    ax
                call    sub_22296
                mov     es, word ptr [bp+6]
                mov     es:[si+14h], ax
                mov     es:[si+16h], dx
                mov     es, word ptr [bp+0Ah]
                mov     ax, es:[di+4]
                mov     dx, es:[di+6]
                sub     dh, dh
                push    dx
                push    ax
                call    sub_22296
                mov     es, word ptr [bp+6]
                mov     es:[si+10h], ax
                mov     es:[si+12h], dx
                mov     es, word ptr [bp+0Ah]
                mov     ax, es:[di+0Eh]
                mov     es, word ptr [bp+6]
                mov     es:[si+4], ax
                mov     word ptr es:[si+6], 0
                mov     es, word ptr [bp+0Ah]
                cmp     word ptr es:[di+0Ch], 0FFFFh
                jnz     short loc_22538
                mov     es, word ptr [bp+6]
                mov     dword ptr es:[si+18h], 0FFFFFFFFh
                jmp     short loc_22591
; ---------------------------------------------------------------------------

loc_22538:                              ; ...
                mov     al, es:[di+0Bh]
                sub     ah, ah
                mov     cx, es:[di+0Ch]
                mov     es, word ptr [bp+6]
                mov     es:[si+18h], ax
                mov     es:[si+1Ah], cx
                jmp     short loc_22591
; ---------------------------------------------------------------------------

loc_2254F:                              ; ...
                mov     si, [bp+4]
                mov     es, word ptr [bp+6]
                mov     dword ptr es:[si], 80000000h
                mov     es, word ptr [bp+0Ah]
                mov     eax, es:[di+8]
                mov     es, word ptr [bp+6]
                mov     es:[si+4], eax
                mov     ax, es
                mov     es, word ptr [bp+0Ah]
                mov     cx, es:[di]
                mov     dx, es:[di+2]
                sub     dh, dh
                push    dx
                push    cx
                mov     [bp-4], si
                mov     [bp-2], ax
                call    sub_22296
                les     bx, [bp-4]
                mov     es:[bx+8], ax
                mov     es:[bx+0Ah], dx

loc_22591:                              ; ...
                xor     ax, ax
                pop     si
                pop     di
                leave
                retn    8
; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2259A       proc near               ; ...

var_10          = dword ptr -10h
var_A           = word ptr -0Ah
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch
arg_A           = dword ptr  0Eh
arg_E           = dword ptr  12h

                enter   10h, 0
                push    di
                push    si
                mov     eax, [bp+arg_E]
                mov     dx, word ptr [bp+arg_E+2]
                mov     [bp+var_4], eax
                mov     cx, [bp+arg_2]
                mov     bx, [bp+arg_4]
                mov     di, cx
                mov     [bp+var_6], bx
                or      dx, ax
                jnz     short loc_225BF
                mov     bx, 20h ; ' '
                jmp     short loc_225C1
; ---------------------------------------------------------------------------

loc_225BF:                              ; ...
                xor     bx, bx

loc_225C1:                              ; ...
                mov     eax, [bp+arg_A]
                add     eax, [bp+arg_E]
                mov     [bp+var_10], eax

loc_225CD:                              ; ...
                add     di, bx
                sub     cx, cx
                add     word ptr [bp+var_4], bx
                adc     word ptr [bp+var_4+2], cx
                mov     eax, [bp+var_4]
                mov     dx, word ptr [bp+var_4+2]
                cmp     [bp+var_10], eax
                jbe     short loc_22650
                push    dx
                push    ax
                call    sub_22272
                and     ah, 3
                shl     ax, 4
                add     ax, [bp+arg_6]
                mov     dx, [bp+arg_8]
                mov     si, ax
                mov     [bp+var_A], dx

loc_225FA:                              ; ...
                mov     eax, [bp+var_4]
                mov     dx, word ptr [bp+var_4+2]
                cmp     [bp+var_10], eax
                jbe     short loc_2260E
                and     ax, 0F000h
                or      dx, ax
                jz      short loc_22624

loc_2260E:                              ; ...
                mov     eax, [bp+var_4]
                add     eax, 1Ch
                xor     eax, [bp+var_4]
                and     ax, 0F000h
                or      eax, eax
                jnz     short loc_22642

loc_22624:                              ; ...
                push    [bp+var_A]
                push    si
                push    [bp+var_6]
                push    di
                call    [bp+arg_0]
                or      ax, ax
                jnz     short loc_22650
                add     word ptr [bp+var_4], 1Ch
                adc     word ptr [bp+var_4+2], ax
                add     di, 1Ch
                add     si, 10h
                jmp     short loc_225FA
; ---------------------------------------------------------------------------

loc_22642:                              ; ...
                mov     bx, 1000h
                mov     ax, word ptr [bp+var_4]
                and     ah, 0Fh
                sub     bx, ax
                jmp     loc_225CD
; ---------------------------------------------------------------------------

loc_22650:                              ; ...
                pop     si
                pop     di
                leave
                retn    12h
sub_2259A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22656       proc near               ; ...

var_14          = dword ptr -14h
var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = dword ptr -0Ah
var_6           = dword ptr -6
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch
arg_A           = word ptr  0Eh

                enter   14h, 0
                push    di
                push    si
                mov     di, [bp+arg_8]
                mov     ax, [bp+arg_4]
                mov     dx, [bp+arg_6]
                mov     cl, 0Ah
                call    far ptr 1EEEh:145Eh
                mov     si, ax
                mov     es, [bp+arg_A]
                cmp     si, es:[di+8]
                jbe     short loc_2267D
                mov     ax, 3F1h
                jmp     loc_22810
; ---------------------------------------------------------------------------

loc_2267D:                              ; ...
                mov     ax, es:[di+4]
                mov     dx, es:[di+6]
                imul    cx, si, 0Ch
                add     ax, cx
                mov     word ptr [bp+var_14], ax
                mov     word ptr [bp+var_14+2], dx
                mov     bx, ax
                mov     es, dx
                mov     eax, es:[bx]
                mov     [bp+var_6], eax
                or      eax, eax
                jnz     loc_227DB
                mov     eax, es:[bx]
                mov     [bp+var_6], eax
                or      eax, eax
                jnz     loc_227DB
                push    4000h
                call    sub_219DA
                mov     word ptr [bp+var_6], ax
                mov     word ptr [bp+var_6+2], dx
                or      dx, ax
                jnz     short loc_226C8
                mov     si, 0Eh
                jmp     loc_22774
; ---------------------------------------------------------------------------

loc_226C8:                              ; ...
                mov     es, [bp+arg_A]
                mov     al, es:[di+56h]
                and     ax, 8
                cmp     ax, 1
                sbb     ax, ax
                and     ax, 3000h
                add     ah, 40h ; '@'
                mov     [bp+var_E], ax
                mul     si
                mov     word ptr [bp+var_A], ax
                mov     word ptr [bp+var_A+2], dx
                cmp     dx, es:[di+3Ch]
                ja      loc_227C3
                jb      short loc_226FA
                cmp     ax, es:[di+3Ah]
                jnb     loc_227C3

loc_226FA:                              ; ...
                mov     ax, es:[di+3Ah]
                mov     dx, es:[di+3Ch]
                sub     ax, word ptr [bp+var_A]
                sbb     dx, word ptr [bp+var_A+2]
                mov     cx, [bp+var_E]
                sub     bx, bx
                cmp     dx, bx
                jb      short loc_22719
                ja      short loc_22717
                cmp     ax, cx
                jbe     short loc_22719

loc_22717:                              ; ...
                mov     ax, cx

loc_22719:                              ; ...
                mov     [bp+var_C], ax
                lea     ax, [di+58h]
                push    es
                push    ax
                push    bx
                call    sub_1FCFD
                mov     [bp+var_2], ax
                inc     ax
                jz      short loc_2275E
                mov     es, [bp+arg_A]
                test    byte ptr es:[di+56h], 8
                jz      short loc_22779
                push    [bp+var_2]
                mov     ax, word ptr [bp+var_A]
                mov     dx, word ptr [bp+var_A+2]
                add     ah, 10h
                adc     dx, 0
                push    dx
                push    ax
                call    sub_1FD40
                or      ax, ax
                jz      short loc_2275E
                push    large [bp+var_6+2]
                push    word ptr [bp+var_6]
                push    [bp+var_C]
                call    sub_1FD1D
                or      ax, ax
                jnz     short loc_227BD

loc_2275E:                              ; ...
                mov     si, 3F8h
                push    large [bp+var_6]
                call    sub_1FE3B
                cmp     [bp+var_2], 0FFFFh
                jz      short loc_22774
                push    [bp+var_2]
                call    sub_1FD81

loc_22774:                              ; ...
                mov     ax, si
                jmp     loc_22810
; ---------------------------------------------------------------------------

loc_22779:                              ; ...
                push    [bp+var_2]
                mov     eax, [bp+var_A]
                add     eax, 20h ; ' '
                push    eax
                call    sub_1FD40
                or      ax, ax
                jz      short loc_2275E
                push    [bp+var_2]
                mov     eax, ds:3C4h
                mov     [bp-10h], eax
                push    eax
                push    [bp+var_C]
                call    sub_1FD1D
                or      ax, ax
                jz      short loc_2275E
                push    large [bp+var_A]
                push    0
                push    [bp+var_C]
                push    large [bp+var_6]
                push    large dword ptr [bp-10h]
                push    3B2Ch
                call    sub_2259A

loc_227BD:                              ; ...
                push    [bp+var_2]
                call    sub_1FD81

loc_227C3:                              ; ...
                les     bx, [bp+var_14]
                sub     eax, eax
                mov     es:[bx+4], eax
                mov     es:[bx+8], eax
                mov     eax, [bp+var_6]
                mov     es:[bx], eax

loc_227DB:                              ; ...
                mov     ax, [bp+arg_4]
                and     ah, 3
                shl     ax, 4
                add     ax, word ptr [bp+var_6]
                mov     dx, word ptr [bp+var_6+2]
                les     bx, [bp+arg_0]
                mov     es:[bx], ax
                mov     es:[bx+2], dx
                les     bx, [bp+var_14]
                mov     al, es:[bx+4]
                and     al, 1
                cmp     al, 1
                jz      short loc_22806
                or      byte ptr es:[bx+4], 1

loc_22806:                              ; ...
                les     bx, [bp+var_14]
                inc     dword ptr es:[bx+8]
                xor     ax, ax

loc_22810:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Ch
sub_22656       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22816       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    bp
                mov     bp, sp
                push    di
                push    si
                mov     di, [bp+arg_0]
                push    large [bp+arg_8]
                push    large [bp+arg_4]
                push    [bp+arg_2]
                push    di
                call    sub_22656
                mov     si, ax
                or      si, ax
                jnz     short loc_22851
                mov     es, [bp+arg_2]
                les     bx, es:[di]
                test    word ptr es:[bx+2], 100h
                jnz     short loc_22851
                push    large [bp+arg_8]
                push    large [bp+arg_4]
                push    0
                call    sub_2285A
                mov     si, 3F1h

loc_22851:                              ; ...
                mov     ax, si
                pop     si
                pop     di
                leave
                retn    0Ch
sub_22816       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2285A       proc near               ; ...

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch

                enter   4, 0
                push    di
                push    si
                mov     si, [bp+arg_6]
                mov     ax, [bp+arg_2]
                mov     dx, [bp+arg_4]
                mov     cl, 0Ah
                call    far ptr 1EEEh:145Eh
                imul    ax, 0Ch
                mov     es, [bp+arg_8]
                add     ax, es:[si+4]
                mov     dx, es:[si+6]
                mov     di, ax
                mov     [bp+var_2], dx
                mov     bx, ax
                mov     es, dx
                dec     dword ptr es:[bx+8]
                cmp     [bp+arg_0], 0
                jz      short loc_228A2
                mov     es, [bp+var_2]
                or      byte ptr es:[di+4], 2
                mov     es, [bp+arg_8]
                or      byte ptr es:[si+56h], 3

loc_228A2:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Ah
sub_2285A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_228A8       proc near               ; ...

var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = word ptr -10h
var_E           = word ptr -0Eh
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = word ptr  0Ch
arg_A           = word ptr  0Eh

                enter   1Ch, 0
                push    di
                push    si
                mov     si, [bp+arg_8]
                mov     es, [bp+arg_A]
                mov     eax, es:[si+42h]
                mov     [bp+var_8], eax
                mov     dx, word ptr [bp+var_8+2]
                cmp     eax, 0FFFFFFh
                jb      loc_22A65
                test    byte ptr es:[si+56h], 8
                jz      short loc_228F8
                mov     ax, es:[si+0Ch]
                mov     dx, es:[si+0Eh]
                add     ax, 0FFFh
                adc     dx, 0
                and     ax, 0F00Fh
                mov     cl, 4
                call    far ptr 1EEEh:145Eh
                mov     word ptr [bp+var_8], ax
                mov     word ptr [bp+var_8+2], dx
                mov     [bp+var_E], 1000h
                xor     di, di
                jmp     short loc_2295E
; ---------------------------------------------------------------------------

loc_228F8:                              ; ...
                cmp     dword ptr es:[si+0Ch], 20h ; ' '
                jnz     short loc_2290F
                mov     [bp+var_4], 20h ; ' '
                mov     [bp+var_E], 0FC0h
                jmp     short loc_2294F
; ---------------------------------------------------------------------------

loc_2290F:                              ; ...
                mov     ax, es:[si+0Ch]
                mov     dx, es:[si+0Eh]
                mov     cx, ax
                add     ax, 0FFFh
                adc     dx, 0
                and     ax, 0F000h
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                mov     [bp+var_E], 1000h
                mov     di, ax
                sub     di, cx
                cmp     di, 1Ch
                ja      short loc_2293F
                cmp     ax, 1000h
                jnz     short loc_22951
                or      dx, dx
                jnz     short loc_22951

loc_2293F:                              ; ...
                lea     ax, [di+1000h]
                mov     [bp+var_E], ax
                mov     eax, es:[si+0Ch]
                mov     [bp+var_4], eax

loc_2294F:                              ; ...
                xor     di, di

loc_22951:                              ; ...
                push    large [bp+var_4]
                call    sub_22272
                mov     word ptr [bp+var_8], ax
                mov     word ptr [bp+var_8+2], dx

loc_2295E:                              ; ...
                mov     [bp+var_10], di
                mov     cl, 0Ah
                call    far ptr 1EEEh:145Eh
                mov     word ptr [bp+var_4+2], ax
                mov     es, [bp+arg_A]
                cmp     ax, es:[si+0Ah]
                jb      short loc_229C8
                push    large dword ptr es:[si+4]
                add     ax, 4
                mov     word ptr [bp+var_4], ax
                imul    ax, 0Ch
                push    ax
                call    sub_21A30
                mov     word ptr [bp+var_C], ax
                mov     word ptr [bp+var_C+2], dx
                or      dx, ax
                jnz     short loc_22996
                mov     ax, 0Eh
                jmp     loc_22B72
; ---------------------------------------------------------------------------

loc_22996:                              ; ...
                mov     di, word ptr [bp+var_4]
                mov     es, [bp+arg_A]
                imul    ax, es:[si+0Ah], 0Ch
                add     ax, word ptr [bp+var_C]
                mov     dx, word ptr [bp+var_C+2]
                push    dx
                push    ax
                mov     ax, di
                sub     di, es:[si+0Ah]
                imul    cx, di, 0Ch
                push    cx
                mov     di, ax
                call    sub_1FDEE
                mov     eax, [bp+var_C]
                mov     es, [bp+arg_A]
                mov     es:[si+4], eax
                mov     es:[si+0Ah], di

loc_229C8:                              ; ...
                mov     ax, word ptr [bp+var_4+2]
                mov     es, [bp+arg_A]
                cmp     es:[si+8], ax
                jbe     short loc_229F2
                mov     ax, [bp+var_10]
                add     ax, [bp+var_E]
                sub     dx, dx
                add     es:[si+0Ch], ax
                adc     es:[si+0Eh], dx
                or      byte ptr es:[si+56h], 4
                mov     eax, [bp+var_8]
                mov     es:[si+42h], eax

loc_229F2:                              ; ...
                push    [bp+arg_A]
                push    si
                push    large [bp+var_8]
                lea     ax, [bp+var_14]
                push    ss
                push    ax
                call    sub_22656
                mov     di, ax
                or      di, ax
                jz      short loc_22A0D

loc_22A08:                              ; ...
                mov     ax, di
                jmp     loc_22B72
; ---------------------------------------------------------------------------

loc_22A0D:                              ; ...
                mov     cx, word ptr [bp+var_4+2]
                mov     bx, [bp+var_E]
                mov     es, [bp+arg_A]
                cmp     es:[si+8], cx
                ja      short loc_22A43
                mov     ax, cx
                inc     ax
                mov     es:[si+8], ax
                mov     bx, [bp+var_E]
                mov     ax, [bp+var_10]
                add     ax, bx
                sub     dx, dx
                add     es:[si+0Ch], ax
                adc     es:[si+0Eh], dx
                or      byte ptr es:[si+56h], 4
                mov     eax, [bp+var_8]
                mov     es:[si+42h], eax

loc_22A43:                              ; ...
                les     di, [bp+var_14]
                or      dword ptr es:[di], 0FFFFFFh
                les     di, [bp+var_14]
                mov     byte ptr es:[di+3], 0
                les     di, [bp+var_14]
                mov     es:[di+8], bx
                mov     word ptr es:[di+0Ah], 0
                jmp     short loc_22A77
; ---------------------------------------------------------------------------

loc_22A65:                              ; ...
                push    es
                push    si
                push    dx
                push    ax
                lea     ax, [bp+var_14]
                push    ss
                push    ax
                call    sub_22656
                mov     di, ax
                or      di, ax
                jnz     short loc_22A08

loc_22A77:                              ; ...
                les     bx, [bp+var_14]
                mov     ax, es:[bx]
                mov     dx, es:[bx+2]
                sub     dh, dh
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                mov     es, [bp+arg_A]
                mov     al, es:[si+56h]
                and     ax, 8
                cmp     ax, 1
                sbb     ax, ax
                and     ax, 0Ch
                add     ax, 10h
                mov     di, ax
                add     ax, ax
                sub     dx, dx
                mov     es, word ptr [bp+var_14+2]
                cmp     dx, es:[bx+0Ah]
                ja      short loc_22B22
                jb      short loc_22AB5
                cmp     ax, es:[bx+8]
                ja      short loc_22B22

loc_22AB5:                              ; ...
                push    [bp+arg_A]
                push    si
                mov     eax, [bp+var_8]
                inc     eax
                mov     [bp+var_1C], eax
                push    eax
                lea     ax, [bp+var_18]
                push    ss
                push    ax
                call    sub_22656
                or      ax, ax
                jnz     short loc_22B22
                les     bx, [bp+var_18]
                mov     ax, es:[bx]
                mov     dx, es:[bx+2]
                xor     ax, word ptr [bp+var_4]
                xor     dx, word ptr [bp+var_4+2]
                sub     dh, dh
                xor     es:[bx], ax
                xor     es:[bx+2], dx
                les     bx, [bp+var_18]
                mov     es:[bx+3], dh
                les     bx, [bp+var_14]
                mov     ax, es:[bx+8]
                mov     dx, es:[bx+0Ah]
                sub     ax, di
                sbb     dx, 0
                les     bx, [bp+var_18]
                mov     es:[bx+8], ax
                mov     es:[bx+0Ah], dx
                mov     eax, [bp+var_1C]
                mov     dx, word ptr [bp+var_1C+2]
                mov     [bp+var_4], eax
                push    [bp+arg_A]
                push    si
                push    dx
                push    ax
                push    1
                call    sub_2285A

loc_22B22:                              ; ...
                mov     eax, [bp+var_4]
                mov     es, [bp+arg_A]
                mov     es:[si+42h], eax
                les     bx, [bp+var_14]
                or      byte ptr es:[bx+3], 1
                mov     ax, word ptr [bp+var_8]
                mov     dx, word ptr [bp+var_8+2]
                mov     cl, 0Ah
                call    far ptr 1EEEh:145Eh
                imul    di, ax, 0Ch
                mov     es, [bp+arg_A]
                les     bx, es:[si+4]
                or      byte ptr es:[bx+di+4], 2
                mov     es, [bp+arg_A]
                or      byte ptr es:[si+56h], 3
                mov     eax, [bp+var_8]
                les     bx, [bp+arg_4]
                mov     es:[bx], eax
                mov     eax, [bp+var_14]
                les     bx, [bp+arg_0]
                mov     es:[bx], eax
                xor     ax, ax

loc_22B72:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Ch
sub_228A8       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22B78       proc near               ; ...

var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = word ptr  8
arg_6           = word ptr  0Ah

                enter   4, 0
                push    di
                push    si
                mov     si, [bp+arg_4]
                push    [bp+arg_6]
                push    si
                push    large [bp+arg_0]
                lea     ax, [bp+var_4]
                push    ss
                push    ax
                call    sub_22656
                mov     di, ax
                or      di, ax
                jnz     short loc_22BF7
                les     bx, [bp+var_4]
                and     byte ptr es:[bx+3], 0F8h
                mov     es, [bp+arg_6]
                mov     ax, es:[si+42h]
                mov     dx, es:[si+44h]
                les     bx, [bp+var_4]
                xor     ax, es:[bx]
                xor     dx, es:[bx+2]
                sub     dh, dh
                xor     es:[bx], ax
                xor     es:[bx+2], dx
                mov     es, [bp+arg_6]
                mov     al, es:[si+56h]
                and     ax, 8
                cmp     ax, 1
                sbb     ax, ax
                and     ax, 0Ch
                add     ax, 10h
                les     bx, [bp+var_4]
                mov     es:[bx+8], ax
                mov     word ptr es:[bx+0Ah], 0
                mov     eax, [bp+arg_0]
                mov     dx, word ptr [bp+arg_0+2]
                mov     es, [bp+arg_6]
                mov     es:[si+42h], eax
                push    es
                push    si
                push    dx
                push    ax
                push    1
                call    sub_2285A

loc_22BF7:                              ; ...
                mov     ax, di
                pop     si
                pop     di
                leave
                retn    8
sub_22B78       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22C00       proc near               ; ...

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = word ptr  10h
arg_E           = word ptr  12h

                enter   8, 0
                push    di
                push    si
                mov     di, [bp+arg_C]
                mov     es, [bp+arg_E]
                test    byte ptr es:[di+56h], 8
                jz      short loc_22C58
                mov     si, 4000h
                mov     eax, [bp+arg_8]
                shl     eax, 4
                mov     [bp+var_4], eax
                mov     dx, word ptr [bp+var_4+2]
                add     ah, 40h ; '@'
                adc     dx, 0
                mov     es, [bp+arg_E]
                cmp     dx, es:[di+0Eh]
                jb      short loc_22C43
                ja      short loc_22C3C
                cmp     ax, es:[di+0Ch]
                jbe     short loc_22C43

loc_22C3C:                              ; ...
                mov     si, es:[di+0Ch]
                sub     si, word ptr [bp+var_4]

loc_22C43:                              ; ...
                mov     ax, word ptr [bp+arg_8]
                mov     dx, word ptr [bp+arg_8+2]
                add     ah, 1
                adc     dx, 0
                mov     cl, 4
                call    far ptr 1EEEh:13E8h
                jmp     short loc_22CAD
; ---------------------------------------------------------------------------

loc_22C58:                              ; ...
                mov     si, 7000h
                cmp     [bp+arg_8], 0
                jnz     short loc_22C72
                push    0
                push    20h ; ' '
                call    sub_22272
                mov     word ptr [bp+arg_8], ax
                mov     word ptr [bp+arg_8+2], dx
                mov     si, 6FE0h

loc_22C72:                              ; ...
                push    large [bp+arg_8]
                call    sub_22296
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                mov     es, [bp+arg_E]
                mov     ax, si
                sub     dx, dx
                add     ax, word ptr [bp+var_4]
                adc     dx, word ptr [bp+var_4+2]
                cmp     dx, es:[di+0Eh]
                jb      short loc_22CA1
                ja      short loc_22C9A
                cmp     ax, es:[di+0Ch]
                jbe     short loc_22CA1

loc_22C9A:                              ; ...
                mov     si, es:[di+0Ch]
                sub     si, word ptr [bp+var_4]

loc_22CA1:                              ; ...
                mov     ax, word ptr [bp+var_4]
                mov     dx, word ptr [bp+var_4+2]
                add     ax, 20h ; ' '
                adc     dx, 0

loc_22CAD:                              ; ...
                mov     word ptr [bp+var_8], ax
                mov     word ptr [bp+var_8+2], dx
                les     bx, [bp+arg_4]
                mov     es:[bx], si
                mov     eax, [bp+var_8]
                les     bx, [bp+arg_0]
                mov     es:[bx], eax
                pop     si
                pop     di
                leave
                retn    10h
sub_22C00       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22CCA       proc near               ; ...

var_E           = dword ptr -0Eh
var_A           = word ptr -0Ah
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = word ptr  8
arg_6           = dword ptr  0Ah
arg_A           = word ptr  0Eh
arg_C           = word ptr  10h

                enter   0Eh, 0
                push    di
                push    si
                mov     di, [bp+arg_A]
                push    [bp+arg_C]
                push    di
                push    large [bp+arg_6]
                lea     ax, [bp+var_A]
                push    ss
                push    ax
                lea     ax, [bp+var_E]
                push    ss
                push    ax
                call    sub_22C00
                mov     si, 3F8h
                push    [bp+arg_4]
                push    large [bp+var_E]
                call    sub_1FD40
                or      ax, ax
                jz      short loc_22D68
                mov     es, [bp+arg_C]
                test    byte ptr es:[di+56h], 8
                jz      short loc_22D0F
                push    [bp+arg_4]
                les     bx, [bp+arg_0]
                push    large dword ptr es:[bx]
                jmp     short loc_22D5C
; ---------------------------------------------------------------------------

loc_22D0F:                              ; ...
                mov     ax, ds:3C4h
                mov     dx, ds:3C6h
                mov     di, ax
                mov     [bp+var_6], dx
                mov     eax, [bp+arg_6]
                mov     ecx, 1Ch
                mul     ecx
                push    eax
                push    0
                push    [bp+var_A]
                les     bx, [bp+arg_0]
                push    large dword ptr es:[bx]
                push    large [dword ptr ds:3C4h]
                push    3C82h
                call    sub_2259A
                mov     ax, [bp+var_6]
                mov     word ptr [bp+var_4], di
                mov     word ptr [bp+var_4+2], ax
                cmp     [bp+arg_6], 0
                jnz     short loc_22D55
                add     word ptr [bp+var_4], 20h ; ' '

loc_22D55:                              ; ...
                push    [bp+arg_4]
                push    large [bp+var_4]

loc_22D5C:                              ; ...
                push    [bp+var_A]
                call    sub_1FD19
                or      ax, ax
                jz      short loc_22D68
                xor     si, si

loc_22D68:                              ; ...
                mov     ax, si
                pop     si
                pop     di
                leave
                retn    0Eh
sub_22CCA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22D70       proc near               ; ...

var_12          = dword ptr -12h
var_E           = word ptr -0Eh
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = dword ptr  8

                enter   12h, 0
                push    di
                push    si
                cmp     [bp+arg_2], 0FFFFh
                jnz     short loc_22D88
                les     bx, [bp+arg_4]
                test    byte ptr es:[bx+56h], 2
                jz      loc_22ED9

loc_22D88:                              ; ...
                push    [bp+arg_0]
                push    0
                push    20h ; ' '
                call    sub_1FD40
                or      ax, ax
                jnz     short loc_22D9C

loc_22D96:                              ; ...
                mov     ax, 3F8h
                jmp     loc_22EDB
; ---------------------------------------------------------------------------

loc_22D9C:                              ; ...
                mov     si, word ptr [bp+arg_4]
                mov     es, word ptr [bp+arg_4+2]
                mov     eax, es:[si+3Ah]
                mov     [bp+var_4], eax
                mov     eax, es:[si+3Eh]
                mov     [bp+var_8], eax
                mov     eax, es:[si+42h]
                mov     [bp+var_C], eax
                mov     eax, es:[si+0Ch]
                mov     es:[si+3Ah], eax
                test    byte ptr es:[si+56h], 8
                jnz     short loc_22DF7
                mov     es, word ptr [bp+arg_4+2]
                push    large dword ptr es:[si+3Eh]
                call    sub_22296
                mov     es, word ptr [bp+arg_4+2]
                mov     es:[si+3Eh], ax
                mov     es:[si+40h], dx
                push    large dword ptr es:[si+42h]
                call    sub_22296
                mov     es, word ptr [bp+arg_4+2]
                mov     es:[si+42h], ax
                mov     es:[si+44h], dx

loc_22DF7:                              ; ...
                push    [bp+arg_0]
                mov     ax, si
                mov     dx, word ptr [bp+arg_4+2]
                add     ax, 36h ; '6'
                push    dx
                push    ax
                push    20h ; ' '
                call    sub_1FD19
                mov     di, ax
                mov     eax, [bp+var_4]
                mov     es, word ptr [bp+arg_4+2]
                mov     es:[si+3Ah], eax
                mov     eax, [bp+var_8]
                mov     es:[si+3Eh], eax
                mov     eax, [bp+var_C]
                mov     es:[si+42h], eax
                or      di, di
                jz      loc_22D96
                mov     es, word ptr [bp+arg_4+2]
                mov     eax, es:[si+4]
                mov     [bp+var_4], eax
                mov     word ptr [bp+var_C+2], 0
                cmp     word ptr es:[si+8], 0
                jz      loc_22ED9
                mov     word ptr [bp+var_C], 0

loc_22E4E:                              ; ...
                mov     si, [bp+arg_2]
                mov     ax, word ptr [bp+var_C]
                mov     word ptr [bp+var_8], ax
                mov     word ptr [bp+var_8+2], 0
                les     bx, [bp+var_4]
                cmp     dword ptr es:[bx], 0
                jz      short loc_22E8A
                cmp     si, 0FFFFh
                jnz     short loc_22E72
                test    byte ptr es:[bx+4], 2
                jz      short loc_22E88

loc_22E72:                              ; ...
                push    large [bp+arg_4]
                push    large [bp+var_8]
                push    [bp+arg_0]
                push    es
                push    bx
                call    sub_22CCA
                or      ax, ax
                jnz     loc_22D96

loc_22E88:                              ; ...
                jmp     short loc_22EC0
; ---------------------------------------------------------------------------

loc_22E8A:                              ; ...
                mov     di, si
                cmp     di, 0FFFFh
                jz      short loc_22EC0
                push    large [bp+arg_4]
                push    large [bp+var_8]
                lea     cx, [bp+var_E]
                push    ss
                push    cx
                lea     dx, [bp+var_12]
                push    ss
                push    dx
                call    sub_22C00
                push    di
                push    large [bp+var_12]
                push    [bp+arg_0]
                push    large [bp+var_12]
                push    0
                push    [bp+var_E]
                call    sub_23D14
                or      ax, ax
                jnz     loc_22D96

loc_22EC0:                              ; ...
                add     byte ptr [bp+var_C+1], 4
                add     word ptr [bp+var_4], 0Ch
                inc     word ptr [bp+var_C+2]
                mov     ax, word ptr [bp+var_C+2]
                les     bx, [bp+arg_4]
                cmp     es:[bx+8], ax
                ja      loc_22E4E

loc_22ED9:                              ; ...
                xor     ax, ax

loc_22EDB:                              ; ...
                pop     si
                pop     di
                leave
                retn    8
sub_22D70       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22EE2       proc near               ; ...

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   4, 0
                push    di
                mov     di, [bp+arg_0]
                mov     es, [bp+arg_2]
                and     byte ptr es:[di+56h], 0FDh
                mov     eax, es:[di+0Ch]
                mov     es:[di+3Ah], eax
                mov     cx, es:[di+8]
                mov     ax, es:[di+4]
                mov     dx, es:[di+6]
                mov     bx, ax
                mov     [bp+var_2], dx
                cmp     word ptr es:[di+8], 0
                jz      short loc_22F21
                mov     es, [bp+var_2]

loc_22F17:                              ; ...
                and     byte ptr es:[bx+4], 0FDh
                add     bx, 0Ch
                loop    loc_22F17

loc_22F21:                              ; ...
                pop     di
                leave
                retn    4
sub_22EE2       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22F26       proc near               ; ...

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   4, 0
                push    di
                push    si
                mov     cx, [bp+arg_0]
                mov     bx, cx
                mov     es, [bp+arg_2]
                mov     di, es:[bx+8]
                mov     ax, es:[bx+4]
                mov     dx, es:[bx+6]
                mov     si, ax
                mov     [bp+var_2], dx
                cmp     word ptr es:[bx+8], 0
                jz      short loc_22F85

loc_22F4C:                              ; ...
                mov     es, [bp+var_2]
                cmp     dword ptr es:[si], 0
                jz      short loc_22F7F
                test    byte ptr es:[si+4], 3
                jnz     short loc_22F77
                cmp     dword ptr es:[si+8], 0
                jnz     short loc_22F77
                push    large dword ptr es:[si]
                call    sub_1FE3B
                mov     es, [bp+var_2]
                mov     dword ptr es:[si], 0

loc_22F77:                              ; ...
                mov     es, [bp+var_2]
                and     byte ptr es:[si+4], 0FEh

loc_22F7F:                              ; ...
                add     si, 0Ch
                dec     di
                jnz     short loc_22F4C

loc_22F85:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_22F26       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_22F8C       proc near               ; ...

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   8, 0
                push    di
                push    si
                mov     si, [bp+arg_0]
                mov     es, [bp+arg_2]
                mov     al, es:[si+56h]
                and     ax, 8
                cmp     ax, 1
                sbb     ax, ax
                and     ax, 3000h
                add     ah, 40h ; '@'
                sub     dx, dx
                push    dx
                push    ax
                add     ax, es:[si+3Ah]
                adc     dx, es:[si+3Ch]
                sub     ax, 1
                sbb     dx, 0
                push    dx
                push    ax
                call    far ptr 1EEEh:146Ah
                mov     [bp+var_6], ax
                mov     di, ax
                add     di, 4
                imul    ax, di, 0Ch
                mov     [bp+var_8], ax
                push    ax
                call    sub_219DA
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                or      dx, ax
                jnz     short loc_22FE4
                mov     ax, 0Eh
                jmp     short loc_23049
; ---------------------------------------------------------------------------

loc_22FE4:                              ; ...
                push    word ptr [bp+var_4+2]
                push    ax
                push    [bp+var_8]
                call    sub_1FDEE
                mov     eax, [bp+var_4]
                mov     es, [bp+arg_2]
                mov     es:[si+4], eax
                mov     ax, [bp+var_6]
                mov     es:[si+8], ax
                mov     es:[si+0Ah], di
                and     byte ptr es:[si+46h], 0F8h
                test    byte ptr es:[si+56h], 8
                jnz     short loc_2303A
                mov     es, [bp+arg_2]
                push    large dword ptr es:[si+3Eh]
                call    sub_22272
                mov     es, [bp+arg_2]
                mov     es:[si+3Eh], ax
                mov     es:[si+40h], dx
                push    large dword ptr es:[si+42h]
                call    sub_22272
                mov     es, [bp+arg_2]
                mov     es:[si+42h], ax
                mov     es:[si+44h], dx

loc_2303A:                              ; ...
                mov     es, [bp+arg_2]
                mov     eax, es:[si+3Ah]
                mov     es:[si+0Ch], eax
                xor     ax, ax

loc_23049:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_22F8C       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23050       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                mov     si, [bp+arg_0]
                mov     es, [bp+arg_2]
                push    word ptr es:[si+8]
                call    sub_219DA
                mov     es, [bp+arg_2]
                mov     es:[si], ax
                mov     es:[si+2], dx
                mov     ax, dx
                or      ax, es:[si]
                jz      short loc_23096
                push    1FEh
                call    sub_219DA
                mov     es, [bp+arg_2]
                mov     es:[si+4], ax
                mov     es:[si+6], dx
                mov     ax, dx
                or      ax, es:[si+4]
                jz      short loc_2308F
                xor     ax, ax
                jmp     short loc_23099
; ---------------------------------------------------------------------------

loc_2308F:                              ; ...
                push    [bp+arg_2]
                push    si
                call    sub_2309E

loc_23096:                              ; ...
                mov     ax, 0Eh

loc_23099:                              ; ...
                pop     si
                leave
                retn    4
sub_23050       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2309E       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                mov     si, [bp+arg_0]
                mov     es, [bp+arg_2]
                cmp     dword ptr es:[si], 0
                jz      short loc_230C1
                push    large dword ptr es:[si]
                call    sub_1FE3B
                mov     es, [bp+arg_2]
                mov     dword ptr es:[si], 0

loc_230C1:                              ; ...
                mov     es, [bp+arg_2]
                cmp     dword ptr es:[si+4], 0
                jz      short loc_230E0
                push    large dword ptr es:[si+4]
                call    sub_1FE3B
                mov     es, [bp+arg_2]
                mov     dword ptr es:[si+4], 0

loc_230E0:                              ; ...
                pop     si
                leave
                retn    4
sub_2309E       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_230E6       proc near               ; ...

var_10          = dword ptr -10h
var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_6           = word ptr -6
var_4           = word ptr -4
arg_0           = dword ptr  4

                enter   10h, 0
                push    di
                push    si
                mov     si, word ptr [bp+arg_0]
                mov     es, word ptr [bp+arg_0+2]
                push    large dword ptr es:[si+4]
                push    1FEh
                call    sub_1FDEE
                mov     es, word ptr [bp+arg_0+2]
                mov     eax, es:[si]
                mov     [bp+var_10], eax
                mov     [bp+var_A], 20h ; ' '
                mov     di, es:[si+8]
                sub     di, 20h ; ' '
                jz      short loc_2318B
                mov     [bp+var_C], di
                mov     di, [bp+var_A]
                mov     cx, [bp+var_C]

loc_2311F:                              ; ...
                les     si, [bp+var_10]
                add     si, di
                mov     bx, si
                mov     [bp+var_6], es
                mov     ax, es:[si+4]
                mov     dx, es:[si+6]
                mov     [bp+var_4], ax
                cmp     dword ptr es:[si], 0
                jz      short loc_23186
                sub     ax, ax
                cmp     es:[bx+2], ax
                ja      short loc_23186
                jb      short loc_2314A
                cmp     es:[bx], cx
                ja      short loc_23186

loc_2314A:                              ; ...
                cmp     [bp+var_4], 0FFFFh
                jnz     short loc_23155
                cmp     dx, 0FFFFh
                jz      short loc_2315C

loc_23155:                              ; ...
                cmp     [bp+var_4], 0FFh
                jnb     short loc_23186

loc_2315C:                              ; ...
                cmp     [bp+var_4], 0FFFFh
                jnz     short loc_23167
                cmp     dx, 0FFFFh
                jz      short loc_23178

loc_23167:                              ; ...
                mov     ax, [bp+var_4]
                add     ax, ax
                les     si, [bp+arg_0]
                les     si, es:[si+4]
                add     si, ax
                mov     es:[si], di

loc_23178:                              ; ...
                mov     es, [bp+var_6]
                mov     ax, es:[bx]
                add     di, ax
                sub     cx, ax
                jnz     short loc_2311F
                jmp     short loc_2318B
; ---------------------------------------------------------------------------

loc_23186:                              ; ...
                mov     ax, 3F1h
                jmp     short loc_2318D
; ---------------------------------------------------------------------------

loc_2318B:                              ; ...
                xor     ax, ax

loc_2318D:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_230E6       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23194       proc near               ; ...

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = dword ptr  6

                enter   8, 0
                push    di
                push    si
                mov     bx, [bp+arg_0]
                mov     [bp+var_4], 0FFFFh
                les     si, [bp+arg_2]
                cmp     es:[si+26h], bx
                ja      short loc_231B1
                mov     ax, 3F1h
                jmp     loc_23290
; ---------------------------------------------------------------------------

loc_231B1:                              ; ...
                imul    ax, bx, 1Ah
                mov     di, si
                les     di, es:[di+10h]
                add     di, ax
                mov     si, di
                mov     [bp+var_6], es
                test    byte ptr es:[di+12h], 1
                jnz     loc_23274
                test    byte ptr es:[si+12h], 1
                jnz     loc_23274
                push    es
                push    di
                call    sub_23050
                mov     [bp+var_2], ax
                or      ax, ax
                jnz     short loc_2325C
                mov     eax, [bp+arg_2]
                add     ax, 58h ; 'X'
                push    eax
                push    0
                call    sub_1FCFD
                mov     [bp+var_4], ax
                inc     ax
                jz      short loc_23257
                push    [bp+var_4]
                mov     es, [bp+var_6]
                push    large dword ptr es:[si+0Eh]
                call    sub_1FD40
                or      ax, ax
                jz      short loc_23257
                push    [bp+var_4]
                mov     es, [bp+var_6]
                push    large dword ptr es:[si]
                push    word ptr es:[si+8]
                call    sub_1FD1D
                or      ax, ax
                jz      short loc_23257
                mov     es, [bp+var_6]
                push    large dword ptr es:[si]
                call    sub_23B4E
                or      ax, ax
                jnz     short loc_2322F
                mov     [bp+var_2], 3F1h
                jmp     short loc_2325C
; ---------------------------------------------------------------------------

loc_2322F:                              ; ...
                push    [bp+var_6]
                push    si
                call    sub_230E6
                mov     [bp+var_2], ax
                or      ax, ax
                jnz     short loc_2325C
                push    [bp+var_4]
                call    sub_1FD81
                mov     es, [bp+var_6]
                mov     al, es:[si+12h]
                and     al, 1
                cmp     al, 1
                jz      short loc_23274
                or      byte ptr es:[si+12h], 1
                jmp     short loc_23274
; ---------------------------------------------------------------------------

loc_23257:                              ; ...
                mov     [bp+var_2], 3F8h

loc_2325C:                              ; ...
                cmp     [bp+var_4], 0FFFFh
                jz      short loc_23268
                push    [bp+var_4]
                call    sub_1FD81

loc_23268:                              ; ...
                push    [bp+var_6]
                push    si
                call    sub_2309E
                mov     ax, [bp+var_2]
                jmp     short loc_23290
; ---------------------------------------------------------------------------

loc_23274:                              ; ...
                mov     es, [bp+var_6]
                mov     al, es:[si+12h]
                and     al, 2
                cmp     al, 2
                jz      short loc_23286
                or      byte ptr es:[si+12h], 2

loc_23286:                              ; ...
                mov     es, [bp+var_6]
                inc     dword ptr es:[si+16h]
                xor     ax, ax

loc_23290:                              ; ...
                pop     si
                pop     di
                leave
                retn    6
sub_23194       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23296       proc near               ; ...

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah

                enter   4, 0
                push    di
                push    si
                mov     bx, [bp+arg_4]
                mov     es, [bp+arg_6]
                mov     ax, es:[bx+10h]
                mov     dx, es:[bx+12h]
                imul    cx, [bp+arg_2], 1Ah
                add     ax, cx
                mov     di, ax
                mov     [bp+var_2], dx
                mov     si, ax
                mov     es, dx
                dec     dword ptr es:[si+16h]
                cmp     [bp+arg_0], 0
                jz      short loc_232D4
                mov     es, [bp+var_2]
                or      byte ptr es:[di+12h], 4
                mov     es, [bp+arg_6]
                or      byte ptr es:[bx+56h], 1

loc_232D4:                              ; ...
                pop     si
                pop     di
                leave
                retn    8
sub_23296       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_232DA       proc near               ; ...

var_8           = word ptr -8
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = byte ptr  8
arg_6           = word ptr  0Ah
arg_8           = dword ptr  0Ch

                enter   8, 0
                push    di
                push    si
                push    large [bp+arg_8]
                push    [bp+arg_6]
                call    sub_23194
                mov     di, ax
                mov     [bp+var_2], ax
                or      di, ax
                jnz     short loc_23354
                mov     al, [bp+arg_4]
                sub     ah, ah
                add     ax, ax
                mov     [bp+var_8], ax
                imul    cx, [bp+arg_6], 1Ah
                les     bx, [bp+arg_8]
                les     bx, es:[bx+10h]
                add     bx, cx
                mov     si, bx
                mov     [bp+var_4], es
                les     bx, es:[bx+4]
                add     bx, ax
                cmp     word ptr es:[bx], 0
                jnz     short loc_2332F
                push    large [bp+arg_8]
                push    [bp+arg_6]
                push    0
                call    sub_23296
                mov     di, 3F1h
                mov     [bp+var_2], di
                jmp     short loc_23354
; ---------------------------------------------------------------------------

loc_2332F:                              ; ...
                mov     [bp+var_2], di
                mov     es, [bp+var_4]
                mov     ax, es
                les     bx, es:[si+4]
                mov     di, [bp+var_8]
                mov     cx, es:[bx+di]
                mov     es, ax
                add     cx, es:[si]
                mov     ax, es:[si+2]
                les     bx, [bp+arg_0]
                mov     es:[bx], cx
                mov     es:[bx+2], ax

loc_23354:                              ; ...
                mov     ax, [bp+var_2]
                pop     si
                pop     di
                leave
                retn    0Ch
sub_232DA       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2335E       proc near               ; ...

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   18h, 0
                push    di
                push    si
                mov     cx, [bp+arg_0]
                mov     es, [bp+arg_2]
                mov     si, cx
                les     si, es:[si]
                mov     bx, si
                mov     word ptr [bp+var_C+2], es
                cmp     dword ptr es:[si+10h], 0FFFFFFFFh
                jnz     short loc_23381

loc_2337C:                              ; ...
                xor     ax, ax
                jmp     loc_234B3
; ---------------------------------------------------------------------------

loc_23381:                              ; ...
                mov     ax, es:[bx+10h]
                mov     dx, ax
                add     ax, si
                mov     di, ax
                mov     word ptr [bp+var_4+2], es
                mov     word ptr [bp+var_C], si
                mov     si, ax
                add     dx, es:[si]
                mov     si, cx
                mov     es, [bp+arg_2]
                cmp     dx, es:[si+8]
                jb      short loc_233AC
                mov     es, word ptr [bp+var_4+2]
                cmp     dword ptr es:[di+8], 0FFFFFFFFh
                jz      short loc_2337C

loc_233AC:                              ; ...
                sub     eax, eax
                mov     [bp+var_14], eax
                mov     [bp+var_10], eax
                mov     bx, 20h ; ' '
                mov     es, [bp+arg_2]
                mov     ax, es:[si+8]
                mov     [bp+var_8], ax
                mov     cx, ax

loc_233C6:                              ; ...
                cmp     cx, bx
                jbe     loc_23464
                jmp     short loc_233DC
; ---------------------------------------------------------------------------

loc_233CE:                              ; ...
                mov     es, word ptr [bp+var_4+2]
                cmp     dword ptr es:[di+4], 0FFFFFFFFh
                jz      short loc_233ED
                add     bx, es:[di]

loc_233DC:                              ; ...
                mov     ax, word ptr [bp+var_C]
                mov     dx, word ptr [bp+var_C+2]
                add     ax, bx
                mov     di, ax
                mov     word ptr [bp+var_4+2], dx
                cmp     cx, bx
                ja      short loc_233CE

loc_233ED:                              ; ...
                mov     word ptr [bp+var_4], ax
                mov     [bp+var_6], bx
                mov     si, word ptr [bp+var_14]
                mov     ax, word ptr [bp+var_14+2]
                or      ax, si
                jz      short loc_23415
                push    large [bp+var_10]
                push    word ptr [bp+var_14+2]
                push    si
                mov     ax, si
                sub     ax, word ptr [bp+var_4]
                neg     ax
                push    ax
                mov     di, ax
                call    sub_1FD94
                add     word ptr [bp+var_10], di

loc_23415:                              ; ...
                cmp     [bp+var_10], 0
                jnz     short loc_23424
                mov     eax, [bp+var_4]
                mov     [bp+var_10], eax

loc_23424:                              ; ...
                mov     ax, [bp+var_6]
                cmp     [bp+var_8], ax
                jbe     short loc_2344D
                mov     bx, ax
                mov     cx, [bp+var_8]

loc_23431:                              ; ...
                les     si, [bp+var_C]
                add     si, bx
                mov     di, si
                mov     word ptr [bp+var_4+2], es
                cmp     dword ptr es:[si+4], 0FFFFFFFFh
                jnz     short loc_23456
                add     bx, es:[di]
                cmp     bx, cx
                jb      short loc_23431
                jmp     loc_233C6
; ---------------------------------------------------------------------------

loc_2344D:                              ; ...
                mov     cx, [bp+var_8]

loc_23450:                              ; ...
                mov     bx, [bp+var_6]
                jmp     loc_233C6
; ---------------------------------------------------------------------------

loc_23456:                              ; ...
                mov     [bp+var_6], bx
                mov     ax, word ptr [bp+var_4+2]
                mov     word ptr [bp+var_14], si
                mov     word ptr [bp+var_14+2], ax
                jmp     short loc_23450
; ---------------------------------------------------------------------------

loc_23464:                              ; ...
                mov     di, word ptr [bp+var_10]
                mov     cx, word ptr [bp+var_10+2]
                mov     word ptr [bp+var_18], di
                mov     word ptr [bp+var_18+2], cx
                sub     di, word ptr [bp+var_C]
                sbb     cx, cx
                les     bx, [bp+var_C]
                mov     es:[bx+10h], di
                mov     es:[bx+12h], cx
                mov     bx, [bp+arg_0]
                mov     es, [bp+arg_2]
                mov     ax, es:[bx+0Ah]
                mov     cx, es
                les     si, [bp+var_18]
                mov     es:[si], ax
                mov     word ptr es:[si+2], 0
                mov     eax, 0FFFFFFFFh
                mov     es:[si+4], eax
                mov     es:[si+8], ax
                mov     es:[si+0Ah], ax
                push    cx
                push    bx
                call    sub_230E6
                mov     ax, 1

loc_234B3:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_2335E       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_234BA       proc near               ; ...

var_A           = word ptr -0Ah
var_8           = dword ptr -8
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = dword ptr  6

                enter   0Ah, 0
                push    di
                push    si
                mov     si, word ptr [bp+arg_2]
                mov     es, word ptr [bp+arg_2+2]
                mov     di, es:[si+26h]
                cmp     di, 0FFFEh
                jb      short loc_234D5

loc_234CF:                              ; ...
                mov     ax, 0Eh
                jmp     loc_2360A
; ---------------------------------------------------------------------------

loc_234D5:                              ; ...
                mov     [bp+var_A], di
                cmp     es:[si+14h], di
                ja      short loc_2350D
                push    large dword ptr es:[si+10h]
                lea     ax, [di+4]
                imul    ax, 1Ah
                push    ax
                call    sub_21A30
                mov     word ptr [bp+var_8], ax
                mov     word ptr [bp+var_8+2], dx
                or      dx, ax
                jz      short loc_234CF
                mov     [bp+var_A], di
                mov     dx, word ptr [bp+var_8+2]
                mov     es, word ptr [bp+arg_2+2]
                mov     es:[si+10h], ax
                mov     es:[si+12h], dx
                add     word ptr es:[si+14h], 4

loc_2350D:                              ; ...
                mov     es, word ptr [bp+arg_2+2]
                mov     ax, es:[si+10h]
                mov     dx, es:[si+12h]
                imul    cx, [bp+var_A], 1Ah
                add     ax, cx
                mov     di, ax
                mov     word ptr [bp+var_8+2], dx
                mov     es, dx
                mov     bx, ax
                mov     ax, [bp+arg_0]
                add     ax, 101Fh
                and     ax, 0F000h
                mov     [bp+arg_0], ax
                mov     es:[bx+8], ax
                push    word ptr [bp+var_8+2]
                push    di
                call    sub_23050
                or      ax, ax
                jnz     short loc_234CF
                mov     word ptr [bp+var_8], di
                mov     ax, [bp+arg_0]
                sub     ax, 20h ; ' '
                les     bx, [bp+var_8]
                mov     es:[bx+0Ah], ax
                mov     dword ptr es:[bx+0Ch], 0FFFF0000h
                mov     dword ptr es:[bx+10h], 7FFFFh
                mov     dword ptr es:[bx+14h], 10000h
                mov     word ptr es:[bx+18h], 0
                mov     ax, es:[bx]
                mov     dx, es:[bx+2]
                mov     si, ax
                mov     [bp+var_2], dx
                mov     bx, ax
                mov     es, dx
                mov     dword ptr es:[bx], 42444752h
                mov     ax, [bp+arg_0]
                mov     es, [bp+var_2]
                mov     es:[si+4], ax
                mov     word ptr es:[si+6], 0
                mov     ax, es
                les     bx, [bp+var_8]
                mov     cx, es:[bx+0Ah]
                mov     es, ax
                mov     es:[si+8], cx
                mov     dword ptr es:[si+0Ah], 80000h
                mov     cx, [bp+var_A]
                mov     es:[si+0Eh], cx
                mov     dword ptr es:[si+10h], 20h ; ' '
                mov     word ptr es:[si+14h], 0
                les     bx, [bp+var_8]
                mov     cx, es:[bx+0Ah]
                mov     es, ax
                mov     es:[si+20h], cx
                mov     word ptr es:[si+22h], 0
                mov     eax, 0FFFFFFFFh
                lea     bx, [si+20h]
                mov     es:[bx+4], eax
                mov     es:[bx+8], ax
                mov     es:[bx+0Ah], ax
                les     bx, [bp+arg_2]
                inc     word ptr es:[bx+26h]
                or      word ptr es:[bx+28h], 1
                or      word ptr es:[bx+56h], 5
                push    large [bp+var_8]
                call    sub_230E6

loc_2360A:                              ; ...
                pop     si
                pop     di
                leave
                retn    6
sub_234BA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23610       proc near               ; ...

var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_6           = word ptr -6
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = dword ptr  8

                enter   10h, 0
                push    di
                push    si
                mov     ax, [bp+arg_0]
                imul    cx, [bp+arg_2], 1Ah
                les     bx, [bp+arg_4]
                les     bx, es:[bx+10h]
                add     bx, cx
                mov     si, bx
                mov     [bp+var_2], es
                cmp     es:[bx+0Ah], ax
                jnb     loc_236FA
                mov     bx, ax
                mov     ax, es:[si+8]
                sub     ax, es:[si+0Ah]
                add     ax, bx
                add     ax, 0FFFh
                and     ax, 0F000h
                sub     dx, dx
                mov     [bp+var_C], ax
                cmp     ax, 0F000h
                jbe     short loc_23655

loc_2364F:                              ; ...
                mov     ax, 0Eh
                jmp     loc_236FC
; ---------------------------------------------------------------------------

loc_23655:                              ; ...
                push    large dword ptr es:[si]
                push    ax
                call    sub_21A30
                mov     di, ax
                mov     [bp+var_E], dx
                or      dx, ax
                jz      short loc_2364F
                mov     ax, [bp+var_E]
                mov     es, [bp+var_2]
                mov     es:[si], di
                mov     es:[si+2], ax
                push    es
                push    si
                call    sub_2335E
                mov     es, [bp+var_E]
                cmp     dword ptr es:[di+10h], 0FFFFFFFFh
                jnz     short loc_236B8
                mov     ax, es
                mov     es, [bp+var_2]
                mov     dx, es:[si+8]
                sub     bx, bx
                mov     es, ax
                mov     es:[di+10h], dx
                mov     es:[di+12h], bx
                add     dx, di
                mov     cx, dx
                mov     bx, dx
                mov     [bp+var_6], es
                mov     dword ptr es:[bx+4], 0FFFFFFFFh
                mov     es, [bp+var_6]
                mov     dword ptr es:[bx+8], 0FFFFFFFFh
                jmp     short loc_236C3
; ---------------------------------------------------------------------------

loc_236B8:                              ; ...
                mov     ax, es:[di+10h]
                add     ax, di
                mov     cx, ax
                mov     [bp+var_6], es

loc_236C3:                              ; ...
                mov     ax, [bp+var_C]
                mov     es, [bp+var_2]
                sub     ax, es:[si+8]
                add     es:[si+0Ah], ax
                mov     ax, es:[si+0Ah]
                mov     bx, cx
                mov     es, [bp+var_6]
                mov     es:[bx], ax
                mov     word ptr es:[bx+2], 0
                mov     ax, [bp+var_C]
                mov     es, [bp+var_2]
                mov     es:[si+8], ax
                or      byte ptr es:[si+12h], 0Ch
                les     bx, [bp+arg_4]
                or      byte ptr es:[bx+56h], 5

loc_236FA:                              ; ...
                xor     ax, ax

loc_236FC:                              ; ...
                pop     si
                pop     di
                leave
                retn    8
sub_23610       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23702       proc near               ; ...

var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = dword ptr  0Ch

                enter   0Eh, 0
                push    di
                push    si
                mov     ax, [bp+arg_4]
                imul    cx, [bp+arg_6], 1Ah
                les     bx, [bp+arg_8]
                les     bx, es:[bx+10h]
                add     bx, cx
                mov     si, bx
                mov     word ptr [bp+var_4+2], es
                cmp     es:[bx+0Ah], ax
                jnb     short loc_23729

loc_23723:                              ; ...
                mov     ax, 0Eh
                jmp     loc_237CB
; ---------------------------------------------------------------------------

loc_23729:                              ; ...
                mov     di, ax
                push    es
                push    bx
                call    sub_2335E
                mov     es, word ptr [bp+var_4+2]
                mov     eax, es:[si]
                mov     dx, es:[si+2]
                mov     [bp+var_8], eax
                mov     bx, ax
                mov     es, dx
                add     ax, es:[bx+10h]
                mov     [bp+var_E], ax
                mov     bx, ax
                mov     [bp+var_C], dx
                mov     ax, es:[bx]
                cmp     ax, di
                jb      short loc_23723
                mov     word ptr [bp+var_4], si
                mov     bx, ax
                sub     bx, di
                cmp     bx, 22h ; '"'
                jb      short loc_2379E
                sub     ax, ax
                mov     si, word ptr [bp+var_8]
                add     es:[si+10h], di
                adc     es:[si+12h], ax
                mov     cx, [bp+var_E]
                mov     si, cx
                mov     es, [bp+var_C]
                mov     es:[si], di
                mov     es:[si+2], ax
                mov     eax, es:[si+8]
                add     si, di
                mov     es:[si+8], eax
                mov     dword ptr es:[si+4], 0FFFFFFFFh
                mov     es:[si], bx
                mov     word ptr es:[si+2], 0
                jmp     short loc_237B5
; ---------------------------------------------------------------------------

loc_2379E:                              ; ...
                mov     di, ax
                mov     cx, [bp+var_E]
                mov     bx, cx
                mov     es, [bp+var_C]
                mov     eax, es:[bx+8]
                les     bx, [bp+var_8]
                mov     es:[bx+10h], eax

loc_237B5:                              ; ...
                les     bx, [bp+var_4]
                sub     es:[bx+0Ah], di
                mov     ax, [bp+var_C]
                les     bx, [bp+arg_0]
                mov     es:[bx], cx
                mov     es:[bx+2], ax
                xor     ax, ax

loc_237CB:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Ch
sub_23702       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_237D2       proc near               ; ...

var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = dword ptr  4

                enter   0Ch, 0
                push    di
                push    si
                mov     bx, word ptr [bp+arg_0]
                mov     es, word ptr [bp+arg_0+2]
                mov     ax, es:[bx]
                mov     dx, es:[bx+2]
                mov     di, ax
                mov     [bp+var_6], dx
                mov     cx, es:[bx+0Ch]
                mov     [bp+var_A], cx
                mov     si, cx
                lea     cx, [si+1]
                mov     es, dx
                mov     dx, si
                mov     si, ax
                cmp     es:[si+14h], dx
                jnb     short loc_23808
                mov     es:[di+14h], dx
                jmp     short loc_2383C
; ---------------------------------------------------------------------------

loc_23808:                              ; ...
                mov     es, word ptr [bp+arg_0+2]
                mov     eax, es:[bx+4]
                mov     si, cx
                add     si, cx
                add     ax, si
                mov     [bp+var_4], eax
                mov     es, [bp+var_6]
                mov     ax, es:[di+14h]
                mov     [bp+var_C], ax
                cmp     ax, cx
                jb      short loc_2383C
                mov     bx, word ptr [bp+var_4]

loc_2382B:                              ; ...
                mov     es, word ptr [bp+var_4+2]
                cmp     word ptr es:[bx], 0
                jz      short loc_2383C
                inc     bx
                inc     bx
                inc     cx
                cmp     [bp+var_C], cx
                jnb     short loc_2382B

loc_2383C:                              ; ...
                les     bx, [bp+arg_0]
                mov     es:[bx+0Ch], cx
                mov     ax, [bp+var_A]
                pop     si
                pop     di
                leave
                retn    4
sub_237D2       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2384C       proc near               ; ...

var_8           = word ptr -8
var_6           = dword ptr -6
arg_0           = dword ptr  4
arg_4           = word ptr  8
arg_6           = dword ptr  0Ah

                enter   8, 0
                push    di
                push    si
                mov     bx, word ptr [bp+arg_6]
                mov     es, word ptr [bp+arg_6+2]
                cmp     word ptr es:[bx+26h], 0
                jz      loc_23946
                mov     [bp+var_8], 0

loc_23866:                              ; ...
                mov     es, word ptr [bp+arg_6+2]
                mov     si, es:[bx+26h]
                imul    ax, si, 1Ah

loc_23870:
                add     ax, es:[bx+10h]

loc_23874:
                mov     dx, es:[bx+12h]

loc_23878:
                mov     word ptr [bp+var_6], ax

loc_2387B:
                mov     word ptr [bp+var_6+2], dx

loc_2387E:
                mov     di, ax

loc_23880:                              ; ...
                mov     ax, si

loc_23882:
                dec     si

loc_23883:
                or      ax, ax

loc_23885:
                jz      loc_23935

loc_23889:
                sub     di, 1Ah

loc_2388C:
                mov     es, word ptr [bp+var_6+2]

loc_2388F:
                cmp     word ptr es:[di+0Ch], 0FFh
                jnb     short loc_23880
                cmp     [bp+var_8], 0
                jz      short loc_238B7
                mov     ax, es:[di+8]
                sub     ax, es:[di+0Ah]
                sub     dx, dx
                add     ax, [bp+arg_4]
                adc     dx, dx
                or      dx, dx
                jnz     short loc_23880
                cmp     ax, 0F000h
                jbe     short loc_238C0
                jmp     short loc_23880
; ---------------------------------------------------------------------------

loc_238B7:                              ; ...
                mov     ax, [bp+arg_4]
                cmp     es:[di+0Ah], ax
                jb      short loc_23880

loc_238C0:                              ; ...
                push    large [bp+arg_6]
                push    si
                call    sub_23194
                or      ax, ax
                jnz     short loc_23880
                cmp     [bp+var_8], ax
                jz      short loc_238E0
                push    large [bp+arg_6]
                push    si
                push    [bp+arg_4]
                call    sub_23610
                or      ax, ax
                jnz     short loc_238F6

loc_238E0:                              ; ...
                mov     word ptr [bp+var_6], di
                push    large [bp+arg_6]
                push    si
                push    large dword ptr [bp+6]
                push    word ptr [bp+arg_0]
                call    sub_23702
                or      ax, ax
                jz      short loc_23903

loc_238F6:                              ; ...
                push    large [bp+arg_6]
                push    si
                push    0
                call    sub_23296
                jmp     loc_23880
; ---------------------------------------------------------------------------

loc_23903:                              ; ...
                mov     di, si

loc_23905:                              ; ...
                push    large [bp+var_6]
                call    sub_237D2
                mov     si, ax
                les     bx, [bp+arg_0]
                les     bx, es:[bx]
                mov     es:[bx+4], ax
                mov     es:[bx+6], di
                les     bx, [bp+arg_0]
                mov     ax, es:[bx]
                les     bx, [bp+var_6]
                sub     ax, es:[bx]
                les     bx, es:[bx+4]
                add     si, si
                mov     es:[bx+si], ax
                xor     ax, ax
                jmp     short loc_2398D
; ---------------------------------------------------------------------------

loc_23935:                              ; ...
                cmp     [bp+var_8], 0
                jnz     short loc_23946
                mov     [bp+var_8], 1
                mov     bx, word ptr [bp+arg_6]
                jmp     loc_23866
; ---------------------------------------------------------------------------

loc_23946:                              ; ...
                push    large [bp+arg_6]
                push    [bp+arg_4]
                call    sub_234BA
                or      ax, ax
                jnz     short loc_2398A
                les     bx, [bp+arg_6]
                mov     ax, es:[bx+26h]
                dec     ax
                mov     di, ax
                imul    ax, 1Ah
                add     ax, es:[bx+10h]
                mov     dx, es:[bx+12h]
                mov     word ptr [bp+var_6], ax
                mov     word ptr [bp+var_6+2], dx
                push    es
                push    bx
                push    di
                push    large [bp+arg_0+2]
                push    word ptr [bp+arg_0]
                call    sub_23702
                or      ax, ax
                jz      short loc_23905
                push    large [bp+arg_6]
                push    di
                push    0
                call    sub_23296

loc_2398A:                              ; ...
                mov     ax, 0Eh

loc_2398D:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Ah
sub_2384C       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23994       proc near               ; ...

var_E           = word ptr -0Eh
var_A           = word ptr -0Ah
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = dword ptr  8

                enter   0Eh, 0
                push    di
                push    si
                mov     bx, word ptr [bp+arg_4]
                mov     es, word ptr [bp+arg_4+2]
                mov     ax, es:[bx+10h]
                mov     dx, es:[bx+12h]
                mov     si, ax
                mov     [bp+var_A], dx
                mov     eax, es:[bx+1Eh]
                mov     [bp+var_8], eax
                mov     [bp+var_E], 0
                cmp     word ptr es:[bx+26h], 0
                jz      loc_23A8E

loc_239C4:                              ; ...
                mov     es, [bp+var_A]
                test    byte ptr es:[si+12h], 1
                jz      short loc_23A49
                cmp     [bp+arg_2], 0FFFFh
                jnz     short loc_239DD
                test    byte ptr es:[si+12h], 4
                jz      loc_23A6B

loc_239DD:                              ; ...
                mov     di, [bp+arg_0]
                mov     eax, es:[si]
                mov     dx, es:[si+2]
                mov     [bp+var_4], eax
                mov     cx, es:[si+8]
                mov     bx, ax
                mov     es, dx
                mov     es:[bx+4], cx
                mov     word ptr es:[bx+6], 0
                mov     es, [bp+var_A]
                mov     ax, es:[si+0Ah]
                les     bx, [bp+var_4]
                mov     es:[bx+8], ax
                mov     word ptr es:[bx+0Ah], 0
                mov     es, [bp+var_A]
                mov     ax, es:[si+0Ch]
                les     bx, [bp+var_4]
                mov     es:[bx+16h], ax
                and     byte ptr es:[bx+0Ch], 0FBh
                push    di
                push    large [bp+var_8]
                call    sub_1FD40
                or      ax, ax
                jz      short loc_23A44
                push    di
                push    large [bp+var_4]
                mov     es, [bp+var_A]
                push    word ptr es:[si+8]
                call    sub_1FD19
                or      ax, ax
                jnz     short loc_23A6B

loc_23A44:                              ; ...
                mov     ax, 3F8h
                jmp     short loc_23A90
; ---------------------------------------------------------------------------

loc_23A49:                              ; ...
                cmp     [bp+arg_2], 0FFFFh
                jz      short loc_23A6B
                push    [bp+arg_2]
                push    large dword ptr es:[si+0Eh]
                push    [bp+arg_0]
                push    large [bp+var_8]
                push    0
                push    word ptr es:[si+8]
                call    sub_23D14
                or      ax, ax
                jnz     short loc_23A44

loc_23A6B:                              ; ...
                mov     es, [bp+var_A]
                mov     ax, es:[si+8]
                sub     dx, dx
                add     word ptr [bp+var_8], ax
                adc     word ptr [bp+var_8+2], dx
                add     si, 1Ah
                inc     [bp+var_E]
                mov     ax, [bp+var_E]
                les     bx, [bp+arg_4]
                cmp     es:[bx+26h], ax
                ja      loc_239C4

loc_23A8E:                              ; ...
                xor     ax, ax

loc_23A90:                              ; ...
                pop     si
                pop     di
                leave
                retn    8
sub_23994       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23A96       proc near               ; ...

var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   8, 0
                push    di
                mov     di, [bp+arg_0]
                mov     es, [bp+arg_2]
                mov     ax, es:[di+10h]
                mov     dx, es:[di+12h]
                mov     bx, ax
                mov     [bp+var_6], dx
                mov     eax, es:[di+1Eh]
                mov     [bp+var_4], eax
                xor     cx, cx
                cmp     es:[di+26h], cx
                jz      short loc_23AE9

loc_23ABF:                              ; ...
                mov     es, [bp+var_6]
                and     byte ptr es:[bx+12h], 0FBh
                mov     eax, [bp+var_4]
                mov     es:[bx+0Eh], eax
                mov     ax, es:[bx+8]
                sub     dx, dx
                add     word ptr [bp+var_4], ax
                adc     word ptr [bp+var_4+2], dx
                add     bx, 1Ah
                inc     cx
                mov     es, [bp+arg_2]
                cmp     es:[di+26h], cx
                ja      short loc_23ABF

loc_23AE9:                              ; ...
                pop     di
                leave
                retn    4
sub_23A96       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23AEE       proc near               ; ...

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6

                enter   4, 0
                push    di
                push    si
                mov     cx, [bp+arg_0]
                mov     bx, cx
                mov     es, [bp+arg_2]
                mov     di, es:[bx+26h]
                mov     ax, es:[bx+10h]
                mov     dx, es:[bx+12h]
                mov     si, ax
                mov     [bp+var_2], dx
                cmp     word ptr es:[bx+26h], 0
                jz      short loc_23B48

loc_23B14:                              ; ...
                mov     es, [bp+var_2]
                mov     al, es:[si+12h]
                and     al, 7
                cmp     al, 1
                jnz     short loc_23B3A
                cmp     dword ptr es:[si+16h], 0
                jnz     short loc_23B3A
                push    es
                push    si
                call    sub_2309E
                mov     es, [bp+var_2]
                mov     dword ptr es:[si+12h], 0

loc_23B3A:                              ; ...
                mov     es, [bp+var_2]
                and     byte ptr es:[si+12h], 0FDh
                add     si, 1Ah
                dec     di
                jnz     short loc_23B14

loc_23B48:                              ; ...
                pop     si
                pop     di
                leave
                retn    4
sub_23AEE       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23B4E       proc near               ; ...

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                mov     si, [bp+arg_0]
                mov     es, [bp+arg_2]
                cmp     dword ptr es:[si], 42444752h
                jnz     short loc_23B6E
                cmp     word ptr es:[si+6], 0
                jnz     short loc_23B6E
                mov     ax, 1
                jmp     short loc_23B70
; ---------------------------------------------------------------------------

loc_23B6E:                              ; ...
                xor     ax, ax

loc_23B70:                              ; ...
                pop     si
                leave
                retn    4
sub_23B4E       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23B76       proc near               ; ...

var_2C          = byte ptr -2Ch
var_28          = word ptr -28h
var_24          = word ptr -24h
var_16          = word ptr -16h
var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8

                enter   2Ch, 0
                push    di
                push    si
                mov     di, [bp+arg_2]
                mov     es, [bp+arg_4]
                mov     si, es:[di+26h]
                lea     ax, [si+4]
                imul    ax, 1Ah
                push    ax
                call    sub_219DA
                mov     word ptr [bp+var_8], ax
                mov     word ptr [bp+var_8+2], dx
                or      dx, ax
                jnz     short loc_23BA0
                mov     ax, 0Eh
                jmp     loc_23C49
; ---------------------------------------------------------------------------

loc_23BA0:                              ; ...
                push    word ptr [bp+var_8+2]
                push    ax
                imul    ax, si, 1Ah
                push    ax
                call    sub_1FDEE
                mov     eax, [bp+var_8]
                mov     es, [bp+arg_4]
                mov     es:[di+10h], eax
                lea     ax, [si+4]
                mov     es:[di+14h], ax
                mov     eax, es:[di+1Eh]
                mov     [bp+var_4], eax
                mov     [bp+var_A], 0
                or      si, si
                jz      short loc_23C47
                mov     [bp+var_C], si
                mov     di, [bp+arg_0]
                mov     si, word ptr [bp+var_8]

loc_23BD9:                              ; ...
                push    di
                push    large [bp+var_4]
                call    sub_1FD40
                or      ax, ax
                jz      short loc_23C3D
                push    di
                lea     ax, [bp+var_2C]
                push    ss
                push    ax
                push    20h ; ' '
                call    sub_1FD1D
                or      ax, ax
                jz      short loc_23C3D
                lea     ax, [bp+var_2C]
                push    ss
                push    ax
                call    sub_23B4E
                or      ax, ax
                jz      short loc_23C42
                mov     eax, [bp+var_4]
                mov     es, word ptr [bp+var_8+2]
                mov     es:[si+0Eh], eax
                mov     ax, [bp+var_28]
                mov     es:[si+8], ax
                mov     ax, [bp+var_24]
                mov     es:[si+0Ah], ax
                mov     ax, [bp+var_16]
                mov     es:[si+0Ch], ax
                mov     ax, es:[si+8]
                sub     dx, dx
                add     word ptr [bp+var_4], ax
                adc     word ptr [bp+var_4+2], dx
                add     si, 1Ah
                mov     ax, [bp+var_C]
                inc     [bp+var_A]
                cmp     [bp+var_A], ax
                jb      short loc_23BD9
                jmp     short loc_23C47
; ---------------------------------------------------------------------------

loc_23C3D:                              ; ...
                mov     ax, 3F8h
                jmp     short loc_23C49
; ---------------------------------------------------------------------------

loc_23C42:                              ; ...
                mov     ax, 3F1h
                jmp     short loc_23C49
; ---------------------------------------------------------------------------

loc_23C47:                              ; ...
                xor     ax, ax

loc_23C49:                              ; ...
                pop     si
                pop     di
                leave
                retn    6
sub_23B76       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23C50       proc near               ; ...

var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = dword ptr  6

                enter   4, 0
                push    si
                mov     si, [bp+arg_0]
                mov     [bp+var_4], 0
                or      si, si
                jz      short loc_23C99

loc_23C64:                              ; ...
                les     bx, [bp+arg_2]
                inc     word ptr [bp+arg_2]
                mov     cl, es:[bx]
                sub     ch, ch
                cmp     cx, 80h
                jnb     short loc_23C96
                cmp     cx, 61h ; 'a'
                jb      short loc_23C8E
                cmp     cx, 7Ah ; 'z'
                ja      short loc_23C8E
                mov     ax, cx
                sub     ax, 20h ; ' '
                sub     dx, dx
                add     word ptr [bp+var_4], ax
                adc     word ptr [bp+var_4+2], dx
                jmp     short loc_23C96
; ---------------------------------------------------------------------------

loc_23C8E:                              ; ...
                sub     ax, ax
                add     word ptr [bp+var_4], cx
                adc     word ptr [bp+var_4+2], ax

loc_23C96:                              ; ...
                dec     si
                jnz     short loc_23C64

loc_23C99:                              ; ...
                mov     ax, word ptr [bp+var_4]
                mov     dx, word ptr [bp+var_4+2]
                pop     si
                leave
                retn    6
sub_23C50       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23CA4       proc near               ; ...

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch

                enter   4, 0
                push    di
                push    si
                cmp     [bp+arg_0], 0
                jz      short loc_23D0B
                mov     si, [bp+arg_6]
                mov     di, [bp+arg_2]

loc_23CB6:                              ; ...
                mov     es, [bp+arg_8]
                cmp     byte ptr es:[si], 61h ; 'a'
                jl      short loc_23CCE
                cmp     byte ptr es:[si], 7Ah ; 'z'
                jg      short loc_23CCE
                mov     al, es:[si]
                cbw
                sub     ax, 20h ; ' '
                jmp     short loc_23CD2
; ---------------------------------------------------------------------------

loc_23CCE:                              ; ...
                mov     al, es:[si]
                cbw

loc_23CD2:                              ; ...
                mov     [bp+var_2], ax
                mov     es, [bp+arg_4]
                cmp     byte ptr es:[di], 61h ; 'a'
                jl      short loc_23CEF
                cmp     byte ptr es:[di], 7Ah ; 'z'
                jg      short loc_23CEF
                mov     al, es:[di]
                cbw
                mov     cx, ax
                sub     cx, 20h ; ' '
                jmp     short loc_23CF5
; ---------------------------------------------------------------------------

loc_23CEF:                              ; ...
                mov     al, es:[di]
                cbw
                mov     cx, ax

loc_23CF5:                              ; ...
                sub     cx, [bp+var_2]
                neg     cx
                or      cx, cx
                jnz     short loc_23D07
                inc     si
                inc     di
                dec     [bp+arg_0]
                jnz     short loc_23CB6
                jmp     short loc_23D0B
; ---------------------------------------------------------------------------

loc_23D07:                              ; ...
                mov     ax, cx
                jmp     short loc_23D0D
; ---------------------------------------------------------------------------

loc_23D0B:                              ; ...
                xor     ax, ax

loc_23D0D:                              ; ...
                pop     si
                pop     di
                leave
                retn    0Ah
sub_23CA4       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23D14       proc near               ; ...

var_6           = word ptr -6
var_2           = word ptr -2
arg_0           = dword ptr  4
arg_4           = word ptr  8
arg_6           = dword ptr  0Ah
arg_A           = word ptr  0Eh
arg_C           = dword ptr  10h

                enter   6, 0
                push    di
                push    si
                mov     [bp+var_6], 3F8h
                mov     ax, ds:3C4h
                mov     dx, ds:3C6h
                mov     di, ax
                mov     [bp+var_2], dx
                push    large [bp+arg_C]
                push    [bp+arg_A]
                call    sub_1FD40
                or      ax, ax
                jz      short loc_23D91
                push    large [bp+arg_6]
                push    [bp+arg_4]
                call    sub_1FD40
                or      ax, ax
                jz      short loc_23D91
                cmp     [bp+arg_0], 0
                jz      short loc_23D8C

loc_23D4E:                              ; ...
                push    word ptr [bp+arg_C+2]
                push    [bp+var_2]
                push    di
                mov     eax, [bp+arg_0]
                cmp     eax, 7000h
                jbe     short loc_23D64
                mov     ax, 7000h

loc_23D64:                              ; ...
                mov     si, ax
                push    ax
                call    sub_1FD1D
                or      ax, ax
                jz      short loc_23D91
                push    word ptr [bp+arg_6+2]
                push    [bp+var_2]
                push    di
                push    si
                call    sub_1FD19
                or      ax, ax
                jz      short loc_23D91
                sub     ax, ax
                sub     word ptr [bp+arg_0], si
                sbb     word ptr [bp+arg_0+2], ax
                cmp     [bp+arg_0], 0
                jnz     short loc_23D4E

loc_23D8C:                              ; ...
                mov     [bp+var_6], 0

loc_23D91:                              ; ...
                mov     ax, [bp+var_6]
                pop     si
                pop     di
                leave
                retn    10h
sub_23D14       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23D9A       proc near               ; ...

var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8

                enter   4, 0
                push    di
                push    si
                mov     si, [bp+arg_2]
                mov     ax, [bp+arg_4]
                mov     dx, ax
                mov     di, si
                mov     es, ax
                mov     cx, 0FFFFh
                xor     ax, ax
                repne scasb
                not     cx
                dec     cx
                add     cx, si
                mov     ax, dx
                mov     [bp+var_4], cx
                mov     [bp+var_2], ax
                cmp     cx, si
                jnb     short loc_23DCA
                mov     bx, cx
                mov     di, si
                jmp     short loc_23DE1
; ---------------------------------------------------------------------------

loc_23DCA:                              ; ...
                mov     cx, [bp+arg_0]
                mov     bx, [bp+var_4]
                mov     di, si

loc_23DD2:                              ; ...
                mov     es, [bp+var_2]
                cmp     es:[bx], cl
                jz      short loc_23DE1
                dec     bx
                mov     ax, bx
                cmp     ax, di
                jnb     short loc_23DD2

loc_23DE1:                              ; ...
                mov     ax, bx
                cmp     ax, di
                jb      short loc_23DEC
                mov     dx, [bp+var_2]
                jmp     short loc_23DEF
; ---------------------------------------------------------------------------

loc_23DEC:                              ; ...
                xor     ax, ax
                cwd

loc_23DEF:                              ; ...
                pop     si
                pop     di
                leave
                retn    6
sub_23D9A       endp

; ---------------------------------------------------------------------------
                db    0

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_23DF6       proc near               ; ...

var_16          = dword ptr -16h
var_12          = dword ptr -12h
var_E           = word ptr -0Eh
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = byte ptr  4
arg_2           = dword ptr  6
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch
arg_A           = word ptr  0Eh
arg_C           = word ptr  10h
arg_E           = word ptr  12h

                enter   16h, 0
                push    di
                push    si
                mov     cx, [bp+arg_A]
                mov     bx, [bp+arg_C]
                mov     es, [bp+arg_E]
                mov     eax, es:[bx+0Ah]
                mov     dx, es:[bx+0Ch]
                mov     [bp+var_C], eax
                mov     si, cx
                mov     word ptr [bp+var_4+2], 1
                test    byte ptr es:[bx+4], 10h
                jz      short loc_23E5B
                mov     ah, es:[bx+5]
                and     ax, 200h
                cmp     ax, 1
                sbb     ax, ax
                neg     ax
                mov     dl, [bp+arg_0]
                and     dx, 4
                cmp     dx, 1
                sbb     dx, dx
                neg     dx
                cmp     ax, dx
                jnz     short loc_23E5B
                cmp     es:[bx+22h], cx
                ja      short loc_23E5B
                sub     si, es:[bx+22h]
                mov     eax, es:[bx+24h]
                mov     dx, es:[bx+26h]
                mov     [bp+var_8], eax
                mov     [bp+var_E], si
                jmp     short loc_23E6E
; ---------------------------------------------------------------------------

loc_23E5B:                              ; ...
                mov     [bp+var_E], si
                mov     es, [bp+arg_E]
                mov     eax, es:[bx+12h]
                mov     dx, es:[bx+14h]
                mov     [bp+var_8], eax

loc_23E6E:                              ; ...
                cmp     dx, 0FFh
                ja      loc_23F6C
                jb      short loc_23E7F
                cmp     ax, 0FFFFh
                jnb     loc_23F6C

loc_23E7F:                              ; ...
                mov     word ptr [bp+var_4+2], 0
                mov     si, word ptr [bp+var_C]

loc_23E87:                              ; ...
                push    word ptr [bp+var_C+2]
                push    si
                push    large [bp+var_8]
                lea     ax, [bp+var_12]
                push    ss
                push    ax
                call    sub_22816
                mov     di, ax
                or      di, ax
                jnz     loc_2404D
                les     bx, [bp+var_12]
                test    word ptr es:[bx+2], 400h
                jnz     short loc_23EAF
                mov     ax, 1
                jmp     short loc_23EB1
; ---------------------------------------------------------------------------

loc_23EAF:                              ; ...
                xor     ax, ax

loc_23EB1:                              ; ...
                mov     cl, [bp+arg_0]
                and     cx, 4
                cmp     cx, 1
                sbb     cx, cx
                neg     cx
                cmp     ax, cx
                jnz     short loc_23F13
                cmp     [bp+var_E], 0
                jnz     short loc_23F13
                push    word ptr [bp+var_C+2]
                push    si
                push    word ptr es:[bx+0Ch]
                mov     al, es:[bx+0Bh]
                sub     ah, ah
                push    ax
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                call    sub_232DA
                mov     di, ax
                or      di, ax
                jz      loc_23F74
                mov     word ptr [bp+var_4], di
                cmp     word ptr [bp+var_4+2], 0
                jnz     loc_23FEB
                mov     word ptr [bp+var_4+2], 1
                push    word ptr [bp+var_C+2]
                push    si
                push    large [bp+var_8]
                push    0
                call    sub_2285A
                push    1ED8h
                call    sub_206EA
                push    1ED8h
                call    sub_206EA
                jmp     loc_23E87
; ---------------------------------------------------------------------------

loc_23F13:                              ; ...
                mov     di, word ptr [bp+var_C]
                mov     ax, es:[bx]
                mov     dx, es:[bx+2]
                sub     dh, dh
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                push    word ptr [bp+var_C+2]
                push    di
                push    large [bp+var_8]
                push    0
                call    sub_2285A
                mov     eax, [bp+var_4]
                mov     [bp+var_8], eax
                les     bx, [bp+var_12]
                test    word ptr es:[bx+2], 400h
                jnz     short loc_23F4A
                mov     ax, 1
                jmp     short loc_23F4C
; ---------------------------------------------------------------------------

loc_23F4A:                              ; ...
                xor     ax, ax

loc_23F4C:                              ; ...
                mov     cl, [bp+arg_0]
                and     cx, 4
                cmp     cx, 1
                sbb     cx, cx
                neg     cx
                cmp     ax, cx
                jnz     short loc_23F60
                dec     [bp+var_E]

loc_23F60:                              ; ...
                cmp     [bp+var_8], 0FFFFFFh
                jb      loc_23E7F

loc_23F6C:                              ; ...
                mov     word ptr [bp+var_4], 103h
                jmp     loc_24050
; ---------------------------------------------------------------------------

loc_23F74:                              ; ...
                mov     word ptr [bp+var_4], di
                mov     si, [bp+arg_6]
                mov     ax, [bp+arg_8]
                or      ax, si
                jz      short loc_23FC8
                les     bx, [bp+var_16]
                sub     dx, dx
                mov     ax, es:[bx+0Ch]
                les     bx, [bp+arg_2]
                cmp     dx, es:[bx+2]
                jb      short loc_23FA1
                ja      short loc_23F9A
                cmp     ax, es:[bx]
                jb      short loc_23FA1

loc_23F9A:                              ; ...
                mov     word ptr [bp+var_4], 0EAh
                jmp     short loc_23FC8
; ---------------------------------------------------------------------------

loc_23FA1:                              ; ...
                push    [bp+arg_8]
                push    si
                mov     eax, [bp+var_16]
                add     ax, 14h
                push    eax
                les     bx, [bp+var_16]
                push    word ptr es:[bx+0Ch]
                call    sub_1FD94
                mov     di, si
                les     bx, [bp+var_16]
                mov     bx, es:[bx+0Ch]
                mov     es, [bp+arg_8]
                mov     byte ptr es:[bx+di], 0

loc_23FC8:                              ; ...
                les     bx, [bp+var_16]
                mov     ax, es:[bx+0Ch]
                les     bx, [bp+arg_2]
                mov     es:[bx], ax
                mov     word ptr es:[bx+2], 0
                push    large [bp+var_C]
                les     bx, [bp+var_12]
                push    word ptr es:[bx+0Ch]
                push    0
                call    sub_23296

loc_23FEB:                              ; ...
                push    large [bp+var_C]
                push    large [bp+var_8]
                push    0
                call    sub_2285A
                mov     bx, [bp+arg_C]
                mov     ax, [bp+arg_A]
                mov     es, [bp+arg_E]
                mov     es:[bx+22h], ax
                mov     eax, [bp+var_8]
                mov     es:[bx+24h], eax
                mov     al, es:[bx+4]
                and     al, 10h
                cmp     al, 10h
                jz      short loc_24020
                mov     es, [bp+arg_E]
                or      byte ptr es:[bx+4], 10h

loc_24020:                              ; ...
                test    [bp+arg_0], 4
                jz      short loc_2403C
                mov     es, [bp+arg_E]
                mov     ah, es:[bx+5]
                and     ah, 2
                cmp     ah, 2
                jz      short loc_24050
                or      byte ptr es:[bx+5], 2
                jmp     short loc_24050
; ---------------------------------------------------------------------------

loc_2403C:                              ; ...
                mov     es, [bp+arg_E]
                test    byte ptr es:[bx+5], 2
                jz      short loc_24050
                and     byte ptr es:[bx+5], 0FDh
                jmp     short loc_24050
; ---------------------------------------------------------------------------

loc_2404D:                              ; ...
                mov     word ptr [bp+var_4], di

loc_24050:                              ; ...
                mov     ax, word ptr [bp+var_4]
                pop     si
                pop     di
                leave
                retn    10h
sub_23DF6       endp

; ---------------------------------------------------------------------------
                db 7 dup(0)
BMP             db 'BM'                 ; WINME LOGO BMP
                dd 1F836h
                dd 0
                dd 436h
                dd 28h
                dd 140h
                dd 190h
                dw 1
                dw 8
                dd 0
                dd 1F400h
                dd 0B12h
                dd 0B12h
                dd 0
                dd 0ECh
byte_24096      db    0,   0,   0,   0
                db 0FFh,0FFh,0FFh,   0
                db 0FEh,0FAh,0FEh,   0
                db 0FAh,0F5h,0F4h,   0
                db 0B9h, 60h, 4Ah,   0
                db 0CEh, 8Ah, 7Ah,   0
                db 0D4h, 9Ah, 8Dh,   0
                db 0FEh,0FAh,0F9h,   0
                db 0C5h, 7Ch, 68h,   0
                db 0F2h,0CEh,0C2h,   0
                db 0F3h,0E3h,0DDh,   0
                db 0F7h,0EFh,0ECh,   0
                db 0EEh,0D6h,0CCh,   0
                db 0F6h,0EAh,0E5h,   0
                db 0EAh,0CEh,0C2h,   0
                db 0DEh,0B8h,0A5h,   0
                db 0EBh,0C7h,0B5h,   0
                db 0EAh,0CAh,0BAh,   0
                db 0EEh,0DBh,0D2h,   0
                db 0E5h,0C5h,0B4h,   0
                db 0F4h,0D4h,0C3h,   0
                db 0EAh,0CEh,0BEh,   0
                db 0E6h,0CAh,0BAh,   0
                db 0F2h,0DFh,0D5h,   0
                db 0DAh,0A6h, 85h,   0
                db 0DEh,0AAh, 8Bh,   0
                db 0DDh,0B4h, 9Ch,   0
                db 0E1h,0BEh,0A8h,   0
                db 0C0h,0A7h, 98h,   0
                db 0EBh,0D3h,0C5h,   0
                db 0EEh,0DAh,0CEh,   0
                db 0DAh,0ACh, 8Ch,   0
                db 0DAh,0B0h, 94h,   0
                db 0E2h,0C2h,0ADh,   0
                db 0DCh,0A5h, 7Ch,   0
                db 0D6h,0A6h, 83h,   0
                db 0DAh,0AAh, 86h,   0
                db 0D5h,0ABh, 8Bh,   0
                db 0E6h,0CAh,0B6h,   0
                db 0C7h,0B8h,0ADh,   0
                db 0D1h, 9Ah, 6Dh,   0
                db 0D4h,0A1h, 79h,   0
                db 0D6h,0AAh, 86h,   0
                db 0EBh,0D3h,0BDh,   0
                db  0Ah,   6,   2,   0
                db 0E8h,0CFh,0B5h,   0
                db  18h, 0Eh,   2,   0
                db 0FEh, 99h,   3,   0
                db  4Dh, 2Eh,   2,   0
                db  39h, 22h,   2,   0
                db 0F9h,0A8h, 2Fh,   0
                db  1Fh, 15h,   6,   0
                db 0F6h,0B7h, 58h,   0
                db 0F7h,0C3h, 76h,   0
                db 0E1h,0B2h, 6Ch,   0
                db 0E6h,0BFh, 86h,   0
                db 0F8h,0D4h,0A2h,   0
                db 0ECh,0D0h,0A8h,   0
                db 0BAh, 71h,   2,   0
                db  82h, 4Fh,   2,   0
                db  0Fh, 0Ah,   2,   0
                db 0F6h,0CFh, 94h,   0
                db 0CBh,0B2h, 8Bh,   0
                db 0F8h,0E5h,0C8h,   0
                db 0DFh,0D3h,0C0h,   0
                db 0EAh,0DCh,0C4h,   0
                db 0D2h,0C9h,0B4h,   0
                db 0DDh,0DAh,0D2h,   0
                db 0ADh, 9Ah, 4Eh,   0
                db 0B1h,0B0h, 7Eh,   0
                db 0BDh,0BCh, 92h,   0
                db    6,   6,   2,   0
                db 0FEh,0FEh,0F9h,   0
                db 0CDh,0CDh,0CCh,   0
                db  7Bh,0A3h, 2Bh,   0
                db  93h,0B8h, 5Ah,   0
                db 0BCh,0CAh,0A6h,   0
                db 0B2h,0CCh, 8Dh,   0
                db  57h, 99h,   3,   0
                db 0A2h,0C7h, 72h,   0
                db  71h,0B0h, 42h,   0
                db 0C0h,0DDh,0AAh,   0
                db  54h,0A9h, 1Bh,   0
                db 0E0h,0EEh,0D7h,   0
                db 0CEh,0E5h,0C2h,   0
                db  59h,0AEh, 33h,   0
                db  77h,0B6h, 5Ah,   0
                db  81h,0BCh, 6Eh,   0
                db 0A8h,0CCh, 9Ch,   0
                db  8Ah,0C3h, 7Dh,   0
                db 0F7h,0FBh,0F6h,   0
                db  94h,0C7h, 8Bh,   0
                db  59h,0B6h, 50h,   0
                db  68h,0B8h, 63h,   0
                db    2,   6,   2,   0
                db 0FAh,0FEh,0FAh,   0
                db  70h,0BEh, 73h,   0
                db 0A3h,0D5h,0A6h,   0
                db  7Ch,0C9h, 83h,   0
                db  9Dh,0D2h,0A2h,   0
                db  94h,0CFh, 9Ah,   0
                db  97h,0D2h, 9Eh,   0
                db  59h,0BDh, 67h,   0
                db  72h,0C9h, 7Dh,   0
                db  8Ch,0CEh, 95h,   0
                db  82h,0CBh, 8Eh,   0
                db  9Dh,0D8h,0A7h,   0
                db  5Ah,0C1h, 6Eh,   0
                db  73h,0C6h, 83h,   0
                db  5Eh,0C2h, 72h,   0
                db  62h,0C3h, 75h,   0
                db  66h,0C6h, 7Ah,   0
                db  6Bh,0C6h, 7Eh,   0
                db  73h,0CAh, 85h,   0
                db  84h,0CAh, 92h,   0
                db  5Eh,0C6h, 76h,   0
                db  5Eh,0C2h, 76h,   0
                db  7Bh,0CAh, 8Dh,   0
                db  7Bh,0C6h, 8Ch,   0
                db  83h,0CEh, 94h,   0
                db  8Bh,0CEh, 9Bh,   0
                db 0B2h,0DFh,0BCh,   0
                db  6Ch,0C6h, 82h,   0
                db  75h,0CAh, 8Bh,   0
                db  7Eh,0CAh, 92h,   0
                db  8Ch,0D2h, 9Eh,   0
                db  96h,0D6h,0A6h,   0
                db 0E8h,0F8h,0ECh,   0
                db    6, 15h, 0Ah,   0
                db  5Eh,0C6h, 7Ah,   0
                db  72h,0C6h, 8Ah,   0
                db  85h,0CEh, 9Ah,   0
                db  93h,0D2h,0A4h,   0
                db 0A2h,0D7h,0B1h,   0
                db 0A8h,0DAh,0B6h,   0
                db 0BEh,0EBh,0CBh,   0
                db 0F1h,0FCh,0F4h,   0
                db  8Eh,0D2h,0A2h,   0
                db  9Ch,0D6h,0ADh,   0
                db  1Ch,0C6h, 54h,   0
                db  27h,0CAh, 5Dh,   0
                db  32h,0CEh, 66h,   0
                db  32h,0CAh, 62h,   0
                db  36h,0D5h, 6Bh,   0
                db  2Eh,0B8h, 5Ch,   0
                db  22h, 88h, 44h,   0
                db  18h, 60h, 30h,   0
                db  11h, 44h, 22h,   0
                db  36h,0CEh, 66h,   0
                db  0Ah, 26h, 13h,   0
                db  3Ch,0CEh, 6Ch,   0
                db  43h,0D1h, 72h,   0
                db  53h,0D5h, 7Eh,   0
                db  7Ah,0DEh, 9Bh,   0
                db  96h,0E5h,0B0h,   0
                db  97h,0D3h,0AAh,   0
                db 0ABh,0EAh,0C0h,   0
                db 0CDh,0F0h,0D8h,   0
                db 0DCh,0F4h,0E4h,   0
                db  2Dh,0CAh, 62h,   0
                db  32h,0CAh, 66h,   0
                db  29h,0A6h, 53h,   0
                db  36h,0CEh, 6Ah,   0
                db  4Ah,0D2h, 78h,   0
                db  5Ah,0D6h, 84h,   0
                db  65h,0D9h, 8Ch,   0
                db  6Eh,0DBh, 93h,   0
                db  84h,0E2h,0A4h,   0
                db  3Eh,0CEh, 72h,   0
                db  85h,0D1h,0A3h,   0
                db    3, 0Ch,   7,   0
                db  70h,0C3h, 9Ah,   0
                db  8Eh,0D6h,0B2h,   0
                db  93h,0DBh,0BAh,   0
                db  97h,0DEh,0C5h,   0
                db  9Fh,0E3h,0CEh,   0
                db  71h,0C3h,0ADh,   0
                db  66h,0BBh,0AEh,   0
                db  27h, 29h, 29h,   0
                db 0F6h,0FCh,0FCh,   0
                db 0FAh,0FEh,0FEh,   0
                db  61h,0B4h,0C1h,   0
                db    2, 19h, 1Eh,   0
                db    2,0CFh,0FDh,   0
                db    2, 95h,0B8h,   0
                db    2, 5Fh, 76h,   0
                db    3, 32h, 3Fh,   0
                db  4Eh,0ADh,0CFh,   0
                db  36h,0A0h,0F1h,   0
                db 0D8h,0EEh,0FEh,   0
                db 0E6h,0F4h,0FEh,   0
                db 0A7h,0D5h,0FCh,   0
                db 0B8h,0DEh,0FDh,   0
                db 0C9h,0E6h,0FEh,   0
                db  54h,0A6h,0F3h,   0
                db  69h,0B2h,0F6h,   0
                db  7Fh,0BFh,0F9h,   0
                db  94h,0CAh,0FAh,   0
                db    2, 0Ah, 13h,   0
                db 0F1h,0F6h,0FCh,   0
                db  49h, 8Fh,0EFh,   0
                db  39h, 80h,0EEh,   0
                db 0C4h,0C9h,0D3h,   0
                db    2,   3,   6,   0
                db 0A6h,0B7h,0E9h,   0
                db 0D2h,0D7h,0E7h,   0
                db    3, 32h,0FDh,   0
                db    2, 20h, 9Eh,   0
                db  3Bh, 60h,0F8h,   0
                db  6Bh, 86h,0F3h,   0
                db  8Ah, 9Ch,0E4h,   0
                db  96h,0A0h,0C6h,   0
                db 0A3h,0ADh,0D4h,   0
                db 0BFh,0C9h,0EFh,   0
                db    2, 11h, 56h,   0
                db    2, 0Ah, 35h,   0
                db    2,   2, 0Dh,   0
                db 0FAh,0FAh,0FEh,   0
                db 0FEh,0FEh,0FEh,   0
                db 0FAh,0FAh,0FAh,   0
                db 0F4h,0F4h,0F4h,   0
                db 0EEh,0EEh,0EEh,   0
                db 0E8h,0E8h,0E8h,   0
                db 0E0h,0E0h,0E0h,   0
                db 0D8h,0D8h,0D8h,   0
                db 0D2h,0D2h,0D2h,   0
                db 0C2h,0C2h,0C2h,   0
                db 0B6h,0B6h,0B6h,   0
                db 0A7h,0A7h,0A7h,   0
                db  92h, 92h, 92h,   0
                db  7Ch, 7Ch, 7Ch,   0
                db  5Ch, 5Ch, 5Ch,   0
                db  40h, 40h, 40h,   0
                db  13h, 13h, 13h,   0
                db    7,   7,   7,   0
                db    2,   2,   2,   0
                db 0B8h, 7Fh, 4Dh,   0
                db 0B9h, 89h, 5Ch,   0
                db 0BBh, 92h, 6Ch,   0
                db 0BCh, 9Bh, 7Bh,   0
                db 0BEh,0A4h, 8Bh,   0
                db 0BFh,0ADh, 9Ah,   0
                db 0C1h,0B6h,0ABh,   0
                db 0C1h,0B8h,0AEh,   0
                db 0C1h,0B8h,0AEh,   0
                db 0C1h,0B8h,0AEh,   0
                db 0C1h,0B8h,0AEh,   0
                db 0C1h,0B8h,0AEh,   0
                db 0C1h,0B8h,0AEh,   0
                db 0C1h,0B6h,0ABh,   0
                db 0BFh,0ADh, 9Ah,   0
                db 0BEh,0A4h, 8Bh,   0
                db 0BCh, 9Bh, 7Bh,   0
                db 0BBh, 92h, 6Ch,   0
                db 0B9h, 89h, 5Ch,   0
                db 0B8h, 7Fh, 4Dh,   0
byte_24496      db 0FEh,0FFh,0FFh,0FEh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FEh,0FFh,0FFh,0FEh
                db 0FFh,0FEh,0FEh,0FFh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FDh,0FEh,0FEh,0FDh
                db 0FEh,0FDh,0FDh,0FEh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FCh,0FDh,0FDh,0FCh
                db 0FDh,0FCh,0FCh,0FDh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FBh,0FCh,0FCh,0FBh
                db 0FCh,0FBh,0FBh,0FCh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FAh,0FBh,0FBh,0FAh
                db 0FBh,0FAh,0FAh,0FBh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0F9h,0FAh,0FAh,0F9h
                db 0FAh,0F9h,0F9h,0FAh,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F8h,0F9h,0F9h,0F8h
                db 0F9h,0F8h,0F8h,0F9h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F7h,0F8h,0F8h,0F7h
                db 0F8h,0F7h,0F7h,0F8h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F6h,0F7h,0F7h,0F6h
                db 0F7h,0F6h,0F6h,0F7h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F5h,0F6h,0F6h,0F5h
                db 0F6h,0F5h,0F5h,0F6h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F4h,0F5h,0F5h,0F4h
                db 0F5h,0F4h,0F4h,0F5h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F3h,0F4h,0F4h,0F3h
                db 0F4h,0F3h,0F3h,0F4h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F2h,0F3h,0F3h,0F2h
                db 0F3h,0F2h,0F2h,0F3h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F1h,0F2h,0F2h,0F1h
                db 0F2h,0F1h,0F1h,0F2h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F0h,0F1h,0F1h,0F0h
                db 0F1h,0F0h,0F0h,0F1h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0EFh,0F0h,0F0h,0EFh
                db 0F0h,0EFh,0EFh,0F0h,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EEh,0EFh,0EFh,0EEh
                db 0EFh,0EEh,0EEh,0EFh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EDh,0EEh,0EEh,0EDh
                db 0EEh,0EDh,0EDh,0EEh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0ECh,0EDh,0EDh,0ECh
                db 0EDh,0ECh,0ECh,0EDh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0EDh,0ECh,0ECh,0EDh
                db 0FFh,0FEh,0FFh,0FFh,0FEh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FEh,0FFh,0FEh
                db 0FEh,0FFh,0FEh,0FEh,0FFh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FDh,0FEh,0FDh
                db 0FDh,0FEh,0FDh,0FDh,0FEh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FCh,0FDh,0FCh
                db 0FCh,0FDh,0FCh,0FCh,0FDh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FBh,0FCh,0FBh
                db 0FBh,0FCh,0FBh,0FBh,0FCh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FAh,0FBh,0FAh
                db 0FAh,0FBh,0FAh,0FAh,0FBh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0F9h,0FAh,0F9h
                db 0F9h,0FAh,0F9h,0F9h,0FAh,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F8h,0F9h,0F8h
                db 0F8h,0F9h,0F8h,0F8h,0F9h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F7h,0F8h,0F7h
                db 0F7h,0F8h,0F7h,0F7h,0F8h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F6h,0F7h,0F6h
                db 0F6h,0F7h,0F6h,0F6h,0F7h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F5h,0F6h,0F5h
                db 0F5h,0F6h,0F5h,0F5h,0F6h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F4h,0F5h,0F4h
                db 0F4h,0F5h,0F4h,0F4h,0F5h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F3h,0F4h,0F3h
                db 0F3h,0F4h,0F3h,0F3h,0F4h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F2h,0F3h,0F2h
                db 0F2h,0F3h,0F2h,0F2h,0F3h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F1h,0F2h,0F1h
                db 0F1h,0F2h,0F1h,0F1h,0F2h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F0h,0F1h,0F0h
                db 0F0h,0F1h,0F0h,0F0h,0F1h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0EFh,0F0h,0EFh
                db 0EFh,0F0h,0EFh,0EFh,0F0h,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EEh,0EFh,0EEh
                db 0EEh,0EFh,0EEh,0EEh,0EFh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EDh,0EEh,0EDh
                db 0EDh,0EEh,0EDh,0EDh,0EEh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0ECh,0EDh,0ECh
                db 0ECh,0EDh,0ECh,0ECh,0EDh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0EDh,0ECh,0EDh
                db 0FEh,0FFh,0FEh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
                db 0FFh,0FEh,0FFh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh
                db 0FEh,0FDh,0FEh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh
                db 0FDh,0FCh,0FDh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh
                db 0FCh,0FBh,0FCh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh
                db 0FBh,0FAh,0FBh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh
                db 0FAh,0F9h,0FAh,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h
                db 0F9h,0F8h,0F9h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h
                db 0F8h,0F7h,0F8h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h
                db 0F7h,0F6h,0F7h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
                db 0F6h,0F5h,0F6h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h
                db 0F5h,0F4h,0F5h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h
                db 0F4h,0F3h,0F4h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h
                db 0F3h,0F2h,0F3h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h
                db 0F2h,0F1h,0F2h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h
                db 0F1h,0F0h,0F1h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h
                db 0F0h,0EFh,0F0h,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh
                db 0EFh,0EEh,0EFh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh
                db 0EEh,0EDh,0EEh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh
                db 0EDh,0ECh,0EDh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh
                db 0FFh,0FFh,0FEh,0FFh,0FEh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FEh,0FFh,0FEh,0FFh
                db 0FEh,0FEh,0FFh,0FEh,0FFh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FDh,0FEh,0FDh,0FEh
                db 0FDh,0FDh,0FEh,0FDh,0FEh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FCh,0FDh,0FCh,0FDh
                db 0FCh,0FCh,0FDh,0FCh,0FDh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FBh,0FCh,0FBh,0FCh
                db 0FBh,0FBh,0FCh,0FBh,0FCh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FAh,0FBh,0FAh,0FBh
                db 0FAh,0FAh,0FBh,0FAh,0FBh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0F9h,0FAh,0F9h,0FAh
                db 0F9h,0F9h,0FAh,0F9h,0FAh,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F8h,0F9h,0F8h,0F9h
                db 0F8h,0F8h,0F9h,0F8h,0F9h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F7h,0F8h,0F7h,0F8h
                db 0F7h,0F7h,0F8h,0F7h,0F8h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F6h,0F7h,0F6h,0F7h
                db 0F6h,0F6h,0F7h,0F6h,0F7h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F5h,0F6h,0F5h,0F6h
                db 0F5h,0F5h,0F6h,0F5h,0F6h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F4h,0F5h,0F4h,0F5h
                db 0F4h,0F4h,0F5h,0F4h,0F5h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F3h,0F4h,0F3h,0F4h
                db 0F3h,0F3h,0F4h,0F3h,0F4h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F2h,0F3h,0F2h,0F3h
                db 0F2h,0F2h,0F3h,0F2h,0F3h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F1h,0F2h,0F1h,0F2h
                db 0F1h,0F1h,0F2h,0F1h,0F2h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F0h,0F1h,0F0h,0F1h
                db 0F0h,0F0h,0F1h,0F0h,0F1h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0EFh,0F0h,0EFh,0F0h
                db 0EFh,0EFh,0F0h,0EFh,0F0h,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EEh,0EFh,0EEh,0EFh
                db 0EEh,0EEh,0EFh,0EEh,0EFh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EDh,0EEh,0EDh,0EEh
                db 0EDh,0EDh,0EEh,0EDh,0EEh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0ECh,0EDh,0ECh,0EDh
                db 0ECh,0ECh,0EDh,0ECh,0EDh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0EDh,0ECh,0EDh,0ECh
                db 0FFh,0FEh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
                db 0FEh,0FFh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh
                db 0FDh,0FEh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh
                db 0FCh,0FDh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh
                db 0FBh,0FCh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh
                db 0FAh,0FBh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh
                db 0F9h,0FAh,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h
                db 0F8h,0F9h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h
                db 0F7h,0F8h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h
                db 0F6h,0F7h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
                db 0F5h,0F6h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h
                db 0F4h,0F5h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h
                db 0F3h,0F4h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h
                db 0F2h,0F3h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h
                db 0F1h,0F2h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h
                db 0F0h,0F1h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h
                db 0EFh,0F0h,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh
                db 0EEh,0EFh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh
                db 0EDh,0EEh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh
                db 0ECh,0EDh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh
                db 0FEh,0FFh,0FFh,0FEh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FEh,0FFh,0FEh,0FEh
                db 0FFh,0FEh,0FEh,0FFh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FDh,0FEh,0FDh,0FDh
                db 0FEh,0FDh,0FDh,0FEh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FCh,0FDh,0FCh,0FCh
                db 0FDh,0FCh,0FCh,0FDh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FBh,0FCh,0FBh,0FBh
                db 0FCh,0FBh,0FBh,0FCh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FAh,0FBh,0FAh,0FAh
                db 0FBh,0FAh,0FAh,0FBh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0F9h,0FAh,0F9h,0F9h
                db 0FAh,0F9h,0F9h,0FAh,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F8h,0F9h,0F8h,0F8h
                db 0F9h,0F8h,0F8h,0F9h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F7h,0F8h,0F7h,0F7h
                db 0F8h,0F7h,0F7h,0F8h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F6h,0F7h,0F6h,0F6h
                db 0F7h,0F6h,0F6h,0F7h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F5h,0F6h,0F5h,0F5h
                db 0F6h,0F5h,0F5h,0F6h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F4h,0F5h,0F4h,0F4h
                db 0F5h,0F4h,0F4h,0F5h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F3h,0F4h,0F3h,0F3h
                db 0F4h,0F3h,0F3h,0F4h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F2h,0F3h,0F2h,0F2h
                db 0F3h,0F2h,0F2h,0F3h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F1h,0F2h,0F1h,0F1h
                db 0F2h,0F1h,0F1h,0F2h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F0h,0F1h,0F0h,0F0h
                db 0F1h,0F0h,0F0h,0F1h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0EFh,0F0h,0EFh,0EFh
                db 0F0h,0EFh,0EFh,0F0h,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EEh,0EFh,0EEh,0EEh
                db 0EFh,0EEh,0EEh,0EFh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EDh,0EEh,0EDh,0EDh
                db 0EEh,0EDh,0EDh,0EEh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0ECh,0EDh,0ECh,0ECh
                db 0EDh,0ECh,0ECh,0EDh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0EDh,0ECh,0EDh,0EDh
                db 0FFh,0FEh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
                db 0FEh,0FFh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh,0FEh
                db 0FDh,0FEh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh,0FDh
                db 0FCh,0FDh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh
                db 0FBh,0FCh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh,0FBh
                db 0FAh,0FBh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh,0FAh
                db 0F9h,0FAh,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h,0F9h
                db 0F8h,0F9h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h,0F8h
                db 0F7h,0F8h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h,0F7h
                db 0F6h,0F7h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
                db 0F5h,0F6h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h,0F5h
                db 0F4h,0F5h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h,0F4h
                db 0F3h,0F4h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h,0F3h
                db 0F2h,0F3h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h,0F2h
                db 0F1h,0F2h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h,0F1h
                db 0F0h,0F1h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h
                db 0EFh,0F0h,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh,0EFh
                db 0EEh,0EFh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh,0EEh
                db 0EDh,0EEh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh,0EDh
                db 0ECh,0EDh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh,0ECh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,0DAh,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0DCh,0E2h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0E3h,0E4h,0E1h,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,0DAh,   1,   1,0DAh,0DAh,   1,   1,   1,0DAh,   1,0DAh,   2
                db    1,0DAh,0D9h,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,   1,   1,   1,   1
                db    1,0DAh,   2,0DAh,   1,0B4h,   2,   1,0DAh,   1,   1,   1,   1,0DAh,0DBh,0DAh
                db    1,   1,   1,0DAh,0DAh,0DEh,0E5h,   1,   1,   1,   1,0DAh,   1,0DAh,0DAh,   1
                db    1,0DAh,0DAh,   1,0DAh,   1,0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,0E0h,0E2h,0DFh,0E3h,0DDh,   1,   1, 49h,0E8h,0DFh,0E6h,0E3h
                db 0DAh,0E7h,0E6h, 49h,0E8h, 5Ah,   1,0DDh,0E7h,0E7h,0E0h,0E6h,0E6h,0DBh,0E6h,0E6h
                db 0DBh,0E6h,0E6h,0DBh,   1,0E2h,0E2h,   1,0E4h,0E2h,0E3h,0E4h,0E7h,0E2h,0E3h,   2
                db 0E7h,0E5h, 49h,0E7h,0E2h,0E3h,0E7h,0E2h,0E3h,0DCh,0E6h,0E3h,   1,0DAh,0E5h,0E7h
                db 0E2h,0E6h,0E7h,0DEh,0E4h,0DCh,0E7h,0E7h,0DDh,0E6h,0E7h,0DEh,0E4h,0DCh,0E6h,0E7h
                db 0DEh,0E6h,0E4h,0E3h,0E4h,0E7h,0DFh,0E3h,0E2h,0E5h,0E5h,0DFh,   1,   1,0DBh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh,0E2h,0E3h,0E7h,0E3h,0E1h,   1,   1,0E0h,0E6h,   1,0DCh,0E5h
                db 0E5h,0E3h,0E5h,0E0h,0E6h,   1,   1,0DAh,0E5h,0DFh,0DFh,0E5h,0E4h,0E4h,0E4h,0E4h
                db 0E4h,0E4h,0E4h, 49h,   1,0E3h,0E2h,0DCh,0E5h,0E3h,0E5h,0E5h,0DEh,0E2h,0E4h,0E2h
                db 0E2h,0E5h, 49h, 49h,0E6h,0E4h, 49h,0E5h,0E4h,0DFh,0E5h,0DBh,   1,0E2h,0E5h,0DCh
                db 0E3h,0E4h,0E2h,0E4h,0E5h,0DDh,0E5h,0E3h,0E4h,0E4h,0E2h,0E4h,0E5h, 49h,0E5h,0E5h
                db 0E3h,0E5h,0E0h,0E5h,0E4h,0E2h,0E5h,0E4h,0E3h,0E4h, 49h,0DCh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DDh,0E2h,0E3h,0DBh,0DCh, 49h,   1,   1,0DFh,0E5h,0DBh,0E3h,0E6h
                db 0E5h,0E3h,0E5h,0DFh,0E5h,0DCh,0E3h,0DEh,0E1h,0E4h,0E5h,0E4h, 49h,0E5h,0E3h, 49h
                db 0E5h,0E3h, 49h,0E5h,   1,0E2h,0E5h,0E6h,0E5h,0E3h,0E6h,0E5h,   1, 49h,0E3h,0E4h
                db 0E0h,0E3h,0E4h,0E7h,0E5h,0E5h,0DCh,0E6h,0E4h,0DEh,0E5h,   1,   1,0E4h,0E2h,0DAh
                db  49h,0E4h,0DFh,0E5h,0E4h,0DCh,0E5h,0E0h,0E7h,0E3h,0E0h,0E5h,0E4h,0DEh,0E6h,0E6h
                db 0E2h,0E5h,0DFh,0E6h,0E4h,0DCh,0E6h,0E3h,0E3h,0E5h,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0DCh, 49h,0E4h,0DCh,0DDh, 49h,   1,   1,0DFh,0E5h,0E0h,0E6h,0E6h
                db 0E3h,0E7h,0E3h,0DFh,0E5h,0DCh,0E5h,0DFh,   1,0E6h,0E6h,0E3h,0E1h,0E6h,0E3h,0E1h
                db 0E6h,0E3h, 49h,0E6h,   1,0E2h,0E6h,0E6h,0E5h,0E3h,0E5h,0E5h,0DDh,0E2h,0E6h,0E4h
                db 0E2h,0E4h,0E6h,0E4h,0DCh,0E5h,0E0h,0E6h,0E5h, 49h,0E6h,0DCh,0DAh,0E4h, 49h,0DAh
                db 0E0h,0E5h,0E2h,0E4h,0E7h,0E2h,0E5h,0E2h,0E6h,0E4h, 49h,0E5h,0E6h,0E0h,0E0h,0E7h
                db 0E3h,0E5h, 49h,0E5h,0E5h,0E1h,0E5h,0E5h,0E4h,0E5h,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 49h,0E2h,0E6h,0E3h,0E1h,   1,   1,0DFh,0E5h,0E6h, 49h,0E3h
                db 0E6h,0E3h,0E6h,0DFh,0E5h,0DAh,   1,   1,0DAh,0E4h,0E5h,0E3h, 49h,0E5h,0E3h, 49h
                db 0E5h,0E3h,0E2h,0E5h,0DAh,0E2h,0E6h,0E4h,0E7h,0E1h,0E2h,0E4h,0E6h,0E1h,0E6h,0E2h
                db 0E6h,0E5h,0E0h,0E6h,0E2h,0E3h,0E6h,0E2h,0E7h,0E4h,0E7h, 49h,   1,0E4h,0E3h,   1
                db 0DAh,0E5h,0E6h,0DFh,0E5h,0E3h,0E5h,0E6h,0E0h,0E5h,0E6h,0DFh,0E6h,0E3h,0E5h,0E5h
                db 0E2h,0E7h,0E2h, 49h,0E4h,0E6h,0DFh,0E4h,0E6h,0E0h,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,0E0h,0E3h, 49h,0E5h,0DCh,   1,   1,0E3h,0E5h,0DEh,0E6h,0E6h
                db  49h,0E6h, 49h,0E3h,0E5h,0DAh,   1,0DCh,0E4h,0E6h, 49h,0E6h,0E6h, 49h,0E6h,0E6h
                db  49h,0E6h,0E6h,0DFh,   1,0E3h,0E7h,0DDh,0E7h, 49h, 49h,0DCh,0DFh,0DAh,0DBh,0DAh
                db 0DEh,0DCh,   1,0DFh,0DCh,0DBh,0DFh,0DAh,0E6h,0E4h,0E5h,0DCh,   1,0DFh,0E6h,0E5h
                db 0E2h,0DCh,0DEh,   1,0DBh,0DBh,0DCh,0DEh,   1,0DCh,0DEh,   1,0DBh,0DBh,0DFh,0DDh
                db 0DFh,0E5h,0DFh,0E2h,0DCh,0DEh,   1,0DCh,0DEh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,0DAh,0E0h,0E4h,0DEh,   1,   1,   1,0DFh,0E5h,   1,0E3h,0E2h
                db    1,0E3h,   1,0DFh,0E5h,   1,   1,0DAh,0E3h,0E3h,   1,0E2h,0E3h,   1,0E2h,0E3h
                db    1,0E2h,0E3h,   1,   1,0DEh,0DFh,   1,0E0h,0DDh,0DEh,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1, 49h,0E2h,0DAh,   1,   1,   1, 49h,0E4h
                db 0DDh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh,0DCh,0DEh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Fh, 7Fh
                db  7Fh, 7Fh, 7Fh, 7Fh,   1, 5Ah, 9Dh, 5Fh, 88h,0B3h, 5Fh, 7Fh,0DAh,   1, 9Eh, 87h
                db  7Fh, 7Fh, 5Fh,   1, 88h, 87h, 7Fh,   1,   1, 7Fh, 88h,   1, 88h, 88h,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Eh, 98h
                db  98h, 98h,0A3h,0A5h, 5Ah, 99h, 8Bh, 99h,0A6h, 87h, 9Dh,0A4h, 88h, 7Fh,0A3h, 8Bh
                db 0A7h,0A5h, 7Fh, 5Ah,0A5h, 8Bh, 97h, 9Eh,0DAh, 99h, 9Ah,   1,0A7h, 99h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Bh
                db  8Ch, 8Ch, 8Ch, 97h, 9Dh, 9Fh, 98h,0A3h, 8Bh, 87h, 87h, 8Ch, 88h, 9Ch, 8Bh, 98h
                db  99h, 9Fh, 7Fh, 9Ch, 8Bh,0A6h, 8Ch, 99h,   1,0A3h, 99h,0DAh,0A6h,0A3h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch
                db  9Ch, 7Fh, 9Eh, 7Fh, 9Ah, 9Fh, 7Fh, 87h, 8Bh, 87h, 87h,0A2h, 5Ah, 9Ah,0A2h, 88h
                db  87h,0A2h, 7Fh,0A5h, 98h,0B3h, 9Ah, 96h, 5Fh,0A4h,0A7h,0DAh, 99h,0A4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch
                db  87h,   1,   1,   1, 99h, 98h,0DAh, 88h,0A2h, 87h, 87h,0A2h, 5Ah, 9Ah,0A3h,   1
                db  87h, 8Dh, 9Eh,0A3h, 99h,   1, 87h, 8Dh, 7Fh,0A4h,0A7h,0DAh,0A6h,0A4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch
                db  87h,   1,   1,0DAh,0A6h,0A5h,   1,0B3h,0A8h, 87h, 87h,0A2h, 5Ah, 9Ah, 97h,   1
                db  87h, 94h, 9Eh, 97h,0A7h,   1, 87h, 8Ch, 9Dh,0A5h,0A7h,0DAh, 99h,0A4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch
                db  87h,   1,   1,   1,0A5h,0A5h,   1, 5Ah, 96h, 87h, 87h, 94h, 5Ah, 9Ah,0A3h,0DAh
                db  87h,0A2h, 9Eh, 96h, 9Ah,   1, 87h, 8Ch, 87h,0A5h,0A7h,   1,0A6h,0A4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 9Fh
                db 0A7h, 9Ch, 9Ch, 88h,0A6h,0A5h,   1,0B3h,0A8h, 87h, 87h,0A2h, 5Ah, 9Ah, 97h,   1
                db  87h, 94h, 9Eh,0A8h,0A7h,   1, 87h, 8Ch, 9Dh,0A5h,0A7h,0DAh, 99h,0A4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Dh
                db  8Ch, 8Ch, 8Ch, 9Dh,0A7h,0A4h,   1, 88h, 96h, 87h, 87h,0A2h, 5Ah, 9Ah,0A3h,   1
                db  87h, 94h, 9Eh,0A3h, 99h,   1, 87h, 8Dh, 9Eh,0A4h, 99h,   1, 99h,0A4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 9Fh
                db  98h,0A5h,0A5h, 7Fh, 9Ah, 8Dh, 5Ah, 9Dh, 8Ch, 87h, 87h,0A2h, 88h, 9Ah, 97h, 5Ah
                db  87h, 94h, 7Fh,0A4h,0A4h,   1, 9Ah, 96h,0B3h,0A5h,0A4h, 5Fh,0A5h,0A4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch
                db  87h,   1,   1,0DAh, 9Eh, 8Ch,0A6h, 98h, 8Ch, 87h, 87h, 8Dh, 9Ch, 96h, 8Dh,0A5h
                db  9Ch, 9Fh, 7Fh, 9Ch, 8Bh,0A7h,0A2h,0A6h,   1,0A4h, 9Fh,0A6h, 9Fh,0A6h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch
                db  87h,   1,   1,   1,0DAh,0A7h, 8Ch,0A6h, 97h, 87h, 9Dh,0A4h, 9Ah,0A0h, 9Fh, 98h
                db  87h,0A3h, 7Fh, 88h,0A5h, 8Bh, 97h, 9Eh,   1,0A6h, 99h, 96h, 8Dh, 87h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch
                db  87h,   1,   1,   1,   1, 5Fh, 9Dh, 7Fh, 97h, 9Ch, 5Fh, 7Fh, 88h,0A7h, 97h, 9Eh
                db  5Fh, 7Fh,0B4h,   1, 88h, 9Dh, 9Eh,   1,   1, 7Fh, 88h, 9Eh, 9Dh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 9Fh
                db  9Ah, 9Eh, 9Dh, 9Eh,0DAh,   1,   1, 5Fh, 97h, 9Ch, 9Eh,0A7h, 5Fh, 9Ch, 97h,   1
                db  9Dh,0A7h, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch
                db  8Ch, 9Fh, 8Ch, 97h, 5Ah,   1,   1, 88h,0A2h, 9Ch, 9Ch, 8Bh, 7Fh, 87h,0A4h,   1
                db  9Ch, 8Bh, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Eh,0A4h
                db 0A4h,0A4h, 98h,0A6h, 5Fh,   1,   1,0B3h,0A5h, 9Dh, 9Dh,0A4h, 7Fh,   1, 7Fh,   1
                db  87h,0A4h, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Fh, 88h
                db  88h, 88h, 88h, 88h,0DAh,   1,   1,   1, 88h, 5Fh, 5Fh, 88h,0DAh,   1,   1,   1
                db  5Fh, 88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 7Fh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,   1
                db    1,   1,   1,   1,   1, 7Fh,0DAh,   1,   1,   1,   1,   1,   1,   1,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh,0A6h
                db  7Fh, 88h,0A6h, 9Dh,0DAh,0A7h, 9Ah, 5Fh,0A6h, 9Dh, 9Dh,0A4h, 88h,0A7h, 99h,   1
                db  7Fh,0A4h, 94h, 9Ah,   1, 87h, 99h,0B4h, 9Eh,0A5h, 9Eh, 9Ch, 99h,0DAh, 9Dh,0A6h
                db  5Ah, 9Ah, 9Ah,0DAh, 9Ch, 94h,0A7h,0A7h, 87h, 9Eh,0A5h, 9Eh, 88h,0A6h, 9Dh,   1
                db  99h, 9Ch,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 9Fh
                db  7Fh, 9Eh, 8Ch, 9Ch,   1,0A3h,0A6h, 5Fh, 8Dh, 87h, 87h, 8Eh, 88h,0A5h,0A4h,   1
                db  99h, 8Ch,0A3h, 9Fh, 9Dh, 9Ch, 96h,0B4h, 9Eh, 8Ch, 87h,0A7h, 97h,   1, 9Ch, 8Eh
                db  88h,0A5h,0A6h,0DAh, 98h, 9Fh, 97h, 9Fh, 9Ah, 9Dh, 8Bh, 9Dh, 7Fh, 8Ch, 9Ch,   1
                db  96h, 99h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 8Dh
                db  7Fh, 9Dh, 8Bh,0A7h,   1, 98h, 99h, 5Ah, 96h, 87h, 87h,0A2h, 88h,0A6h,0A5h, 88h
                db  94h, 9Ah,0B3h, 96h, 99h, 87h,0A8h,0B4h, 9Eh, 8Ch, 9Dh,0A7h, 97h,   1, 9Ch, 96h
                db  88h,0A6h, 99h, 5Ah, 96h, 9Ch, 87h, 8Ch, 9Ch, 9Dh, 9Fh, 9Dh, 88h,0A0h, 9Ch,   1
                db 0A3h,0A7h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 8Dh
                db  7Fh, 87h, 8Bh,0A5h,   1, 98h,0A6h, 5Fh, 96h, 87h, 87h,0A2h, 88h,0A6h,0A5h, 9Dh
                db  9Fh, 9Dh,0DAh, 9Ch, 9Ch, 9Ch, 97h, 5Fh, 9Eh, 9Fh, 9Dh, 9Ah,0A3h,   1, 9Ch,0A2h
                db  88h,0A6h, 99h, 88h,0A2h, 87h,0B4h, 94h, 9Ah, 9Dh, 8Ch, 9Eh, 7Fh,0A0h, 9Ch,   1
                db 0A3h,0A7h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 8Dh
                db  7Fh, 9Ah, 8Ch, 98h, 5Fh, 98h,0A6h, 5Fh, 96h, 87h, 87h,0A2h, 7Fh,0A6h,0A6h, 87h
                db  8Dh, 9Eh,   1,   1,   1, 9Ch,0A8h, 5Fh, 9Eh, 9Fh, 9Dh,0A7h,0A3h,   1, 9Ch,0A2h
                db  88h,0A5h, 99h, 7Fh, 8Dh, 87h,   1, 97h, 9Ah, 9Dh, 9Fh, 9Dh, 88h,0A0h, 9Ch,   1
                db 0A3h,0A7h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 8Dh
                db  9Eh,0A5h,0A5h,0A3h, 9Eh,0A4h,0A6h, 5Fh, 96h, 87h, 87h,0A2h, 88h,0A6h,0A5h, 87h
                db  9Fh,0A4h,0A5h,0A5h, 9Ah, 9Ch, 97h,0B4h, 9Eh, 8Ch, 9Dh, 9Ah, 97h,   1, 9Ch,0A2h
                db  88h,0A6h, 99h, 7Fh, 8Dh, 87h,   1,0A3h, 9Ah, 9Dh, 8Ch, 9Eh, 7Fh,0A0h, 9Ch,   1
                db  97h,0A7h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h,0A2h
                db  9Eh,0A3h, 9Ah, 98h, 87h,0A4h,0A6h, 5Fh, 96h, 87h, 87h,0A2h, 88h,0A6h,0A6h, 9Dh
                db  9Fh,0A3h, 98h, 9Fh,0A6h, 9Ch, 97h, 5Fh, 9Eh, 9Fh, 9Dh,0A7h,0A3h,   1, 9Ch, 96h
                db  88h,0A6h, 99h, 7Fh, 8Dh, 87h,0DAh, 97h, 9Ah, 9Dh, 9Fh, 9Dh, 7Fh,0A0h, 9Ch,   1
                db 0A3h,0A7h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h,0A2h
                db  9Dh, 96h, 87h,0A6h, 9Ah,0A5h,0A6h, 5Fh, 96h, 87h, 87h,0A2h, 88h,0A6h,0A5h, 9Dh
                db  9Fh, 9Dh,0DAh,0A6h,0A6h, 9Ch, 96h, 5Fh, 9Eh, 9Fh, 9Dh,0A7h, 97h,   1, 9Ch,0A2h
                db  88h,0A5h, 99h, 7Fh, 8Dh, 87h,   1,0A3h, 9Ah, 9Dh, 8Ch, 9Eh, 88h, 8Eh, 9Ch,0DAh
                db 0A3h,0A7h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 96h
                db  9Ch, 96h, 7Fh,0A7h, 99h,0A4h,0A6h, 5Fh, 96h, 87h, 87h, 94h, 88h,0A6h,0A5h, 7Fh
                db  9Fh, 87h,   1, 98h,0A7h, 87h, 8Ch, 7Fh, 9Eh, 8Ch, 9Dh, 9Ah, 9Fh, 5Fh, 9Ch, 94h
                db  88h,0A6h, 99h, 7Fh, 8Dh, 87h,   1,0A3h, 9Ah, 9Dh, 8Ch, 87h, 88h, 8Ch, 9Ah,0DAh
                db 0A8h,0A7h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h,0A8h
                db 0A7h,0A3h,   1, 9Ch,0A4h, 98h, 99h,0B3h, 96h, 87h, 87h,0A2h, 88h,0A5h,0A5h, 5Fh
                db  98h,0A4h, 87h, 9Fh, 87h, 87h, 8Bh, 99h, 99h, 8Ch, 9Eh, 9Ah, 8Ch,0A7h,0A4h, 97h
                db  5Fh,0A5h, 99h, 7Fh,0A0h, 87h,   1, 97h, 9Ah, 9Dh, 8Ch,0A5h,0A7h, 9Fh, 98h, 9Ah
                db  8Ch, 9Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h,0A8h
                db 0A5h,0A4h,   1, 9Dh,0A3h,0A3h, 99h, 5Ah, 97h, 87h, 87h,0A2h, 88h,0A6h,0A5h,   1
                db  87h, 9Fh, 8Ch, 98h, 5Fh, 9Ch,0A3h, 98h, 8Bh,0A4h, 5Fh,0A7h,0A4h,0A3h, 8Bh, 99h
                db    1,0A6h, 99h, 7Fh, 96h, 87h,   1,0A3h, 9Ah, 9Dh, 97h,0A4h, 8Bh,0A4h, 9Ah, 8Bh
                db  8Dh, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h,0A2h
                db  96h, 99h,   1, 7Fh,0A3h,0A2h, 99h,   1, 7Fh,0B4h, 87h,0A2h, 88h,0A6h,0A4h,   1
                db    1, 9Dh, 9Ch, 7Fh,   1, 88h, 9Eh, 9Eh, 9Ch, 7Fh,   1, 7Fh, 7Fh, 9Eh, 9Ch, 88h
                db    1, 7Fh, 88h, 5Fh, 9Dh, 88h,   1, 9Eh, 7Fh, 88h, 9Eh, 7Fh, 9Ch, 9Eh,0B4h, 9Ch
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Dh, 9Fh
                db  8Ch, 9Ah,   1, 5Fh,0A4h, 8Bh, 99h,0B4h, 87h, 88h, 87h, 94h, 88h,0A6h,0A5h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 8Ch
                db  8Ch, 87h,   1,   1,0A6h, 8Bh, 99h, 5Ah, 8Ch, 9Ch, 87h, 8Dh, 88h,0A5h,0A4h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 98h,0A5h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 8Ch
                db  8Dh, 9Eh,   1,   1, 9Ah, 8Bh, 99h, 88h, 8Dh, 87h, 87h, 8Dh, 88h,0A5h,0A4h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0A4h,0A5h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Ah, 9Eh
                db  9Eh, 5Fh,   1,   1, 88h, 9Eh, 7Fh,0DAh, 9Eh, 88h, 5Ah, 9Eh, 5Fh, 7Fh, 7Fh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 7Fh, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0B4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Eh, 87h, 9Dh,0DAh
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db  9Eh, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 9Ah, 8Dh, 9Fh, 8Dh, 9Ch
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 7Fh
                db 0A3h, 97h, 88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 9Fh, 9Fh, 8Eh, 8Ch,0A8h
                db  5Ah,   1,   1,   1,   1,   1,   1,   1,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db 0DBh,0DCh,0DAh,   1,0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0A7h
                db  8Ch, 9Fh, 87h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh, 9Dh, 88h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0A6h, 8Ch, 8Dh, 9Fh, 8Ch, 98h
                db  5Ah,   1,   1,   1,   1,   1, 7Fh, 9Eh, 88h,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,0DAh,0DAh,0DAh,0DAh,0DAh,0DAh,0D9h, 5Ah,   2,   1,   1,   1
                db    1,   1,   1,0DAh,0DBh,0DAh,0DAh,0DAh,0DAh,0DAh,0DBh,   1,   1,   1,   1,   1
                db    1,   1,   1,0DBh,0DAh,0DAh,0DAh,0DAh,0DAh,0DBh,   1,0DAh,0DBh,0DBh,0DAh,0DAh
                db 0DAh,0DAh, 5Fh,   2,   1,   1,   1,   1,0DBh,0DBh,0DAh,0DAh,0DAh,0DAh,0DAh,0DAh
                db    1,   1,   1,   1,   1,0DAh,0E2h,0E4h,0E5h,0E5h,0E2h,0DAh,0DAh,   1,0DAh,0DBh
                db    2,0DAh, 5Fh,   2,0DBh,0DBh,   2,   1,   1,   1,   1,   1,   1,0DFh,0E5h,0E6h
                db 0E7h,0E7h,0E7h,0E6h,0E4h,0DDh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   2,0DAh,0DAh,0DAh,0DBh,0DAh,   1,   1,   1,   1,   1,0DAh,0DBh,0DAh,0DAh
                db 0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E1h,0E4h,0E5h
                db 0E6h,0E6h,0E5h,0E4h,0E2h,   1,   1,   1,   1,   1,   1,   1,   1,   1, 7Fh, 96h
                db  9Fh, 8Ch, 9Ch,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 87h, 9Fh,0A7h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1, 9Eh, 8Dh,0A0h, 9Fh,0A3h, 9Ch, 9Dh
                db    1,   1,   1,   1, 88h,0A7h, 98h, 97h,0A4h,0A7h, 9Eh,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 49h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,0E7h,0DEh,   1,   1,   1
                db    1,   1,0DAh,0E3h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,0E5h,   1,   1,   1,   1
                db    1,   1,   1,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,   1,0DBh,0E7h,0E8h,0E8h,0E8h
                db 0E8h,0E8h,0E8h,0E7h,0DCh,   1,   1,0DAh,0E6h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h
                db 0E1h,   1,0DAh,   2,0DDh,0E6h,0E9h,   0,   0,   0,0E9h,0E6h,0DCh,0DAh,0E5h,0E7h
                db 0E7h,0E7h,0E7h,0E7h,0E7h,0E6h, 5Ah,   1,   1,   1,   1,0DAh,0E5h,0B2h,   0,   0
                db    0,   0,   0,   0,0EBh,0E8h,0E3h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1
                db 0E3h,0E8h,0E8h,0E8h,0E8h,0E8h,0E6h,   1,   1,   1,   1,0DAh,0E6h,0E8h,0E8h,0E8h
                db 0E8h,0E8h,0E3h,   1,   1,   1,   1,   1,   1,0DAh,0DAh, 49h,0E7h,0B2h,0EAh,   0
                db    0,   0,   0,0EBh,0E9h,0E8h,0E4h,   1,   1,   1,   1,   1,   1,   1, 9Dh, 9Fh
                db  8Dh, 8Ch,0A7h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0A5h, 8Bh, 96h
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1, 9Ah, 8Ch, 8Dh, 8Ch, 9Ch,   1,   1
                db    1,   1,   1, 5Ah,0A6h, 8Bh, 8Ch, 8Ch, 8Ch, 8Bh,0A3h, 9Dh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0E5h,0EBh,   0,   0,   0,   0,   0,   0,   0,0E2h,   1,   1,   1
                db    1,   1,   1,0E7h,   0,   0,   0,   0,   0,   0,   0,0E8h,   1,   1,   1,   1
                db    1,0DAh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0EAh,   0,   0,   0
                db    0,   0,   0,0E9h,0DCh,   1,   1,0DBh,0B2h,0EBh,   0,   0,   0,   0,   0,   0
                db 0E2h,   1,0DAh,0DCh,0E7h,   0,   0,   0,   0,   0,   0,   0,0E6h,0DAh,0E8h,   0
                db    0,   0,   0,   0,   0,0E9h,0DCh,   1,   1,   1,0DCh,0E7h,0EBh,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0EAh,0E5h,0DBh,   1,   1,   1,   1,   1,   1,0DAh
                db 0E7h,0EBh,   0,   0,   0,   0,0B2h,0DBh,   1,   1,   1,0DBh,0B2h,   0,   0,   0
                db    0,   0,0E7h,   1,   1,   1,   1,   1,0DAh,0DAh,0E5h,0E9h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0EAh,0E7h,0DDh,0DAh,   1,   1,   1,   1, 9Dh, 9Fh
                db  8Dh, 8Ch,0A4h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,0B4h,0A4h, 8Ch, 9Fh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,0A6h, 8Ch, 8Eh, 96h, 7Fh,   1,   1
                db    1,   1,   1, 9Ah, 8Ch, 8Eh, 8Dh, 8Dh, 9Fh, 9Fh, 8Bh, 98h, 88h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,   1,   1,   1
                db    1,   1,   1,0E8h,   0,   0,   0,   0,   0,   0,   0,0B2h,0DBh,   1,   1,   1
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,0DAh,0E8h,   0,   0,   0,   0,   0,   0,0EBh
                db 0E2h,   1,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,   0,0EAh,0E2h,0E7h,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   2,0E7h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E5h,0DAh,   1,   1,   1,   1,   1,   1
                db 0E7h,   0,   0,   0,   0,   0,0E9h,0DFh,   1,   1,   1,0DDh,0E9h,   0,   0,   0
                db    0,   0,0E7h,0DAh,   1,   1,   1,   1,0DAh,0E6h,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E8h,0DDh,   1,   1,   1,   1, 9Dh, 8Dh
                db 0A0h, 9Fh,0A3h, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,0B4h,0A4h, 8Ch, 8Ch
                db  87h,   1,   1,   1,   1,   1,   1,   1, 5Ah,0A3h, 9Fh, 9Fh,0A4h,0DAh,   1,   1
                db    1,   1, 9Eh,0A2h, 9Fh, 8Dh, 9Fh, 8Ch, 97h, 98h, 97h, 8Bh, 9Ah,0DAh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0E8h,   0,   0,   0,   0,   0,   0,   0,   0,0E6h,   1,   1,   1
                db    1,   1,0DBh,0B2h,   0,   0,   0,   0,   0,   0,   0,0E9h,0DFh,   1,   1,   1
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,0EBh
                db 0E2h,   1,0E2h,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E7h,0E7h,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,0DAh,0E5h,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0EAh,0E3h,   1,   1,   1,   1,   1,   2
                db 0B2h,   0,   0,   0,   0,   0,0CBh,0E2h,0DAh,   1,   1, 49h,0CBh,   0,   0,   0
                db    0,0EBh,0E9h,0DDh,   1,   1,   1,0DAh,0E4h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0EBh,0E8h,0DBh,   1,   1,   1, 9Eh, 94h
                db 0A0h, 9Fh, 96h, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0A4h, 9Fh, 8Ch
                db  9Ch,0DAh,   1,   1,   1,   1,   1,   1, 7Fh, 96h, 8Eh, 8Ch, 99h,   1,   1,   1
                db    1,   1, 9Ah, 8Ch,0A0h, 9Fh, 9Fh, 9Ah, 7Fh, 5Fh, 9Eh,0A5h, 9Fh, 7Fh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DBh,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,0E7h,   1,   1,   1
                db    1,   1,0DFh,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,0E3h,   1,   1,   1
                db    1,0DBh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1, 5Fh,0E8h,   0,   0,   0,   0,   0,   0,0EBh
                db 0E2h,   1,0E8h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h,0B2h,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,0DAh,0E1h,0E9h,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   1,0DAh,0DFh
                db 0E9h,   0,   0,   0,   0,   0,   0,0E3h,   1,   1,   1,0E4h,   0,   0,   0,   0
                db    0,   0,0EBh, 49h,   1,   1,   1,0DFh,0E9h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1,   1, 7Fh, 96h
                db  8Eh, 8Dh, 9Fh, 87h,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0A4h, 8Ch, 8Ch
                db  9Ah,   1,   1,   1,   1,   1,   1,   1, 9Dh, 8Dh,0A0h, 8Ch, 9Ah,   1,   1,   1
                db    1, 88h,0A3h, 9Fh, 8Dh, 9Fh, 9Ch,   1,   1,   1,   1, 88h,0A5h, 87h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DFh,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,0E8h,   1,   1,   1
                db    1,0DAh,0E3h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1,   1
                db    1,0DAh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,0EBh
                db  49h,0DFh,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,0DAh,0E7h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,0DAh,   1,   1,   1,0E3h
                db    0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1,   1,0E5h,   0,   0,   0,   0
                db    0,   0,   0,0E4h,0DAh,   1,   1,0E7h,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0DEh,   1,   1, 88h, 97h
                db  9Fh,0A0h, 8Ch, 9Ch,   1,   1,   1,   1,   1,   1,   1,   1,   1,0A5h, 8Ch, 8Ch
                db 0A5h,   1,   1,   1,   1,   1,   1,   1, 9Dh, 9Fh, 8Dh, 8Ch, 9Ch,   1,   1,   1
                db    1, 87h, 8Ch, 8Dh, 8Ch, 99h,   1,   1,   1,   1,   1,   1, 88h, 88h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E3h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h,0DCh,0DAh,   1
                db    1,   1,0E4h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E7h,   1,   1,   1
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,0DAh,0E8h,   0,   0,   0,   0,   0,   0,0EBh
                db 0E1h,0E5h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DBh, 49h,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   1,0E6h
                db    0,   0,   0,   0,   0,   0,   0,0E7h,   1,   1,   1,0E7h,0EBh,   0,   0,   0
                db    0,   0,   0,0E7h,   1,   1,0E0h,0EAh,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,0DBh,   1, 5Ah,0A3h
                db  9Fh, 8Dh, 8Ch,0A7h,   1,   1,   1,   1,   1,   1,   1,   1,   1,0A5h, 8Ch, 9Fh
                db  98h,0B4h,   1,   1,   1,   1,   1,   1, 87h, 8Ch, 8Dh, 9Fh, 87h,   1,   1,   1
                db    1, 9Ah, 8Ch, 8Eh, 8Dh, 9Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E5h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EAh,0E0h,   1,   1
                db    1,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E8h,0DAh,   1,   1
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,0CBh
                db 0E2h,0E7h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DAh,0E6h,   0,   0,   0,   0,   0,   0,   0,   0
                db 0E9h,0E8h,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,   1,   1,0DAh,0E7h
                db    0,   0,   0,   0,   0,   0,   0,0E8h,0DAh,   1,   1,0E8h,   0,   0,   0,   0
                db    0,   0,   0,0E8h,   1,0DAh,0E5h,   0,   0,   0,   0,   0,   0,   0,   0,0B2h
                db 0E7h,0E6h,0E7h,0B2h,0EBh,   0,   0,   0,   0,   0,   0,0E7h,0DAh,   1, 5Fh, 98h
                db  9Fh,0A0h, 8Ch,0A5h,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0A6h, 8Ch, 9Fh
                db 0A3h, 5Ah,   1,   1,   1,   1,   1,   1, 87h, 9Fh, 8Eh, 9Fh, 9Dh,   1,   1,   1
                db    1,0A6h, 8Ch, 9Fh,0A4h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh,0E6h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EBh,0E2h,   1,   1
                db    1,0DBh,0E7h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0DCh,   1,   1
                db    1,0DBh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1, 5Fh,0E8h,   0,   0,   0,   0,   0,   0,0EAh
                db 0E3h,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,0E8h,0E6h,0B2h,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,0E8h,   0,   0,   0,   0,   0,   0,   0,0B2h
                db  49h,   1,0E4h,0EAh,   0,   0,   0,   0,   0,   0,   0,0E7h,   1,   1,0DBh,0B2h
                db    0,   0,   0,   0,   0,   0,   0,0B2h,0DBh,   1,0DBh,0B2h,   0,   0,   0,   0
                db    0,   0,   0,0E9h,0DDh,   1,0E8h,   0,   0,   0,   0,   0,   0, 47h,0E5h,0DCh
                db    1,   1,   1,0E0h,0B2h,   0,   0,   0,   0,   0,   0,0B2h,0DCh,   1,0B4h,0A4h
                db  9Fh, 8Dh, 9Fh, 98h, 5Fh,   1,   1,   1,   1,   1,   1,   1,0DAh, 99h, 8Ch, 8Eh
                db 0A2h, 9Eh,   1,   1,   1,   1,   1,   1, 87h, 8Ch, 8Eh, 8Eh, 9Dh,   1,   1,   1
                db  5Fh,0A3h, 9Fh, 8Ch, 99h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh,0E7h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,   1,   1
                db    1,0DBh,0E8h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EAh,0E0h,   1,   1
                db    1,0DAh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,0E9h
                db 0E5h,0EAh,   0,   0,   0,   0,   0,   0,   0,0B2h,0DEh,   1,0E2h,0EAh,   0,   0
                db    0,   0,   0,   0,   0,0B2h, 49h,0EAh,   0,   0,   0,   0,   0,   0,   0,0E4h
                db    1,   1,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,0B2h,0DCh,0DAh,0DFh,0E9h
                db    0,   0,   0,   0,   0,   0,   0,0E9h,0DFh,0DAh,0DEh,0E9h,   0,   0,   0,   0
                db    0,   0,   0,0EBh,0E1h,0DBh,0B2h,   0,   0,   0,   0,   0,   0,0E6h,0DAh,   1
                db    1,   1,   1,0DAh,0E5h,   0,   0,   0,   0,   0,   0,0EAh,0E0h,   1,   1,0A4h
                db  8Ch, 8Dh, 9Fh,0A8h, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,0A7h, 8Ch,0A0h
                db  8Ch, 87h,   1,   1,   1,   1,   1,   1, 87h, 9Fh, 8Eh, 8Dh, 9Dh,   1,   1,   1
                db  9Eh,0A2h, 8Eh, 8Ch, 9Ch,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DBh,0E8h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1
                db    1,0DCh,0E9h,0EBh,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,   1,   1
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,0DAh,0E8h,   0,   0,   0,   0,   0,   0,0E9h
                db 0E7h, 47h,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1,   1,0E8h,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0E5h,   0,   0,   0,   0,   0,   0,   0,0B2h,0DCh
                db    1,   1,   1, 49h,0EAh,   0,   0,   0,   0,   0,   0,0EBh,0E2h,   1,0E3h,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E3h,   1,0E2h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,0E4h,0DAh,0E2h,0E4h,0E6h,0E8h,0B2h,0EBh,0E9h,0DFh,   1,   1
                db    1,   1,   1,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,0E3h,   1,   1,0A5h
                db  8Ch,0A0h, 8Dh, 9Fh, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,0A7h, 8Ch, 8Dh
                db  8Ch, 9Ch,   1,   1,   1,   1,   1,   1, 9Dh, 9Fh, 9Fh, 8Eh, 9Dh,   1,   1,   1
                db  9Dh, 8Dh, 8Eh, 9Fh, 87h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DFh,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EBh,0E7h,   1,   1
                db    1, 49h, 47h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,0E9h
                db 0B2h,   0,   0,   0,   0,   0,   0,   0,0E9h,0DFh,   1,   1,   1,0E5h,   0,   0
                db    0,   0,   0,   0,0EBh,0B2h,0E7h,   0,   0,   0,   0,   0,   0,   0,0E7h,   1
                db    1,   1,   1, 5Fh,0B2h,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,0E6h,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E5h,   2,0E4h,   0,   0,   0,   0,   0
                db    0,   0,   0,0EBh,0E7h,   1,   1,   1,0DAh,0DDh,0DEh,0E0h, 49h,   1,0DAh,0DBh
                db 0DCh,0E2h,0E6h,0E8h,0EAh,   0,   0,   0,   0,   0,   0,   0,0E3h,   1,0DAh,0A7h
                db  8Ch,0A0h, 8Dh, 8Ch, 9Ch,   1,   1,   1,   1,   1,   1,   1,   1, 9Ah, 8Ch,0A0h
                db  8Ch, 99h,   1,   1,   1,   1,   1,   1, 9Dh, 8Dh, 8Eh, 9Fh, 9Dh,0DAh,   1,   1
                db  87h, 9Fh, 9Fh, 8Dh, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0E2h,0EBh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E8h,   1,   1
                db    1,0E4h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E7h,   1,   1
                db    1,0DBh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1, 5Fh,0E8h,   0,   0,   0,   0,   0,   0,0EAh
                db 0B2h,   0,   0,   0,   0,   0,   0,   0,0E8h,   2,   1,   1,0DAh,0E3h,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0E8h,   0,   0,   0,   0,   0,   0,   0,0E6h,   1
                db    1,   1,   1,   2,0E7h,   0,   0,   0,   0,   0,   0,0EBh,0E6h,0DAh,0E7h,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E6h,0DBh,0E5h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,0E8h,0DAh,   1,   1,   1,   1,   1,   1,   1,0DFh,0E4h,0E7h
                db 0B2h,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E3h,   1,0DAh, 9Ah
                db  8Ch,0A0h,0A0h, 8Ch, 9Ah,   1,   1,   1,   1,   1,   1,   1,   1, 9Ah, 8Ch, 8Dh
                db  8Ch,0A4h,   1,   1,   1,   1,   1,   1, 9Eh, 94h, 9Fh, 9Fh, 9Dh,   1,   1,   1
                db  9Ah, 8Ch, 8Eh,0A2h, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh,0E5h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0DBh,   1
                db    1,0E5h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E8h,   2,   1
                db    1,0DAh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,0EAh
                db 0E9h,   0,   0,   0,   0,   0,   0,   0,0E8h,   1,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0B2h,   0,   0,   0,   0,   0,   0,   0,0E4h,0DAh
                db    1,   1,   1,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,0E7h,   1,0B2h,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E8h,   1,0E6h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,0E9h,0DEh,   1,   1,   1,   1,   1,0E1h,0E7h,0E9h,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 47h,0E1h,   1,   1, 9Ch
                db  8Ch, 8Dh, 8Dh, 8Ch,0A6h,   1,   1,   1,   1,   1,   1,   1,   1, 9Ch, 8Ch,0A0h
                db  9Fh,0A3h, 88h,   1,   1,   1,   1,   1, 7Fh, 96h, 9Fh, 8Ch, 87h,   1,   1,0DAh
                db  9Ah, 8Ch, 8Eh,0A2h, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0E6h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h,0DEh,0DAh
                db    1,0E7h,0EBh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h,0DDh,   1
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,0DAh,0E8h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E6h,   2,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,0EAh,0EAh,   0,   0,   0,   0,   0,   0,   0,0E4h,   1
                db    1,   1,   1,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,0E7h,0DFh,0E9h,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0B2h,0DAh,0E7h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,0EBh,0E2h,   1,   1,   1,   1,0E4h,0E9h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0DCh,   1,   1, 9Ch
                db  8Ch, 8Dh,0A0h, 9Fh, 98h,0B4h,   1,   1,   1,   1,   1,   1,   1, 9Ch, 8Ch, 8Dh
                db 0A0h, 8Dh, 9Dh,   1,   1,   1,   1,   1, 88h, 97h, 9Fh, 8Ch, 9Ch,   1,   1,   1
                db  9Ah, 8Ch, 9Fh, 96h, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0B4h,0E7h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E2h,0DAh
                db    2,0E8h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EBh, 49h,   1
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E6h,0DAh,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,0EBh,   0,   0,   0,   0,   0,   0,   0,   0,0E3h,   1
                db    1,   1,   1,   1,0E5h,   0,   0,   0,   0,   0,   0,   0,0E7h,0E4h,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E9h,0DFh,0E8h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0E4h,0DAh,   1,   1,0E4h,0EAh,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EBh,0E8h,0DAh,   1,   1, 87h
                db  8Ch, 8Dh, 8Dh, 9Fh, 97h, 88h,   1,   1,   1,   1,   1,   1,   1, 9Ch, 8Ch,0A0h
                db  8Dh, 8Ch, 9Ch,   1,   1,   1,   1,   1, 5Fh, 98h, 9Fh, 8Ch, 9Ah,0DAh,   1,   1
                db 0A7h, 8Ch, 8Eh,0A2h, 9Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    3,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,0DAh
                db  5Ah,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,   1
                db    1,0DBh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1, 5Fh,0E8h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E6h,   1,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E3h,   1
                db    1,   1,   1,   2,0E4h,   0,   0,   0,   0,   0,   0,   0,0E7h,0E5h,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0EBh,0E4h,0B2h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0E5h,   1,   1,0E0h,0E9h,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1,   1, 87h
                db  9Fh,0A0h, 8Dh, 8Eh, 96h, 9Eh,   1,   1,   1,   1,   1,   1,   1, 9Ch, 8Ch,0A0h
                db 0A0h, 8Ch, 9Ah,   1,   1,   1,   1,   1,   1,0A5h, 8Ch, 8Ch, 9Ah,   1,   1,   1
                db 0A7h, 8Ch, 8Eh, 8Dh, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DFh,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,   2
                db 0DEh,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E6h,   1
                db    1,0DAh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E6h,   1,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E3h,   1
                db    1,   1,   1,   1,0E4h,   0,   0,   0,   0,   0,   0,   0,0E7h,0E7h,   0,   0
                db    0,   0,   0,   0,0EBh,0EBh,   0,   0,0EBh,0E6h,0E9h,   0,   0,   0,   0,0CBh
                db 0E9h,   0,   0,   0,   0,0E8h,   1,   1,0E7h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   1, 9Eh
                db  8Dh, 8Eh, 8Dh,0A0h, 9Fh, 9Dh,   1,   1,   1,   1,   1,   1,   1, 87h, 8Ch, 8Dh
                db  8Dh, 8Ch,0A5h,   1,   1,   1,   1,   1,   1, 99h, 8Ch, 8Ch,0A7h,   1,   1,0DAh
                db 0A7h, 8Ch, 8Dh, 9Fh, 9Ah, 9Eh, 5Ah,0DAh,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0E2h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E7h,0DAh
                db 0E1h,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E7h,0DAh
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,0DAh,0E8h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E6h,0DAh,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E3h,   1
                db    1,   1,   1,   1,0E5h,0EBh,   0,   0,   0,   0,   0,   0,0E8h,0B2h,0EBh,   0
                db    0,   0,   0,   0,0B2h,0B2h,   0,   0,   0,0B2h,0EAh,   0,   0,   0,   0,0E9h
                db 0E7h,   0,   0,   0,   0,0B2h,0DAh,0E0h,0EAh,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,   1,   1,   1,   1, 7Fh
                db 0A8h, 9Fh, 8Dh,0A0h, 8Ch, 9Ch,0DAh,   1,   1,   1,   1,   1,   1, 87h, 8Ch, 8Dh
                db 0A0h, 9Fh,0A3h, 5Ah,   1,   1,   1,   1,   1,0A7h, 8Ch, 8Ch, 99h,0DAh,   1,   1
                db  9Ah, 8Ch,0A0h, 8Dh, 8Ch, 8Dh,0A6h, 87h, 5Ah,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0E5h,   0,   0,   0,   0,   0,   0,   0,0E9h,0E9h,   0,   0,   0,   0,0E8h,0DAh
                db 0E3h,   0,   0,   0,   0,   0,   0,0EBh,0EAh,   0,   0,   0,   0,   0,0B2h,0DBh
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,   2,0E8h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E6h,0DAh,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,0EAh, 47h,   0,   0,   0,   0,   0,   0,   0,0E4h,0DAh
                db    1,   1,   1,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,0B2h,0E9h,   0,   0
                db    0,   0,   0,   0,0E7h,0E7h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h
                db 0E3h,0CBh,   0,   0,   0,0EAh,0DFh,0E5h,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,0E6h,0DAh,   1,   1,   1,   1, 5Ah
                db 0A3h, 9Fh, 8Dh, 8Dh, 8Ch,0A7h,   1,   1,   1,   1,   1,   1,   1, 87h, 9Fh, 8Dh
                db  8Dh, 8Eh,0A2h, 9Eh,   1,   1,   1,   1,   1, 9Ah, 8Ch, 8Ch,0A5h,   1,   1,   1
                db  9Ah, 8Ch, 8Dh,0A0h, 8Dh, 9Fh, 8Ch, 8Ch,0A5h, 9Dh,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0E7h,   0,   0,   0,   0,   0,   0,   0,0E8h,0E8h,   0,   0,   0,   0,0B2h,   1
                db 0E5h,   0,   0,   0,   0,   0,   0,0E9h,0E8h,   0,   0,   0,   0,   0,0E9h,0DDh
                db    1,0DBh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DCh,   1,   1,0DBh,0E8h,   0,   0,   0,   0,   0,   0,0CBh
                db  47h,   0,   0,   0,   0,   0,   0,   0,0E7h,   1,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,0E9h,0E9h,   0,   0,   0,   0,   0,   0,   0,0E4h,   1
                db    1,   1,   1,0DAh,0E6h,   0,   0,   0,   0,   0,   0,   0,0E9h,0EBh,   0,   0
                db    0,   0,   0,   0,0E6h,0E5h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E8h
                db 0E0h,0E9h,   0,   0,   0,   0,0E4h,0E7h,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,0EBh,   0,   0,0B2h,0E5h,   2,   1,   1,   1,   1,   1, 5Fh
                db  98h, 9Fh,0A0h, 8Dh, 8Ch,0A6h,   1,   1,   1,   1,   1,   1,   1, 87h, 9Fh,0A0h
                db 0A0h, 8Dh, 9Fh, 87h,   1,   1,   1,   1,   1, 87h, 8Ch, 9Fh, 98h, 5Fh,   1,   1
                db  9Ch, 8Ch,0A0h, 8Dh,0A0h, 8Dh, 8Dh, 9Fh, 8Ch, 96h, 9Ah,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db 0E8h,0EBh,   0,   0,   0,   0,   0,   0,0E7h,0E6h,   0,   0,   0,   0,0E9h,0DEh
                db 0E7h,0EBh,   0,   0,   0,   0,   0,0B2h,0E5h,   0,   0,   0,   0,   0,0EAh,0E1h
                db    1,0DAh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0B2h,0DDh,   1,   1,0DBh,0E8h,   0,   0,   0,   0,   0,   0,0EAh
                db 0E9h,   0,   0,   0,   0,   0,   0,   0,0E8h,0DAh,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0E8h,   0,   0,   0,   0,   0,   0,   0,0E5h,0DAh
                db    1,   1,   1,   1,0E7h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,0E3h,0E4h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E7h
                db 0DCh,0B2h,   0,   0,   0,   0,0E6h,0E8h,   0,   0,   0,   0,   0,   0,   0,   0
                db 0EBh,   0,   0,   0,0E9h,0E8h,0E5h,0DEh,   1,   1,   1,   1,   1,   1,   1,0DAh
                db 0A4h, 8Ch, 8Dh,0A0h, 9Fh,0A3h,0B3h,   1,   1,   1,   1,   1,   1, 9Dh, 8Ch, 8Dh
                db  8Dh,0A0h, 8Ch, 9Ah,   1,   1,   1,   1,   1, 9Dh, 8Dh, 9Fh,0A8h, 7Fh,   1,   1
                db  9Dh, 9Fh, 8Dh, 8Dh, 9Fh, 8Ch, 9Fh, 8Dh,0A0h, 8Ch, 8Ch,0A7h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DCh
                db 0B2h,   0,   0,   0,   0,   0,   0,   0,0E6h,0E5h,   0,   0,   0,   0,   0,0E3h
                db 0E7h,   0,   0,   0,   0,   0,   0,0E8h,0E4h,   0,   0,   0,   0,   0,   0,0E3h
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0E9h,0DDh,   1,   1,0DCh,0B2h,   0,   0,   0,   0,   0,   0,0EAh
                db 0B2h,   0,   0,   0,   0,   0,   0,   0,0B2h,0DBh,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0E7h,   0,   0,   0,   0,   0,   0,   0,0E6h,0DAh
                db    1,   1,   1,   1,0E8h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,0EBh,0E0h,0E2h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E6h
                db 0DAh,0E7h,   0,   0,   0,   0,0E8h,0B2h,   0,   0,   0,   0,   0,   0,   0,   0
                db 0E9h,0E8h,0E6h,0E4h,0DDh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0A5h, 8Ch,0A0h, 8Dh, 8Eh, 96h, 7Fh,   1,   1,   1,   1,   1,   1, 9Dh,0A0h, 8Dh
                db 0A0h,0A0h, 8Ch,0A6h,   1,   1,   1,   1,   1, 9Eh, 94h, 9Fh,0A2h, 9Eh,   1,   1
                db  9Dh, 8Dh,0A0h, 9Fh,0A4h, 9Ah,0A3h, 8Ch, 9Fh, 8Dh, 8Eh, 8Ch, 9Ah,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E0h
                db 0EAh,   0,   0,   0,   0,   0,   0,   0,0E4h,0E4h,   0,   0,   0,   0,   0,0E5h
                db 0E8h,   0,   0,   0,   0,   0,   0,0E8h,0DFh,0E9h,   0,   0,   0,   0,   0,0E6h
                db    1,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0EAh,0E1h,0DAh,   1,0DFh,0EAh,   0,   0,   0,   0,   0,   0,0E9h
                db 0E8h,   0,   0,   0,   0,   0,   0,   0,0EAh,0E1h,   1,   1,   1,0E3h,   0,   0
                db    0,   0,   0,   0,0EBh,0B2h,0E6h,   0,   0,   0,   0,   0,   0,   0,0E8h,0DAh
                db    1,   1,   1,0DFh,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,0E9h,0DDh,0DFh,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,0E4h
                db 0DAh,0E6h,   0,   0,   0,   0,0E9h,0EAh,   0,   0,   0,   0,   0,   0,0B2h,0E5h
                db 0DEh,   1,   1,   1,0DBh,0DEh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0A6h, 8Ch, 8Dh,0A0h, 8Dh, 8Eh, 9Dh,   1,   1,   1,   1,   1,   1, 9Dh, 8Dh, 8Eh
                db  8Dh, 8Dh, 9Fh,0A3h, 88h,   1,   1,   1,   1, 7Fh, 96h, 9Fh, 9Fh, 9Dh,   1,   1
                db  7Fh, 96h, 9Fh, 8Ch,0A6h,   1, 88h,0A7h, 8Dh, 9Fh,0A0h, 8Eh, 9Fh, 9Ch,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0E3h
                db    0,   0,   0,   0,   0,   0,   0,   0,0E3h,0E2h,   0,   0,   0,   0,   0,0E7h
                db 0E9h,   0,   0,   0,   0,   0,   0,0E6h,   1,0B2h,   0,   0,   0,   0,   0,0E7h
                db 0DAh,0DBh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,   0,0E5h,0DAh,   1,0E4h,   0,   0,   0,   0,   0,   0,   0,0E9h
                db 0E6h, 47h,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1,   1,0E6h,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0E3h,0EBh,   0,   0,   0,   0,   0,   0,0CBh, 49h
                db    1,   1,0DAh,0E5h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,0EBh,0E8h,   1,0DBh,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,0E3h
                db    1,0E4h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,   1
                db    1,   1,   1,   1,0E5h,0E8h,0E6h,0E4h,0E1h,   1,   1,   1,   1,   1,   1,0B4h
                db  9Ah, 8Ch,0A0h, 8Dh,0A0h, 8Ch, 9Ch,   1,   1,   1,   1,   1,   1, 9Eh,0A2h, 8Eh
                db 0A0h, 8Dh, 8Dh, 9Fh, 9Dh,   1,   1,   1,   1, 5Fh, 98h, 9Fh, 8Ch, 87h,   1,   1
                db  5Fh, 98h, 9Fh, 9Fh,0A3h, 5Fh,   1,0DAh, 9Ch, 8Ch, 8Dh,0A0h, 9Fh, 96h, 7Fh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E5h
                db    0,   0,   0,   0,   0,   0,   0,0EAh,0DFh,0DEh,0E9h,   0,   0,   0,   0,0E9h
                db 0EAh,   0,   0,   0,   0,   0,   0,0E5h,   1,0E8h,   0,   0,   0,   0,   0,0E8h
                db    2,0DAh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,   0,0E9h,0E4h,0E3h,0B2h,   0,   0,   0,   0,   0,   0,   0,0E9h
                db 0E3h,0EAh,   0,   0,   0,   0,   0,   0,   0,0E8h,0DBh,   1,0DCh,0B2h,0EBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DEh,0B2h,   0,   0,   0,   0,   0,   0,   0,0E7h
                db 0DBh,0DAh,0DFh,0B2h,   0,   0,   0,   0,   0,   0,   0,0EAh,0EBh,   0,   0,   0
                db    0,   0,   0,0E7h,   1,   1,0E8h,   0,   0,   0,   0,   0,   0,   0,0E9h,0DEh
                db 0DAh, 49h,0CBh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E6h,   1
                db    1,   1,   1,0DFh,0E9h,   0,   0,0EAh,0B2h,0E7h,0E6h,0DFh,   1,   1,   1,   1
                db  9Ch, 8Ch,0A0h, 8Dh,0A0h, 8Ch,0A7h,   1,   1,   1,   1,   1,   1, 7Fh, 96h, 9Fh
                db  8Dh,0A0h,0A0h, 8Ch, 9Ch,0DAh,   1,   1,   1,   1,0A6h, 8Ch, 8Ch, 9Ah,   1,   1
                db    1, 99h, 8Ch, 8Dh, 94h, 9Eh,   1,   1,0DAh, 99h, 8Ch, 8Dh, 8Dh, 8Ch,0A7h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E7h
                db 0EBh,   0,   0,   0,   0,   0,   0,0B2h,0DCh,0DBh,0B2h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,0E3h,0DAh,0E6h,   0,   0,   0,   0,   0,0E9h
                db 0DEh,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,   0,   0,0EAh,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,0E9h
                db 0DFh,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,0E7h,0E3h,0E7h,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DBh,0E7h,0EBh,   0,   0,   0,   0,   0,   0,   0
                db 0E8h,0E6h,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,   0,   0,   0,   0
                db    0,   0,   0,0E6h,   1,   1,0E7h,   0,   0,   0,   0,   0,   0,   0,0B2h,0DBh
                db    1,0DEh,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h,0E2h
                db 0DAh,   2,0E1h,0E8h,   0,   0,   0,   0,   0,   0, 47h, 49h,   1,   1,   1,   1
                db  9Ch, 8Ch, 8Dh, 8Dh,0A0h, 8Ch,0A6h,   1,   1,   1,   1,   1,   1, 7Fh, 96h, 9Fh
                db  8Dh,0A0h, 8Dh, 8Ch, 99h,   1,   1,   1,   1,   1, 99h, 8Ch, 8Ch,0A7h,   1,   1
                db    1, 9Ah, 8Ch,0A0h, 8Ch, 9Ch,   1,   1,   1, 7Fh,0A3h, 9Fh,0A0h, 9Fh, 97h, 88h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E8h
                db    0,   0,   0,   0,   0,   0,   0,0E8h,0DAh,   1,0E8h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0EAh,0E1h,   1,0E5h,   0,   0,   0,   0,   0,0CBh
                db  49h,   1,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h
                db 0DAh,0E7h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EBh,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,   1,0E4h,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0E8h,   0,   0,   0,   0
                db    0,   0,   0,0E4h,   1,   1,0E5h,   0,   0,   0,   0,   0,   0,   0,0E8h,   2
                db    1, 5Ah,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h
                db 0E8h,0E8h,0E9h,   0,   0,   0,   0,   0,   0,0EBh,0B2h, 5Ah,   1,   1,   1,0DAh
                db  87h, 8Ch,0A0h,0A0h, 8Dh, 9Fh,0A3h, 5Ah,   1,   1,   1,   1,   1, 88h, 97h, 9Fh
                db  8Dh,0A0h, 8Dh, 9Fh,0A3h, 5Ah,0DAh,   1,   1,   1,0A7h, 8Ch, 8Ch,0A6h,   1,   1
                db    1, 87h, 8Ch, 8Dh, 8Ch, 99h,   1,   1,   1,   1, 9Ah, 8Ch, 8Dh, 8Dh, 8Ch, 87h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,0B2h
                db    0,   0,   0,   0,   0,   0,   0,0E7h,   1,   1,0E7h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0B2h,0DCh,   1,0E4h,   0,   0,   0,   0,   0,   0
                db 0E4h,0DBh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E8h
                db 0DAh,0E4h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,0DCh,0B2h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,0CBh,0E7h,0E8h,   0,   0,   0,   0
                db    0,   0, 47h,0E2h,   1,   1,0E4h,   0,   0,   0,   0,   0,   0,   0,0E6h,   1
                db    1,   1,0E8h,   0,   0,   0,   0,   0,0EBh,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,   1,   1,   1,   1,   1
                db  87h, 8Ch, 8Dh,0A0h, 8Dh, 8Eh,0A2h, 9Eh,   1,   1,   1,   1,   1, 88h, 97h, 9Fh
                db  8Dh,0A0h, 8Dh, 8Eh, 9Fh, 9Eh,   1,   1,   1,   1, 9Ah, 8Ch, 8Ch,0A4h,   1,   1
                db    1, 7Fh, 96h, 9Fh, 9Fh,0A8h, 7Fh,   1,   1,   1, 7Fh,0A8h, 9Fh, 8Dh, 8Ch, 9Ah
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DFh,0E9h
                db    0,   0,   0,   0,   0,   0,   0,0E5h,0DAh,   1,0E5h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0E8h,   2,   1,0E0h,0EAh,   0,   0,   0,   0,   0
                db 0E6h,0DBh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,0EBh,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E6h
                db    1,0DDh,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,0DAh,0E4h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h,0E2h,0E9h,   0,   0,   0,   0
                db    0,   0,0E9h,0DCh,   1,   1,0E1h,0EAh,   0,   0,   0,   0,   0,   0,0E5h,   1
                db    1,   1,0E6h,   0,   0,   0,   0,0E9h,0E8h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h,0DEh,   1,   1,   1,   1,   1
                db  9Dh, 9Fh, 8Dh,0A0h, 8Dh,0A0h, 9Fh, 9Dh,   1,   1,   1,   1,   1, 88h, 97h, 9Fh
                db  8Dh,0A0h, 8Dh,0A0h, 8Ch, 9Ch,0DAh,   1,   1,   1, 9Ch, 8Ch, 9Fh,0A3h, 5Ah,   1
                db    1,   1,0A6h, 8Ch, 8Dh, 8Ch, 9Ch,   1,   1,   1,0DAh,0A6h, 8Ch,0A0h, 8Ch,0A7h
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E3h,   0
                db    0,   0,   0,   0,   0,   0,   0,0E4h,0DAh,   1,0E4h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0E7h,   1,   1,0DCh,0B2h,   0,   0,   0,   0,   0
                db 0E7h,0DAh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,0CBh,0E7h,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EBh,0E2h
                db 0DAh,   1,0E6h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,   2,0E7h,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h, 49h,   0,   0,   0,   0,   0
                db    0,   0,0E8h,0DAh,   1,   1,0DCh,0E9h,   0,   0,   0,   0,   0,   0,0E3h,   1
                db    1,   1,0E4h,   0,   0,   0,   0,0EBh,0E5h,0B2h,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h,0DAh, 5Ah,   1,   1,   1,   1
                db  9Eh,0A2h, 8Eh, 8Dh,0A0h, 8Dh, 8Ch, 9Ah,   1,   1,   1,   1,   1, 88h,0A3h, 9Fh
                db  8Dh,0A0h, 8Dh,0A0h, 8Ch,0A6h,   1,   1,   1,   1, 87h, 9Fh, 9Fh,0A2h, 9Eh,0DAh
                db    1,   1, 9Ch, 8Ch, 8Dh, 9Fh, 98h, 88h,   1,   1,   1, 9Ch, 8Ch, 8Dh, 8Ch,0A6h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E5h,   0
                db    0,   0,   0,   0,   0,   0,0EBh,0E2h,   1,   1, 49h,0CBh,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0E5h,   1,   1,   2,0E8h,   0,   0,   0,   0,   0
                db 0B2h,   2,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0E4h,0E8h,   0,   0,   0,   0,   0,   0,   0,   0,0EBh,0B2h,0DBh
                db    1,   1,0DFh,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EAh,0EBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,0DDh,0B2h,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E7h,0DAh,0E5h,   0,   0,   0,   0,   0
                db    0,   0,0E7h,   1,   1,   1,0DBh,0E8h,   0,   0,   0,   0,   0,0CBh,0E2h,   1
                db    1,   1,0E2h,0EBh,   0,   0,   0,   0,0E6h,0E4h,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E7h,0DBh,0E4h,0E4h,   1,   1,   1,   1
                db  7Fh,0A8h, 9Fh, 8Dh,0A0h, 8Dh, 8Ch, 99h,   1,   1,   1,   1,   1, 5Ah,0A3h, 9Fh
                db  8Dh, 8Dh, 96h, 8Dh, 9Fh, 97h, 88h,   1,   1,   1, 9Dh, 8Dh, 8Eh, 8Ch, 87h,   1
                db    1,   1, 88h, 97h, 9Fh,0A0h, 8Ch, 9Ch,   1,   1,   1, 87h, 8Ch, 8Dh, 8Ch,0A6h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0E6h,   0
                db    0,   0,   0,   0,   0,   0,0E9h,0DEh,   1,   1,0DDh,0E9h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0E4h,   1,   1,   1,0E7h,   0,   0,   0,   0,   0
                db 0E9h,0DEh,   1,   0,   0,   0,   0,   0,   0,   0,   1,0DBh,0E9h,   0,   0,   0
                db    0,   0,   0,0E4h,0E2h,0EBh,   0,   0,   0,   0,   0,   0,   0,0EBh,0E5h,   1
                db    1,   1,   1,0E4h, 47h,   0,   0,   0,   0,   0,   0,   0,0EAh,0E6h,0E9h,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,   1,   1,   1, 49h,0B2h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,0E8h,0DEh,   1,0E7h,   0,   0,   0,   0,   0
                db    0,   0,0E5h,   1,   1,   1,   1,0E8h,   0,   0,   0,   0,0EBh,0EAh,0DFh,   1
                db    1,   1,0DDh,0E9h,   0,   0,   0,   0,0E8h,   1,0E5h,0EAh,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,0E7h,0DCh,0DBh,0E6h,0E5h,0DBh,   1,   1,   1
                db  88h,0A3h, 9Fh,0A0h, 8Dh,0A0h, 8Ch,0A5h,0DAh,   1,   1,   1,   1, 5Ah,0A3h, 9Fh
                db 0A0h, 9Fh,0A5h, 97h, 9Fh, 9Fh, 9Dh,   1,   1,   1, 7Fh, 97h, 9Fh, 8Ch, 9Ch,   1
                db    1,   1,   1,0A7h, 8Ch, 8Dh, 9Fh, 97h, 7Fh,   1,   1, 9Ch, 8Ch,0A0h, 8Ch, 99h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E8h,   0
                db    0,   0,   0,   0,   0,   0,0B2h,0DBh,   1,   1,0DBh,0B2h,0EBh,   0,   0,   0
                db    0,   0,   0,   0,   0,0EBh,0E2h,   1,   1,   1,0E5h,   0,   0,   0,   0,   0
                db 0EBh, 49h,   1,0EAh,0EAh,0EAh,0EAh,0EAh,0EAh,0EAh,   1,0DBh,0E9h,0EAh,0EAh,0EAh
                db 0EAh,0EAh,0EAh,0E4h,0DAh,0E5h, 47h,   0,   0,   0,   0,   0,   0,0E7h,0DAh,   1
                db    1,   1,   1,   1,0E5h,0E9h,   0,   0,   0,   0,   0,0EAh,0E5h,0E1h,0EAh,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,   1,   1,   1,   1,0E0h,0E7h,0CBh,   0,   0
                db    0,   0,   0,   0,0EBh,0E9h,0E6h,0DCh,   1,0DBh,0E8h,0EAh,0EAh,0EAh,0EAh,0EAh
                db 0EAh,0EAh,0E3h,0DAh,   1,   1,   1,0E6h, 47h,0EAh,0EAh,0EAh,0EAh,0B2h,0DBh,   1
                db    1,   1,   2,0E8h,0EAh,0EAh,0EAh,0EAh,0B2h,0DDh,   1,0E3h,0E8h,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0E6h,0DBh,   1,0DCh,0E6h,0E5h,   2,   1,   1,   1
                db  5Fh,0A3h, 9Fh, 8Dh,0A0h, 8Dh, 9Fh, 97h, 88h,   1,   1,   1,   1, 5Ah,0A3h, 9Fh
                db  8Dh, 8Ch,0A7h,0A5h, 8Ch, 8Ch, 9Ah,   1,   1,   1, 5Ah,0A3h, 9Fh, 8Ch,0A7h,0DAh
                db    1,   1,   1, 9Eh, 8Dh, 9Fh, 8Dh, 8Ch,0A6h, 88h, 5Fh,0A6h, 8Ch, 8Dh, 8Ch,0A7h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DBh,0B2h,   0
                db    0,   0,   0,   0,   0,   0,0E8h,0DAh,   1,   1,   1,0E8h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0E9h,0DDh,   1,   1,   1,0E4h,   0,   0,   0,   0,   0
                db    0,0E4h,   1,0E3h,0E3h,0E3h,0E3h,0E3h,0E3h,0E4h,   1,0DAh,0E3h,0E3h,0E3h,0E3h
                db 0E3h,0E3h,0E3h,0DFh,   1,   1,0E4h,0E8h,0E9h,0EAh,0E9h,0E8h,0E5h,   2,   1,   1
                db    1,   1,   1,   1,   1,0E3h,0E8h,0E9h,0EAh,0E9h,0E8h,0E4h,   1, 49h,0CBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   1,   1,   1,0DBh,0E4h,0E7h,0B2h
                db 0E9h,0EAh,0E9h,0B2h,0E7h,0E3h,   1,   1,   1,0DBh,0E3h,0E3h,0E3h,0E3h,0E3h,0E3h
                db 0E3h,0E3h,0DDh,   1,   1,   1,   1,0E0h,0E4h,0E3h,0E3h,0E3h,0E4h, 49h,0DAh,   1
                db    1,   1,   1,0E2h,0E3h,0E3h,0E3h,0E3h,0E3h, 5Ah,   1,   1,0DDh,0E4h,0E6h,0E8h
                db 0B2h,0B2h,0B2h,0E7h,0E5h, 49h,   1,   1,   1,0DAh, 49h,0E0h,   1,   1,   1,   1
                db  5Fh, 98h, 9Fh, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 9Eh,   1,   1,   1,   1, 5Fh,0A3h, 9Fh
                db 0A0h, 8Ch, 9Ah, 9Ch, 8Ch, 8Ch,0A5h,   1,   1,   1,0B4h,0A4h, 9Fh, 8Ch,0A4h,0DAh
                db    1,   1,   1,   1,0A7h, 8Ch, 8Dh,0A0h, 8Ch,0A5h, 99h,0A0h, 8Dh,0A0h, 8Ch, 9Ah
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E0h,0EAh,   0
                db    0,   0,   0,   0,   0,   0,0E6h,   1,   1,   1,   1,0E6h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DBh,   1,   1,   1, 49h, 47h,   0,   0,   0,   0
                db 0EBh,0E7h,   1,   1,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,0DEh,0E2h,0E2h, 49h,0DEh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0DDh, 49h,0E2h,0E2h,0DEh,   1,0DAh, 49h, 47h,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   1,   1,   1,   1,   1,0DBh,0E0h
                db 0E2h,0E2h, 49h,0E0h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DEh
                db 0E0h,0E0h,0DFh, 5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh,0A4h, 8Ch,0A0h, 8Dh,0A0h, 8Dh, 8Ch, 9Ch,   1,   1,   1,   1, 5Fh, 98h, 9Fh
                db  8Dh, 8Ch,0A7h, 7Fh, 96h, 9Fh,0A8h, 7Fh,   1,   1,   1,0A5h, 8Ch, 9Fh,0A3h, 5Ah
                db    1,   1,   1,   1, 7Fh,0A3h, 8Ch, 8Dh,0A0h, 8Ch, 8Ch, 8Eh,0A0h, 8Dh, 9Fh, 87h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0E3h,   0,   0
                db    0,   0,   0,   0,   0,   0,0E5h,   1,   1,   1,   1,0E5h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0E7h,   1,   1,   1,   1,0DCh,0B2h,   0,   0,   0,   0
                db    0,0E7h,0DFh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh, 49h,0CBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0A5h, 8Ch,0A0h, 8Dh,0A0h,0A0h, 8Ch,0A7h,   1,   1,   1,   1,0B3h, 98h, 9Fh
                db 0A0h, 8Ch, 9Ah,   1,0A6h, 8Ch, 8Ch, 9Ch,   1,   1,0DAh,0A7h, 8Ch,0A0h, 8Dh, 9Dh
                db    1,   1,   1,   1,0DAh, 9Dh, 8Dh, 9Fh, 8Dh, 8Dh, 8Dh,0A0h, 8Dh, 9Fh, 97h, 88h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E5h,   0,   0
                db    0,   0,   0,   0,   0,   0,0E3h,0DAh,   1,   1,   1,0E3h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,0E6h,   1,   1,   1,   1,0DBh,0B2h,0EBh,   0,   0,   0
                db    0,0B2h,0E7h,0EAh,0CBh,0CBh,0CBh,0CBh,0CBh,0EBh,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 49h,0CBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0A6h, 8Ch, 8Dh,0A0h, 8Dh, 8Dh, 8Ch,0A6h,   1,   1,   1,   1, 5Fh, 98h, 9Fh
                db 0A0h, 8Ch,0A7h,   1, 9Ch, 8Ch, 8Ch, 99h,   1,   1,   1, 9Ah, 8Ch,0A0h, 8Ch, 87h
                db    1,   1,   1,   1,   1,   1, 9Ch, 8Dh, 8Ch, 8Eh,0A0h, 8Dh,0A0h, 8Bh, 9Ah,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E7h,   0,   0
                db    0,   0,   0,   0,   0,0EBh,0E2h,   1,   1,   1,   1,0E0h,0EAh,   0,   0,   0
                db    0,   0,   0,   0,   0,0E4h,0DAh,   1,   1,   1,   1,0E7h,   0,   0,   0,   0
                db    0,0E9h,0E8h,0EBh,   0,   0,   0,   0,   0,   0,   1,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 49h,0EBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0A7h, 8Ch,0A0h,0A2h,0A2h,0A0h, 9Fh, 98h,0DAh,   1,   1,   1, 5Fh,0A3h, 9Fh
                db  8Dh, 8Ch, 9Ah,   1, 88h, 97h, 8Ch, 97h, 88h,   1,   1, 9Ch, 8Ch, 8Dh, 8Ch, 9Ch
                db    1,   1,   1,   1,   1,   1,   1, 87h,0A3h, 8Ch, 8Ch, 8Ch, 8Bh,0A4h, 88h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0E8h,   0,   0
                db    0,   0,   0,   0,   0,0EAh,0DFh,   1,   1,   1,   1,0DCh,0B2h,   0,   0,   0
                db    0,   0,   0,   0,   0,0E3h,   1,   1,   1,   1,   1,0E7h,   0,   0,   0,   0
                db    0,0E9h,0B2h,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh, 49h, 47h,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Ah, 8Ch, 8Dh, 96h,0A5h, 8Eh, 9Fh,0A8h, 7Fh,   1,   1,   1, 5Ah,0A3h, 9Fh
                db  8Dh, 8Ch, 9Ah,   1,   1, 99h, 8Ch, 8Ch, 87h,   1,   1, 9Ch, 8Ch, 8Dh, 8Ch,0A7h
                db    1,   1,   1,   1,   1,   1,   1,   1, 9Eh,0A7h,0A4h,0A3h,0A6h, 9Eh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DCh,0B2h,   0,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,   1,   1,   1,   1,0DBh,0E8h,   0,   0,   0
                db    0,   0,   0,   0,0EAh,0DFh,   1,   1,   1,   1,   1,0E5h,   0,   0,   0,   0
                db    0,0EBh,0E9h,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh, 49h,0CBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh, 9Ch, 8Ch,0A0h, 94h,0A7h,0A0h, 8Dh, 9Fh, 87h,   1,   1,   1, 5Ah,0A3h, 9Fh
                db  8Dh, 8Ch, 9Ah,   1,0DAh, 9Dh, 9Fh, 8Ch, 99h,   1,   1, 87h, 9Fh,0A0h, 8Ch,0A6h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 7Fh, 7Fh, 5Fh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E1h,0EAh,   0,   0
                db    0,   0,   0,   0,   0,0E7h,0DAh,   1,   1,   1,   1,0DAh,0E7h,   0,   0,   0
                db    0,   0,   0,   0,0B2h, 5Ah,   1,   1,   1,   1,   1,0E3h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 49h,0CBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Ch, 8Ch, 8Dh, 9Fh, 9Ah, 97h, 9Fh, 8Ch, 9Ah,   1,   1,   1, 88h,0A3h, 9Fh
                db 0A0h, 8Ch, 9Ch,0DAh,   1, 5Fh, 98h, 8Ch, 96h, 9Eh,   1, 87h, 9Fh, 8Dh, 8Ch,0A4h
                db 0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E4h,   0,   0,   0
                db    0,   0,   0,   0,   0,0E7h,   1,   1,   1,   1,   1,   1,0E5h,   0,   0,   0
                db    0,   0,   0,   0,0E8h,   1,   1,   1,   1,   1,   1,0E0h,0EAh,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 49h,0EBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DDh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Ch, 8Ch,0A0h, 8Ch, 9Ch,0A5h, 9Fh, 8Ch,0A6h,   1,   1,   1, 88h, 97h, 9Fh
                db  8Dh, 8Ch, 9Ch,   1,   1,   1, 9Ch, 8Ch, 8Ch, 9Ah,   1, 9Dh, 9Fh, 8Dh, 9Fh, 98h
                db  5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0E5h,   0,   0,   0
                db    0,   0,   0,   0,   0,0E5h,   1,   1,   1,   1,   1,0DAh,0E4h,   0,   0,   0
                db    0,   0,   0,0EBh,0E7h,   1,   1,   1,   1,   1,   1,0DDh,0E9h,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 49h,0CBh,   0
                db    0,   0,   0,   0,   0,0B2h,0DCh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 87h, 8Ch, 8Dh, 8Ch, 9Ch,0A7h, 8Ch, 9Fh,0A3h, 5Ah,   1,   1, 88h,0A8h, 9Fh
                db  8Dh, 8Ch, 9Ch,   1,   1,   1, 9Eh, 94h, 8Ch,0A3h, 5Ah, 9Eh, 8Dh,0A0h, 9Fh,0A3h
                db  5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,0E7h,0EBh,0EBh,   0
                db    0,   0,   0,   0,   0,0E2h,   1,   1,   1,   1,   1,0DAh,0E2h,   0,   0,0EBh
                db    0,   0,   0,   0,0E5h,   1,   1,0DAh,   2,   1,   1,   1,0E8h,   0,0EAh,   0
                db 0EBh,0EAh,   0,   0,   0,0CBh,0EAh,   0,   0,   0,   1,0DDh,0DDh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E2h,   0,   0
                db    0,   0,   0,   0,   0,0E9h,0DDh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 87h, 9Fh,0A0h, 8Ch, 9Ah, 87h, 8Ch, 8Eh, 8Dh, 9Dh,   1,   1, 9Eh, 96h, 8Eh
                db  8Dh, 8Ch, 9Ch,   1,   1,   1,0DAh,0A6h, 8Ch, 8Ch, 9Ch, 9Dh, 9Fh, 8Dh, 9Fh, 97h
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E5h,0E4h,0DAh,   1,0DFh,0E7h,0DDh,   1,0DAh,0E5h,0E8h,0E5h,0E8h,0B2h
                db 0E5h,0E5h,0E6h,0EAh,0EBh,0E8h,0DFh,   1,0DDh,0E7h,0E0h,   1,0DDh,0E5h,0E6h,0EAh
                db    0,   0,0E7h,0E5h,0E0h,   1,0E1h,0E7h,0E8h,0E6h,0DDh,   1,0E1h,0E4h,0B2h,   0
                db    0,0E7h,0E3h,0E3h,0E3h,0E8h,0E8h,0E3h,0E3h,0E3h,0E6h,0E8h,0E7h,0DCh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DFh,0E6h,0E6h
                db 0E6h,0E6h,0E6h,0E6h,0E6h,0E5h, 5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 87h, 9Fh,0A0h, 8Ch, 9Ah, 9Eh, 8Dh,0A0h, 8Ch, 9Ch,   1,   1, 9Dh, 8Dh,0A0h
                db  8Dh, 8Ch, 87h,   1,   1,   1,   1, 87h, 8Ch, 9Fh, 97h,0A6h, 8Eh, 8Dh, 9Fh,0A8h
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,0E6h,   1,   1,0E4h,   0,0E2h,   1,   1,0E7h,0E8h,   1,0E6h,0E8h
                db    1,   1,0E7h,0EAh,0E8h,0EAh,0E8h,   1,0DFh,0EAh,0E2h,   1,   1,   1,0E7h,0EAh
                db 0E7h,0E9h,0B2h,0DEh,   1,0E1h,0E9h,0E9h,0B2h,   0,0E7h,   2,   1,0E6h,0EAh,0E7h
                db 0B2h,0E9h,0E1h,   1,   1,0E7h,0E6h,0DAh,   1,0E0h,0EAh,0E9h,0E7h,0DCh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 9Fh, 8Dh, 8Ch,0A7h,0DAh,0A3h, 9Fh, 8Ch,0A6h,   1,   1, 87h, 9Fh, 8Dh
                db 0A0h, 9Fh, 87h,   1,   1,   1,   1, 5Fh, 98h, 8Ch, 9Fh, 9Fh,0A0h,0A0h, 9Fh, 97h
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   2,0E7h,0E6h,0DAh,0DAh,0E6h,0EBh,0E5h,   1,   1,0E7h,0E8h,   1,0E6h,0E8h
                db    1,0E2h,0EBh,0E5h,0DBh,0E2h,0EAh,0E2h,0DDh,0E9h,0E2h,   1,   1,0E4h,   0,0E4h
                db    2, 49h,0E9h,0E7h,   1,0E8h,0E9h,0E0h,0DBh,0E4h,0EBh, 49h,0E0h,   0,0E6h,0DBh
                db 0DDh,0B2h,0E8h,0DAh,   2,0E7h,0E7h,   1,   1,0E6h,0E9h,0DEh,   2,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 9Fh,0A0h, 8Ch,0A7h,   1,0A6h, 8Ch, 9Fh,0A3h, 88h,0DAh, 87h, 8Ch,0A0h
                db  8Dh, 9Fh, 9Dh,   1,   1,   1,   1,0DAh, 9Ch, 8Ch, 8Dh, 8Dh, 8Dh, 8Dh, 9Fh, 97h
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,0E6h,0DAh,0DAh,0E8h,0E9h,0E7h,   1,0DAh,0E7h,0E8h,   1,0E6h,0E8h
                db    2,0E6h,0B2h,0DAh,   1,0DAh,0E8h,0E6h,0DDh,0E9h,0E2h,   1,   1,0E8h,0E8h,   1
                db    1,0DAh,0E6h,0E9h,0DFh,0E8h,0E3h,   1,   1,0DAh,0B2h,0E4h,0E5h,0E9h,0DCh,   1
                db    1,0E4h,0EAh,0DFh,0DBh,0E7h,0E7h,   1,   1,0E7h,0B2h,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 8Eh, 8Dh, 8Ch, 99h,   1, 9Ch, 8Ch, 8Eh, 9Fh, 87h,0DAh, 9Ch, 8Ch, 8Dh
                db  8Eh,0A2h, 9Eh,   1,   1,   1,   1,   1, 88h,0A3h, 9Fh,0A0h,0A0h, 8Dh, 9Fh,0A3h
                db  5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh,0E7h,0E6h,   2,0DFh,0E9h,0E5h,0E8h,0DCh,   1,0E7h,0E8h,   2,0E6h,0E8h
                db    1,0E8h,0E7h,   1,   1,   1,0E4h,0E2h,0DEh,0E9h,0E2h,   1,   2,0B2h,0E6h,   1
                db    1,   1,0E3h,   0, 49h, 5Ah,0DBh,   1,   1,0E1h,0E9h,0E4h,0E7h,0E8h,   1,   1
                db    1,0DFh,0E9h,0E4h,0DAh,0E7h,0E7h,   1,   1,0E7h,0E8h,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 8Dh,0A0h, 8Ch, 99h,   1, 9Eh, 94h, 8Dh, 8Ch, 99h,   1, 99h, 8Ch,0A0h
                db  9Fh, 97h, 88h,   1,   1,   1,   1,   1,   1, 9Ah, 8Ch, 8Dh, 8Dh,0A0h, 9Fh, 98h
                db 0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,0E6h,   1,0E4h,0E9h,0DEh,0E8h,0E2h,0DAh,0E7h,0E8h,   1,0E6h,0E8h
                db    1,0B2h,0E6h,   2,   1,   1,   1,   1,0DFh,0E9h,0E2h,   1,0DCh,0B2h,0E5h,   1
                db    1,   1, 49h,0EAh,0E3h,   1,0DAh, 49h,0E6h,0B2h,0EAh,0E1h,0E8h,0E7h,   1,   1
                db    1,0DCh,0B2h,0E5h,   1,0E7h,0E7h,   1,   1,0E7h,0E8h,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 8Dh, 8Eh, 8Ch, 99h,   1,0DAh,0A4h, 9Fh, 9Fh, 96h, 9Ch,0A3h, 9Fh, 8Dh
                db  9Fh,0A3h, 5Fh,   1,   1,   1,   1,   1,   1, 88h,0A3h, 9Fh,0A0h,0A0h, 8Ch, 99h
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh,0E7h,0E6h,0DBh,0E6h,0E8h,   1,0E8h,0E5h,0DAh,0E7h,0E8h,   1,0E6h,0E8h
                db    1,0B2h,0E6h,0DAh,   1,   1,   1,   1,0DFh,0E9h,0E2h,0DAh,0DCh,0B2h,0E5h,   1
                db    1,   1,0E0h,0EAh,0E3h,0DBh,0E6h,0E9h,   0,0EBh,0E5h,0DAh,0E8h,0E7h,   1,   1
                db    1,0DCh,0B2h,0E5h,0DAh,0E7h,0E7h,   1,   1,0E7h,0E8h,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh, 9Eh, 8Dh, 8Eh, 8Ch, 99h,   1,   1,0A7h, 8Ch,0A0h, 8Eh, 8Dh, 8Eh,0A0h, 8Dh
                db  9Fh,0A4h,0B4h,   1,   1,   1,   1,   1,   1,   1, 9Ch, 8Ch, 8Dh, 8Dh, 8Ch, 87h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,0E6h,   1,0B2h,0E6h,   1,0E6h,0E7h,   1,0E7h,0E8h,   1,0E6h,0E8h
                db    1,0E8h,0E6h,   1,   1,   1,0DBh,0DBh,0DFh,0E9h,0E2h,0DAh,0DBh,0B2h,0E5h,   1
                db    1,   1,0E2h, 47h,0E2h,0E4h,0CBh,0E9h,0E6h,0E1h,   1,0DAh,0E8h,0E7h,   1,   1
                db    1,0DCh,0B2h,0E5h,   2,0E7h,0E7h,   1,   1,0E7h,0E8h,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Eh, 8Dh, 8Eh, 8Ch, 99h,   1,   1, 87h, 8Ch, 8Dh,0A0h, 8Eh, 8Dh,0A0h, 8Dh
                db  8Ch,0A5h,   1,   1,   1,   1,   1,   1,   1,   1, 5Fh,0A4h, 8Bh, 8Bh, 98h, 88h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh,0E7h,0E6h,0DDh,0E9h,0E3h,   1,0E2h,0B2h,0DBh,0E7h,0E8h,   2,0E6h,0E8h
                db    1,0E8h,0E7h,0DAh,   1,0DAh,0E6h,0E5h,0DDh, 47h,0E5h,0DAh,0DAh,0B2h,0E7h,   1
                db    1,   1,0E4h,0EBh,0DFh,0E7h,0B2h,0DDh,   1,   1,   1,   1,0E7h,0B2h,   1,   1
                db 0DAh,0E1h,0EAh,0E3h,   1,0E7h,0E7h,   1,   1,0E7h,0E8h,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 8Dh,0A0h, 8Ch, 99h,   1,   1, 88h, 97h, 9Fh, 8Dh, 8Dh,0A0h, 8Dh,0A0h
                db  8Ch,0A7h,   1,   1,   1,   1,   1,   1,   1,   1,   1, 7Fh,0A7h,0A7h, 9Eh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,0E6h,0E3h,0E9h,0DEh,   1,0DDh,0B2h, 49h,0E7h,0E8h,   1,0E6h,0E8h
                db    1,0E5h,0E9h,0DCh,   1,   1,0B2h,0E6h,0DCh,0EAh,0B2h,0DCh,   1,0E7h,0B2h,0DBh
                db 0DAh,   1,0E7h,0B2h,0DBh,0E8h,0E6h,   2,   1,0E1h,0E7h, 5Ah,0E5h,0EAh,0DFh,   2
                db    1,0E5h,0E9h,0DDh,   1,0E7h,0E7h,   1,   1,0E7h,0E8h,   1,   1,0DAh,0DEh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 8Dh,0A0h, 8Ch, 99h,   1,   1,   1,0A7h, 8Ch, 8Dh,0A0h,0A0h, 8Dh,0A0h
                db  8Ch, 9Ch,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 5Fh,0E7h,0E6h,0E6h,0E8h,0DAh,   1,   1,0E8h,0E5h,0E7h,0E8h,0DAh,0E6h,0E8h
                db    1,0DFh,0EAh,0E7h,0DDh,0E5h,0EAh,0E1h,0DDh,0E9h,0E9h,0E8h,0E2h,0E2h,   0,0E6h
                db 0DCh,0E4h,0EBh,0E6h,0DAh,0E6h,0E9h,0E1h,0DEh,0E7h,0E9h,0DCh,0DDh,0E9h,0E7h,0DDh
                db 0E2h,0E9h,0E7h,0DAh,0DFh,0E8h,0E7h,0DFh,0DFh,0E7h,0B2h,0E0h,0DDh,0E0h,0E4h,0E1h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 8Eh, 8Dh, 8Ch, 99h,   1,   1,   1, 9Dh, 9Fh,0A0h, 8Dh, 8Dh,0A0h, 8Dh
                db  8Ch, 87h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   2,0E7h,0E6h,0E7h,0E6h,   1,   1,   1,0E6h,0E7h,0E7h,0E8h,   1,0E6h,0E8h
                db    1,0DAh,0E5h,0EAh,0E9h,0CBh,0E7h,0DAh,0DFh,0B2h,0E5h,   0,0B2h,0DCh,0E6h, 47h
                db 0E9h,0EAh,0E8h,0DCh,   1,0DFh,0B2h,0E9h,0E9h,   0,0E4h,   1,   1,0E5h,0EBh,0E9h
                db 0E9h,0B2h,0DFh,0DFh,0B2h,0EAh,0EAh,0E9h,0E9h,0EAh,0EAh,0E9h,0E7h,0E1h,0E5h,0E3h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh, 9Dh, 9Fh,0A0h, 8Ch,0A7h,   1,   1,   1,0DAh,0A4h, 8Ch,0A0h, 8Dh, 8Dh, 8Eh
                db 0A2h, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,0E7h,0B2h,0E3h,   1,   1,   1,0E2h,0B2h,0E7h,0E8h,   1,0E2h,0E4h
                db    1,   1,   1,0E5h,0E8h,0E6h,0DDh,   1,0DCh,0E5h,0DDh,0E5h,0E7h,0DBh,0DAh,0E5h
                db 0E8h,0E6h,0DEh,   1,   1,   1,0E1h,0E7h,0E8h,0E4h,   1,   1,   1,   1,0E4h,0E8h
                db 0E7h,0E0h,   1,0DDh,0E5h,0B2h,0E8h,0E5h,0E5h,0E8h,0E9h,0E6h,0E3h, 49h,0E6h,0E3h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 9Fh, 8Eh, 8Ch,0A7h,   1,   1,   1,   1, 9Ch, 8Ch, 8Dh,0A0h,0A0h, 9Fh
                db  98h, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,0E8h,0B2h,0DFh,   1,   1,   1,0DDh,0B2h,0E9h,0E8h,0DAh,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0E7h,0E7h,   1,   1,0E7h,0E8h,   2,   1,0DDh,0E3h,0DDh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 9Fh, 8Dh, 8Ch, 9Ah,   1,   1,   1,   1, 5Ah,0A4h, 8Ch,0A0h, 8Dh, 8Ch
                db  99h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,0EBh,0E7h,0DAh,   1,   1,   1,0DAh,0E7h,   0,0E7h, 5Fh, 49h,0E4h
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0E6h,0B2h, 49h,0DEh,0E7h,0E8h,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 87h, 9Fh, 8Dh, 8Ch, 9Ch,   1,   1,   1,   1,   1, 9Dh, 8Dh, 8Ch, 9Fh, 9Fh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E7h,   0,0E6h,   1,   1,   1,   1,0DAh,0E5h,   0,0E7h,   2,0E6h,0E8h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0E0h,0EAh,0E9h,0E8h, 49h,0E2h,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 87h, 9Fh, 8Eh, 9Fh, 9Dh,   1,   1,   1,   1,   1,   1, 87h,0A8h, 8Bh, 99h
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0E3h,0E5h,0E1h,   1,   1,   1,   1,   1,0DFh,0E5h,0E3h,   1,0E2h,0E4h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0E3h,0E7h,0E6h,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 87h, 9Fh, 8Eh,0A2h, 9Eh,   1,   1,   1,   1,   1,   1,   1, 7Fh, 9Dh, 88h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,0DAh,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 9Dh, 8Ch, 8Bh,0A3h,0B3h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 88h,0A4h, 8Dh, 9Ch,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 7Fh, 9Eh, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0DAh,   1,   1,   1,   1,0DAh,   1,   1,   1,   1,0DAh
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 2Dh
                db  2Dh, 2Dh, 2Dh, 2Dh, 2Dh, 2Dh, 2Dh, 2Dh, 15h, 1Dh, 1Dh, 1Dh, 1Dh, 1Dh, 1Dh, 0Ch
                db  0Ch, 0Ch, 0Ch, 1Eh, 1Eh, 1Eh, 12h, 12h, 12h, 12h, 17h, 12h, 17h, 17h, 17h, 17h
                db  0Ah, 0Ah, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh,   3
                db    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   7,   7
                db    7,   7,   7,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 1Eh
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h, 29h
                db  29h, 23h, 23h, 23h, 2Ah, 1Fh, 25h, 1Fh, 1Fh, 20h, 20h, 1Ah, 1Ah, 1Ah, 0Fh, 0Fh
                db  1Bh, 1Bh, 21h, 21h, 13h, 13h, 16h, 15h, 0Eh, 1Dh, 0Ch, 0Ch, 1Eh, 12h, 17h, 0Ah
                db  0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh
                db  0Bh,   3,   3,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 1Eh
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h, 29h, 23h, 23h
                db  23h, 18h, 2Ah, 24h, 25h, 1Fh, 20h, 20h, 20h, 20h, 1Ah, 1Ah, 1Ah, 0Fh, 0Fh, 1Bh
                db  1Bh, 21h, 21h, 13h, 13h, 16h, 16h, 15h, 1Dh, 1Dh, 0Ch, 1Eh, 12h, 17h, 17h, 0Ah
                db  0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh,   3
                db    3,   3,   3,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 1Eh
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h, 29h, 29h, 29h, 23h
                db  23h, 23h, 24h, 2Ah, 1Fh, 1Fh, 20h, 20h, 20h, 20h, 1Ah, 1Ah, 1Ah, 0Fh, 0Fh, 1Bh
                db  1Bh, 21h, 21h, 13h, 13h, 16h, 16h, 15h, 0Eh, 1Dh, 0Ch, 0Ch, 12h, 17h, 17h, 17h
                db  0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh
                db  0Bh, 0Bh,   3,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 1Eh
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h, 29h, 29h, 29h
                db  23h, 23h, 18h, 2Ah, 2Ah, 1Fh, 1Fh, 20h, 20h, 20h, 20h, 1Ah, 1Ah, 1Ah, 0Fh, 0Fh
                db  1Bh, 1Bh, 21h, 21h, 13h, 13h, 16h, 11h, 0Eh, 1Dh, 1Dh, 0Ch, 1Eh, 12h, 17h, 17h
                db  0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh
                db    3,   3,   3,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 1Eh
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h, 29h, 29h
                db  23h, 23h, 23h, 18h, 2Ah, 25h, 1Fh, 20h, 20h, 20h, 20h, 1Ah, 1Ah, 1Ah, 1Ah, 0Fh
                db  0Fh, 1Bh, 21h, 21h, 13h, 13h, 26h, 16h, 15h, 0Eh, 1Dh, 0Ch, 1Eh, 12h, 17h, 17h
                db  0Ah, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh
                db  0Bh, 0Bh,   3,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 1Eh
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 28h, 29h, 29h, 29h
                db  29h, 23h, 23h, 24h, 18h, 25h, 1Fh, 1Fh, 20h, 20h, 20h, 20h, 1Ah, 1Ah, 0Fh, 0Fh
                db  0Fh, 1Bh, 1Bh, 21h, 13h, 13h, 13h, 16h, 15h, 0Eh, 1Dh, 0Ch, 0Ch, 12h, 17h, 17h
                db  17h, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh
                db  0Bh, 0Bh,   3,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 1Eh
                db  28h, 29h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h, 29h
                db  29h, 29h, 23h, 23h, 2Ah, 2Ah, 24h, 1Fh, 1Fh, 20h, 20h, 20h, 1Ah, 1Ah, 1Ah, 0Fh
                db  0Fh, 1Bh, 1Bh, 21h, 21h, 13h, 13h, 16h, 16h, 0Eh, 1Dh, 1Dh, 0Ch, 1Eh, 12h, 17h
                db  17h, 0Ah, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh, 0Bh
                db  0Bh, 0Bh,   3,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 1Eh
                db  28h, 29h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h, 29h, 29h
                db  29h, 23h, 23h, 23h, 18h, 24h, 25h, 1Fh, 1Fh, 20h, 20h, 20h, 20h, 1Ah, 1Ah, 0Fh
                db  0Fh, 0Fh, 1Bh, 1Bh, 21h, 13h, 13h, 26h, 11h, 15h, 0Eh, 1Dh, 0Ch, 0Ch, 12h, 17h
                db  17h, 0Ah, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh
                db  0Bh, 0Bh,   3,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 12h
                db  28h, 29h, 29h, 29h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h
                db  29h, 29h, 23h, 23h, 23h, 2Ah, 24h, 24h, 1Fh, 1Fh, 20h, 20h, 20h, 20h, 1Ah, 1Ah
                db  1Ah, 0Fh, 1Bh, 1Bh, 21h, 21h, 13h, 13h, 16h, 11h, 0Eh, 1Dh, 1Dh, 0Ch, 1Eh, 12h
                db  17h, 17h, 17h, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Dh, 0Bh, 0Bh, 0Bh
                db  0Bh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 12h
                db  29h, 29h, 29h, 29h, 29h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h
                db  29h, 29h, 29h, 23h, 23h, 18h, 24h, 25h, 1Fh, 1Fh, 20h, 20h, 20h, 20h, 1Ah, 1Ah
                db  0Fh, 1Ah, 0Fh, 1Bh, 1Bh, 21h, 13h, 13h, 16h, 11h, 15h, 0Eh, 1Dh, 0Ch, 0Ch, 12h
                db  17h, 17h, 17h, 0Ah, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh
                db  0Bh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 12h
                db  29h, 29h, 29h, 29h, 29h, 29h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 29h
                db  29h, 29h, 29h, 23h, 23h, 23h, 18h, 24h, 1Fh, 1Fh, 1Fh, 20h, 20h, 20h, 1Ah, 1Ah
                db  1Ah, 0Fh, 0Fh, 0Fh, 1Bh, 21h, 21h, 13h, 26h, 16h, 15h, 0Eh, 1Dh, 0Ch, 0Ch, 1Eh
                db  12h, 17h, 17h, 17h, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh
                db  0Bh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 17h
                db  29h, 23h, 29h, 29h, 29h, 29h, 29h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h
                db  28h, 28h, 29h, 29h, 29h, 29h, 23h, 23h, 23h, 24h, 2Ah, 25h, 1Fh, 20h, 20h, 20h
                db  1Ah, 1Ah, 0Fh, 0Fh, 1Bh, 21h, 21h, 13h, 13h, 11h, 11h, 0Eh, 1Dh, 0Ch, 1Eh, 12h
                db  17h, 0Ah, 0Ah, 0Ah, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh, 0Bh, 0Bh, 0Dh, 0Dh, 0Dh, 0Bh, 0Bh
                db  0Bh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 17h
                db  23h, 23h, 23h, 23h, 29h, 29h, 29h, 23h, 1Ah, 1Ah, 20h, 20h, 1Ah, 1Ah, 1Ah, 1Ah
                db  1Ah, 1Ah, 1Ah, 1Ah, 1Ah, 0Fh, 0Fh, 0Fh, 0Fh, 1Bh, 1Bh, 1Bh, 1Bh, 1Bh, 1Bh, 1Bh
                db  1Bh, 1Bh, 1Bh, 1Bh, 1Bh, 21h, 1Bh, 21h, 21h, 21h, 21h, 21h, 21h, 21h, 21h, 13h
                db  13h, 13h, 13h, 26h, 26h, 26h, 11h, 26h, 26h, 26h, 15h, 0Dh, 0Dh, 0Bh, 0Dh, 0Bh
                db  0Bh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 17h
                db  23h, 23h, 23h, 23h, 23h, 29h, 29h, 20h, 17h, 12h, 12h, 12h, 12h, 12h, 12h, 12h
                db  12h, 12h, 1Eh, 1Eh, 1Eh, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh, 0Eh, 15h
                db  15h, 11h, 26h, 13h, 21h, 1Bh, 0Fh, 0Fh, 1Ah, 20h, 20h, 1Fh, 1Fh, 2Ah, 18h, 23h
                db  23h, 23h, 23h, 29h, 29h, 29h, 28h, 29h, 28h, 28h, 23h, 0Dh, 0Dh, 0Dh, 0Bh, 0Dh
                db  0Bh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 17h
                db  2Ah, 2Ah, 2Ah, 18h, 23h, 23h, 29h, 20h, 12h, 1Eh, 1Eh, 12h, 1Eh, 12h, 1Eh, 0Ch
                db  0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 0Ch, 1Dh, 1Dh, 1Dh, 1Dh, 0Eh, 0Eh, 15h, 11h
                db  16h, 13h, 13h, 21h, 1Bh, 0Fh, 0Fh, 1Ah, 20h, 20h, 1Fh, 1Fh, 2Ah, 18h, 23h, 23h
                db  23h, 29h, 29h, 29h, 29h, 29h, 29h, 29h, 28h, 28h, 23h, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh
                db  0Bh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 17h
                db  2Ah, 1Fh, 24h, 24h, 23h, 23h, 29h, 20h, 12h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh,   9,   9, 0Eh, 11h, 16h, 26h
                db  13h, 21h, 21h, 1Bh, 0Fh, 0Fh, 1Ah, 20h, 20h, 1Fh, 1Fh, 2Ah, 18h, 23h, 23h, 29h
                db  29h, 29h, 29h, 29h, 29h, 29h, 29h, 28h, 29h, 28h, 23h, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh
                db  0Bh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 17h
                db  1Fh, 1Fh, 1Fh, 1Fh, 24h, 2Ah, 29h, 1Ah, 12h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 1Dh, 1Dh, 42h, 42h, 11h, 11h, 11h, 13h
                db  21h, 21h, 1Bh, 0Fh, 1Ah, 1Ah, 20h, 20h, 1Fh, 24h, 24h, 23h, 23h, 23h, 29h, 29h
                db  29h, 29h, 29h, 28h, 29h, 29h, 28h, 28h, 28h, 28h, 23h, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh
                db  0Dh, 0Bh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  1Fh, 20h, 1Fh, 1Fh, 1Fh, 24h, 23h, 1Ah, 12h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 1Dh, 0Eh,   9, 58h, 6Eh, 5Bh, 4Ch, 1Bh, 10h
                db  21h, 1Bh, 0Fh, 1Ah, 1Ah, 20h, 20h, 1Fh, 24h, 18h, 23h, 29h, 29h, 29h, 29h, 29h
                db  29h, 29h, 29h, 29h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh
                db  0Dh, 0Dh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  20h, 20h, 20h, 20h, 1Fh, 1Fh, 23h, 1Ah, 12h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  0Ch, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 1Dh, 0Eh, 0Eh, 0Eh, 61h, 6Fh, 6Bh, 6Bh, 67h, 5Bh
                db  46h, 0Fh, 1Ah, 1Ah, 20h, 1Fh, 1Fh, 2Ah, 18h, 23h, 23h, 29h, 29h, 29h, 29h, 29h
                db  29h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh
                db  0Dh, 0Dh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  20h, 1Ah, 20h, 20h, 20h, 1Fh, 2Ah, 1Ah, 1Eh, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 1Dh, 0Eh, 0Eh, 15h, 11h, 61h, 78h, 6Bh, 6Bh, 6Bh, 66h
                db  66h, 60h, 59h, 3Eh, 1Fh, 1Fh, 25h, 18h, 23h, 29h, 29h, 29h, 29h, 29h, 28h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 0Ah, 0Dh, 0Dh, 0Dh, 0Dh
                db  0Dh, 0Dh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  1Ah, 1Ah, 1Ah, 20h, 20h, 20h, 1Fh, 0Fh, 12h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  0Ch, 1Dh, 0Ch, 1Dh, 1Dh, 0Eh, 0Eh, 15h, 16h, 11h, 61h, 61h, 70h, 6Bh, 6Dh, 6Bh
                db  66h, 66h, 66h, 66h, 56h, 45h, 29h, 29h, 22h, 29h, 29h, 29h, 28h, 29h, 28h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 17h, 0Ah, 0Dh, 0Dh, 0Dh
                db  0Dh, 0Dh, 0Bh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  1Ah, 1Ah, 1Ah, 1Ah, 20h, 20h, 1Fh, 0Fh, 12h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  1Dh, 0Ch, 1Dh, 1Dh, 0Eh, 0Eh, 15h, 11h, 11h, 13h, 61h, 61h, 68h, 6Bh, 6Dh, 6Bh
                db  66h, 66h, 66h, 5Ch, 5Ch, 5Ch, 5Ch, 56h, 45h, 28h, 29h, 29h, 29h, 28h, 28h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 0Ah, 0Ah, 0Ah, 0Ah, 0Dh
                db  0Dh, 0Dh, 0Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  0Fh, 0Fh, 1Ah, 1Ah, 1Ah, 1Ah, 20h, 0Fh, 1Eh, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  0Ch, 1Dh, 1Dh, 1Dh, 0Eh, 0Eh, 15h, 16h, 26h, 13h, 61h, 6Ah, 63h, 6Eh, 6Bh, 6Bh
                db  66h, 66h, 66h, 66h, 5Ch, 5Ch, 5Ch, 90h, 55h, 55h, 56h, 44h, 28h, 28h, 29h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 17h, 0Ah, 0Ah, 0Dh, 0Dh
                db  0Dh, 0Dh, 0Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  0Fh, 0Fh, 0Fh, 0Fh, 1Ah, 1Ah, 20h, 1Bh, 1Eh, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 0Ch
                db  1Dh, 1Dh, 1Dh, 0Eh, 0Eh, 15h, 16h, 13h, 13h, 21h, 61h, 61h, 61h, 69h, 6Bh, 6Bh
                db  66h, 66h, 66h, 5Ch, 5Ch, 5Ch, 5Ch, 55h, 55h, 55h, 52h, 52h, 52h, 4Ah, 44h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 29h, 17h, 0Ah, 0Ah, 0Ah, 0Ah
                db  0Dh, 0Dh, 0Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  1Bh, 1Bh, 1Bh, 0Fh, 0Fh, 1Ah, 1Ah, 1Bh, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
                db  1Dh, 1Dh, 1Dh, 0Eh, 15h, 16h, 26h, 13h, 21h, 1Bh, 61h, 61h, 61h, 65h, 6Eh, 6Dh
                db  66h, 66h, 66h, 66h, 5Ch, 5Ch, 5Ch, 5Ch, 55h, 55h, 52h, 52h, 52h, 4Eh, 4Eh, 52h
                db  4Ah, 44h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 28h, 17h, 0Ah, 0Ah, 0Ah, 0Ah
                db  0Dh, 0Ah, 0Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  1Bh, 1Bh, 1Bh, 1Bh, 0Fh, 0Fh, 1Ah, 21h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 0Ch, 1Dh
                db  1Dh, 1Dh, 0Eh, 15h, 15h, 16h, 13h, 21h, 1Bh, 1Bh, 61h, 61h, 61h, 65h, 7Ah, 7Ah
                db  6Fh, 6Dh, 66h, 5Ch, 5Ch, 5Ch, 5Ch, 5Ch, 55h, 55h, 55h, 52h, 52h, 52h, 4Eh, 52h
                db  4Eh, 4Eh, 52h, 44h, 44h, 28h, 28h, 28h, 28h, 28h, 28h, 12h, 0Ah, 17h, 0Ah, 0Ah
                db  0Ah, 0Dh, 0Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  21h, 21h, 21h, 1Bh, 1Bh, 1Bh, 0Fh, 21h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh
                db  1Dh, 0Eh, 0Eh, 15h, 11h, 26h, 13h, 21h, 1Bh, 0Fh, 61h, 61h, 61h, 65h, 7Ah, 70h
                db  7Ah, 7Ah, 6Fh, 6Eh, 66h, 5Ch, 5Ch, 55h, 55h, 55h, 52h, 52h, 52h, 4Eh, 52h, 4Eh
                db  4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Ah, 44h, 44h, 28h, 28h, 29h, 12h, 17h, 17h, 0Ah, 0Ah
                db  0Ah, 0Ah, 0Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  21h, 13h, 21h, 21h, 1Bh, 1Bh, 0Fh, 21h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh
                db  1Dh, 0Eh, 0Eh, 16h, 16h, 13h, 21h, 1Bh, 0Fh, 1Ah, 61h, 61h, 61h, 65h, 7Ah, 70h
                db  7Ah, 70h, 70h, 70h, 70h, 6Eh, 6Bh, 5Ch, 5Ch, 55h, 52h, 52h, 52h, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Ah, 44h, 28h, 17h, 0Dh, 0Ah, 17h, 0Ah
                db  0Ah, 0Ah, 0Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  21h, 13h, 13h, 21h, 21h, 21h, 1Bh, 13h, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 0Ch, 1Dh, 1Dh
                db  0Eh, 0Eh, 15h, 16h, 26h, 21h, 21h, 0Fh, 0Fh, 1Ah, 61h, 61h, 61h, 64h, 7Ah, 7Ah
                db  70h, 70h, 70h, 6Fh, 6Fh, 70h, 70h, 6Fh, 6Eh, 66h, 5Ch, 52h, 52h, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Bh, 27h, 0Ch, 0Ah, 0Dh
                db  0Ah, 0Ah, 0Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  13h, 13h, 13h, 13h, 21h, 21h, 1Bh, 13h, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 1Dh
                db  0Eh, 15h, 11h, 16h, 13h, 21h, 1Bh, 0Fh, 1Ah, 1Ah, 61h, 61h, 61h, 64h, 7Ah, 7Ah
                db  7Ah, 70h, 70h, 70h, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Dh, 5Ch, 55h, 52h, 4Eh
                db  4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Ah, 4Bh, 46h
                db  12h, 0Dh, 0Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  13h, 26h, 13h, 13h, 13h, 21h, 21h, 13h, 0Ch, 0Ch, 0Ch, 1Dh, 0Ch, 1Dh, 1Dh, 1Dh
                db  0Eh, 15h, 16h, 26h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 6Ah, 61h, 61h, 68h, 7Ah, 7Ah
                db  7Ah, 70h, 7Ah, 70h, 6Fh, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh, 6Fh, 6Bh, 5Ch
                db  55h, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh
                db  4Ah, 4Bh, 40h,0DCh, 48h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  26h, 16h, 26h, 13h, 13h, 13h, 21h, 16h, 0Ch, 0Ch, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh
                db  0Eh, 15h, 16h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 46h, 61h, 61h, 61h, 68h, 70h, 7Ah
                db  7Ah, 70h, 70h, 70h, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh, 6Eh, 6Eh, 81h
                db  81h, 6Bh, 5Ch, 52h, 52h, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 4Eh, 4Ah, 4Ch, 43h, 5Ah,0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  16h, 16h, 16h, 16h, 26h, 13h, 21h, 16h, 0Ch, 0Ch, 1Dh, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh
                db  15h, 11h, 26h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 3Eh, 6Ah, 61h, 61h, 68h, 7Ah, 7Ah
                db  7Ah, 7Ah, 7Ah, 70h, 70h, 6Fh, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh, 6Eh, 6Dh
                db  6Dh, 73h, 81h, 73h, 66h, 5Ch, 55h, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Bh, 4Ch, 53h,   1,   1,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  11h, 16h, 16h, 11h, 26h, 26h, 13h, 16h, 0Ch, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh, 0Eh
                db  15h, 16h, 13h, 13h, 1Bh, 1Bh, 1Ah, 1Ah, 19h, 46h, 63h, 61h, 61h, 77h, 7Ah, 7Ah
                db  7Ah, 7Ah, 70h, 70h, 70h, 6Fh, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh, 6Eh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 81h, 81h, 6Dh, 66h, 5Ch, 52h, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Ah, 4Bh, 51h, 5Ah,0DAh, 48h,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  16h, 15h, 16h, 16h, 11h, 16h, 13h, 16h, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 1Dh, 0Eh, 15h
                db  11h, 26h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 1Fh, 46h, 6Ah, 61h, 61h, 77h, 7Ah, 6Ch
                db  7Ah, 7Ah, 7Ah, 70h, 7Ah, 70h, 6Fh, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh, 6Eh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 74h, 73h, 73h, 74h, 66h, 5Ch, 55h, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Ah, 4Fh, 51h, 7Fh, 48h
                db  48h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  11h, 15h, 11h, 16h, 16h, 11h, 26h, 11h, 0Ch, 1Dh, 0Ch, 1Dh, 1Dh, 0Eh, 0Eh, 15h
                db  16h, 26h, 13h, 21h, 1Bh, 1Ah, 1Ah, 20h, 19h, 46h, 6Ah, 63h, 61h, 72h, 7Ah, 6Ch
                db  7Ah, 7Ah, 7Ah, 70h, 70h, 70h, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh, 6Eh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 74h, 73h, 73h, 66h, 5Ch, 52h
                db  4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Ah, 4Fh
                db  54h, 88h, 48h, 48h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  15h, 15h, 15h, 15h, 11h, 16h, 11h, 15h, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh, 15h, 15h
                db  16h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 20h, 19h, 46h, 63h, 63h, 61h, 69h, 7Ah, 6Ch
                db  7Ah, 7Ah, 7Ah, 7Ah, 7Ah, 70h, 70h, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 81h, 81h
                db  66h, 5Ch, 52h, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh
                db  4Eh, 50h, 4Dh, 53h, 5Ah,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  15h, 0Eh, 15h, 15h, 15h, 16h, 16h, 15h, 0Ch, 1Dh, 1Dh, 1Dh, 1Dh, 0Eh, 0Eh, 11h
                db  11h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 20h, 1Fh, 46h, 7Eh, 63h, 63h, 69h, 7Ah, 71h
                db  6Ch, 7Ah, 7Ah, 7Ah, 70h, 70h, 70h, 6Fh, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh
                db  6Eh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  73h, 81h, 73h, 5Dh, 5Ch, 52h, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 4Eh, 55h, 4Bh, 51h, 53h,0B4h,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  15h, 0Eh, 15h, 15h, 15h, 15h, 16h, 15h, 0Ch, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh, 15h, 16h
                db  26h, 13h, 21h, 1Bh, 0Fh, 20h, 20h, 1Fh, 19h, 46h, 7Eh, 63h, 63h, 75h, 7Ah, 71h
                db  6Ch, 7Ah, 7Ah, 7Ah, 7Ah, 70h, 70h, 70h, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh, 6Eh
                db  6Eh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 81h, 81h, 6Dh, 66h, 55h, 52h, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 4Eh, 52h, 52h, 52h, 56h, 4Fh, 54h, 7Fh,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  15h, 0Eh, 0Eh, 15h, 15h, 15h, 16h, 0Eh, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh, 0Eh, 15h, 16h
                db  13h, 21h, 1Bh, 0Fh, 1Ah, 1Ah, 20h, 1Fh, 24h, 46h, 7Eh, 63h, 63h, 75h, 7Ah, 71h
                db  7Ah, 6Ch, 7Ah, 7Ah, 7Ah, 70h, 70h, 70h, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh
                db  6Eh, 6Eh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 73h, 81h, 73h, 6Dh, 66h, 55h, 52h, 4Eh, 4Eh, 4Eh, 4Eh
                db  4Eh, 4Eh, 52h, 52h, 55h, 55h, 55h, 55h, 50h, 56h, 58h, 54h, 5Ah,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
byte_33E96      db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 15h, 15h, 15h, 15h, 0Eh, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh, 15h, 16h, 26h
                db  13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 20h, 1Fh, 24h, 46h, 7Eh, 63h, 63h, 75h, 7Ah, 7Ah
                db  71h, 6Ch, 7Ah, 7Ah, 7Ah, 7Ah, 70h, 6Eh, 6Eh, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 6Eh, 6Eh
                db  6Eh, 6Eh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 73h, 73h, 6Dh, 66h, 55h, 52h, 4Eh
                db  4Eh, 4Eh, 4Eh, 52h, 52h, 50h, 50h, 50h, 50h, 50h, 50h, 56h, 59h, 51h, 53h, 88h
                db 0B4h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 0Eh, 0Eh, 15h, 11h, 0Eh, 0Ch, 1Dh, 1Dh, 1Dh, 0Eh, 15h, 11h, 26h
                db  13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 1Fh, 1Fh, 18h, 58h, 65h, 63h, 63h, 7Bh, 71h, 7Ah
                db  71h, 7Ah, 6Ch, 7Ah, 6Fh, 79h, 9Dh, 6Ah, 75h, 6Fh, 6Dh, 6Dh, 6Eh, 6Fh, 6Fh, 6Eh
                db  6Eh, 6Eh, 6Eh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 73h, 81h, 6Dh, 66h
                db  5Ch, 52h, 52h, 52h, 52h, 55h, 50h, 50h, 50h, 50h, 56h, 56h, 56h, 56h, 57h, 59h
                db  51h, 53h, 88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  15h, 0Eh, 0Eh, 0Eh, 0Eh, 15h, 15h, 0Eh, 0Ch, 1Dh, 1Dh, 1Dh, 15h, 11h, 11h, 13h
                db  13h, 1Bh, 0Fh, 1Ah, 1Ah, 20h, 1Fh, 1Fh, 19h, 46h, 65h, 63h, 65h, 7Bh, 6Ch, 71h
                db  71h, 71h, 6Ch, 7Ah, 6Fh, 9Dh,0DAh,   1, 7Fh, 9Dh, 85h, 69h, 6Eh, 6Bh, 6Bh, 6Eh
                db  6Eh, 6Eh, 6Eh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 73h
                db  81h, 6Dh, 66h, 5Ch, 55h, 50h, 55h, 50h, 50h, 56h, 56h, 56h, 56h, 57h, 57h, 57h
                db  57h, 59h, 64h, 54h, 9Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 0Eh, 0Eh, 15h, 15h, 0Eh, 1Dh, 1Dh, 1Dh, 0Eh, 15h, 15h, 16h, 13h
                db  21h, 1Bh, 0Fh, 1Ah, 20h, 20h, 1Fh, 1Fh, 24h, 58h, 65h, 63h, 65h, 82h, 6Ch, 71h
                db  6Ch, 82h, 7Ah, 7Ah, 6Fh, 87h,   1,   1,   1,   1,   1, 88h, 9Dh, 86h, 77h, 6Dh
                db  6Bh, 6Bh, 6Eh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 74h, 81h, 74h, 6Dh, 66h, 5Dh, 50h, 50h, 50h, 56h, 56h, 56h, 57h, 57h, 57h
                db  59h, 59h, 59h, 59h, 5Bh, 61h, 54h, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 0Eh, 0Eh, 15h, 15h, 0Eh, 0Ch, 1Dh, 1Dh, 0Eh, 15h, 16h, 26h, 13h
                db  21h, 1Bh, 0Fh, 1Ah, 20h, 20h, 1Fh, 1Fh, 18h, 58h, 65h, 63h, 65h, 7Bh, 6Ch, 71h
                db  7Ah, 71h, 71h, 6Ch, 6Fh, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1, 5Ah, 9Eh
                db  79h, 77h, 6Eh, 6Bh, 6Bh, 6Bh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 74h, 74h, 74h, 6Dh, 66h, 5Dh, 56h, 56h, 56h, 57h, 57h, 57h
                db  57h, 59h, 59h, 59h, 59h, 5Bh, 5Bh, 63h, 79h, 53h, 5Ah,0DAh,0DAh,0DAh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  0Eh, 0Eh, 0Eh, 0Eh, 0Eh, 0Eh, 15h, 0Eh, 0Ch, 1Dh, 1Dh, 0Eh, 15h, 11h, 26h, 13h
                db  21h, 1Bh, 1Ah, 1Ah, 20h, 1Fh, 1Fh, 1Fh, 18h, 58h, 65h, 63h, 64h, 7Bh, 82h, 6Ch
                db  71h, 7Ah, 71h, 6Ch, 70h, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 5Fh, 9Eh, 87h, 77h, 6Fh, 6Bh, 66h, 66h, 6Bh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 74h, 6Dh, 6Dh, 5Dh, 57h, 57h, 57h
                db  59h, 59h, 59h, 59h, 5Bh, 5Bh, 5Bh, 5Bh, 64h, 65h, 86h, 54h, 7Fh, 5Ah,   2,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 0Eh, 0Eh, 15h, 15h, 0Eh, 1Dh, 1Dh, 1Dh, 0Eh, 15h, 11h, 13h, 21h
                db  1Bh, 0Fh, 1Ah, 1Ah, 20h, 1Fh, 1Fh, 24h, 25h, 58h, 65h, 65h, 64h, 7Bh, 82h, 71h
                db  71h, 82h, 71h, 7Ah, 70h, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1, 7Fh, 87h, 7Dh, 62h, 6Eh, 6Bh, 66h, 66h, 6Bh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Eh, 60h
                db  57h, 59h, 59h, 5Bh, 5Bh, 5Bh, 5Bh, 64h, 63h, 63h, 63h, 63h, 63h, 86h, 9Dh, 7Fh
                db 0DCh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 0Eh, 0Eh, 15h, 15h, 0Eh, 1Dh, 1Dh, 1Dh, 15h, 11h, 16h, 13h, 21h
                db  1Bh, 0Fh, 1Ah, 20h, 20h, 1Fh, 1Fh, 1Fh, 25h, 58h, 84h, 63h, 64h, 82h, 82h, 82h
                db  6Ch, 6Ch, 7Ah, 71h, 7Ah, 9Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1, 7Fh, 9Dh, 79h, 78h, 6Fh, 66h, 66h, 6Bh
                db  6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Eh, 67h, 59h, 5Bh, 5Bh, 64h, 64h, 63h, 63h, 61h, 61h, 61h, 63h, 63h, 63h
                db  87h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 0Eh, 0Eh, 15h, 11h, 0Eh, 1Dh, 1Dh, 0Eh, 0Eh, 16h, 26h, 13h, 21h
                db  1Bh, 1Ah, 1Ah, 20h, 1Fh, 1Fh, 1Fh, 24h, 25h, 58h, 65h, 65h, 64h, 82h, 7Bh, 82h
                db  71h, 71h, 71h, 7Ah, 71h, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Ah, 9Eh, 87h, 78h, 70h
                db  6Bh, 66h, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Bh, 6Eh, 6Fh, 62h, 5Bh, 64h, 63h, 61h, 61h, 61h, 61h, 61h, 61h, 63h
                db 0AFh,0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 0Eh, 15h, 15h, 15h, 0Eh, 1Dh, 1Dh, 0Eh, 15h, 11h, 26h, 13h, 21h
                db  0Fh, 0Fh, 1Ah, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 25h, 63h, 65h, 65h, 68h, 82h, 82h, 71h
                db  82h, 6Ch, 71h, 7Ah, 7Bh, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Fh, 88h
                db  87h, 84h, 71h, 6Bh, 66h, 6Bh, 6Bh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Bh, 6Dh, 6Dh, 70h, 69h, 64h, 61h, 61h, 61h, 61h, 61h,0ADh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  0Eh, 0Eh, 0Eh, 0Eh, 15h, 15h, 16h, 15h, 1Dh, 1Dh, 0Eh, 15h, 16h, 13h, 21h, 1Bh
                db  0Fh, 1Ah, 1Ah, 20h, 1Fh, 1Fh, 1Fh, 24h, 25h, 58h, 65h, 65h, 64h, 71h, 82h, 82h
                db  82h, 6Ch, 71h, 7Ah, 75h, 88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh, 5Ah, 87h, 6Ah, 75h, 6Dh, 6Bh, 66h, 6Bh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Bh, 6Bh, 6Dh, 6Ch, 68h, 65h, 61h, 85h,0AEh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  15h, 0Eh, 0Eh, 15h, 15h, 15h, 16h, 15h, 1Dh, 1Dh, 0Eh, 15h, 16h, 13h, 21h, 1Bh
                db  0Fh, 1Ah, 20h, 20h, 1Fh, 25h, 1Fh, 1Fh, 25h, 65h, 65h, 65h, 68h, 82h, 82h, 82h
                db  7Bh, 71h, 6Ch, 7Ah, 7Ch, 5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1, 5Fh, 9Dh, 86h, 77h, 6Eh, 66h, 66h, 66h, 6Bh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Bh, 6Bh, 6Eh, 62h,0ADh,0AFh
                db  9Dh,0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  15h, 0Eh, 0Eh, 11h, 15h, 16h, 16h, 15h, 1Dh, 1Dh, 0Eh, 15h, 11h, 13h, 21h, 1Bh
                db  0Fh, 1Ah, 20h, 20h, 1Fh, 1Fh, 1Fh, 24h, 25h, 65h, 65h, 65h, 68h, 7Bh, 71h, 82h
                db  82h, 82h, 71h, 7Ah, 77h, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1, 5Fh, 9Dh, 87h, 78h, 6Fh, 66h, 66h, 66h
                db  6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Bh, 6Bh,0ADh,0AFh
                db  9Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  15h, 15h, 15h, 15h, 16h, 11h, 26h, 11h, 1Dh, 0Eh, 0Eh, 11h, 13h, 13h, 21h, 1Bh
                db  1Ah, 1Ah, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 1Fh, 3Eh, 64h, 64h, 65h, 68h, 7Bh, 7Bh, 82h
                db  71h, 82h, 82h, 7Ah, 83h, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Ah, 9Eh, 9Dh, 79h, 84h
                db  6Fh, 66h, 66h, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh,0ADh,0AFh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Bh
                db  16h, 15h, 15h, 16h, 16h, 16h, 13h, 11h, 1Dh, 0Eh, 15h, 11h, 26h, 13h, 21h, 0Fh
                db  1Ah, 1Ah, 20h, 1Fh, 1Fh, 1Fh, 25h, 18h, 3Eh, 65h, 64h, 65h, 68h, 82h, 7Bh, 71h
                db  82h, 82h, 82h, 7Ah, 78h,0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Fh
                db  7Fh, 87h, 6Ah, 70h, 6Bh, 6Bh, 6Bh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 74h,0AEh,0AFh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  11h, 15h, 16h, 16h, 16h, 26h, 13h, 16h, 1Dh, 0Eh, 15h, 11h, 13h, 21h, 1Bh, 0Fh
                db  1Ah, 1Ah, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 24h, 3Eh, 64h, 64h, 65h, 68h, 7Bh, 7Bh, 82h
                db  82h, 82h, 71h, 7Ah, 7Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh, 7Fh, 9Dh, 6Ah, 71h, 6Eh, 66h, 66h, 6Bh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Eh,0AEh,0AFh
                db  9Dh,0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  11h, 15h, 16h, 11h, 26h, 13h, 13h, 16h, 1Dh, 0Eh, 15h, 16h, 13h, 21h, 1Bh, 0Fh
                db  1Ah, 20h, 20h, 1Fh, 25h, 1Fh, 25h, 18h, 3Eh, 64h, 64h, 65h, 77h, 7Bh, 7Bh, 7Bh
                db  7Bh, 82h, 82h, 7Ah, 89h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1, 88h, 9Dh, 86h, 69h, 6Fh, 66h, 66h, 66h, 6Bh, 6Dh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Eh,0AEh,0AFh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  16h, 16h, 16h, 16h, 13h, 13h, 13h, 13h, 1Dh, 0Eh, 15h, 26h, 13h, 21h, 1Bh, 0Fh
                db  1Ah, 20h, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 1Fh, 3Eh, 64h, 64h, 64h, 72h, 7Bh, 7Bh, 7Bh
                db  7Bh, 82h, 82h, 7Ah, 7Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1, 5Ah, 9Eh, 79h, 7Dh, 6Fh, 66h, 66h
                db  66h, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Fh,0AEh,0AFh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  26h, 16h, 26h, 13h, 13h, 13h, 21h, 13h, 1Dh, 0Eh, 15h, 16h, 13h, 21h, 1Bh, 0Fh
                db  1Ah, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 24h, 18h, 3Eh, 64h, 64h, 64h, 77h, 7Bh, 7Bh, 7Bh
                db  7Bh, 71h, 82h, 7Ah, 8Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Fh, 9Eh, 87h, 7Eh
                db  75h, 6Dh, 66h, 6Bh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Bh, 6Fh,0AEh,0AFh
                db  9Eh,0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  13h, 26h, 13h, 13h, 21h, 21h, 1Bh, 13h, 0Eh, 0Eh, 11h, 26h, 13h, 21h, 0Fh, 1Ah
                db  1Ah, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 25h, 19h, 46h, 78h, 64h, 64h, 72h, 7Bh, 7Bh, 7Bh
                db  7Bh, 82h, 82h, 7Ah, 85h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Fh
                db  5Ah, 9Eh, 86h, 77h, 6Eh, 66h, 6Bh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 6Bh, 6Fh,0AEh,0AEh
                db  9Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  13h, 13h, 13h, 13h, 21h, 21h, 1Bh, 13h, 1Dh, 0Eh, 16h, 26h, 21h, 21h, 1Bh, 1Ah
                db  20h, 20h, 1Fh, 25h, 1Fh, 1Fh, 2Ah, 19h, 46h, 7Dh, 64h, 64h, 69h, 7Bh, 7Bh, 7Bh
                db  7Bh, 7Bh, 82h, 7Ah, 79h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 9Eh, 79h, 7Dh, 6Fh, 6Dh, 6Dh, 6Dh, 6Dh, 6Bh, 6Fh,0AEh,0AEh
                db  9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  21h, 13h, 21h, 21h, 21h, 1Bh, 1Bh, 21h, 1Dh, 15h, 11h, 26h, 21h, 1Bh, 0Fh, 1Ah
                db  20h, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 1Fh, 18h, 46h, 78h, 64h, 64h, 69h, 7Bh, 75h, 7Bh
                db  7Bh, 7Bh, 71h, 7Ah, 79h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 9Eh, 70h, 6Bh, 6Dh, 6Dh, 6Bh, 6Fh,0AEh,0AEh
                db  9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  21h, 13h, 21h, 21h, 1Bh, 1Bh, 0Fh, 21h, 1Dh, 15h, 16h, 13h, 21h, 1Bh, 0Fh, 1Ah
                db  20h, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 1Fh, 18h, 46h, 7Dh, 64h, 64h, 7Ch, 7Bh, 75h, 7Bh
                db  7Bh, 7Bh, 7Bh, 7Ah, 87h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1, 75h, 6Bh, 6Dh, 6Dh, 6Bh, 70h,0AEh,0ADh
                db  7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  21h, 21h, 1Bh, 1Bh, 1Bh, 0Fh, 0Fh, 21h, 0Eh, 15h, 16h, 13h, 21h, 1Bh, 0Fh, 1Ah
                db  20h, 1Fh, 1Fh, 1Fh, 1Fh, 25h, 24h, 24h, 58h, 78h, 68h, 64h, 7Ch, 7Bh, 75h, 7Bh
                db  7Bh, 7Bh, 7Bh, 7Ah, 87h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 5Fh, 71h, 6Bh, 6Dh, 6Dh, 6Bh, 7Ah,0ADh,0AEh
                db  7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  1Bh, 1Bh, 1Bh, 1Bh, 0Fh, 0Fh, 1Ah, 1Bh, 0Eh, 15h, 16h, 13h, 21h, 1Bh, 0Fh, 1Ah
                db  20h, 1Fh, 1Fh, 1Fh, 24h, 1Fh, 25h, 18h, 46h, 78h, 64h, 78h, 7Ch, 75h, 75h, 75h
                db  7Bh, 7Bh, 7Bh, 6Ch, 87h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 5Ah, 7Ah, 6Bh, 6Dh, 6Dh, 6Bh, 7Ah,0ADh,0ADh
                db  7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  1Bh, 1Bh, 0Fh, 0Fh, 0Fh, 1Ah, 1Ah, 1Bh, 0Eh, 11h, 26h, 13h, 21h, 1Bh, 1Ah, 20h
                db  20h, 1Fh, 1Fh, 1Fh, 1Fh, 24h, 1Fh, 18h, 4Dh, 78h, 68h, 64h, 7Ch, 75h, 75h, 75h
                db  75h, 7Bh, 7Bh, 7Ah, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 88h, 70h, 6Bh, 6Dh, 6Dh, 6Bh, 7Ah,0ADh,0ADh
                db  7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Dh
                db  0Fh, 0Fh, 0Fh, 1Ah, 1Ah, 1Ah, 1Ah, 1Bh, 0Eh, 11h, 26h, 13h, 1Bh, 0Fh, 1Ah, 1Ah
                db  20h, 1Fh, 1Fh, 25h, 1Fh, 24h, 24h, 18h, 58h, 78h, 64h, 78h, 7Ch, 75h, 75h, 75h
                db  75h, 7Bh, 7Bh, 7Ah, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 88h, 6Fh, 6Bh, 6Dh, 6Dh, 6Bh, 7Ah,0ADh,0ADh
                db  7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  0Fh, 1Ah, 1Ah, 1Ah, 1Ah, 1Ah, 20h, 0Fh, 0Eh, 11h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h
                db  20h, 1Fh, 1Fh, 1Fh, 24h, 24h, 24h, 18h, 58h, 78h, 68h, 68h, 7Ch, 75h, 75h, 75h
                db  75h, 7Bh, 7Bh, 6Ch, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,0DAh,0DBh,0DBh,   2,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 7Fh, 6Eh, 6Bh, 6Dh, 6Dh, 6Bh, 71h,0ADh,0ADh
                db  7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  1Ah, 1Ah, 1Ah, 1Ah, 1Ah, 20h, 20h, 0Fh, 0Eh, 16h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h
                db  1Fh, 1Fh, 25h, 24h, 24h, 24h, 24h, 19h, 5Bh, 68h, 68h, 68h, 7Ch, 75h, 75h, 75h
                db  75h, 75h, 7Bh, 82h, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh,0DBh,0DCh,0DDh, 5Ah,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 9Eh, 6Eh, 6Bh, 6Dh, 6Dh, 6Bh, 82h,0ACh,0ADh
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  20h, 1Ah, 1Ah, 1Ah, 20h, 20h, 20h, 0Fh, 15h, 16h, 13h, 21h, 1Bh, 1Ah, 1Ah, 20h
                db  1Fh, 1Fh, 1Fh, 24h, 24h, 24h, 24h, 24h, 58h, 68h, 68h, 68h, 7Ch, 75h, 75h, 75h
                db  75h, 75h, 7Bh, 82h, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,   2,0DCh,0DDh,0DEh,0DDh, 5Fh,0DAh,0DBh,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0DAh, 9Eh, 6Dh, 6Dh, 6Dh, 6Dh, 6Bh, 7Bh,0ACh,0ACh
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 0Ah
                db  20h, 20h, 20h, 20h, 20h, 20h, 1Fh, 0Fh, 15h, 11h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h
                db  1Fh, 25h, 24h, 24h, 24h, 2Ah, 18h, 24h, 5Bh, 68h, 68h, 68h, 7Ch, 75h, 75h, 75h
                db  75h, 75h, 7Bh, 7Bh, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0DBh,0DDh,0E2h,0E2h,0DDh,   2,0E2h,0E5h,0DFh,0DAh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0DAh, 9Dh, 6Bh, 6Dh, 6Dh, 6Dh, 6Bh, 7Bh,0ACh,0ACh
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0B4h,0BEh,0BEh,0C7h,0BEh,0BEh,0C7h,0BEh,0BEh,0BEh,0BEh,0C7h,0DFh
                db  20h, 20h, 20h, 20h, 20h, 1Fh, 1Fh, 1Ah, 15h, 16h, 13h, 21h, 0Fh, 1Ah, 1Ah, 20h
                db  1Fh, 1Fh, 24h, 24h, 2Ah, 24h, 18h, 2Ah, 5Bh, 78h, 68h, 68h, 7Ch, 7Ch, 75h, 75h
                db  75h, 75h, 7Bh, 75h, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DBh,0DDh,0DEh,0E7h,0E6h,0DDh,0DEh,0E5h,0E5h,0E4h,0DBh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 9Dh, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 7Bh,0ACh,0ACh
                db  5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0E1h
                db  1Fh, 20h, 20h, 1Fh, 1Fh, 1Fh, 1Fh, 1Ah, 11h, 26h, 13h, 1Bh, 0Fh, 1Ah, 20h, 1Fh
                db  1Fh, 24h, 18h, 18h, 2Ah, 18h, 18h, 2Ah, 64h, 78h, 68h, 68h, 7Ch, 7Ch, 75h, 75h
                db  75h, 75h, 7Bh, 7Ch, 88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1, 5Fh,0DCh,0DDh,0E3h,0EAh,0E7h,0DEh,0DFh,0E5h,0E6h,0E3h,0DDh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0DAh, 9Dh, 6Bh, 6Dh, 6Dh, 6Dh, 6Bh, 7Bh,0A9h,0ADh
                db  5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0E1h
                db  1Fh, 1Fh, 1Fh, 1Fh, 25h, 1Fh, 2Ah, 1Ah, 15h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 1Fh
                db  25h, 24h, 2Ah, 18h, 23h, 23h, 18h, 2Ah, 68h, 68h, 68h, 77h, 7Ch, 7Ch, 7Ch, 75h
                db  75h, 75h, 7Bh, 77h, 5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db    2,0DBh,0DEh,0DFh,0E7h,   0,0B2h,0E1h,0DFh,0E5h,0E6h,0E4h,0DBh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 87h, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 7Bh,0A9h, 8Ah
                db 0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0E1h
                db  24h, 1Fh, 25h, 1Fh, 1Fh, 1Fh, 24h, 1Ah, 16h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 1Fh
                db  24h, 24h, 18h, 23h, 23h, 23h, 23h, 2Ah, 68h, 68h, 68h, 68h, 7Ch, 7Ch, 7Ch, 75h
                db  75h, 75h, 7Bh, 83h, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db 0DBh,0DDh,0DEh,0E4h,0EBh,   0,0EAh,0E3h,0DEh,0E5h,0E5h,0E3h,0DAh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0DAh, 87h, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 7Bh,0A9h, 8Ah
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0E1h
                db  24h, 1Fh, 1Fh, 1Fh, 1Fh, 25h, 2Ah, 1Ah, 11h, 13h, 21h, 1Bh, 0Fh, 1Ah, 20h, 1Fh
                db  24h, 23h, 23h, 23h, 23h, 23h, 18h, 2Ah, 72h, 68h, 68h, 72h, 7Ch, 7Ch, 7Ch, 7Ch
                db  75h, 75h, 7Bh, 7Dh, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DBh
                db 0DDh,0DEh, 49h,0B2h,   0,   0,   0,0E6h,0DDh,0DEh, 49h,0DBh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 87h, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 7Bh, 83h, 85h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0E1h
                db  18h, 1Fh, 25h, 24h, 25h, 24h, 18h, 1Ah, 16h, 13h, 21h, 0Fh, 1Ah, 20h, 20h, 1Fh
                db  24h, 23h, 23h, 23h, 23h, 23h, 22h, 3Eh, 68h, 68h, 68h, 68h, 7Ch, 7Ch, 7Ch, 7Ch
                db  75h, 75h, 7Bh, 89h, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DBh,0DDh
                db 0DEh,0DFh,0E7h,   0,   0,   0,   0,0E7h,0DFh,0DCh,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0DAh, 87h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 7Bh, 83h, 86h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0E1h
                db  18h, 24h, 24h, 2Ah, 24h, 24h, 23h, 20h, 16h, 21h, 21h, 0Fh, 1Ah, 20h, 1Fh, 1Fh
                db  18h, 23h, 23h, 23h, 23h, 23h, 29h, 3Eh, 68h, 68h, 68h, 77h, 7Ch, 7Ch, 7Ch, 7Ch
                db  7Ch, 75h, 7Bh, 84h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,0DBh,0DCh,0DEh
                db 0DFh,0E6h,   0,   0,   0,   0,   0,0B2h, 49h,0DDh,   2,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 79h, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 7Bh, 7Ch, 86h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0CAh
                db  18h, 24h, 2Ah, 18h, 18h, 18h, 23h, 20h, 16h, 13h, 1Bh, 0Fh, 1Ah, 20h, 1Fh, 24h
                db  23h, 23h, 23h, 29h, 23h, 29h, 22h, 3Eh, 68h, 77h, 68h, 77h, 7Ch, 7Ch, 7Ch, 7Ch
                db  7Ch, 75h, 7Bh, 7Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,   2, 5Ah,0DDh,0DFh,0DFh
                db 0E5h,0EAh,   0,   0,   0,   0,   0,0EAh,0E3h,0DEh,0DBh,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 79h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 7Bh, 7Ch, 86h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C0h,0CAh
                db  23h, 18h, 2Ah, 18h, 2Ah, 2Ah, 23h, 20h, 26h, 21h, 1Bh, 0Fh, 1Ah, 1Fh, 1Fh, 2Ah
                db  23h, 29h, 29h, 29h, 29h, 29h, 22h, 45h, 72h, 68h, 68h, 77h, 7Ch, 77h, 7Ch, 7Ch
                db  7Ch, 7Ch, 82h, 7Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DAh,0DBh,0DCh,0DDh,0DFh,0DFh,0E5h
                db 0E9h,   0,   0,   0,   0,   0,   0,   0,0E5h,0DEh,0DCh,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 86h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 76h, 76h, 86h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C0h,0C0h,0CAh
                db  23h, 18h, 2Ah, 2Ah, 23h, 23h, 23h, 20h, 13h, 21h, 1Bh, 0Fh, 20h, 20h, 1Fh, 18h
                db  23h, 23h, 29h, 29h, 29h, 29h, 29h, 3Eh, 77h, 72h, 68h, 72h, 7Ch, 7Ch, 7Ch, 7Ch
                db  7Ch, 7Ch, 7Bh, 6Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0DAh,0DAh,   2,0DBh,0DCh,0DCh,0DEh,0DFh,0DFh,0E5h,0E9h
                db    0,   0,   0,   0,   0,   0,   0,   0,0E7h,0DEh,0DCh,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 6Ah, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 82h, 76h, 79h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C0h,0CAh
                db  23h, 18h, 23h, 23h, 23h, 23h, 23h, 20h, 13h, 21h, 1Bh, 1Ah, 20h, 1Fh, 24h, 23h
                db  23h, 29h, 29h, 29h, 29h, 29h, 22h, 45h, 77h, 72h, 72h, 77h, 77h, 77h, 7Ch, 7Ch
                db  7Ch, 7Ch, 7Bh, 85h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh,0DAh,   2,0DBh, 5Ah,0DCh,0DDh,0DFh,0DFh,0E0h,0E5h,0E9h,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0B2h,0E1h,0DDh,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 7Eh, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 76h, 82h, 79h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C0h,0C0h,0BFh,0BFh,0BFh,0CAh
                db  29h, 23h, 23h, 23h, 23h, 23h, 23h, 20h, 13h, 1Bh, 0Fh, 1Ah, 20h, 1Fh, 24h, 23h
                db  29h, 29h, 29h, 29h, 29h, 29h, 29h, 45h, 77h, 72h, 72h, 77h, 77h, 7Ch, 7Ch, 7Ch
                db  7Ch, 7Ch, 7Bh, 85h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DAh,0DAh,0DAh,0DAh,0DAh,0DAh
                db 0DAh,0DBh,0DBh, 5Ah,0DCh,0DCh,0DDh,0DEh,0DFh,0E0h,0E0h,0E2h,0E7h,0EAh,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0E9h,0E3h,0DEh,0DBh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 89h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 82h, 6Ch, 79h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C5h,0C3h,0C3h,0C2h,0BCh,0B5h
                db  22h, 18h, 23h, 23h, 23h, 23h, 29h, 20h, 13h, 1Bh, 0Fh, 20h, 20h, 1Fh, 23h, 23h
                db  29h, 29h, 29h, 29h, 28h, 29h, 29h, 45h, 77h, 77h, 72h, 77h, 77h, 72h, 7Ch, 7Ch
                db  77h, 7Ch, 7Bh, 86h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,0DAh,0DAh,0DBh,0DCh,0DCh,0DCh,0DCh,0DBh,0DCh
                db 0DCh,0DCh,0DDh,0DDh,0DEh,0DFh,0E0h,0E1h,0E0h, 49h,0E5h,0B2h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,0E4h,0DEh,0DCh,0DAh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 68h, 6Bh, 6Dh, 6Dh, 6Dh, 6Eh, 6Ch, 6Ch, 79h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C5h,0C2h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 1Fh, 21h, 1Bh, 0Fh, 1Ah, 1Fh, 24h, 23h, 29h
                db  29h, 29h, 28h, 29h, 29h, 29h, 29h, 45h, 77h, 72h, 72h, 77h, 77h, 77h, 77h, 7Ch
                db  7Ch, 7Ch, 7Bh, 79h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0DAh,0DAh,0DAh,0DBh,0DCh,0DDh,0DEh,0DEh,0DEh,0DDh,0DDh
                db 0DEh,0DFh,0DFh,0E0h,0E0h,0E1h, 49h, 49h,0E5h,0E8h,0EAh,   0,   0,   0,   0,   0
                db    0,   0,   0, 5Eh,0C6h,   0,   0,   0,0EBh,0E7h,0DFh,0DCh, 5Fh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1, 77h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 6Ch, 7Ah, 79h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C5h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 29h, 20h, 21h, 1Bh, 1Ah, 20h, 1Fh, 2Ah, 23h, 29h
                db  29h, 29h, 29h, 28h, 29h, 28h, 29h, 45h, 77h, 69h, 72h, 77h, 77h, 77h, 77h, 7Ch
                db  7Ch, 7Ch, 7Bh, 79h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh,   2,0DBh,0DBh,0DBh,0DCh,0DEh,0DFh,0E0h,0E0h,0DFh,0DFh,0DFh
                db 0E0h,0E0h,0E1h, 49h,0E2h,0E3h,0E5h,0E8h, 47h,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,0B9h,0B9h,   0,   0,   0,   0,0E8h,0E0h,0DDh,   2,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0DAh, 69h, 6Bh, 6Dh, 6Dh, 6Dh, 6Eh, 6Ch, 60h, 87h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C5h,0C2h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 1Fh, 21h, 0Fh, 1Ah, 20h, 1Fh, 24h, 23h, 29h
                db  29h, 29h, 28h, 29h, 28h, 29h, 29h, 45h, 7Ch, 72h, 72h, 77h, 77h, 77h, 77h, 7Ch
                db  77h, 7Ch, 76h, 79h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DBh,0DCh,0DCh,0DCh,0DDh,0DEh,0DFh,0E0h,0E1h,0E1h,0E0h,0E1h,0E1h
                db  49h,0E3h,0E4h,0E6h,0E7h,0B2h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,0BAh,0B7h,0B8h,   0,   0,   0,   0,0E9h,0E2h,0DEh,0DBh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0DAh, 75h, 6Bh, 6Dh, 6Dh, 6Dh, 6Eh, 6Ch, 60h, 54h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C1h,0C4h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 29h, 1Fh, 21h, 0Fh, 1Ah, 20h, 1Fh, 23h, 29h, 29h
                db  29h, 28h, 29h, 28h, 29h, 28h, 28h, 45h, 7Ch, 72h, 72h, 83h, 77h, 77h, 77h, 77h
                db  7Ch, 7Ch, 7Bh, 87h,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh, 5Ah,0DEh,0DEh,0DFh,0DEh, 49h,0E7h,0E7h,0E7h,0E7h,0E7h,0E5h,0E7h
                db 0E8h,0B2h,0E9h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,0B6h,0B7h,0B7h,0B7h,0C6h,   0,   0,   0,   0,0E4h,0DEh,0DCh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,0B4h, 75h, 6Bh, 6Dh, 6Dh, 6Dh, 6Eh, 60h, 60h, 9Dh
                db    2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C1h,0C0h,0C5h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 29h, 1Fh, 1Bh, 0Fh, 20h, 1Fh, 24h, 23h, 29h, 29h
                db  28h, 29h, 28h, 28h, 28h, 28h, 28h, 5Bh, 7Ch, 69h, 69h, 83h, 83h, 77h, 77h, 77h
                db  77h, 7Ch, 76h, 87h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh,0DAh,   2,0DCh,0DEh,0E0h,0E1h,0E0h,0E2h,0E9h,   0,   0,   0,   0,0E7h,0E9h
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db 0BAh,0B7h,0B7h,0B7h,0B7h,0BAh,   0,   0,   0,   0,0E6h,0DFh,0DCh,0DAh,   1,   1
                db    1,   1,   1,   1,   1,   1, 5Fh, 71h, 6Bh, 6Dh, 6Dh, 6Dh, 6Eh, 60h, 60h, 9Dh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C1h,0C0h,0C0h,0C4h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 29h, 1Fh, 1Bh, 1Ah, 20h, 1Fh, 23h, 23h, 29h, 29h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 5Bh, 69h, 69h, 69h, 77h, 83h, 77h, 77h, 77h
                db  77h, 77h, 76h, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db 0DBh,0DBh,0DBh,0DEh, 49h,0E3h,0E3h,0E3h,0E2h,0E8h,   0,   0,   0,   0,0E8h,0E8h
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B9h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B9h,   0,   0,   0,   0,0E8h,0E0h,0DDh,   2,   1,   1
                db    1,   1,   1,   1,   1,   1, 5Ah, 71h, 6Bh, 6Dh, 6Dh, 6Dh, 6Eh, 60h, 60h, 53h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C0h,0C0h,0C0h,0C4h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 29h, 1Fh, 1Bh, 1Ah, 20h, 1Fh, 23h, 29h, 29h, 29h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 5Bh, 75h, 69h, 69h, 83h, 83h, 77h, 77h, 77h
                db  77h, 7Ch, 75h, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DBh
                db 0DCh,0DCh,0DBh,0E3h,0B2h,0B2h,0E9h,0E9h,0E8h,0E7h,   0,   0,   0,   0,0B2h,0E7h
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 5Eh,0B6h,0B8h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B8h,   0,   0,   0,   0,0E9h,0E2h,0DEh,0DBh,   1,   1
                db    1,   1,   1,   1,   1,   1, 5Ah, 7Ah, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 60h, 60h, 53h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C1h,0C0h,0C0h,0C0h,0C4h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 29h, 29h, 1Fh, 0Fh, 1Ah, 20h, 24h, 23h, 29h, 29h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 5Bh, 75h, 69h, 69h, 83h, 83h, 83h, 77h, 77h
                db  77h, 7Ch, 75h, 9Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,0DCh
                db 0DEh,0DEh,0DEh,0E2h,0EAh,   0,   0,   0,0EAh,0E6h,0CBh,   0,   0,   0,0EAh,0E6h
                db  47h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0C6h,0B8h,0B7h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B8h,0C6h,   0,   0,   0,   0,0E4h,0DEh,0DCh,   1,   1
                db    1,   1,   1,   1,   1,   1, 88h, 70h, 6Bh, 6Dh, 6Dh, 6Dh, 6Eh, 60h, 60h, 53h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C0h,0C0h,0C0h,0BFh,0C4h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 29h, 1Fh, 0Fh, 20h, 20h, 2Ah, 23h, 29h, 29h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 5Bh, 75h, 69h, 69h, 78h, 83h, 83h, 77h, 77h
                db  77h, 77h, 7Ch, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DBh,0DDh
                db 0DFh,0E0h,0E0h,0E0h,0E8h,   0,   0,   0,0EBh,0E6h,0E9h,   0,   0,   0,0EBh,0E7h
                db 0B2h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0AAh,0B7h,0B7h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B6h,   0,   0,   0,   0,0E6h,0DEh,0DCh,0DAh,   1
                db    1,   1,   1,   1,   1,   1, 88h, 70h, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 5Dh, 5Dh, 9Eh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C1h,0C0h,0C0h,0C0h,0C0h,0C4h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 29h, 23h, 29h, 1Fh, 1Ah, 20h, 1Fh, 23h, 29h, 29h, 29h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 5Bh, 7Ch, 69h, 69h, 83h, 83h, 83h, 83h, 83h
                db  77h, 72h, 7Ch, 9Eh,   1,   1,   1,   1,   1,   1,   1,0DAh,0DAh,0DAh,0DCh,0DDh
                db 0E0h, 49h,0E2h,0E0h,0E7h,   0,   0,   0,   0,0E6h,0E8h,   0,   0,   0,   0,0E8h
                db 0E8h,   0,   0,   0,   0,   0,   0, 2Eh, 3Bh, 33h,   0,   0,   0,0B8h,0B7h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B9h,   0,   0,   0,0EBh,0E8h,0DFh,0DDh,   2,   1
                db    1,   1,   1,   1,   1,   1, 7Fh, 6Fh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 5Dh, 60h, 9Eh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C0h,0C0h,0C0h,0BFh,0BFh,0C4h,0C3h,0C3h,0C2h,0BCh,0D3h
                db  22h, 29h, 23h, 23h, 23h, 23h, 29h, 24h, 1Ah, 20h, 24h, 23h, 29h, 29h, 28h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 69h, 75h, 69h, 69h, 78h, 83h, 83h, 83h, 77h
                db  77h, 77h, 77h, 7Fh,0DAh,   1,   1,   1,   1,   1,0DAh,   2, 5Ah,0DBh,0DCh,0E6h
                db 0E8h,0E8h,0E8h,0E6h,0E5h,   0,   0,   0,   0,0E8h,0E6h,   0, 47h,0EBh,   0,0B2h
                db 0E8h,0EBh,0EBh, 5Eh, 31h, 3Bh, 3Ah, 3Ah, 2Fh, 3Bh,   0,   0,   0,0B9h,0B7h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B8h,   0,   0,   0,   0,0E9h,0E2h,0DDh,0DBh,   1
                db    1,   1,   1,   1,   1,   1, 7Fh, 6Fh, 6Bh, 6Dh, 6Dh, 6Dh, 5Dh, 5Dh, 5Dh, 7Fh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C1h,0C0h,0C0h,0BFh,0BFh,0BFh,0C4h,0C3h,0C2h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 29h, 23h, 29h, 24h, 1Ah, 1Fh, 24h, 23h, 29h, 28h, 28h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 69h, 75h, 69h, 77h, 78h, 83h, 83h, 83h, 83h
                db  77h, 77h, 83h, 7Fh,   1,   1,   1,   1,   1,   1,0DAh, 5Ah,0DDh,0DDh,0DCh,0E7h
                db 0EBh,   0,   0,0E9h,0E4h,0E9h,0EAh,0EAh,0EAh,0E9h,0E4h,0E5h,0E6h,0E6h,0E6h,0E6h
                db  45h, 3Ah, 3Ah, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ah,   0,   0,   0,0BAh,0B7h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B8h,0C6h,   0,   0,   0,0EBh,0E4h,0DEh, 5Ah,0DAh
                db    1,   1,   1,   1,   1,   1, 7Fh, 6Eh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 5Dh, 5Dh,0DDh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C0h,0C0h,0C0h,0BFh,0BFh,0BFh,0C4h,0C3h,0C3h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 29h, 23h, 24h, 20h, 1Fh, 2Ah, 29h, 29h, 29h, 28h, 28h
                db  28h, 28h, 28h, 28h, 28h, 28h, 28h, 69h, 7Ch, 69h, 77h, 78h, 78h, 83h, 83h, 83h
                db  77h, 77h, 83h, 7Fh,   1,   1,   1,   1,   1,   1,0DBh,0DDh,0DFh,0E0h,0DEh,0E5h
                db    0,   0,   0,   0,0E4h,0E3h,0E5h,0E5h,0E5h,0E5h,0E2h,0E7h,0E8h,0E8h,0E8h,0E7h
                db 0E5h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ch,   0,   0,0EBh,0B7h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B6h,   0,   0,   0,   0,0E6h,0DEh,0DCh,0DAh
                db    1,   1,   1,   1,   1,   1, 9Eh, 6Eh, 6Bh, 6Dh, 6Dh, 6Dh, 66h, 5Dh, 60h, 7Fh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C0h,0C0h,0BFh,0BFh,0BFh,0BFh,0C5h,0C3h,0C3h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 2Ah, 23h, 23h, 23h, 23h, 23h, 23h, 23h
                db  23h, 25h, 1Fh, 20h, 20h, 1Ah, 1Ah, 69h, 75h, 75h, 77h, 78h, 78h, 83h, 83h, 83h
                db  83h, 7Ch, 78h, 88h,   1,   1,   1,   1,   1,   1,0DBh,0DCh,0DEh,0DFh,0DFh,0E2h
                db 0E9h,   0,   0,   0,0E6h,   1,0B3h,0DDh,0CDh,0DFh,0E0h,0B2h,   0,   0,   0,0CBh
                db 0E8h, 32h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 31h,   0,   0, 5Eh,0B8h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B9h,   0,   0,   0,   0,0E7h,0DFh,0DDh,0DAh
                db    1,   1,   1,   1,   1,0DAh, 9Eh, 6Dh, 6Dh, 6Dh, 6Dh, 74h, 5Dh, 5Ch, 5Dh, 88h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0C0h,0BFh,0BFh,0BFh,0BFh,0C5h,0C4h,0C3h,0C3h,0C2h,0BCh,0D3h
                db  22h, 23h, 23h, 29h, 23h, 23h, 29h, 23h, 29h, 23h, 29h, 23h, 23h, 2Ah, 25h, 1Fh
                db  20h, 1Ah, 0Fh, 21h, 21h, 11h, 42h, 75h, 75h, 62h, 77h, 7Dh, 78h, 78h, 83h, 83h
                db  83h, 77h, 7Dh, 88h,   1,   1,   1,   1,0DAh,   1,0DAh,0E3h,0E6h,0E7h,0E6h,0E1h
                db 0E8h,0EAh,0E9h,0EAh,0E7h,0DCh, 12h, 42h, 27h, 27h, 49h,0E7h,   0,   0,   0,   0
                db 0B2h, 34h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Bh,   0,   0,0EBh,0B9h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B8h,   0,   0,   0,   0,0B2h, 49h,0DEh,0DBh
                db    1,   1,   1,   1,   1,   1, 9Eh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 5Dh, 5Ch, 60h, 5Ah
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0C0h,0BFh,0BFh,0BFh,0C5h,0C5h,0C4h,0C3h,0C3h,0C2h,0C2h,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 29h, 23h, 23h, 23h, 23h, 18h, 24h, 1Fh
                db  20h, 1Ah, 0Fh, 1Bh, 21h, 10h, 42h, 75h, 75h, 75h, 77h, 7Dh, 78h, 83h, 83h, 83h
                db  83h, 77h, 89h, 5Ah,   1,   1,   1,   1,0DBh,0DBh,   1,0E6h,   0,   0,   0,0E4h
                db 0DFh, 49h, 49h, 49h,0E1h,0BEh, 34h, 2Fh, 2Fh, 2Fh, 34h,0E5h,   0,   0,   0,   0
                db 0C6h, 28h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ah,   0,   0,   0,0BAh,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B8h,0AAh,   0,   0,   0,0EAh,0E3h,0DEh,0DCh
                db    1,   1,   1,   1,   1,   1, 9Dh, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 5Dh, 5Ch, 57h, 5Fh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0BFh,0BFh,0BFh,0BFh,0C5h,0C5h,0C4h,0C4h,0C3h,0C3h,0BCh,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 29h, 23h, 23h, 23h, 23h, 23h, 23h, 24h, 1Fh, 20h
                db  20h, 1Ah, 1Bh, 21h, 21h, 10h, 42h, 75h, 62h, 75h, 77h, 78h, 78h, 78h, 83h, 83h
                db  83h, 72h, 7Eh, 5Fh,   1,   1,   1,0DAh,0DBh,0DCh,0DBh,0E2h,   0,   0,   0,0E6h
                db 0DAh,0DBh,0DDh,0DEh,0DEh,0DEh, 35h, 2Fh, 2Fh, 2Fh, 32h,0E3h,0C6h,   0,   0,   0
                db    0,0E6h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ah,0EBh,   0,   0,0B6h,0B7h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B6h,   0,   0,   0,   0,0E5h,0DEh,0DCh
                db    1,   1,   1,   1,   1,   1, 9Dh, 6Bh, 6Dh, 6Dh, 6Dh, 74h, 5Ch, 5Ch, 57h,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C7h,0BFh,0BFh,0BFh,0C5h,0C5h,0C5h,0C4h,0C4h,0C3h,0C2h,0C2h,0D3h
                db  22h, 29h, 23h, 23h, 29h, 23h, 23h, 29h, 23h, 23h, 23h, 23h, 23h, 24h, 1Fh, 20h
                db  1Ah, 0Fh, 1Bh, 21h, 13h, 11h, 42h, 75h, 75h, 75h, 77h, 7Dh, 78h, 78h, 78h, 83h
                db  83h, 77h, 8Ah,0DAh,   1,   1,   1,0DBh,0DDh,0DEh,0DEh,0DFh,0E8h,0E9h,0E9h,0E7h
                db 0DBh,0C7h,0DEh,0CDh,0CDh,0CDh, 2Dh, 2Fh, 2Fh, 2Fh, 2Fh, 2Dh,0E8h,   0,   0,   0
                db    0,0E7h, 32h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 31h,   0,   0,0AAh,0B8h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B9h,   0,   0,   0,   0,0E7h,0DFh,0DDh
                db 0DAh,   1,   1,   1,   1,   1, 87h, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 5Dh, 55h, 57h,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0BFh,0BFh,0C5h,0C5h,0C5h,0C5h,0C4h,0C4h,0C3h,0C3h,0C2h,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 2Ah, 1Fh, 20h, 20h
                db  1Ah, 0Fh, 21h, 13h, 13h, 11h, 42h, 7Bh, 75h, 75h, 77h, 7Dh, 78h, 7Dh, 78h, 78h
                db  83h, 77h, 85h,   1,   1,   1,   1, 5Ah,0DBh,0DDh,0DEh,0DEh,0E0h,0E2h,0E2h,0E1h
                db 0DCh, 0Dh, 40h, 27h, 27h, 42h,0DFh, 32h, 2Fh, 2Fh, 2Fh, 3Dh,0E7h,0CBh,0EBh,   0
                db 0EBh,0B2h, 34h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 30h,0EBh,   0,0EBh,0B9h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B8h,   0,   0,   0,   0,0B2h, 49h,0DEh
                db 0DBh,   1,   1,   1,   1,   1, 87h, 66h, 6Dh, 6Dh, 6Dh, 74h, 5Ch, 55h, 59h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0BFh,0BFh,0C5h,0C5h,0C5h,0C4h,0C4h,0C4h,0C3h,0C3h,0C2h,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 18h, 1Fh, 1Fh, 20h, 1Ah
                db  0Fh, 1Bh, 21h, 13h, 16h, 15h, 4Ch, 7Bh, 75h, 75h, 77h, 89h, 78h, 78h, 78h, 83h
                db  83h, 7Ch, 86h,   1,   1,   1,   1,0DBh,0E2h,0E5h,0E4h,0DFh,0DAh,   1,   1,   1
                db 0C7h, 41h, 2Fh, 2Fh, 2Fh, 36h,0CDh, 34h, 2Fh, 2Fh, 2Fh, 34h,0E3h,0E7h,0E7h,0E7h
                db 0E7h,0E7h, 2Ah, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ah,   0,   0,   0,0BAh
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B9h,0EBh,   0,   0,   0,0EAh,0E3h,0DEh
                db 0DBh,   1,   1,   1,   1,   1, 87h, 66h, 6Dh, 6Dh, 6Dh, 74h, 5Ch, 55h, 59h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0BFh,0C5h,0C5h,0C5h,0C4h,0C4h,0C5h,0C4h,0C4h,0C3h,0C2h,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 24h, 1Fh, 1Fh, 20h, 1Ah
                db  0Fh, 1Bh, 13h, 13h, 11h,   9, 4Ch, 71h, 75h, 75h, 83h, 7Dh, 7Dh, 78h, 78h, 78h
                db  78h, 77h, 86h,   1,0DAh, 5Fh,   2,   1,0E7h,0EAh,0EAh,0E3h,0DAh,0DCh,0DDh,0DEh
                db 0DDh, 12h, 2Fh, 2Fh, 2Fh, 32h,0DFh, 17h, 39h, 39h, 39h, 2Dh,0E0h,0E6h,0E7h,0E7h
                db 0E7h,0E6h,0E5h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ah, 47h,   0,   0,0B6h
                db 0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0B8h,0CBh,   0,   0,   0,   0,   0,0E5h,0DEh
                db 0DCh,   1,   1,   1,   1,   1, 79h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 5Ch, 55h, 59h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0BFh,0C5h,0C5h,0C5h,0C5h,0C4h,0C5h,0C4h,0C4h,0C3h,0C2h,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 24h, 1Fh, 20h, 1Ah, 0Fh
                db  1Bh, 21h, 13h, 26h, 16h,   9, 4Ch, 71h, 75h, 75h, 83h, 89h, 7Dh, 78h, 78h, 78h
                db  83h, 7Ch, 79h,   1,   2,0DBh,0DCh,   1,0E5h,   0,   0,0E6h,   1,0DCh,0DEh,0DFh
                db 0DFh,0DEh, 34h, 2Fh, 2Fh, 2Fh, 41h,0C7h,0BEh,0CDh,0CDh,0CDh, 49h,0B2h,0EBh,0EBh
                db 0EBh,0EBh,0E7h, 32h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 33h,   0,   0,0CBh
                db 0B8h,0B7h,0B7h,0B7h,0B7h,0B7h,0B7h,0BAh,   0,   0,   0,   0,   0,0EBh,0E7h,0DFh
                db 0DCh,0DAh,   1,   1,   1,   1, 86h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 5Ch, 52h, 59h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0C5h,0C5h,0C5h,0C5h,0C4h,0C4h,0C5h,0C5h,0C4h,0C3h,0C3h,0D3h
                db  22h, 23h, 23h, 29h, 23h, 23h, 23h, 23h, 23h, 23h, 2Ah, 1Fh, 1Fh, 20h, 1Ah, 0Fh
                db  1Bh, 21h, 13h, 16h, 15h,   9, 58h, 71h, 75h, 75h, 83h, 89h, 7Dh, 78h, 78h, 78h
                db  78h, 77h, 79h,   1,0DBh,0DDh,0DDh,0DBh,0E1h,0E8h,0B2h,0E6h,0DAh,0DCh, 43h,0E1h
                db 0E1h,0DEh, 35h, 2Fh, 2Fh, 2Fh, 3Dh,0C7h,0DFh, 49h,0E2h,0E2h,0E1h,0E8h,0EBh,   0
                db    0,   0,0B2h, 34h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 30h,0EBh,   0,0EBh
                db 0B8h,0B7h,0B7h,0B7h,0B7h,0B7h,0BAh,0CBh,   0,   0,   0,   0,   0,   0,0B2h,0E1h
                db 0DDh,   2,   1,   1,   1,   1, 86h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 55h, 52h, 5Bh,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0C5h,0C5h,0C4h,0C4h,0C4h,0C4h,0C5h,0C5h,0C4h,0C4h,0C3h,0D3h
                db  23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 18h, 24h, 1Fh, 20h, 1Ah, 0Fh, 1Bh
                db  21h, 13h, 26h, 11h, 15h,   9, 58h, 71h, 76h, 62h, 78h, 7Dh, 7Dh, 7Dh, 78h, 78h
                db  78h, 77h, 79h,   1,   3,0DCh,0DDh,0DDh, 5Ah,0DDh,0DEh,0DDh,0D9h, 0Dh, 34h, 32h
                db  32h, 43h, 0Ah, 3Dh, 3Dh, 3Dh, 41h,0BEh, 35h, 32h, 32h, 32h, 36h,0E6h,   0,   0
                db    0,   0,0C6h, 44h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Bh, 47h,   0,   0
                db 0BAh,0B7h,0B7h,0B7h,0B7h,0BAh,0CBh,   0,   0,   0,   0,   0,   0,   0,0E9h,0E3h
                db 0DEh,0DBh,   1,   1,   1,   1, 85h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 55h, 52h, 4Fh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0C5h,0C5h,0C5h,0C4h,0C4h,0C3h,0C5h,0C5h,0C4h,0C4h,0C3h,0D3h
                db  22h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 24h, 24h, 1Fh, 20h, 1Ah, 0Fh, 1Bh
                db  21h, 13h, 11h, 15h, 0Eh,   9, 58h, 6Ch, 7Bh, 75h, 78h, 89h, 7Dh, 7Dh, 7Dh, 78h
                db  78h, 72h, 87h,   1,0DCh, 49h, 49h,0DEh,0DBh,   1,   1,0DAh,0C7h,0DCh, 32h, 2Fh
                db  2Fh, 39h,0C7h,0C7h,0BEh,0BDh,0DEh,0DDh, 35h, 2Fh, 2Fh, 2Fh, 32h,0E4h,0CBh,   0
                db    0,   0,0CBh, 44h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ah, 47h,   0,   0
                db 0B6h,0B7h,0B7h,0B7h,0BAh,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E5h
                db 0DEh,0DCh,0DAh,   1,   1,   1, 6Ah, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 55h, 52h, 4Fh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0BEh,0C5h,0C5h,0C4h,0C4h,0C4h,0C4h,0C5h,0BFh,0C5h,0C4h,0C3h,0D3h
                db  22h, 22h, 22h, 22h, 22h, 22h, 22h, 22h, 22h, 24h, 19h, 20h, 1Ah, 1Ah, 1Bh, 1Bh
                db  10h, 39h, 2Dh, 2Bh, 14h, 14h, 58h, 6Ch, 62h, 75h, 78h, 89h, 7Dh, 7Dh, 7Dh, 78h
                db  78h, 72h, 87h,   1,0DCh,0E8h,0E9h,0E4h,0DAh,0D9h,0DBh,0DDh,0DDh,0C7h, 34h, 2Fh
                db  2Fh, 35h,0B3h,0DCh,0DEh,0E0h,0E0h,0CDh, 39h, 2Fh, 2Fh, 2Fh, 2Fh, 42h,0B2h,   0
                db    0,   0,   0,0E7h, 32h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 33h,   0,   0
                db 0AAh,0B8h,0B8h,0B6h,   0,   0,   0,   0,   0, 95h, 95h,   0,   0,   0,0EBh,0E7h
                db 0DFh,0DCh,0DAh,   1,   1,   1, 7Eh, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 52h, 52h, 5Bh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0C5h,0C4h,0C4h,0C4h,0C4h,0C3h,0C5h,0BFh,0C5h,0C4h,0C4h,0D4h
                db  1Ch,0E4h,0E4h, 1Ch,0E4h,0E4h,0E4h,0E4h,0E4h,0E4h,0E4h,0E4h,0E4h,0E3h,0E3h,0D4h
                db 0E3h,0D4h,0D4h,0D4h,0D4h,0CAh, 83h, 71h, 7Bh, 75h, 78h, 89h, 7Dh, 7Dh, 7Dh, 78h
                db  78h, 77h, 87h,   1,   1,0E7h,   0,0E6h,0DAh, 5Fh,0DCh,0DEh,0DEh,0DDh, 14h, 35h
                db  35h, 38h,0B3h,0DDh,0E0h,0CAh,0CAh,0E1h, 43h, 32h, 2Fh, 2Fh, 2Fh, 39h,0E7h,   0
                db    0,   0,0EBh,0E8h, 34h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 30h,   0,   0
                db    0,0BAh,0C6h,   0,   0,   0,   0,   0,0EBh,0A1h, 92h,0EBh,   0,   0,   0,0B2h
                db 0E1h,0DDh,0DBh,   1,   1,   1, 84h, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 52h, 4Eh, 4Dh,0B4h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0C4h,0C4h,0C4h,0C4h,0C3h,0C3h,0C5h,0BFh,0C5h,0C5h,0C4h,0C3h
                db 0C3h,0C2h,0C2h,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0B1h, 62h, 7Bh, 75h, 78h, 89h, 7Dh, 7Dh, 7Dh, 78h
                db  78h, 77h, 9Dh,   1,   1,0E3h,0E7h,0E5h,0DAh,   2,0DCh,0DFh,0DFh,0DEh,0C7h,0B3h
                db 0B3h,0C7h,0C7h, 1Eh, 34h, 32h, 32h, 24h,0CDh, 32h, 2Fh, 2Fh, 2Fh, 35h,0E5h,0E9h
                db 0B2h,0E9h,0E9h,0B2h, 28h, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ah,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0, 92h, 8Fh, 91h,   0,   0,   0,   0,0E9h
                db 0E2h,0DEh,0DBh,   1,   1,   1, 7Dh, 66h, 6Dh, 6Dh, 74h, 66h, 52h, 4Eh, 4Dh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0C4h,0C4h,0C4h,0C3h,0C4h,0C3h,0C5h,0C0h,0BFh,0C5h,0C4h,0C4h
                db 0C3h,0C3h,0C2h,0C2h,0C2h,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0B1h, 62h, 7Bh, 75h, 7Dh, 89h, 7Dh, 7Dh, 7Dh, 7Dh
                db  78h, 77h, 9Dh,   1,0DAh,   1,   1,   1,   2,0B4h, 3Fh, 34h, 34h,0DEh,0B3h,0DBh
                db 0DCh,0DDh,0DDh, 12h, 2Fh, 2Fh, 2Fh, 32h,0DFh, 39h, 35h, 37h, 36h, 39h,0E1h,0E5h
                db 0E6h,0E5h,0E6h,0E6h, 3Eh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 2Fh, 3Ah, 3Bh,   0,   0
                db    0,   0,   0,   0,   0,   0,   0, 93h, 8Dh, 8Fh, 90h,0AAh,   0,   0,   0,   0
                db 0E4h,0DEh,0DCh,   1,   1,   1, 7Dh, 6Bh, 6Dh, 6Dh, 73h, 66h, 4Eh, 4Eh, 4Dh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0BDh,0C4h,0C4h,0C4h,0C4h,0C3h,0C3h,0C5h,0C0h,0BFh,0C5h,0C5h,0C4h
                db 0C4h,0C3h,0C3h,0C2h,0C2h,0C2h,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0ABh, 62h, 71h, 76h, 7Dh, 89h, 89h, 7Dh, 7Dh, 7Dh
                db  7Dh, 83h, 9Eh,   1,   1,   1,   1,0DAh,0DBh,0B4h, 3Fh, 2Fh, 2Fh, 39h,0B3h,0DCh
                db 0DEh,0DFh,0DFh,0DEh, 32h, 2Fh, 2Fh, 2Fh, 41h,0BEh,0DEh,0CDh,0CDh,0E0h, 49h,0E7h
                db 0B2h,0B2h,0B2h,0B2h,0E6h, 3Bh, 3Bh, 3Bh, 3Bh, 3Bh, 30h, 31h, 33h,   0,   0,   0
                db    0,   0,   0,   0,   0,0EBh, 92h,0A0h, 8Fh, 8Dh, 8Fh, 95h,   0,   0,   0,   0
                db 0E6h,0DFh,0DCh,0DAh,   1,   1, 77h, 66h, 6Dh, 6Dh, 6Dh, 66h, 4Eh, 4Eh, 51h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BEh,0C4h,0C4h,0C4h,0C3h,0C3h,0C3h,0BFh,0C0h,0BFh,0BFh,0C5h,0C5h
                db 0C4h,0C3h,0C3h,0C3h,0C2h,0C2h,0C2h,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0ABh, 71h, 71h, 75h, 89h, 89h, 7Dh, 89h, 7Dh, 7Dh
                db  78h, 78h, 9Eh,   1,   1,   1,   2,0DCh,0DCh,0C7h, 5Ah, 32h, 2Fh, 3Dh, 5Fh,0DCh
                db 0DEh,0E1h,0E0h,0DEh, 35h, 2Fh, 2Fh, 2Fh, 3Dh,0BEh,0E1h,0E2h,0E2h,0E3h,0E2h,0E8h
                db    0,   0,   0,   0,0E8h,0E8h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,   0,   0,   0, 92h, 8Fh, 8Fh,0A0h, 8Dh, 8Fh, 92h,   0,   0,   0,   0
                db 0E8h,0E0h,0DDh,0DBh,   1,0DAh, 69h, 66h, 6Dh, 6Dh, 74h, 66h, 4Eh, 4Eh, 51h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C4h,0C3h,0C4h,0C3h,0C3h,0C3h,0C5h,0C1h,0C0h,0BFh,0C5h,0C5h
                db 0C4h,0C4h,0C3h,0C3h,0C2h,0C2h,0C2h,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BCh, 82h, 62h, 71h, 75h, 84h, 89h, 89h, 7Dh, 7Dh, 7Dh
                db  7Dh, 78h, 9Eh,   1,   1,   1,0DBh,0DDh,0DDh,0DCh,0DBh, 0Bh, 3Fh, 0Dh,0B4h, 0Dh
                db  34h, 34h, 36h,0DFh, 1Eh, 35h, 35h, 34h, 14h,0E2h,0E8h,0B2h,0B2h,0B2h,0E7h,0E6h
                db    0,   0,   0,   0,0B2h,0E7h,0EBh,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0,0EBh, 80h, 91h, 8Fh, 8Dh, 8Dh,0A0h, 8Dh, 8Fh, 91h,   0,   0,   0,   0
                db 0E9h,0E2h,0DEh,0DBh,   1, 5Fh, 75h, 6Bh, 6Dh, 6Dh, 74h, 66h, 4Eh, 4Eh, 54h,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0BDh,0C4h,0C4h,0C3h,0C3h,0C3h,0C3h,0BFh,0C1h,0C0h,0BFh,0BFh,0C5h
                db 0C5h,0C4h,0C4h,0C3h,0C3h,0C2h,0C2h,0C2h,0C2h,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh,0BCh
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BCh, 82h, 62h, 71h, 75h, 89h, 89h, 89h, 89h, 7Dh, 7Dh
                db  78h, 7Dh, 7Fh,   1,   1,   1,   3,0C7h,0BEh,0DDh, 5Ah,0B4h,0B4h,0B4h,0D9h, 0Bh
                db  2Fh, 2Fh, 2Fh, 2Bh,0C7h,0C7h,0BEh,0DEh,0DDh,0E2h,0EAh,   0,   0,   0,0EAh,0E6h
                db 0EAh,   0,   0,   0,0E9h,0E7h,0EAh,   0,   0,   0,   0,   0,   0,   0,   0,   0
                db    0,   0, 80h, 90h, 8Fh,0A0h, 8Dh,0A0h, 8Dh,0A0h, 8Fh, 90h,0AAh,   0,   0,   0
                db    0,0E4h,0DEh,0DCh,   1, 5Fh, 71h, 6Bh, 6Dh, 6Dh, 73h, 66h, 4Eh, 4Eh, 54h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0BDh,0C3h,0C4h,0C3h,0C3h,0C3h,0C2h,0BFh,0BDh,0C0h,0C0h,0BFh,0BFh
                db 0C5h,0C4h,0C4h,0C3h,0C3h,0C3h,0C3h,0C2h,0C2h,0C2h,0C2h,0BCh,0C2h,0BCh,0BCh,0BCh
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BCh, 82h, 62h, 6Ch, 7Ch, 84h, 89h, 89h, 7Dh, 89h, 7Dh
                db  7Dh, 89h, 7Fh,   1,   1,   1,0DBh, 39h, 3Dh,0DDh,0D9h,   2,0DBh,0DCh,0DCh,0C7h
                db  34h, 2Fh, 2Fh, 3Dh,0C7h,0DDh,0DFh,0E0h,0E0h,0E1h,0B2h,   0,   0,   0,0EBh,0E6h
                db 0B2h,   0,   0,   0,   0,0E7h,0E9h,   0,   0,   0,   0,   0,   0,0EBh,0EBh,   0
                db    0,   0, 80h, 8Eh, 8Dh, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 8Dh, 8Dh, 95h,   0,   0,   0
                db    0,0E6h,0DFh,0DCh,   1, 5Ah, 70h, 6Bh, 6Dh, 6Dh, 81h, 5Ch, 4Eh, 4Eh, 54h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C4h,0C3h,0C3h,0C3h,0C3h,0C2h,0BFh,0BDh,0C1h,0C0h,0C0h,0BFh
                db 0C5h,0C5h,0C5h,0C4h,0C4h,0C3h,0C3h,0C2h,0C2h,0C2h,0C2h,0C2h,0BCh,0BCh,0BCh,0BCh
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BCh, 71h, 62h, 6Ch, 69h, 84h, 84h, 89h, 89h, 89h, 7Dh
                db  78h, 89h, 7Fh,   1,   1,   1,0B4h, 35h, 2Fh, 14h,0B4h, 5Fh,0DCh,0DDh,0DEh,0C7h
                db  38h, 34h, 34h, 38h,0C7h,0DDh,0DFh,0E1h,0E1h,0DFh,0E7h,   0,   0,   0,   0,0E7h
                db 0E8h,0EBh,   0,   0,   0,0E7h,0E8h,0CBh,   0,   0,   0,   0,   0,0EBh,0D6h,0D7h
                db    0,   0,   0, 91h, 8Fh, 8Dh, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 8Fh, 93h,   0,   0,   0
                db    0,0E8h,0E0h,0DDh,0DAh, 88h, 70h, 6Bh, 6Dh, 6Dh, 74h, 5Ch, 4Eh, 4Eh, 54h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C3h,0C3h,0C3h,0C3h,0C3h,0C2h,0BFh,0BDh,0C1h,0C1h,0C0h,0C0h
                db 0BFh,0C5h,0C5h,0C4h,0C4h,0C3h,0C3h,0C3h,0C3h,0C2h,0C2h,0C2h,0C2h,0C2h,0BCh,0C2h
                db 0BCh,0BCh,0BCh,0BCh,0BCh,0BBh, 82h, 71h, 6Ch, 69h, 84h, 89h, 89h, 89h, 7Dh, 89h
                db  78h, 84h, 88h,   1,   1,   1,0DAh, 14h, 32h, 38h,0B4h,   2,0DCh,0DEh,0DFh,0DEh
                db 0DCh, 5Ah,0DCh,0DCh, 5Ah,0E5h,0E7h,0E7h,0E8h,0E6h,0E5h,   0,   0,   0,   0,0E8h
                db 0E7h,0EAh,0EAh,0CBh,0EBh,0B2h,0E7h,0D7h,0D7h,0D6h,0D6h,0CFh,0CFh,0CEh,0CEh,0D6h
                db 0CBh,   0,   0, 92h, 8Fh, 8Dh,0A0h, 8Dh,0A0h, 8Dh,0A0h, 8Fh, 91h,   0,   0,   0
                db    0,0B2h,0E2h,0DEh,   2, 7Fh, 6Fh, 6Bh, 6Dh, 6Dh, 73h, 5Ch, 4Eh, 4Eh, 53h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C3h,0C3h,0C3h,0C2h,0C3h,0C2h,0BFh,0BEh,0BDh,0C1h,0C0h,0C0h
                db 0C0h,0BFh,0C5h,0C5h,0C5h,0C4h,0C4h,0C3h,0C3h,0C3h,0C3h,0C2h,0C2h,0C2h,0C2h,0C2h
                db 0C2h,0BCh,0C2h,0BCh,0BCh,0C2h, 71h, 6Ch, 6Ch, 69h, 84h, 84h, 89h, 89h, 7Dh, 89h
                db  7Dh, 84h, 88h,   1,   1,   1,   1,0B4h,   3,   3,0DAh, 5Fh, 0Dh, 39h, 21h,0DEh
                db 0DCh, 5Ah,0DCh,0DDh,0DBh,0E7h,   0,   0,   0,0E9h,0E4h,0EAh,   0,0EBh,0CBh,0EAh
                db 0E4h,0E5h,0E6h,0E6h,0E6h,0E6h,0D3h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CFh
                db    0,   0,0EBh, 95h, 8Dh, 8Dh, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 8Fh,0A1h,   0,   0,   0
                db    0,   0,0E4h,0DEh,0DBh, 7Fh, 6Eh, 6Bh, 6Dh, 6Dh, 74h, 5Ch, 4Eh, 4Eh, 53h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   2,0BDh,0C3h,0C3h,0C3h,0C3h,0C2h,0C2h,0BFh,0BEh,0BDh,0C1h,0C1h,0C0h
                db 0C0h,0BFh,0BFh,0C5h,0C5h,0C5h,0C4h,0C4h,0C3h,0C3h,0C3h,0C3h,0C3h,0C2h,0C2h,0C2h
                db 0C2h,0C2h,0C2h,0C2h,0C2h,0BBh, 6Ch, 6Ch, 6Ch, 77h, 84h, 84h, 89h, 89h, 89h, 7Dh
                db  7Dh, 7Eh, 5Ah,   1,   1,   1,   1,   1,0DAh,0B4h,   2,0B4h, 3Fh, 2Fh, 2Fh, 1Eh
                db 0C7h,0DDh,0DFh,0DFh,0DEh,0E5h,   0,   0,   0,   0,0E4h,0E5h,0E6h,0E6h,0E6h,0E6h
                db 0E3h,0E7h,0E8h,0E8h,0E8h,0E8h,0E6h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0D8h,   0,   0,0AAh, 90h, 8Fh,0A0h, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 8Eh, 95h,   0,   0
                db    0,   0,0E6h,0DFh,0DCh, 7Fh, 6Eh, 6Bh, 6Dh, 6Dh, 73h, 5Ch, 4Eh, 4Eh, 53h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C3h,0C3h,0C3h,0C3h,0C2h,0C2h,0BFh,0BEh,0BDh,0BDh,0C1h,0C1h
                db 0C0h,0C0h,0BFh,0BFh,0C5h,0C5h,0C5h,0C4h,0C4h,0C4h,0C3h,0C3h,0C3h,0C3h,0C2h,0C2h
                db 0C2h,0C2h,0C2h,0C2h,0C2h,0BBh, 62h, 6Ch, 6Ch, 77h, 84h, 84h, 89h, 84h, 89h, 89h
                db  78h, 8Ah, 5Fh,   1,   1,   1,   1,   1,0DAh,0DBh,0DBh,0B3h,0DCh, 32h, 2Fh, 3Dh
                db 0C7h,0DCh,0DDh,0DFh,0DEh,0E2h,0EAh,   0,   0,   0,0E6h,   1,0DBh,0DEh,0DFh,0DEh
                db 0E1h,0B2h,   0,   0,   0,   0,0E8h,0D0h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0D7h,   0,   0,   0,0A1h, 8Fh, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 8Dh, 8Fh, 93h,   0,   0
                db    0,   0,0E8h,0DFh,0DCh, 9Eh, 6Dh, 6Bh, 6Dh, 6Dh, 81h, 55h, 4Eh, 4Eh, 7Fh,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C3h,0C3h,0C2h,0C2h,0C2h,0C2h,0BFh,0C7h,0BDh,0BDh,0BDh,0C1h
                db 0C1h,0C0h,0C0h,0BFh,0BFh,0C5h,0C5h,0C5h,0C4h,0C4h,0C4h,0C3h,0C3h,0C3h,0C3h,0C3h
                db 0C3h,0C2h,0C2h,0C2h,0C2h,0BBh, 7Bh, 71h, 6Ch, 77h, 7Eh, 84h, 84h, 89h, 89h, 89h
                db  78h, 85h,0DAh,   1,   1,   1,   1,   1,   2,0DCh,0DDh,0DCh,0B3h, 35h, 32h, 3Dh
                db 0B4h,0E1h,0E4h,0E5h,0E5h,0E0h,0B2h,0EBh,0EBh,   0,0E7h,0DCh,0DDh, 43h, 42h, 42h
                db  43h,0E7h,   0,   0,   0,   0,0B2h,0D0h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0D6h,0CBh,   0,   0, 92h, 8Fh, 8Dh,0A0h, 8Dh,0A0h, 8Dh,0A0h, 8Fh, 91h,   0,   0
                db    0,   0,0B2h,0E2h,0DDh, 9Eh, 6Dh, 6Dh, 6Dh, 6Dh, 81h, 55h, 4Eh, 4Eh, 0Bh,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C3h,0C2h,0C3h,0C2h,0C2h,0C2h,0BFh,0C7h,0BEh,0BDh,0BDh,0BDh
                db 0C1h,0C1h,0C0h,0C0h,0BFh,0BFh,0BFh,0C5h,0C5h,0C5h,0C4h,0C4h,0C4h,0C4h,0C3h,0C3h
                db 0C3h,0C3h,0C3h,0C3h,0C3h,0B5h, 71h, 6Ch, 6Ch, 77h, 7Eh, 84h, 84h, 84h, 89h, 89h
                db  78h, 86h,   1,   1,   1,   1,   1,   1,0DBh,0DDh,0DDh,0DDh, 5Ah,0DBh,   3, 5Ah
                db    1,0E5h,0EAh,0EAh,0EAh,0E5h,0E0h,0E2h,0E2h,0E2h, 49h, 0Bh,0CCh,0D1h,0D1h,0D0h
                db 0D1h,0E5h,   0,   0,   0,   0, 2Eh,0C9h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CFh,   0,   0,   0, 93h, 8Fh, 8Dh, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 8Fh,0A1h,   0,   0
                db    0,   0,0CBh,0E4h,0DDh, 9Eh, 6Bh, 6Dh, 6Dh, 6Dh, 74h, 55h, 4Eh, 52h, 0Bh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   2,0BDh,0C2h,0C3h,0C2h,0C2h,0C2h,0C8h,0BFh,0C7h,0BEh,0BDh,0BDh,0BDh
                db 0C1h,0C1h,0C1h,0C0h,0C0h,0C0h,0BFh,0BFh,0C5h,0C5h,0C5h,0C5h,0C4h,0C4h,0C4h,0C4h
                db 0C4h,0C3h,0C3h,0C3h,0C3h,0B5h, 67h, 6Ch, 6Ch, 83h, 7Eh, 84h, 89h, 84h, 84h, 89h
                db  78h, 86h,   1,   1,   1,   1,   1,   1,0DBh, 0Dh, 17h,0DDh,0DBh,0B4h,0D9h, 5Ah
                db    2,0E2h,   0,   0,   0,0E6h,   1, 5Fh,0DCh,0DEh,0DEh, 0Dh,0D1h,0CEh,0CEh,0CEh
                db 0D0h,0E3h, 3Ch,   0,   0,   0,   0,0E6h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0D8h,   0,   0,0AAh, 90h,0A2h, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 8Dh, 8Eh, 95h,   0
                db    0,   0,   0,0E5h,0DEh, 9Eh, 6Bh, 6Dh, 6Dh, 6Dh, 74h, 55h, 4Eh, 52h, 5Ah,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C3h,0C2h,0C2h,0C2h,0C8h,0C8h,0BFh,0C7h,0BEh,0BEh,0BDh,0BDh
                db 0BDh,0C1h,0C1h,0C1h,0C0h,0C0h,0C0h,0BFh,0BFh,0BFh,0C5h,0C5h,0C5h,0C5h,0C4h,0C4h
                db 0C4h,0C4h,0C4h,0C3h,0C3h,0B5h, 71h, 6Ch, 6Ch, 83h, 7Eh, 84h, 84h, 84h, 89h, 89h
                db  78h, 79h,   1,   1,   1,   1,   1,   1,0B4h, 35h, 32h, 17h,0D9h,0DBh,0DCh,0DDh
                db 0DDh,0DFh,0B2h,   0,0EBh,0E8h,   2,0DCh,0DEh, 43h, 43h, 17h,0CCh,0CEh,0CEh,0CEh
                db 0CEh,0CCh,0E8h,   0,   0,   0,   0,0E7h,0D0h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0D7h,   0,   0,   0,0A1h, 8Fh,0A0h, 8Dh,0A0h, 8Dh,0A0h, 8Dh, 8Fh, 93h,0EBh
                db    0,   0,   0,0E7h,0DEh, 87h, 6Bh, 6Dh, 6Dh, 6Dh, 74h, 55h, 4Eh, 4Ah, 88h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C2h,0C2h,0C2h,0C2h,0C2h,0C8h,0BFh,0C7h,0BEh,0BEh,0BDh,0BDh
                db 0BDh,0BDh,0C1h,0C1h,0C1h,0C0h,0C0h,0C0h,0BFh,0BFh,0BFh,0BFh,0C5h,0C5h,0C5h,0C5h
                db 0C4h,0C4h,0C4h,0C4h,0C4h,0B5h, 62h, 6Ch, 6Ch, 83h, 7Eh, 84h, 84h, 84h, 84h, 89h
                db  78h, 79h,   1,   1,   1,   1,   1,   1,0B4h, 3Dh, 2Fh, 3Dh,0B4h,0DBh,0DDh,0DFh
                db 0DFh,0DEh,0E3h,0E4h,0E4h,0E4h,   3,0DDh,0CDh,0E2h,0E2h, 49h,0E0h,0CEh,0CEh,0CEh
                db 0CEh,0D2h,0E7h,   0,   0,   0,   0,0B2h,0C9h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0D6h,0CBh,   0,   0, 91h, 8Fh, 8Dh,0A0h,0A0h, 8Dh,0A0h, 8Dh, 8Fh, 92h,   0
                db    0,   0,   0,0B2h,0DFh, 87h, 66h, 6Dh, 6Dh, 6Dh, 73h, 55h, 4Eh, 4Ah, 5Ah,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0BDh,0C2h,0C2h,0C2h,0C2h,0C8h,0C8h,0BFh,0B3h,0BEh,0BEh,0BEh,0BEh
                db 0BDh,0BDh,0BDh,0BDh,0C1h,0C1h,0C1h,0C0h,0C0h,0C0h,0BFh,0BFh,0BFh,0BFh,0C5h,0C5h
                db 0C5h,0C5h,0C4h,0C4h,0C4h,0B5h, 70h, 6Ch, 70h, 78h, 7Eh, 84h, 84h, 84h, 84h, 84h
                db  78h, 79h,   1,   1,   1,   1,   1,   1,0DAh, 0Bh, 35h, 3Fh,0B4h,0DBh,0DCh,0DEh
                db 0DFh,0DEh,   1,   1,0DAh,0DAh, 5Ah,0CDh,0D0h,0D0h,0CEh,0D1h, 0Ah,0D0h,0CEh,0CEh
                db 0CEh,0D1h,0E3h,0E6h,0E7h,0E7h,0E7h,0E6h,0D1h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CFh,   0,   0,   0, 93h, 8Fh, 8Dh, 8Dh, 8Dh,0A0h, 8Dh, 8Fh,0A1h,0AAh,   0
                db    0,   0,   0,0E9h,0E1h, 87h, 66h, 6Dh, 6Dh, 6Dh, 74h, 55h, 4Eh, 4Ah, 5Fh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   2,0BDh,0C2h,0C2h,0C2h,0C2h,0C8h,0C8h,0BFh,0C7h,0BEh,0BEh,0BEh,0BEh
                db 0BEh,0BDh,0BDh,0BDh,0BDh,0C1h,0C1h,0C1h,0C0h,0C0h,0C0h,0C0h,0BFh,0BFh,0BFh,0BFh
                db 0C5h,0C5h,0C5h,0C5h,0C5h,0ACh, 70h, 6Ch, 6Ch, 78h, 7Eh, 84h, 84h, 84h, 84h, 89h
                db  78h, 87h,   1,   1,   1,   1,   1,   1,   1,   1,0B4h,0B4h,   2,   1,0E5h,0E8h
                db 0E8h,0E3h,0DBh, 5Ah,0DCh,0DDh,0DDh,0DEh,0CEh,0CEh,0CEh,0CEh,0DFh,0CCh,0D1h,0D1h
                db 0D1h,0D2h,0E0h,0E6h,0E7h,0E7h,0E7h,0E7h,0E5h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CEh,0D8h,   0,   0, 95h, 8Eh, 8Dh,0A0h, 8Dh, 8Dh, 8Fh, 8Dh, 93h,   0,   0
                db    0,   0,   0,0EBh,0E3h, 87h, 66h, 6Dh, 6Dh, 6Dh, 74h, 52h, 4Eh, 4Ah, 48h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C2h,0C2h,0C2h,0C8h,0C8h,0C8h,0BFh,0C7h,0BEh,0BEh,0BEh,0BEh
                db 0BEh,0BDh,0BDh,0BDh,0BDh,0BDh,0C1h,0C1h,0C1h,0C1h,0C0h,0C0h,0C0h,0BFh,0BFh,0BFh
                db 0BFh,0BFh,0C5h,0C5h,0C5h,0ACh, 67h, 6Ch, 67h, 7Dh, 7Eh, 84h, 84h, 84h, 84h, 84h
                db  78h, 87h,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DBh,0DBh,   1,0E5h,   0
                db    0,0E6h,   2,0DCh,0DDh,0DFh,0DFh, 0Dh,0D0h,0CEh,0CEh,0CEh,0D5h,   3, 0Bh, 0Ah
                db  43h, 43h,0E0h,0B2h,0EBh,0EBh,0EBh,0EBh,0E7h,0D0h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CEh,0C6h,   0,   0,0EBh,0A1h, 8Fh, 8Dh,0A0h, 8Dh, 8Fh, 92h,0EBh,   0,   0
                db    0,   0,   0,0B2h,0DDh, 79h, 66h, 6Dh, 6Dh, 6Dh, 74h, 52h, 4Eh, 50h,   2,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C2h,0C8h,0C8h,0C8h,0C8h,0C8h,0BFh,   2,0C7h,0C7h,0C7h,0C7h
                db 0BEh,0C7h,0BEh,0BEh,0BEh,0BEh,0BDh,0BDh,0BDh,0BDh,0C1h,0C1h,0C1h,0C1h,0C0h,0C0h
                db 0C0h,0BFh,0BFh,0BFh,0BFh,0ACh, 70h, 6Ch, 7Ah, 7Dh, 7Eh, 84h, 84h, 84h, 84h, 84h
                db  78h, 87h,0DAh,   1,   1,   1,   1,   1,   1,   1,0DBh,0DCh,0DDh,0DBh,0E1h,0E9h
                db 0EAh,0E7h,0DBh,0DCh,0DEh,0E1h, 43h, 0Ah,0D2h,0CEh,0CEh,0CEh,0D2h, 48h,0DEh, 43h
                db  42h, 42h,0E0h,0E7h,   0,   0,   0,   0,0B2h,0D0h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CEh,0D6h,   0,   0,   0, 91h, 8Fh,0A0h, 8Dh, 8Fh, 91h, 5Eh,   0,   0,   0
                db    0,   0,   0,0E5h,   1, 86h, 66h, 6Dh, 6Dh, 6Dh, 74h, 52h, 4Eh, 4Ah,   2,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C8h,0C8h,0C8h,0C8h,0C8h,0C9h,0BFh,0C7h,0BEh,0BEh,0BDh,0BEh
                db 0BEh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0C1h,0C1h,0C1h,0C1h,0C1h,0C0h,0C0h,0C0h
                db 0C0h,0BFh,0BFh,0BFh,0BFh,0ACh, 70h, 6Ch, 6Ch, 89h, 7Eh, 7Eh, 84h, 84h, 84h, 84h
                db  78h, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1,0DBh,0DDh,0DEh,0DDh,0DCh,0E3h
                db 0E4h,0E2h,   2,0DEh,0D1h,0D0h,0D0h,0CDh,0CDh,0D2h,0D2h,0D2h,0D5h, 48h,0D2h,0D0h
                db 0D0h,0D0h,0D2h,0E6h,   0,   0,   0,   0, 2Eh,0D1h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CEh,0CFh,0CBh,   0,   0, 93h, 8Fh, 8Fh, 8Fh, 91h, 5Eh,   0,   0,   0,   0
                db    0,   0,0E8h,0DCh,   1, 85h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 52h, 4Eh, 50h,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   2,0BDh,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C2h,0C2h,0C2h,0C8h,0C8h
                db 0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C2h,0C2h,0C2h
                db 0C2h,0C2h,0C2h,0C2h,0C3h,0ABh, 67h, 6Ch, 6Ch, 84h, 9Bh, 7Eh, 7Eh, 84h, 84h, 84h
                db  78h, 9Dh,   1,   1,   1,   1,   1,   1,   1,0DAh,0DBh,0DCh,0DCh,0DDh,0DCh,   1
                db    1,   1, 5Ah,0DCh,0CEh,0CEh,0CEh,0CCh, 48h, 48h,   3, 0Bh,0DDh, 0Bh,0D1h,0CEh
                db 0CEh,0CEh,0D0h,0E4h, 47h,   0,   0,   0,0EBh,0E6h,0CEh,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CEh,0CFh,0CBh,   0,   0, 95h, 8Fh, 8Fh, 92h, 5Eh,   0,   0,   0,   0,   0
                db    0,0EAh,0E3h,   1,   1, 85h, 66h, 6Dh, 6Dh, 6Dh, 74h, 4Eh, 4Eh, 4Bh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C8h,0C8h,0C8h,0C8h,0C2h,0B1h, 67h, 70h, 6Ch, 84h, 9Bh, 7Eh, 84h, 84h, 84h, 84h
                db  7Dh, 9Dh,   1,   1,   1,   1,   1,   1,   1,   1, 5Ah,0E6h,0E7h,0E2h, 5Fh,   2
                db 0DBh,0DCh,0DCh, 48h,0D1h,0CEh,0CEh,0D1h, 48h,0DCh,0DEh,0DFh,0E0h, 0Ah,0CCh,0CEh
                db 0CEh,0CEh,0CEh,0D4h,0B2h,   0,   0,   0,   0,0E7h,0D0h,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CEh,0CEh,0C6h,0EBh,   0, 5Eh, 91h, 93h,   0,   0,   0,   0,   0,   0,   0
                db    0,0E6h,   2,0DAh,   1, 6Ah, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 4Eh, 4Eh, 4Bh,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C1h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C8h,0C8h
                db 0C8h,0C8h,0C2h,0C2h,0C2h,0ABh, 70h, 70h, 6Ch, 84h, 9Bh, 7Eh, 84h, 7Eh, 84h, 84h
                db  7Dh, 9Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,0E7h,   0,0E6h,   2,   2
                db  5Ah,0DDh,0DEh,   3,0D5h,0D1h,0D0h,0CCh,0DBh,0DCh, 0Ah, 40h, 42h, 43h,0CDh,0CEh
                db 0CEh,0CEh,0CEh,0CCh,0E7h,   0,   0,0EBh,0EBh,0E8h,0D0h,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CEh,0CEh,0D6h,0EBh,   0,   0,0EBh,   0,   0,   0,   0,   0,   0,   0,   0
                db 0E8h,0DEh,   1,   1,   1, 7Eh, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 4Eh, 4Eh, 4Bh,   2,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0BDh,0C8h,0C8h,0C8h,0C8h,0C9h,0C8h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C8h,0C8h,0C8h
                db 0C8h,0C8h,0C2h,0C2h,0C2h,0ABh, 67h, 70h, 6Ch, 84h, 9Bh, 7Eh, 7Eh, 84h, 84h, 84h
                db  84h, 9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E5h,0E9h,0E7h,0DAh,0DAh
                db 0DCh, 0Dh, 0Ah,0DEh,   3, 48h, 48h,   7, 5Fh,0CDh,0D1h,0D1h,0D1h,0D3h,0DFh,0D0h
                db 0CEh,0CEh,0CEh,0D1h,0E5h,0E8h,0B2h,0B2h,0B2h,0E8h,0D1h,0CEh,0CEh,0CEh,0CEh,0CEh
                db 0CEh,0CEh,0CEh,0D6h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0E9h
                db 0E2h,   1,0DAh,   1,   1, 84h, 66h, 6Dh, 6Dh, 74h, 66h, 4Eh, 4Eh, 4Fh,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh,0C1h,0C8h,0C8h,0C8h,0C8h,0C8h,0C8h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C8h,0C8h
                db 0C8h,0C8h,0C2h,0C2h,0C2h,0ABh, 70h, 70h, 6Ch, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 7Eh, 84h
                db  84h, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DDh,0E3h,0E2h,0DBh,   2
                db 0DDh,0CCh,0CCh,0DFh,0DCh,0DBh,0DCh,0DDh,   3,0CDh,0CEh,0CEh,0CEh,0D0h, 17h,0CCh
                db 0D0h,0D1h,0D0h,0D2h,0E1h,0E6h,0E6h,0E6h,0E7h,0E6h,0E5h,0CFh,0CFh,0CFh,0CFh,0CFh
                db 0CFh,0D6h,0D7h,0D8h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EAh,0E4h
                db    1,0DAh,   1,   1,   1, 7Dh, 66h, 6Dh, 6Dh, 6Dh, 66h, 4Eh, 4Eh, 4Dh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C1h,0C8h,0C8h,0C8h,0C9h,0C8h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C8h,0C8h,0C8h,0C8h
                db 0C2h,0C2h,0C2h,0C2h,0C3h, 82h, 70h, 70h, 71h, 7Eh, 9Bh, 9Bh, 7Eh, 7Eh, 84h, 84h
                db  84h, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 5Fh, 48h
                db 0BDh,0CEh,0CEh,0D5h,   7,0DCh,0DDh,0DEh,0DFh,0DEh,0D0h,0CEh,0CEh,0CEh,0D5h, 0Bh
                db 0DFh, 43h,0E1h,0E0h, 49h,0B2h,0EAh,0EAh,0E9h,0EAh,0E7h,0B2h,0D8h,0D8h,0CBh,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EAh,0E5h,   1
                db 0DAh,0DAh,   1,   1,   1, 78h, 6Bh, 6Dh, 6Dh, 74h, 66h, 4Eh, 4Eh, 4Dh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C1h,0C8h,0C8h,0C8h,0C8h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C8h,0C8h,0C8h,0C8h,0C2h
                db 0C8h,0C2h,0C2h,0C3h,0C3h, 82h, 70h, 70h, 6Ch, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 84h
                db  7Eh, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DBh,0DBh,   7
                db  5Ah,0D0h,0CEh,0D1h, 48h,0DCh,0DEh, 43h, 43h, 0Dh,0D1h,0CEh,0CEh,0CEh,0CCh,   3
                db 0DEh, 43h,0E1h,0E1h,0E0h,0E8h,0EBh,   0,   0,   0,0E8h,0E8h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EAh,0E5h,   1,0DAh
                db    1,   1,   1,   1,   1, 77h, 66h, 6Dh, 6Dh, 73h, 66h, 4Eh, 4Eh, 4Dh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C1h,0C8h,0C9h,0C8h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C9h,0C8h,0C8h,0C8h,0C8h,0C8h
                db 0C2h,0C2h,0C2h,0C3h,0C3h, 82h, 70h, 70h, 71h, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 84h
                db  7Eh, 7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,0DCh,0DDh,0DCh
                db 0DAh,0CCh,0D0h,0CCh, 48h,0DDh,0D5h,0D4h,0D4h,0DFh,0CCh,0CEh,0D0h,0CEh,0D2h, 43h
                db 0E6h,0E7h,0E7h,0E7h,0E6h,0E7h,   0,   0,   0,   0,0B2h,0E7h,   0,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0EBh,0E9h,0E4h,   1,0DAh,   1
                db    1,   1,   1,   1,0DAh, 75h, 6Bh, 6Dh, 6Dh, 74h, 66h, 4Eh, 4Eh, 4Dh,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   2,0C1h,0C8h,0C8h,0C8h,0C8h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C9h,0C8h,0C8h,0C8h,0C8h,0C8h,0C2h
                db 0C2h,0C2h,0C3h,0C3h,0C3h, 82h, 70h, 70h, 71h, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 84h
                db  9Bh, 88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0D9h,   3,0DDh,0DDh
                db    3, 48h, 48h, 48h, 48h,0DDh,0D0h,0CEh,0CEh,0D5h,   3,0DEh,0DEh,0CDh,0DEh, 49h
                db 0EAh,   0,   0,   0,0EAh,0E6h,0CBh,   0,   0,   0,0E9h,0E7h,0EBh,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,0B2h,0E2h,   1,0DAh,0DAh,   1
                db    1,   1,   1,   1, 5Fh, 7Bh, 6Bh, 6Dh, 6Dh, 74h, 5Ch, 4Eh, 4Eh, 51h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C1h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C8h,0C8h,0C8h,0C8h,0C2h
                db 0C2h,0C2h,0C3h,0C3h,0C3h, 7Ah, 70h, 70h, 7Bh, 8Ah, 7Eh, 9Bh, 9Bh, 9Bh, 7Eh, 84h
                db  8Ah, 88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,0DEh,0DEh,0DDh
                db  5Ah, 5Fh,0DAh,0DBh, 5Ah,   3,0D0h,0CEh,0CEh,0D2h, 48h, 0Bh,0DEh,0DFh,0DFh,0DFh
                db 0B2h,0EBh,   0,   0,0EBh,0E6h,0B2h,   0,   0,   0,   0,0E7h,0B2h,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,   0,   0,0EAh,0E6h,0DEh,0DAh,0DAh,   1,   1,   1
                db    1,   1,   1,   1, 5Fh, 71h, 6Bh, 6Dh, 6Dh, 73h, 66h, 4Eh, 4Eh, 51h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0C1h,0C8h,0C9h,0C8h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C9h
                db 0C9h,0C9h,0C9h,0C9h,0C9h,0C9h,0C8h,0C9h,0C8h,0C8h,0C8h,0C8h,0C8h,0C2h,0C2h,0C2h
                db 0C2h,0C3h,0C3h,0C3h,0C4h, 70h, 70h, 6Fh, 7Bh, 8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 84h
                db  8Ah, 5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 48h,0D2h,0D0h,0CDh
                db 0DAh,   2,0DBh,0DCh,0DDh, 48h,0D2h,0CEh,0CEh,0D2h,0DBh,0DCh,0DFh,0E0h,0E0h,0DEh
                db 0E7h,   0,   0,   0,   0,0E7h,0E8h,0EBh,   0,   0,   0,0E7h,0E8h,   0,   0,   0
                db    0,   0,   0,   0,   0,   0,0E9h,0E7h,0E3h,   1,   1,0DAh,   1,   1,   1,   1
                db    1,   1,   1,   1, 88h, 70h, 6Bh, 6Dh, 6Dh, 73h, 5Ch, 4Eh, 4Eh, 51h,   2,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh
                db 0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BDh,0BEh,0BDh,0BEh,0BEh,0BEh,0BEh
                db 0BEh,0BEh,0BEh,0BEh, 9Dh, 70h, 70h, 6Fh, 75h, 8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 84h
                db  85h, 5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0CCh,0CEh,0D1h
                db 0DAh,   7,0DCh,0DEh,0DFh,0DEh,0DDh,0DEh,0BDh,0DEh,   3,0E2h,0E5h,0E5h,0E6h,0E5h
                db 0E5h,   0,   0,   0,   0,0E8h,0E6h,   0,   0,   0,   0,0B2h,0E6h,   0,   0,   0
                db    0,   0,   0,   0,0B2h,0E6h,0E0h, 5Ah,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 88h, 6Fh, 6Bh, 6Dh, 6Dh, 74h, 5Ch, 4Eh, 4Eh, 51h,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 53h, 6Fh, 70h, 6Fh, 7Ch, 8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 84h
                db  86h,0B4h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0C7h,0D2h,0CCh
                db 0DAh,   2,0DCh, 0Ah,0DFh,0DEh,0DCh, 48h,   3,0DCh,0DBh,0E6h,0EBh,0EBh,0EBh,0E9h
                db 0E5h,0EAh,   0,   0,   0,   0,0E4h,0E7h,0B2h,0E9h,0E9h,0E9h,0E6h,0E9h,0EAh,0E9h
                db 0B2h,0E8h,0E6h,0E3h,0DDh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 7Fh, 6Fh, 6Bh, 6Dh, 6Dh, 74h, 5Ch, 4Eh, 4Eh, 54h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 9Dh, 6Eh, 70h, 6Fh, 77h, 8Ah, 8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 84h
                db  86h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 48h, 48h
                db 0DAh, 48h,0BDh,0D0h,0D0h,0D5h,   3,0DCh,0DDh,0DEh,0DDh,0E4h,   0,   0,   0,   0
                db 0E5h,0E7h,0E8h,0E8h,0E7h,0E7h, 49h,   1,0DBh,0E1h,0E3h,0E4h,0E0h,0E4h,0E3h, 49h
                db 0DDh,   1,   1,   1,   1,0DAh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 7Fh, 6Eh, 6Dh, 6Dh, 6Dh, 73h, 5Ch, 4Eh, 4Eh, 54h,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 9Dh, 6Eh, 70h, 6Fh, 77h, 85h, 8Ah, 8Ah, 8Ah, 9Bh, 9Bh, 84h
                db  79h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DBh
                db 0DBh,   7,0BEh,0CEh,0CEh,0D2h, 48h,0DCh,0DEh,0E0h,0DFh,0E2h,0E9h,   0,   0,   0
                db 0E5h,   2,0DCh,   1,   1,   1,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 7Fh, 6Eh, 6Bh, 6Dh, 6Dh, 81h, 5Ch, 4Eh, 4Eh, 53h,0DAh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 9Dh, 6Eh, 6Fh, 6Fh, 77h, 85h, 8Ah, 8Ah, 8Ah, 9Bh, 9Bh, 84h
                db  79h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DBh
                db 0DCh, 5Ah,   7,0D1h,0CEh,0D1h, 48h,0DDh,0E0h,0E2h, 49h,0E0h,0E8h,   0,0EBh,   0
                db 0E8h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 9Eh, 6Dh, 6Bh, 6Dh, 6Dh, 81h, 55h, 4Eh, 4Eh, 53h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 87h, 6Eh, 70h, 6Fh, 83h, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh, 84h
                db  79h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DBh,0DCh
                db 0DDh,0DDh,   3,0BEh,0C1h,0BDh,   1,0E4h,0B2h,0E9h,0E9h,0E4h,0E3h,0E6h,0E6h,0E5h
                db 0E4h,0DBh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 9Eh, 6Dh, 6Dh, 6Dh, 6Dh, 74h, 55h, 4Eh, 4Eh, 53h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 87h, 6Eh, 70h, 6Fh, 78h, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh, 84h
                db  87h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0D9h,0DCh
                db  0Bh,0DDh,   3,0DAh, 48h,   7,0DAh,0E2h,0EBh,   0,   0,0E6h,   2,   1,   1,   1
                db    1,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 9Eh, 6Bh, 6Dh, 6Dh, 6Dh, 81h, 55h, 4Eh, 52h, 0Bh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 87h, 6Eh, 70h, 6Fh, 78h, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh, 84h
                db  87h,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 48h,0D5h
                db 0D1h,0DEh,0D9h, 5Fh,0DBh,0DCh,0DDh,0DDh,0B2h,0EBh,0EBh,0B2h,0DCh,0DAh,0DAh,0DAh
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 9Dh, 6Bh, 6Dh, 6Dh, 6Dh, 81h, 55h, 4Eh, 52h,   3,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 79h, 6Dh, 70h, 6Fh, 7Dh, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 84h
                db  87h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0D2h
                db 0CEh,0D2h, 48h,0D9h,0DCh,0DEh,0DFh,0DDh,0E6h,0E8h,0E8h,0E7h,0DCh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 9Dh, 6Bh, 6Dh, 6Dh, 6Dh, 73h, 55h, 4Eh, 52h, 5Ah,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 86h, 6Dh, 6Fh, 6Fh, 7Dh, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 84h
                db  87h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,0C1h
                db 0D0h,0D1h, 48h,0DBh,0DCh,0DEh,0DEh,0DFh,0DCh,0DDh,0DDh,0DDh,   2,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 87h, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 55h, 4Eh, 4Ah, 5Ah,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 85h, 6Dh, 6Fh, 6Fh, 89h, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 84h
                db  9Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0DAh
                db 0C7h,0C7h,0DBh,0DAh,0E1h,0E4h,0E6h, 49h,0DCh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 87h, 66h, 6Dh, 6Dh, 6Dh, 74h, 55h, 4Eh, 4Ah, 5Fh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 7Eh, 6Dh, 6Fh, 6Fh, 84h, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 84h
                db  9Dh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh, 48h,0DBh,   1,0E4h,0EBh,   0,0E6h,   2,   2,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 87h, 66h, 6Dh, 6Dh, 6Dh, 73h, 55h, 4Eh, 4Ah, 5Fh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 7Dh, 6Dh, 6Fh, 6Fh, 9Bh, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    2,0DCh,0DCh,0DBh,0E0h,   0,   0,0E8h,0DBh,0DAh,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 79h, 66h, 6Dh, 6Dh, 6Dh, 81h, 52h, 4Eh, 50h, 48h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 78h, 6Eh, 6Fh, 70h, 9Bh, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh
                db  9Dh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DBh,0DDh,0DEh,0DDh,0DCh,0E6h,0E7h,0E7h,0DCh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 86h, 6Bh, 6Dh, 6Dh, 6Dh, 74h, 52h, 4Eh, 50h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 77h, 6Dh, 6Fh, 70h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 7Eh
                db  53h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DBh,0DBh,0DDh,0DDh,0DCh,0DBh,0DCh,0DCh,0DBh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 86h, 66h, 6Eh, 6Dh, 6Dh, 74h, 52h, 4Eh, 50h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 77h, 6Eh, 6Fh, 70h, 8Ah, 85h, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh
                db  9Eh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DBh,0E4h,0E5h, 49h,0DBh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 85h, 6Bh, 6Dh, 6Dh, 6Dh, 6Dh, 52h, 4Eh, 56h,0DAh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 5Fh, 69h, 6Eh, 6Fh, 7Ah, 8Ah, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 9Bh
                db  9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0E7h,0EBh,0E6h,   1,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 6Ah, 6Bh, 6Eh, 6Dh, 6Dh, 6Dh, 52h, 4Eh, 4Bh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 5Fh, 75h, 6Eh, 6Eh, 7Ah, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 9Bh
                db  9Eh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0E4h,0E9h,0E7h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 6Ah, 6Bh, 6Eh, 6Eh, 6Dh, 6Bh, 52h, 4Eh, 4Bh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 5Ah, 71h, 6Eh, 6Eh, 6Ch, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah
                db  7Fh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh,0DDh,0E2h,0E1h,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 7Eh, 6Bh, 6Eh, 6Eh, 6Eh, 6Bh, 52h, 4Eh, 4Fh,0B4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 88h, 6Ch, 6Eh, 6Eh, 6Ch, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah
                db  7Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 84h, 6Bh, 6Eh, 6Eh, 6Eh, 6Dh, 52h, 4Eh, 4Fh,0B4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 7Fh, 70h, 6Eh, 6Eh, 71h, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 85h
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 7Dh, 6Dh, 6Eh, 6Eh, 6Eh, 6Bh, 52h, 4Eh, 4Dh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 9Eh, 6Fh, 6Eh, 6Eh, 7Bh, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 85h
                db  88h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1, 83h, 6Dh, 6Eh, 6Eh, 6Eh, 66h, 52h, 4Eh, 4Dh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 9Eh, 6Eh, 6Eh, 74h, 75h, 86h, 85h, 85h, 85h, 85h, 8Ah, 8Ah, 86h
                db  5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,0DAh, 77h, 6Dh, 6Fh, 6Eh, 6Eh, 6Dh, 52h, 4Eh, 51h, 5Fh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 9Dh, 6Dh, 6Fh, 6Eh, 7Ch, 86h, 85h, 85h, 85h, 85h, 85h, 8Ah, 86h
                db  5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 5Fh, 75h, 74h, 6Fh, 6Eh, 6Eh, 6Bh, 52h, 52h, 51h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh, 9Dh, 6Dh, 6Eh, 74h, 77h, 86h, 85h, 85h, 85h, 85h, 85h, 8Ah, 86h
                db  5Fh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 5Ah, 75h, 6Eh, 6Fh, 6Fh, 81h, 6Bh, 52h, 52h, 51h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh, 9Dh, 6Dh, 6Eh, 6Eh, 83h, 86h, 85h, 85h, 85h, 85h, 85h, 8Ah, 79h
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 88h, 71h, 6Eh, 6Fh, 6Eh, 6Fh, 66h, 52h, 52h, 51h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 87h, 6Dh, 6Fh, 6Eh, 83h, 86h, 86h, 85h, 85h, 85h, 85h, 8Ah, 79h
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 88h, 6Ch, 6Fh, 6Fh, 6Fh, 6Fh, 66h, 55h, 52h, 54h,0B4h,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 87h, 6Bh, 6Eh, 6Dh, 78h, 86h, 86h, 85h, 85h, 85h, 85h, 8Ah, 79h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 7Fh, 71h, 6Fh, 6Fh, 6Fh, 6Fh, 66h, 55h, 55h, 54h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh, 87h, 6Bh, 6Eh, 6Dh, 7Dh, 86h, 85h, 86h, 85h, 85h, 85h, 8Ah, 79h
                db 0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 7Fh, 7Ah, 6Fh, 6Fh, 6Fh, 6Fh, 66h, 55h, 55h, 54h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 79h, 6Bh, 6Eh, 6Dh, 89h, 86h, 86h, 85h, 86h, 85h, 85h, 8Ah, 87h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh, 7Fh, 7Ah, 6Fh, 6Fh, 6Fh, 6Fh, 66h, 55h, 5Ch, 53h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 79h, 6Bh, 6Eh, 6Dh, 89h, 86h, 86h, 85h, 86h, 85h, 85h, 8Ah, 87h
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 9Eh, 70h, 6Fh, 70h, 6Fh, 6Fh, 66h, 5Ch, 5Ch, 53h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 85h, 6Bh, 6Eh, 6Dh, 84h, 86h, 86h, 85h, 86h, 85h, 85h, 8Ah, 87h
                db    2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 9Eh, 70h, 6Fh, 70h, 6Fh, 6Fh, 66h, 55h, 5Ch, 7Fh,0DAh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 6Ah, 6Bh, 6Eh, 6Dh, 7Eh, 86h, 86h, 86h, 85h, 86h, 85h, 8Ah, 9Dh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh,0DAh,   1,   1,0DAh,0DAh,   1,   1,   1,0DAh,0DAh,0DAh,0DAh,0DAh,   1
                db    1,   1,   1,   2,0DAh,   2,0DAh,   1,   1,   1,0DAh,   1,   1,   1,   1,   1
                db 0DAh,0DAh,0DAh, 9Dh, 70h, 70h, 6Fh, 70h, 6Fh, 66h, 5Ch, 5Dh, 88h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 65h, 6Bh, 6Eh, 6Eh, 9Bh, 86h, 86h, 86h, 85h, 86h, 85h, 8Ah, 9Dh
                db    1,   1,   1,0DAh,0DAh,0DAh,0DAh,   1,   1,0DAh,   1,0DAh,0DAh,0DAh,0DAh,   2
                db 0DAh,0DAh,0DAh,0DAh,0DAh,   2,0DAh,   1,   1,   1,0DAh,0B4h, 5Fh, 5Fh, 5Ah, 5Ah
                db  88h, 88h, 88h, 7Fh, 7Fh, 7Fh, 7Fh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Dh
                db  9Dh, 9Dh, 9Dh, 9Dh, 9Dh, 9Dh, 87h, 87h, 87h, 87h, 87h, 79h, 79h, 79h, 79h, 86h
                db  86h, 85h, 8Ah, 7Dh, 70h, 70h, 70h, 6Fh, 70h, 6Bh, 5Ch, 5Dh, 88h,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 78h, 6Bh, 6Eh, 6Eh, 8Ah, 86h, 86h, 86h, 85h, 86h, 85h, 85h, 87h
                db  7Fh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Eh, 9Dh, 9Dh, 9Dh, 9Dh
                db  87h, 87h, 87h, 87h, 87h, 87h, 87h, 79h, 79h, 79h, 79h, 86h, 86h, 86h, 85h, 85h
                db  8Ah, 8Ah, 7Eh, 7Eh, 84h, 89h, 7Dh, 7Dh, 78h, 83h, 83h, 77h, 77h, 77h, 7Ch, 7Ch
                db  7Ch, 75h, 7Bh, 7Bh, 7Bh, 82h, 6Ch, 82h, 7Ah, 7Ah, 7Ah, 7Ah, 7Ah, 70h, 6Fh, 6Fh
                db  6Fh, 6Fh, 6Eh, 6Fh, 7Ah, 70h, 70h, 70h, 70h, 66h, 5Ch, 5Dh, 5Ah,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1, 77h, 6Bh, 6Eh, 6Eh, 85h, 86h, 86h, 86h, 86h, 86h, 85h, 86h, 85h
                db  85h, 85h, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 84h, 84h
                db  84h, 84h, 84h, 89h, 89h, 89h, 89h, 7Dh, 7Dh, 78h, 78h, 78h, 78h, 78h, 78h, 83h
                db  83h, 83h, 83h, 83h, 83h, 77h, 77h, 77h, 77h, 7Ch, 7Ch, 7Ch, 7Ch, 7Ch, 7Ch, 7Ch
                db  75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 7Bh, 7Bh, 7Bh, 82h, 82h, 71h, 82h, 6Ch, 6Ch, 7Ah
                db  71h, 7Ah, 7Ah, 7Ah, 7Ah, 70h, 70h, 6Fh, 70h, 6Bh, 5Ch, 60h, 5Ah,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0DAh, 77h, 6Bh, 6Eh, 6Fh, 85h, 86h, 86h, 86h, 86h, 86h, 85h, 86h, 85h
                db  85h, 85h, 85h, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh, 9Bh
                db  7Eh, 9Bh, 7Eh, 7Eh, 84h, 84h, 84h, 84h, 84h, 89h, 84h, 89h, 89h, 7Dh, 89h, 7Dh
                db  7Dh, 7Dh, 78h, 78h, 78h, 78h, 78h, 83h, 83h, 83h, 77h, 77h, 77h, 77h, 7Ch, 7Ch
                db  7Ch, 7Ch, 7Ch, 75h, 75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 7Bh, 82h, 82h, 82h, 6Ch, 6Ch
                db  71h, 71h, 7Ah, 7Ah, 7Ah, 7Ah, 70h, 70h, 70h, 6Bh, 5Ch, 67h, 5Fh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,0B4h, 75h, 6Bh, 6Dh, 6Fh, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 85h, 86h
                db  85h, 85h, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh, 9Bh
                db  9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 7Eh, 84h, 84h, 84h, 84h, 84h, 89h, 89h, 89h, 7Dh, 89h
                db  7Dh, 7Dh, 7Dh, 78h, 78h, 78h, 78h, 83h, 83h, 83h, 83h, 77h, 77h, 77h, 7Ch, 7Ch
                db  7Ch, 7Ch, 7Ch, 75h, 75h, 75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 82h, 71h, 82h, 71h, 6Ch
                db  7Ah, 71h, 6Ch, 7Ah, 7Ah, 7Ah, 70h, 70h, 70h, 6Dh, 5Ch, 67h, 5Fh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 5Fh, 75h, 6Bh, 6Dh, 70h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 85h
                db  86h, 85h, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah
                db  9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 84h, 7Eh, 84h, 84h, 84h, 84h, 89h, 84h, 89h, 89h, 7Dh
                db  7Dh, 7Dh, 7Dh, 7Dh, 78h, 7Dh, 78h, 78h, 83h, 83h, 83h, 83h, 77h, 77h, 77h, 7Ch
                db  77h, 7Ch, 7Ch, 75h, 75h, 75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 7Bh, 82h, 82h, 82h, 71h
                db  71h, 7Ah, 71h, 7Ah, 7Ah, 7Ah, 7Ah, 70h, 70h, 6Bh, 5Ch, 62h,0DAh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 5Fh, 71h, 6Dh, 6Dh, 70h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 85h, 85h
                db  86h, 85h, 85h, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah
                db  9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 84h, 84h, 84h, 84h, 84h, 84h, 89h, 89h, 89h, 89h
                db  89h, 7Dh, 7Dh, 78h, 78h, 78h, 78h, 83h, 83h, 83h, 83h, 77h, 77h, 77h, 77h, 7Ch
                db  7Ch, 7Ch, 7Ch, 7Ch, 75h, 75h, 75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 82h, 82h, 71h, 82h
                db  6Ch, 71h, 7Ah, 6Ch, 7Ah, 7Ah, 7Ah, 70h, 70h, 6Dh, 66h, 62h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 5Ah, 6Ch, 6Dh, 6Dh, 7Ah, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h
                db  85h, 86h, 85h, 85h, 85h, 85h, 85h, 8Ah, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah
                db  9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 84h, 84h, 84h, 84h, 84h, 84h, 84h, 89h, 89h, 64h
                db  7Dh, 7Dh, 7Dh, 7Dh, 78h, 78h, 78h, 78h, 78h, 83h, 83h, 83h, 77h, 77h, 77h, 77h
                db  7Ch, 7Ch, 7Ch, 7Ch, 7Ch, 75h, 75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 7Bh, 82h, 82h, 82h
                db  71h, 71h, 6Ch, 71h, 7Ah, 7Ah, 7Ah, 70h, 7Ah, 6Dh, 66h, 69h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 88h, 7Ah, 6Dh, 6Dh, 6Ch, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h
                db  85h, 86h, 85h, 85h, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah
                db  8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 7Eh, 84h, 84h, 84h, 89h, 84h, 89h, 89h, 89h
                db  89h, 89h, 7Dh, 7Dh, 7Dh, 78h, 78h, 78h, 78h, 83h, 83h, 83h, 83h, 77h, 77h, 77h
                db  7Ch, 7Ch, 7Ch, 7Ch, 7Ch, 75h, 75h, 75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 82h, 71h, 82h
                db  82h, 71h, 7Ah, 71h, 6Ch, 7Ah, 7Ah, 7Ah, 70h, 6Dh, 66h, 77h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 7Fh, 6Fh, 6Dh, 6Dh, 71h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h
                db  85h, 86h, 85h, 85h, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah
                db  8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 84h, 84h, 84h, 84h, 84h, 84h, 84h, 89h, 89h
                db  7Dh, 89h, 7Dh, 7Dh, 7Dh, 7Dh, 78h, 78h, 78h, 83h, 83h, 83h, 83h, 77h, 77h, 77h
                db  77h, 7Ch, 77h, 7Ch, 7Ch, 7Ch, 75h, 75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 7Bh, 82h, 82h
                db  82h, 71h, 7Ah, 71h, 71h, 6Ch, 7Ah, 7Ah, 70h, 6Eh, 66h, 89h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 9Eh, 6Eh, 6Dh, 6Dh, 71h, 79h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h
                db  86h, 85h, 86h, 85h, 85h, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah
                db  8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 84h, 84h, 84h, 84h, 84h, 84h, 89h, 89h
                db  89h, 7Dh, 89h, 7Dh, 7Dh, 7Dh, 7Dh, 78h, 78h, 83h, 83h, 83h, 83h, 77h, 77h, 77h
                db  77h, 72h, 7Ch, 7Ch, 7Ch, 7Ch, 75h, 75h, 75h, 75h, 75h, 7Bh, 7Bh, 7Bh, 82h, 82h
                db  71h, 6Ch, 71h, 7Ah, 7Ah, 7Ah, 7Ah, 70h, 6Fh, 6Eh, 66h, 7Eh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh, 9Eh, 6Dh, 6Dh, 6Bh, 7Bh, 79h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h
                db  86h, 86h, 85h, 86h, 85h, 85h, 85h, 85h, 85h, 8Ah, 85h, 85h, 8Ah, 8Ah, 8Ah, 8Ah
                db  8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 84h, 84h, 84h, 84h, 84h, 84h, 89h
                db  89h, 89h, 7Dh, 7Dh, 7Dh, 7Dh, 7Dh, 78h, 78h, 78h, 78h, 83h, 83h, 83h, 77h, 77h
                db  77h, 77h, 7Ch, 7Ch, 7Ch, 7Ch, 75h, 75h, 7Bh, 75h, 7Bh, 7Bh, 7Bh, 7Bh, 71h, 82h
                db  82h, 82h, 7Ah, 71h, 71h, 71h, 7Bh, 75h, 75h, 6Eh, 66h, 85h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh, 9Dh, 6Bh, 6Dh, 6Bh, 75h, 79h, 86h, 86h, 86h, 86h, 86h, 86h, 86h, 86h
                db  86h, 86h, 85h, 86h, 85h, 85h, 85h, 85h, 85h, 85h, 8Ah, 85h, 8Ah, 8Ah, 8Ah, 8Ah
                db  8Ah, 8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 7Eh, 84h, 84h, 84h, 84h, 84h, 84h
                db  89h, 89h, 89h, 89h, 7Dh, 7Dh, 7Dh, 78h, 78h, 78h, 78h, 83h, 83h, 83h, 83h, 77h
                db  77h, 77h, 7Ch, 7Ch, 72h, 77h, 77h, 77h, 77h, 77h, 68h, 68h, 78h, 78h, 64h, 64h
                db  65h, 65h, 65h, 63h, 63h, 63h, 63h, 61h, 61h, 6Fh, 66h, 86h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 9Dh, 6Bh, 6Dh, 6Bh, 77h, 79h, 79h, 86h, 86h, 86h, 86h, 86h, 86h, 86h
                db  86h, 86h, 86h, 85h, 86h, 85h, 85h, 85h, 85h, 85h, 85h, 85h, 85h, 85h, 85h, 85h
                db  8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 8Ah, 9Bh, 9Bh, 9Bh, 7Eh, 7Eh, 7Eh, 84h, 84h, 89h, 89h
                db  89h, 7Dh, 7Dh, 7Dh, 7Dh, 78h, 78h, 78h, 78h, 68h, 68h, 68h, 78h, 68h, 78h, 68h
                db  68h, 78h, 64h, 64h, 64h, 65h, 65h, 65h, 63h, 63h, 61h, 61h, 61h, 61h, 61h, 61h
                db  61h, 61h, 61h, 61h, 61h, 61h, 61h, 61h, 61h, 6Fh, 66h, 79h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 87h, 66h, 6Bh, 66h, 83h, 79h, 79h, 79h, 79h, 79h, 79h, 79h, 79h, 79h
                db  79h, 86h, 86h, 86h, 86h, 86h, 86h, 85h, 85h, 85h, 8Ah, 8Ah, 8Ah, 9Bh, 9Bh, 7Eh
                db  7Eh, 84h, 84h, 84h, 89h, 7Dh, 7Dh, 78h, 78h, 77h, 77h, 77h, 69h, 69h, 7Ch, 69h
                db  69h, 69h, 69h, 69h, 69h, 72h, 72h, 72h, 72h, 68h, 68h, 68h, 68h, 68h, 64h, 64h
                db  64h, 64h, 64h, 64h, 65h, 65h, 65h, 65h, 63h, 63h, 63h, 63h, 63h, 61h, 61h, 61h
                db  61h, 61h, 61h, 61h, 61h, 61h, 61h, 61h, 63h, 6Fh, 66h, 79h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DAh, 87h, 66h, 66h, 66h, 78h, 79h, 86h, 86h, 86h, 86h, 85h, 85h, 8Ah, 9Bh
                db  84h, 7Dh, 78h, 77h, 77h, 7Ch, 75h, 75h, 75h, 75h, 7Bh, 71h, 71h, 71h, 71h, 6Ch
                db  6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 62h, 7Bh, 75h, 62h
                db  75h, 75h, 75h, 69h, 69h, 72h, 69h, 72h, 68h, 68h, 68h, 68h, 68h, 68h, 64h, 78h
                db  64h, 64h, 64h, 64h, 64h, 65h, 65h, 65h, 63h, 63h, 63h, 63h, 61h, 63h, 61h, 61h
                db  61h, 61h, 61h, 61h, 63h, 61h, 61h, 63h, 65h, 66h, 66h, 79h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1, 9Eh, 86h, 87h, 9Dh, 7Eh, 70h, 7Ah, 7Ah, 70h, 70h, 6Fh, 6Fh, 6Eh, 6Eh
                db  6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Eh, 6Eh, 6Eh, 6Eh, 6Fh, 6Fh, 6Fh, 6Fh, 70h
                db  70h, 70h, 70h, 7Ah, 6Ch, 6Ch, 6Ch, 6Ch, 62h, 7Bh, 7Bh, 7Bh, 7Bh, 75h, 75h, 75h
                db  75h, 69h, 69h, 69h, 69h, 72h, 72h, 72h, 68h, 68h, 68h, 68h, 68h, 68h, 68h, 64h
                db  64h, 64h, 64h, 64h, 64h, 65h, 65h, 65h, 65h, 65h, 63h, 65h, 63h, 65h, 63h, 63h
                db  63h, 63h, 63h, 63h, 61h, 61h, 85h, 86h, 86h, 77h, 69h, 9Dh,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1, 6Ah, 66h, 6Bh, 6Bh, 6Bh, 6Bh, 6Bh, 6Bh, 6Bh, 6Bh
                db  6Dh, 6Dh, 6Eh, 6Eh, 6Eh, 6Fh, 6Eh, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 70h, 70h, 70h, 70h
                db  70h, 7Ah, 6Ch, 6Ch, 6Ch, 71h, 71h, 71h, 71h, 71h, 7Bh, 75h, 62h, 75h, 75h, 75h
                db  75h, 69h, 69h, 69h, 69h, 69h, 69h, 72h, 72h, 68h, 72h, 72h, 68h, 68h, 68h, 68h
                db  68h, 68h, 68h, 68h, 64h, 64h, 65h, 63h, 61h, 85h, 86h, 79h, 79h, 87h, 87h, 87h
                db  9Dh, 53h, 9Eh, 7Fh,0DCh, 88h, 88h, 5Ah, 5Ah, 5Ah, 5Ah,0B4h,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1, 7Eh, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 6Eh, 6Eh, 6Eh, 6Eh, 6Eh, 6Fh, 6Fh, 6Fh, 6Fh, 6Fh, 70h, 70h, 70h, 70h, 70h
                db  7Ah, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 6Ch, 71h, 6Ch
                db  6Ch, 62h, 76h, 62h, 76h, 69h, 69h, 69h, 68h, 68h, 64h, 63h, 6Ah, 86h, 86h, 79h
                db  79h, 87h, 87h, 9Dh, 9Dh, 9Eh, 7Fh,0DCh, 5Ah, 5Fh, 5Fh,0DAh,0DAh,0DAh,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1, 7Dh, 66h, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh, 6Dh
                db  6Dh, 74h, 6Eh, 74h, 6Eh, 6Fh, 6Eh, 6Eh, 6Fh, 6Eh, 6Eh, 6Eh, 6Eh, 6Eh, 6Eh, 6Eh
                db  6Eh, 6Eh, 6Eh, 6Fh, 6Fh, 70h, 70h, 6Ch, 6Ch, 62h, 76h, 69h, 69h, 78h, 84h, 6Ah
                db  86h, 79h, 79h, 87h, 87h, 9Dh, 9Dh, 9Dh, 9Eh, 7Fh, 7Fh, 5Ah,0DAh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1, 7Dh, 66h, 6Dh, 6Dh, 6Dh, 6Bh, 6Bh, 6Bh, 6Bh, 66h
                db  66h, 66h, 66h, 66h, 6Bh, 6Bh, 6Bh, 6Bh, 6Dh, 6Eh, 70h, 71h, 75h, 77h, 7Dh, 84h
                db  6Ah, 85h, 86h, 79h, 79h, 87h, 87h, 87h, 9Dh, 9Dh, 9Eh, 9Eh, 7Fh, 7Fh, 5Ah, 5Fh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1, 75h, 66h, 66h, 66h, 6Bh, 6Bh, 6Bh, 6Eh, 70h, 71h
                db  69h, 7Dh, 7Eh, 6Ah, 86h, 79h, 79h, 87h, 87h, 9Dh, 9Eh, 9Eh, 7Fh, 88h, 5Ah, 5Ah
                db  5Fh,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,0DAh, 79h, 79h, 79h, 87h, 9Dh, 9Dh, 9Eh, 9Eh, 7Fh, 88h
                db  5Ah, 5Fh, 5Fh,0B4h,0DAh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   2,   1,   1,   1,   1,   1,0DAh,   1,   1,   1,   1,0DBh
                db    1,   1,   1,0DAh,   1,0DAh,0DAh,   1,   1,   1,0B4h,   1,0B4h,0DAh,   1,   1
                db    1,   2, 5Ah,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E3h
                db 0E5h,0E3h,0DDh,0E2h,0E3h, 17h,0DFh,0E5h,0E3h,0E3h,0E3h,0E5h,0DFh,0B4h,0E1h,0E6h
                db 0E7h,0E4h,0B4h, 49h,0E5h,0E4h,0B4h,   1,   1,0DDh,0E5h,0E6h,0E3h,   1,   1,0DBh
                db 0E4h,0E6h,0E7h,0E6h,0DDh,   1,   1,0D9h,0E5h,0E6h,0E3h,0B4h,   1,0E4h,0E5h,0E2h
                db    1,0E0h,0E5h,0E0h,0B3h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,0E6h
                db    0, 3Ch,0E4h,0E6h, 2Ch,0E6h,0E2h,   0, 3Ch,0E8h, 33h,   0,0E4h,0DCh,0B2h,   0
                db    0, 2Ch,0E5h,0E5h,0EBh,0EBh, 49h,   1,0DDh,0E8h,   0,   0, 2Ch,0E7h,0B4h,0E4h
                db 0EAh,   0,   0,   0,0E8h,0DCh,0BDh,0E7h,   0,   0,0E9h,0E5h,0D9h,0E8h,0EBh,0E7h
                db 0B4h,0E8h,   0, 2Eh,0E0h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E5h
                db    0,0EBh,0E5h,0E6h,   0,0B2h, 49h,0EAh,   0,0E8h,0E9h,0EBh,0E5h,0E4h,   0,   0
                db    0,   0,0EAh,0E6h,0EBh,   0,0E3h,   1,0E5h,   0,   0,0EBh,   0,   0,0E5h,0B2h
                db    0, 2Ch,0EBh,   0,   0,0E5h,0E4h,   0,   0,   0,   0,   0,0E4h,0E6h,   0,0B2h
                db 0E3h,   0,   0,   0,0E1h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E3h
                db    0,   0,0E7h,0E6h,   0,0EBh,0E4h,0E9h,   0,0E7h,0E9h,   0,0E7h,0E7h,0EBh,0EAh
                db 0E8h, 3Ch, 47h,0B2h,0E9h,   0,0E5h,   1,0E7h,   0,0CBh,0E7h, 33h,   0, 5Eh,   0
                db    0,0E8h,0E4h,0E9h,   0,0E8h,0E8h,0CBh,0EAh,0E8h,0CBh,   0,0B2h,0E6h,   0,0E9h
                db 0E4h,0EBh,   0,0E9h,0E1h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DFh
                db 0EAh,   0,0E7h,0E7h,   0,   0,0E6h,0E8h,   0,0E8h,0B2h,0EBh,0E8h,0E8h,0EBh,0B2h
                db 0DAh,0E7h,0E9h,0B2h, 47h,   0,0E6h,0B4h,0E8h,   0,0B2h,   1,0E6h, 2Ch,0E8h,0E8h
                db 0E8h,0E3h,0DCh,0E8h,   0,0E9h, 31h,   0,0B2h,   7,0E6h,   0,0EAh,0E8h, 47h,0EAh
                db 0E4h,0E9h,   0,0E5h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DCh
                db 0E9h,   0,0E8h,0E7h,   0,   0,0B2h,0E8h,0EBh,0E9h,0E8h,   0, 31h,0E8h,   0,0E7h
                db    1,0DDh,0E2h, 43h,0B2h,   0,0E7h,0DAh,0B2h,   0,0B2h,   1, 49h, 3Ch,0E7h,0DDh
                db 0DDh,0E5h,0E8h,   0,   0, 33h,0E9h,   0,0E8h,   1,   1,   0,   0,0E8h, 3Ch,   0
                db 0E5h,0B2h,0EBh,0E6h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh
                db 0E8h,   0,0E9h,0E8h,   0,   0,0E9h,0E8h,   0,0E9h,0E7h,   0,0EAh,0E8h,   0,0B2h
                db 0DBh,   1,   1,   1,0E8h,0EBh,0B2h,   1,0E7h,   0,0E9h,0DBh,0DDh,0E9h,   0,0E6h
                db 0E5h,   0,   0,   0,   0,0E7h,0E8h,0EBh,0B2h,0DBh,0DFh,0EAh,   0,0E8h,0E9h,   0
                db 0E6h,0E8h,0EBh,0E8h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0E8h,0EBh,0CBh,0E9h,   0,   0, 47h,0E9h,   0,0E9h,0E8h,   0,0E9h,0E8h,   0,0EAh
                db 0E0h,   1,0E2h, 49h,0E7h,   0, 47h, 27h,0E7h,0EBh,   0,0E2h,   1,0B2h,   0,0E8h
                db 0E9h,   0,   0, 47h,0B2h,0E0h,0E7h,   0,0EAh,0DFh,0DBh,0E9h,   0,0E8h,0E9h,   0
                db 0E6h,0E6h,   0,0E8h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0E7h,   0,   0,   0,0CBh,0E9h,0CBh,   0,   0,   0,0E8h,0E9h,0EAh,0E8h,   0,   0
                db 0E5h,0DFh,0EAh,0E9h,0E8h,   0,   0,0E9h,0B2h,   0,   0,0E5h,   1,0E9h,   0,0E9h
                db  47h,   0,0E7h,0E5h,0E5h,0E3h,0E6h,   0,   0,0E5h,   2,0E9h,   0,0E7h,0E8h,0EBh
                db 0E7h,0E6h,   0,0B2h,0DEh,0DAh,0DCh,0DCh,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0E6h,   0,   0,   0,0EBh,0E7h,0EAh,   0,   0,   0,0E8h,0E9h,   0,0E6h,0B2h,   0
                db 0E9h,0E7h,0EBh,0E9h,0E7h,   0,   0,   0, 2Ch, 3Ch,0CBh, 31h,0E5h,0EAh,   0,0E8h
                db 0EAh,   0,0E4h,0E4h,   0, 47h,0E5h,0EBh,   0,0E8h,0E6h,   0,   0,0B2h,0E9h,   0
                db 0E9h,0B2h,   0,0EBh,0E7h,0DDh,0E3h,0E2h,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0E4h,   0,   0,   0, 47h,0E4h,0B2h,   0,   0,   0,0E8h,0E9h,   0,0E6h,0E5h,0EBh
                db    0,   0,   0,0B2h,0E2h, 47h,   0,   0, 3Ch,0E7h,   0,   0,   0,   0,0CBh,0E4h
                db 0B2h,   0,0E9h,0E9h,   0,0EAh,0DEh,0E6h,   0,   0,   0,   0,0EAh,0B2h,0EBh,   0
                db    0,   0,   0,   0,0CBh, 49h,0E5h,0E3h,0DBh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db  49h,0EBh,   0,   0,   0, 49h,0E6h,   0,   0,   0,0E8h,0EAh,   0,0E8h,0DCh,0E7h
                db 0EBh,   0,   0,0E5h,0DCh,0B2h, 47h,0B2h, 5Eh,0E5h,0E6h,   0,   0,   0,0E7h, 5Fh
                db 0E3h,0CBh,   0,   0,   0,0E7h,   1, 0Bh,0B2h,   0,   0,   0,0E5h,0E5h,   0,   0
                db 0EBh,0E9h,0CBh,   0,0CBh,0E3h,0E3h,0E1h,0DAh,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DDh,0E9h,   0,   0,   0,0E2h,0E4h,   0,   0,   0,0B2h,0E0h,0E0h,0DFh,   1,   3
                db 0E2h,0E4h,0E2h,0B4h,   1, 0Dh,0E0h,0DEh,0E0h,0E0h,   7,0E3h,0E6h,0E5h,0DCh,   1
                db    1, 49h,0E6h,0E6h,0E4h,0DDh,   1,   1,0DEh,0E4h,0E6h,0E2h, 48h,0DCh,0E0h,   0
                db 0EBh,0E5h,0E9h,   0,0E6h,0DCh,0DBh,   2,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db  5Ah,0B2h,   0,   0,   0,0E2h,0DFh,0EAh,   0,   0,0E9h,0E5h,0E6h,0E6h,0DBh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DAh,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E0h,0CBh
                db    0,0E8h, 30h,   0,0E7h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh,0E8h,   0,   0,   0,0E3h,   1,0B2h,   0,   0,0EAh,0E8h,   0,0EBh,0DEh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0DBh,0E8h
                db    0,   0,0E8h,0E7h,0E6h,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0E6h,0B2h,0E8h,0B2h, 49h,0DAh,0E5h,0B2h,0E8h,0E8h,0E7h,0E8h,0B2h,0E1h,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,0E1h
                db 0E7h,0E7h,0DEh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,0DEh,0DFh,0DFh,0DFh, 5Ah,   1,0DCh,0DFh,0DFh,0DFh,0DEh,0DEh,0DFh,0DCh,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db 0DAh,0DBh,0DCh,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                db    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
DOSCODE         ends

; ===========================================================================

; Segment type: Pure data
WINDATA         segment byte public 'DATA' use16
                assume cs:WINDATA
                ;org 6
dword_43896     dd 200h
dword_4389A     dd 0
aCWindows       db 'C:\WINDOWS',0       ; ...
byte_438A9      db 0
off_438AA       dw offset aCWindows     ; "C:\\WINDOWS"
                dw 43F9h                ; WINDATA segment
                                        ; (offset 43890h from beginning of WinME IO.SYS + 700h)
aAsd_wizard     db 'ASD_Wizard',0
                db    0
aAsd_exeW       db 'ASD.EXE /w',0
                db 0
word_438C6      dw 0
aSoftwareMicrosoftWin_0 db 'Software\Microsoft\Windows\CurrentVersion',0 ; ...
aSoftwareMicrosoftWin_1 db 'Software\Microsoft\Windows\CurrentVersion\Setup',0 ; ...
aSystemCurrentcontrol_0 db 'System\CurrentControlSet\Control\WinBoot',0 ; ...
                db 0
aSystemCurrentcontrol_1 db 'System\CurrentControlSet\Control\FileSystem',0 ; ...
aSoftwareMicrosoftWin_2 db 'Software\Microsoft\Windows\CurrentVersion\Network\Real Mode Net',0 ; ...
aSoftwareMicrosoftWin_3 db 'Software\Microsoft\Windows\CurrentVersion\Network',0 ; ...
aSystemCurrentcontrol_2 db 'System\CurrentControlSet\Control\Nls\Codepage',0 ; ...
aSystemCurrentcontrol_3 db 'System\CurrentControlSet\Control\SessionManager\Environment',0 ; ...
                dw offset aSoftwareMicrosoftWin_0 ; "Software\\Microsoft\\Windows\\CurrentVe"...
                dw 43F9h
                dw offset aSoftwareMicrosoftWin_0 ; "Software\\Microsoft\\Windows\\CurrentVe"...
                dw 43F9h
                dw offset aSoftwareMicrosoftWin_1 ; "Software\\Microsoft\\Windows\\CurrentVe"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_0 ; "System\\CurrentControlSet\\Control\\Win"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_1 ; "System\\CurrentControlSet\\Control\\Fil"...
                dw 43F9h
                dw offset aSoftwareMicrosoftWin_2 ; "Software\\Microsoft\\Windows\\CurrentVe"...
                dw 43F9h
                dw offset aSoftwareMicrosoftWin_3 ; "Software\\Microsoft\\Windows\\CurrentVe"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_1 ; "System\\CurrentControlSet\\Control\\Fil"...
                dw 43F9h
off_43A74       dw offset aSystemCurrentcontrol_2 ; "System\\CurrentControlSet\\Control\\Nls"...
                dw 43F9h
off_43A78       dw offset aSystemCurrentcontrol_2 ; "System\\CurrentControlSet\\Control\\Nls"...
                dw 43F9h
off_43A7C       dw offset aSystemCurrentcontrol_2 ; "System\\CurrentControlSet\\Control\\Nls"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_2 ; "System\\CurrentControlSet\\Control\\Nls"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_2 ; "System\\CurrentControlSet\\Control\\Nls"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_2 ; "System\\CurrentControlSet\\Control\\Nls"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_2 ; "System\\CurrentControlSet\\Control\\Nls"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_2 ; "System\\CurrentControlSet\\Control\\Nls"...
                dw 43F9h
                dw offset aSystemCurrentcontrol_3 ; "System\\CurrentControlSet\\Control\\Ses"...
                dw 43F9h
aSystemroot     db 'SystemRoot',0       ; ...
aBootcount      db 'BootCount',0        ; ...
aLastdrive_0    db 'LASTDRIVE',0        ; ...
aDoublebuffer_0 db 'DoubleBuffer',0     ; ...
aWin31filesystem db 'Win31FileSystem',0 ; ...
aSetupn         db 'SetupN',0           ; ...
aInstalled      db 'INSTALLED',0        ; ...
aGetdevparmsioctl db 'GetDevParmsIoctl',0 ; ...
aDoscp          db 'DOSCP',0            ; ...
aOemcc          db 'OEMCC',0            ; ...
aKybtype        db 'KYBTYPE',0          ; ...
aKyblayout      db 'KYBLAYOUT',0        ; ...
aLangid         db 'LANGID',0           ; ...
aCountryfname   db 'COUNTRYFNAME',0     ; ...
aCodepagefname  db 'CODEPAGEFNAME',0    ; ...
aKybfname       db 'KYBFNAME',0         ; ...
aZeroByte       db 0                    ; ...
                dw offset aSystemroot   ; "SystemRoot"
                dw 43F9h
                dw offset aBootcount    ; "BootCount"
                dw 43F9h
                dw offset aLastdrive_0  ; "LASTDRIVE"
                dw 43F9h
                dw offset aDoublebuffer_0 ; "DoubleBuffer"
                dw 43F9h
                dw offset aWin31filesystem ; "Win31FileSystem"
                dw 43F9h
                dw offset aSetupn       ; "SetupN"
                dw 43F9h
                dw offset aInstalled    ; "INSTALLED"
                dw 43F9h
                dw offset aGetdevparmsioctl ; "GetDevParmsIoctl"
                dw 43F9h
                dw offset aDoscp        ; "DOSCP"
                dw 43F9h
                dw offset aOemcc        ; "OEMCC"
                dw 43F9h
                dw offset aKybtype      ; "KYBTYPE"
                dw 43F9h
                dw offset aKyblayout    ; "KYBLAYOUT"
                dw 43F9h
                dw offset aLangid       ; "LANGID"
                dw 43F9h
                dw offset aCountryfname ; "COUNTRYFNAME"
                dw 43F9h
                dw offset aCodepagefname ; "CODEPAGEFNAME"
                dw 43F9h
                dw offset aKybfname     ; "KYBFNAME"
                dw 43F9h
                dw offset aZeroByte
                dw 43F9h
a0123456789abcdef db '0123456789ABCDEF',0
                db 0
aXxx            db '{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}',0
aP              db 'P',0
aAsd_dat        db 'ASD.dat',0
aSystemCurrentcontrolse db 'System\CurrentControlSet\Control\ASD\Prob',0
aSoftwareMicrosoftWindo db 'Software\Microsoft\Windows\CurrentVersion\RunOnce',0
                db 0
aVmmhiber_w9x   db 'VMMHIBER.W9X',0
byte_43C31      db 21 dup(0)
                dw 0FFFFh
byte_43C48      db 20 dup(0)
                db  2Eh ; .
                db  5Ch ; \
                dw 0
HK_1            db 'HK'                 ; ...
                dw 0
                dw 25h
                db 8 dup(0)
                dd 0FFFFFFFFh
                dw 0FFFFh
                db 0FFh
                db 0FFh
                dd 2000000h
                db 8 dup(0)
                dd 0FFFFFFFFh
                dw 0FFFFh
HK_2            db 'HK'                 ; ...
                dw 0
                db 25h
                db 9 dup(0)
                dd 0FFFFFFFFh
                dd 0FFFFFFFFh
                dd 3000000h
                db 8 dup(0)
                dd 0FFFFFFFFh
                dw 0FFFFh
HK_3            db 'HK'
                dw 0
                db 5
                db 9 dup(0)
                dd 0FFFFFFFFh
                dd 0FFFFFFFFh
                db 12 dup(0)
                dd 0FFFFFFFFh
                dw 0FFFFh
                db 8 dup(0)
                dw offset HK_1          ; "HK"
                dw 43F9h
                dw offset HK_2          ; "HK"
                dw 43F9h
                db 24 dup(0)
aSoftwareClasses db 'SOFTWARE\CLASSES',0
                db 0
a_default       db '.DEFAULT',0
                db 9 dup(0)
                dd 0FFFFFFFFh
                dd 0
aClasses        db 'CLASSES',0
                dw 7
aSoftware       db 'SOFTWARE',0
                dw 800h
                db 5 dup(0)
aClasses_dat    db 'CLASSES.DAT',0
                dw 43F9h
byte_43D54      db 172 dup(0)
WINDATA         ends


                end
